/* 
 * @(#)Fgw.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc;
import .ietfInetTypes.IpAddress;

import Connection;

import Element;

import Engineering;

import Epc;

import Feature;

import JInterface;

import JNCException;

import MmeNodalQos;

import NodeSet;

import ServiceArea;

import Statistics;

import Status;

import Support;

import Trace;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

import hctaEpc.fgw.System;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw"
 * <p>
 * See line 57 in
 * fgwConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Fgw extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "status".
     */
    public Status status = null;

    /**
     * Field for child container "system".
     */
    public System system = null;

    /**
     * Field for child container "interface".
     */
    public JInterface interface_ = null;

    /**
     * Field for child container "engineering".
     */
    public Engineering engineering = null;

    /**
     * Field for child container "service-area".
     */
    public ServiceArea serviceArea = null;

    /**
     * Field for child container "trace".
     */
    public Trace trace = null;

    /**
     * Field for child container "statistics".
     */
    public Statistics statistics = null;

    /**
     * Field for child container "feature".
     */
    public Feature feature = null;

    /**
     * Field for child container "mme-nodal-qos".
     */
    public MmeNodalQos mmeNodalQos = null;

    /**
     * Field for child container "support".
     */
    public Support support = null;

    /**
     * Field for child container "connection".
     */
    public Connection connection = null;

    /**
     * Constructor for an empty Fgw object.
     */
    public Fgw() {
        super(Epc.NAMESPACE, "fgw");
        setDefaultPrefix();
        setPrefix(Epc.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Fgw clone() {
        return (Fgw)cloneContent(new Fgw());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Fgw cloneShallow() {
        return (Fgw)cloneShallowContent(new Fgw());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "instance-name",
            "instance-number",
            "oam-ip-address",
            "status",
            "system",
            "interface",
            "engineering",
            "service-area",
            "trace",
            "statistics",
            "feature",
            "mme-nodal-qos",
            "support",
            "connection",
        };
    }

    /* Access methods for optional leaf child: "instance-name". */

    /**
     * Gets the value for child leaf "instance-name".
     * @return The value of the leaf.
     */
    public YangString getInstanceNameValue() throws JNCException {
        return (YangString)getValue("instance-name");
    }

    /**
     * Sets the value for child leaf "instance-name",
     * using instance of generated typedef class.
     * @param instanceNameValue The value to set.
     * @param instanceNameValue used during instantiation.
     */
    public void setInstanceNameValue(YangString instanceNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "instance-name",
            instanceNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "instance-name",
     * using a String value.
     * @param instanceNameValue used during instantiation.
     */
    public void setInstanceNameValue(String instanceNameValue)
            throws JNCException {
        setInstanceNameValue(new YangString(instanceNameValue));
    }

    /**
     * Unsets the value for child leaf "instance-name".
     */
    public void unsetInstanceNameValue() throws JNCException {
        delete("instance-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "instance-name" leaf will not have a value.
     */
    public void addInstanceName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "instance-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "instance-name" with operation "replace".
     */
    public void markInstanceNameReplace() throws JNCException {
        markLeafReplace("instanceName");
    }

    /**
     * Marks the leaf "instance-name" with operation "merge".
     */
    public void markInstanceNameMerge() throws JNCException {
        markLeafMerge("instanceName");
    }

    /**
     * Marks the leaf "instance-name" with operation "create".
     */
    public void markInstanceNameCreate() throws JNCException {
        markLeafCreate("instanceName");
    }

    /**
     * Marks the leaf "instance-name" with operation "delete".
     */
    public void markInstanceNameDelete() throws JNCException {
        markLeafDelete("instanceName");
    }

    /* Access methods for optional leaf child: "instance-number". */

    /**
     * Gets the value for child leaf "instance-number".
     * @return The value of the leaf.
     */
    public YangUInt16 getInstanceNumberValue() throws JNCException {
        return (YangUInt16)getValue("instance-number");
    }

    /**
     * Sets the value for child leaf "instance-number",
     * using instance of generated typedef class.
     * @param instanceNumberValue The value to set.
     * @param instanceNumberValue used during instantiation.
     */
    public void setInstanceNumberValue(YangUInt16 instanceNumberValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "instance-number",
            instanceNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "instance-number",
     * using Java primitive values.
     * @param instanceNumberValue used during instantiation.
     */
    public void setInstanceNumberValue(int instanceNumberValue)
            throws JNCException {
        setInstanceNumberValue(new YangUInt16(instanceNumberValue));
    }

    /**
     * Sets the value for child leaf "instance-number",
     * using a String value.
     * @param instanceNumberValue used during instantiation.
     */
    public void setInstanceNumberValue(String instanceNumberValue)
            throws JNCException {
        setInstanceNumberValue(new YangUInt16(instanceNumberValue));
    }

    /**
     * Unsets the value for child leaf "instance-number".
     */
    public void unsetInstanceNumberValue() throws JNCException {
        delete("instance-number");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "instance-number" leaf will not have a value.
     */
    public void addInstanceNumber() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "instance-number",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "instance-number" with operation "replace".
     */
    public void markInstanceNumberReplace() throws JNCException {
        markLeafReplace("instanceNumber");
    }

    /**
     * Marks the leaf "instance-number" with operation "merge".
     */
    public void markInstanceNumberMerge() throws JNCException {
        markLeafMerge("instanceNumber");
    }

    /**
     * Marks the leaf "instance-number" with operation "create".
     */
    public void markInstanceNumberCreate() throws JNCException {
        markLeafCreate("instanceNumber");
    }

    /**
     * Marks the leaf "instance-number" with operation "delete".
     */
    public void markInstanceNumberDelete() throws JNCException {
        markLeafDelete("instanceNumber");
    }

    /* Access methods for optional leaf child: "oam-ip-address". */

    /**
     * Gets the value for child leaf "oam-ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getOamIpAddressValue() throws JNCException {
        return (IpAddress)getValue("oam-ip-address");
    }

    /**
     * Sets the value for child leaf "oam-ip-address",
     * using a JNC type value.
     * @param oamIpAddressValue The value to set.
     * @param oamIpAddressValue used during instantiation.
     */
    public void setOamIpAddressValue(IpAddress oamIpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "oam-ip-address",
            oamIpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "oam-ip-address",
     * using a String value.
     * @param oamIpAddressValue used during instantiation.
     */
    public void setOamIpAddressValue(String oamIpAddressValue)
            throws JNCException {
        setOamIpAddressValue(new IpAddress(oamIpAddressValue));
    }

    /**
     * Unsets the value for child leaf "oam-ip-address".
     */
    public void unsetOamIpAddressValue() throws JNCException {
        delete("oam-ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "oam-ip-address" leaf will not have a value.
     */
    public void addOamIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "oam-ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "oam-ip-address" with operation "replace".
     */
    public void markOamIpAddressReplace() throws JNCException {
        markLeafReplace("oamIpAddress");
    }

    /**
     * Marks the leaf "oam-ip-address" with operation "merge".
     */
    public void markOamIpAddressMerge() throws JNCException {
        markLeafMerge("oamIpAddress");
    }

    /**
     * Marks the leaf "oam-ip-address" with operation "create".
     */
    public void markOamIpAddressCreate() throws JNCException {
        markLeafCreate("oamIpAddress");
    }

    /**
     * Marks the leaf "oam-ip-address" with operation "delete".
     */
    public void markOamIpAddressDelete() throws JNCException {
        markLeafDelete("oamIpAddress");
    }

    /* Access methods for container child: "status". */

    /**
     * Adds container entry "status", using an existing object.
     * @param status The object to add.
     * @return The added child.
     */
    public Status addStatus(Status status) throws JNCException {
        this.status = status;
        insertChild(status, childrenNames());
        return status;
    }

    /**
     * Adds container entry "status".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Status addStatus() throws JNCException {
        Status status = new Status();
        this.status = status;
        insertChild(status, childrenNames());
        return status;
    }

    /**
     * Deletes container entry "status".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteStatus() throws JNCException {
        this.status = null;
        String path = "status";
        return delete(path);
    }

    /* Access methods for container child: "system". */

    /**
     * Adds container entry "system", using an existing object.
     * @param system The object to add.
     * @return The added child.
     */
    public System addSystem(System system) throws JNCException {
        this.system = system;
        insertChild(system, childrenNames());
        return system;
    }

    /**
     * Adds container entry "system".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public System addSystem() throws JNCException {
        System system = new System();
        this.system = system;
        insertChild(system, childrenNames());
        return system;
    }

    /**
     * Deletes container entry "system".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSystem() throws JNCException {
        this.system = null;
        String path = "system";
        return delete(path);
    }

    /* Access methods for container child: "interface". */

    /**
     * Adds container entry "interface_", using an existing object.
     * @param interface_ The object to add.
     * @return The added child.
     */
    public JInterface addJInterface(JInterface interface_) throws JNCException {
        this.interface_ = interface_;
        insertChild(interface_, childrenNames());
        return interface_;
    }

    /**
     * Adds container entry "interface_".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public JInterface addJInterface() throws JNCException {
        JInterface interface_ = new JInterface();
        this.interface_ = interface_;
        insertChild(interface_, childrenNames());
        return interface_;
    }

    /**
     * Deletes container entry "interface_".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteJInterface() throws JNCException {
        this.interface_ = null;
        String path = "interface";
        return delete(path);
    }

    /* Access methods for container child: "engineering". */

    /**
     * Adds container entry "engineering", using an existing object.
     * @param engineering The object to add.
     * @return The added child.
     */
    public Engineering addEngineering(Engineering engineering)
            throws JNCException {
        this.engineering = engineering;
        insertChild(engineering, childrenNames());
        return engineering;
    }

    /**
     * Adds container entry "engineering".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Engineering addEngineering() throws JNCException {
        Engineering engineering = new Engineering();
        this.engineering = engineering;
        insertChild(engineering, childrenNames());
        return engineering;
    }

    /**
     * Deletes container entry "engineering".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteEngineering() throws JNCException {
        this.engineering = null;
        String path = "engineering";
        return delete(path);
    }

    /* Access methods for container child: "service-area". */

    /**
     * Adds container entry "serviceArea", using an existing object.
     * @param serviceArea The object to add.
     * @return The added child.
     */
    public ServiceArea addServiceArea(ServiceArea serviceArea)
            throws JNCException {
        this.serviceArea = serviceArea;
        insertChild(serviceArea, childrenNames());
        return serviceArea;
    }

    /**
     * Adds container entry "serviceArea".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public ServiceArea addServiceArea() throws JNCException {
        ServiceArea serviceArea = new ServiceArea();
        this.serviceArea = serviceArea;
        insertChild(serviceArea, childrenNames());
        return serviceArea;
    }

    /**
     * Deletes container entry "serviceArea".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteServiceArea() throws JNCException {
        this.serviceArea = null;
        String path = "service-area";
        return delete(path);
    }

    /* Access methods for container child: "trace". */

    /**
     * Adds container entry "trace", using an existing object.
     * @param trace The object to add.
     * @return The added child.
     */
    public Trace addTrace(Trace trace) throws JNCException {
        this.trace = trace;
        insertChild(trace, childrenNames());
        return trace;
    }

    /**
     * Adds container entry "trace".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Trace addTrace() throws JNCException {
        Trace trace = new Trace();
        this.trace = trace;
        insertChild(trace, childrenNames());
        return trace;
    }

    /**
     * Deletes container entry "trace".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteTrace() throws JNCException {
        this.trace = null;
        String path = "trace";
        return delete(path);
    }

    /* Access methods for container child: "statistics". */

    /**
     * Adds container entry "statistics", using an existing object.
     * @param statistics The object to add.
     * @return The added child.
     */
    public Statistics addStatistics(Statistics statistics) throws JNCException {
        this.statistics = statistics;
        insertChild(statistics, childrenNames());
        return statistics;
    }

    /**
     * Adds container entry "statistics".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Statistics addStatistics() throws JNCException {
        Statistics statistics = new Statistics();
        this.statistics = statistics;
        insertChild(statistics, childrenNames());
        return statistics;
    }

    /**
     * Deletes container entry "statistics".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteStatistics() throws JNCException {
        this.statistics = null;
        String path = "statistics";
        return delete(path);
    }

    /* Access methods for container child: "feature". */

    /**
     * Adds container entry "feature", using an existing object.
     * @param feature The object to add.
     * @return The added child.
     */
    public Feature addFeature(Feature feature) throws JNCException {
        this.feature = feature;
        insertChild(feature, childrenNames());
        return feature;
    }

    /**
     * Adds container entry "feature".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Feature addFeature() throws JNCException {
        Feature feature = new Feature();
        this.feature = feature;
        insertChild(feature, childrenNames());
        return feature;
    }

    /**
     * Deletes container entry "feature".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteFeature() throws JNCException {
        this.feature = null;
        String path = "feature";
        return delete(path);
    }

    /* Access methods for container child: "mme-nodal-qos". */

    /**
     * Adds container entry "mmeNodalQos", using an existing object.
     * @param mmeNodalQos The object to add.
     * @return The added child.
     */
    public MmeNodalQos addMmeNodalQos(MmeNodalQos mmeNodalQos)
            throws JNCException {
        this.mmeNodalQos = mmeNodalQos;
        insertChild(mmeNodalQos, childrenNames());
        return mmeNodalQos;
    }

    /**
     * Adds container entry "mmeNodalQos".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeNodalQos addMmeNodalQos() throws JNCException {
        MmeNodalQos mmeNodalQos = new MmeNodalQos();
        this.mmeNodalQos = mmeNodalQos;
        insertChild(mmeNodalQos, childrenNames());
        return mmeNodalQos;
    }

    /**
     * Deletes container entry "mmeNodalQos".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeNodalQos() throws JNCException {
        this.mmeNodalQos = null;
        String path = "mme-nodal-qos";
        return delete(path);
    }

    /* Access methods for container child: "support". */

    /**
     * Adds container entry "support", using an existing object.
     * @param support The object to add.
     * @return The added child.
     */
    public Support addSupport(Support support) throws JNCException {
        this.support = support;
        insertChild(support, childrenNames());
        return support;
    }

    /**
     * Adds container entry "support".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Support addSupport() throws JNCException {
        Support support = new Support();
        this.support = support;
        insertChild(support, childrenNames());
        return support;
    }

    /**
     * Deletes container entry "support".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSupport() throws JNCException {
        this.support = null;
        String path = "support";
        return delete(path);
    }

    /* Access methods for container child: "connection". */

    /**
     * Adds container entry "connection", using an existing object.
     * @param connection The object to add.
     * @return The added child.
     */
    public Connection addConnection(Connection connection) throws JNCException {
        this.connection = connection;
        insertChild(connection, childrenNames());
        return connection;
    }

    /**
     * Adds container entry "connection".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Connection addConnection() throws JNCException {
        Connection connection = new Connection();
        this.connection = connection;
        insertChild(connection, childrenNames());
        return connection;
    }

    /**
     * Deletes container entry "connection".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteConnection() throws JNCException {
        this.connection = null;
        String path = "connection";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Status) status = (Status)child;
        else if (child instanceof System) system = (System)child;
        else if (child instanceof JInterface) interface_ = (JInterface)child;
        else if (child instanceof Engineering) engineering = (Engineering)child;
        else if (child instanceof ServiceArea) serviceArea = (ServiceArea)child;
        else if (child instanceof Trace) trace = (Trace)child;
        else if (child instanceof Statistics) statistics = (Statistics)child;
        else if (child instanceof Feature) feature = (Feature)child;
        else if (child instanceof MmeNodalQos) mmeNodalQos = (MmeNodalQos)child;
        else if (child instanceof Support) support = (Support)child;
        else if (child instanceof Connection) connection = (Connection)child;
    }

}
