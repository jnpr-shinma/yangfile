/* 
 * @(#)Connection.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw;

import Context;

import Element;

import ElementChildrenIterator;

import Epc;

import Henb;

import JNCException;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/connection"
 * <p>
 * See line 47 in
 * fgwScCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Connection extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Connection object.
     */
    public Connection() {
        super(Epc.NAMESPACE, "connection");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Connection clone() {
        return (Connection)cloneContent(new Connection());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Connection cloneShallow() {
        return (Connection)cloneShallowContent(new Connection());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "henb",
            "context",
        };
    }

    /* Access methods for list child: "henb". */

    /**
     * Gets list entry "henb", with specified keys.
     */
    public Henb getHenb() throws JNCException {
        String path = "henb";
        return (Henb)searchOne(path);
    }

    /**
     * Iterator method for the list "henb".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator henbIterator() {
        return new ElementChildrenIterator(children, "henb");
    }

    /**
     * Adds list entry "henb", using an existing object.
     * @param henb The object to add.
     * @return The added child.
     */
    public Henb addHenb(Henb henb) throws JNCException {
        insertChild(henb, childrenNames());
        return henb;
    }

    /**
     * Adds list entry "henb".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Henb addHenb() throws JNCException {
        Henb henb = new Henb();
        insertChild(henb, childrenNames());
        return henb;
    }

    /**
     * Deletes list entry "henb", with specified keys.
     */
    public void deleteHenb() throws JNCException {
        String path = "henb";
        delete(path);
    }

    /* Access methods for list child: "context". */

    /**
     * Gets list entry "context", with specified keys.
     */
    public Context getContext() throws JNCException {
        String path = "context";
        return (Context)searchOne(path);
    }

    /**
     * Iterator method for the list "context".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator contextIterator() {
        return new ElementChildrenIterator(children, "context");
    }

    /**
     * Adds list entry "context", using an existing object.
     * @param context The object to add.
     * @return The added child.
     */
    public Context addContext(Context context) throws JNCException {
        insertChild(context, childrenNames());
        return context;
    }

    /**
     * Adds list entry "context".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Context addContext() throws JNCException {
        Context context = new Context();
        insertChild(context, childrenNames());
        return context;
    }

    /**
     * Deletes list entry "context", with specified keys.
     */
    public void deleteContext() throws JNCException {
        String path = "context";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
