/* 
 * @(#)JInterface.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeSctpProfile;

import NodeSet;

import S1;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/interface"
 * <p>
 * See line 263 in
 * fgwConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class JInterface extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "s1".
     */
    public S1 s1 = null;

    /**
     * Constructor for an empty JInterface object.
     */
    public JInterface() {
        super(Epc.NAMESPACE, "interface");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public JInterface clone() {
        return (JInterface)cloneContent(new JInterface());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public JInterface cloneShallow() {
        return (JInterface)cloneShallowContent(new JInterface());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "s1",
            "mme-sctp-profile",
        };
    }

    /* Access methods for container child: "s1". */

    /**
     * Adds container entry "s1", using an existing object.
     * @param s1 The object to add.
     * @return The added child.
     */
    public S1 addS1(S1 s1) throws JNCException {
        this.s1 = s1;
        insertChild(s1, childrenNames());
        return s1;
    }

    /**
     * Adds container entry "s1".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S1 addS1() throws JNCException {
        S1 s1 = new S1();
        this.s1 = s1;
        insertChild(s1, childrenNames());
        return s1;
    }

    /**
     * Deletes container entry "s1".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS1() throws JNCException {
        this.s1 = null;
        String path = "s1";
        return delete(path);
    }

    /* Access methods for list child: "mme-sctp-profile". */

    /**
     * Gets list entry "mmeSctpProfile", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeSctpProfile getMmeSctpProfile(YangString nameValue)
            throws JNCException {
        String path = "mme-sctp-profile[name='" + nameValue + "']";
        return (MmeSctpProfile)searchOne(path);
    }

    /**
     * Gets list entry "mmeSctpProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeSctpProfile getMmeSctpProfile(String nameValue)
            throws JNCException {
        String path = "mme-sctp-profile[name='" + nameValue + "']";
        return (MmeSctpProfile)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-sctp-profile".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeSctpProfileIterator() {
        return new ElementChildrenIterator(children, "mme-sctp-profile");
    }

    /**
     * Adds list entry "mmeSctpProfile", using an existing object.
     * @param mmeSctpProfile The object to add.
     * @return The added child.
     */
    public MmeSctpProfile addMmeSctpProfile(MmeSctpProfile mmeSctpProfile)
            throws JNCException {
        insertChild(mmeSctpProfile, childrenNames());
        return mmeSctpProfile;
    }

    /**
     * Adds list entry "mmeSctpProfile", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeSctpProfile addMmeSctpProfile(YangString nameValue)
            throws JNCException {
        MmeSctpProfile mmeSctpProfile = new MmeSctpProfile(nameValue);
        return addMmeSctpProfile(mmeSctpProfile);
    }

    /**
     * Adds list entry "mmeSctpProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeSctpProfile addMmeSctpProfile(String nameValue)
            throws JNCException {
        MmeSctpProfile mmeSctpProfile = new MmeSctpProfile(nameValue);
        return addMmeSctpProfile(mmeSctpProfile);
    }

    /**
     * Adds list entry "mmeSctpProfile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSctpProfile addMmeSctpProfile() throws JNCException {
        MmeSctpProfile mmeSctpProfile = new MmeSctpProfile();
        insertChild(mmeSctpProfile, childrenNames());
        return mmeSctpProfile;
    }

    /**
     * Deletes list entry "mmeSctpProfile", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeSctpProfile(YangString nameValue) throws JNCException {
        String path = "mme-sctp-profile[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeSctpProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeSctpProfile(String nameValue) throws JNCException {
        String path = "mme-sctp-profile[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof S1) s1 = (S1)child;
    }

}
