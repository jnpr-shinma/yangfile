/* 
 * @(#)MmeNodalQos.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/mme-nodal-qos"
 * <p>
 * See line 205 in
 * fgwMmeCommonConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeNodalQos extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeNodalQos object.
     */
    public MmeNodalQos() {
        super(Epc.NAMESPACE, "mme-nodal-qos");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeNodalQos clone() {
        return (MmeNodalQos)cloneContent(new MmeNodalQos());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeNodalQos cloneShallow() {
        return (MmeNodalQos)cloneShallowContent(new MmeNodalQos());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mps-arp-limit",
            "single-qci1-bearer",
        };
    }

    /* Access methods for optional leaf child: "mps-arp-limit". */

    /**
     * Gets the value for child leaf "mps-arp-limit".
     * @return The value of the leaf.
     */
    public YangUInt8 getMpsArpLimitValue() throws JNCException {
        YangUInt8 mpsArpLimit = (YangUInt8)getValue("mps-arp-limit");
        if (mpsArpLimit == null) {
            mpsArpLimit = new YangUInt8("1");  // default
        }
        return mpsArpLimit;
    }

    /**
     * Sets the value for child leaf "mps-arp-limit",
     * using instance of generated typedef class.
     * @param mpsArpLimitValue The value to set.
     * @param mpsArpLimitValue used during instantiation.
     */
    public void setMpsArpLimitValue(YangUInt8 mpsArpLimitValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mps-arp-limit",
            mpsArpLimitValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mps-arp-limit",
     * using Java primitive values.
     * @param mpsArpLimitValue used during instantiation.
     */
    public void setMpsArpLimitValue(short mpsArpLimitValue) throws JNCException {
        setMpsArpLimitValue(new YangUInt8(mpsArpLimitValue));
    }

    /**
     * Sets the value for child leaf "mps-arp-limit",
     * using a String value.
     * @param mpsArpLimitValue used during instantiation.
     */
    public void setMpsArpLimitValue(String mpsArpLimitValue)
            throws JNCException {
        setMpsArpLimitValue(new YangUInt8(mpsArpLimitValue));
    }

    /**
     * Unsets the value for child leaf "mps-arp-limit".
     */
    public void unsetMpsArpLimitValue() throws JNCException {
        delete("mps-arp-limit");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mps-arp-limit" leaf will not have a value.
     */
    public void addMpsArpLimit() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mps-arp-limit",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mps-arp-limit" with operation "replace".
     */
    public void markMpsArpLimitReplace() throws JNCException {
        markLeafReplace("mpsArpLimit");
    }

    /**
     * Marks the leaf "mps-arp-limit" with operation "merge".
     */
    public void markMpsArpLimitMerge() throws JNCException {
        markLeafMerge("mpsArpLimit");
    }

    /**
     * Marks the leaf "mps-arp-limit" with operation "create".
     */
    public void markMpsArpLimitCreate() throws JNCException {
        markLeafCreate("mpsArpLimit");
    }

    /**
     * Marks the leaf "mps-arp-limit" with operation "delete".
     */
    public void markMpsArpLimitDelete() throws JNCException {
        markLeafDelete("mpsArpLimit");
    }

    /* Access methods for optional leaf child: "single-qci1-bearer". */

    /**
     * Gets the value for child leaf "single-qci1-bearer".
     * @return The value of the leaf.
     */
    public YangEnumeration getSingleQci1BearerValue() throws JNCException {
        YangEnumeration singleQci1Bearer = (YangEnumeration)getValue("single-qci1-bearer");
        if (singleQci1Bearer == null) {
            singleQci1Bearer = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return singleQci1Bearer;
    }

    /**
     * Sets the value for child leaf "single-qci1-bearer",
     * using instance of generated typedef class.
     * @param singleQci1BearerValue The value to set.
     * @param singleQci1BearerValue used during instantiation.
     */
    public void setSingleQci1BearerValue(YangEnumeration singleQci1BearerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "single-qci1-bearer",
            singleQci1BearerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "single-qci1-bearer",
     * using a String value.
     * @param singleQci1BearerValue used during instantiation.
     */
    public void setSingleQci1BearerValue(String singleQci1BearerValue)
            throws JNCException {
        setSingleQci1BearerValue(new YangEnumeration(singleQci1BearerValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "single-qci1-bearer".
     */
    public void unsetSingleQci1BearerValue() throws JNCException {
        delete("single-qci1-bearer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "single-qci1-bearer" leaf will not have a value.
     */
    public void addSingleQci1Bearer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "single-qci1-bearer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "single-qci1-bearer" with operation "replace".
     */
    public void markSingleQci1BearerReplace() throws JNCException {
        markLeafReplace("singleQci1Bearer");
    }

    /**
     * Marks the leaf "single-qci1-bearer" with operation "merge".
     */
    public void markSingleQci1BearerMerge() throws JNCException {
        markLeafMerge("singleQci1Bearer");
    }

    /**
     * Marks the leaf "single-qci1-bearer" with operation "create".
     */
    public void markSingleQci1BearerCreate() throws JNCException {
        markLeafCreate("singleQci1Bearer");
    }

    /**
     * Marks the leaf "single-qci1-bearer" with operation "delete".
     */
    public void markSingleQci1BearerDelete() throws JNCException {
        markLeafDelete("singleQci1Bearer");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
