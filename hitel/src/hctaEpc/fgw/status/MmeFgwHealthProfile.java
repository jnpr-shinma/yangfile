/* 
 * @(#)MmeFgwHealthProfile.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.status;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/status/mme-fgw-health-profile"
 * <p>
 * See line 1199 in
 * s1MasterConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeFgwHealthProfile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeFgwHealthProfile object.
     */
    public MmeFgwHealthProfile() {
        super(Epc.NAMESPACE, "mme-fgw-health-profile");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeFgwHealthProfile clone() {
        return (MmeFgwHealthProfile)cloneContent(new MmeFgwHealthProfile());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeFgwHealthProfile cloneShallow() {
        return (MmeFgwHealthProfile)cloneShallowContent(new MmeFgwHealthProfile());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "update-period",
            "window",
            "min-data-threshold",
            "connection-major-threshold",
            "connection-minor-threshold",
            "connection-clear-threshold",
        };
    }

    /* Access methods for optional leaf child: "update-period". */

    /**
     * Gets the value for child leaf "update-period".
     * @return The value of the leaf.
     */
    public YangEnumeration getUpdatePeriodValue() throws JNCException {
        YangEnumeration updatePeriod = (YangEnumeration)getValue("update-period");
        if (updatePeriod == null) {
            updatePeriod = new YangEnumeration("3", new String[] {  // default
                "1",
                "3",
                "5",
                "15",
            });
        }
        return updatePeriod;
    }

    /**
     * Sets the value for child leaf "update-period",
     * using instance of generated typedef class.
     * @param updatePeriodValue The value to set.
     * @param updatePeriodValue used during instantiation.
     */
    public void setUpdatePeriodValue(YangEnumeration updatePeriodValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "update-period",
            updatePeriodValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "update-period",
     * using a String value.
     * @param updatePeriodValue used during instantiation.
     */
    public void setUpdatePeriodValue(String updatePeriodValue)
            throws JNCException {
        setUpdatePeriodValue(new YangEnumeration(updatePeriodValue, new String[] {
             "1",
             "3",
             "5",
             "15",
        }));
    }

    /**
     * Unsets the value for child leaf "update-period".
     */
    public void unsetUpdatePeriodValue() throws JNCException {
        delete("update-period");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "update-period" leaf will not have a value.
     */
    public void addUpdatePeriod() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "update-period",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "update-period" with operation "replace".
     */
    public void markUpdatePeriodReplace() throws JNCException {
        markLeafReplace("updatePeriod");
    }

    /**
     * Marks the leaf "update-period" with operation "merge".
     */
    public void markUpdatePeriodMerge() throws JNCException {
        markLeafMerge("updatePeriod");
    }

    /**
     * Marks the leaf "update-period" with operation "create".
     */
    public void markUpdatePeriodCreate() throws JNCException {
        markLeafCreate("updatePeriod");
    }

    /**
     * Marks the leaf "update-period" with operation "delete".
     */
    public void markUpdatePeriodDelete() throws JNCException {
        markLeafDelete("updatePeriod");
    }

    /* Access methods for optional leaf child: "window". */

    /**
     * Gets the value for child leaf "window".
     * @return The value of the leaf.
     */
    public YangEnumeration getWindowValue() throws JNCException {
        YangEnumeration window = (YangEnumeration)getValue("window");
        if (window == null) {
            window = new YangEnumeration("15", new String[] {  // default
                "15",
                "30",
            });
        }
        return window;
    }

    /**
     * Sets the value for child leaf "window",
     * using instance of generated typedef class.
     * @param windowValue The value to set.
     * @param windowValue used during instantiation.
     */
    public void setWindowValue(YangEnumeration windowValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "window",
            windowValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "window",
     * using a String value.
     * @param windowValue used during instantiation.
     */
    public void setWindowValue(String windowValue) throws JNCException {
        setWindowValue(new YangEnumeration(windowValue, new String[] {
             "15",
             "30",
        }));
    }

    /**
     * Unsets the value for child leaf "window".
     */
    public void unsetWindowValue() throws JNCException {
        delete("window");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "window" leaf will not have a value.
     */
    public void addWindow() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "window",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "window" with operation "replace".
     */
    public void markWindowReplace() throws JNCException {
        markLeafReplace("window");
    }

    /**
     * Marks the leaf "window" with operation "merge".
     */
    public void markWindowMerge() throws JNCException {
        markLeafMerge("window");
    }

    /**
     * Marks the leaf "window" with operation "create".
     */
    public void markWindowCreate() throws JNCException {
        markLeafCreate("window");
    }

    /**
     * Marks the leaf "window" with operation "delete".
     */
    public void markWindowDelete() throws JNCException {
        markLeafDelete("window");
    }

    /* Access methods for optional leaf child: "min-data-threshold". */

    /**
     * Gets the value for child leaf "min-data-threshold".
     * @return The value of the leaf.
     */
    public YangUInt16 getMinDataThresholdValue() throws JNCException {
        YangUInt16 minDataThreshold = (YangUInt16)getValue("min-data-threshold");
        if (minDataThreshold == null) {
            minDataThreshold = new YangUInt16("100");  // default
        }
        return minDataThreshold;
    }

    /**
     * Sets the value for child leaf "min-data-threshold",
     * using instance of generated typedef class.
     * @param minDataThresholdValue The value to set.
     * @param minDataThresholdValue used during instantiation.
     */
    public void setMinDataThresholdValue(YangUInt16 minDataThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "min-data-threshold",
            minDataThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "min-data-threshold",
     * using Java primitive values.
     * @param minDataThresholdValue used during instantiation.
     */
    public void setMinDataThresholdValue(int minDataThresholdValue)
            throws JNCException {
        setMinDataThresholdValue(new YangUInt16(minDataThresholdValue));
    }

    /**
     * Sets the value for child leaf "min-data-threshold",
     * using a String value.
     * @param minDataThresholdValue used during instantiation.
     */
    public void setMinDataThresholdValue(String minDataThresholdValue)
            throws JNCException {
        setMinDataThresholdValue(new YangUInt16(minDataThresholdValue));
    }

    /**
     * Unsets the value for child leaf "min-data-threshold".
     */
    public void unsetMinDataThresholdValue() throws JNCException {
        delete("min-data-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "min-data-threshold" leaf will not have a value.
     */
    public void addMinDataThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "min-data-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "min-data-threshold" with operation "replace".
     */
    public void markMinDataThresholdReplace() throws JNCException {
        markLeafReplace("minDataThreshold");
    }

    /**
     * Marks the leaf "min-data-threshold" with operation "merge".
     */
    public void markMinDataThresholdMerge() throws JNCException {
        markLeafMerge("minDataThreshold");
    }

    /**
     * Marks the leaf "min-data-threshold" with operation "create".
     */
    public void markMinDataThresholdCreate() throws JNCException {
        markLeafCreate("minDataThreshold");
    }

    /**
     * Marks the leaf "min-data-threshold" with operation "delete".
     */
    public void markMinDataThresholdDelete() throws JNCException {
        markLeafDelete("minDataThreshold");
    }

    /* Access methods for optional leaf child: "connection-major-threshold". */

    /**
     * Gets the value for child leaf "connection-major-threshold".
     * @return The value of the leaf.
     */
    public YangUInt8 getConnectionMajorThresholdValue() throws JNCException {
        YangUInt8 connectionMajorThreshold = (YangUInt8)getValue("connection-major-threshold");
        if (connectionMajorThreshold == null) {
            connectionMajorThreshold = new YangUInt8("90");  // default
        }
        return connectionMajorThreshold;
    }

    /**
     * Sets the value for child leaf "connection-major-threshold",
     * using instance of generated typedef class.
     * @param connectionMajorThresholdValue The value to set.
     * @param connectionMajorThresholdValue used during instantiation.
     */
    public void setConnectionMajorThresholdValue(YangUInt8 connectionMajorThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "connection-major-threshold",
            connectionMajorThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "connection-major-threshold",
     * using Java primitive values.
     * @param connectionMajorThresholdValue used during instantiation.
     */
    public void setConnectionMajorThresholdValue(short connectionMajorThresholdValue)
            throws JNCException {
        setConnectionMajorThresholdValue(new YangUInt8(connectionMajorThresholdValue));
    }

    /**
     * Sets the value for child leaf "connection-major-threshold",
     * using a String value.
     * @param connectionMajorThresholdValue used during instantiation.
     */
    public void setConnectionMajorThresholdValue(String connectionMajorThresholdValue)
            throws JNCException {
        setConnectionMajorThresholdValue(new YangUInt8(connectionMajorThresholdValue));
    }

    /**
     * Unsets the value for child leaf "connection-major-threshold".
     */
    public void unsetConnectionMajorThresholdValue() throws JNCException {
        delete("connection-major-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "connection-major-threshold" leaf will not have a value.
     */
    public void addConnectionMajorThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "connection-major-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "connection-major-threshold" with operation "replace".
     */
    public void markConnectionMajorThresholdReplace() throws JNCException {
        markLeafReplace("connectionMajorThreshold");
    }

    /**
     * Marks the leaf "connection-major-threshold" with operation "merge".
     */
    public void markConnectionMajorThresholdMerge() throws JNCException {
        markLeafMerge("connectionMajorThreshold");
    }

    /**
     * Marks the leaf "connection-major-threshold" with operation "create".
     */
    public void markConnectionMajorThresholdCreate() throws JNCException {
        markLeafCreate("connectionMajorThreshold");
    }

    /**
     * Marks the leaf "connection-major-threshold" with operation "delete".
     */
    public void markConnectionMajorThresholdDelete() throws JNCException {
        markLeafDelete("connectionMajorThreshold");
    }

    /* Access methods for optional leaf child: "connection-minor-threshold". */

    /**
     * Gets the value for child leaf "connection-minor-threshold".
     * @return The value of the leaf.
     */
    public YangUInt8 getConnectionMinorThresholdValue() throws JNCException {
        YangUInt8 connectionMinorThreshold = (YangUInt8)getValue("connection-minor-threshold");
        if (connectionMinorThreshold == null) {
            connectionMinorThreshold = new YangUInt8("95");  // default
        }
        return connectionMinorThreshold;
    }

    /**
     * Sets the value for child leaf "connection-minor-threshold",
     * using instance of generated typedef class.
     * @param connectionMinorThresholdValue The value to set.
     * @param connectionMinorThresholdValue used during instantiation.
     */
    public void setConnectionMinorThresholdValue(YangUInt8 connectionMinorThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "connection-minor-threshold",
            connectionMinorThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "connection-minor-threshold",
     * using Java primitive values.
     * @param connectionMinorThresholdValue used during instantiation.
     */
    public void setConnectionMinorThresholdValue(short connectionMinorThresholdValue)
            throws JNCException {
        setConnectionMinorThresholdValue(new YangUInt8(connectionMinorThresholdValue));
    }

    /**
     * Sets the value for child leaf "connection-minor-threshold",
     * using a String value.
     * @param connectionMinorThresholdValue used during instantiation.
     */
    public void setConnectionMinorThresholdValue(String connectionMinorThresholdValue)
            throws JNCException {
        setConnectionMinorThresholdValue(new YangUInt8(connectionMinorThresholdValue));
    }

    /**
     * Unsets the value for child leaf "connection-minor-threshold".
     */
    public void unsetConnectionMinorThresholdValue() throws JNCException {
        delete("connection-minor-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "connection-minor-threshold" leaf will not have a value.
     */
    public void addConnectionMinorThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "connection-minor-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "connection-minor-threshold" with operation "replace".
     */
    public void markConnectionMinorThresholdReplace() throws JNCException {
        markLeafReplace("connectionMinorThreshold");
    }

    /**
     * Marks the leaf "connection-minor-threshold" with operation "merge".
     */
    public void markConnectionMinorThresholdMerge() throws JNCException {
        markLeafMerge("connectionMinorThreshold");
    }

    /**
     * Marks the leaf "connection-minor-threshold" with operation "create".
     */
    public void markConnectionMinorThresholdCreate() throws JNCException {
        markLeafCreate("connectionMinorThreshold");
    }

    /**
     * Marks the leaf "connection-minor-threshold" with operation "delete".
     */
    public void markConnectionMinorThresholdDelete() throws JNCException {
        markLeafDelete("connectionMinorThreshold");
    }

    /* Access methods for optional leaf child: "connection-clear-threshold". */

    /**
     * Gets the value for child leaf "connection-clear-threshold".
     * @return The value of the leaf.
     */
    public YangUInt8 getConnectionClearThresholdValue() throws JNCException {
        YangUInt8 connectionClearThreshold = (YangUInt8)getValue("connection-clear-threshold");
        if (connectionClearThreshold == null) {
            connectionClearThreshold = new YangUInt8("98");  // default
        }
        return connectionClearThreshold;
    }

    /**
     * Sets the value for child leaf "connection-clear-threshold",
     * using instance of generated typedef class.
     * @param connectionClearThresholdValue The value to set.
     * @param connectionClearThresholdValue used during instantiation.
     */
    public void setConnectionClearThresholdValue(YangUInt8 connectionClearThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "connection-clear-threshold",
            connectionClearThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "connection-clear-threshold",
     * using Java primitive values.
     * @param connectionClearThresholdValue used during instantiation.
     */
    public void setConnectionClearThresholdValue(short connectionClearThresholdValue)
            throws JNCException {
        setConnectionClearThresholdValue(new YangUInt8(connectionClearThresholdValue));
    }

    /**
     * Sets the value for child leaf "connection-clear-threshold",
     * using a String value.
     * @param connectionClearThresholdValue used during instantiation.
     */
    public void setConnectionClearThresholdValue(String connectionClearThresholdValue)
            throws JNCException {
        setConnectionClearThresholdValue(new YangUInt8(connectionClearThresholdValue));
    }

    /**
     * Unsets the value for child leaf "connection-clear-threshold".
     */
    public void unsetConnectionClearThresholdValue() throws JNCException {
        delete("connection-clear-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "connection-clear-threshold" leaf will not have a value.
     */
    public void addConnectionClearThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "connection-clear-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "connection-clear-threshold" with operation "replace".
     */
    public void markConnectionClearThresholdReplace() throws JNCException {
        markLeafReplace("connectionClearThreshold");
    }

    /**
     * Marks the leaf "connection-clear-threshold" with operation "merge".
     */
    public void markConnectionClearThresholdMerge() throws JNCException {
        markLeafMerge("connectionClearThreshold");
    }

    /**
     * Marks the leaf "connection-clear-threshold" with operation "create".
     */
    public void markConnectionClearThresholdCreate() throws JNCException {
        markLeafCreate("connectionClearThreshold");
    }

    /**
     * Marks the leaf "connection-clear-threshold" with operation "delete".
     */
    public void markConnectionClearThresholdDelete() throws JNCException {
        markLeafDelete("connectionClearThreshold");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
