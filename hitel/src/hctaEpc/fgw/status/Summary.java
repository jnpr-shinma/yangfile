/* 
 * @(#)Summary.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.status;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/status/summary"
 * <p>
 * See line 224 in
 * fgwScCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Summary extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Summary object.
     */
    public Summary() {
        super(Epc.NAMESPACE, "summary");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Summary clone() {
        return (Summary)cloneContent(new Summary());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Summary cloneShallow() {
        return (Summary)cloneShallowContent(new Summary());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "service",
            "location",
            "current-connections",
            "connection-success-rate-network",
        };
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "current-connections". */

    /**
     * Gets the value for child leaf "current-connections".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentConnectionsValue() throws JNCException {
        return (YangUInt32)getValue("current-connections");
    }

    /**
     * Sets the value for child leaf "current-connections",
     * using instance of generated typedef class.
     * @param currentConnectionsValue The value to set.
     * @param currentConnectionsValue used during instantiation.
     */
    public void setCurrentConnectionsValue(YangUInt32 currentConnectionsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-connections",
            currentConnectionsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-connections",
     * using Java primitive values.
     * @param currentConnectionsValue used during instantiation.
     */
    public void setCurrentConnectionsValue(long currentConnectionsValue)
            throws JNCException {
        setCurrentConnectionsValue(new YangUInt32(currentConnectionsValue));
    }

    /**
     * Sets the value for child leaf "current-connections",
     * using a String value.
     * @param currentConnectionsValue used during instantiation.
     */
    public void setCurrentConnectionsValue(String currentConnectionsValue)
            throws JNCException {
        setCurrentConnectionsValue(new YangUInt32(currentConnectionsValue));
    }

    /**
     * Unsets the value for child leaf "current-connections".
     */
    public void unsetCurrentConnectionsValue() throws JNCException {
        delete("current-connections");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-connections" leaf will not have a value.
     */
    public void addCurrentConnections() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-connections",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-connections" with operation "replace".
     */
    public void markCurrentConnectionsReplace() throws JNCException {
        markLeafReplace("currentConnections");
    }

    /**
     * Marks the leaf "current-connections" with operation "merge".
     */
    public void markCurrentConnectionsMerge() throws JNCException {
        markLeafMerge("currentConnections");
    }

    /**
     * Marks the leaf "current-connections" with operation "create".
     */
    public void markCurrentConnectionsCreate() throws JNCException {
        markLeafCreate("currentConnections");
    }

    /**
     * Marks the leaf "current-connections" with operation "delete".
     */
    public void markCurrentConnectionsDelete() throws JNCException {
        markLeafDelete("currentConnections");
    }

    /* Access methods for optional leaf child: "connection-success-rate-network". */

    /**
     * Gets the value for child leaf "connection-success-rate-network".
     * @return The value of the leaf.
     */
    public YangUInt32 getConnectionSuccessRateNetworkValue()
            throws JNCException {
        return (YangUInt32)getValue("connection-success-rate-network");
    }

    /**
     * Sets the value for child leaf "connection-success-rate-network",
     * using instance of generated typedef class.
     * @param connectionSuccessRateNetworkValue The value to set.
     * @param connectionSuccessRateNetworkValue used during instantiation.
     */
    public void setConnectionSuccessRateNetworkValue(YangUInt32 connectionSuccessRateNetworkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "connection-success-rate-network",
            connectionSuccessRateNetworkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "connection-success-rate-network",
     * using Java primitive values.
     * @param connectionSuccessRateNetworkValue used during instantiation.
     */
    public void setConnectionSuccessRateNetworkValue(long connectionSuccessRateNetworkValue)
            throws JNCException {
        setConnectionSuccessRateNetworkValue(new YangUInt32(connectionSuccessRateNetworkValue));
    }

    /**
     * Sets the value for child leaf "connection-success-rate-network",
     * using a String value.
     * @param connectionSuccessRateNetworkValue used during instantiation.
     */
    public void setConnectionSuccessRateNetworkValue(String connectionSuccessRateNetworkValue)
            throws JNCException {
        setConnectionSuccessRateNetworkValue(new YangUInt32(connectionSuccessRateNetworkValue));
    }

    /**
     * Unsets the value for child leaf "connection-success-rate-network".
     */
    public void unsetConnectionSuccessRateNetworkValue() throws JNCException {
        delete("connection-success-rate-network");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "connection-success-rate-network" leaf will not have a value.
     */
    public void addConnectionSuccessRateNetwork() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "connection-success-rate-network",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "connection-success-rate-network" with operation "replace".
     */
    public void markConnectionSuccessRateNetworkReplace() throws JNCException {
        markLeafReplace("connectionSuccessRateNetwork");
    }

    /**
     * Marks the leaf "connection-success-rate-network" with operation "merge".
     */
    public void markConnectionSuccessRateNetworkMerge() throws JNCException {
        markLeafMerge("connectionSuccessRateNetwork");
    }

    /**
     * Marks the leaf "connection-success-rate-network" with operation "create".
     */
    public void markConnectionSuccessRateNetworkCreate() throws JNCException {
        markLeafCreate("connectionSuccessRateNetwork");
    }

    /**
     * Marks the leaf "connection-success-rate-network" with operation "delete".
     */
    public void markConnectionSuccessRateNetworkDelete() throws JNCException {
        markLeafDelete("connectionSuccessRateNetwork");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
