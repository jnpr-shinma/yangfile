/* 
 * @(#)FgwStorage.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.status;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/status/fgw-storage"
 * <p>
 * See line 91 in
 * epcCmnResmonCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class FgwStorage extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty FgwStorage object.
     */
    public FgwStorage() {
        super(Epc.NAMESPACE, "fgw-storage");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public FgwStorage clone() {
        return (FgwStorage)cloneContent(new FgwStorage());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public FgwStorage cloneShallow() {
        return (FgwStorage)cloneShallowContent(new FgwStorage());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "location",
            "service",
            "unit-id",
            "standby",
            "fs-usage",
            "size",
            "file-system",
        };
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "unit-id". */

    /**
     * Gets the value for child leaf "unit-id".
     * @return The value of the leaf.
     */
    public YangString getUnitIdValue() throws JNCException {
        return (YangString)getValue("unit-id");
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using instance of generated typedef class.
     * @param unitIdValue The value to set.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(YangString unitIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-id",
            unitIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using a String value.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(String unitIdValue) throws JNCException {
        setUnitIdValue(new YangString(unitIdValue));
    }

    /**
     * Unsets the value for child leaf "unit-id".
     */
    public void unsetUnitIdValue() throws JNCException {
        delete("unit-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-id" leaf will not have a value.
     */
    public void addUnitId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unit-id" with operation "replace".
     */
    public void markUnitIdReplace() throws JNCException {
        markLeafReplace("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "merge".
     */
    public void markUnitIdMerge() throws JNCException {
        markLeafMerge("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "create".
     */
    public void markUnitIdCreate() throws JNCException {
        markLeafCreate("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "delete".
     */
    public void markUnitIdDelete() throws JNCException {
        markLeafDelete("unitId");
    }

    /* Access methods for optional leaf child: "standby". */

    /**
     * Gets the value for child leaf "standby".
     * @return The value of the leaf.
     */
    public YangString getStandbyValue() throws JNCException {
        return (YangString)getValue("standby");
    }

    /**
     * Sets the value for child leaf "standby",
     * using instance of generated typedef class.
     * @param standbyValue The value to set.
     * @param standbyValue used during instantiation.
     */
    public void setStandbyValue(YangString standbyValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "standby",
            standbyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "standby",
     * using a String value.
     * @param standbyValue used during instantiation.
     */
    public void setStandbyValue(String standbyValue) throws JNCException {
        setStandbyValue(new YangString(standbyValue));
    }

    /**
     * Unsets the value for child leaf "standby".
     */
    public void unsetStandbyValue() throws JNCException {
        delete("standby");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "standby" leaf will not have a value.
     */
    public void addStandby() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "standby",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "standby" with operation "replace".
     */
    public void markStandbyReplace() throws JNCException {
        markLeafReplace("standby");
    }

    /**
     * Marks the leaf "standby" with operation "merge".
     */
    public void markStandbyMerge() throws JNCException {
        markLeafMerge("standby");
    }

    /**
     * Marks the leaf "standby" with operation "create".
     */
    public void markStandbyCreate() throws JNCException {
        markLeafCreate("standby");
    }

    /**
     * Marks the leaf "standby" with operation "delete".
     */
    public void markStandbyDelete() throws JNCException {
        markLeafDelete("standby");
    }

    /* Access methods for optional leaf child: "fs-usage". */

    /**
     * Gets the value for child leaf "fs-usage".
     * @return The value of the leaf.
     */
    public YangString getFsUsageValue() throws JNCException {
        return (YangString)getValue("fs-usage");
    }

    /**
     * Sets the value for child leaf "fs-usage",
     * using instance of generated typedef class.
     * @param fsUsageValue The value to set.
     * @param fsUsageValue used during instantiation.
     */
    public void setFsUsageValue(YangString fsUsageValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "fs-usage",
            fsUsageValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "fs-usage",
     * using a String value.
     * @param fsUsageValue used during instantiation.
     */
    public void setFsUsageValue(String fsUsageValue) throws JNCException {
        setFsUsageValue(new YangString(fsUsageValue));
    }

    /**
     * Unsets the value for child leaf "fs-usage".
     */
    public void unsetFsUsageValue() throws JNCException {
        delete("fs-usage");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fs-usage" leaf will not have a value.
     */
    public void addFsUsage() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "fs-usage",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "fs-usage" with operation "replace".
     */
    public void markFsUsageReplace() throws JNCException {
        markLeafReplace("fsUsage");
    }

    /**
     * Marks the leaf "fs-usage" with operation "merge".
     */
    public void markFsUsageMerge() throws JNCException {
        markLeafMerge("fsUsage");
    }

    /**
     * Marks the leaf "fs-usage" with operation "create".
     */
    public void markFsUsageCreate() throws JNCException {
        markLeafCreate("fsUsage");
    }

    /**
     * Marks the leaf "fs-usage" with operation "delete".
     */
    public void markFsUsageDelete() throws JNCException {
        markLeafDelete("fsUsage");
    }

    /* Access methods for optional leaf child: "size". */

    /**
     * Gets the value for child leaf "size".
     * @return The value of the leaf.
     */
    public YangString getSizeValue() throws JNCException {
        return (YangString)getValue("size");
    }

    /**
     * Sets the value for child leaf "size",
     * using instance of generated typedef class.
     * @param sizeValue The value to set.
     * @param sizeValue used during instantiation.
     */
    public void setSizeValue(YangString sizeValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "size",
            sizeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "size",
     * using a String value.
     * @param sizeValue used during instantiation.
     */
    public void setSizeValue(String sizeValue) throws JNCException {
        setSizeValue(new YangString(sizeValue));
    }

    /**
     * Unsets the value for child leaf "size".
     */
    public void unsetSizeValue() throws JNCException {
        delete("size");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "size" leaf will not have a value.
     */
    public void addSize() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "size",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "size" with operation "replace".
     */
    public void markSizeReplace() throws JNCException {
        markLeafReplace("size");
    }

    /**
     * Marks the leaf "size" with operation "merge".
     */
    public void markSizeMerge() throws JNCException {
        markLeafMerge("size");
    }

    /**
     * Marks the leaf "size" with operation "create".
     */
    public void markSizeCreate() throws JNCException {
        markLeafCreate("size");
    }

    /**
     * Marks the leaf "size" with operation "delete".
     */
    public void markSizeDelete() throws JNCException {
        markLeafDelete("size");
    }

    /* Access methods for optional leaf child: "file-system". */

    /**
     * Gets the value for child leaf "file-system".
     * @return The value of the leaf.
     */
    public YangString getFileSystemValue() throws JNCException {
        return (YangString)getValue("file-system");
    }

    /**
     * Sets the value for child leaf "file-system",
     * using instance of generated typedef class.
     * @param fileSystemValue The value to set.
     * @param fileSystemValue used during instantiation.
     */
    public void setFileSystemValue(YangString fileSystemValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "file-system",
            fileSystemValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "file-system",
     * using a String value.
     * @param fileSystemValue used during instantiation.
     */
    public void setFileSystemValue(String fileSystemValue) throws JNCException {
        setFileSystemValue(new YangString(fileSystemValue));
    }

    /**
     * Unsets the value for child leaf "file-system".
     */
    public void unsetFileSystemValue() throws JNCException {
        delete("file-system");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "file-system" leaf will not have a value.
     */
    public void addFileSystem() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "file-system",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "file-system" with operation "replace".
     */
    public void markFileSystemReplace() throws JNCException {
        markLeafReplace("fileSystem");
    }

    /**
     * Marks the leaf "file-system" with operation "merge".
     */
    public void markFileSystemMerge() throws JNCException {
        markLeafMerge("fileSystem");
    }

    /**
     * Marks the leaf "file-system" with operation "create".
     */
    public void markFileSystemCreate() throws JNCException {
        markLeafCreate("fileSystem");
    }

    /**
     * Marks the leaf "file-system" with operation "delete".
     */
    public void markFileSystemDelete() throws JNCException {
        markLeafDelete("fileSystem");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
