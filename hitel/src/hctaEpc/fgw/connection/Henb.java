/* 
 * @(#)Henb.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.connection;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/connection/henb"
 * <p>
 * See line 50 in
 * fgwScCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Henb extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Henb object.
     */
    public Henb() {
        super(Epc.NAMESPACE, "henb");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Henb clone() {
        return (Henb)cloneContent(new Henb());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Henb cloneShallow() {
        return (Henb)cloneShallowContent(new Henb());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "plmn-id",
            "enodeb-id",
            "sc-service",
            "enodeb-name",
            "connection-id-list",
            "sc-process-location",
            "s1enb-process-location",
        };
    }

    /* Access methods for leaf child: "plmn-id". */

    /**
     * Gets the value for child leaf "plmn-id".
     * @return The value of the leaf.
     */
    public YangString getPlmnIdValue() throws JNCException {
        return (YangString)getValue("plmn-id");
    }

    /**
     * Sets the value for child leaf "plmn-id",
     * using instance of generated typedef class.
     * @param plmnIdValue The value to set.
     * @param plmnIdValue used during instantiation.
     */
    public void setPlmnIdValue(YangString plmnIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-id",
            plmnIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "plmn-id",
     * using a String value.
     * @param plmnIdValue used during instantiation.
     */
    public void setPlmnIdValue(String plmnIdValue) throws JNCException {
        setPlmnIdValue(new YangString(plmnIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "plmn-id" leaf will not have a value.
     */
    public void addPlmnId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-id",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "enodeb-id". */

    /**
     * Gets the value for child leaf "enodeb-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getEnodebIdValue() throws JNCException {
        return (YangUInt32)getValue("enodeb-id");
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using instance of generated typedef class.
     * @param enodebIdValue The value to set.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(YangUInt32 enodebIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-id",
            enodebIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using Java primitive values.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(long enodebIdValue) throws JNCException {
        setEnodebIdValue(new YangUInt32(enodebIdValue));
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using a String value.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(String enodebIdValue) throws JNCException {
        setEnodebIdValue(new YangUInt32(enodebIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-id" leaf will not have a value.
     */
    public void addEnodebId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "sc-service". */

    /**
     * Gets the value for child leaf "sc-service".
     * @return The value of the leaf.
     */
    public YangString getScServiceValue() throws JNCException {
        return (YangString)getValue("sc-service");
    }

    /**
     * Sets the value for child leaf "sc-service",
     * using instance of generated typedef class.
     * @param scServiceValue The value to set.
     * @param scServiceValue used during instantiation.
     */
    public void setScServiceValue(YangString scServiceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sc-service",
            scServiceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sc-service",
     * using a String value.
     * @param scServiceValue used during instantiation.
     */
    public void setScServiceValue(String scServiceValue) throws JNCException {
        setScServiceValue(new YangString(scServiceValue));
    }

    /**
     * Unsets the value for child leaf "sc-service".
     */
    public void unsetScServiceValue() throws JNCException {
        delete("sc-service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sc-service" leaf will not have a value.
     */
    public void addScService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sc-service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sc-service" with operation "replace".
     */
    public void markScServiceReplace() throws JNCException {
        markLeafReplace("scService");
    }

    /**
     * Marks the leaf "sc-service" with operation "merge".
     */
    public void markScServiceMerge() throws JNCException {
        markLeafMerge("scService");
    }

    /**
     * Marks the leaf "sc-service" with operation "create".
     */
    public void markScServiceCreate() throws JNCException {
        markLeafCreate("scService");
    }

    /**
     * Marks the leaf "sc-service" with operation "delete".
     */
    public void markScServiceDelete() throws JNCException {
        markLeafDelete("scService");
    }

    /* Access methods for optional leaf child: "enodeb-name". */

    /**
     * Gets the value for child leaf "enodeb-name".
     * @return The value of the leaf.
     */
    public YangString getEnodebNameValue() throws JNCException {
        return (YangString)getValue("enodeb-name");
    }

    /**
     * Sets the value for child leaf "enodeb-name",
     * using instance of generated typedef class.
     * @param enodebNameValue The value to set.
     * @param enodebNameValue used during instantiation.
     */
    public void setEnodebNameValue(YangString enodebNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-name",
            enodebNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-name",
     * using a String value.
     * @param enodebNameValue used during instantiation.
     */
    public void setEnodebNameValue(String enodebNameValue) throws JNCException {
        setEnodebNameValue(new YangString(enodebNameValue));
    }

    /**
     * Unsets the value for child leaf "enodeb-name".
     */
    public void unsetEnodebNameValue() throws JNCException {
        delete("enodeb-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-name" leaf will not have a value.
     */
    public void addEnodebName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enodeb-name" with operation "replace".
     */
    public void markEnodebNameReplace() throws JNCException {
        markLeafReplace("enodebName");
    }

    /**
     * Marks the leaf "enodeb-name" with operation "merge".
     */
    public void markEnodebNameMerge() throws JNCException {
        markLeafMerge("enodebName");
    }

    /**
     * Marks the leaf "enodeb-name" with operation "create".
     */
    public void markEnodebNameCreate() throws JNCException {
        markLeafCreate("enodebName");
    }

    /**
     * Marks the leaf "enodeb-name" with operation "delete".
     */
    public void markEnodebNameDelete() throws JNCException {
        markLeafDelete("enodebName");
    }

    /* Access methods for optional leaf child: "connection-id-list". */

    /**
     * Gets the value for child leaf "connection-id-list".
     * @return The value of the leaf.
     */
    public YangString getConnectionIdListValue() throws JNCException {
        return (YangString)getValue("connection-id-list");
    }

    /**
     * Sets the value for child leaf "connection-id-list",
     * using instance of generated typedef class.
     * @param connectionIdListValue The value to set.
     * @param connectionIdListValue used during instantiation.
     */
    public void setConnectionIdListValue(YangString connectionIdListValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "connection-id-list",
            connectionIdListValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "connection-id-list",
     * using a String value.
     * @param connectionIdListValue used during instantiation.
     */
    public void setConnectionIdListValue(String connectionIdListValue)
            throws JNCException {
        setConnectionIdListValue(new YangString(connectionIdListValue));
    }

    /**
     * Unsets the value for child leaf "connection-id-list".
     */
    public void unsetConnectionIdListValue() throws JNCException {
        delete("connection-id-list");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "connection-id-list" leaf will not have a value.
     */
    public void addConnectionIdList() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "connection-id-list",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "connection-id-list" with operation "replace".
     */
    public void markConnectionIdListReplace() throws JNCException {
        markLeafReplace("connectionIdList");
    }

    /**
     * Marks the leaf "connection-id-list" with operation "merge".
     */
    public void markConnectionIdListMerge() throws JNCException {
        markLeafMerge("connectionIdList");
    }

    /**
     * Marks the leaf "connection-id-list" with operation "create".
     */
    public void markConnectionIdListCreate() throws JNCException {
        markLeafCreate("connectionIdList");
    }

    /**
     * Marks the leaf "connection-id-list" with operation "delete".
     */
    public void markConnectionIdListDelete() throws JNCException {
        markLeafDelete("connectionIdList");
    }

    /* Access methods for optional leaf child: "sc-process-location". */

    /**
     * Gets the value for child leaf "sc-process-location".
     * @return The value of the leaf.
     */
    public YangString getScProcessLocationValue() throws JNCException {
        return (YangString)getValue("sc-process-location");
    }

    /**
     * Sets the value for child leaf "sc-process-location",
     * using instance of generated typedef class.
     * @param scProcessLocationValue The value to set.
     * @param scProcessLocationValue used during instantiation.
     */
    public void setScProcessLocationValue(YangString scProcessLocationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sc-process-location",
            scProcessLocationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sc-process-location",
     * using a String value.
     * @param scProcessLocationValue used during instantiation.
     */
    public void setScProcessLocationValue(String scProcessLocationValue)
            throws JNCException {
        setScProcessLocationValue(new YangString(scProcessLocationValue));
    }

    /**
     * Unsets the value for child leaf "sc-process-location".
     */
    public void unsetScProcessLocationValue() throws JNCException {
        delete("sc-process-location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sc-process-location" leaf will not have a value.
     */
    public void addScProcessLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sc-process-location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sc-process-location" with operation "replace".
     */
    public void markScProcessLocationReplace() throws JNCException {
        markLeafReplace("scProcessLocation");
    }

    /**
     * Marks the leaf "sc-process-location" with operation "merge".
     */
    public void markScProcessLocationMerge() throws JNCException {
        markLeafMerge("scProcessLocation");
    }

    /**
     * Marks the leaf "sc-process-location" with operation "create".
     */
    public void markScProcessLocationCreate() throws JNCException {
        markLeafCreate("scProcessLocation");
    }

    /**
     * Marks the leaf "sc-process-location" with operation "delete".
     */
    public void markScProcessLocationDelete() throws JNCException {
        markLeafDelete("scProcessLocation");
    }

    /* Access methods for optional leaf child: "s1enb-process-location". */

    /**
     * Gets the value for child leaf "s1enb-process-location".
     * @return The value of the leaf.
     */
    public YangString getS1enbProcessLocationValue() throws JNCException {
        return (YangString)getValue("s1enb-process-location");
    }

    /**
     * Sets the value for child leaf "s1enb-process-location",
     * using instance of generated typedef class.
     * @param s1enbProcessLocationValue The value to set.
     * @param s1enbProcessLocationValue used during instantiation.
     */
    public void setS1enbProcessLocationValue(YangString s1enbProcessLocationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s1enb-process-location",
            s1enbProcessLocationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "s1enb-process-location",
     * using a String value.
     * @param s1enbProcessLocationValue used during instantiation.
     */
    public void setS1enbProcessLocationValue(String s1enbProcessLocationValue)
            throws JNCException {
        setS1enbProcessLocationValue(new YangString(s1enbProcessLocationValue));
    }

    /**
     * Unsets the value for child leaf "s1enb-process-location".
     */
    public void unsetS1enbProcessLocationValue() throws JNCException {
        delete("s1enb-process-location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "s1enb-process-location" leaf will not have a value.
     */
    public void addS1enbProcessLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s1enb-process-location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "s1enb-process-location" with operation "replace".
     */
    public void markS1enbProcessLocationReplace() throws JNCException {
        markLeafReplace("s1enbProcessLocation");
    }

    /**
     * Marks the leaf "s1enb-process-location" with operation "merge".
     */
    public void markS1enbProcessLocationMerge() throws JNCException {
        markLeafMerge("s1enbProcessLocation");
    }

    /**
     * Marks the leaf "s1enb-process-location" with operation "create".
     */
    public void markS1enbProcessLocationCreate() throws JNCException {
        markLeafCreate("s1enbProcessLocation");
    }

    /**
     * Marks the leaf "s1enb-process-location" with operation "delete".
     */
    public void markS1enbProcessLocationDelete() throws JNCException {
        markLeafDelete("s1enbProcessLocation");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
