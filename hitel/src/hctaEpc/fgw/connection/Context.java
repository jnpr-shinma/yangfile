/* 
 * @(#)Context.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.connection;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/connection/context"
 * <p>
 * See line 107 in
 * fgwScCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Context extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Context object.
     */
    public Context() {
        super(Epc.NAMESPACE, "context");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Context clone() {
        return (Context)cloneContent(new Context());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Context cloneShallow() {
        return (Context)cloneShallowContent(new Context());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "fgw-ue-s1ap-id",
            "connection-duration",
            "service",
            "unit-id",
            "sc-instance",
            "location",
            "sc-pid",
            "enodeb-ue-s1ap-id",
            "enodeb-name",
            "enodeb-plmn-id",
            "enodeb-id",
            "enodeb-type",
            "enodeb-ip",
            "last-known-tai",
            "eutran-cell-id",
            "s1-mme-peer-index",
            "mme-ue-s1ap-id",
            "csg-id",
            "rrc-cause",
        };
    }

    /* Access methods for leaf child: "fgw-ue-s1ap-id". */

    /**
     * Gets the value for child leaf "fgw-ue-s1ap-id".
     * @return The value of the leaf.
     */
    public YangString getFgwUeS1apIdValue() throws JNCException {
        return (YangString)getValue("fgw-ue-s1ap-id");
    }

    /**
     * Sets the value for child leaf "fgw-ue-s1ap-id",
     * using instance of generated typedef class.
     * @param fgwUeS1apIdValue The value to set.
     * @param fgwUeS1apIdValue used during instantiation.
     */
    public void setFgwUeS1apIdValue(YangString fgwUeS1apIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "fgw-ue-s1ap-id",
            fgwUeS1apIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "fgw-ue-s1ap-id",
     * using a String value.
     * @param fgwUeS1apIdValue used during instantiation.
     */
    public void setFgwUeS1apIdValue(String fgwUeS1apIdValue)
            throws JNCException {
        setFgwUeS1apIdValue(new YangString(fgwUeS1apIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fgw-ue-s1ap-id" leaf will not have a value.
     */
    public void addFgwUeS1apId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "fgw-ue-s1ap-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "connection-duration". */

    /**
     * Gets the value for child leaf "connection-duration".
     * @return The value of the leaf.
     */
    public YangUInt32 getConnectionDurationValue() throws JNCException {
        return (YangUInt32)getValue("connection-duration");
    }

    /**
     * Sets the value for child leaf "connection-duration",
     * using instance of generated typedef class.
     * @param connectionDurationValue The value to set.
     * @param connectionDurationValue used during instantiation.
     */
    public void setConnectionDurationValue(YangUInt32 connectionDurationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "connection-duration",
            connectionDurationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "connection-duration",
     * using Java primitive values.
     * @param connectionDurationValue used during instantiation.
     */
    public void setConnectionDurationValue(long connectionDurationValue)
            throws JNCException {
        setConnectionDurationValue(new YangUInt32(connectionDurationValue));
    }

    /**
     * Sets the value for child leaf "connection-duration",
     * using a String value.
     * @param connectionDurationValue used during instantiation.
     */
    public void setConnectionDurationValue(String connectionDurationValue)
            throws JNCException {
        setConnectionDurationValue(new YangUInt32(connectionDurationValue));
    }

    /**
     * Unsets the value for child leaf "connection-duration".
     */
    public void unsetConnectionDurationValue() throws JNCException {
        delete("connection-duration");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "connection-duration" leaf will not have a value.
     */
    public void addConnectionDuration() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "connection-duration",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "connection-duration" with operation "replace".
     */
    public void markConnectionDurationReplace() throws JNCException {
        markLeafReplace("connectionDuration");
    }

    /**
     * Marks the leaf "connection-duration" with operation "merge".
     */
    public void markConnectionDurationMerge() throws JNCException {
        markLeafMerge("connectionDuration");
    }

    /**
     * Marks the leaf "connection-duration" with operation "create".
     */
    public void markConnectionDurationCreate() throws JNCException {
        markLeafCreate("connectionDuration");
    }

    /**
     * Marks the leaf "connection-duration" with operation "delete".
     */
    public void markConnectionDurationDelete() throws JNCException {
        markLeafDelete("connectionDuration");
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "unit-id". */

    /**
     * Gets the value for child leaf "unit-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnitIdValue() throws JNCException {
        return (YangUInt32)getValue("unit-id");
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using instance of generated typedef class.
     * @param unitIdValue The value to set.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(YangUInt32 unitIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-id",
            unitIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using Java primitive values.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(long unitIdValue) throws JNCException {
        setUnitIdValue(new YangUInt32(unitIdValue));
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using a String value.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(String unitIdValue) throws JNCException {
        setUnitIdValue(new YangUInt32(unitIdValue));
    }

    /**
     * Unsets the value for child leaf "unit-id".
     */
    public void unsetUnitIdValue() throws JNCException {
        delete("unit-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-id" leaf will not have a value.
     */
    public void addUnitId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unit-id" with operation "replace".
     */
    public void markUnitIdReplace() throws JNCException {
        markLeafReplace("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "merge".
     */
    public void markUnitIdMerge() throws JNCException {
        markLeafMerge("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "create".
     */
    public void markUnitIdCreate() throws JNCException {
        markLeafCreate("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "delete".
     */
    public void markUnitIdDelete() throws JNCException {
        markLeafDelete("unitId");
    }

    /* Access methods for optional leaf child: "sc-instance". */

    /**
     * Gets the value for child leaf "sc-instance".
     * @return The value of the leaf.
     */
    public YangUInt32 getScInstanceValue() throws JNCException {
        return (YangUInt32)getValue("sc-instance");
    }

    /**
     * Sets the value for child leaf "sc-instance",
     * using instance of generated typedef class.
     * @param scInstanceValue The value to set.
     * @param scInstanceValue used during instantiation.
     */
    public void setScInstanceValue(YangUInt32 scInstanceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sc-instance",
            scInstanceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sc-instance",
     * using Java primitive values.
     * @param scInstanceValue used during instantiation.
     */
    public void setScInstanceValue(long scInstanceValue) throws JNCException {
        setScInstanceValue(new YangUInt32(scInstanceValue));
    }

    /**
     * Sets the value for child leaf "sc-instance",
     * using a String value.
     * @param scInstanceValue used during instantiation.
     */
    public void setScInstanceValue(String scInstanceValue) throws JNCException {
        setScInstanceValue(new YangUInt32(scInstanceValue));
    }

    /**
     * Unsets the value for child leaf "sc-instance".
     */
    public void unsetScInstanceValue() throws JNCException {
        delete("sc-instance");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sc-instance" leaf will not have a value.
     */
    public void addScInstance() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sc-instance",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sc-instance" with operation "replace".
     */
    public void markScInstanceReplace() throws JNCException {
        markLeafReplace("scInstance");
    }

    /**
     * Marks the leaf "sc-instance" with operation "merge".
     */
    public void markScInstanceMerge() throws JNCException {
        markLeafMerge("scInstance");
    }

    /**
     * Marks the leaf "sc-instance" with operation "create".
     */
    public void markScInstanceCreate() throws JNCException {
        markLeafCreate("scInstance");
    }

    /**
     * Marks the leaf "sc-instance" with operation "delete".
     */
    public void markScInstanceDelete() throws JNCException {
        markLeafDelete("scInstance");
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "sc-pid". */

    /**
     * Gets the value for child leaf "sc-pid".
     * @return The value of the leaf.
     */
    public YangUInt32 getScPidValue() throws JNCException {
        return (YangUInt32)getValue("sc-pid");
    }

    /**
     * Sets the value for child leaf "sc-pid",
     * using instance of generated typedef class.
     * @param scPidValue The value to set.
     * @param scPidValue used during instantiation.
     */
    public void setScPidValue(YangUInt32 scPidValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sc-pid",
            scPidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sc-pid",
     * using Java primitive values.
     * @param scPidValue used during instantiation.
     */
    public void setScPidValue(long scPidValue) throws JNCException {
        setScPidValue(new YangUInt32(scPidValue));
    }

    /**
     * Sets the value for child leaf "sc-pid",
     * using a String value.
     * @param scPidValue used during instantiation.
     */
    public void setScPidValue(String scPidValue) throws JNCException {
        setScPidValue(new YangUInt32(scPidValue));
    }

    /**
     * Unsets the value for child leaf "sc-pid".
     */
    public void unsetScPidValue() throws JNCException {
        delete("sc-pid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sc-pid" leaf will not have a value.
     */
    public void addScPid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sc-pid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sc-pid" with operation "replace".
     */
    public void markScPidReplace() throws JNCException {
        markLeafReplace("scPid");
    }

    /**
     * Marks the leaf "sc-pid" with operation "merge".
     */
    public void markScPidMerge() throws JNCException {
        markLeafMerge("scPid");
    }

    /**
     * Marks the leaf "sc-pid" with operation "create".
     */
    public void markScPidCreate() throws JNCException {
        markLeafCreate("scPid");
    }

    /**
     * Marks the leaf "sc-pid" with operation "delete".
     */
    public void markScPidDelete() throws JNCException {
        markLeafDelete("scPid");
    }

    /* Access methods for optional leaf child: "enodeb-ue-s1ap-id". */

    /**
     * Gets the value for child leaf "enodeb-ue-s1ap-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getEnodebUeS1apIdValue() throws JNCException {
        return (YangUInt32)getValue("enodeb-ue-s1ap-id");
    }

    /**
     * Sets the value for child leaf "enodeb-ue-s1ap-id",
     * using instance of generated typedef class.
     * @param enodebUeS1apIdValue The value to set.
     * @param enodebUeS1apIdValue used during instantiation.
     */
    public void setEnodebUeS1apIdValue(YangUInt32 enodebUeS1apIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-ue-s1ap-id",
            enodebUeS1apIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-ue-s1ap-id",
     * using Java primitive values.
     * @param enodebUeS1apIdValue used during instantiation.
     */
    public void setEnodebUeS1apIdValue(long enodebUeS1apIdValue)
            throws JNCException {
        setEnodebUeS1apIdValue(new YangUInt32(enodebUeS1apIdValue));
    }

    /**
     * Sets the value for child leaf "enodeb-ue-s1ap-id",
     * using a String value.
     * @param enodebUeS1apIdValue used during instantiation.
     */
    public void setEnodebUeS1apIdValue(String enodebUeS1apIdValue)
            throws JNCException {
        setEnodebUeS1apIdValue(new YangUInt32(enodebUeS1apIdValue));
    }

    /**
     * Unsets the value for child leaf "enodeb-ue-s1ap-id".
     */
    public void unsetEnodebUeS1apIdValue() throws JNCException {
        delete("enodeb-ue-s1ap-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-ue-s1ap-id" leaf will not have a value.
     */
    public void addEnodebUeS1apId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-ue-s1ap-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enodeb-ue-s1ap-id" with operation "replace".
     */
    public void markEnodebUeS1apIdReplace() throws JNCException {
        markLeafReplace("enodebUeS1apId");
    }

    /**
     * Marks the leaf "enodeb-ue-s1ap-id" with operation "merge".
     */
    public void markEnodebUeS1apIdMerge() throws JNCException {
        markLeafMerge("enodebUeS1apId");
    }

    /**
     * Marks the leaf "enodeb-ue-s1ap-id" with operation "create".
     */
    public void markEnodebUeS1apIdCreate() throws JNCException {
        markLeafCreate("enodebUeS1apId");
    }

    /**
     * Marks the leaf "enodeb-ue-s1ap-id" with operation "delete".
     */
    public void markEnodebUeS1apIdDelete() throws JNCException {
        markLeafDelete("enodebUeS1apId");
    }

    /* Access methods for optional leaf child: "enodeb-name". */

    /**
     * Gets the value for child leaf "enodeb-name".
     * @return The value of the leaf.
     */
    public YangString getEnodebNameValue() throws JNCException {
        return (YangString)getValue("enodeb-name");
    }

    /**
     * Sets the value for child leaf "enodeb-name",
     * using instance of generated typedef class.
     * @param enodebNameValue The value to set.
     * @param enodebNameValue used during instantiation.
     */
    public void setEnodebNameValue(YangString enodebNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-name",
            enodebNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-name",
     * using a String value.
     * @param enodebNameValue used during instantiation.
     */
    public void setEnodebNameValue(String enodebNameValue) throws JNCException {
        setEnodebNameValue(new YangString(enodebNameValue));
    }

    /**
     * Unsets the value for child leaf "enodeb-name".
     */
    public void unsetEnodebNameValue() throws JNCException {
        delete("enodeb-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-name" leaf will not have a value.
     */
    public void addEnodebName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enodeb-name" with operation "replace".
     */
    public void markEnodebNameReplace() throws JNCException {
        markLeafReplace("enodebName");
    }

    /**
     * Marks the leaf "enodeb-name" with operation "merge".
     */
    public void markEnodebNameMerge() throws JNCException {
        markLeafMerge("enodebName");
    }

    /**
     * Marks the leaf "enodeb-name" with operation "create".
     */
    public void markEnodebNameCreate() throws JNCException {
        markLeafCreate("enodebName");
    }

    /**
     * Marks the leaf "enodeb-name" with operation "delete".
     */
    public void markEnodebNameDelete() throws JNCException {
        markLeafDelete("enodebName");
    }

    /* Access methods for optional leaf child: "enodeb-plmn-id". */

    /**
     * Gets the value for child leaf "enodeb-plmn-id".
     * @return The value of the leaf.
     */
    public YangString getEnodebPlmnIdValue() throws JNCException {
        return (YangString)getValue("enodeb-plmn-id");
    }

    /**
     * Sets the value for child leaf "enodeb-plmn-id",
     * using instance of generated typedef class.
     * @param enodebPlmnIdValue The value to set.
     * @param enodebPlmnIdValue used during instantiation.
     */
    public void setEnodebPlmnIdValue(YangString enodebPlmnIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-plmn-id",
            enodebPlmnIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-plmn-id",
     * using a String value.
     * @param enodebPlmnIdValue used during instantiation.
     */
    public void setEnodebPlmnIdValue(String enodebPlmnIdValue)
            throws JNCException {
        setEnodebPlmnIdValue(new YangString(enodebPlmnIdValue));
    }

    /**
     * Unsets the value for child leaf "enodeb-plmn-id".
     */
    public void unsetEnodebPlmnIdValue() throws JNCException {
        delete("enodeb-plmn-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-plmn-id" leaf will not have a value.
     */
    public void addEnodebPlmnId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-plmn-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enodeb-plmn-id" with operation "replace".
     */
    public void markEnodebPlmnIdReplace() throws JNCException {
        markLeafReplace("enodebPlmnId");
    }

    /**
     * Marks the leaf "enodeb-plmn-id" with operation "merge".
     */
    public void markEnodebPlmnIdMerge() throws JNCException {
        markLeafMerge("enodebPlmnId");
    }

    /**
     * Marks the leaf "enodeb-plmn-id" with operation "create".
     */
    public void markEnodebPlmnIdCreate() throws JNCException {
        markLeafCreate("enodebPlmnId");
    }

    /**
     * Marks the leaf "enodeb-plmn-id" with operation "delete".
     */
    public void markEnodebPlmnIdDelete() throws JNCException {
        markLeafDelete("enodebPlmnId");
    }

    /* Access methods for optional leaf child: "enodeb-id". */

    /**
     * Gets the value for child leaf "enodeb-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getEnodebIdValue() throws JNCException {
        return (YangUInt32)getValue("enodeb-id");
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using instance of generated typedef class.
     * @param enodebIdValue The value to set.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(YangUInt32 enodebIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-id",
            enodebIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using Java primitive values.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(long enodebIdValue) throws JNCException {
        setEnodebIdValue(new YangUInt32(enodebIdValue));
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using a String value.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(String enodebIdValue) throws JNCException {
        setEnodebIdValue(new YangUInt32(enodebIdValue));
    }

    /**
     * Unsets the value for child leaf "enodeb-id".
     */
    public void unsetEnodebIdValue() throws JNCException {
        delete("enodeb-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-id" leaf will not have a value.
     */
    public void addEnodebId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enodeb-id" with operation "replace".
     */
    public void markEnodebIdReplace() throws JNCException {
        markLeafReplace("enodebId");
    }

    /**
     * Marks the leaf "enodeb-id" with operation "merge".
     */
    public void markEnodebIdMerge() throws JNCException {
        markLeafMerge("enodebId");
    }

    /**
     * Marks the leaf "enodeb-id" with operation "create".
     */
    public void markEnodebIdCreate() throws JNCException {
        markLeafCreate("enodebId");
    }

    /**
     * Marks the leaf "enodeb-id" with operation "delete".
     */
    public void markEnodebIdDelete() throws JNCException {
        markLeafDelete("enodebId");
    }

    /* Access methods for optional leaf child: "enodeb-type". */

    /**
     * Gets the value for child leaf "enodeb-type".
     * @return The value of the leaf.
     */
    public YangString getEnodebTypeValue() throws JNCException {
        return (YangString)getValue("enodeb-type");
    }

    /**
     * Sets the value for child leaf "enodeb-type",
     * using instance of generated typedef class.
     * @param enodebTypeValue The value to set.
     * @param enodebTypeValue used during instantiation.
     */
    public void setEnodebTypeValue(YangString enodebTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-type",
            enodebTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-type",
     * using a String value.
     * @param enodebTypeValue used during instantiation.
     */
    public void setEnodebTypeValue(String enodebTypeValue) throws JNCException {
        setEnodebTypeValue(new YangString(enodebTypeValue));
    }

    /**
     * Unsets the value for child leaf "enodeb-type".
     */
    public void unsetEnodebTypeValue() throws JNCException {
        delete("enodeb-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-type" leaf will not have a value.
     */
    public void addEnodebType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enodeb-type" with operation "replace".
     */
    public void markEnodebTypeReplace() throws JNCException {
        markLeafReplace("enodebType");
    }

    /**
     * Marks the leaf "enodeb-type" with operation "merge".
     */
    public void markEnodebTypeMerge() throws JNCException {
        markLeafMerge("enodebType");
    }

    /**
     * Marks the leaf "enodeb-type" with operation "create".
     */
    public void markEnodebTypeCreate() throws JNCException {
        markLeafCreate("enodebType");
    }

    /**
     * Marks the leaf "enodeb-type" with operation "delete".
     */
    public void markEnodebTypeDelete() throws JNCException {
        markLeafDelete("enodebType");
    }

    /* Access methods for optional leaf child: "enodeb-ip". */

    /**
     * Gets the value for child leaf "enodeb-ip".
     * @return The value of the leaf.
     */
    public IpAddress getEnodebIpValue() throws JNCException {
        return (IpAddress)getValue("enodeb-ip");
    }

    /**
     * Sets the value for child leaf "enodeb-ip",
     * using a JNC type value.
     * @param enodebIpValue The value to set.
     * @param enodebIpValue used during instantiation.
     */
    public void setEnodebIpValue(IpAddress enodebIpValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-ip",
            enodebIpValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-ip",
     * using a String value.
     * @param enodebIpValue used during instantiation.
     */
    public void setEnodebIpValue(String enodebIpValue) throws JNCException {
        setEnodebIpValue(new IpAddress(enodebIpValue));
    }

    /**
     * Unsets the value for child leaf "enodeb-ip".
     */
    public void unsetEnodebIpValue() throws JNCException {
        delete("enodeb-ip");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-ip" leaf will not have a value.
     */
    public void addEnodebIp() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-ip",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enodeb-ip" with operation "replace".
     */
    public void markEnodebIpReplace() throws JNCException {
        markLeafReplace("enodebIp");
    }

    /**
     * Marks the leaf "enodeb-ip" with operation "merge".
     */
    public void markEnodebIpMerge() throws JNCException {
        markLeafMerge("enodebIp");
    }

    /**
     * Marks the leaf "enodeb-ip" with operation "create".
     */
    public void markEnodebIpCreate() throws JNCException {
        markLeafCreate("enodebIp");
    }

    /**
     * Marks the leaf "enodeb-ip" with operation "delete".
     */
    public void markEnodebIpDelete() throws JNCException {
        markLeafDelete("enodebIp");
    }

    /* Access methods for optional leaf child: "last-known-tai". */

    /**
     * Gets the value for child leaf "last-known-tai".
     * @return The value of the leaf.
     */
    public YangString getLastKnownTaiValue() throws JNCException {
        return (YangString)getValue("last-known-tai");
    }

    /**
     * Sets the value for child leaf "last-known-tai",
     * using instance of generated typedef class.
     * @param lastKnownTaiValue The value to set.
     * @param lastKnownTaiValue used during instantiation.
     */
    public void setLastKnownTaiValue(YangString lastKnownTaiValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "last-known-tai",
            lastKnownTaiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "last-known-tai",
     * using a String value.
     * @param lastKnownTaiValue used during instantiation.
     */
    public void setLastKnownTaiValue(String lastKnownTaiValue)
            throws JNCException {
        setLastKnownTaiValue(new YangString(lastKnownTaiValue));
    }

    /**
     * Unsets the value for child leaf "last-known-tai".
     */
    public void unsetLastKnownTaiValue() throws JNCException {
        delete("last-known-tai");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "last-known-tai" leaf will not have a value.
     */
    public void addLastKnownTai() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "last-known-tai",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "last-known-tai" with operation "replace".
     */
    public void markLastKnownTaiReplace() throws JNCException {
        markLeafReplace("lastKnownTai");
    }

    /**
     * Marks the leaf "last-known-tai" with operation "merge".
     */
    public void markLastKnownTaiMerge() throws JNCException {
        markLeafMerge("lastKnownTai");
    }

    /**
     * Marks the leaf "last-known-tai" with operation "create".
     */
    public void markLastKnownTaiCreate() throws JNCException {
        markLeafCreate("lastKnownTai");
    }

    /**
     * Marks the leaf "last-known-tai" with operation "delete".
     */
    public void markLastKnownTaiDelete() throws JNCException {
        markLeafDelete("lastKnownTai");
    }

    /* Access methods for optional leaf child: "eutran-cell-id". */

    /**
     * Gets the value for child leaf "eutran-cell-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getEutranCellIdValue() throws JNCException {
        return (YangUInt32)getValue("eutran-cell-id");
    }

    /**
     * Sets the value for child leaf "eutran-cell-id",
     * using instance of generated typedef class.
     * @param eutranCellIdValue The value to set.
     * @param eutranCellIdValue used during instantiation.
     */
    public void setEutranCellIdValue(YangUInt32 eutranCellIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eutran-cell-id",
            eutranCellIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "eutran-cell-id",
     * using Java primitive values.
     * @param eutranCellIdValue used during instantiation.
     */
    public void setEutranCellIdValue(long eutranCellIdValue)
            throws JNCException {
        setEutranCellIdValue(new YangUInt32(eutranCellIdValue));
    }

    /**
     * Sets the value for child leaf "eutran-cell-id",
     * using a String value.
     * @param eutranCellIdValue used during instantiation.
     */
    public void setEutranCellIdValue(String eutranCellIdValue)
            throws JNCException {
        setEutranCellIdValue(new YangUInt32(eutranCellIdValue));
    }

    /**
     * Unsets the value for child leaf "eutran-cell-id".
     */
    public void unsetEutranCellIdValue() throws JNCException {
        delete("eutran-cell-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "eutran-cell-id" leaf will not have a value.
     */
    public void addEutranCellId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eutran-cell-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "eutran-cell-id" with operation "replace".
     */
    public void markEutranCellIdReplace() throws JNCException {
        markLeafReplace("eutranCellId");
    }

    /**
     * Marks the leaf "eutran-cell-id" with operation "merge".
     */
    public void markEutranCellIdMerge() throws JNCException {
        markLeafMerge("eutranCellId");
    }

    /**
     * Marks the leaf "eutran-cell-id" with operation "create".
     */
    public void markEutranCellIdCreate() throws JNCException {
        markLeafCreate("eutranCellId");
    }

    /**
     * Marks the leaf "eutran-cell-id" with operation "delete".
     */
    public void markEutranCellIdDelete() throws JNCException {
        markLeafDelete("eutranCellId");
    }

    /* Access methods for optional leaf child: "s1-mme-peer-index". */

    /**
     * Gets the value for child leaf "s1-mme-peer-index".
     * @return The value of the leaf.
     */
    public YangUInt32 getS1MmePeerIndexValue() throws JNCException {
        return (YangUInt32)getValue("s1-mme-peer-index");
    }

    /**
     * Sets the value for child leaf "s1-mme-peer-index",
     * using instance of generated typedef class.
     * @param s1MmePeerIndexValue The value to set.
     * @param s1MmePeerIndexValue used during instantiation.
     */
    public void setS1MmePeerIndexValue(YangUInt32 s1MmePeerIndexValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s1-mme-peer-index",
            s1MmePeerIndexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "s1-mme-peer-index",
     * using Java primitive values.
     * @param s1MmePeerIndexValue used during instantiation.
     */
    public void setS1MmePeerIndexValue(long s1MmePeerIndexValue)
            throws JNCException {
        setS1MmePeerIndexValue(new YangUInt32(s1MmePeerIndexValue));
    }

    /**
     * Sets the value for child leaf "s1-mme-peer-index",
     * using a String value.
     * @param s1MmePeerIndexValue used during instantiation.
     */
    public void setS1MmePeerIndexValue(String s1MmePeerIndexValue)
            throws JNCException {
        setS1MmePeerIndexValue(new YangUInt32(s1MmePeerIndexValue));
    }

    /**
     * Unsets the value for child leaf "s1-mme-peer-index".
     */
    public void unsetS1MmePeerIndexValue() throws JNCException {
        delete("s1-mme-peer-index");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "s1-mme-peer-index" leaf will not have a value.
     */
    public void addS1MmePeerIndex() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s1-mme-peer-index",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "s1-mme-peer-index" with operation "replace".
     */
    public void markS1MmePeerIndexReplace() throws JNCException {
        markLeafReplace("s1MmePeerIndex");
    }

    /**
     * Marks the leaf "s1-mme-peer-index" with operation "merge".
     */
    public void markS1MmePeerIndexMerge() throws JNCException {
        markLeafMerge("s1MmePeerIndex");
    }

    /**
     * Marks the leaf "s1-mme-peer-index" with operation "create".
     */
    public void markS1MmePeerIndexCreate() throws JNCException {
        markLeafCreate("s1MmePeerIndex");
    }

    /**
     * Marks the leaf "s1-mme-peer-index" with operation "delete".
     */
    public void markS1MmePeerIndexDelete() throws JNCException {
        markLeafDelete("s1MmePeerIndex");
    }

    /* Access methods for optional leaf child: "mme-ue-s1ap-id". */

    /**
     * Gets the value for child leaf "mme-ue-s1ap-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getMmeUeS1apIdValue() throws JNCException {
        return (YangUInt32)getValue("mme-ue-s1ap-id");
    }

    /**
     * Sets the value for child leaf "mme-ue-s1ap-id",
     * using instance of generated typedef class.
     * @param mmeUeS1apIdValue The value to set.
     * @param mmeUeS1apIdValue used during instantiation.
     */
    public void setMmeUeS1apIdValue(YangUInt32 mmeUeS1apIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-ue-s1ap-id",
            mmeUeS1apIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mme-ue-s1ap-id",
     * using Java primitive values.
     * @param mmeUeS1apIdValue used during instantiation.
     */
    public void setMmeUeS1apIdValue(long mmeUeS1apIdValue) throws JNCException {
        setMmeUeS1apIdValue(new YangUInt32(mmeUeS1apIdValue));
    }

    /**
     * Sets the value for child leaf "mme-ue-s1ap-id",
     * using a String value.
     * @param mmeUeS1apIdValue used during instantiation.
     */
    public void setMmeUeS1apIdValue(String mmeUeS1apIdValue)
            throws JNCException {
        setMmeUeS1apIdValue(new YangUInt32(mmeUeS1apIdValue));
    }

    /**
     * Unsets the value for child leaf "mme-ue-s1ap-id".
     */
    public void unsetMmeUeS1apIdValue() throws JNCException {
        delete("mme-ue-s1ap-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mme-ue-s1ap-id" leaf will not have a value.
     */
    public void addMmeUeS1apId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-ue-s1ap-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mme-ue-s1ap-id" with operation "replace".
     */
    public void markMmeUeS1apIdReplace() throws JNCException {
        markLeafReplace("mmeUeS1apId");
    }

    /**
     * Marks the leaf "mme-ue-s1ap-id" with operation "merge".
     */
    public void markMmeUeS1apIdMerge() throws JNCException {
        markLeafMerge("mmeUeS1apId");
    }

    /**
     * Marks the leaf "mme-ue-s1ap-id" with operation "create".
     */
    public void markMmeUeS1apIdCreate() throws JNCException {
        markLeafCreate("mmeUeS1apId");
    }

    /**
     * Marks the leaf "mme-ue-s1ap-id" with operation "delete".
     */
    public void markMmeUeS1apIdDelete() throws JNCException {
        markLeafDelete("mmeUeS1apId");
    }

    /* Access methods for optional leaf child: "csg-id". */

    /**
     * Gets the value for child leaf "csg-id".
     * @return The value of the leaf.
     */
    public YangUInt8 getCsgIdValue() throws JNCException {
        return (YangUInt8)getValue("csg-id");
    }

    /**
     * Sets the value for child leaf "csg-id",
     * using instance of generated typedef class.
     * @param csgIdValue The value to set.
     * @param csgIdValue used during instantiation.
     */
    public void setCsgIdValue(YangUInt8 csgIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "csg-id",
            csgIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "csg-id",
     * using Java primitive values.
     * @param csgIdValue used during instantiation.
     */
    public void setCsgIdValue(short csgIdValue) throws JNCException {
        setCsgIdValue(new YangUInt8(csgIdValue));
    }

    /**
     * Sets the value for child leaf "csg-id",
     * using a String value.
     * @param csgIdValue used during instantiation.
     */
    public void setCsgIdValue(String csgIdValue) throws JNCException {
        setCsgIdValue(new YangUInt8(csgIdValue));
    }

    /**
     * Unsets the value for child leaf "csg-id".
     */
    public void unsetCsgIdValue() throws JNCException {
        delete("csg-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "csg-id" leaf will not have a value.
     */
    public void addCsgId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "csg-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "csg-id" with operation "replace".
     */
    public void markCsgIdReplace() throws JNCException {
        markLeafReplace("csgId");
    }

    /**
     * Marks the leaf "csg-id" with operation "merge".
     */
    public void markCsgIdMerge() throws JNCException {
        markLeafMerge("csgId");
    }

    /**
     * Marks the leaf "csg-id" with operation "create".
     */
    public void markCsgIdCreate() throws JNCException {
        markLeafCreate("csgId");
    }

    /**
     * Marks the leaf "csg-id" with operation "delete".
     */
    public void markCsgIdDelete() throws JNCException {
        markLeafDelete("csgId");
    }

    /* Access methods for optional leaf child: "rrc-cause". */

    /**
     * Gets the value for child leaf "rrc-cause".
     * @return The value of the leaf.
     */
    public YangString getRrcCauseValue() throws JNCException {
        return (YangString)getValue("rrc-cause");
    }

    /**
     * Sets the value for child leaf "rrc-cause",
     * using instance of generated typedef class.
     * @param rrcCauseValue The value to set.
     * @param rrcCauseValue used during instantiation.
     */
    public void setRrcCauseValue(YangString rrcCauseValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rrc-cause",
            rrcCauseValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rrc-cause",
     * using a String value.
     * @param rrcCauseValue used during instantiation.
     */
    public void setRrcCauseValue(String rrcCauseValue) throws JNCException {
        setRrcCauseValue(new YangString(rrcCauseValue));
    }

    /**
     * Unsets the value for child leaf "rrc-cause".
     */
    public void unsetRrcCauseValue() throws JNCException {
        delete("rrc-cause");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rrc-cause" leaf will not have a value.
     */
    public void addRrcCause() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rrc-cause",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rrc-cause" with operation "replace".
     */
    public void markRrcCauseReplace() throws JNCException {
        markLeafReplace("rrcCause");
    }

    /**
     * Marks the leaf "rrc-cause" with operation "merge".
     */
    public void markRrcCauseMerge() throws JNCException {
        markLeafMerge("rrcCause");
    }

    /**
     * Marks the leaf "rrc-cause" with operation "create".
     */
    public void markRrcCauseCreate() throws JNCException {
        markLeafCreate("rrcCause");
    }

    /**
     * Marks the leaf "rrc-cause" with operation "delete".
     */
    public void markRrcCauseDelete() throws JNCException {
        markLeafDelete("rrcCause");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
