/* 
 * @(#)ServiceArea.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeMmeArea;

import MmeMmePool;

import MmePlmn;

import TaiEnodebMap;

import TrackingArea;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/service-area"
 * <p>
 * See line 269 in
 * fgwConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class ServiceArea extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty ServiceArea object.
     */
    public ServiceArea() {
        super(Epc.NAMESPACE, "service-area");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public ServiceArea clone() {
        return (ServiceArea)cloneContent(new ServiceArea());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public ServiceArea cloneShallow() {
        return (ServiceArea)cloneShallowContent(new ServiceArea());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-mme-area",
            "mme-plmn",
            "mme-mme-pool",
            "tracking-area",
            "tai-enodeb-map",
        };
    }

    /* Access methods for list child: "mme-mme-area". */

    /**
     * Gets list entry "mmeMmeArea", with specified keys.
     * @param indexValue Key argument of child.
     */
    public MmeMmeArea getMmeMmeArea(YangUInt8 indexValue) throws JNCException {
        String path = "mme-mme-area[index='" + indexValue + "']";
        return (MmeMmeArea)searchOne(path);
    }

    /**
     * Gets list entry "mmeMmeArea", with specified keys.
     * The keys are specified as strings.
     * @param indexValue Key argument of child.
     */
    public MmeMmeArea getMmeMmeArea(String indexValue) throws JNCException {
        String path = "mme-mme-area[index='" + indexValue + "']";
        return (MmeMmeArea)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-mme-area".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeMmeAreaIterator() {
        return new ElementChildrenIterator(children, "mme-mme-area");
    }

    /**
     * Adds list entry "mmeMmeArea", using an existing object.
     * @param mmeMmeArea The object to add.
     * @return The added child.
     */
    public MmeMmeArea addMmeMmeArea(MmeMmeArea mmeMmeArea) throws JNCException {
        insertChild(mmeMmeArea, childrenNames());
        return mmeMmeArea;
    }

    /**
     * Adds list entry "mmeMmeArea", with specified keys.
     * @param indexValue Key argument of child.
     * @return The added child.
     */
    public MmeMmeArea addMmeMmeArea(YangUInt8 indexValue) throws JNCException {
        MmeMmeArea mmeMmeArea = new MmeMmeArea(indexValue);
        return addMmeMmeArea(mmeMmeArea);
    }

    /**
     * Adds list entry "mmeMmeArea", with specified keys.
     * The keys are specified as strings.
     * @param indexValue Key argument of child.
     * @return The added child.
     */
    public MmeMmeArea addMmeMmeArea(String indexValue) throws JNCException {
        MmeMmeArea mmeMmeArea = new MmeMmeArea(indexValue);
        return addMmeMmeArea(mmeMmeArea);
    }

    /**
     * Adds list entry "mmeMmeArea".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeMmeArea addMmeMmeArea() throws JNCException {
        MmeMmeArea mmeMmeArea = new MmeMmeArea();
        insertChild(mmeMmeArea, childrenNames());
        return mmeMmeArea;
    }

    /**
     * Deletes list entry "mmeMmeArea", with specified keys.
     * @param indexValue Key argument of child.
     */
    public void deleteMmeMmeArea(YangUInt8 indexValue) throws JNCException {
        String path = "mme-mme-area[index='" + indexValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeMmeArea", with specified keys.
     * The keys are specified as strings.
     * @param indexValue Key argument of child.
     */
    public void deleteMmeMmeArea(String indexValue) throws JNCException {
        String path = "mme-mme-area[index='" + indexValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-plmn". */

    /**
     * Gets list entry "mmePlmn", with specified keys.
     * @param plmnIdValue Key argument of child.
     */
    public MmePlmn getMmePlmn(YangString plmnIdValue) throws JNCException {
        String path = "mme-plmn[plmnId='" + plmnIdValue + "']";
        return (MmePlmn)searchOne(path);
    }

    /**
     * Gets list entry "mmePlmn", with specified keys.
     * The keys are specified as strings.
     * @param plmnIdValue Key argument of child.
     */
    public MmePlmn getMmePlmn(String plmnIdValue) throws JNCException {
        String path = "mme-plmn[plmnId='" + plmnIdValue + "']";
        return (MmePlmn)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-plmn".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmePlmnIterator() {
        return new ElementChildrenIterator(children, "mme-plmn");
    }

    /**
     * Adds list entry "mmePlmn", using an existing object.
     * @param mmePlmn The object to add.
     * @return The added child.
     */
    public MmePlmn addMmePlmn(MmePlmn mmePlmn) throws JNCException {
        insertChild(mmePlmn, childrenNames());
        return mmePlmn;
    }

    /**
     * Adds list entry "mmePlmn", with specified keys.
     * @param plmnIdValue Key argument of child.
     * @return The added child.
     */
    public MmePlmn addMmePlmn(YangString plmnIdValue) throws JNCException {
        MmePlmn mmePlmn = new MmePlmn(plmnIdValue);
        return addMmePlmn(mmePlmn);
    }

    /**
     * Adds list entry "mmePlmn", with specified keys.
     * The keys are specified as strings.
     * @param plmnIdValue Key argument of child.
     * @return The added child.
     */
    public MmePlmn addMmePlmn(String plmnIdValue) throws JNCException {
        MmePlmn mmePlmn = new MmePlmn(plmnIdValue);
        return addMmePlmn(mmePlmn);
    }

    /**
     * Adds list entry "mmePlmn".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmePlmn addMmePlmn() throws JNCException {
        MmePlmn mmePlmn = new MmePlmn();
        insertChild(mmePlmn, childrenNames());
        return mmePlmn;
    }

    /**
     * Deletes list entry "mmePlmn", with specified keys.
     * @param plmnIdValue Key argument of child.
     */
    public void deleteMmePlmn(YangString plmnIdValue) throws JNCException {
        String path = "mme-plmn[plmnId='" + plmnIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmePlmn", with specified keys.
     * The keys are specified as strings.
     * @param plmnIdValue Key argument of child.
     */
    public void deleteMmePlmn(String plmnIdValue) throws JNCException {
        String path = "mme-plmn[plmnId='" + plmnIdValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-mme-pool". */

    /**
     * Gets list entry "mmeMmePool", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeMmePool getMmeMmePool(YangString nameValue) throws JNCException {
        String path = "mme-mme-pool[name='" + nameValue + "']";
        return (MmeMmePool)searchOne(path);
    }

    /**
     * Gets list entry "mmeMmePool", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeMmePool getMmeMmePool(String nameValue) throws JNCException {
        String path = "mme-mme-pool[name='" + nameValue + "']";
        return (MmeMmePool)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-mme-pool".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeMmePoolIterator() {
        return new ElementChildrenIterator(children, "mme-mme-pool");
    }

    /**
     * Adds list entry "mmeMmePool", using an existing object.
     * @param mmeMmePool The object to add.
     * @return The added child.
     */
    public MmeMmePool addMmeMmePool(MmeMmePool mmeMmePool) throws JNCException {
        insertChild(mmeMmePool, childrenNames());
        return mmeMmePool;
    }

    /**
     * Adds list entry "mmeMmePool", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeMmePool addMmeMmePool(YangString nameValue) throws JNCException {
        MmeMmePool mmeMmePool = new MmeMmePool(nameValue);
        return addMmeMmePool(mmeMmePool);
    }

    /**
     * Adds list entry "mmeMmePool", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeMmePool addMmeMmePool(String nameValue) throws JNCException {
        MmeMmePool mmeMmePool = new MmeMmePool(nameValue);
        return addMmeMmePool(mmeMmePool);
    }

    /**
     * Adds list entry "mmeMmePool".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeMmePool addMmeMmePool() throws JNCException {
        MmeMmePool mmeMmePool = new MmeMmePool();
        insertChild(mmeMmePool, childrenNames());
        return mmeMmePool;
    }

    /**
     * Deletes list entry "mmeMmePool", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeMmePool(YangString nameValue) throws JNCException {
        String path = "mme-mme-pool[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeMmePool", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeMmePool(String nameValue) throws JNCException {
        String path = "mme-mme-pool[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "tracking-area". */

    /**
     * Gets list entry "trackingArea", with specified keys.
     */
    public TrackingArea getTrackingArea() throws JNCException {
        String path = "tracking-area";
        return (TrackingArea)searchOne(path);
    }

    /**
     * Iterator method for the list "tracking-area".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator trackingAreaIterator() {
        return new ElementChildrenIterator(children, "tracking-area");
    }

    /**
     * Adds list entry "trackingArea", using an existing object.
     * @param trackingArea The object to add.
     * @return The added child.
     */
    public TrackingArea addTrackingArea(TrackingArea trackingArea)
            throws JNCException {
        insertChild(trackingArea, childrenNames());
        return trackingArea;
    }

    /**
     * Adds list entry "trackingArea".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public TrackingArea addTrackingArea() throws JNCException {
        TrackingArea trackingArea = new TrackingArea();
        insertChild(trackingArea, childrenNames());
        return trackingArea;
    }

    /**
     * Deletes list entry "trackingArea", with specified keys.
     */
    public void deleteTrackingArea() throws JNCException {
        String path = "tracking-area";
        delete(path);
    }

    /* Access methods for list child: "tai-enodeb-map". */

    /**
     * Gets list entry "taiEnodebMap", with specified keys.
     */
    public TaiEnodebMap getTaiEnodebMap() throws JNCException {
        String path = "tai-enodeb-map";
        return (TaiEnodebMap)searchOne(path);
    }

    /**
     * Iterator method for the list "tai-enodeb-map".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator taiEnodebMapIterator() {
        return new ElementChildrenIterator(children, "tai-enodeb-map");
    }

    /**
     * Adds list entry "taiEnodebMap", using an existing object.
     * @param taiEnodebMap The object to add.
     * @return The added child.
     */
    public TaiEnodebMap addTaiEnodebMap(TaiEnodebMap taiEnodebMap)
            throws JNCException {
        insertChild(taiEnodebMap, childrenNames());
        return taiEnodebMap;
    }

    /**
     * Adds list entry "taiEnodebMap".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public TaiEnodebMap addTaiEnodebMap() throws JNCException {
        TaiEnodebMap taiEnodebMap = new TaiEnodebMap();
        insertChild(taiEnodebMap, childrenNames());
        return taiEnodebMap;
    }

    /**
     * Deletes list entry "taiEnodebMap", with specified keys.
     */
    public void deleteTaiEnodebMap() throws JNCException {
        String path = "tai-enodeb-map";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
