/* 
 * @(#)Engineering.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeFgwCongestionOverload;

import MmeFgwS1Capacity;

import MmeFgwS1Overload;

import MmeFgwScCapacity;

import MmeFgwScEngineering;

import MmeFgwUeConnectionOverload;

import NodeSet;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/engineering"
 * <p>
 * See line 266 in
 * fgwConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Engineering extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-fgw-congestion-overload".
     */
    public MmeFgwCongestionOverload mmeFgwCongestionOverload = null;

    /**
     * Field for child container "mme-fgw-ue-connection-overload".
     */
    public MmeFgwUeConnectionOverload mmeFgwUeConnectionOverload = null;

    /**
     * Field for child container "mme-fgw-s1-overload".
     */
    public MmeFgwS1Overload mmeFgwS1Overload = null;

    /**
     * Field for child container "mme-fgw-sc-engineering".
     */
    public MmeFgwScEngineering mmeFgwScEngineering = null;

    /**
     * Constructor for an empty Engineering object.
     */
    public Engineering() {
        super(Epc.NAMESPACE, "engineering");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Engineering clone() {
        return (Engineering)cloneContent(new Engineering());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Engineering cloneShallow() {
        return (Engineering)cloneShallowContent(new Engineering());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-fgw-congestion-overload",
            "mme-fgw-ue-connection-overload",
            "mme-fgw-s1-capacity",
            "mme-fgw-s1-overload",
            "mme-fgw-sc-capacity",
            "mme-fgw-sc-engineering",
        };
    }

    /* Access methods for container child: "mme-fgw-congestion-overload". */

    /**
     * Adds container entry "mmeFgwCongestionOverload", using an existing object.
     * @param mmeFgwCongestionOverload The object to add.
     * @return The added child.
     */
    public MmeFgwCongestionOverload addMmeFgwCongestionOverload(MmeFgwCongestionOverload mmeFgwCongestionOverload)
            throws JNCException {
        this.mmeFgwCongestionOverload = mmeFgwCongestionOverload;
        insertChild(mmeFgwCongestionOverload, childrenNames());
        return mmeFgwCongestionOverload;
    }

    /**
     * Adds container entry "mmeFgwCongestionOverload".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeFgwCongestionOverload addMmeFgwCongestionOverload()
            throws JNCException {
        MmeFgwCongestionOverload mmeFgwCongestionOverload = new MmeFgwCongestionOverload();
        this.mmeFgwCongestionOverload = mmeFgwCongestionOverload;
        insertChild(mmeFgwCongestionOverload, childrenNames());
        return mmeFgwCongestionOverload;
    }

    /**
     * Deletes container entry "mmeFgwCongestionOverload".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeFgwCongestionOverload() throws JNCException {
        this.mmeFgwCongestionOverload = null;
        String path = "mme-fgw-congestion-overload";
        return delete(path);
    }

    /* Access methods for container child: "mme-fgw-ue-connection-overload". */

    /**
     * Adds container entry "mmeFgwUeConnectionOverload", using an existing object.
     * @param mmeFgwUeConnectionOverload The object to add.
     * @return The added child.
     */
    public MmeFgwUeConnectionOverload addMmeFgwUeConnectionOverload(MmeFgwUeConnectionOverload mmeFgwUeConnectionOverload)
            throws JNCException {
        this.mmeFgwUeConnectionOverload = mmeFgwUeConnectionOverload;
        insertChild(mmeFgwUeConnectionOverload, childrenNames());
        return mmeFgwUeConnectionOverload;
    }

    /**
     * Adds container entry "mmeFgwUeConnectionOverload".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeFgwUeConnectionOverload addMmeFgwUeConnectionOverload()
            throws JNCException {
        MmeFgwUeConnectionOverload mmeFgwUeConnectionOverload = new MmeFgwUeConnectionOverload();
        this.mmeFgwUeConnectionOverload = mmeFgwUeConnectionOverload;
        insertChild(mmeFgwUeConnectionOverload, childrenNames());
        return mmeFgwUeConnectionOverload;
    }

    /**
     * Deletes container entry "mmeFgwUeConnectionOverload".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeFgwUeConnectionOverload() throws JNCException {
        this.mmeFgwUeConnectionOverload = null;
        String path = "mme-fgw-ue-connection-overload";
        return delete(path);
    }

    /* Access methods for list child: "mme-fgw-s1-capacity". */

    /**
     * Gets list entry "mmeFgwS1Capacity", with specified keys.
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeFgwS1Capacity getMmeFgwS1Capacity(YangUInt16 callpServiceIdValue)
            throws JNCException {
        String path = "mme-fgw-s1-capacity[callpServiceId='" + callpServiceIdValue + "']";
        return (MmeFgwS1Capacity)searchOne(path);
    }

    /**
     * Gets list entry "mmeFgwS1Capacity", with specified keys.
     * The keys are specified as strings.
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeFgwS1Capacity getMmeFgwS1Capacity(String callpServiceIdValue)
            throws JNCException {
        String path = "mme-fgw-s1-capacity[callpServiceId='" + callpServiceIdValue + "']";
        return (MmeFgwS1Capacity)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-fgw-s1-capacity".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeFgwS1CapacityIterator() {
        return new ElementChildrenIterator(children, "mme-fgw-s1-capacity");
    }

    /**
     * Adds list entry "mmeFgwS1Capacity", using an existing object.
     * @param mmeFgwS1Capacity The object to add.
     * @return The added child.
     */
    public MmeFgwS1Capacity addMmeFgwS1Capacity(MmeFgwS1Capacity mmeFgwS1Capacity)
            throws JNCException {
        insertChild(mmeFgwS1Capacity, childrenNames());
        return mmeFgwS1Capacity;
    }

    /**
     * Adds list entry "mmeFgwS1Capacity", with specified keys.
     * @param callpServiceIdValue Key argument of child.
     * @return The added child.
     */
    public MmeFgwS1Capacity addMmeFgwS1Capacity(YangUInt16 callpServiceIdValue)
            throws JNCException {
        MmeFgwS1Capacity mmeFgwS1Capacity = new MmeFgwS1Capacity(callpServiceIdValue);
        return addMmeFgwS1Capacity(mmeFgwS1Capacity);
    }

    /**
     * Adds list entry "mmeFgwS1Capacity", with specified keys.
     * The keys are specified as strings.
     * @param callpServiceIdValue Key argument of child.
     * @return The added child.
     */
    public MmeFgwS1Capacity addMmeFgwS1Capacity(String callpServiceIdValue)
            throws JNCException {
        MmeFgwS1Capacity mmeFgwS1Capacity = new MmeFgwS1Capacity(callpServiceIdValue);
        return addMmeFgwS1Capacity(mmeFgwS1Capacity);
    }

    /**
     * Adds list entry "mmeFgwS1Capacity".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeFgwS1Capacity addMmeFgwS1Capacity() throws JNCException {
        MmeFgwS1Capacity mmeFgwS1Capacity = new MmeFgwS1Capacity();
        insertChild(mmeFgwS1Capacity, childrenNames());
        return mmeFgwS1Capacity;
    }

    /**
     * Deletes list entry "mmeFgwS1Capacity", with specified keys.
     * @param callpServiceIdValue Key argument of child.
     */
    public void deleteMmeFgwS1Capacity(YangUInt16 callpServiceIdValue)
            throws JNCException {
        String path = "mme-fgw-s1-capacity[callpServiceId='" + callpServiceIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeFgwS1Capacity", with specified keys.
     * The keys are specified as strings.
     * @param callpServiceIdValue Key argument of child.
     */
    public void deleteMmeFgwS1Capacity(String callpServiceIdValue)
            throws JNCException {
        String path = "mme-fgw-s1-capacity[callpServiceId='" + callpServiceIdValue + "']";
        delete(path);
    }

    /* Access methods for container child: "mme-fgw-s1-overload". */

    /**
     * Adds container entry "mmeFgwS1Overload", using an existing object.
     * @param mmeFgwS1Overload The object to add.
     * @return The added child.
     */
    public MmeFgwS1Overload addMmeFgwS1Overload(MmeFgwS1Overload mmeFgwS1Overload)
            throws JNCException {
        this.mmeFgwS1Overload = mmeFgwS1Overload;
        insertChild(mmeFgwS1Overload, childrenNames());
        return mmeFgwS1Overload;
    }

    /**
     * Adds container entry "mmeFgwS1Overload".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeFgwS1Overload addMmeFgwS1Overload() throws JNCException {
        MmeFgwS1Overload mmeFgwS1Overload = new MmeFgwS1Overload();
        this.mmeFgwS1Overload = mmeFgwS1Overload;
        insertChild(mmeFgwS1Overload, childrenNames());
        return mmeFgwS1Overload;
    }

    /**
     * Deletes container entry "mmeFgwS1Overload".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeFgwS1Overload() throws JNCException {
        this.mmeFgwS1Overload = null;
        String path = "mme-fgw-s1-overload";
        return delete(path);
    }

    /* Access methods for list child: "mme-fgw-sc-capacity". */

    /**
     * Gets list entry "mmeFgwScCapacity", with specified keys.
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeFgwScCapacity getMmeFgwScCapacity(YangUInt16 callpServiceIdValue)
            throws JNCException {
        String path = "mme-fgw-sc-capacity[callpServiceId='" + callpServiceIdValue + "']";
        return (MmeFgwScCapacity)searchOne(path);
    }

    /**
     * Gets list entry "mmeFgwScCapacity", with specified keys.
     * The keys are specified as strings.
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeFgwScCapacity getMmeFgwScCapacity(String callpServiceIdValue)
            throws JNCException {
        String path = "mme-fgw-sc-capacity[callpServiceId='" + callpServiceIdValue + "']";
        return (MmeFgwScCapacity)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-fgw-sc-capacity".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeFgwScCapacityIterator() {
        return new ElementChildrenIterator(children, "mme-fgw-sc-capacity");
    }

    /**
     * Adds list entry "mmeFgwScCapacity", using an existing object.
     * @param mmeFgwScCapacity The object to add.
     * @return The added child.
     */
    public MmeFgwScCapacity addMmeFgwScCapacity(MmeFgwScCapacity mmeFgwScCapacity)
            throws JNCException {
        insertChild(mmeFgwScCapacity, childrenNames());
        return mmeFgwScCapacity;
    }

    /**
     * Adds list entry "mmeFgwScCapacity", with specified keys.
     * @param callpServiceIdValue Key argument of child.
     * @return The added child.
     */
    public MmeFgwScCapacity addMmeFgwScCapacity(YangUInt16 callpServiceIdValue)
            throws JNCException {
        MmeFgwScCapacity mmeFgwScCapacity = new MmeFgwScCapacity(callpServiceIdValue);
        return addMmeFgwScCapacity(mmeFgwScCapacity);
    }

    /**
     * Adds list entry "mmeFgwScCapacity", with specified keys.
     * The keys are specified as strings.
     * @param callpServiceIdValue Key argument of child.
     * @return The added child.
     */
    public MmeFgwScCapacity addMmeFgwScCapacity(String callpServiceIdValue)
            throws JNCException {
        MmeFgwScCapacity mmeFgwScCapacity = new MmeFgwScCapacity(callpServiceIdValue);
        return addMmeFgwScCapacity(mmeFgwScCapacity);
    }

    /**
     * Adds list entry "mmeFgwScCapacity".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeFgwScCapacity addMmeFgwScCapacity() throws JNCException {
        MmeFgwScCapacity mmeFgwScCapacity = new MmeFgwScCapacity();
        insertChild(mmeFgwScCapacity, childrenNames());
        return mmeFgwScCapacity;
    }

    /**
     * Deletes list entry "mmeFgwScCapacity", with specified keys.
     * @param callpServiceIdValue Key argument of child.
     */
    public void deleteMmeFgwScCapacity(YangUInt16 callpServiceIdValue)
            throws JNCException {
        String path = "mme-fgw-sc-capacity[callpServiceId='" + callpServiceIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeFgwScCapacity", with specified keys.
     * The keys are specified as strings.
     * @param callpServiceIdValue Key argument of child.
     */
    public void deleteMmeFgwScCapacity(String callpServiceIdValue)
            throws JNCException {
        String path = "mme-fgw-sc-capacity[callpServiceId='" + callpServiceIdValue + "']";
        delete(path);
    }

    /* Access methods for container child: "mme-fgw-sc-engineering". */

    /**
     * Adds container entry "mmeFgwScEngineering", using an existing object.
     * @param mmeFgwScEngineering The object to add.
     * @return The added child.
     */
    public MmeFgwScEngineering addMmeFgwScEngineering(MmeFgwScEngineering mmeFgwScEngineering)
            throws JNCException {
        this.mmeFgwScEngineering = mmeFgwScEngineering;
        insertChild(mmeFgwScEngineering, childrenNames());
        return mmeFgwScEngineering;
    }

    /**
     * Adds container entry "mmeFgwScEngineering".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeFgwScEngineering addMmeFgwScEngineering() throws JNCException {
        MmeFgwScEngineering mmeFgwScEngineering = new MmeFgwScEngineering();
        this.mmeFgwScEngineering = mmeFgwScEngineering;
        insertChild(mmeFgwScEngineering, childrenNames());
        return mmeFgwScEngineering;
    }

    /**
     * Deletes container entry "mmeFgwScEngineering".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeFgwScEngineering() throws JNCException {
        this.mmeFgwScEngineering = null;
        String path = "mme-fgw-sc-engineering";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeFgwCongestionOverload) mmeFgwCongestionOverload = (MmeFgwCongestionOverload)child;
        else if (child instanceof MmeFgwUeConnectionOverload) mmeFgwUeConnectionOverload = (MmeFgwUeConnectionOverload)child;
        else if (child instanceof MmeFgwS1Overload) mmeFgwS1Overload = (MmeFgwS1Overload)child;
        else if (child instanceof MmeFgwScEngineering) mmeFgwScEngineering = (MmeFgwScEngineering)child;
    }

}
