/* 
 * @(#)FgwHandover.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.statistics;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import LteIntraRat;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/statistics/fgwHandover"
 * <p>
 * See line 2503 in
 * oamPmServerCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class FgwHandover extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty FgwHandover object.
     */
    public FgwHandover() {
        super(Epc.NAMESPACE, "fgwHandover");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public FgwHandover clone() {
        return (FgwHandover)cloneContent(new FgwHandover());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public FgwHandover cloneShallow() {
        return (FgwHandover)cloneShallowContent(new FgwHandover());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "lteIntraRat",
        };
    }

    /* Access methods for list child: "lteIntraRat". */

    /**
     * Gets list entry "lteIntraRat", with specified keys.
     */
    public LteIntraRat getLteIntraRat() throws JNCException {
        String path = "lteIntraRat";
        return (LteIntraRat)searchOne(path);
    }

    /**
     * Iterator method for the list "lteIntraRat".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator lteIntraRatIterator() {
        return new ElementChildrenIterator(children, "lteIntraRat");
    }

    /**
     * Adds list entry "lteIntraRat", using an existing object.
     * @param lteIntraRat The object to add.
     * @return The added child.
     */
    public LteIntraRat addLteIntraRat(LteIntraRat lteIntraRat)
            throws JNCException {
        insertChild(lteIntraRat, childrenNames());
        return lteIntraRat;
    }

    /**
     * Adds list entry "lteIntraRat".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LteIntraRat addLteIntraRat() throws JNCException {
        LteIntraRat lteIntraRat = new LteIntraRat();
        insertChild(lteIntraRat, childrenNames());
        return lteIntraRat;
    }

    /**
     * Deletes list entry "lteIntraRat", with specified keys.
     */
    public void deleteLteIntraRat() throws JNCException {
        String path = "lteIntraRat";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
