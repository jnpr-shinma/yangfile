/* 
 * @(#)MmeFgwS1Capacity.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.engineering;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt16;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/engineering/mme-fgw-s1-capacity"
 * <p>
 * See line 1101 in
 * s1MasterConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeFgwS1Capacity extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeFgwS1Capacity object.
     */
    public MmeFgwS1Capacity() {
        super(Epc.NAMESPACE, "mme-fgw-s1-capacity");
    }

    /**
     * Constructor for an initialized MmeFgwS1Capacity object,
     * 
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeFgwS1Capacity(YangUInt16 callpServiceIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-fgw-s1-capacity");
        Leaf callpServiceId = new Leaf(Epc.NAMESPACE, "callp-service-id");
        callpServiceId.setValue(callpServiceIdValue);
        insertChild(callpServiceId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeFgwS1Capacity object,
     * with String keys.
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeFgwS1Capacity(String callpServiceIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-fgw-s1-capacity");
        Leaf callpServiceId = new Leaf(Epc.NAMESPACE, "callp-service-id");
        callpServiceId.setValue(new YangUInt16(callpServiceIdValue));
        insertChild(callpServiceId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeFgwS1Capacity object,
     * with keys of built in Java types.
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeFgwS1Capacity(int callpServiceIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-fgw-s1-capacity");
        Leaf callpServiceId = new Leaf(Epc.NAMESPACE, "callp-service-id");
        callpServiceId.setValue(new YangUInt16(callpServiceIdValue));
        insertChild(callpServiceId, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeFgwS1Capacity clone() {
        MmeFgwS1Capacity copy;
        try {
            copy = new MmeFgwS1Capacity(getCallpServiceIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeFgwS1Capacity)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeFgwS1Capacity cloneShallow() {
        MmeFgwS1Capacity copy;
        try {
            copy = new MmeFgwS1Capacity(getCallpServiceIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeFgwS1Capacity)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "callp-service-id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "callp-service-id",
            "max-num-enodeb",
        };
    }

    /* Access methods for leaf child: "callp-service-id". */

    /**
     * Gets the value for child leaf "callp-service-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getCallpServiceIdValue() throws JNCException {
        return (YangUInt16)getValue("callp-service-id");
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using instance of generated typedef class.
     * @param callpServiceIdValue The value to set.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(YangUInt16 callpServiceIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "callp-service-id",
            callpServiceIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using Java primitive values.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(int callpServiceIdValue)
            throws JNCException {
        setCallpServiceIdValue(new YangUInt16(callpServiceIdValue));
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using a String value.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(String callpServiceIdValue)
            throws JNCException {
        setCallpServiceIdValue(new YangUInt16(callpServiceIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "callp-service-id" leaf will not have a value.
     */
    public void addCallpServiceId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "callp-service-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "max-num-enodeb". */

    /**
     * Gets the value for child leaf "max-num-enodeb".
     * @return The value of the leaf.
     */
    public YangUInt32 getMaxNumEnodebValue() throws JNCException {
        YangUInt32 maxNumEnodeb = (YangUInt32)getValue("max-num-enodeb");
        if (maxNumEnodeb == null) {
            maxNumEnodeb = new YangUInt32("10000");  // default
        }
        return maxNumEnodeb;
    }

    /**
     * Sets the value for child leaf "max-num-enodeb",
     * using instance of generated typedef class.
     * @param maxNumEnodebValue The value to set.
     * @param maxNumEnodebValue used during instantiation.
     */
    public void setMaxNumEnodebValue(YangUInt32 maxNumEnodebValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-num-enodeb",
            maxNumEnodebValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-num-enodeb",
     * using Java primitive values.
     * @param maxNumEnodebValue used during instantiation.
     */
    public void setMaxNumEnodebValue(long maxNumEnodebValue)
            throws JNCException {
        setMaxNumEnodebValue(new YangUInt32(maxNumEnodebValue));
    }

    /**
     * Sets the value for child leaf "max-num-enodeb",
     * using a String value.
     * @param maxNumEnodebValue used during instantiation.
     */
    public void setMaxNumEnodebValue(String maxNumEnodebValue)
            throws JNCException {
        setMaxNumEnodebValue(new YangUInt32(maxNumEnodebValue));
    }

    /**
     * Unsets the value for child leaf "max-num-enodeb".
     */
    public void unsetMaxNumEnodebValue() throws JNCException {
        delete("max-num-enodeb");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-num-enodeb" leaf will not have a value.
     */
    public void addMaxNumEnodeb() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-num-enodeb",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-num-enodeb" with operation "replace".
     */
    public void markMaxNumEnodebReplace() throws JNCException {
        markLeafReplace("maxNumEnodeb");
    }

    /**
     * Marks the leaf "max-num-enodeb" with operation "merge".
     */
    public void markMaxNumEnodebMerge() throws JNCException {
        markLeafMerge("maxNumEnodeb");
    }

    /**
     * Marks the leaf "max-num-enodeb" with operation "create".
     */
    public void markMaxNumEnodebCreate() throws JNCException {
        markLeafCreate("maxNumEnodeb");
    }

    /**
     * Marks the leaf "max-num-enodeb" with operation "delete".
     */
    public void markMaxNumEnodebDelete() throws JNCException {
        markLeafDelete("maxNumEnodeb");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
