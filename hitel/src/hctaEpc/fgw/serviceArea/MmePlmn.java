/* 
 * @(#)MmePlmn.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.serviceArea;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/serviceArea/mme-plmn"
 * <p>
 * See line 128 in
 * fgwMmeCommonConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmePlmn extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmePlmn object.
     */
    public MmePlmn() {
        super(Epc.NAMESPACE, "mme-plmn");
    }

    /**
     * Constructor for an initialized MmePlmn object,
     * 
     * @param plmnIdValue Key argument of child.
     */
    public MmePlmn(YangString plmnIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-plmn");
        Leaf plmnId = new Leaf(Epc.NAMESPACE, "plmn-id");
        plmnId.setValue(plmnIdValue);
        insertChild(plmnId, childrenNames());
    }

    /**
     * Constructor for an initialized MmePlmn object,
     * with String keys.
     * @param plmnIdValue Key argument of child.
     */
    public MmePlmn(String plmnIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-plmn");
        Leaf plmnId = new Leaf(Epc.NAMESPACE, "plmn-id");
        plmnId.setValue(new YangString(plmnIdValue));
        insertChild(plmnId, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmePlmn clone() {
        MmePlmn copy;
        try {
            copy = new MmePlmn(getPlmnIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmePlmn)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmePlmn cloneShallow() {
        MmePlmn copy;
        try {
            copy = new MmePlmn(getPlmnIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmePlmn)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "plmn-id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "plmn-id",
            "mme-pool",
            "sgsn-pool",
        };
    }

    /* Access methods for leaf child: "plmn-id". */

    /**
     * Gets the value for child leaf "plmn-id".
     * @return The value of the leaf.
     */
    public YangString getPlmnIdValue() throws JNCException {
        return (YangString)getValue("plmn-id");
    }

    /**
     * Sets the value for child leaf "plmn-id",
     * using instance of generated typedef class.
     * @param plmnIdValue The value to set.
     * @param plmnIdValue used during instantiation.
     */
    public void setPlmnIdValue(YangString plmnIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-id",
            plmnIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "plmn-id",
     * using a String value.
     * @param plmnIdValue used during instantiation.
     */
    public void setPlmnIdValue(String plmnIdValue) throws JNCException {
        setPlmnIdValue(new YangString(plmnIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "plmn-id" leaf will not have a value.
     */
    public void addPlmnId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "mme-pool". */

    /**
     * Gets the value for child leaf "mme-pool".
     * @return The value of the leaf.
     */
    public YangString getMmePoolValue() throws JNCException {
        YangString mmePool = (YangString)getValue("mme-pool");
        if (mmePool == null) {
            mmePool = new YangString("none");  // default
        }
        return mmePool;
    }

    /**
     * Sets the value for child leaf "mme-pool",
     * using instance of generated typedef class.
     * @param mmePoolValue The value to set.
     * @param mmePoolValue used during instantiation.
     */
    public void setMmePoolValue(YangString mmePoolValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-pool",
            mmePoolValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mme-pool",
     * using a String value.
     * @param mmePoolValue used during instantiation.
     */
    public void setMmePoolValue(String mmePoolValue) throws JNCException {
        setMmePoolValue(new YangString(mmePoolValue));
    }

    /**
     * Unsets the value for child leaf "mme-pool".
     */
    public void unsetMmePoolValue() throws JNCException {
        delete("mme-pool");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mme-pool" leaf will not have a value.
     */
    public void addMmePool() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-pool",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mme-pool" with operation "replace".
     */
    public void markMmePoolReplace() throws JNCException {
        markLeafReplace("mmePool");
    }

    /**
     * Marks the leaf "mme-pool" with operation "merge".
     */
    public void markMmePoolMerge() throws JNCException {
        markLeafMerge("mmePool");
    }

    /**
     * Marks the leaf "mme-pool" with operation "create".
     */
    public void markMmePoolCreate() throws JNCException {
        markLeafCreate("mmePool");
    }

    /**
     * Marks the leaf "mme-pool" with operation "delete".
     */
    public void markMmePoolDelete() throws JNCException {
        markLeafDelete("mmePool");
    }

    /* Access methods for optional leaf child: "sgsn-pool". */

    /**
     * Gets the value for child leaf "sgsn-pool".
     * @return The value of the leaf.
     */
    public YangEnumeration getSgsnPoolValue() throws JNCException {
        YangEnumeration sgsnPool = (YangEnumeration)getValue("sgsn-pool");
        if (sgsnPool == null) {
            sgsnPool = new YangEnumeration("none", new String[] {  // default
                "default",
                "none",
            });
        }
        return sgsnPool;
    }

    /**
     * Sets the value for child leaf "sgsn-pool",
     * using instance of generated typedef class.
     * @param sgsnPoolValue The value to set.
     * @param sgsnPoolValue used during instantiation.
     */
    public void setSgsnPoolValue(YangEnumeration sgsnPoolValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgsn-pool",
            sgsnPoolValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sgsn-pool",
     * using a String value.
     * @param sgsnPoolValue used during instantiation.
     */
    public void setSgsnPoolValue(String sgsnPoolValue) throws JNCException {
        setSgsnPoolValue(new YangEnumeration(sgsnPoolValue, new String[] {
             "default",
             "none",
        }));
    }

    /**
     * Unsets the value for child leaf "sgsn-pool".
     */
    public void unsetSgsnPoolValue() throws JNCException {
        delete("sgsn-pool");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sgsn-pool" leaf will not have a value.
     */
    public void addSgsnPool() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgsn-pool",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sgsn-pool" with operation "replace".
     */
    public void markSgsnPoolReplace() throws JNCException {
        markLeafReplace("sgsnPool");
    }

    /**
     * Marks the leaf "sgsn-pool" with operation "merge".
     */
    public void markSgsnPoolMerge() throws JNCException {
        markLeafMerge("sgsnPool");
    }

    /**
     * Marks the leaf "sgsn-pool" with operation "create".
     */
    public void markSgsnPoolCreate() throws JNCException {
        markLeafCreate("sgsnPool");
    }

    /**
     * Marks the leaf "sgsn-pool" with operation "delete".
     */
    public void markSgsnPoolDelete() throws JNCException {
        markLeafDelete("sgsnPool");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
