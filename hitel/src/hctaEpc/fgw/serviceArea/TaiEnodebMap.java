/* 
 * @(#)TaiEnodebMap.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.serviceArea;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/serviceArea/tai-enodeb-map"
 * <p>
 * See line 373 in
 * s1MasterCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class TaiEnodebMap extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty TaiEnodebMap object.
     */
    public TaiEnodebMap() {
        super(Epc.NAMESPACE, "tai-enodeb-map");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public TaiEnodebMap clone() {
        return (TaiEnodebMap)cloneContent(new TaiEnodebMap());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public TaiEnodebMap cloneShallow() {
        return (TaiEnodebMap)cloneShallowContent(new TaiEnodebMap());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "enodeb-plmn-id",
            "enodeb-id",
            "enodeb-type",
            "enodeb-name",
            "tai-plmn-id",
            "tac",
        };
    }

    /* Access methods for optional leaf child: "enodeb-plmn-id". */

    /**
     * Gets the value for child leaf "enodeb-plmn-id".
     * @return The value of the leaf.
     */
    public YangString getEnodebPlmnIdValue() throws JNCException {
        return (YangString)getValue("enodeb-plmn-id");
    }

    /**
     * Sets the value for child leaf "enodeb-plmn-id",
     * using instance of generated typedef class.
     * @param enodebPlmnIdValue The value to set.
     * @param enodebPlmnIdValue used during instantiation.
     */
    public void setEnodebPlmnIdValue(YangString enodebPlmnIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-plmn-id",
            enodebPlmnIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-plmn-id",
     * using a String value.
     * @param enodebPlmnIdValue used during instantiation.
     */
    public void setEnodebPlmnIdValue(String enodebPlmnIdValue)
            throws JNCException {
        setEnodebPlmnIdValue(new YangString(enodebPlmnIdValue));
    }

    /**
     * Unsets the value for child leaf "enodeb-plmn-id".
     */
    public void unsetEnodebPlmnIdValue() throws JNCException {
        delete("enodeb-plmn-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-plmn-id" leaf will not have a value.
     */
    public void addEnodebPlmnId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-plmn-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enodeb-plmn-id" with operation "replace".
     */
    public void markEnodebPlmnIdReplace() throws JNCException {
        markLeafReplace("enodebPlmnId");
    }

    /**
     * Marks the leaf "enodeb-plmn-id" with operation "merge".
     */
    public void markEnodebPlmnIdMerge() throws JNCException {
        markLeafMerge("enodebPlmnId");
    }

    /**
     * Marks the leaf "enodeb-plmn-id" with operation "create".
     */
    public void markEnodebPlmnIdCreate() throws JNCException {
        markLeafCreate("enodebPlmnId");
    }

    /**
     * Marks the leaf "enodeb-plmn-id" with operation "delete".
     */
    public void markEnodebPlmnIdDelete() throws JNCException {
        markLeafDelete("enodebPlmnId");
    }

    /* Access methods for optional leaf child: "enodeb-id". */

    /**
     * Gets the value for child leaf "enodeb-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getEnodebIdValue() throws JNCException {
        return (YangUInt32)getValue("enodeb-id");
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using instance of generated typedef class.
     * @param enodebIdValue The value to set.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(YangUInt32 enodebIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-id",
            enodebIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using Java primitive values.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(long enodebIdValue) throws JNCException {
        setEnodebIdValue(new YangUInt32(enodebIdValue));
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using a String value.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(String enodebIdValue) throws JNCException {
        setEnodebIdValue(new YangUInt32(enodebIdValue));
    }

    /**
     * Unsets the value for child leaf "enodeb-id".
     */
    public void unsetEnodebIdValue() throws JNCException {
        delete("enodeb-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-id" leaf will not have a value.
     */
    public void addEnodebId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enodeb-id" with operation "replace".
     */
    public void markEnodebIdReplace() throws JNCException {
        markLeafReplace("enodebId");
    }

    /**
     * Marks the leaf "enodeb-id" with operation "merge".
     */
    public void markEnodebIdMerge() throws JNCException {
        markLeafMerge("enodebId");
    }

    /**
     * Marks the leaf "enodeb-id" with operation "create".
     */
    public void markEnodebIdCreate() throws JNCException {
        markLeafCreate("enodebId");
    }

    /**
     * Marks the leaf "enodeb-id" with operation "delete".
     */
    public void markEnodebIdDelete() throws JNCException {
        markLeafDelete("enodebId");
    }

    /* Access methods for optional leaf child: "enodeb-type". */

    /**
     * Gets the value for child leaf "enodeb-type".
     * @return The value of the leaf.
     */
    public YangString getEnodebTypeValue() throws JNCException {
        return (YangString)getValue("enodeb-type");
    }

    /**
     * Sets the value for child leaf "enodeb-type",
     * using instance of generated typedef class.
     * @param enodebTypeValue The value to set.
     * @param enodebTypeValue used during instantiation.
     */
    public void setEnodebTypeValue(YangString enodebTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-type",
            enodebTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-type",
     * using a String value.
     * @param enodebTypeValue used during instantiation.
     */
    public void setEnodebTypeValue(String enodebTypeValue) throws JNCException {
        setEnodebTypeValue(new YangString(enodebTypeValue));
    }

    /**
     * Unsets the value for child leaf "enodeb-type".
     */
    public void unsetEnodebTypeValue() throws JNCException {
        delete("enodeb-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-type" leaf will not have a value.
     */
    public void addEnodebType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enodeb-type" with operation "replace".
     */
    public void markEnodebTypeReplace() throws JNCException {
        markLeafReplace("enodebType");
    }

    /**
     * Marks the leaf "enodeb-type" with operation "merge".
     */
    public void markEnodebTypeMerge() throws JNCException {
        markLeafMerge("enodebType");
    }

    /**
     * Marks the leaf "enodeb-type" with operation "create".
     */
    public void markEnodebTypeCreate() throws JNCException {
        markLeafCreate("enodebType");
    }

    /**
     * Marks the leaf "enodeb-type" with operation "delete".
     */
    public void markEnodebTypeDelete() throws JNCException {
        markLeafDelete("enodebType");
    }

    /* Access methods for optional leaf child: "enodeb-name". */

    /**
     * Gets the value for child leaf "enodeb-name".
     * @return The value of the leaf.
     */
    public YangString getEnodebNameValue() throws JNCException {
        return (YangString)getValue("enodeb-name");
    }

    /**
     * Sets the value for child leaf "enodeb-name",
     * using instance of generated typedef class.
     * @param enodebNameValue The value to set.
     * @param enodebNameValue used during instantiation.
     */
    public void setEnodebNameValue(YangString enodebNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-name",
            enodebNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-name",
     * using a String value.
     * @param enodebNameValue used during instantiation.
     */
    public void setEnodebNameValue(String enodebNameValue) throws JNCException {
        setEnodebNameValue(new YangString(enodebNameValue));
    }

    /**
     * Unsets the value for child leaf "enodeb-name".
     */
    public void unsetEnodebNameValue() throws JNCException {
        delete("enodeb-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-name" leaf will not have a value.
     */
    public void addEnodebName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enodeb-name" with operation "replace".
     */
    public void markEnodebNameReplace() throws JNCException {
        markLeafReplace("enodebName");
    }

    /**
     * Marks the leaf "enodeb-name" with operation "merge".
     */
    public void markEnodebNameMerge() throws JNCException {
        markLeafMerge("enodebName");
    }

    /**
     * Marks the leaf "enodeb-name" with operation "create".
     */
    public void markEnodebNameCreate() throws JNCException {
        markLeafCreate("enodebName");
    }

    /**
     * Marks the leaf "enodeb-name" with operation "delete".
     */
    public void markEnodebNameDelete() throws JNCException {
        markLeafDelete("enodebName");
    }

    /* Access methods for optional leaf child: "tai-plmn-id". */

    /**
     * Gets the value for child leaf "tai-plmn-id".
     * @return The value of the leaf.
     */
    public YangString getTaiPlmnIdValue() throws JNCException {
        return (YangString)getValue("tai-plmn-id");
    }

    /**
     * Sets the value for child leaf "tai-plmn-id",
     * using instance of generated typedef class.
     * @param taiPlmnIdValue The value to set.
     * @param taiPlmnIdValue used during instantiation.
     */
    public void setTaiPlmnIdValue(YangString taiPlmnIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tai-plmn-id",
            taiPlmnIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tai-plmn-id",
     * using a String value.
     * @param taiPlmnIdValue used during instantiation.
     */
    public void setTaiPlmnIdValue(String taiPlmnIdValue) throws JNCException {
        setTaiPlmnIdValue(new YangString(taiPlmnIdValue));
    }

    /**
     * Unsets the value for child leaf "tai-plmn-id".
     */
    public void unsetTaiPlmnIdValue() throws JNCException {
        delete("tai-plmn-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tai-plmn-id" leaf will not have a value.
     */
    public void addTaiPlmnId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tai-plmn-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tai-plmn-id" with operation "replace".
     */
    public void markTaiPlmnIdReplace() throws JNCException {
        markLeafReplace("taiPlmnId");
    }

    /**
     * Marks the leaf "tai-plmn-id" with operation "merge".
     */
    public void markTaiPlmnIdMerge() throws JNCException {
        markLeafMerge("taiPlmnId");
    }

    /**
     * Marks the leaf "tai-plmn-id" with operation "create".
     */
    public void markTaiPlmnIdCreate() throws JNCException {
        markLeafCreate("taiPlmnId");
    }

    /**
     * Marks the leaf "tai-plmn-id" with operation "delete".
     */
    public void markTaiPlmnIdDelete() throws JNCException {
        markLeafDelete("taiPlmnId");
    }

    /* Access methods for optional leaf child: "tac". */

    /**
     * Gets the value for child leaf "tac".
     * @return The value of the leaf.
     */
    public YangString getTacValue() throws JNCException {
        return (YangString)getValue("tac");
    }

    /**
     * Sets the value for child leaf "tac",
     * using instance of generated typedef class.
     * @param tacValue The value to set.
     * @param tacValue used during instantiation.
     */
    public void setTacValue(YangString tacValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tac",
            tacValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tac",
     * using a String value.
     * @param tacValue used during instantiation.
     */
    public void setTacValue(String tacValue) throws JNCException {
        setTacValue(new YangString(tacValue));
    }

    /**
     * Unsets the value for child leaf "tac".
     */
    public void unsetTacValue() throws JNCException {
        delete("tac");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tac" leaf will not have a value.
     */
    public void addTac() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tac",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tac" with operation "replace".
     */
    public void markTacReplace() throws JNCException {
        markLeafReplace("tac");
    }

    /**
     * Marks the leaf "tac" with operation "merge".
     */
    public void markTacMerge() throws JNCException {
        markLeafMerge("tac");
    }

    /**
     * Marks the leaf "tac" with operation "create".
     */
    public void markTacCreate() throws JNCException {
        markLeafCreate("tac");
    }

    /**
     * Marks the leaf "tac" with operation "delete".
     */
    public void markTacDelete() throws JNCException {
        markLeafDelete("tac");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
