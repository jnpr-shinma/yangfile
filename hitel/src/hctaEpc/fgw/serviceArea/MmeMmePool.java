/* 
 * @(#)MmeMmePool.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.serviceArea;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/serviceArea/mme-mme-pool"
 * <p>
 * See line 158 in
 * fgwMmeCommonConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeMmePool extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeMmePool object.
     */
    public MmeMmePool() {
        super(Epc.NAMESPACE, "mme-mme-pool");
    }

    /**
     * Constructor for an initialized MmeMmePool object,
     * 
     * @param nameValue Key argument of child.
     */
    public MmeMmePool(YangString nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-mme-pool");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized MmeMmePool object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public MmeMmePool(String nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-mme-pool");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeMmePool clone() {
        MmeMmePool copy;
        try {
            copy = new MmeMmePool(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeMmePool)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeMmePool cloneShallow() {
        MmeMmePool copy;
        try {
            copy = new MmeMmePool(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeMmePool)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "mme-name",
            "mme-groupid",
            "mme-code",
            "relative-capacity",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "mme-name". */

    /**
     * Gets the value for child leaf "mme-name".
     * @return The value of the leaf.
     */
    public YangString getMmeNameValue() throws JNCException {
        return (YangString)getValue("mme-name");
    }

    /**
     * Sets the value for child leaf "mme-name",
     * using instance of generated typedef class.
     * @param mmeNameValue The value to set.
     * @param mmeNameValue used during instantiation.
     */
    public void setMmeNameValue(YangString mmeNameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-name",
            mmeNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mme-name",
     * using a String value.
     * @param mmeNameValue used during instantiation.
     */
    public void setMmeNameValue(String mmeNameValue) throws JNCException {
        setMmeNameValue(new YangString(mmeNameValue));
    }

    /**
     * Unsets the value for child leaf "mme-name".
     */
    public void unsetMmeNameValue() throws JNCException {
        delete("mme-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mme-name" leaf will not have a value.
     */
    public void addMmeName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mme-name" with operation "replace".
     */
    public void markMmeNameReplace() throws JNCException {
        markLeafReplace("mmeName");
    }

    /**
     * Marks the leaf "mme-name" with operation "merge".
     */
    public void markMmeNameMerge() throws JNCException {
        markLeafMerge("mmeName");
    }

    /**
     * Marks the leaf "mme-name" with operation "create".
     */
    public void markMmeNameCreate() throws JNCException {
        markLeafCreate("mmeName");
    }

    /**
     * Marks the leaf "mme-name" with operation "delete".
     */
    public void markMmeNameDelete() throws JNCException {
        markLeafDelete("mmeName");
    }

    /* Access methods for optional leaf child: "mme-groupid". */

    /**
     * Gets the value for child leaf "mme-groupid".
     * @return The value of the leaf.
     */
    public YangUInt16 getMmeGroupidValue() throws JNCException {
        return (YangUInt16)getValue("mme-groupid");
    }

    /**
     * Sets the value for child leaf "mme-groupid",
     * using instance of generated typedef class.
     * @param mmeGroupidValue The value to set.
     * @param mmeGroupidValue used during instantiation.
     */
    public void setMmeGroupidValue(YangUInt16 mmeGroupidValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-groupid",
            mmeGroupidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mme-groupid",
     * using Java primitive values.
     * @param mmeGroupidValue used during instantiation.
     */
    public void setMmeGroupidValue(int mmeGroupidValue) throws JNCException {
        setMmeGroupidValue(new YangUInt16(mmeGroupidValue));
    }

    /**
     * Sets the value for child leaf "mme-groupid",
     * using a String value.
     * @param mmeGroupidValue used during instantiation.
     */
    public void setMmeGroupidValue(String mmeGroupidValue) throws JNCException {
        setMmeGroupidValue(new YangUInt16(mmeGroupidValue));
    }

    /**
     * Unsets the value for child leaf "mme-groupid".
     */
    public void unsetMmeGroupidValue() throws JNCException {
        delete("mme-groupid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mme-groupid" leaf will not have a value.
     */
    public void addMmeGroupid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-groupid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mme-groupid" with operation "replace".
     */
    public void markMmeGroupidReplace() throws JNCException {
        markLeafReplace("mmeGroupid");
    }

    /**
     * Marks the leaf "mme-groupid" with operation "merge".
     */
    public void markMmeGroupidMerge() throws JNCException {
        markLeafMerge("mmeGroupid");
    }

    /**
     * Marks the leaf "mme-groupid" with operation "create".
     */
    public void markMmeGroupidCreate() throws JNCException {
        markLeafCreate("mmeGroupid");
    }

    /**
     * Marks the leaf "mme-groupid" with operation "delete".
     */
    public void markMmeGroupidDelete() throws JNCException {
        markLeafDelete("mmeGroupid");
    }

    /* Access methods for optional leaf child: "mme-code". */

    /**
     * Gets the value for child leaf "mme-code".
     * @return The value of the leaf.
     */
    public YangString getMmeCodeValue() throws JNCException {
        YangString mmeCode = (YangString)getValue("mme-code");
        if (mmeCode == null) {
            mmeCode = new YangString("0");  // default
        }
        return mmeCode;
    }

    /**
     * Sets the value for child leaf "mme-code",
     * using instance of generated typedef class.
     * @param mmeCodeValue The value to set.
     * @param mmeCodeValue used during instantiation.
     */
    public void setMmeCodeValue(YangString mmeCodeValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-code",
            mmeCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mme-code",
     * using a String value.
     * @param mmeCodeValue used during instantiation.
     */
    public void setMmeCodeValue(String mmeCodeValue) throws JNCException {
        setMmeCodeValue(new YangString(mmeCodeValue));
    }

    /**
     * Unsets the value for child leaf "mme-code".
     */
    public void unsetMmeCodeValue() throws JNCException {
        delete("mme-code");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mme-code" leaf will not have a value.
     */
    public void addMmeCode() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-code",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mme-code" with operation "replace".
     */
    public void markMmeCodeReplace() throws JNCException {
        markLeafReplace("mmeCode");
    }

    /**
     * Marks the leaf "mme-code" with operation "merge".
     */
    public void markMmeCodeMerge() throws JNCException {
        markLeafMerge("mmeCode");
    }

    /**
     * Marks the leaf "mme-code" with operation "create".
     */
    public void markMmeCodeCreate() throws JNCException {
        markLeafCreate("mmeCode");
    }

    /**
     * Marks the leaf "mme-code" with operation "delete".
     */
    public void markMmeCodeDelete() throws JNCException {
        markLeafDelete("mmeCode");
    }

    /* Access methods for optional leaf child: "relative-capacity". */

    /**
     * Gets the value for child leaf "relative-capacity".
     * @return The value of the leaf.
     */
    public YangUInt8 getRelativeCapacityValue() throws JNCException {
        YangUInt8 relativeCapacity = (YangUInt8)getValue("relative-capacity");
        if (relativeCapacity == null) {
            relativeCapacity = new YangUInt8("100");  // default
        }
        return relativeCapacity;
    }

    /**
     * Sets the value for child leaf "relative-capacity",
     * using instance of generated typedef class.
     * @param relativeCapacityValue The value to set.
     * @param relativeCapacityValue used during instantiation.
     */
    public void setRelativeCapacityValue(YangUInt8 relativeCapacityValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "relative-capacity",
            relativeCapacityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "relative-capacity",
     * using Java primitive values.
     * @param relativeCapacityValue used during instantiation.
     */
    public void setRelativeCapacityValue(short relativeCapacityValue)
            throws JNCException {
        setRelativeCapacityValue(new YangUInt8(relativeCapacityValue));
    }

    /**
     * Sets the value for child leaf "relative-capacity",
     * using a String value.
     * @param relativeCapacityValue used during instantiation.
     */
    public void setRelativeCapacityValue(String relativeCapacityValue)
            throws JNCException {
        setRelativeCapacityValue(new YangUInt8(relativeCapacityValue));
    }

    /**
     * Unsets the value for child leaf "relative-capacity".
     */
    public void unsetRelativeCapacityValue() throws JNCException {
        delete("relative-capacity");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "relative-capacity" leaf will not have a value.
     */
    public void addRelativeCapacity() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "relative-capacity",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "relative-capacity" with operation "replace".
     */
    public void markRelativeCapacityReplace() throws JNCException {
        markLeafReplace("relativeCapacity");
    }

    /**
     * Marks the leaf "relative-capacity" with operation "merge".
     */
    public void markRelativeCapacityMerge() throws JNCException {
        markLeafMerge("relativeCapacity");
    }

    /**
     * Marks the leaf "relative-capacity" with operation "create".
     */
    public void markRelativeCapacityCreate() throws JNCException {
        markLeafCreate("relativeCapacity");
    }

    /**
     * Marks the leaf "relative-capacity" with operation "delete".
     */
    public void markRelativeCapacityDelete() throws JNCException {
        markLeafDelete("relativeCapacity");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
