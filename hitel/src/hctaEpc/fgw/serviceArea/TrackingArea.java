/* 
 * @(#)TrackingArea.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.serviceArea;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/serviceArea/tracking-area"
 * <p>
 * See line 342 in
 * s1MasterCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class TrackingArea extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty TrackingArea object.
     */
    public TrackingArea() {
        super(Epc.NAMESPACE, "tracking-area");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public TrackingArea clone() {
        return (TrackingArea)cloneContent(new TrackingArea());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public TrackingArea cloneShallow() {
        return (TrackingArea)cloneShallowContent(new TrackingArea());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "plmn-id",
            "tac",
            "neighbortai-percent-sgwreloc",
        };
    }

    /* Access methods for optional leaf child: "plmn-id". */

    /**
     * Gets the value for child leaf "plmn-id".
     * @return The value of the leaf.
     */
    public YangString getPlmnIdValue() throws JNCException {
        return (YangString)getValue("plmn-id");
    }

    /**
     * Sets the value for child leaf "plmn-id",
     * using instance of generated typedef class.
     * @param plmnIdValue The value to set.
     * @param plmnIdValue used during instantiation.
     */
    public void setPlmnIdValue(YangString plmnIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-id",
            plmnIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "plmn-id",
     * using a String value.
     * @param plmnIdValue used during instantiation.
     */
    public void setPlmnIdValue(String plmnIdValue) throws JNCException {
        setPlmnIdValue(new YangString(plmnIdValue));
    }

    /**
     * Unsets the value for child leaf "plmn-id".
     */
    public void unsetPlmnIdValue() throws JNCException {
        delete("plmn-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "plmn-id" leaf will not have a value.
     */
    public void addPlmnId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "plmn-id" with operation "replace".
     */
    public void markPlmnIdReplace() throws JNCException {
        markLeafReplace("plmnId");
    }

    /**
     * Marks the leaf "plmn-id" with operation "merge".
     */
    public void markPlmnIdMerge() throws JNCException {
        markLeafMerge("plmnId");
    }

    /**
     * Marks the leaf "plmn-id" with operation "create".
     */
    public void markPlmnIdCreate() throws JNCException {
        markLeafCreate("plmnId");
    }

    /**
     * Marks the leaf "plmn-id" with operation "delete".
     */
    public void markPlmnIdDelete() throws JNCException {
        markLeafDelete("plmnId");
    }

    /* Access methods for optional leaf child: "tac". */

    /**
     * Gets the value for child leaf "tac".
     * @return The value of the leaf.
     */
    public YangString getTacValue() throws JNCException {
        return (YangString)getValue("tac");
    }

    /**
     * Sets the value for child leaf "tac",
     * using instance of generated typedef class.
     * @param tacValue The value to set.
     * @param tacValue used during instantiation.
     */
    public void setTacValue(YangString tacValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tac",
            tacValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tac",
     * using a String value.
     * @param tacValue used during instantiation.
     */
    public void setTacValue(String tacValue) throws JNCException {
        setTacValue(new YangString(tacValue));
    }

    /**
     * Unsets the value for child leaf "tac".
     */
    public void unsetTacValue() throws JNCException {
        delete("tac");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tac" leaf will not have a value.
     */
    public void addTac() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tac",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tac" with operation "replace".
     */
    public void markTacReplace() throws JNCException {
        markLeafReplace("tac");
    }

    /**
     * Marks the leaf "tac" with operation "merge".
     */
    public void markTacMerge() throws JNCException {
        markLeafMerge("tac");
    }

    /**
     * Marks the leaf "tac" with operation "create".
     */
    public void markTacCreate() throws JNCException {
        markLeafCreate("tac");
    }

    /**
     * Marks the leaf "tac" with operation "delete".
     */
    public void markTacDelete() throws JNCException {
        markLeafDelete("tac");
    }

    /* Access methods for optional leaf child: "neighbortai-percent-sgwreloc". */

    /**
     * Gets the value for child leaf "neighbortai-percent-sgwreloc".
     * @return The value of the leaf.
     */
    public YangString getNeighbortaiPercentSgwrelocValue() throws JNCException {
        return (YangString)getValue("neighbortai-percent-sgwreloc");
    }

    /**
     * Sets the value for child leaf "neighbortai-percent-sgwreloc",
     * using instance of generated typedef class.
     * @param neighbortaiPercentSgwrelocValue The value to set.
     * @param neighbortaiPercentSgwrelocValue used during instantiation.
     */
    public void setNeighbortaiPercentSgwrelocValue(YangString neighbortaiPercentSgwrelocValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "neighbortai-percent-sgwreloc",
            neighbortaiPercentSgwrelocValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "neighbortai-percent-sgwreloc",
     * using a String value.
     * @param neighbortaiPercentSgwrelocValue used during instantiation.
     */
    public void setNeighbortaiPercentSgwrelocValue(String neighbortaiPercentSgwrelocValue)
            throws JNCException {
        setNeighbortaiPercentSgwrelocValue(new YangString(neighbortaiPercentSgwrelocValue));
    }

    /**
     * Unsets the value for child leaf "neighbortai-percent-sgwreloc".
     */
    public void unsetNeighbortaiPercentSgwrelocValue() throws JNCException {
        delete("neighbortai-percent-sgwreloc");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "neighbortai-percent-sgwreloc" leaf will not have a value.
     */
    public void addNeighbortaiPercentSgwreloc() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "neighbortai-percent-sgwreloc",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "neighbortai-percent-sgwreloc" with operation "replace".
     */
    public void markNeighbortaiPercentSgwrelocReplace() throws JNCException {
        markLeafReplace("neighbortaiPercentSgwreloc");
    }

    /**
     * Marks the leaf "neighbortai-percent-sgwreloc" with operation "merge".
     */
    public void markNeighbortaiPercentSgwrelocMerge() throws JNCException {
        markLeafMerge("neighbortaiPercentSgwreloc");
    }

    /**
     * Marks the leaf "neighbortai-percent-sgwreloc" with operation "create".
     */
    public void markNeighbortaiPercentSgwrelocCreate() throws JNCException {
        markLeafCreate("neighbortaiPercentSgwreloc");
    }

    /**
     * Marks the leaf "neighbortai-percent-sgwreloc" with operation "delete".
     */
    public void markNeighbortaiPercentSgwrelocDelete() throws JNCException {
        markLeafDelete("neighbortaiPercentSgwreloc");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
