/* 
 * @(#)MmeS1MmeAssociationProfile.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.interface_.s1;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt8;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/interface_/s1/mme-s1-mme-association-profile"
 * <p>
 * See line 212 in
 * fgwS1MmeConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeS1MmeAssociationProfile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeS1MmeAssociationProfile object.
     */
    public MmeS1MmeAssociationProfile() {
        super(Epc.NAMESPACE, "mme-s1-mme-association-profile");
    }

    /**
     * Constructor for an initialized MmeS1MmeAssociationProfile object,
     * 
     * @param indexValue Key argument of child.
     */
    public MmeS1MmeAssociationProfile(YangUInt8 indexValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-s1-mme-association-profile");
        Leaf index = new Leaf(Epc.NAMESPACE, "index");
        index.setValue(indexValue);
        insertChild(index, childrenNames());
    }

    /**
     * Constructor for an initialized MmeS1MmeAssociationProfile object,
     * with String keys.
     * @param indexValue Key argument of child.
     */
    public MmeS1MmeAssociationProfile(String indexValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-s1-mme-association-profile");
        Leaf index = new Leaf(Epc.NAMESPACE, "index");
        index.setValue(new YangUInt8(indexValue));
        insertChild(index, childrenNames());
    }

    /**
     * Constructor for an initialized MmeS1MmeAssociationProfile object,
     * with keys of built in Java types.
     * @param indexValue Key argument of child.
     */
    public MmeS1MmeAssociationProfile(short indexValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-s1-mme-association-profile");
        Leaf index = new Leaf(Epc.NAMESPACE, "index");
        index.setValue(new YangUInt8(indexValue));
        insertChild(index, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeS1MmeAssociationProfile clone() {
        MmeS1MmeAssociationProfile copy;
        try {
            copy = new MmeS1MmeAssociationProfile(getIndexValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeS1MmeAssociationProfile)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeS1MmeAssociationProfile cloneShallow() {
        MmeS1MmeAssociationProfile copy;
        try {
            copy = new MmeS1MmeAssociationProfile(getIndexValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeS1MmeAssociationProfile)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "index",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "index",
            "plmn-id",
            "enodeb-id",
            "enodeb-name",
        };
    }

    /* Access methods for leaf child: "index". */

    /**
     * Gets the value for child leaf "index".
     * @return The value of the leaf.
     */
    public YangUInt8 getIndexValue() throws JNCException {
        return (YangUInt8)getValue("index");
    }

    /**
     * Sets the value for child leaf "index",
     * using instance of generated typedef class.
     * @param indexValue The value to set.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(YangUInt8 indexValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "index",
            indexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "index",
     * using Java primitive values.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(short indexValue) throws JNCException {
        setIndexValue(new YangUInt8(indexValue));
    }

    /**
     * Sets the value for child leaf "index",
     * using a String value.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(String indexValue) throws JNCException {
        setIndexValue(new YangUInt8(indexValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "index" leaf will not have a value.
     */
    public void addIndex() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "index",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "plmn-id". */

    /**
     * Gets the value for child leaf "plmn-id".
     * @return The value of the leaf.
     */
    public YangString getPlmnIdValue() throws JNCException {
        return (YangString)getValue("plmn-id");
    }

    /**
     * Sets the value for child leaf "plmn-id",
     * using instance of generated typedef class.
     * @param plmnIdValue The value to set.
     * @param plmnIdValue used during instantiation.
     */
    public void setPlmnIdValue(YangString plmnIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-id",
            plmnIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "plmn-id",
     * using a String value.
     * @param plmnIdValue used during instantiation.
     */
    public void setPlmnIdValue(String plmnIdValue) throws JNCException {
        setPlmnIdValue(new YangString(plmnIdValue));
    }

    /**
     * Unsets the value for child leaf "plmn-id".
     */
    public void unsetPlmnIdValue() throws JNCException {
        delete("plmn-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "plmn-id" leaf will not have a value.
     */
    public void addPlmnId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "plmn-id" with operation "replace".
     */
    public void markPlmnIdReplace() throws JNCException {
        markLeafReplace("plmnId");
    }

    /**
     * Marks the leaf "plmn-id" with operation "merge".
     */
    public void markPlmnIdMerge() throws JNCException {
        markLeafMerge("plmnId");
    }

    /**
     * Marks the leaf "plmn-id" with operation "create".
     */
    public void markPlmnIdCreate() throws JNCException {
        markLeafCreate("plmnId");
    }

    /**
     * Marks the leaf "plmn-id" with operation "delete".
     */
    public void markPlmnIdDelete() throws JNCException {
        markLeafDelete("plmnId");
    }

    /* Access methods for optional leaf child: "enodeb-id". */

    /**
     * Gets the value for child leaf "enodeb-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getEnodebIdValue() throws JNCException {
        return (YangUInt32)getValue("enodeb-id");
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using instance of generated typedef class.
     * @param enodebIdValue The value to set.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(YangUInt32 enodebIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-id",
            enodebIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using Java primitive values.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(long enodebIdValue) throws JNCException {
        setEnodebIdValue(new YangUInt32(enodebIdValue));
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using a String value.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(String enodebIdValue) throws JNCException {
        setEnodebIdValue(new YangUInt32(enodebIdValue));
    }

    /**
     * Unsets the value for child leaf "enodeb-id".
     */
    public void unsetEnodebIdValue() throws JNCException {
        delete("enodeb-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-id" leaf will not have a value.
     */
    public void addEnodebId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enodeb-id" with operation "replace".
     */
    public void markEnodebIdReplace() throws JNCException {
        markLeafReplace("enodebId");
    }

    /**
     * Marks the leaf "enodeb-id" with operation "merge".
     */
    public void markEnodebIdMerge() throws JNCException {
        markLeafMerge("enodebId");
    }

    /**
     * Marks the leaf "enodeb-id" with operation "create".
     */
    public void markEnodebIdCreate() throws JNCException {
        markLeafCreate("enodebId");
    }

    /**
     * Marks the leaf "enodeb-id" with operation "delete".
     */
    public void markEnodebIdDelete() throws JNCException {
        markLeafDelete("enodebId");
    }

    /* Access methods for optional leaf child: "enodeb-name". */

    /**
     * Gets the value for child leaf "enodeb-name".
     * @return The value of the leaf.
     */
    public YangString getEnodebNameValue() throws JNCException {
        return (YangString)getValue("enodeb-name");
    }

    /**
     * Sets the value for child leaf "enodeb-name",
     * using instance of generated typedef class.
     * @param enodebNameValue The value to set.
     * @param enodebNameValue used during instantiation.
     */
    public void setEnodebNameValue(YangString enodebNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-name",
            enodebNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-name",
     * using a String value.
     * @param enodebNameValue used during instantiation.
     */
    public void setEnodebNameValue(String enodebNameValue) throws JNCException {
        setEnodebNameValue(new YangString(enodebNameValue));
    }

    /**
     * Unsets the value for child leaf "enodeb-name".
     */
    public void unsetEnodebNameValue() throws JNCException {
        delete("enodeb-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-name" leaf will not have a value.
     */
    public void addEnodebName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enodeb-name" with operation "replace".
     */
    public void markEnodebNameReplace() throws JNCException {
        markLeafReplace("enodebName");
    }

    /**
     * Marks the leaf "enodeb-name" with operation "merge".
     */
    public void markEnodebNameMerge() throws JNCException {
        markLeafMerge("enodebName");
    }

    /**
     * Marks the leaf "enodeb-name" with operation "create".
     */
    public void markEnodebNameCreate() throws JNCException {
        markLeafCreate("enodebName");
    }

    /**
     * Marks the leaf "enodeb-name" with operation "delete".
     */
    public void markEnodebNameDelete() throws JNCException {
        markLeafDelete("enodebName");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
