/* 
 * @(#)MmeS1MmeAssociation.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.interface_.s1;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt16;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/interface_/s1/mme-s1-mme-association"
 * <p>
 * See line 155 in
 * fgwS1MmeConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeS1MmeAssociation extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeS1MmeAssociation object.
     */
    public MmeS1MmeAssociation() {
        super(Epc.NAMESPACE, "mme-s1-mme-association");
    }

    /**
     * Constructor for an initialized MmeS1MmeAssociation object,
     * 
     * @param indexValue Key argument of child.
     */
    public MmeS1MmeAssociation(YangUInt16 indexValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-s1-mme-association");
        Leaf index = new Leaf(Epc.NAMESPACE, "index");
        index.setValue(indexValue);
        insertChild(index, childrenNames());
    }

    /**
     * Constructor for an initialized MmeS1MmeAssociation object,
     * with String keys.
     * @param indexValue Key argument of child.
     */
    public MmeS1MmeAssociation(String indexValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-s1-mme-association");
        Leaf index = new Leaf(Epc.NAMESPACE, "index");
        index.setValue(new YangUInt16(indexValue));
        insertChild(index, childrenNames());
    }

    /**
     * Constructor for an initialized MmeS1MmeAssociation object,
     * with keys of built in Java types.
     * @param indexValue Key argument of child.
     */
    public MmeS1MmeAssociation(int indexValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-s1-mme-association");
        Leaf index = new Leaf(Epc.NAMESPACE, "index");
        index.setValue(new YangUInt16(indexValue));
        insertChild(index, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeS1MmeAssociation clone() {
        MmeS1MmeAssociation copy;
        try {
            copy = new MmeS1MmeAssociation(getIndexValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeS1MmeAssociation)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeS1MmeAssociation cloneShallow() {
        MmeS1MmeAssociation copy;
        try {
            copy = new MmeS1MmeAssociation(getIndexValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeS1MmeAssociation)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "index",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "index",
            "s1-mme-peer-index",
            "s1-mme-assoc-profile-index",
            "mme-area-index",
            "local-port",
        };
    }

    /* Access methods for leaf child: "index". */

    /**
     * Gets the value for child leaf "index".
     * @return The value of the leaf.
     */
    public YangUInt16 getIndexValue() throws JNCException {
        return (YangUInt16)getValue("index");
    }

    /**
     * Sets the value for child leaf "index",
     * using instance of generated typedef class.
     * @param indexValue The value to set.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(YangUInt16 indexValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "index",
            indexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "index",
     * using Java primitive values.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(int indexValue) throws JNCException {
        setIndexValue(new YangUInt16(indexValue));
    }

    /**
     * Sets the value for child leaf "index",
     * using a String value.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(String indexValue) throws JNCException {
        setIndexValue(new YangUInt16(indexValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "index" leaf will not have a value.
     */
    public void addIndex() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "index",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "s1-mme-peer-index". */

    /**
     * Gets the value for child leaf "s1-mme-peer-index".
     * @return The value of the leaf.
     */
    public YangUInt8 getS1MmePeerIndexValue() throws JNCException {
        return (YangUInt8)getValue("s1-mme-peer-index");
    }

    /**
     * Sets the value for child leaf "s1-mme-peer-index",
     * using instance of generated typedef class.
     * @param s1MmePeerIndexValue The value to set.
     * @param s1MmePeerIndexValue used during instantiation.
     */
    public void setS1MmePeerIndexValue(YangUInt8 s1MmePeerIndexValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s1-mme-peer-index",
            s1MmePeerIndexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "s1-mme-peer-index",
     * using Java primitive values.
     * @param s1MmePeerIndexValue used during instantiation.
     */
    public void setS1MmePeerIndexValue(short s1MmePeerIndexValue)
            throws JNCException {
        setS1MmePeerIndexValue(new YangUInt8(s1MmePeerIndexValue));
    }

    /**
     * Sets the value for child leaf "s1-mme-peer-index",
     * using a String value.
     * @param s1MmePeerIndexValue used during instantiation.
     */
    public void setS1MmePeerIndexValue(String s1MmePeerIndexValue)
            throws JNCException {
        setS1MmePeerIndexValue(new YangUInt8(s1MmePeerIndexValue));
    }

    /**
     * Unsets the value for child leaf "s1-mme-peer-index".
     */
    public void unsetS1MmePeerIndexValue() throws JNCException {
        delete("s1-mme-peer-index");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "s1-mme-peer-index" leaf will not have a value.
     */
    public void addS1MmePeerIndex() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s1-mme-peer-index",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "s1-mme-peer-index" with operation "replace".
     */
    public void markS1MmePeerIndexReplace() throws JNCException {
        markLeafReplace("s1MmePeerIndex");
    }

    /**
     * Marks the leaf "s1-mme-peer-index" with operation "merge".
     */
    public void markS1MmePeerIndexMerge() throws JNCException {
        markLeafMerge("s1MmePeerIndex");
    }

    /**
     * Marks the leaf "s1-mme-peer-index" with operation "create".
     */
    public void markS1MmePeerIndexCreate() throws JNCException {
        markLeafCreate("s1MmePeerIndex");
    }

    /**
     * Marks the leaf "s1-mme-peer-index" with operation "delete".
     */
    public void markS1MmePeerIndexDelete() throws JNCException {
        markLeafDelete("s1MmePeerIndex");
    }

    /* Access methods for optional leaf child: "s1-mme-assoc-profile-index". */

    /**
     * Gets the value for child leaf "s1-mme-assoc-profile-index".
     * @return The value of the leaf.
     */
    public YangUInt8 getS1MmeAssocProfileIndexValue() throws JNCException {
        return (YangUInt8)getValue("s1-mme-assoc-profile-index");
    }

    /**
     * Sets the value for child leaf "s1-mme-assoc-profile-index",
     * using instance of generated typedef class.
     * @param s1MmeAssocProfileIndexValue The value to set.
     * @param s1MmeAssocProfileIndexValue used during instantiation.
     */
    public void setS1MmeAssocProfileIndexValue(YangUInt8 s1MmeAssocProfileIndexValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s1-mme-assoc-profile-index",
            s1MmeAssocProfileIndexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "s1-mme-assoc-profile-index",
     * using Java primitive values.
     * @param s1MmeAssocProfileIndexValue used during instantiation.
     */
    public void setS1MmeAssocProfileIndexValue(short s1MmeAssocProfileIndexValue)
            throws JNCException {
        setS1MmeAssocProfileIndexValue(new YangUInt8(s1MmeAssocProfileIndexValue));
    }

    /**
     * Sets the value for child leaf "s1-mme-assoc-profile-index",
     * using a String value.
     * @param s1MmeAssocProfileIndexValue used during instantiation.
     */
    public void setS1MmeAssocProfileIndexValue(String s1MmeAssocProfileIndexValue)
            throws JNCException {
        setS1MmeAssocProfileIndexValue(new YangUInt8(s1MmeAssocProfileIndexValue));
    }

    /**
     * Unsets the value for child leaf "s1-mme-assoc-profile-index".
     */
    public void unsetS1MmeAssocProfileIndexValue() throws JNCException {
        delete("s1-mme-assoc-profile-index");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "s1-mme-assoc-profile-index" leaf will not have a value.
     */
    public void addS1MmeAssocProfileIndex() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s1-mme-assoc-profile-index",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "s1-mme-assoc-profile-index" with operation "replace".
     */
    public void markS1MmeAssocProfileIndexReplace() throws JNCException {
        markLeafReplace("s1MmeAssocProfileIndex");
    }

    /**
     * Marks the leaf "s1-mme-assoc-profile-index" with operation "merge".
     */
    public void markS1MmeAssocProfileIndexMerge() throws JNCException {
        markLeafMerge("s1MmeAssocProfileIndex");
    }

    /**
     * Marks the leaf "s1-mme-assoc-profile-index" with operation "create".
     */
    public void markS1MmeAssocProfileIndexCreate() throws JNCException {
        markLeafCreate("s1MmeAssocProfileIndex");
    }

    /**
     * Marks the leaf "s1-mme-assoc-profile-index" with operation "delete".
     */
    public void markS1MmeAssocProfileIndexDelete() throws JNCException {
        markLeafDelete("s1MmeAssocProfileIndex");
    }

    /* Access methods for optional leaf child: "mme-area-index". */

    /**
     * Gets the value for child leaf "mme-area-index".
     * @return The value of the leaf.
     */
    public YangUInt8 getMmeAreaIndexValue() throws JNCException {
        return (YangUInt8)getValue("mme-area-index");
    }

    /**
     * Sets the value for child leaf "mme-area-index",
     * using instance of generated typedef class.
     * @param mmeAreaIndexValue The value to set.
     * @param mmeAreaIndexValue used during instantiation.
     */
    public void setMmeAreaIndexValue(YangUInt8 mmeAreaIndexValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-area-index",
            mmeAreaIndexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mme-area-index",
     * using Java primitive values.
     * @param mmeAreaIndexValue used during instantiation.
     */
    public void setMmeAreaIndexValue(short mmeAreaIndexValue)
            throws JNCException {
        setMmeAreaIndexValue(new YangUInt8(mmeAreaIndexValue));
    }

    /**
     * Sets the value for child leaf "mme-area-index",
     * using a String value.
     * @param mmeAreaIndexValue used during instantiation.
     */
    public void setMmeAreaIndexValue(String mmeAreaIndexValue)
            throws JNCException {
        setMmeAreaIndexValue(new YangUInt8(mmeAreaIndexValue));
    }

    /**
     * Unsets the value for child leaf "mme-area-index".
     */
    public void unsetMmeAreaIndexValue() throws JNCException {
        delete("mme-area-index");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mme-area-index" leaf will not have a value.
     */
    public void addMmeAreaIndex() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-area-index",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mme-area-index" with operation "replace".
     */
    public void markMmeAreaIndexReplace() throws JNCException {
        markLeafReplace("mmeAreaIndex");
    }

    /**
     * Marks the leaf "mme-area-index" with operation "merge".
     */
    public void markMmeAreaIndexMerge() throws JNCException {
        markLeafMerge("mmeAreaIndex");
    }

    /**
     * Marks the leaf "mme-area-index" with operation "create".
     */
    public void markMmeAreaIndexCreate() throws JNCException {
        markLeafCreate("mmeAreaIndex");
    }

    /**
     * Marks the leaf "mme-area-index" with operation "delete".
     */
    public void markMmeAreaIndexDelete() throws JNCException {
        markLeafDelete("mmeAreaIndex");
    }

    /* Access methods for optional leaf child: "local-port". */

    /**
     * Gets the value for child leaf "local-port".
     * @return The value of the leaf.
     */
    public YangUInt16 getLocalPortValue() throws JNCException {
        return (YangUInt16)getValue("local-port");
    }

    /**
     * Sets the value for child leaf "local-port",
     * using instance of generated typedef class.
     * @param localPortValue The value to set.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(YangUInt16 localPortValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-port",
            localPortValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-port",
     * using Java primitive values.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(int localPortValue) throws JNCException {
        setLocalPortValue(new YangUInt16(localPortValue));
    }

    /**
     * Sets the value for child leaf "local-port",
     * using a String value.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(String localPortValue) throws JNCException {
        setLocalPortValue(new YangUInt16(localPortValue));
    }

    /**
     * Unsets the value for child leaf "local-port".
     */
    public void unsetLocalPortValue() throws JNCException {
        delete("local-port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-port" leaf will not have a value.
     */
    public void addLocalPort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-port" with operation "replace".
     */
    public void markLocalPortReplace() throws JNCException {
        markLeafReplace("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "merge".
     */
    public void markLocalPortMerge() throws JNCException {
        markLeafMerge("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "create".
     */
    public void markLocalPortCreate() throws JNCException {
        markLeafCreate("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "delete".
     */
    public void markLocalPortDelete() throws JNCException {
        markLeafDelete("localPort");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
