/* 
 * @(#)MmeS1MmePeer.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.interface_.s1;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt8;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/interface_/s1/mme-s1-mme-peer"
 * <p>
 * See line 117 in
 * fgwS1MmeConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeS1MmePeer extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeS1MmePeer object.
     */
    public MmeS1MmePeer() {
        super(Epc.NAMESPACE, "mme-s1-mme-peer");
    }

    /**
     * Constructor for an initialized MmeS1MmePeer object,
     * 
     * @param indexValue Key argument of child.
     */
    public MmeS1MmePeer(YangUInt8 indexValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-s1-mme-peer");
        Leaf index = new Leaf(Epc.NAMESPACE, "index");
        index.setValue(indexValue);
        insertChild(index, childrenNames());
    }

    /**
     * Constructor for an initialized MmeS1MmePeer object,
     * with String keys.
     * @param indexValue Key argument of child.
     */
    public MmeS1MmePeer(String indexValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-s1-mme-peer");
        Leaf index = new Leaf(Epc.NAMESPACE, "index");
        index.setValue(new YangUInt8(indexValue));
        insertChild(index, childrenNames());
    }

    /**
     * Constructor for an initialized MmeS1MmePeer object,
     * with keys of built in Java types.
     * @param indexValue Key argument of child.
     */
    public MmeS1MmePeer(short indexValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-s1-mme-peer");
        Leaf index = new Leaf(Epc.NAMESPACE, "index");
        index.setValue(new YangUInt8(indexValue));
        insertChild(index, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeS1MmePeer clone() {
        MmeS1MmePeer copy;
        try {
            copy = new MmeS1MmePeer(getIndexValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeS1MmePeer)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeS1MmePeer cloneShallow() {
        MmeS1MmePeer copy;
        try {
            copy = new MmeS1MmePeer(getIndexValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeS1MmePeer)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "index",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "index",
            "callp-service-id",
            "ip-address1",
            "ip-address2",
            "initial-ue-setup-rate",
            "remote-port",
        };
    }

    /* Access methods for leaf child: "index". */

    /**
     * Gets the value for child leaf "index".
     * @return The value of the leaf.
     */
    public YangUInt8 getIndexValue() throws JNCException {
        return (YangUInt8)getValue("index");
    }

    /**
     * Sets the value for child leaf "index",
     * using instance of generated typedef class.
     * @param indexValue The value to set.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(YangUInt8 indexValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "index",
            indexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "index",
     * using Java primitive values.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(short indexValue) throws JNCException {
        setIndexValue(new YangUInt8(indexValue));
    }

    /**
     * Sets the value for child leaf "index",
     * using a String value.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(String indexValue) throws JNCException {
        setIndexValue(new YangUInt8(indexValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "index" leaf will not have a value.
     */
    public void addIndex() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "index",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "callp-service-id". */

    /**
     * Gets the value for child leaf "callp-service-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getCallpServiceIdValue() throws JNCException {
        return (YangUInt16)getValue("callp-service-id");
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using instance of generated typedef class.
     * @param callpServiceIdValue The value to set.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(YangUInt16 callpServiceIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "callp-service-id",
            callpServiceIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using Java primitive values.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(int callpServiceIdValue)
            throws JNCException {
        setCallpServiceIdValue(new YangUInt16(callpServiceIdValue));
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using a String value.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(String callpServiceIdValue)
            throws JNCException {
        setCallpServiceIdValue(new YangUInt16(callpServiceIdValue));
    }

    /**
     * Unsets the value for child leaf "callp-service-id".
     */
    public void unsetCallpServiceIdValue() throws JNCException {
        delete("callp-service-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "callp-service-id" leaf will not have a value.
     */
    public void addCallpServiceId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "callp-service-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "callp-service-id" with operation "replace".
     */
    public void markCallpServiceIdReplace() throws JNCException {
        markLeafReplace("callpServiceId");
    }

    /**
     * Marks the leaf "callp-service-id" with operation "merge".
     */
    public void markCallpServiceIdMerge() throws JNCException {
        markLeafMerge("callpServiceId");
    }

    /**
     * Marks the leaf "callp-service-id" with operation "create".
     */
    public void markCallpServiceIdCreate() throws JNCException {
        markLeafCreate("callpServiceId");
    }

    /**
     * Marks the leaf "callp-service-id" with operation "delete".
     */
    public void markCallpServiceIdDelete() throws JNCException {
        markLeafDelete("callpServiceId");
    }

    /* Access methods for optional leaf child: "ip-address1". */

    /**
     * Gets the value for child leaf "ip-address1".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddress1Value() throws JNCException {
        return (IpAddress)getValue("ip-address1");
    }

    /**
     * Sets the value for child leaf "ip-address1",
     * using a JNC type value.
     * @param ipAddress1Value The value to set.
     * @param ipAddress1Value used during instantiation.
     */
    public void setIpAddress1Value(IpAddress ipAddress1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address1",
            ipAddress1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address1",
     * using a String value.
     * @param ipAddress1Value used during instantiation.
     */
    public void setIpAddress1Value(String ipAddress1Value) throws JNCException {
        setIpAddress1Value(new IpAddress(ipAddress1Value));
    }

    /**
     * Unsets the value for child leaf "ip-address1".
     */
    public void unsetIpAddress1Value() throws JNCException {
        delete("ip-address1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address1" leaf will not have a value.
     */
    public void addIpAddress1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address1" with operation "replace".
     */
    public void markIpAddress1Replace() throws JNCException {
        markLeafReplace("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "merge".
     */
    public void markIpAddress1Merge() throws JNCException {
        markLeafMerge("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "create".
     */
    public void markIpAddress1Create() throws JNCException {
        markLeafCreate("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "delete".
     */
    public void markIpAddress1Delete() throws JNCException {
        markLeafDelete("ipAddress1");
    }

    /* Access methods for optional leaf child: "ip-address2". */

    /**
     * Gets the value for child leaf "ip-address2".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddress2Value() throws JNCException {
        IpAddress ipAddress2 = (IpAddress)getValue("ip-address2");
        if (ipAddress2 == null) {
            ipAddress2 = new IpAddress("0.0.0.0");  // default
        }
        return ipAddress2;
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a JNC type value.
     * @param ipAddress2Value The value to set.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(IpAddress ipAddress2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            ipAddress2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a String value.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(String ipAddress2Value) throws JNCException {
        setIpAddress2Value(new IpAddress(ipAddress2Value));
    }

    /**
     * Unsets the value for child leaf "ip-address2".
     */
    public void unsetIpAddress2Value() throws JNCException {
        delete("ip-address2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address2" leaf will not have a value.
     */
    public void addIpAddress2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address2" with operation "replace".
     */
    public void markIpAddress2Replace() throws JNCException {
        markLeafReplace("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "merge".
     */
    public void markIpAddress2Merge() throws JNCException {
        markLeafMerge("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "create".
     */
    public void markIpAddress2Create() throws JNCException {
        markLeafCreate("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "delete".
     */
    public void markIpAddress2Delete() throws JNCException {
        markLeafDelete("ipAddress2");
    }

    /* Access methods for optional leaf child: "initial-ue-setup-rate". */

    /**
     * Gets the value for child leaf "initial-ue-setup-rate".
     * @return The value of the leaf.
     */
    public YangUInt16 getInitialUeSetupRateValue() throws JNCException {
        YangUInt16 initialUeSetupRate = (YangUInt16)getValue("initial-ue-setup-rate");
        if (initialUeSetupRate == null) {
            initialUeSetupRate = new YangUInt16("400");  // default
        }
        return initialUeSetupRate;
    }

    /**
     * Sets the value for child leaf "initial-ue-setup-rate",
     * using instance of generated typedef class.
     * @param initialUeSetupRateValue The value to set.
     * @param initialUeSetupRateValue used during instantiation.
     */
    public void setInitialUeSetupRateValue(YangUInt16 initialUeSetupRateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "initial-ue-setup-rate",
            initialUeSetupRateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "initial-ue-setup-rate",
     * using Java primitive values.
     * @param initialUeSetupRateValue used during instantiation.
     */
    public void setInitialUeSetupRateValue(int initialUeSetupRateValue)
            throws JNCException {
        setInitialUeSetupRateValue(new YangUInt16(initialUeSetupRateValue));
    }

    /**
     * Sets the value for child leaf "initial-ue-setup-rate",
     * using a String value.
     * @param initialUeSetupRateValue used during instantiation.
     */
    public void setInitialUeSetupRateValue(String initialUeSetupRateValue)
            throws JNCException {
        setInitialUeSetupRateValue(new YangUInt16(initialUeSetupRateValue));
    }

    /**
     * Unsets the value for child leaf "initial-ue-setup-rate".
     */
    public void unsetInitialUeSetupRateValue() throws JNCException {
        delete("initial-ue-setup-rate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "initial-ue-setup-rate" leaf will not have a value.
     */
    public void addInitialUeSetupRate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "initial-ue-setup-rate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "initial-ue-setup-rate" with operation "replace".
     */
    public void markInitialUeSetupRateReplace() throws JNCException {
        markLeafReplace("initialUeSetupRate");
    }

    /**
     * Marks the leaf "initial-ue-setup-rate" with operation "merge".
     */
    public void markInitialUeSetupRateMerge() throws JNCException {
        markLeafMerge("initialUeSetupRate");
    }

    /**
     * Marks the leaf "initial-ue-setup-rate" with operation "create".
     */
    public void markInitialUeSetupRateCreate() throws JNCException {
        markLeafCreate("initialUeSetupRate");
    }

    /**
     * Marks the leaf "initial-ue-setup-rate" with operation "delete".
     */
    public void markInitialUeSetupRateDelete() throws JNCException {
        markLeafDelete("initialUeSetupRate");
    }

    /* Access methods for optional leaf child: "remote-port". */

    /**
     * Gets the value for child leaf "remote-port".
     * @return The value of the leaf.
     */
    public YangUInt16 getRemotePortValue() throws JNCException {
        YangUInt16 remotePort = (YangUInt16)getValue("remote-port");
        if (remotePort == null) {
            remotePort = new YangUInt16("36412");  // default
        }
        return remotePort;
    }

    /**
     * Sets the value for child leaf "remote-port",
     * using instance of generated typedef class.
     * @param remotePortValue The value to set.
     * @param remotePortValue used during instantiation.
     */
    public void setRemotePortValue(YangUInt16 remotePortValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-port",
            remotePortValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "remote-port",
     * using Java primitive values.
     * @param remotePortValue used during instantiation.
     */
    public void setRemotePortValue(int remotePortValue) throws JNCException {
        setRemotePortValue(new YangUInt16(remotePortValue));
    }

    /**
     * Sets the value for child leaf "remote-port",
     * using a String value.
     * @param remotePortValue used during instantiation.
     */
    public void setRemotePortValue(String remotePortValue) throws JNCException {
        setRemotePortValue(new YangUInt16(remotePortValue));
    }

    /**
     * Unsets the value for child leaf "remote-port".
     */
    public void unsetRemotePortValue() throws JNCException {
        delete("remote-port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "remote-port" leaf will not have a value.
     */
    public void addRemotePort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "remote-port" with operation "replace".
     */
    public void markRemotePortReplace() throws JNCException {
        markLeafReplace("remotePort");
    }

    /**
     * Marks the leaf "remote-port" with operation "merge".
     */
    public void markRemotePortMerge() throws JNCException {
        markLeafMerge("remotePort");
    }

    /**
     * Marks the leaf "remote-port" with operation "create".
     */
    public void markRemotePortCreate() throws JNCException {
        markLeafCreate("remotePort");
    }

    /**
     * Marks the leaf "remote-port" with operation "delete".
     */
    public void markRemotePortDelete() throws JNCException {
        markLeafDelete("remotePort");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
