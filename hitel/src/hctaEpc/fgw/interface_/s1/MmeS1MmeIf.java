/* 
 * @(#)MmeS1MmeIf.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.interface_.s1;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/interface_/s1/mme-s1-mme-if"
 * <p>
 * See line 24 in
 * fgwS1MmeConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeS1MmeIf extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeS1MmeIf object.
     */
    public MmeS1MmeIf() {
        super(Epc.NAMESPACE, "mme-s1-mme-if");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeS1MmeIf clone() {
        return (MmeS1MmeIf)cloneContent(new MmeS1MmeIf());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeS1MmeIf cloneShallow() {
        return (MmeS1MmeIf)cloneShallowContent(new MmeS1MmeIf());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "routing-instance1",
            "routing-instance2",
            "sctp-profile",
            "ip-address1",
            "ip-address2",
            "initial-ue-response-timer",
            "s1-setup-response-timer",
            "ho-cancel-ack-timer",
            "path-switch-response-timer",
            "time-to-wait",
            "dscp-mark",
            "version",
        };
    }

    /* Access methods for optional leaf child: "routing-instance1". */

    /**
     * Gets the value for child leaf "routing-instance1".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstance1Value() throws JNCException {
        return (YangString)getValue("routing-instance1");
    }

    /**
     * Sets the value for child leaf "routing-instance1",
     * using instance of generated typedef class.
     * @param routingInstance1Value The value to set.
     * @param routingInstance1Value used during instantiation.
     */
    public void setRoutingInstance1Value(YangString routingInstance1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance1",
            routingInstance1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance1",
     * using a String value.
     * @param routingInstance1Value used during instantiation.
     */
    public void setRoutingInstance1Value(String routingInstance1Value)
            throws JNCException {
        setRoutingInstance1Value(new YangString(routingInstance1Value));
    }

    /**
     * Unsets the value for child leaf "routing-instance1".
     */
    public void unsetRoutingInstance1Value() throws JNCException {
        delete("routing-instance1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance1" leaf will not have a value.
     */
    public void addRoutingInstance1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance1" with operation "replace".
     */
    public void markRoutingInstance1Replace() throws JNCException {
        markLeafReplace("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "merge".
     */
    public void markRoutingInstance1Merge() throws JNCException {
        markLeafMerge("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "create".
     */
    public void markRoutingInstance1Create() throws JNCException {
        markLeafCreate("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "delete".
     */
    public void markRoutingInstance1Delete() throws JNCException {
        markLeafDelete("routingInstance1");
    }

    /* Access methods for optional leaf child: "routing-instance2". */

    /**
     * Gets the value for child leaf "routing-instance2".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstance2Value() throws JNCException {
        return (YangString)getValue("routing-instance2");
    }

    /**
     * Sets the value for child leaf "routing-instance2",
     * using instance of generated typedef class.
     * @param routingInstance2Value The value to set.
     * @param routingInstance2Value used during instantiation.
     */
    public void setRoutingInstance2Value(YangString routingInstance2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance2",
            routingInstance2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance2",
     * using a String value.
     * @param routingInstance2Value used during instantiation.
     */
    public void setRoutingInstance2Value(String routingInstance2Value)
            throws JNCException {
        setRoutingInstance2Value(new YangString(routingInstance2Value));
    }

    /**
     * Unsets the value for child leaf "routing-instance2".
     */
    public void unsetRoutingInstance2Value() throws JNCException {
        delete("routing-instance2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance2" leaf will not have a value.
     */
    public void addRoutingInstance2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance2" with operation "replace".
     */
    public void markRoutingInstance2Replace() throws JNCException {
        markLeafReplace("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "merge".
     */
    public void markRoutingInstance2Merge() throws JNCException {
        markLeafMerge("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "create".
     */
    public void markRoutingInstance2Create() throws JNCException {
        markLeafCreate("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "delete".
     */
    public void markRoutingInstance2Delete() throws JNCException {
        markLeafDelete("routingInstance2");
    }

    /* Access methods for optional leaf child: "sctp-profile". */

    /**
     * Gets the value for child leaf "sctp-profile".
     * @return The value of the leaf.
     */
    public YangString getSctpProfileValue() throws JNCException {
        return (YangString)getValue("sctp-profile");
    }

    /**
     * Sets the value for child leaf "sctp-profile",
     * using instance of generated typedef class.
     * @param sctpProfileValue The value to set.
     * @param sctpProfileValue used during instantiation.
     */
    public void setSctpProfileValue(YangString sctpProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-profile",
            sctpProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sctp-profile",
     * using a String value.
     * @param sctpProfileValue used during instantiation.
     */
    public void setSctpProfileValue(String sctpProfileValue)
            throws JNCException {
        setSctpProfileValue(new YangString(sctpProfileValue));
    }

    /**
     * Unsets the value for child leaf "sctp-profile".
     */
    public void unsetSctpProfileValue() throws JNCException {
        delete("sctp-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sctp-profile" leaf will not have a value.
     */
    public void addSctpProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sctp-profile" with operation "replace".
     */
    public void markSctpProfileReplace() throws JNCException {
        markLeafReplace("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "merge".
     */
    public void markSctpProfileMerge() throws JNCException {
        markLeafMerge("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "create".
     */
    public void markSctpProfileCreate() throws JNCException {
        markLeafCreate("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "delete".
     */
    public void markSctpProfileDelete() throws JNCException {
        markLeafDelete("sctpProfile");
    }

    /* Access methods for optional leaf child: "ip-address1". */

    /**
     * Gets the value for child leaf "ip-address1".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddress1Value() throws JNCException {
        return (IpAddress)getValue("ip-address1");
    }

    /**
     * Sets the value for child leaf "ip-address1",
     * using a JNC type value.
     * @param ipAddress1Value The value to set.
     * @param ipAddress1Value used during instantiation.
     */
    public void setIpAddress1Value(IpAddress ipAddress1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address1",
            ipAddress1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address1",
     * using a String value.
     * @param ipAddress1Value used during instantiation.
     */
    public void setIpAddress1Value(String ipAddress1Value) throws JNCException {
        setIpAddress1Value(new IpAddress(ipAddress1Value));
    }

    /**
     * Unsets the value for child leaf "ip-address1".
     */
    public void unsetIpAddress1Value() throws JNCException {
        delete("ip-address1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address1" leaf will not have a value.
     */
    public void addIpAddress1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address1" with operation "replace".
     */
    public void markIpAddress1Replace() throws JNCException {
        markLeafReplace("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "merge".
     */
    public void markIpAddress1Merge() throws JNCException {
        markLeafMerge("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "create".
     */
    public void markIpAddress1Create() throws JNCException {
        markLeafCreate("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "delete".
     */
    public void markIpAddress1Delete() throws JNCException {
        markLeafDelete("ipAddress1");
    }

    /* Access methods for optional leaf child: "ip-address2". */

    /**
     * Gets the value for child leaf "ip-address2".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddress2Value() throws JNCException {
        IpAddress ipAddress2 = (IpAddress)getValue("ip-address2");
        if (ipAddress2 == null) {
            ipAddress2 = new IpAddress("0.0.0.0");  // default
        }
        return ipAddress2;
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a JNC type value.
     * @param ipAddress2Value The value to set.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(IpAddress ipAddress2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            ipAddress2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a String value.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(String ipAddress2Value) throws JNCException {
        setIpAddress2Value(new IpAddress(ipAddress2Value));
    }

    /**
     * Unsets the value for child leaf "ip-address2".
     */
    public void unsetIpAddress2Value() throws JNCException {
        delete("ip-address2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address2" leaf will not have a value.
     */
    public void addIpAddress2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address2" with operation "replace".
     */
    public void markIpAddress2Replace() throws JNCException {
        markLeafReplace("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "merge".
     */
    public void markIpAddress2Merge() throws JNCException {
        markLeafMerge("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "create".
     */
    public void markIpAddress2Create() throws JNCException {
        markLeafCreate("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "delete".
     */
    public void markIpAddress2Delete() throws JNCException {
        markLeafDelete("ipAddress2");
    }

    /* Access methods for optional leaf child: "initial-ue-response-timer". */

    /**
     * Gets the value for child leaf "initial-ue-response-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getInitialUeResponseTimerValue() throws JNCException {
        YangUInt8 initialUeResponseTimer = (YangUInt8)getValue("initial-ue-response-timer");
        if (initialUeResponseTimer == null) {
            initialUeResponseTimer = new YangUInt8("5");  // default
        }
        return initialUeResponseTimer;
    }

    /**
     * Sets the value for child leaf "initial-ue-response-timer",
     * using instance of generated typedef class.
     * @param initialUeResponseTimerValue The value to set.
     * @param initialUeResponseTimerValue used during instantiation.
     */
    public void setInitialUeResponseTimerValue(YangUInt8 initialUeResponseTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "initial-ue-response-timer",
            initialUeResponseTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "initial-ue-response-timer",
     * using Java primitive values.
     * @param initialUeResponseTimerValue used during instantiation.
     */
    public void setInitialUeResponseTimerValue(short initialUeResponseTimerValue)
            throws JNCException {
        setInitialUeResponseTimerValue(new YangUInt8(initialUeResponseTimerValue));
    }

    /**
     * Sets the value for child leaf "initial-ue-response-timer",
     * using a String value.
     * @param initialUeResponseTimerValue used during instantiation.
     */
    public void setInitialUeResponseTimerValue(String initialUeResponseTimerValue)
            throws JNCException {
        setInitialUeResponseTimerValue(new YangUInt8(initialUeResponseTimerValue));
    }

    /**
     * Unsets the value for child leaf "initial-ue-response-timer".
     */
    public void unsetInitialUeResponseTimerValue() throws JNCException {
        delete("initial-ue-response-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "initial-ue-response-timer" leaf will not have a value.
     */
    public void addInitialUeResponseTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "initial-ue-response-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "initial-ue-response-timer" with operation "replace".
     */
    public void markInitialUeResponseTimerReplace() throws JNCException {
        markLeafReplace("initialUeResponseTimer");
    }

    /**
     * Marks the leaf "initial-ue-response-timer" with operation "merge".
     */
    public void markInitialUeResponseTimerMerge() throws JNCException {
        markLeafMerge("initialUeResponseTimer");
    }

    /**
     * Marks the leaf "initial-ue-response-timer" with operation "create".
     */
    public void markInitialUeResponseTimerCreate() throws JNCException {
        markLeafCreate("initialUeResponseTimer");
    }

    /**
     * Marks the leaf "initial-ue-response-timer" with operation "delete".
     */
    public void markInitialUeResponseTimerDelete() throws JNCException {
        markLeafDelete("initialUeResponseTimer");
    }

    /* Access methods for optional leaf child: "s1-setup-response-timer". */

    /**
     * Gets the value for child leaf "s1-setup-response-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getS1SetupResponseTimerValue() throws JNCException {
        YangUInt8 s1SetupResponseTimer = (YangUInt8)getValue("s1-setup-response-timer");
        if (s1SetupResponseTimer == null) {
            s1SetupResponseTimer = new YangUInt8("5");  // default
        }
        return s1SetupResponseTimer;
    }

    /**
     * Sets the value for child leaf "s1-setup-response-timer",
     * using instance of generated typedef class.
     * @param s1SetupResponseTimerValue The value to set.
     * @param s1SetupResponseTimerValue used during instantiation.
     */
    public void setS1SetupResponseTimerValue(YangUInt8 s1SetupResponseTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s1-setup-response-timer",
            s1SetupResponseTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "s1-setup-response-timer",
     * using Java primitive values.
     * @param s1SetupResponseTimerValue used during instantiation.
     */
    public void setS1SetupResponseTimerValue(short s1SetupResponseTimerValue)
            throws JNCException {
        setS1SetupResponseTimerValue(new YangUInt8(s1SetupResponseTimerValue));
    }

    /**
     * Sets the value for child leaf "s1-setup-response-timer",
     * using a String value.
     * @param s1SetupResponseTimerValue used during instantiation.
     */
    public void setS1SetupResponseTimerValue(String s1SetupResponseTimerValue)
            throws JNCException {
        setS1SetupResponseTimerValue(new YangUInt8(s1SetupResponseTimerValue));
    }

    /**
     * Unsets the value for child leaf "s1-setup-response-timer".
     */
    public void unsetS1SetupResponseTimerValue() throws JNCException {
        delete("s1-setup-response-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "s1-setup-response-timer" leaf will not have a value.
     */
    public void addS1SetupResponseTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s1-setup-response-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "s1-setup-response-timer" with operation "replace".
     */
    public void markS1SetupResponseTimerReplace() throws JNCException {
        markLeafReplace("s1SetupResponseTimer");
    }

    /**
     * Marks the leaf "s1-setup-response-timer" with operation "merge".
     */
    public void markS1SetupResponseTimerMerge() throws JNCException {
        markLeafMerge("s1SetupResponseTimer");
    }

    /**
     * Marks the leaf "s1-setup-response-timer" with operation "create".
     */
    public void markS1SetupResponseTimerCreate() throws JNCException {
        markLeafCreate("s1SetupResponseTimer");
    }

    /**
     * Marks the leaf "s1-setup-response-timer" with operation "delete".
     */
    public void markS1SetupResponseTimerDelete() throws JNCException {
        markLeafDelete("s1SetupResponseTimer");
    }

    /* Access methods for optional leaf child: "ho-cancel-ack-timer". */

    /**
     * Gets the value for child leaf "ho-cancel-ack-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getHoCancelAckTimerValue() throws JNCException {
        YangUInt8 hoCancelAckTimer = (YangUInt8)getValue("ho-cancel-ack-timer");
        if (hoCancelAckTimer == null) {
            hoCancelAckTimer = new YangUInt8("5");  // default
        }
        return hoCancelAckTimer;
    }

    /**
     * Sets the value for child leaf "ho-cancel-ack-timer",
     * using instance of generated typedef class.
     * @param hoCancelAckTimerValue The value to set.
     * @param hoCancelAckTimerValue used during instantiation.
     */
    public void setHoCancelAckTimerValue(YangUInt8 hoCancelAckTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ho-cancel-ack-timer",
            hoCancelAckTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ho-cancel-ack-timer",
     * using Java primitive values.
     * @param hoCancelAckTimerValue used during instantiation.
     */
    public void setHoCancelAckTimerValue(short hoCancelAckTimerValue)
            throws JNCException {
        setHoCancelAckTimerValue(new YangUInt8(hoCancelAckTimerValue));
    }

    /**
     * Sets the value for child leaf "ho-cancel-ack-timer",
     * using a String value.
     * @param hoCancelAckTimerValue used during instantiation.
     */
    public void setHoCancelAckTimerValue(String hoCancelAckTimerValue)
            throws JNCException {
        setHoCancelAckTimerValue(new YangUInt8(hoCancelAckTimerValue));
    }

    /**
     * Unsets the value for child leaf "ho-cancel-ack-timer".
     */
    public void unsetHoCancelAckTimerValue() throws JNCException {
        delete("ho-cancel-ack-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ho-cancel-ack-timer" leaf will not have a value.
     */
    public void addHoCancelAckTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ho-cancel-ack-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ho-cancel-ack-timer" with operation "replace".
     */
    public void markHoCancelAckTimerReplace() throws JNCException {
        markLeafReplace("hoCancelAckTimer");
    }

    /**
     * Marks the leaf "ho-cancel-ack-timer" with operation "merge".
     */
    public void markHoCancelAckTimerMerge() throws JNCException {
        markLeafMerge("hoCancelAckTimer");
    }

    /**
     * Marks the leaf "ho-cancel-ack-timer" with operation "create".
     */
    public void markHoCancelAckTimerCreate() throws JNCException {
        markLeafCreate("hoCancelAckTimer");
    }

    /**
     * Marks the leaf "ho-cancel-ack-timer" with operation "delete".
     */
    public void markHoCancelAckTimerDelete() throws JNCException {
        markLeafDelete("hoCancelAckTimer");
    }

    /* Access methods for optional leaf child: "path-switch-response-timer". */

    /**
     * Gets the value for child leaf "path-switch-response-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getPathSwitchResponseTimerValue() throws JNCException {
        YangUInt8 pathSwitchResponseTimer = (YangUInt8)getValue("path-switch-response-timer");
        if (pathSwitchResponseTimer == null) {
            pathSwitchResponseTimer = new YangUInt8("5");  // default
        }
        return pathSwitchResponseTimer;
    }

    /**
     * Sets the value for child leaf "path-switch-response-timer",
     * using instance of generated typedef class.
     * @param pathSwitchResponseTimerValue The value to set.
     * @param pathSwitchResponseTimerValue used during instantiation.
     */
    public void setPathSwitchResponseTimerValue(YangUInt8 pathSwitchResponseTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-switch-response-timer",
            pathSwitchResponseTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "path-switch-response-timer",
     * using Java primitive values.
     * @param pathSwitchResponseTimerValue used during instantiation.
     */
    public void setPathSwitchResponseTimerValue(short pathSwitchResponseTimerValue)
            throws JNCException {
        setPathSwitchResponseTimerValue(new YangUInt8(pathSwitchResponseTimerValue));
    }

    /**
     * Sets the value for child leaf "path-switch-response-timer",
     * using a String value.
     * @param pathSwitchResponseTimerValue used during instantiation.
     */
    public void setPathSwitchResponseTimerValue(String pathSwitchResponseTimerValue)
            throws JNCException {
        setPathSwitchResponseTimerValue(new YangUInt8(pathSwitchResponseTimerValue));
    }

    /**
     * Unsets the value for child leaf "path-switch-response-timer".
     */
    public void unsetPathSwitchResponseTimerValue() throws JNCException {
        delete("path-switch-response-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "path-switch-response-timer" leaf will not have a value.
     */
    public void addPathSwitchResponseTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-switch-response-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "path-switch-response-timer" with operation "replace".
     */
    public void markPathSwitchResponseTimerReplace() throws JNCException {
        markLeafReplace("pathSwitchResponseTimer");
    }

    /**
     * Marks the leaf "path-switch-response-timer" with operation "merge".
     */
    public void markPathSwitchResponseTimerMerge() throws JNCException {
        markLeafMerge("pathSwitchResponseTimer");
    }

    /**
     * Marks the leaf "path-switch-response-timer" with operation "create".
     */
    public void markPathSwitchResponseTimerCreate() throws JNCException {
        markLeafCreate("pathSwitchResponseTimer");
    }

    /**
     * Marks the leaf "path-switch-response-timer" with operation "delete".
     */
    public void markPathSwitchResponseTimerDelete() throws JNCException {
        markLeafDelete("pathSwitchResponseTimer");
    }

    /* Access methods for optional leaf child: "time-to-wait". */

    /**
     * Gets the value for child leaf "time-to-wait".
     * @return The value of the leaf.
     */
    public YangEnumeration getTimeToWaitValue() throws JNCException {
        YangEnumeration timeToWait = (YangEnumeration)getValue("time-to-wait");
        if (timeToWait == null) {
            timeToWait = new YangEnumeration("60", new String[] {  // default
                "1",
                "2",
                "5",
                "10",
                "20",
                "60",
            });
        }
        return timeToWait;
    }

    /**
     * Sets the value for child leaf "time-to-wait",
     * using instance of generated typedef class.
     * @param timeToWaitValue The value to set.
     * @param timeToWaitValue used during instantiation.
     */
    public void setTimeToWaitValue(YangEnumeration timeToWaitValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "time-to-wait",
            timeToWaitValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "time-to-wait",
     * using a String value.
     * @param timeToWaitValue used during instantiation.
     */
    public void setTimeToWaitValue(String timeToWaitValue) throws JNCException {
        setTimeToWaitValue(new YangEnumeration(timeToWaitValue, new String[] {
             "1",
             "2",
             "5",
             "10",
             "20",
             "60",
        }));
    }

    /**
     * Unsets the value for child leaf "time-to-wait".
     */
    public void unsetTimeToWaitValue() throws JNCException {
        delete("time-to-wait");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "time-to-wait" leaf will not have a value.
     */
    public void addTimeToWait() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "time-to-wait",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "time-to-wait" with operation "replace".
     */
    public void markTimeToWaitReplace() throws JNCException {
        markLeafReplace("timeToWait");
    }

    /**
     * Marks the leaf "time-to-wait" with operation "merge".
     */
    public void markTimeToWaitMerge() throws JNCException {
        markLeafMerge("timeToWait");
    }

    /**
     * Marks the leaf "time-to-wait" with operation "create".
     */
    public void markTimeToWaitCreate() throws JNCException {
        markLeafCreate("timeToWait");
    }

    /**
     * Marks the leaf "time-to-wait" with operation "delete".
     */
    public void markTimeToWaitDelete() throws JNCException {
        markLeafDelete("timeToWait");
    }

    /* Access methods for optional leaf child: "dscp-mark". */

    /**
     * Gets the value for child leaf "dscp-mark".
     * @return The value of the leaf.
     */
    public YangString getDscpMarkValue() throws JNCException {
        YangString dscpMark = (YangString)getValue("dscp-mark");
        if (dscpMark == null) {
            dscpMark = new YangString("de");  // default
        }
        return dscpMark;
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using instance of generated typedef class.
     * @param dscpMarkValue The value to set.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(YangString dscpMarkValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            dscpMarkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using a String value.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(String dscpMarkValue) throws JNCException {
        setDscpMarkValue(new YangString(dscpMarkValue));
    }

    /**
     * Unsets the value for child leaf "dscp-mark".
     */
    public void unsetDscpMarkValue() throws JNCException {
        delete("dscp-mark");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dscp-mark" leaf will not have a value.
     */
    public void addDscpMark() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dscp-mark" with operation "replace".
     */
    public void markDscpMarkReplace() throws JNCException {
        markLeafReplace("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "merge".
     */
    public void markDscpMarkMerge() throws JNCException {
        markLeafMerge("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "create".
     */
    public void markDscpMarkCreate() throws JNCException {
        markLeafCreate("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "delete".
     */
    public void markDscpMarkDelete() throws JNCException {
        markLeafDelete("dscpMark");
    }

    /* Access methods for optional leaf child: "version". */

    /**
     * Gets the value for child leaf "version".
     * @return The value of the leaf.
     */
    public YangEnumeration getVersionValue() throws JNCException {
        YangEnumeration version = (YangEnumeration)getValue("version");
        if (version == null) {
            version = new YangEnumeration("10.6.0", new String[] {  // default
                "10.6.0",
            });
        }
        return version;
    }

    /**
     * Sets the value for child leaf "version",
     * using instance of generated typedef class.
     * @param versionValue The value to set.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(YangEnumeration versionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            versionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "version",
     * using a String value.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(String versionValue) throws JNCException {
        setVersionValue(new YangEnumeration(versionValue, new String[] {
             "10.6.0",
        }));
    }

    /**
     * Unsets the value for child leaf "version".
     */
    public void unsetVersionValue() throws JNCException {
        delete("version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "version" leaf will not have a value.
     */
    public void addVersion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "version" with operation "replace".
     */
    public void markVersionReplace() throws JNCException {
        markLeafReplace("version");
    }

    /**
     * Marks the leaf "version" with operation "merge".
     */
    public void markVersionMerge() throws JNCException {
        markLeafMerge("version");
    }

    /**
     * Marks the leaf "version" with operation "create".
     */
    public void markVersionCreate() throws JNCException {
        markLeafCreate("version");
    }

    /**
     * Marks the leaf "version" with operation "delete".
     */
    public void markVersionDelete() throws JNCException {
        markLeafDelete("version");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
