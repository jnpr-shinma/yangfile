/* 
 * @(#)MmeFgwS1InterfaceProfile.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.interface_.s1;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/interface_/s1/mme-fgw-s1-interface-profile"
 * <p>
 * See line 1290 in
 * s1MasterConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeFgwS1InterfaceProfile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeFgwS1InterfaceProfile object.
     */
    public MmeFgwS1InterfaceProfile() {
        super(Epc.NAMESPACE, "mme-fgw-s1-interface-profile");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeFgwS1InterfaceProfile clone() {
        return (MmeFgwS1InterfaceProfile)cloneContent(new MmeFgwS1InterfaceProfile());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeFgwS1InterfaceProfile cloneShallow() {
        return (MmeFgwS1InterfaceProfile)cloneShallowContent(new MmeFgwS1InterfaceProfile());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "sctp-profile",
            "version",
            "time-to-wait",
            "reloc-prep-timer",
            "reloc-overall-timer",
            "handover-resource-release-timer",
            "ue-release-complete-timer",
            "dscp-mark",
            "enb-alarm-clear-time",
            "initial-context-setup-res-timer",
            "erab-setup-response-timer",
            "erab-modify-response-timer",
            "erab-release-response-timer",
        };
    }

    /* Access methods for optional leaf child: "sctp-profile". */

    /**
     * Gets the value for child leaf "sctp-profile".
     * @return The value of the leaf.
     */
    public YangString getSctpProfileValue() throws JNCException {
        return (YangString)getValue("sctp-profile");
    }

    /**
     * Sets the value for child leaf "sctp-profile",
     * using instance of generated typedef class.
     * @param sctpProfileValue The value to set.
     * @param sctpProfileValue used during instantiation.
     */
    public void setSctpProfileValue(YangString sctpProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-profile",
            sctpProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sctp-profile",
     * using a String value.
     * @param sctpProfileValue used during instantiation.
     */
    public void setSctpProfileValue(String sctpProfileValue)
            throws JNCException {
        setSctpProfileValue(new YangString(sctpProfileValue));
    }

    /**
     * Unsets the value for child leaf "sctp-profile".
     */
    public void unsetSctpProfileValue() throws JNCException {
        delete("sctp-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sctp-profile" leaf will not have a value.
     */
    public void addSctpProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sctp-profile" with operation "replace".
     */
    public void markSctpProfileReplace() throws JNCException {
        markLeafReplace("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "merge".
     */
    public void markSctpProfileMerge() throws JNCException {
        markLeafMerge("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "create".
     */
    public void markSctpProfileCreate() throws JNCException {
        markLeafCreate("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "delete".
     */
    public void markSctpProfileDelete() throws JNCException {
        markLeafDelete("sctpProfile");
    }

    /* Access methods for optional leaf child: "version". */

    /**
     * Gets the value for child leaf "version".
     * @return The value of the leaf.
     */
    public YangEnumeration getVersionValue() throws JNCException {
        YangEnumeration version = (YangEnumeration)getValue("version");
        if (version == null) {
            version = new YangEnumeration("10.6.0", new String[] {  // default
                "10.6.0",
            });
        }
        return version;
    }

    /**
     * Sets the value for child leaf "version",
     * using instance of generated typedef class.
     * @param versionValue The value to set.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(YangEnumeration versionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            versionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "version",
     * using a String value.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(String versionValue) throws JNCException {
        setVersionValue(new YangEnumeration(versionValue, new String[] {
             "10.6.0",
        }));
    }

    /**
     * Unsets the value for child leaf "version".
     */
    public void unsetVersionValue() throws JNCException {
        delete("version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "version" leaf will not have a value.
     */
    public void addVersion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "version" with operation "replace".
     */
    public void markVersionReplace() throws JNCException {
        markLeafReplace("version");
    }

    /**
     * Marks the leaf "version" with operation "merge".
     */
    public void markVersionMerge() throws JNCException {
        markLeafMerge("version");
    }

    /**
     * Marks the leaf "version" with operation "create".
     */
    public void markVersionCreate() throws JNCException {
        markLeafCreate("version");
    }

    /**
     * Marks the leaf "version" with operation "delete".
     */
    public void markVersionDelete() throws JNCException {
        markLeafDelete("version");
    }

    /* Access methods for optional leaf child: "time-to-wait". */

    /**
     * Gets the value for child leaf "time-to-wait".
     * @return The value of the leaf.
     */
    public YangEnumeration getTimeToWaitValue() throws JNCException {
        YangEnumeration timeToWait = (YangEnumeration)getValue("time-to-wait");
        if (timeToWait == null) {
            timeToWait = new YangEnumeration("60", new String[] {  // default
                "1",
                "2",
                "5",
                "10",
                "20",
                "60",
            });
        }
        return timeToWait;
    }

    /**
     * Sets the value for child leaf "time-to-wait",
     * using instance of generated typedef class.
     * @param timeToWaitValue The value to set.
     * @param timeToWaitValue used during instantiation.
     */
    public void setTimeToWaitValue(YangEnumeration timeToWaitValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "time-to-wait",
            timeToWaitValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "time-to-wait",
     * using a String value.
     * @param timeToWaitValue used during instantiation.
     */
    public void setTimeToWaitValue(String timeToWaitValue) throws JNCException {
        setTimeToWaitValue(new YangEnumeration(timeToWaitValue, new String[] {
             "1",
             "2",
             "5",
             "10",
             "20",
             "60",
        }));
    }

    /**
     * Unsets the value for child leaf "time-to-wait".
     */
    public void unsetTimeToWaitValue() throws JNCException {
        delete("time-to-wait");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "time-to-wait" leaf will not have a value.
     */
    public void addTimeToWait() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "time-to-wait",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "time-to-wait" with operation "replace".
     */
    public void markTimeToWaitReplace() throws JNCException {
        markLeafReplace("timeToWait");
    }

    /**
     * Marks the leaf "time-to-wait" with operation "merge".
     */
    public void markTimeToWaitMerge() throws JNCException {
        markLeafMerge("timeToWait");
    }

    /**
     * Marks the leaf "time-to-wait" with operation "create".
     */
    public void markTimeToWaitCreate() throws JNCException {
        markLeafCreate("timeToWait");
    }

    /**
     * Marks the leaf "time-to-wait" with operation "delete".
     */
    public void markTimeToWaitDelete() throws JNCException {
        markLeafDelete("timeToWait");
    }

    /* Access methods for optional leaf child: "reloc-prep-timer". */

    /**
     * Gets the value for child leaf "reloc-prep-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getRelocPrepTimerValue() throws JNCException {
        YangUInt8 relocPrepTimer = (YangUInt8)getValue("reloc-prep-timer");
        if (relocPrepTimer == null) {
            relocPrepTimer = new YangUInt8("5");  // default
        }
        return relocPrepTimer;
    }

    /**
     * Sets the value for child leaf "reloc-prep-timer",
     * using instance of generated typedef class.
     * @param relocPrepTimerValue The value to set.
     * @param relocPrepTimerValue used during instantiation.
     */
    public void setRelocPrepTimerValue(YangUInt8 relocPrepTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reloc-prep-timer",
            relocPrepTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "reloc-prep-timer",
     * using Java primitive values.
     * @param relocPrepTimerValue used during instantiation.
     */
    public void setRelocPrepTimerValue(short relocPrepTimerValue)
            throws JNCException {
        setRelocPrepTimerValue(new YangUInt8(relocPrepTimerValue));
    }

    /**
     * Sets the value for child leaf "reloc-prep-timer",
     * using a String value.
     * @param relocPrepTimerValue used during instantiation.
     */
    public void setRelocPrepTimerValue(String relocPrepTimerValue)
            throws JNCException {
        setRelocPrepTimerValue(new YangUInt8(relocPrepTimerValue));
    }

    /**
     * Unsets the value for child leaf "reloc-prep-timer".
     */
    public void unsetRelocPrepTimerValue() throws JNCException {
        delete("reloc-prep-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "reloc-prep-timer" leaf will not have a value.
     */
    public void addRelocPrepTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reloc-prep-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "reloc-prep-timer" with operation "replace".
     */
    public void markRelocPrepTimerReplace() throws JNCException {
        markLeafReplace("relocPrepTimer");
    }

    /**
     * Marks the leaf "reloc-prep-timer" with operation "merge".
     */
    public void markRelocPrepTimerMerge() throws JNCException {
        markLeafMerge("relocPrepTimer");
    }

    /**
     * Marks the leaf "reloc-prep-timer" with operation "create".
     */
    public void markRelocPrepTimerCreate() throws JNCException {
        markLeafCreate("relocPrepTimer");
    }

    /**
     * Marks the leaf "reloc-prep-timer" with operation "delete".
     */
    public void markRelocPrepTimerDelete() throws JNCException {
        markLeafDelete("relocPrepTimer");
    }

    /* Access methods for optional leaf child: "reloc-overall-timer". */

    /**
     * Gets the value for child leaf "reloc-overall-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getRelocOverallTimerValue() throws JNCException {
        YangUInt8 relocOverallTimer = (YangUInt8)getValue("reloc-overall-timer");
        if (relocOverallTimer == null) {
            relocOverallTimer = new YangUInt8("5");  // default
        }
        return relocOverallTimer;
    }

    /**
     * Sets the value for child leaf "reloc-overall-timer",
     * using instance of generated typedef class.
     * @param relocOverallTimerValue The value to set.
     * @param relocOverallTimerValue used during instantiation.
     */
    public void setRelocOverallTimerValue(YangUInt8 relocOverallTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reloc-overall-timer",
            relocOverallTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "reloc-overall-timer",
     * using Java primitive values.
     * @param relocOverallTimerValue used during instantiation.
     */
    public void setRelocOverallTimerValue(short relocOverallTimerValue)
            throws JNCException {
        setRelocOverallTimerValue(new YangUInt8(relocOverallTimerValue));
    }

    /**
     * Sets the value for child leaf "reloc-overall-timer",
     * using a String value.
     * @param relocOverallTimerValue used during instantiation.
     */
    public void setRelocOverallTimerValue(String relocOverallTimerValue)
            throws JNCException {
        setRelocOverallTimerValue(new YangUInt8(relocOverallTimerValue));
    }

    /**
     * Unsets the value for child leaf "reloc-overall-timer".
     */
    public void unsetRelocOverallTimerValue() throws JNCException {
        delete("reloc-overall-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "reloc-overall-timer" leaf will not have a value.
     */
    public void addRelocOverallTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reloc-overall-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "reloc-overall-timer" with operation "replace".
     */
    public void markRelocOverallTimerReplace() throws JNCException {
        markLeafReplace("relocOverallTimer");
    }

    /**
     * Marks the leaf "reloc-overall-timer" with operation "merge".
     */
    public void markRelocOverallTimerMerge() throws JNCException {
        markLeafMerge("relocOverallTimer");
    }

    /**
     * Marks the leaf "reloc-overall-timer" with operation "create".
     */
    public void markRelocOverallTimerCreate() throws JNCException {
        markLeafCreate("relocOverallTimer");
    }

    /**
     * Marks the leaf "reloc-overall-timer" with operation "delete".
     */
    public void markRelocOverallTimerDelete() throws JNCException {
        markLeafDelete("relocOverallTimer");
    }

    /* Access methods for optional leaf child: "handover-resource-release-timer". */

    /**
     * Gets the value for child leaf "handover-resource-release-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getHandoverResourceReleaseTimerValue() throws JNCException {
        YangUInt8 handoverResourceReleaseTimer = (YangUInt8)getValue("handover-resource-release-timer");
        if (handoverResourceReleaseTimer == null) {
            handoverResourceReleaseTimer = new YangUInt8("5");  // default
        }
        return handoverResourceReleaseTimer;
    }

    /**
     * Sets the value for child leaf "handover-resource-release-timer",
     * using instance of generated typedef class.
     * @param handoverResourceReleaseTimerValue The value to set.
     * @param handoverResourceReleaseTimerValue used during instantiation.
     */
    public void setHandoverResourceReleaseTimerValue(YangUInt8 handoverResourceReleaseTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "handover-resource-release-timer",
            handoverResourceReleaseTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "handover-resource-release-timer",
     * using Java primitive values.
     * @param handoverResourceReleaseTimerValue used during instantiation.
     */
    public void setHandoverResourceReleaseTimerValue(short handoverResourceReleaseTimerValue)
            throws JNCException {
        setHandoverResourceReleaseTimerValue(new YangUInt8(handoverResourceReleaseTimerValue));
    }

    /**
     * Sets the value for child leaf "handover-resource-release-timer",
     * using a String value.
     * @param handoverResourceReleaseTimerValue used during instantiation.
     */
    public void setHandoverResourceReleaseTimerValue(String handoverResourceReleaseTimerValue)
            throws JNCException {
        setHandoverResourceReleaseTimerValue(new YangUInt8(handoverResourceReleaseTimerValue));
    }

    /**
     * Unsets the value for child leaf "handover-resource-release-timer".
     */
    public void unsetHandoverResourceReleaseTimerValue() throws JNCException {
        delete("handover-resource-release-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "handover-resource-release-timer" leaf will not have a value.
     */
    public void addHandoverResourceReleaseTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "handover-resource-release-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "handover-resource-release-timer" with operation "replace".
     */
    public void markHandoverResourceReleaseTimerReplace() throws JNCException {
        markLeafReplace("handoverResourceReleaseTimer");
    }

    /**
     * Marks the leaf "handover-resource-release-timer" with operation "merge".
     */
    public void markHandoverResourceReleaseTimerMerge() throws JNCException {
        markLeafMerge("handoverResourceReleaseTimer");
    }

    /**
     * Marks the leaf "handover-resource-release-timer" with operation "create".
     */
    public void markHandoverResourceReleaseTimerCreate() throws JNCException {
        markLeafCreate("handoverResourceReleaseTimer");
    }

    /**
     * Marks the leaf "handover-resource-release-timer" with operation "delete".
     */
    public void markHandoverResourceReleaseTimerDelete() throws JNCException {
        markLeafDelete("handoverResourceReleaseTimer");
    }

    /* Access methods for optional leaf child: "ue-release-complete-timer". */

    /**
     * Gets the value for child leaf "ue-release-complete-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getUeReleaseCompleteTimerValue() throws JNCException {
        YangUInt8 ueReleaseCompleteTimer = (YangUInt8)getValue("ue-release-complete-timer");
        if (ueReleaseCompleteTimer == null) {
            ueReleaseCompleteTimer = new YangUInt8("5");  // default
        }
        return ueReleaseCompleteTimer;
    }

    /**
     * Sets the value for child leaf "ue-release-complete-timer",
     * using instance of generated typedef class.
     * @param ueReleaseCompleteTimerValue The value to set.
     * @param ueReleaseCompleteTimerValue used during instantiation.
     */
    public void setUeReleaseCompleteTimerValue(YangUInt8 ueReleaseCompleteTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-release-complete-timer",
            ueReleaseCompleteTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ue-release-complete-timer",
     * using Java primitive values.
     * @param ueReleaseCompleteTimerValue used during instantiation.
     */
    public void setUeReleaseCompleteTimerValue(short ueReleaseCompleteTimerValue)
            throws JNCException {
        setUeReleaseCompleteTimerValue(new YangUInt8(ueReleaseCompleteTimerValue));
    }

    /**
     * Sets the value for child leaf "ue-release-complete-timer",
     * using a String value.
     * @param ueReleaseCompleteTimerValue used during instantiation.
     */
    public void setUeReleaseCompleteTimerValue(String ueReleaseCompleteTimerValue)
            throws JNCException {
        setUeReleaseCompleteTimerValue(new YangUInt8(ueReleaseCompleteTimerValue));
    }

    /**
     * Unsets the value for child leaf "ue-release-complete-timer".
     */
    public void unsetUeReleaseCompleteTimerValue() throws JNCException {
        delete("ue-release-complete-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ue-release-complete-timer" leaf will not have a value.
     */
    public void addUeReleaseCompleteTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-release-complete-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ue-release-complete-timer" with operation "replace".
     */
    public void markUeReleaseCompleteTimerReplace() throws JNCException {
        markLeafReplace("ueReleaseCompleteTimer");
    }

    /**
     * Marks the leaf "ue-release-complete-timer" with operation "merge".
     */
    public void markUeReleaseCompleteTimerMerge() throws JNCException {
        markLeafMerge("ueReleaseCompleteTimer");
    }

    /**
     * Marks the leaf "ue-release-complete-timer" with operation "create".
     */
    public void markUeReleaseCompleteTimerCreate() throws JNCException {
        markLeafCreate("ueReleaseCompleteTimer");
    }

    /**
     * Marks the leaf "ue-release-complete-timer" with operation "delete".
     */
    public void markUeReleaseCompleteTimerDelete() throws JNCException {
        markLeafDelete("ueReleaseCompleteTimer");
    }

    /* Access methods for optional leaf child: "dscp-mark". */

    /**
     * Gets the value for child leaf "dscp-mark".
     * @return The value of the leaf.
     */
    public YangString getDscpMarkValue() throws JNCException {
        YangString dscpMark = (YangString)getValue("dscp-mark");
        if (dscpMark == null) {
            dscpMark = new YangString("de");  // default
        }
        return dscpMark;
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using instance of generated typedef class.
     * @param dscpMarkValue The value to set.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(YangString dscpMarkValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            dscpMarkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using a String value.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(String dscpMarkValue) throws JNCException {
        setDscpMarkValue(new YangString(dscpMarkValue));
    }

    /**
     * Unsets the value for child leaf "dscp-mark".
     */
    public void unsetDscpMarkValue() throws JNCException {
        delete("dscp-mark");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dscp-mark" leaf will not have a value.
     */
    public void addDscpMark() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dscp-mark" with operation "replace".
     */
    public void markDscpMarkReplace() throws JNCException {
        markLeafReplace("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "merge".
     */
    public void markDscpMarkMerge() throws JNCException {
        markLeafMerge("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "create".
     */
    public void markDscpMarkCreate() throws JNCException {
        markLeafCreate("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "delete".
     */
    public void markDscpMarkDelete() throws JNCException {
        markLeafDelete("dscpMark");
    }

    /* Access methods for optional leaf child: "enb-alarm-clear-time". */

    /**
     * Gets the value for child leaf "enb-alarm-clear-time".
     * @return The value of the leaf.
     */
    public YangUInt8 getEnbAlarmClearTimeValue() throws JNCException {
        YangUInt8 enbAlarmClearTime = (YangUInt8)getValue("enb-alarm-clear-time");
        if (enbAlarmClearTime == null) {
            enbAlarmClearTime = new YangUInt8("24");  // default
        }
        return enbAlarmClearTime;
    }

    /**
     * Sets the value for child leaf "enb-alarm-clear-time",
     * using instance of generated typedef class.
     * @param enbAlarmClearTimeValue The value to set.
     * @param enbAlarmClearTimeValue used during instantiation.
     */
    public void setEnbAlarmClearTimeValue(YangUInt8 enbAlarmClearTimeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enb-alarm-clear-time",
            enbAlarmClearTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enb-alarm-clear-time",
     * using Java primitive values.
     * @param enbAlarmClearTimeValue used during instantiation.
     */
    public void setEnbAlarmClearTimeValue(short enbAlarmClearTimeValue)
            throws JNCException {
        setEnbAlarmClearTimeValue(new YangUInt8(enbAlarmClearTimeValue));
    }

    /**
     * Sets the value for child leaf "enb-alarm-clear-time",
     * using a String value.
     * @param enbAlarmClearTimeValue used during instantiation.
     */
    public void setEnbAlarmClearTimeValue(String enbAlarmClearTimeValue)
            throws JNCException {
        setEnbAlarmClearTimeValue(new YangUInt8(enbAlarmClearTimeValue));
    }

    /**
     * Unsets the value for child leaf "enb-alarm-clear-time".
     */
    public void unsetEnbAlarmClearTimeValue() throws JNCException {
        delete("enb-alarm-clear-time");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enb-alarm-clear-time" leaf will not have a value.
     */
    public void addEnbAlarmClearTime() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enb-alarm-clear-time",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enb-alarm-clear-time" with operation "replace".
     */
    public void markEnbAlarmClearTimeReplace() throws JNCException {
        markLeafReplace("enbAlarmClearTime");
    }

    /**
     * Marks the leaf "enb-alarm-clear-time" with operation "merge".
     */
    public void markEnbAlarmClearTimeMerge() throws JNCException {
        markLeafMerge("enbAlarmClearTime");
    }

    /**
     * Marks the leaf "enb-alarm-clear-time" with operation "create".
     */
    public void markEnbAlarmClearTimeCreate() throws JNCException {
        markLeafCreate("enbAlarmClearTime");
    }

    /**
     * Marks the leaf "enb-alarm-clear-time" with operation "delete".
     */
    public void markEnbAlarmClearTimeDelete() throws JNCException {
        markLeafDelete("enbAlarmClearTime");
    }

    /* Access methods for optional leaf child: "initial-context-setup-res-timer". */

    /**
     * Gets the value for child leaf "initial-context-setup-res-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getInitialContextSetupResTimerValue() throws JNCException {
        YangUInt8 initialContextSetupResTimer = (YangUInt8)getValue("initial-context-setup-res-timer");
        if (initialContextSetupResTimer == null) {
            initialContextSetupResTimer = new YangUInt8("5");  // default
        }
        return initialContextSetupResTimer;
    }

    /**
     * Sets the value for child leaf "initial-context-setup-res-timer",
     * using instance of generated typedef class.
     * @param initialContextSetupResTimerValue The value to set.
     * @param initialContextSetupResTimerValue used during instantiation.
     */
    public void setInitialContextSetupResTimerValue(YangUInt8 initialContextSetupResTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "initial-context-setup-res-timer",
            initialContextSetupResTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "initial-context-setup-res-timer",
     * using Java primitive values.
     * @param initialContextSetupResTimerValue used during instantiation.
     */
    public void setInitialContextSetupResTimerValue(short initialContextSetupResTimerValue)
            throws JNCException {
        setInitialContextSetupResTimerValue(new YangUInt8(initialContextSetupResTimerValue));
    }

    /**
     * Sets the value for child leaf "initial-context-setup-res-timer",
     * using a String value.
     * @param initialContextSetupResTimerValue used during instantiation.
     */
    public void setInitialContextSetupResTimerValue(String initialContextSetupResTimerValue)
            throws JNCException {
        setInitialContextSetupResTimerValue(new YangUInt8(initialContextSetupResTimerValue));
    }

    /**
     * Unsets the value for child leaf "initial-context-setup-res-timer".
     */
    public void unsetInitialContextSetupResTimerValue() throws JNCException {
        delete("initial-context-setup-res-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "initial-context-setup-res-timer" leaf will not have a value.
     */
    public void addInitialContextSetupResTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "initial-context-setup-res-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "initial-context-setup-res-timer" with operation "replace".
     */
    public void markInitialContextSetupResTimerReplace() throws JNCException {
        markLeafReplace("initialContextSetupResTimer");
    }

    /**
     * Marks the leaf "initial-context-setup-res-timer" with operation "merge".
     */
    public void markInitialContextSetupResTimerMerge() throws JNCException {
        markLeafMerge("initialContextSetupResTimer");
    }

    /**
     * Marks the leaf "initial-context-setup-res-timer" with operation "create".
     */
    public void markInitialContextSetupResTimerCreate() throws JNCException {
        markLeafCreate("initialContextSetupResTimer");
    }

    /**
     * Marks the leaf "initial-context-setup-res-timer" with operation "delete".
     */
    public void markInitialContextSetupResTimerDelete() throws JNCException {
        markLeafDelete("initialContextSetupResTimer");
    }

    /* Access methods for optional leaf child: "erab-setup-response-timer". */

    /**
     * Gets the value for child leaf "erab-setup-response-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getErabSetupResponseTimerValue() throws JNCException {
        YangUInt8 erabSetupResponseTimer = (YangUInt8)getValue("erab-setup-response-timer");
        if (erabSetupResponseTimer == null) {
            erabSetupResponseTimer = new YangUInt8("5");  // default
        }
        return erabSetupResponseTimer;
    }

    /**
     * Sets the value for child leaf "erab-setup-response-timer",
     * using instance of generated typedef class.
     * @param erabSetupResponseTimerValue The value to set.
     * @param erabSetupResponseTimerValue used during instantiation.
     */
    public void setErabSetupResponseTimerValue(YangUInt8 erabSetupResponseTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "erab-setup-response-timer",
            erabSetupResponseTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "erab-setup-response-timer",
     * using Java primitive values.
     * @param erabSetupResponseTimerValue used during instantiation.
     */
    public void setErabSetupResponseTimerValue(short erabSetupResponseTimerValue)
            throws JNCException {
        setErabSetupResponseTimerValue(new YangUInt8(erabSetupResponseTimerValue));
    }

    /**
     * Sets the value for child leaf "erab-setup-response-timer",
     * using a String value.
     * @param erabSetupResponseTimerValue used during instantiation.
     */
    public void setErabSetupResponseTimerValue(String erabSetupResponseTimerValue)
            throws JNCException {
        setErabSetupResponseTimerValue(new YangUInt8(erabSetupResponseTimerValue));
    }

    /**
     * Unsets the value for child leaf "erab-setup-response-timer".
     */
    public void unsetErabSetupResponseTimerValue() throws JNCException {
        delete("erab-setup-response-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "erab-setup-response-timer" leaf will not have a value.
     */
    public void addErabSetupResponseTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "erab-setup-response-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "erab-setup-response-timer" with operation "replace".
     */
    public void markErabSetupResponseTimerReplace() throws JNCException {
        markLeafReplace("erabSetupResponseTimer");
    }

    /**
     * Marks the leaf "erab-setup-response-timer" with operation "merge".
     */
    public void markErabSetupResponseTimerMerge() throws JNCException {
        markLeafMerge("erabSetupResponseTimer");
    }

    /**
     * Marks the leaf "erab-setup-response-timer" with operation "create".
     */
    public void markErabSetupResponseTimerCreate() throws JNCException {
        markLeafCreate("erabSetupResponseTimer");
    }

    /**
     * Marks the leaf "erab-setup-response-timer" with operation "delete".
     */
    public void markErabSetupResponseTimerDelete() throws JNCException {
        markLeafDelete("erabSetupResponseTimer");
    }

    /* Access methods for optional leaf child: "erab-modify-response-timer". */

    /**
     * Gets the value for child leaf "erab-modify-response-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getErabModifyResponseTimerValue() throws JNCException {
        YangUInt8 erabModifyResponseTimer = (YangUInt8)getValue("erab-modify-response-timer");
        if (erabModifyResponseTimer == null) {
            erabModifyResponseTimer = new YangUInt8("5");  // default
        }
        return erabModifyResponseTimer;
    }

    /**
     * Sets the value for child leaf "erab-modify-response-timer",
     * using instance of generated typedef class.
     * @param erabModifyResponseTimerValue The value to set.
     * @param erabModifyResponseTimerValue used during instantiation.
     */
    public void setErabModifyResponseTimerValue(YangUInt8 erabModifyResponseTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "erab-modify-response-timer",
            erabModifyResponseTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "erab-modify-response-timer",
     * using Java primitive values.
     * @param erabModifyResponseTimerValue used during instantiation.
     */
    public void setErabModifyResponseTimerValue(short erabModifyResponseTimerValue)
            throws JNCException {
        setErabModifyResponseTimerValue(new YangUInt8(erabModifyResponseTimerValue));
    }

    /**
     * Sets the value for child leaf "erab-modify-response-timer",
     * using a String value.
     * @param erabModifyResponseTimerValue used during instantiation.
     */
    public void setErabModifyResponseTimerValue(String erabModifyResponseTimerValue)
            throws JNCException {
        setErabModifyResponseTimerValue(new YangUInt8(erabModifyResponseTimerValue));
    }

    /**
     * Unsets the value for child leaf "erab-modify-response-timer".
     */
    public void unsetErabModifyResponseTimerValue() throws JNCException {
        delete("erab-modify-response-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "erab-modify-response-timer" leaf will not have a value.
     */
    public void addErabModifyResponseTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "erab-modify-response-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "erab-modify-response-timer" with operation "replace".
     */
    public void markErabModifyResponseTimerReplace() throws JNCException {
        markLeafReplace("erabModifyResponseTimer");
    }

    /**
     * Marks the leaf "erab-modify-response-timer" with operation "merge".
     */
    public void markErabModifyResponseTimerMerge() throws JNCException {
        markLeafMerge("erabModifyResponseTimer");
    }

    /**
     * Marks the leaf "erab-modify-response-timer" with operation "create".
     */
    public void markErabModifyResponseTimerCreate() throws JNCException {
        markLeafCreate("erabModifyResponseTimer");
    }

    /**
     * Marks the leaf "erab-modify-response-timer" with operation "delete".
     */
    public void markErabModifyResponseTimerDelete() throws JNCException {
        markLeafDelete("erabModifyResponseTimer");
    }

    /* Access methods for optional leaf child: "erab-release-response-timer". */

    /**
     * Gets the value for child leaf "erab-release-response-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getErabReleaseResponseTimerValue() throws JNCException {
        YangUInt8 erabReleaseResponseTimer = (YangUInt8)getValue("erab-release-response-timer");
        if (erabReleaseResponseTimer == null) {
            erabReleaseResponseTimer = new YangUInt8("5");  // default
        }
        return erabReleaseResponseTimer;
    }

    /**
     * Sets the value for child leaf "erab-release-response-timer",
     * using instance of generated typedef class.
     * @param erabReleaseResponseTimerValue The value to set.
     * @param erabReleaseResponseTimerValue used during instantiation.
     */
    public void setErabReleaseResponseTimerValue(YangUInt8 erabReleaseResponseTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "erab-release-response-timer",
            erabReleaseResponseTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "erab-release-response-timer",
     * using Java primitive values.
     * @param erabReleaseResponseTimerValue used during instantiation.
     */
    public void setErabReleaseResponseTimerValue(short erabReleaseResponseTimerValue)
            throws JNCException {
        setErabReleaseResponseTimerValue(new YangUInt8(erabReleaseResponseTimerValue));
    }

    /**
     * Sets the value for child leaf "erab-release-response-timer",
     * using a String value.
     * @param erabReleaseResponseTimerValue used during instantiation.
     */
    public void setErabReleaseResponseTimerValue(String erabReleaseResponseTimerValue)
            throws JNCException {
        setErabReleaseResponseTimerValue(new YangUInt8(erabReleaseResponseTimerValue));
    }

    /**
     * Unsets the value for child leaf "erab-release-response-timer".
     */
    public void unsetErabReleaseResponseTimerValue() throws JNCException {
        delete("erab-release-response-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "erab-release-response-timer" leaf will not have a value.
     */
    public void addErabReleaseResponseTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "erab-release-response-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "erab-release-response-timer" with operation "replace".
     */
    public void markErabReleaseResponseTimerReplace() throws JNCException {
        markLeafReplace("erabReleaseResponseTimer");
    }

    /**
     * Marks the leaf "erab-release-response-timer" with operation "merge".
     */
    public void markErabReleaseResponseTimerMerge() throws JNCException {
        markLeafMerge("erabReleaseResponseTimer");
    }

    /**
     * Marks the leaf "erab-release-response-timer" with operation "create".
     */
    public void markErabReleaseResponseTimerCreate() throws JNCException {
        markLeafCreate("erabReleaseResponseTimer");
    }

    /**
     * Marks the leaf "erab-release-response-timer" with operation "delete".
     */
    public void markErabReleaseResponseTimerDelete() throws JNCException {
        markLeafDelete("erabReleaseResponseTimer");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
