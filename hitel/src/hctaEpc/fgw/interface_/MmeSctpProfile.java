/* 
 * @(#)MmeSctpProfile.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.interface_;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/interface_/mme-sctp-profile"
 * <p>
 * See line 16 in
 * fgwMmeCommonConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeSctpProfile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeSctpProfile object.
     */
    public MmeSctpProfile() {
        super(Epc.NAMESPACE, "mme-sctp-profile");
    }

    /**
     * Constructor for an initialized MmeSctpProfile object,
     * 
     * @param nameValue Key argument of child.
     */
    public MmeSctpProfile(YangString nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-sctp-profile");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized MmeSctpProfile object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public MmeSctpProfile(String nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-sctp-profile");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeSctpProfile clone() {
        MmeSctpProfile copy;
        try {
            copy = new MmeSctpProfile(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeSctpProfile)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeSctpProfile cloneShallow() {
        MmeSctpProfile copy;
        try {
            copy = new MmeSctpProfile(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeSctpProfile)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "rto-initial",
            "rto-min",
            "rto-max",
            "path-max-retrans",
            "association-init-max-transmit",
            "association-max-retrans",
            "no-delay",
            "max-out-stream",
            "max-in-stream",
            "hb-interval",
            "rx-buffer-size",
            "tx-buffer-size",
            "sack-delay",
            "sack-frequency",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "rto-initial". */

    /**
     * Gets the value for child leaf "rto-initial".
     * @return The value of the leaf.
     */
    public YangUInt32 getRtoInitialValue() throws JNCException {
        YangUInt32 rtoInitial = (YangUInt32)getValue("rto-initial");
        if (rtoInitial == null) {
            rtoInitial = new YangUInt32("500");  // default
        }
        return rtoInitial;
    }

    /**
     * Sets the value for child leaf "rto-initial",
     * using instance of generated typedef class.
     * @param rtoInitialValue The value to set.
     * @param rtoInitialValue used during instantiation.
     */
    public void setRtoInitialValue(YangUInt32 rtoInitialValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rto-initial",
            rtoInitialValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rto-initial",
     * using Java primitive values.
     * @param rtoInitialValue used during instantiation.
     */
    public void setRtoInitialValue(long rtoInitialValue) throws JNCException {
        setRtoInitialValue(new YangUInt32(rtoInitialValue));
    }

    /**
     * Sets the value for child leaf "rto-initial",
     * using a String value.
     * @param rtoInitialValue used during instantiation.
     */
    public void setRtoInitialValue(String rtoInitialValue) throws JNCException {
        setRtoInitialValue(new YangUInt32(rtoInitialValue));
    }

    /**
     * Unsets the value for child leaf "rto-initial".
     */
    public void unsetRtoInitialValue() throws JNCException {
        delete("rto-initial");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rto-initial" leaf will not have a value.
     */
    public void addRtoInitial() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rto-initial",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rto-initial" with operation "replace".
     */
    public void markRtoInitialReplace() throws JNCException {
        markLeafReplace("rtoInitial");
    }

    /**
     * Marks the leaf "rto-initial" with operation "merge".
     */
    public void markRtoInitialMerge() throws JNCException {
        markLeafMerge("rtoInitial");
    }

    /**
     * Marks the leaf "rto-initial" with operation "create".
     */
    public void markRtoInitialCreate() throws JNCException {
        markLeafCreate("rtoInitial");
    }

    /**
     * Marks the leaf "rto-initial" with operation "delete".
     */
    public void markRtoInitialDelete() throws JNCException {
        markLeafDelete("rtoInitial");
    }

    /* Access methods for optional leaf child: "rto-min". */

    /**
     * Gets the value for child leaf "rto-min".
     * @return The value of the leaf.
     */
    public YangUInt32 getRtoMinValue() throws JNCException {
        YangUInt32 rtoMin = (YangUInt32)getValue("rto-min");
        if (rtoMin == null) {
            rtoMin = new YangUInt32("250");  // default
        }
        return rtoMin;
    }

    /**
     * Sets the value for child leaf "rto-min",
     * using instance of generated typedef class.
     * @param rtoMinValue The value to set.
     * @param rtoMinValue used during instantiation.
     */
    public void setRtoMinValue(YangUInt32 rtoMinValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rto-min",
            rtoMinValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rto-min",
     * using Java primitive values.
     * @param rtoMinValue used during instantiation.
     */
    public void setRtoMinValue(long rtoMinValue) throws JNCException {
        setRtoMinValue(new YangUInt32(rtoMinValue));
    }

    /**
     * Sets the value for child leaf "rto-min",
     * using a String value.
     * @param rtoMinValue used during instantiation.
     */
    public void setRtoMinValue(String rtoMinValue) throws JNCException {
        setRtoMinValue(new YangUInt32(rtoMinValue));
    }

    /**
     * Unsets the value for child leaf "rto-min".
     */
    public void unsetRtoMinValue() throws JNCException {
        delete("rto-min");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rto-min" leaf will not have a value.
     */
    public void addRtoMin() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rto-min",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rto-min" with operation "replace".
     */
    public void markRtoMinReplace() throws JNCException {
        markLeafReplace("rtoMin");
    }

    /**
     * Marks the leaf "rto-min" with operation "merge".
     */
    public void markRtoMinMerge() throws JNCException {
        markLeafMerge("rtoMin");
    }

    /**
     * Marks the leaf "rto-min" with operation "create".
     */
    public void markRtoMinCreate() throws JNCException {
        markLeafCreate("rtoMin");
    }

    /**
     * Marks the leaf "rto-min" with operation "delete".
     */
    public void markRtoMinDelete() throws JNCException {
        markLeafDelete("rtoMin");
    }

    /* Access methods for optional leaf child: "rto-max". */

    /**
     * Gets the value for child leaf "rto-max".
     * @return The value of the leaf.
     */
    public YangUInt32 getRtoMaxValue() throws JNCException {
        YangUInt32 rtoMax = (YangUInt32)getValue("rto-max");
        if (rtoMax == null) {
            rtoMax = new YangUInt32("2000");  // default
        }
        return rtoMax;
    }

    /**
     * Sets the value for child leaf "rto-max",
     * using instance of generated typedef class.
     * @param rtoMaxValue The value to set.
     * @param rtoMaxValue used during instantiation.
     */
    public void setRtoMaxValue(YangUInt32 rtoMaxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rto-max",
            rtoMaxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rto-max",
     * using Java primitive values.
     * @param rtoMaxValue used during instantiation.
     */
    public void setRtoMaxValue(long rtoMaxValue) throws JNCException {
        setRtoMaxValue(new YangUInt32(rtoMaxValue));
    }

    /**
     * Sets the value for child leaf "rto-max",
     * using a String value.
     * @param rtoMaxValue used during instantiation.
     */
    public void setRtoMaxValue(String rtoMaxValue) throws JNCException {
        setRtoMaxValue(new YangUInt32(rtoMaxValue));
    }

    /**
     * Unsets the value for child leaf "rto-max".
     */
    public void unsetRtoMaxValue() throws JNCException {
        delete("rto-max");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rto-max" leaf will not have a value.
     */
    public void addRtoMax() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rto-max",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rto-max" with operation "replace".
     */
    public void markRtoMaxReplace() throws JNCException {
        markLeafReplace("rtoMax");
    }

    /**
     * Marks the leaf "rto-max" with operation "merge".
     */
    public void markRtoMaxMerge() throws JNCException {
        markLeafMerge("rtoMax");
    }

    /**
     * Marks the leaf "rto-max" with operation "create".
     */
    public void markRtoMaxCreate() throws JNCException {
        markLeafCreate("rtoMax");
    }

    /**
     * Marks the leaf "rto-max" with operation "delete".
     */
    public void markRtoMaxDelete() throws JNCException {
        markLeafDelete("rtoMax");
    }

    /* Access methods for optional leaf child: "path-max-retrans". */

    /**
     * Gets the value for child leaf "path-max-retrans".
     * @return The value of the leaf.
     */
    public YangUInt16 getPathMaxRetransValue() throws JNCException {
        YangUInt16 pathMaxRetrans = (YangUInt16)getValue("path-max-retrans");
        if (pathMaxRetrans == null) {
            pathMaxRetrans = new YangUInt16("5");  // default
        }
        return pathMaxRetrans;
    }

    /**
     * Sets the value for child leaf "path-max-retrans",
     * using instance of generated typedef class.
     * @param pathMaxRetransValue The value to set.
     * @param pathMaxRetransValue used during instantiation.
     */
    public void setPathMaxRetransValue(YangUInt16 pathMaxRetransValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-max-retrans",
            pathMaxRetransValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "path-max-retrans",
     * using Java primitive values.
     * @param pathMaxRetransValue used during instantiation.
     */
    public void setPathMaxRetransValue(int pathMaxRetransValue)
            throws JNCException {
        setPathMaxRetransValue(new YangUInt16(pathMaxRetransValue));
    }

    /**
     * Sets the value for child leaf "path-max-retrans",
     * using a String value.
     * @param pathMaxRetransValue used during instantiation.
     */
    public void setPathMaxRetransValue(String pathMaxRetransValue)
            throws JNCException {
        setPathMaxRetransValue(new YangUInt16(pathMaxRetransValue));
    }

    /**
     * Unsets the value for child leaf "path-max-retrans".
     */
    public void unsetPathMaxRetransValue() throws JNCException {
        delete("path-max-retrans");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "path-max-retrans" leaf will not have a value.
     */
    public void addPathMaxRetrans() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-max-retrans",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "path-max-retrans" with operation "replace".
     */
    public void markPathMaxRetransReplace() throws JNCException {
        markLeafReplace("pathMaxRetrans");
    }

    /**
     * Marks the leaf "path-max-retrans" with operation "merge".
     */
    public void markPathMaxRetransMerge() throws JNCException {
        markLeafMerge("pathMaxRetrans");
    }

    /**
     * Marks the leaf "path-max-retrans" with operation "create".
     */
    public void markPathMaxRetransCreate() throws JNCException {
        markLeafCreate("pathMaxRetrans");
    }

    /**
     * Marks the leaf "path-max-retrans" with operation "delete".
     */
    public void markPathMaxRetransDelete() throws JNCException {
        markLeafDelete("pathMaxRetrans");
    }

    /* Access methods for optional leaf child: "association-init-max-transmit". */

    /**
     * Gets the value for child leaf "association-init-max-transmit".
     * @return The value of the leaf.
     */
    public YangUInt16 getAssociationInitMaxTransmitValue() throws JNCException {
        YangUInt16 associationInitMaxTransmit = (YangUInt16)getValue("association-init-max-transmit");
        if (associationInitMaxTransmit == null) {
            associationInitMaxTransmit = new YangUInt16("3");  // default
        }
        return associationInitMaxTransmit;
    }

    /**
     * Sets the value for child leaf "association-init-max-transmit",
     * using instance of generated typedef class.
     * @param associationInitMaxTransmitValue The value to set.
     * @param associationInitMaxTransmitValue used during instantiation.
     */
    public void setAssociationInitMaxTransmitValue(YangUInt16 associationInitMaxTransmitValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "association-init-max-transmit",
            associationInitMaxTransmitValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "association-init-max-transmit",
     * using Java primitive values.
     * @param associationInitMaxTransmitValue used during instantiation.
     */
    public void setAssociationInitMaxTransmitValue(int associationInitMaxTransmitValue)
            throws JNCException {
        setAssociationInitMaxTransmitValue(new YangUInt16(associationInitMaxTransmitValue));
    }

    /**
     * Sets the value for child leaf "association-init-max-transmit",
     * using a String value.
     * @param associationInitMaxTransmitValue used during instantiation.
     */
    public void setAssociationInitMaxTransmitValue(String associationInitMaxTransmitValue)
            throws JNCException {
        setAssociationInitMaxTransmitValue(new YangUInt16(associationInitMaxTransmitValue));
    }

    /**
     * Unsets the value for child leaf "association-init-max-transmit".
     */
    public void unsetAssociationInitMaxTransmitValue() throws JNCException {
        delete("association-init-max-transmit");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "association-init-max-transmit" leaf will not have a value.
     */
    public void addAssociationInitMaxTransmit() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "association-init-max-transmit",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "association-init-max-transmit" with operation "replace".
     */
    public void markAssociationInitMaxTransmitReplace() throws JNCException {
        markLeafReplace("associationInitMaxTransmit");
    }

    /**
     * Marks the leaf "association-init-max-transmit" with operation "merge".
     */
    public void markAssociationInitMaxTransmitMerge() throws JNCException {
        markLeafMerge("associationInitMaxTransmit");
    }

    /**
     * Marks the leaf "association-init-max-transmit" with operation "create".
     */
    public void markAssociationInitMaxTransmitCreate() throws JNCException {
        markLeafCreate("associationInitMaxTransmit");
    }

    /**
     * Marks the leaf "association-init-max-transmit" with operation "delete".
     */
    public void markAssociationInitMaxTransmitDelete() throws JNCException {
        markLeafDelete("associationInitMaxTransmit");
    }

    /* Access methods for optional leaf child: "association-max-retrans". */

    /**
     * Gets the value for child leaf "association-max-retrans".
     * @return The value of the leaf.
     */
    public YangUInt16 getAssociationMaxRetransValue() throws JNCException {
        YangUInt16 associationMaxRetrans = (YangUInt16)getValue("association-max-retrans");
        if (associationMaxRetrans == null) {
            associationMaxRetrans = new YangUInt16("6");  // default
        }
        return associationMaxRetrans;
    }

    /**
     * Sets the value for child leaf "association-max-retrans",
     * using instance of generated typedef class.
     * @param associationMaxRetransValue The value to set.
     * @param associationMaxRetransValue used during instantiation.
     */
    public void setAssociationMaxRetransValue(YangUInt16 associationMaxRetransValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "association-max-retrans",
            associationMaxRetransValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "association-max-retrans",
     * using Java primitive values.
     * @param associationMaxRetransValue used during instantiation.
     */
    public void setAssociationMaxRetransValue(int associationMaxRetransValue)
            throws JNCException {
        setAssociationMaxRetransValue(new YangUInt16(associationMaxRetransValue));
    }

    /**
     * Sets the value for child leaf "association-max-retrans",
     * using a String value.
     * @param associationMaxRetransValue used during instantiation.
     */
    public void setAssociationMaxRetransValue(String associationMaxRetransValue)
            throws JNCException {
        setAssociationMaxRetransValue(new YangUInt16(associationMaxRetransValue));
    }

    /**
     * Unsets the value for child leaf "association-max-retrans".
     */
    public void unsetAssociationMaxRetransValue() throws JNCException {
        delete("association-max-retrans");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "association-max-retrans" leaf will not have a value.
     */
    public void addAssociationMaxRetrans() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "association-max-retrans",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "association-max-retrans" with operation "replace".
     */
    public void markAssociationMaxRetransReplace() throws JNCException {
        markLeafReplace("associationMaxRetrans");
    }

    /**
     * Marks the leaf "association-max-retrans" with operation "merge".
     */
    public void markAssociationMaxRetransMerge() throws JNCException {
        markLeafMerge("associationMaxRetrans");
    }

    /**
     * Marks the leaf "association-max-retrans" with operation "create".
     */
    public void markAssociationMaxRetransCreate() throws JNCException {
        markLeafCreate("associationMaxRetrans");
    }

    /**
     * Marks the leaf "association-max-retrans" with operation "delete".
     */
    public void markAssociationMaxRetransDelete() throws JNCException {
        markLeafDelete("associationMaxRetrans");
    }

    /* Access methods for optional leaf child: "no-delay". */

    /**
     * Gets the value for child leaf "no-delay".
     * @return The value of the leaf.
     */
    public YangBoolean getNoDelayValue() throws JNCException {
        YangBoolean noDelay = (YangBoolean)getValue("no-delay");
        if (noDelay == null) {
            noDelay = new YangBoolean("true");  // default
        }
        return noDelay;
    }

    /**
     * Sets the value for child leaf "no-delay",
     * using instance of generated typedef class.
     * @param noDelayValue The value to set.
     * @param noDelayValue used during instantiation.
     */
    public void setNoDelayValue(YangBoolean noDelayValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "no-delay",
            noDelayValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "no-delay",
     * using Java primitive values.
     * @param noDelayValue used during instantiation.
     */
    public void setNoDelayValue(Boolean noDelayValue) throws JNCException {
        setNoDelayValue(new YangBoolean(noDelayValue));
    }

    /**
     * Sets the value for child leaf "no-delay",
     * using a String value.
     * @param noDelayValue used during instantiation.
     */
    public void setNoDelayValue(String noDelayValue) throws JNCException {
        setNoDelayValue(new YangBoolean(noDelayValue));
    }

    /**
     * Unsets the value for child leaf "no-delay".
     */
    public void unsetNoDelayValue() throws JNCException {
        delete("no-delay");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "no-delay" leaf will not have a value.
     */
    public void addNoDelay() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "no-delay",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "no-delay" with operation "replace".
     */
    public void markNoDelayReplace() throws JNCException {
        markLeafReplace("noDelay");
    }

    /**
     * Marks the leaf "no-delay" with operation "merge".
     */
    public void markNoDelayMerge() throws JNCException {
        markLeafMerge("noDelay");
    }

    /**
     * Marks the leaf "no-delay" with operation "create".
     */
    public void markNoDelayCreate() throws JNCException {
        markLeafCreate("noDelay");
    }

    /**
     * Marks the leaf "no-delay" with operation "delete".
     */
    public void markNoDelayDelete() throws JNCException {
        markLeafDelete("noDelay");
    }

    /* Access methods for optional leaf child: "max-out-stream". */

    /**
     * Gets the value for child leaf "max-out-stream".
     * @return The value of the leaf.
     */
    public YangUInt16 getMaxOutStreamValue() throws JNCException {
        YangUInt16 maxOutStream = (YangUInt16)getValue("max-out-stream");
        if (maxOutStream == null) {
            maxOutStream = new YangUInt16("11");  // default
        }
        return maxOutStream;
    }

    /**
     * Sets the value for child leaf "max-out-stream",
     * using instance of generated typedef class.
     * @param maxOutStreamValue The value to set.
     * @param maxOutStreamValue used during instantiation.
     */
    public void setMaxOutStreamValue(YangUInt16 maxOutStreamValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-out-stream",
            maxOutStreamValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-out-stream",
     * using Java primitive values.
     * @param maxOutStreamValue used during instantiation.
     */
    public void setMaxOutStreamValue(int maxOutStreamValue) throws JNCException {
        setMaxOutStreamValue(new YangUInt16(maxOutStreamValue));
    }

    /**
     * Sets the value for child leaf "max-out-stream",
     * using a String value.
     * @param maxOutStreamValue used during instantiation.
     */
    public void setMaxOutStreamValue(String maxOutStreamValue)
            throws JNCException {
        setMaxOutStreamValue(new YangUInt16(maxOutStreamValue));
    }

    /**
     * Unsets the value for child leaf "max-out-stream".
     */
    public void unsetMaxOutStreamValue() throws JNCException {
        delete("max-out-stream");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-out-stream" leaf will not have a value.
     */
    public void addMaxOutStream() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-out-stream",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-out-stream" with operation "replace".
     */
    public void markMaxOutStreamReplace() throws JNCException {
        markLeafReplace("maxOutStream");
    }

    /**
     * Marks the leaf "max-out-stream" with operation "merge".
     */
    public void markMaxOutStreamMerge() throws JNCException {
        markLeafMerge("maxOutStream");
    }

    /**
     * Marks the leaf "max-out-stream" with operation "create".
     */
    public void markMaxOutStreamCreate() throws JNCException {
        markLeafCreate("maxOutStream");
    }

    /**
     * Marks the leaf "max-out-stream" with operation "delete".
     */
    public void markMaxOutStreamDelete() throws JNCException {
        markLeafDelete("maxOutStream");
    }

    /* Access methods for optional leaf child: "max-in-stream". */

    /**
     * Gets the value for child leaf "max-in-stream".
     * @return The value of the leaf.
     */
    public YangUInt16 getMaxInStreamValue() throws JNCException {
        YangUInt16 maxInStream = (YangUInt16)getValue("max-in-stream");
        if (maxInStream == null) {
            maxInStream = new YangUInt16("11");  // default
        }
        return maxInStream;
    }

    /**
     * Sets the value for child leaf "max-in-stream",
     * using instance of generated typedef class.
     * @param maxInStreamValue The value to set.
     * @param maxInStreamValue used during instantiation.
     */
    public void setMaxInStreamValue(YangUInt16 maxInStreamValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-in-stream",
            maxInStreamValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-in-stream",
     * using Java primitive values.
     * @param maxInStreamValue used during instantiation.
     */
    public void setMaxInStreamValue(int maxInStreamValue) throws JNCException {
        setMaxInStreamValue(new YangUInt16(maxInStreamValue));
    }

    /**
     * Sets the value for child leaf "max-in-stream",
     * using a String value.
     * @param maxInStreamValue used during instantiation.
     */
    public void setMaxInStreamValue(String maxInStreamValue)
            throws JNCException {
        setMaxInStreamValue(new YangUInt16(maxInStreamValue));
    }

    /**
     * Unsets the value for child leaf "max-in-stream".
     */
    public void unsetMaxInStreamValue() throws JNCException {
        delete("max-in-stream");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-in-stream" leaf will not have a value.
     */
    public void addMaxInStream() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-in-stream",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-in-stream" with operation "replace".
     */
    public void markMaxInStreamReplace() throws JNCException {
        markLeafReplace("maxInStream");
    }

    /**
     * Marks the leaf "max-in-stream" with operation "merge".
     */
    public void markMaxInStreamMerge() throws JNCException {
        markLeafMerge("maxInStream");
    }

    /**
     * Marks the leaf "max-in-stream" with operation "create".
     */
    public void markMaxInStreamCreate() throws JNCException {
        markLeafCreate("maxInStream");
    }

    /**
     * Marks the leaf "max-in-stream" with operation "delete".
     */
    public void markMaxInStreamDelete() throws JNCException {
        markLeafDelete("maxInStream");
    }

    /* Access methods for optional leaf child: "hb-interval". */

    /**
     * Gets the value for child leaf "hb-interval".
     * @return The value of the leaf.
     */
    public YangUInt16 getHbIntervalValue() throws JNCException {
        YangUInt16 hbInterval = (YangUInt16)getValue("hb-interval");
        if (hbInterval == null) {
            hbInterval = new YangUInt16("30");  // default
        }
        return hbInterval;
    }

    /**
     * Sets the value for child leaf "hb-interval",
     * using instance of generated typedef class.
     * @param hbIntervalValue The value to set.
     * @param hbIntervalValue used during instantiation.
     */
    public void setHbIntervalValue(YangUInt16 hbIntervalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "hb-interval",
            hbIntervalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "hb-interval",
     * using Java primitive values.
     * @param hbIntervalValue used during instantiation.
     */
    public void setHbIntervalValue(int hbIntervalValue) throws JNCException {
        setHbIntervalValue(new YangUInt16(hbIntervalValue));
    }

    /**
     * Sets the value for child leaf "hb-interval",
     * using a String value.
     * @param hbIntervalValue used during instantiation.
     */
    public void setHbIntervalValue(String hbIntervalValue) throws JNCException {
        setHbIntervalValue(new YangUInt16(hbIntervalValue));
    }

    /**
     * Unsets the value for child leaf "hb-interval".
     */
    public void unsetHbIntervalValue() throws JNCException {
        delete("hb-interval");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "hb-interval" leaf will not have a value.
     */
    public void addHbInterval() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "hb-interval",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "hb-interval" with operation "replace".
     */
    public void markHbIntervalReplace() throws JNCException {
        markLeafReplace("hbInterval");
    }

    /**
     * Marks the leaf "hb-interval" with operation "merge".
     */
    public void markHbIntervalMerge() throws JNCException {
        markLeafMerge("hbInterval");
    }

    /**
     * Marks the leaf "hb-interval" with operation "create".
     */
    public void markHbIntervalCreate() throws JNCException {
        markLeafCreate("hbInterval");
    }

    /**
     * Marks the leaf "hb-interval" with operation "delete".
     */
    public void markHbIntervalDelete() throws JNCException {
        markLeafDelete("hbInterval");
    }

    /* Access methods for optional leaf child: "rx-buffer-size". */

    /**
     * Gets the value for child leaf "rx-buffer-size".
     * @return The value of the leaf.
     */
    public YangUInt32 getRxBufferSizeValue() throws JNCException {
        YangUInt32 rxBufferSize = (YangUInt32)getValue("rx-buffer-size");
        if (rxBufferSize == null) {
            rxBufferSize = new YangUInt32("149000");  // default
        }
        return rxBufferSize;
    }

    /**
     * Sets the value for child leaf "rx-buffer-size",
     * using instance of generated typedef class.
     * @param rxBufferSizeValue The value to set.
     * @param rxBufferSizeValue used during instantiation.
     */
    public void setRxBufferSizeValue(YangUInt32 rxBufferSizeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rx-buffer-size",
            rxBufferSizeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rx-buffer-size",
     * using Java primitive values.
     * @param rxBufferSizeValue used during instantiation.
     */
    public void setRxBufferSizeValue(long rxBufferSizeValue)
            throws JNCException {
        setRxBufferSizeValue(new YangUInt32(rxBufferSizeValue));
    }

    /**
     * Sets the value for child leaf "rx-buffer-size",
     * using a String value.
     * @param rxBufferSizeValue used during instantiation.
     */
    public void setRxBufferSizeValue(String rxBufferSizeValue)
            throws JNCException {
        setRxBufferSizeValue(new YangUInt32(rxBufferSizeValue));
    }

    /**
     * Unsets the value for child leaf "rx-buffer-size".
     */
    public void unsetRxBufferSizeValue() throws JNCException {
        delete("rx-buffer-size");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rx-buffer-size" leaf will not have a value.
     */
    public void addRxBufferSize() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rx-buffer-size",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rx-buffer-size" with operation "replace".
     */
    public void markRxBufferSizeReplace() throws JNCException {
        markLeafReplace("rxBufferSize");
    }

    /**
     * Marks the leaf "rx-buffer-size" with operation "merge".
     */
    public void markRxBufferSizeMerge() throws JNCException {
        markLeafMerge("rxBufferSize");
    }

    /**
     * Marks the leaf "rx-buffer-size" with operation "create".
     */
    public void markRxBufferSizeCreate() throws JNCException {
        markLeafCreate("rxBufferSize");
    }

    /**
     * Marks the leaf "rx-buffer-size" with operation "delete".
     */
    public void markRxBufferSizeDelete() throws JNCException {
        markLeafDelete("rxBufferSize");
    }

    /* Access methods for optional leaf child: "tx-buffer-size". */

    /**
     * Gets the value for child leaf "tx-buffer-size".
     * @return The value of the leaf.
     */
    public YangUInt32 getTxBufferSizeValue() throws JNCException {
        YangUInt32 txBufferSize = (YangUInt32)getValue("tx-buffer-size");
        if (txBufferSize == null) {
            txBufferSize = new YangUInt32("149000");  // default
        }
        return txBufferSize;
    }

    /**
     * Sets the value for child leaf "tx-buffer-size",
     * using instance of generated typedef class.
     * @param txBufferSizeValue The value to set.
     * @param txBufferSizeValue used during instantiation.
     */
    public void setTxBufferSizeValue(YangUInt32 txBufferSizeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tx-buffer-size",
            txBufferSizeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tx-buffer-size",
     * using Java primitive values.
     * @param txBufferSizeValue used during instantiation.
     */
    public void setTxBufferSizeValue(long txBufferSizeValue)
            throws JNCException {
        setTxBufferSizeValue(new YangUInt32(txBufferSizeValue));
    }

    /**
     * Sets the value for child leaf "tx-buffer-size",
     * using a String value.
     * @param txBufferSizeValue used during instantiation.
     */
    public void setTxBufferSizeValue(String txBufferSizeValue)
            throws JNCException {
        setTxBufferSizeValue(new YangUInt32(txBufferSizeValue));
    }

    /**
     * Unsets the value for child leaf "tx-buffer-size".
     */
    public void unsetTxBufferSizeValue() throws JNCException {
        delete("tx-buffer-size");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tx-buffer-size" leaf will not have a value.
     */
    public void addTxBufferSize() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tx-buffer-size",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tx-buffer-size" with operation "replace".
     */
    public void markTxBufferSizeReplace() throws JNCException {
        markLeafReplace("txBufferSize");
    }

    /**
     * Marks the leaf "tx-buffer-size" with operation "merge".
     */
    public void markTxBufferSizeMerge() throws JNCException {
        markLeafMerge("txBufferSize");
    }

    /**
     * Marks the leaf "tx-buffer-size" with operation "create".
     */
    public void markTxBufferSizeCreate() throws JNCException {
        markLeafCreate("txBufferSize");
    }

    /**
     * Marks the leaf "tx-buffer-size" with operation "delete".
     */
    public void markTxBufferSizeDelete() throws JNCException {
        markLeafDelete("txBufferSize");
    }

    /* Access methods for optional leaf child: "sack-delay". */

    /**
     * Gets the value for child leaf "sack-delay".
     * @return The value of the leaf.
     */
    public YangUInt16 getSackDelayValue() throws JNCException {
        YangUInt16 sackDelay = (YangUInt16)getValue("sack-delay");
        if (sackDelay == null) {
            sackDelay = new YangUInt16("200");  // default
        }
        return sackDelay;
    }

    /**
     * Sets the value for child leaf "sack-delay",
     * using instance of generated typedef class.
     * @param sackDelayValue The value to set.
     * @param sackDelayValue used during instantiation.
     */
    public void setSackDelayValue(YangUInt16 sackDelayValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sack-delay",
            sackDelayValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sack-delay",
     * using Java primitive values.
     * @param sackDelayValue used during instantiation.
     */
    public void setSackDelayValue(int sackDelayValue) throws JNCException {
        setSackDelayValue(new YangUInt16(sackDelayValue));
    }

    /**
     * Sets the value for child leaf "sack-delay",
     * using a String value.
     * @param sackDelayValue used during instantiation.
     */
    public void setSackDelayValue(String sackDelayValue) throws JNCException {
        setSackDelayValue(new YangUInt16(sackDelayValue));
    }

    /**
     * Unsets the value for child leaf "sack-delay".
     */
    public void unsetSackDelayValue() throws JNCException {
        delete("sack-delay");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sack-delay" leaf will not have a value.
     */
    public void addSackDelay() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sack-delay",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sack-delay" with operation "replace".
     */
    public void markSackDelayReplace() throws JNCException {
        markLeafReplace("sackDelay");
    }

    /**
     * Marks the leaf "sack-delay" with operation "merge".
     */
    public void markSackDelayMerge() throws JNCException {
        markLeafMerge("sackDelay");
    }

    /**
     * Marks the leaf "sack-delay" with operation "create".
     */
    public void markSackDelayCreate() throws JNCException {
        markLeafCreate("sackDelay");
    }

    /**
     * Marks the leaf "sack-delay" with operation "delete".
     */
    public void markSackDelayDelete() throws JNCException {
        markLeafDelete("sackDelay");
    }

    /* Access methods for optional leaf child: "sack-frequency". */

    /**
     * Gets the value for child leaf "sack-frequency".
     * @return The value of the leaf.
     */
    public YangUInt16 getSackFrequencyValue() throws JNCException {
        YangUInt16 sackFrequency = (YangUInt16)getValue("sack-frequency");
        if (sackFrequency == null) {
            sackFrequency = new YangUInt16("2");  // default
        }
        return sackFrequency;
    }

    /**
     * Sets the value for child leaf "sack-frequency",
     * using instance of generated typedef class.
     * @param sackFrequencyValue The value to set.
     * @param sackFrequencyValue used during instantiation.
     */
    public void setSackFrequencyValue(YangUInt16 sackFrequencyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sack-frequency",
            sackFrequencyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sack-frequency",
     * using Java primitive values.
     * @param sackFrequencyValue used during instantiation.
     */
    public void setSackFrequencyValue(int sackFrequencyValue)
            throws JNCException {
        setSackFrequencyValue(new YangUInt16(sackFrequencyValue));
    }

    /**
     * Sets the value for child leaf "sack-frequency",
     * using a String value.
     * @param sackFrequencyValue used during instantiation.
     */
    public void setSackFrequencyValue(String sackFrequencyValue)
            throws JNCException {
        setSackFrequencyValue(new YangUInt16(sackFrequencyValue));
    }

    /**
     * Unsets the value for child leaf "sack-frequency".
     */
    public void unsetSackFrequencyValue() throws JNCException {
        delete("sack-frequency");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sack-frequency" leaf will not have a value.
     */
    public void addSackFrequency() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sack-frequency",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sack-frequency" with operation "replace".
     */
    public void markSackFrequencyReplace() throws JNCException {
        markLeafReplace("sackFrequency");
    }

    /**
     * Marks the leaf "sack-frequency" with operation "merge".
     */
    public void markSackFrequencyMerge() throws JNCException {
        markLeafMerge("sackFrequency");
    }

    /**
     * Marks the leaf "sack-frequency" with operation "create".
     */
    public void markSackFrequencyCreate() throws JNCException {
        markLeafCreate("sackFrequency");
    }

    /**
     * Marks the leaf "sack-frequency" with operation "delete".
     */
    public void markSackFrequencyDelete() throws JNCException {
        markLeafDelete("sackFrequency");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
