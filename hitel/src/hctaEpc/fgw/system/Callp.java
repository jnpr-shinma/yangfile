/* 
 * @(#)Callp.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.fgw.system;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import Leaf;

import Unit;

import YangUInt16;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/fgw/system/callp"
 * <p>
 * See line 167 in
 * fgwConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Callp extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Callp object.
     */
    public Callp() {
        super(Epc.NAMESPACE, "callp");
    }

    /**
     * Constructor for an initialized Callp object,
     * 
     * @param serviceIdValue Key argument of child.
     */
    public Callp(YangUInt16 serviceIdValue) throws JNCException {
        super(Epc.NAMESPACE, "callp");
        Leaf serviceId = new Leaf(Epc.NAMESPACE, "service-id");
        serviceId.setValue(serviceIdValue);
        insertChild(serviceId, childrenNames());
    }

    /**
     * Constructor for an initialized Callp object,
     * with String keys.
     * @param serviceIdValue Key argument of child.
     */
    public Callp(String serviceIdValue) throws JNCException {
        super(Epc.NAMESPACE, "callp");
        Leaf serviceId = new Leaf(Epc.NAMESPACE, "service-id");
        serviceId.setValue(new YangUInt16(serviceIdValue));
        insertChild(serviceId, childrenNames());
    }

    /**
     * Constructor for an initialized Callp object,
     * with keys of built in Java types.
     * @param serviceIdValue Key argument of child.
     */
    public Callp(int serviceIdValue) throws JNCException {
        super(Epc.NAMESPACE, "callp");
        Leaf serviceId = new Leaf(Epc.NAMESPACE, "service-id");
        serviceId.setValue(new YangUInt16(serviceIdValue));
        insertChild(serviceId, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Callp clone() {
        Callp copy;
        try {
            copy = new Callp(getServiceIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Callp)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Callp cloneShallow() {
        Callp copy;
        try {
            copy = new Callp(getServiceIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Callp)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "service-id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "service-id",
            "unit",
        };
    }

    /* Access methods for leaf child: "service-id". */

    /**
     * Gets the value for child leaf "service-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getServiceIdValue() throws JNCException {
        return (YangUInt16)getValue("service-id");
    }

    /**
     * Sets the value for child leaf "service-id",
     * using instance of generated typedef class.
     * @param serviceIdValue The value to set.
     * @param serviceIdValue used during instantiation.
     */
    public void setServiceIdValue(YangUInt16 serviceIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service-id",
            serviceIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service-id",
     * using Java primitive values.
     * @param serviceIdValue used during instantiation.
     */
    public void setServiceIdValue(int serviceIdValue) throws JNCException {
        setServiceIdValue(new YangUInt16(serviceIdValue));
    }

    /**
     * Sets the value for child leaf "service-id",
     * using a String value.
     * @param serviceIdValue used during instantiation.
     */
    public void setServiceIdValue(String serviceIdValue) throws JNCException {
        setServiceIdValue(new YangUInt16(serviceIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service-id" leaf will not have a value.
     */
    public void addServiceId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service-id",
            null,
            childrenNames());
    }

    /* Access methods for list child: "unit". */

    /**
     * Gets list entry "unit", with specified keys.
     * @param unitIdValue Key argument of child.
     */
    public Unit getUnit(YangUInt16 unitIdValue) throws JNCException {
        String path = "unit[unitId='" + unitIdValue + "']";
        return (Unit)searchOne(path);
    }

    /**
     * Gets list entry "unit", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     */
    public Unit getUnit(String unitIdValue) throws JNCException {
        String path = "unit[unitId='" + unitIdValue + "']";
        return (Unit)searchOne(path);
    }

    /**
     * Iterator method for the list "unit".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator unitIterator() {
        return new ElementChildrenIterator(children, "unit");
    }

    /**
     * Adds list entry "unit", using an existing object.
     * @param unit The object to add.
     * @return The added child.
     */
    public Unit addUnit(Unit unit) throws JNCException {
        insertChild(unit, childrenNames());
        return unit;
    }

    /**
     * Adds list entry "unit", with specified keys.
     * @param unitIdValue Key argument of child.
     * @return The added child.
     */
    public Unit addUnit(YangUInt16 unitIdValue) throws JNCException {
        Unit unit = new Unit(unitIdValue);
        return addUnit(unit);
    }

    /**
     * Adds list entry "unit", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     * @return The added child.
     */
    public Unit addUnit(String unitIdValue) throws JNCException {
        Unit unit = new Unit(unitIdValue);
        return addUnit(unit);
    }

    /**
     * Adds list entry "unit".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Unit addUnit() throws JNCException {
        Unit unit = new Unit();
        insertChild(unit, childrenNames());
        return unit;
    }

    /**
     * Deletes list entry "unit", with specified keys.
     * @param unitIdValue Key argument of child.
     */
    public void deleteUnit(YangUInt16 unitIdValue) throws JNCException {
        String path = "unit[unitId='" + unitIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "unit", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     */
    public void deleteUnit(String unitIdValue) throws JNCException {
        String path = "unit[unitId='" + unitIdValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
