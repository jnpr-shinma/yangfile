/* 
 * @(#)Engineering.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeBearerOverload;

import MmeCongestionOverload;

import MmeIuCongestionControl;

import MmePagingOverload;

import MmeS1Capacity;

import MmeS1Overload;

import MmeScCapacity;

import MmeScEngineering;

import MmeSdCapacity;

import MmeSdEngineering;

import MmeSubscriberOverload;

import MmeUpmEngineering;

import MmeUpmTpsCongestion;

import NodeSet;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/engineering"
 * <p>
 * See line 485 in
 * mmeSgsnConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Engineering extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-s1-capacity".
     */
    public MmeS1Capacity mmeS1Capacity = null;

    /**
     * Field for child container "mme-paging-overload".
     */
    public MmePagingOverload mmePagingOverload = null;

    /**
     * Field for child container "mme-s1-overload".
     */
    public MmeS1Overload mmeS1Overload = null;

    /**
     * Field for child container "mme-upm-engineering".
     */
    public MmeUpmEngineering mmeUpmEngineering = null;

    /**
     * Field for child container "mme-upm-tps-congestion".
     */
    public MmeUpmTpsCongestion mmeUpmTpsCongestion = null;

    /**
     * Field for child container "mme-sc-engineering".
     */
    public MmeScEngineering mmeScEngineering = null;

    /**
     * Field for child container "mme-congestion-overload".
     */
    public MmeCongestionOverload mmeCongestionOverload = null;

    /**
     * Field for child container "mme-subscriber-overload".
     */
    public MmeSubscriberOverload mmeSubscriberOverload = null;

    /**
     * Field for child container "mme-bearer-overload".
     */
    public MmeBearerOverload mmeBearerOverload = null;

    /**
     * Field for child container "mme-iu-congestion-control".
     */
    public MmeIuCongestionControl mmeIuCongestionControl = null;

    /**
     * Field for child container "mme-sd-engineering".
     */
    public MmeSdEngineering mmeSdEngineering = null;

    /**
     * Field for child container "mme-sd-capacity".
     */
    public MmeSdCapacity mmeSdCapacity = null;

    /**
     * Constructor for an empty Engineering object.
     */
    public Engineering() {
        super(Epc.NAMESPACE, "engineering");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Engineering clone() {
        return (Engineering)cloneContent(new Engineering());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Engineering cloneShallow() {
        return (Engineering)cloneShallowContent(new Engineering());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-s1-capacity",
            "mme-paging-overload",
            "mme-s1-overload",
            "mme-upm-engineering",
            "mme-upm-tps-congestion",
            "mme-sc-engineering",
            "mme-congestion-overload",
            "mme-subscriber-overload",
            "mme-bearer-overload",
            "mme-sc-capacity",
            "mme-iu-congestion-control",
            "mme-sd-engineering",
            "mme-sd-capacity",
        };
    }

    /* Access methods for container child: "mme-s1-capacity". */

    /**
     * Adds container entry "mmeS1Capacity", using an existing object.
     * @param mmeS1Capacity The object to add.
     * @return The added child.
     */
    public MmeS1Capacity addMmeS1Capacity(MmeS1Capacity mmeS1Capacity)
            throws JNCException {
        this.mmeS1Capacity = mmeS1Capacity;
        insertChild(mmeS1Capacity, childrenNames());
        return mmeS1Capacity;
    }

    /**
     * Adds container entry "mmeS1Capacity".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeS1Capacity addMmeS1Capacity() throws JNCException {
        MmeS1Capacity mmeS1Capacity = new MmeS1Capacity();
        this.mmeS1Capacity = mmeS1Capacity;
        insertChild(mmeS1Capacity, childrenNames());
        return mmeS1Capacity;
    }

    /**
     * Deletes container entry "mmeS1Capacity".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeS1Capacity() throws JNCException {
        this.mmeS1Capacity = null;
        String path = "mme-s1-capacity";
        return delete(path);
    }

    /* Access methods for container child: "mme-paging-overload". */

    /**
     * Adds container entry "mmePagingOverload", using an existing object.
     * @param mmePagingOverload The object to add.
     * @return The added child.
     */
    public MmePagingOverload addMmePagingOverload(MmePagingOverload mmePagingOverload)
            throws JNCException {
        this.mmePagingOverload = mmePagingOverload;
        insertChild(mmePagingOverload, childrenNames());
        return mmePagingOverload;
    }

    /**
     * Adds container entry "mmePagingOverload".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmePagingOverload addMmePagingOverload() throws JNCException {
        MmePagingOverload mmePagingOverload = new MmePagingOverload();
        this.mmePagingOverload = mmePagingOverload;
        insertChild(mmePagingOverload, childrenNames());
        return mmePagingOverload;
    }

    /**
     * Deletes container entry "mmePagingOverload".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmePagingOverload() throws JNCException {
        this.mmePagingOverload = null;
        String path = "mme-paging-overload";
        return delete(path);
    }

    /* Access methods for container child: "mme-s1-overload". */

    /**
     * Adds container entry "mmeS1Overload", using an existing object.
     * @param mmeS1Overload The object to add.
     * @return The added child.
     */
    public MmeS1Overload addMmeS1Overload(MmeS1Overload mmeS1Overload)
            throws JNCException {
        this.mmeS1Overload = mmeS1Overload;
        insertChild(mmeS1Overload, childrenNames());
        return mmeS1Overload;
    }

    /**
     * Adds container entry "mmeS1Overload".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeS1Overload addMmeS1Overload() throws JNCException {
        MmeS1Overload mmeS1Overload = new MmeS1Overload();
        this.mmeS1Overload = mmeS1Overload;
        insertChild(mmeS1Overload, childrenNames());
        return mmeS1Overload;
    }

    /**
     * Deletes container entry "mmeS1Overload".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeS1Overload() throws JNCException {
        this.mmeS1Overload = null;
        String path = "mme-s1-overload";
        return delete(path);
    }

    /* Access methods for container child: "mme-upm-engineering". */

    /**
     * Adds container entry "mmeUpmEngineering", using an existing object.
     * @param mmeUpmEngineering The object to add.
     * @return The added child.
     */
    public MmeUpmEngineering addMmeUpmEngineering(MmeUpmEngineering mmeUpmEngineering)
            throws JNCException {
        this.mmeUpmEngineering = mmeUpmEngineering;
        insertChild(mmeUpmEngineering, childrenNames());
        return mmeUpmEngineering;
    }

    /**
     * Adds container entry "mmeUpmEngineering".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeUpmEngineering addMmeUpmEngineering() throws JNCException {
        MmeUpmEngineering mmeUpmEngineering = new MmeUpmEngineering();
        this.mmeUpmEngineering = mmeUpmEngineering;
        insertChild(mmeUpmEngineering, childrenNames());
        return mmeUpmEngineering;
    }

    /**
     * Deletes container entry "mmeUpmEngineering".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeUpmEngineering() throws JNCException {
        this.mmeUpmEngineering = null;
        String path = "mme-upm-engineering";
        return delete(path);
    }

    /* Access methods for container child: "mme-upm-tps-congestion". */

    /**
     * Adds container entry "mmeUpmTpsCongestion", using an existing object.
     * @param mmeUpmTpsCongestion The object to add.
     * @return The added child.
     */
    public MmeUpmTpsCongestion addMmeUpmTpsCongestion(MmeUpmTpsCongestion mmeUpmTpsCongestion)
            throws JNCException {
        this.mmeUpmTpsCongestion = mmeUpmTpsCongestion;
        insertChild(mmeUpmTpsCongestion, childrenNames());
        return mmeUpmTpsCongestion;
    }

    /**
     * Adds container entry "mmeUpmTpsCongestion".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeUpmTpsCongestion addMmeUpmTpsCongestion() throws JNCException {
        MmeUpmTpsCongestion mmeUpmTpsCongestion = new MmeUpmTpsCongestion();
        this.mmeUpmTpsCongestion = mmeUpmTpsCongestion;
        insertChild(mmeUpmTpsCongestion, childrenNames());
        return mmeUpmTpsCongestion;
    }

    /**
     * Deletes container entry "mmeUpmTpsCongestion".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeUpmTpsCongestion() throws JNCException {
        this.mmeUpmTpsCongestion = null;
        String path = "mme-upm-tps-congestion";
        return delete(path);
    }

    /* Access methods for container child: "mme-sc-engineering". */

    /**
     * Adds container entry "mmeScEngineering", using an existing object.
     * @param mmeScEngineering The object to add.
     * @return The added child.
     */
    public MmeScEngineering addMmeScEngineering(MmeScEngineering mmeScEngineering)
            throws JNCException {
        this.mmeScEngineering = mmeScEngineering;
        insertChild(mmeScEngineering, childrenNames());
        return mmeScEngineering;
    }

    /**
     * Adds container entry "mmeScEngineering".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeScEngineering addMmeScEngineering() throws JNCException {
        MmeScEngineering mmeScEngineering = new MmeScEngineering();
        this.mmeScEngineering = mmeScEngineering;
        insertChild(mmeScEngineering, childrenNames());
        return mmeScEngineering;
    }

    /**
     * Deletes container entry "mmeScEngineering".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeScEngineering() throws JNCException {
        this.mmeScEngineering = null;
        String path = "mme-sc-engineering";
        return delete(path);
    }

    /* Access methods for container child: "mme-congestion-overload". */

    /**
     * Adds container entry "mmeCongestionOverload", using an existing object.
     * @param mmeCongestionOverload The object to add.
     * @return The added child.
     */
    public MmeCongestionOverload addMmeCongestionOverload(MmeCongestionOverload mmeCongestionOverload)
            throws JNCException {
        this.mmeCongestionOverload = mmeCongestionOverload;
        insertChild(mmeCongestionOverload, childrenNames());
        return mmeCongestionOverload;
    }

    /**
     * Adds container entry "mmeCongestionOverload".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeCongestionOverload addMmeCongestionOverload() throws JNCException {
        MmeCongestionOverload mmeCongestionOverload = new MmeCongestionOverload();
        this.mmeCongestionOverload = mmeCongestionOverload;
        insertChild(mmeCongestionOverload, childrenNames());
        return mmeCongestionOverload;
    }

    /**
     * Deletes container entry "mmeCongestionOverload".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeCongestionOverload() throws JNCException {
        this.mmeCongestionOverload = null;
        String path = "mme-congestion-overload";
        return delete(path);
    }

    /* Access methods for container child: "mme-subscriber-overload". */

    /**
     * Adds container entry "mmeSubscriberOverload", using an existing object.
     * @param mmeSubscriberOverload The object to add.
     * @return The added child.
     */
    public MmeSubscriberOverload addMmeSubscriberOverload(MmeSubscriberOverload mmeSubscriberOverload)
            throws JNCException {
        this.mmeSubscriberOverload = mmeSubscriberOverload;
        insertChild(mmeSubscriberOverload, childrenNames());
        return mmeSubscriberOverload;
    }

    /**
     * Adds container entry "mmeSubscriberOverload".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSubscriberOverload addMmeSubscriberOverload() throws JNCException {
        MmeSubscriberOverload mmeSubscriberOverload = new MmeSubscriberOverload();
        this.mmeSubscriberOverload = mmeSubscriberOverload;
        insertChild(mmeSubscriberOverload, childrenNames());
        return mmeSubscriberOverload;
    }

    /**
     * Deletes container entry "mmeSubscriberOverload".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeSubscriberOverload() throws JNCException {
        this.mmeSubscriberOverload = null;
        String path = "mme-subscriber-overload";
        return delete(path);
    }

    /* Access methods for container child: "mme-bearer-overload". */

    /**
     * Adds container entry "mmeBearerOverload", using an existing object.
     * @param mmeBearerOverload The object to add.
     * @return The added child.
     */
    public MmeBearerOverload addMmeBearerOverload(MmeBearerOverload mmeBearerOverload)
            throws JNCException {
        this.mmeBearerOverload = mmeBearerOverload;
        insertChild(mmeBearerOverload, childrenNames());
        return mmeBearerOverload;
    }

    /**
     * Adds container entry "mmeBearerOverload".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeBearerOverload addMmeBearerOverload() throws JNCException {
        MmeBearerOverload mmeBearerOverload = new MmeBearerOverload();
        this.mmeBearerOverload = mmeBearerOverload;
        insertChild(mmeBearerOverload, childrenNames());
        return mmeBearerOverload;
    }

    /**
     * Deletes container entry "mmeBearerOverload".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeBearerOverload() throws JNCException {
        this.mmeBearerOverload = null;
        String path = "mme-bearer-overload";
        return delete(path);
    }

    /* Access methods for list child: "mme-sc-capacity". */

    /**
     * Gets list entry "mmeScCapacity", with specified keys.
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeScCapacity getMmeScCapacity(YangUInt16 callpServiceIdValue)
            throws JNCException {
        String path = "mme-sc-capacity[callpServiceId='" + callpServiceIdValue + "']";
        return (MmeScCapacity)searchOne(path);
    }

    /**
     * Gets list entry "mmeScCapacity", with specified keys.
     * The keys are specified as strings.
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeScCapacity getMmeScCapacity(String callpServiceIdValue)
            throws JNCException {
        String path = "mme-sc-capacity[callpServiceId='" + callpServiceIdValue + "']";
        return (MmeScCapacity)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-sc-capacity".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeScCapacityIterator() {
        return new ElementChildrenIterator(children, "mme-sc-capacity");
    }

    /**
     * Adds list entry "mmeScCapacity", using an existing object.
     * @param mmeScCapacity The object to add.
     * @return The added child.
     */
    public MmeScCapacity addMmeScCapacity(MmeScCapacity mmeScCapacity)
            throws JNCException {
        insertChild(mmeScCapacity, childrenNames());
        return mmeScCapacity;
    }

    /**
     * Adds list entry "mmeScCapacity", with specified keys.
     * @param callpServiceIdValue Key argument of child.
     * @return The added child.
     */
    public MmeScCapacity addMmeScCapacity(YangUInt16 callpServiceIdValue)
            throws JNCException {
        MmeScCapacity mmeScCapacity = new MmeScCapacity(callpServiceIdValue);
        return addMmeScCapacity(mmeScCapacity);
    }

    /**
     * Adds list entry "mmeScCapacity", with specified keys.
     * The keys are specified as strings.
     * @param callpServiceIdValue Key argument of child.
     * @return The added child.
     */
    public MmeScCapacity addMmeScCapacity(String callpServiceIdValue)
            throws JNCException {
        MmeScCapacity mmeScCapacity = new MmeScCapacity(callpServiceIdValue);
        return addMmeScCapacity(mmeScCapacity);
    }

    /**
     * Adds list entry "mmeScCapacity".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeScCapacity addMmeScCapacity() throws JNCException {
        MmeScCapacity mmeScCapacity = new MmeScCapacity();
        insertChild(mmeScCapacity, childrenNames());
        return mmeScCapacity;
    }

    /**
     * Deletes list entry "mmeScCapacity", with specified keys.
     * @param callpServiceIdValue Key argument of child.
     */
    public void deleteMmeScCapacity(YangUInt16 callpServiceIdValue)
            throws JNCException {
        String path = "mme-sc-capacity[callpServiceId='" + callpServiceIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeScCapacity", with specified keys.
     * The keys are specified as strings.
     * @param callpServiceIdValue Key argument of child.
     */
    public void deleteMmeScCapacity(String callpServiceIdValue)
            throws JNCException {
        String path = "mme-sc-capacity[callpServiceId='" + callpServiceIdValue + "']";
        delete(path);
    }

    /* Access methods for container child: "mme-iu-congestion-control". */

    /**
     * Adds container entry "mmeIuCongestionControl", using an existing object.
     * @param mmeIuCongestionControl The object to add.
     * @return The added child.
     */
    public MmeIuCongestionControl addMmeIuCongestionControl(MmeIuCongestionControl mmeIuCongestionControl)
            throws JNCException {
        this.mmeIuCongestionControl = mmeIuCongestionControl;
        insertChild(mmeIuCongestionControl, childrenNames());
        return mmeIuCongestionControl;
    }

    /**
     * Adds container entry "mmeIuCongestionControl".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeIuCongestionControl addMmeIuCongestionControl()
            throws JNCException {
        MmeIuCongestionControl mmeIuCongestionControl = new MmeIuCongestionControl();
        this.mmeIuCongestionControl = mmeIuCongestionControl;
        insertChild(mmeIuCongestionControl, childrenNames());
        return mmeIuCongestionControl;
    }

    /**
     * Deletes container entry "mmeIuCongestionControl".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeIuCongestionControl() throws JNCException {
        this.mmeIuCongestionControl = null;
        String path = "mme-iu-congestion-control";
        return delete(path);
    }

    /* Access methods for container child: "mme-sd-engineering". */

    /**
     * Adds container entry "mmeSdEngineering", using an existing object.
     * @param mmeSdEngineering The object to add.
     * @return The added child.
     */
    public MmeSdEngineering addMmeSdEngineering(MmeSdEngineering mmeSdEngineering)
            throws JNCException {
        this.mmeSdEngineering = mmeSdEngineering;
        insertChild(mmeSdEngineering, childrenNames());
        return mmeSdEngineering;
    }

    /**
     * Adds container entry "mmeSdEngineering".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSdEngineering addMmeSdEngineering() throws JNCException {
        MmeSdEngineering mmeSdEngineering = new MmeSdEngineering();
        this.mmeSdEngineering = mmeSdEngineering;
        insertChild(mmeSdEngineering, childrenNames());
        return mmeSdEngineering;
    }

    /**
     * Deletes container entry "mmeSdEngineering".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeSdEngineering() throws JNCException {
        this.mmeSdEngineering = null;
        String path = "mme-sd-engineering";
        return delete(path);
    }

    /* Access methods for container child: "mme-sd-capacity". */

    /**
     * Adds container entry "mmeSdCapacity", using an existing object.
     * @param mmeSdCapacity The object to add.
     * @return The added child.
     */
    public MmeSdCapacity addMmeSdCapacity(MmeSdCapacity mmeSdCapacity)
            throws JNCException {
        this.mmeSdCapacity = mmeSdCapacity;
        insertChild(mmeSdCapacity, childrenNames());
        return mmeSdCapacity;
    }

    /**
     * Adds container entry "mmeSdCapacity".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSdCapacity addMmeSdCapacity() throws JNCException {
        MmeSdCapacity mmeSdCapacity = new MmeSdCapacity();
        this.mmeSdCapacity = mmeSdCapacity;
        insertChild(mmeSdCapacity, childrenNames());
        return mmeSdCapacity;
    }

    /**
     * Deletes container entry "mmeSdCapacity".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeSdCapacity() throws JNCException {
        this.mmeSdCapacity = null;
        String path = "mme-sd-capacity";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeS1Capacity) mmeS1Capacity = (MmeS1Capacity)child;
        else if (child instanceof MmePagingOverload) mmePagingOverload = (MmePagingOverload)child;
        else if (child instanceof MmeS1Overload) mmeS1Overload = (MmeS1Overload)child;
        else if (child instanceof MmeUpmEngineering) mmeUpmEngineering = (MmeUpmEngineering)child;
        else if (child instanceof MmeUpmTpsCongestion) mmeUpmTpsCongestion = (MmeUpmTpsCongestion)child;
        else if (child instanceof MmeScEngineering) mmeScEngineering = (MmeScEngineering)child;
        else if (child instanceof MmeCongestionOverload) mmeCongestionOverload = (MmeCongestionOverload)child;
        else if (child instanceof MmeSubscriberOverload) mmeSubscriberOverload = (MmeSubscriberOverload)child;
        else if (child instanceof MmeBearerOverload) mmeBearerOverload = (MmeBearerOverload)child;
        else if (child instanceof MmeIuCongestionControl) mmeIuCongestionControl = (MmeIuCongestionControl)child;
        else if (child instanceof MmeSdEngineering) mmeSdEngineering = (MmeSdEngineering)child;
        else if (child instanceof MmeSdCapacity) mmeSdCapacity = (MmeSdCapacity)child;
    }

}
