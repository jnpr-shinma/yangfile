/* 
 * @(#)MmeTraceStandards.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.trace;
import .ietfInetTypes.Ipv4Address;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangEnumeration;

import YangString;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/trace/mme-trace-standards"
 * <p>
 * See line 2335 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeTraceStandards extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeTraceStandards object.
     */
    public MmeTraceStandards() {
        super(Epc.NAMESPACE, "mme-trace-standards");
    }

    /**
     * Constructor for an initialized MmeTraceStandards object,
     * 
     * @param targetTypeValue Key argument of child.
     * @param targetValueValue Key argument of child.
     */
    public MmeTraceStandards(YangEnumeration targetTypeValue, YangString targetValueValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-trace-standards");
        Leaf targetType = new Leaf(Epc.NAMESPACE, "target-type");
        targetType.setValue(targetTypeValue);
        insertChild(targetType, childrenNames());
        Leaf targetValue = new Leaf(Epc.NAMESPACE, "target-value");
        targetValue.setValue(targetValueValue);
        insertChild(targetValue, childrenNames());
    }

    /**
     * Constructor for an initialized MmeTraceStandards object,
     * with String keys.
     * @param targetTypeValue Key argument of child.
     * @param targetValueValue Key argument of child.
     */
    public MmeTraceStandards(String targetTypeValue, String targetValueValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-trace-standards");
        Leaf targetType = new Leaf(Epc.NAMESPACE, "target-type");
        targetType.setValue(new YangEnumeration(targetTypeValue, new String [] {"imsi", "imei", "imeisv", }));
        insertChild(targetType, childrenNames());
        Leaf targetValue = new Leaf(Epc.NAMESPACE, "target-value");
        targetValue.setValue(new YangString(targetValueValue));
        insertChild(targetValue, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeTraceStandards clone() {
        MmeTraceStandards copy;
        try {
            copy = new MmeTraceStandards(getTargetTypeValue().toString(), getTargetValueValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeTraceStandards)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeTraceStandards cloneShallow() {
        MmeTraceStandards copy;
        try {
            copy = new MmeTraceStandards(getTargetTypeValue().toString(), getTargetValueValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeTraceStandards)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "target-type",
            "target-value",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "target-type",
            "target-value",
            "session-id",
            "mme-interface-mask",
            "mme-event-mask",
            "enb-interface-mask",
            "sgw-interface-mask",
            "sgw-event-mask",
            "pgw-interface-mask",
            "pgw-event-mask",
            "trace-depth",
            "nms-ip",
        };
    }

    /* Access methods for leaf child: "target-type". */

    /**
     * Gets the value for child leaf "target-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getTargetTypeValue() throws JNCException {
        return (YangEnumeration)getValue("target-type");
    }

    /**
     * Sets the value for child leaf "target-type",
     * using instance of generated typedef class.
     * @param targetTypeValue The value to set.
     * @param targetTypeValue used during instantiation.
     */
    public void setTargetTypeValue(YangEnumeration targetTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "target-type",
            targetTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "target-type",
     * using a String value.
     * @param targetTypeValue used during instantiation.
     */
    public void setTargetTypeValue(String targetTypeValue) throws JNCException {
        setTargetTypeValue(new YangEnumeration(targetTypeValue, new String[] {
             "imsi",
             "imei",
             "imeisv",
        }));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "target-type" leaf will not have a value.
     */
    public void addTargetType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "target-type",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "target-value". */

    /**
     * Gets the value for child leaf "target-value".
     * @return The value of the leaf.
     */
    public YangString getTargetValueValue() throws JNCException {
        return (YangString)getValue("target-value");
    }

    /**
     * Sets the value for child leaf "target-value",
     * using instance of generated typedef class.
     * @param targetValueValue The value to set.
     * @param targetValueValue used during instantiation.
     */
    public void setTargetValueValue(YangString targetValueValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "target-value",
            targetValueValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "target-value",
     * using a String value.
     * @param targetValueValue used during instantiation.
     */
    public void setTargetValueValue(String targetValueValue)
            throws JNCException {
        setTargetValueValue(new YangString(targetValueValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "target-value" leaf will not have a value.
     */
    public void addTargetValue() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "target-value",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "session-id". */

    /**
     * Gets the value for child leaf "session-id".
     * @return The value of the leaf.
     */
    public YangString getSessionIdValue() throws JNCException {
        return (YangString)getValue("session-id");
    }

    /**
     * Sets the value for child leaf "session-id",
     * using instance of generated typedef class.
     * @param sessionIdValue The value to set.
     * @param sessionIdValue used during instantiation.
     */
    public void setSessionIdValue(YangString sessionIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-id",
            sessionIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "session-id",
     * using a String value.
     * @param sessionIdValue used during instantiation.
     */
    public void setSessionIdValue(String sessionIdValue) throws JNCException {
        setSessionIdValue(new YangString(sessionIdValue));
    }

    /**
     * Unsets the value for child leaf "session-id".
     */
    public void unsetSessionIdValue() throws JNCException {
        delete("session-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "session-id" leaf will not have a value.
     */
    public void addSessionId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "session-id" with operation "replace".
     */
    public void markSessionIdReplace() throws JNCException {
        markLeafReplace("sessionId");
    }

    /**
     * Marks the leaf "session-id" with operation "merge".
     */
    public void markSessionIdMerge() throws JNCException {
        markLeafMerge("sessionId");
    }

    /**
     * Marks the leaf "session-id" with operation "create".
     */
    public void markSessionIdCreate() throws JNCException {
        markLeafCreate("sessionId");
    }

    /**
     * Marks the leaf "session-id" with operation "delete".
     */
    public void markSessionIdDelete() throws JNCException {
        markLeafDelete("sessionId");
    }

    /* Access methods for optional leaf child: "mme-interface-mask". */

    /**
     * Gets the value for child leaf "mme-interface-mask".
     * @return The value of the leaf.
     */
    public YangString getMmeInterfaceMaskValue() throws JNCException {
        YangString mmeInterfaceMask = (YangString)getValue("mme-interface-mask");
        if (mmeInterfaceMask == null) {
            mmeInterfaceMask = new YangString("s11,s10,s6a,s1,s13,s3");  // default
        }
        return mmeInterfaceMask;
    }

    /**
     * Sets the value for child leaf "mme-interface-mask",
     * using instance of generated typedef class.
     * @param mmeInterfaceMaskValue The value to set.
     * @param mmeInterfaceMaskValue used during instantiation.
     */
    public void setMmeInterfaceMaskValue(YangString mmeInterfaceMaskValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-interface-mask",
            mmeInterfaceMaskValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mme-interface-mask",
     * using a String value.
     * @param mmeInterfaceMaskValue used during instantiation.
     */
    public void setMmeInterfaceMaskValue(String mmeInterfaceMaskValue)
            throws JNCException {
        setMmeInterfaceMaskValue(new YangString(mmeInterfaceMaskValue));
    }

    /**
     * Unsets the value for child leaf "mme-interface-mask".
     */
    public void unsetMmeInterfaceMaskValue() throws JNCException {
        delete("mme-interface-mask");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mme-interface-mask" leaf will not have a value.
     */
    public void addMmeInterfaceMask() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-interface-mask",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mme-interface-mask" with operation "replace".
     */
    public void markMmeInterfaceMaskReplace() throws JNCException {
        markLeafReplace("mmeInterfaceMask");
    }

    /**
     * Marks the leaf "mme-interface-mask" with operation "merge".
     */
    public void markMmeInterfaceMaskMerge() throws JNCException {
        markLeafMerge("mmeInterfaceMask");
    }

    /**
     * Marks the leaf "mme-interface-mask" with operation "create".
     */
    public void markMmeInterfaceMaskCreate() throws JNCException {
        markLeafCreate("mmeInterfaceMask");
    }

    /**
     * Marks the leaf "mme-interface-mask" with operation "delete".
     */
    public void markMmeInterfaceMaskDelete() throws JNCException {
        markLeafDelete("mmeInterfaceMask");
    }

    /* Access methods for optional leaf child: "mme-event-mask". */

    /**
     * Gets the value for child leaf "mme-event-mask".
     * @return The value of the leaf.
     */
    public YangString getMmeEventMaskValue() throws JNCException {
        YangString mmeEventMask = (YangString)getValue("mme-event-mask");
        if (mmeEventMask == null) {
            mmeEventMask = new YangString("handover,bearer-act-mod-del,ue-pdn-disconn,att-tau-det,svc-req,ue-pdn-conn");  // default
        }
        return mmeEventMask;
    }

    /**
     * Sets the value for child leaf "mme-event-mask",
     * using instance of generated typedef class.
     * @param mmeEventMaskValue The value to set.
     * @param mmeEventMaskValue used during instantiation.
     */
    public void setMmeEventMaskValue(YangString mmeEventMaskValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-event-mask",
            mmeEventMaskValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mme-event-mask",
     * using a String value.
     * @param mmeEventMaskValue used during instantiation.
     */
    public void setMmeEventMaskValue(String mmeEventMaskValue)
            throws JNCException {
        setMmeEventMaskValue(new YangString(mmeEventMaskValue));
    }

    /**
     * Unsets the value for child leaf "mme-event-mask".
     */
    public void unsetMmeEventMaskValue() throws JNCException {
        delete("mme-event-mask");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mme-event-mask" leaf will not have a value.
     */
    public void addMmeEventMask() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-event-mask",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mme-event-mask" with operation "replace".
     */
    public void markMmeEventMaskReplace() throws JNCException {
        markLeafReplace("mmeEventMask");
    }

    /**
     * Marks the leaf "mme-event-mask" with operation "merge".
     */
    public void markMmeEventMaskMerge() throws JNCException {
        markLeafMerge("mmeEventMask");
    }

    /**
     * Marks the leaf "mme-event-mask" with operation "create".
     */
    public void markMmeEventMaskCreate() throws JNCException {
        markLeafCreate("mmeEventMask");
    }

    /**
     * Marks the leaf "mme-event-mask" with operation "delete".
     */
    public void markMmeEventMaskDelete() throws JNCException {
        markLeafDelete("mmeEventMask");
    }

    /* Access methods for optional leaf child: "enb-interface-mask". */

    /**
     * Gets the value for child leaf "enb-interface-mask".
     * @return The value of the leaf.
     */
    public YangString getEnbInterfaceMaskValue() throws JNCException {
        YangString enbInterfaceMask = (YangString)getValue("enb-interface-mask");
        if (enbInterfaceMask == null) {
            enbInterfaceMask = new YangString("off");  // default
        }
        return enbInterfaceMask;
    }

    /**
     * Sets the value for child leaf "enb-interface-mask",
     * using instance of generated typedef class.
     * @param enbInterfaceMaskValue The value to set.
     * @param enbInterfaceMaskValue used during instantiation.
     */
    public void setEnbInterfaceMaskValue(YangString enbInterfaceMaskValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enb-interface-mask",
            enbInterfaceMaskValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enb-interface-mask",
     * using a String value.
     * @param enbInterfaceMaskValue used during instantiation.
     */
    public void setEnbInterfaceMaskValue(String enbInterfaceMaskValue)
            throws JNCException {
        setEnbInterfaceMaskValue(new YangString(enbInterfaceMaskValue));
    }

    /**
     * Unsets the value for child leaf "enb-interface-mask".
     */
    public void unsetEnbInterfaceMaskValue() throws JNCException {
        delete("enb-interface-mask");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enb-interface-mask" leaf will not have a value.
     */
    public void addEnbInterfaceMask() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enb-interface-mask",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enb-interface-mask" with operation "replace".
     */
    public void markEnbInterfaceMaskReplace() throws JNCException {
        markLeafReplace("enbInterfaceMask");
    }

    /**
     * Marks the leaf "enb-interface-mask" with operation "merge".
     */
    public void markEnbInterfaceMaskMerge() throws JNCException {
        markLeafMerge("enbInterfaceMask");
    }

    /**
     * Marks the leaf "enb-interface-mask" with operation "create".
     */
    public void markEnbInterfaceMaskCreate() throws JNCException {
        markLeafCreate("enbInterfaceMask");
    }

    /**
     * Marks the leaf "enb-interface-mask" with operation "delete".
     */
    public void markEnbInterfaceMaskDelete() throws JNCException {
        markLeafDelete("enbInterfaceMask");
    }

    /* Access methods for optional leaf child: "sgw-interface-mask". */

    /**
     * Gets the value for child leaf "sgw-interface-mask".
     * @return The value of the leaf.
     */
    public YangString getSgwInterfaceMaskValue() throws JNCException {
        YangString sgwInterfaceMask = (YangString)getValue("sgw-interface-mask");
        if (sgwInterfaceMask == null) {
            sgwInterfaceMask = new YangString("off");  // default
        }
        return sgwInterfaceMask;
    }

    /**
     * Sets the value for child leaf "sgw-interface-mask",
     * using instance of generated typedef class.
     * @param sgwInterfaceMaskValue The value to set.
     * @param sgwInterfaceMaskValue used during instantiation.
     */
    public void setSgwInterfaceMaskValue(YangString sgwInterfaceMaskValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgw-interface-mask",
            sgwInterfaceMaskValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sgw-interface-mask",
     * using a String value.
     * @param sgwInterfaceMaskValue used during instantiation.
     */
    public void setSgwInterfaceMaskValue(String sgwInterfaceMaskValue)
            throws JNCException {
        setSgwInterfaceMaskValue(new YangString(sgwInterfaceMaskValue));
    }

    /**
     * Unsets the value for child leaf "sgw-interface-mask".
     */
    public void unsetSgwInterfaceMaskValue() throws JNCException {
        delete("sgw-interface-mask");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sgw-interface-mask" leaf will not have a value.
     */
    public void addSgwInterfaceMask() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgw-interface-mask",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sgw-interface-mask" with operation "replace".
     */
    public void markSgwInterfaceMaskReplace() throws JNCException {
        markLeafReplace("sgwInterfaceMask");
    }

    /**
     * Marks the leaf "sgw-interface-mask" with operation "merge".
     */
    public void markSgwInterfaceMaskMerge() throws JNCException {
        markLeafMerge("sgwInterfaceMask");
    }

    /**
     * Marks the leaf "sgw-interface-mask" with operation "create".
     */
    public void markSgwInterfaceMaskCreate() throws JNCException {
        markLeafCreate("sgwInterfaceMask");
    }

    /**
     * Marks the leaf "sgw-interface-mask" with operation "delete".
     */
    public void markSgwInterfaceMaskDelete() throws JNCException {
        markLeafDelete("sgwInterfaceMask");
    }

    /* Access methods for optional leaf child: "sgw-event-mask". */

    /**
     * Gets the value for child leaf "sgw-event-mask".
     * @return The value of the leaf.
     */
    public YangString getSgwEventMaskValue() throws JNCException {
        YangString sgwEventMask = (YangString)getValue("sgw-event-mask");
        if (sgwEventMask == null) {
            sgwEventMask = new YangString("none");  // default
        }
        return sgwEventMask;
    }

    /**
     * Sets the value for child leaf "sgw-event-mask",
     * using instance of generated typedef class.
     * @param sgwEventMaskValue The value to set.
     * @param sgwEventMaskValue used during instantiation.
     */
    public void setSgwEventMaskValue(YangString sgwEventMaskValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgw-event-mask",
            sgwEventMaskValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sgw-event-mask",
     * using a String value.
     * @param sgwEventMaskValue used during instantiation.
     */
    public void setSgwEventMaskValue(String sgwEventMaskValue)
            throws JNCException {
        setSgwEventMaskValue(new YangString(sgwEventMaskValue));
    }

    /**
     * Unsets the value for child leaf "sgw-event-mask".
     */
    public void unsetSgwEventMaskValue() throws JNCException {
        delete("sgw-event-mask");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sgw-event-mask" leaf will not have a value.
     */
    public void addSgwEventMask() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgw-event-mask",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sgw-event-mask" with operation "replace".
     */
    public void markSgwEventMaskReplace() throws JNCException {
        markLeafReplace("sgwEventMask");
    }

    /**
     * Marks the leaf "sgw-event-mask" with operation "merge".
     */
    public void markSgwEventMaskMerge() throws JNCException {
        markLeafMerge("sgwEventMask");
    }

    /**
     * Marks the leaf "sgw-event-mask" with operation "create".
     */
    public void markSgwEventMaskCreate() throws JNCException {
        markLeafCreate("sgwEventMask");
    }

    /**
     * Marks the leaf "sgw-event-mask" with operation "delete".
     */
    public void markSgwEventMaskDelete() throws JNCException {
        markLeafDelete("sgwEventMask");
    }

    /* Access methods for optional leaf child: "pgw-interface-mask". */

    /**
     * Gets the value for child leaf "pgw-interface-mask".
     * @return The value of the leaf.
     */
    public YangString getPgwInterfaceMaskValue() throws JNCException {
        YangString pgwInterfaceMask = (YangString)getValue("pgw-interface-mask");
        if (pgwInterfaceMask == null) {
            pgwInterfaceMask = new YangString("off");  // default
        }
        return pgwInterfaceMask;
    }

    /**
     * Sets the value for child leaf "pgw-interface-mask",
     * using instance of generated typedef class.
     * @param pgwInterfaceMaskValue The value to set.
     * @param pgwInterfaceMaskValue used during instantiation.
     */
    public void setPgwInterfaceMaskValue(YangString pgwInterfaceMaskValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-interface-mask",
            pgwInterfaceMaskValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pgw-interface-mask",
     * using a String value.
     * @param pgwInterfaceMaskValue used during instantiation.
     */
    public void setPgwInterfaceMaskValue(String pgwInterfaceMaskValue)
            throws JNCException {
        setPgwInterfaceMaskValue(new YangString(pgwInterfaceMaskValue));
    }

    /**
     * Unsets the value for child leaf "pgw-interface-mask".
     */
    public void unsetPgwInterfaceMaskValue() throws JNCException {
        delete("pgw-interface-mask");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pgw-interface-mask" leaf will not have a value.
     */
    public void addPgwInterfaceMask() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-interface-mask",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pgw-interface-mask" with operation "replace".
     */
    public void markPgwInterfaceMaskReplace() throws JNCException {
        markLeafReplace("pgwInterfaceMask");
    }

    /**
     * Marks the leaf "pgw-interface-mask" with operation "merge".
     */
    public void markPgwInterfaceMaskMerge() throws JNCException {
        markLeafMerge("pgwInterfaceMask");
    }

    /**
     * Marks the leaf "pgw-interface-mask" with operation "create".
     */
    public void markPgwInterfaceMaskCreate() throws JNCException {
        markLeafCreate("pgwInterfaceMask");
    }

    /**
     * Marks the leaf "pgw-interface-mask" with operation "delete".
     */
    public void markPgwInterfaceMaskDelete() throws JNCException {
        markLeafDelete("pgwInterfaceMask");
    }

    /* Access methods for optional leaf child: "pgw-event-mask". */

    /**
     * Gets the value for child leaf "pgw-event-mask".
     * @return The value of the leaf.
     */
    public YangString getPgwEventMaskValue() throws JNCException {
        YangString pgwEventMask = (YangString)getValue("pgw-event-mask");
        if (pgwEventMask == null) {
            pgwEventMask = new YangString("none");  // default
        }
        return pgwEventMask;
    }

    /**
     * Sets the value for child leaf "pgw-event-mask",
     * using instance of generated typedef class.
     * @param pgwEventMaskValue The value to set.
     * @param pgwEventMaskValue used during instantiation.
     */
    public void setPgwEventMaskValue(YangString pgwEventMaskValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-event-mask",
            pgwEventMaskValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pgw-event-mask",
     * using a String value.
     * @param pgwEventMaskValue used during instantiation.
     */
    public void setPgwEventMaskValue(String pgwEventMaskValue)
            throws JNCException {
        setPgwEventMaskValue(new YangString(pgwEventMaskValue));
    }

    /**
     * Unsets the value for child leaf "pgw-event-mask".
     */
    public void unsetPgwEventMaskValue() throws JNCException {
        delete("pgw-event-mask");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pgw-event-mask" leaf will not have a value.
     */
    public void addPgwEventMask() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-event-mask",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pgw-event-mask" with operation "replace".
     */
    public void markPgwEventMaskReplace() throws JNCException {
        markLeafReplace("pgwEventMask");
    }

    /**
     * Marks the leaf "pgw-event-mask" with operation "merge".
     */
    public void markPgwEventMaskMerge() throws JNCException {
        markLeafMerge("pgwEventMask");
    }

    /**
     * Marks the leaf "pgw-event-mask" with operation "create".
     */
    public void markPgwEventMaskCreate() throws JNCException {
        markLeafCreate("pgwEventMask");
    }

    /**
     * Marks the leaf "pgw-event-mask" with operation "delete".
     */
    public void markPgwEventMaskDelete() throws JNCException {
        markLeafDelete("pgwEventMask");
    }

    /* Access methods for optional leaf child: "trace-depth". */

    /**
     * Gets the value for child leaf "trace-depth".
     * @return The value of the leaf.
     */
    public YangEnumeration getTraceDepthValue() throws JNCException {
        YangEnumeration traceDepth = (YangEnumeration)getValue("trace-depth");
        if (traceDepth == null) {
            traceDepth = new YangEnumeration("med", new String[] {  // default
                "min",
                "med",
                "max",
                "minnovs",
                "mednovs",
                "maxnovs",
            });
        }
        return traceDepth;
    }

    /**
     * Sets the value for child leaf "trace-depth",
     * using instance of generated typedef class.
     * @param traceDepthValue The value to set.
     * @param traceDepthValue used during instantiation.
     */
    public void setTraceDepthValue(YangEnumeration traceDepthValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "trace-depth",
            traceDepthValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "trace-depth",
     * using a String value.
     * @param traceDepthValue used during instantiation.
     */
    public void setTraceDepthValue(String traceDepthValue) throws JNCException {
        setTraceDepthValue(new YangEnumeration(traceDepthValue, new String[] {
             "min",
             "med",
             "max",
             "minnovs",
             "mednovs",
             "maxnovs",
        }));
    }

    /**
     * Unsets the value for child leaf "trace-depth".
     */
    public void unsetTraceDepthValue() throws JNCException {
        delete("trace-depth");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "trace-depth" leaf will not have a value.
     */
    public void addTraceDepth() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "trace-depth",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "trace-depth" with operation "replace".
     */
    public void markTraceDepthReplace() throws JNCException {
        markLeafReplace("traceDepth");
    }

    /**
     * Marks the leaf "trace-depth" with operation "merge".
     */
    public void markTraceDepthMerge() throws JNCException {
        markLeafMerge("traceDepth");
    }

    /**
     * Marks the leaf "trace-depth" with operation "create".
     */
    public void markTraceDepthCreate() throws JNCException {
        markLeafCreate("traceDepth");
    }

    /**
     * Marks the leaf "trace-depth" with operation "delete".
     */
    public void markTraceDepthDelete() throws JNCException {
        markLeafDelete("traceDepth");
    }

    /* Access methods for optional leaf child: "nms-ip". */

    /**
     * Gets the value for child leaf "nms-ip".
     * @return The value of the leaf.
     */
    public Ipv4Address getNmsIpValue() throws JNCException {
        Ipv4Address nmsIp = (Ipv4Address)getValue("nms-ip");
        if (nmsIp == null) {
            nmsIp = new Ipv4Address("0.0.0.0");  // default
        }
        return nmsIp;
    }

    /**
     * Sets the value for child leaf "nms-ip",
     * using a JNC type value.
     * @param nmsIpValue The value to set.
     * @param nmsIpValue used during instantiation.
     */
    public void setNmsIpValue(Ipv4Address nmsIpValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nms-ip",
            nmsIpValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nms-ip",
     * using a String value.
     * @param nmsIpValue used during instantiation.
     */
    public void setNmsIpValue(String nmsIpValue) throws JNCException {
        setNmsIpValue(new Ipv4Address(nmsIpValue));
    }

    /**
     * Unsets the value for child leaf "nms-ip".
     */
    public void unsetNmsIpValue() throws JNCException {
        delete("nms-ip");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nms-ip" leaf will not have a value.
     */
    public void addNmsIp() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nms-ip",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nms-ip" with operation "replace".
     */
    public void markNmsIpReplace() throws JNCException {
        markLeafReplace("nmsIp");
    }

    /**
     * Marks the leaf "nms-ip" with operation "merge".
     */
    public void markNmsIpMerge() throws JNCException {
        markLeafMerge("nmsIp");
    }

    /**
     * Marks the leaf "nms-ip" with operation "create".
     */
    public void markNmsIpCreate() throws JNCException {
        markLeafCreate("nmsIp");
    }

    /**
     * Marks the leaf "nms-ip" with operation "delete".
     */
    public void markNmsIpDelete() throws JNCException {
        markLeafDelete("nmsIp");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
