/* 
 * @(#)Subscriber.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn;

import ApnProfile;

import Bearer;

import CamelContext;

import CamelSubscription;

import CsgSubscriptionData;

import DirectTunnelApnScreening;

import Element;

import ElementChildrenIterator;

import Epc;

import GsContext;

import Info;

import JNCException;

import List;

import LlcContext;

import LlcPfc;

import MmeAmfShutdown;

import MmeApnSelectionProfile;

import MmeBearerLimitsProfile;

import MmeEquivalentPlmn;

import MmeForbiddenApnList;

import MmeImsiRange;

import MmeLoadControlProfile;

import MmeLocalEpsQosEntry;

import MmeLocalQosProfile;

import MmeLocationReport;

import MmeLongMnc;

import MmeMvnoApnList;

import MmeNodalQos;

import MmePlmnLoadControl;

import MmeQosConversion;

import MmeSubscriberClass;

import MmeSubscriberPlmn;

import MmeVoiceDomainProfile;

import MobileContext;

import NegotiatedQos;

import NodeSet;

import Offload;

import OffloadOper;

import PreferredApnList;

import RequestedQos;

import Session;

import SndcpSession;

import SubscribedQos;

import SubscriberInfoOper;

import SubscriberListOper;

import Subscription;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber"
 * <p>
 * See line 481 in
 * mmeSgsnConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Subscriber extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "preferred-apn-list".
     */
    public PreferredApnList preferredApnList = null;

    /**
     * Field for child container "direct-tunnel-apn-screening".
     */
    public DirectTunnelApnScreening directTunnelApnScreening = null;

    /**
     * Field for child container "mme-nodal-qos".
     */
    public MmeNodalQos mmeNodalQos = null;

    /**
     * Field for child container "mme-amf-shutdown".
     */
    public MmeAmfShutdown mmeAmfShutdown = null;

    /**
     * Field for child container "mme-load-control-profile".
     */
    public MmeLoadControlProfile mmeLoadControlProfile = null;

    /**
     * Field for child container "list".
     */
    public List list = null;

    /**
     * Field for child container "offload".
     */
    public Offload offload = null;

    /**
     * Field for child container "mobile-context".
     */
    public MobileContext mobileContext = null;

    /**
     * Field for child container "session".
     */
    public Session session = null;

    /**
     * Field for child container "requested-qos".
     */
    public RequestedQos requestedQos = null;

    /**
     * Field for child container "negotiated-qos".
     */
    public NegotiatedQos negotiatedQos = null;

    /**
     * Field for child container "subscribed-qos".
     */
    public SubscribedQos subscribedQos = null;

    /**
     * Field for child container "bearer".
     */
    public Bearer bearer = null;

    /**
     * Field for child container "subscription".
     */
    public Subscription subscription = null;

    /**
     * Field for child container "apn-profile".
     */
    public ApnProfile apnProfile = null;

    /**
     * Field for child container "info".
     */
    public Info info = null;

    /**
     * Constructor for an empty Subscriber object.
     */
    public Subscriber() {
        super(Epc.NAMESPACE, "subscriber");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Subscriber clone() {
        return (Subscriber)cloneContent(new Subscriber());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Subscriber cloneShallow() {
        return (Subscriber)cloneShallowContent(new Subscriber());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "preferred-apn-list",
            "direct-tunnel-apn-screening",
            "mme-equivalent-plmn",
            "mme-nodal-qos",
            "mme-forbidden-apn-list",
            "mme-subscriber-plmn",
            "mme-subscriber-class",
            "mme-imsi-range",
            "mme-qos-conversion",
            "mme-amf-shutdown",
            "mme-load-control-profile",
            "mme-plmn-load-control",
            "mme-long-mnc",
            "mme-bearer-limits-profile",
            "mme-local-eps-qos-entry",
            "mme-location-report",
            "mme-voice-domain-profile",
            "mme-mvno-apn-list",
            "mme-apn-selection-profile",
            "list",
            "offload",
            "subscriber-list-oper",
            "mobile-context",
            "session",
            "requested-qos",
            "negotiated-qos",
            "subscribed-qos",
            "bearer",
            "subscription",
            "apn-profile",
            "gs-context",
            "csg-subscription-data",
            "offload-oper",
            "info",
            "subscriber-info-oper",
            "mme-local-qos-profile",
            "camel-subscription",
            "camel-context",
            "llc-context",
            "llc-pfc",
            "sndcp-session",
        };
    }

    /* Access methods for container child: "preferred-apn-list". */

    /**
     * Adds container entry "preferredApnList", using an existing object.
     * @param preferredApnList The object to add.
     * @return The added child.
     */
    public PreferredApnList addPreferredApnList(PreferredApnList preferredApnList)
            throws JNCException {
        this.preferredApnList = preferredApnList;
        insertChild(preferredApnList, childrenNames());
        return preferredApnList;
    }

    /**
     * Adds container entry "preferredApnList".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public PreferredApnList addPreferredApnList() throws JNCException {
        PreferredApnList preferredApnList = new PreferredApnList();
        this.preferredApnList = preferredApnList;
        insertChild(preferredApnList, childrenNames());
        return preferredApnList;
    }

    /**
     * Deletes container entry "preferredApnList".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deletePreferredApnList() throws JNCException {
        this.preferredApnList = null;
        String path = "preferred-apn-list";
        return delete(path);
    }

    /* Access methods for container child: "direct-tunnel-apn-screening". */

    /**
     * Adds container entry "directTunnelApnScreening", using an existing object.
     * @param directTunnelApnScreening The object to add.
     * @return The added child.
     */
    public DirectTunnelApnScreening addDirectTunnelApnScreening(DirectTunnelApnScreening directTunnelApnScreening)
            throws JNCException {
        this.directTunnelApnScreening = directTunnelApnScreening;
        insertChild(directTunnelApnScreening, childrenNames());
        return directTunnelApnScreening;
    }

    /**
     * Adds container entry "directTunnelApnScreening".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public DirectTunnelApnScreening addDirectTunnelApnScreening()
            throws JNCException {
        DirectTunnelApnScreening directTunnelApnScreening = new DirectTunnelApnScreening();
        this.directTunnelApnScreening = directTunnelApnScreening;
        insertChild(directTunnelApnScreening, childrenNames());
        return directTunnelApnScreening;
    }

    /**
     * Deletes container entry "directTunnelApnScreening".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteDirectTunnelApnScreening() throws JNCException {
        this.directTunnelApnScreening = null;
        String path = "direct-tunnel-apn-screening";
        return delete(path);
    }

    /* Access methods for list child: "mme-equivalent-plmn". */

    /**
     * Gets list entry "mmeEquivalentPlmn", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeEquivalentPlmn getMmeEquivalentPlmn(YangString nameValue)
            throws JNCException {
        String path = "mme-equivalent-plmn[name='" + nameValue + "']";
        return (MmeEquivalentPlmn)searchOne(path);
    }

    /**
     * Gets list entry "mmeEquivalentPlmn", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeEquivalentPlmn getMmeEquivalentPlmn(String nameValue)
            throws JNCException {
        String path = "mme-equivalent-plmn[name='" + nameValue + "']";
        return (MmeEquivalentPlmn)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-equivalent-plmn".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeEquivalentPlmnIterator() {
        return new ElementChildrenIterator(children, "mme-equivalent-plmn");
    }

    /**
     * Adds list entry "mmeEquivalentPlmn", using an existing object.
     * @param mmeEquivalentPlmn The object to add.
     * @return The added child.
     */
    public MmeEquivalentPlmn addMmeEquivalentPlmn(MmeEquivalentPlmn mmeEquivalentPlmn)
            throws JNCException {
        insertChild(mmeEquivalentPlmn, childrenNames());
        return mmeEquivalentPlmn;
    }

    /**
     * Adds list entry "mmeEquivalentPlmn", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeEquivalentPlmn addMmeEquivalentPlmn(YangString nameValue)
            throws JNCException {
        MmeEquivalentPlmn mmeEquivalentPlmn = new MmeEquivalentPlmn(nameValue);
        return addMmeEquivalentPlmn(mmeEquivalentPlmn);
    }

    /**
     * Adds list entry "mmeEquivalentPlmn", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeEquivalentPlmn addMmeEquivalentPlmn(String nameValue)
            throws JNCException {
        MmeEquivalentPlmn mmeEquivalentPlmn = new MmeEquivalentPlmn(nameValue);
        return addMmeEquivalentPlmn(mmeEquivalentPlmn);
    }

    /**
     * Adds list entry "mmeEquivalentPlmn".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeEquivalentPlmn addMmeEquivalentPlmn() throws JNCException {
        MmeEquivalentPlmn mmeEquivalentPlmn = new MmeEquivalentPlmn();
        insertChild(mmeEquivalentPlmn, childrenNames());
        return mmeEquivalentPlmn;
    }

    /**
     * Deletes list entry "mmeEquivalentPlmn", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeEquivalentPlmn(YangString nameValue)
            throws JNCException {
        String path = "mme-equivalent-plmn[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeEquivalentPlmn", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeEquivalentPlmn(String nameValue) throws JNCException {
        String path = "mme-equivalent-plmn[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for container child: "mme-nodal-qos". */

    /**
     * Adds container entry "mmeNodalQos", using an existing object.
     * @param mmeNodalQos The object to add.
     * @return The added child.
     */
    public MmeNodalQos addMmeNodalQos(MmeNodalQos mmeNodalQos)
            throws JNCException {
        this.mmeNodalQos = mmeNodalQos;
        insertChild(mmeNodalQos, childrenNames());
        return mmeNodalQos;
    }

    /**
     * Adds container entry "mmeNodalQos".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeNodalQos addMmeNodalQos() throws JNCException {
        MmeNodalQos mmeNodalQos = new MmeNodalQos();
        this.mmeNodalQos = mmeNodalQos;
        insertChild(mmeNodalQos, childrenNames());
        return mmeNodalQos;
    }

    /**
     * Deletes container entry "mmeNodalQos".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeNodalQos() throws JNCException {
        this.mmeNodalQos = null;
        String path = "mme-nodal-qos";
        return delete(path);
    }

    /* Access methods for list child: "mme-forbidden-apn-list". */

    /**
     * Gets list entry "mmeForbiddenApnList", with specified keys.
     * @param apnValue Key argument of child.
     */
    public MmeForbiddenApnList getMmeForbiddenApnList(YangString apnValue)
            throws JNCException {
        String path = "mme-forbidden-apn-list[apn='" + apnValue + "']";
        return (MmeForbiddenApnList)searchOne(path);
    }

    /**
     * Gets list entry "mmeForbiddenApnList", with specified keys.
     * The keys are specified as strings.
     * @param apnValue Key argument of child.
     */
    public MmeForbiddenApnList getMmeForbiddenApnList(String apnValue)
            throws JNCException {
        String path = "mme-forbidden-apn-list[apn='" + apnValue + "']";
        return (MmeForbiddenApnList)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-forbidden-apn-list".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeForbiddenApnListIterator() {
        return new ElementChildrenIterator(children, "mme-forbidden-apn-list");
    }

    /**
     * Adds list entry "mmeForbiddenApnList", using an existing object.
     * @param mmeForbiddenApnList The object to add.
     * @return The added child.
     */
    public MmeForbiddenApnList addMmeForbiddenApnList(MmeForbiddenApnList mmeForbiddenApnList)
            throws JNCException {
        insertChild(mmeForbiddenApnList, childrenNames());
        return mmeForbiddenApnList;
    }

    /**
     * Adds list entry "mmeForbiddenApnList", with specified keys.
     * @param apnValue Key argument of child.
     * @return The added child.
     */
    public MmeForbiddenApnList addMmeForbiddenApnList(YangString apnValue)
            throws JNCException {
        MmeForbiddenApnList mmeForbiddenApnList = new MmeForbiddenApnList(apnValue);
        return addMmeForbiddenApnList(mmeForbiddenApnList);
    }

    /**
     * Adds list entry "mmeForbiddenApnList", with specified keys.
     * The keys are specified as strings.
     * @param apnValue Key argument of child.
     * @return The added child.
     */
    public MmeForbiddenApnList addMmeForbiddenApnList(String apnValue)
            throws JNCException {
        MmeForbiddenApnList mmeForbiddenApnList = new MmeForbiddenApnList(apnValue);
        return addMmeForbiddenApnList(mmeForbiddenApnList);
    }

    /**
     * Adds list entry "mmeForbiddenApnList".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeForbiddenApnList addMmeForbiddenApnList() throws JNCException {
        MmeForbiddenApnList mmeForbiddenApnList = new MmeForbiddenApnList();
        insertChild(mmeForbiddenApnList, childrenNames());
        return mmeForbiddenApnList;
    }

    /**
     * Deletes list entry "mmeForbiddenApnList", with specified keys.
     * @param apnValue Key argument of child.
     */
    public void deleteMmeForbiddenApnList(YangString apnValue)
            throws JNCException {
        String path = "mme-forbidden-apn-list[apn='" + apnValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeForbiddenApnList", with specified keys.
     * The keys are specified as strings.
     * @param apnValue Key argument of child.
     */
    public void deleteMmeForbiddenApnList(String apnValue) throws JNCException {
        String path = "mme-forbidden-apn-list[apn='" + apnValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-subscriber-plmn". */

    /**
     * Gets list entry "mmeSubscriberPlmn", with specified keys.
     * @param plmnValue Key argument of child.
     */
    public MmeSubscriberPlmn getMmeSubscriberPlmn(YangString plmnValue)
            throws JNCException {
        String path = "mme-subscriber-plmn[plmn='" + plmnValue + "']";
        return (MmeSubscriberPlmn)searchOne(path);
    }

    /**
     * Gets list entry "mmeSubscriberPlmn", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     */
    public MmeSubscriberPlmn getMmeSubscriberPlmn(String plmnValue)
            throws JNCException {
        String path = "mme-subscriber-plmn[plmn='" + plmnValue + "']";
        return (MmeSubscriberPlmn)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-subscriber-plmn".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeSubscriberPlmnIterator() {
        return new ElementChildrenIterator(children, "mme-subscriber-plmn");
    }

    /**
     * Adds list entry "mmeSubscriberPlmn", using an existing object.
     * @param mmeSubscriberPlmn The object to add.
     * @return The added child.
     */
    public MmeSubscriberPlmn addMmeSubscriberPlmn(MmeSubscriberPlmn mmeSubscriberPlmn)
            throws JNCException {
        insertChild(mmeSubscriberPlmn, childrenNames());
        return mmeSubscriberPlmn;
    }

    /**
     * Adds list entry "mmeSubscriberPlmn", with specified keys.
     * @param plmnValue Key argument of child.
     * @return The added child.
     */
    public MmeSubscriberPlmn addMmeSubscriberPlmn(YangString plmnValue)
            throws JNCException {
        MmeSubscriberPlmn mmeSubscriberPlmn = new MmeSubscriberPlmn(plmnValue);
        return addMmeSubscriberPlmn(mmeSubscriberPlmn);
    }

    /**
     * Adds list entry "mmeSubscriberPlmn", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     * @return The added child.
     */
    public MmeSubscriberPlmn addMmeSubscriberPlmn(String plmnValue)
            throws JNCException {
        MmeSubscriberPlmn mmeSubscriberPlmn = new MmeSubscriberPlmn(plmnValue);
        return addMmeSubscriberPlmn(mmeSubscriberPlmn);
    }

    /**
     * Adds list entry "mmeSubscriberPlmn".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSubscriberPlmn addMmeSubscriberPlmn() throws JNCException {
        MmeSubscriberPlmn mmeSubscriberPlmn = new MmeSubscriberPlmn();
        insertChild(mmeSubscriberPlmn, childrenNames());
        return mmeSubscriberPlmn;
    }

    /**
     * Deletes list entry "mmeSubscriberPlmn", with specified keys.
     * @param plmnValue Key argument of child.
     */
    public void deleteMmeSubscriberPlmn(YangString plmnValue)
            throws JNCException {
        String path = "mme-subscriber-plmn[plmn='" + plmnValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeSubscriberPlmn", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     */
    public void deleteMmeSubscriberPlmn(String plmnValue) throws JNCException {
        String path = "mme-subscriber-plmn[plmn='" + plmnValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-subscriber-class". */

    /**
     * Gets list entry "mmeSubscriberClass", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeSubscriberClass getMmeSubscriberClass(YangString nameValue)
            throws JNCException {
        String path = "mme-subscriber-class[name='" + nameValue + "']";
        return (MmeSubscriberClass)searchOne(path);
    }

    /**
     * Gets list entry "mmeSubscriberClass", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeSubscriberClass getMmeSubscriberClass(String nameValue)
            throws JNCException {
        String path = "mme-subscriber-class[name='" + nameValue + "']";
        return (MmeSubscriberClass)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-subscriber-class".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeSubscriberClassIterator() {
        return new ElementChildrenIterator(children, "mme-subscriber-class");
    }

    /**
     * Adds list entry "mmeSubscriberClass", using an existing object.
     * @param mmeSubscriberClass The object to add.
     * @return The added child.
     */
    public MmeSubscriberClass addMmeSubscriberClass(MmeSubscriberClass mmeSubscriberClass)
            throws JNCException {
        insertChild(mmeSubscriberClass, childrenNames());
        return mmeSubscriberClass;
    }

    /**
     * Adds list entry "mmeSubscriberClass", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeSubscriberClass addMmeSubscriberClass(YangString nameValue)
            throws JNCException {
        MmeSubscriberClass mmeSubscriberClass = new MmeSubscriberClass(nameValue);
        return addMmeSubscriberClass(mmeSubscriberClass);
    }

    /**
     * Adds list entry "mmeSubscriberClass", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeSubscriberClass addMmeSubscriberClass(String nameValue)
            throws JNCException {
        MmeSubscriberClass mmeSubscriberClass = new MmeSubscriberClass(nameValue);
        return addMmeSubscriberClass(mmeSubscriberClass);
    }

    /**
     * Adds list entry "mmeSubscriberClass".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSubscriberClass addMmeSubscriberClass() throws JNCException {
        MmeSubscriberClass mmeSubscriberClass = new MmeSubscriberClass();
        insertChild(mmeSubscriberClass, childrenNames());
        return mmeSubscriberClass;
    }

    /**
     * Deletes list entry "mmeSubscriberClass", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeSubscriberClass(YangString nameValue)
            throws JNCException {
        String path = "mme-subscriber-class[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeSubscriberClass", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeSubscriberClass(String nameValue) throws JNCException {
        String path = "mme-subscriber-class[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-imsi-range". */

    /**
     * Gets list entry "mmeImsiRange", with specified keys.
     * @param rangeValue Key argument of child.
     * @param serviceAreaFieldValue Key argument of child.
     */
    public MmeImsiRange getMmeImsiRange(YangString rangeValue, YangString serviceAreaFieldValue)
            throws JNCException {
        String path = "mme-imsi-range[range='" + rangeValue + "'][serviceAreaField='" + serviceAreaFieldValue + "']";
        return (MmeImsiRange)searchOne(path);
    }

    /**
     * Gets list entry "mmeImsiRange", with specified keys.
     * The keys are specified as strings.
     * @param rangeValue Key argument of child.
     * @param serviceAreaFieldValue Key argument of child.
     */
    public MmeImsiRange getMmeImsiRange(String rangeValue, String serviceAreaFieldValue)
            throws JNCException {
        String path = "mme-imsi-range[range='" + rangeValue + "'][serviceAreaField='" + serviceAreaFieldValue + "']";
        return (MmeImsiRange)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-imsi-range".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeImsiRangeIterator() {
        return new ElementChildrenIterator(children, "mme-imsi-range");
    }

    /**
     * Adds list entry "mmeImsiRange", using an existing object.
     * @param mmeImsiRange The object to add.
     * @return The added child.
     */
    public MmeImsiRange addMmeImsiRange(MmeImsiRange mmeImsiRange)
            throws JNCException {
        insertChild(mmeImsiRange, childrenNames());
        return mmeImsiRange;
    }

    /**
     * Adds list entry "mmeImsiRange", with specified keys.
     * @param rangeValue Key argument of child.
     * @param serviceAreaFieldValue Key argument of child.
     * @return The added child.
     */
    public MmeImsiRange addMmeImsiRange(YangString rangeValue, YangString serviceAreaFieldValue)
            throws JNCException {
        MmeImsiRange mmeImsiRange = new MmeImsiRange(rangeValue, serviceAreaFieldValue);
        return addMmeImsiRange(mmeImsiRange);
    }

    /**
     * Adds list entry "mmeImsiRange", with specified keys.
     * The keys are specified as strings.
     * @param rangeValue Key argument of child.
     * @param serviceAreaFieldValue Key argument of child.
     * @return The added child.
     */
    public MmeImsiRange addMmeImsiRange(String rangeValue, String serviceAreaFieldValue)
            throws JNCException {
        MmeImsiRange mmeImsiRange = new MmeImsiRange(rangeValue, serviceAreaFieldValue);
        return addMmeImsiRange(mmeImsiRange);
    }

    /**
     * Adds list entry "mmeImsiRange".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeImsiRange addMmeImsiRange() throws JNCException {
        MmeImsiRange mmeImsiRange = new MmeImsiRange();
        insertChild(mmeImsiRange, childrenNames());
        return mmeImsiRange;
    }

    /**
     * Deletes list entry "mmeImsiRange", with specified keys.
     * @param rangeValue Key argument of child.
     * @param serviceAreaFieldValue Key argument of child.
     */
    public void deleteMmeImsiRange(YangString rangeValue, YangString serviceAreaFieldValue)
            throws JNCException {
        String path = "mme-imsi-range[range='" + rangeValue + "'][serviceAreaField='" + serviceAreaFieldValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeImsiRange", with specified keys.
     * The keys are specified as strings.
     * @param rangeValue Key argument of child.
     * @param serviceAreaFieldValue Key argument of child.
     */
    public void deleteMmeImsiRange(String rangeValue, String serviceAreaFieldValue)
            throws JNCException {
        String path = "mme-imsi-range[range='" + rangeValue + "'][serviceAreaField='" + serviceAreaFieldValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-qos-conversion". */

    /**
     * Gets list entry "mmeQosConversion", with specified keys.
     * @param trafficClassValue Key argument of child.
     */
    public MmeQosConversion getMmeQosConversion(YangEnumeration trafficClassValue)
            throws JNCException {
        String path = "mme-qos-conversion[trafficClass='" + trafficClassValue + "']";
        return (MmeQosConversion)searchOne(path);
    }

    /**
     * Gets list entry "mmeQosConversion", with specified keys.
     * The keys are specified as strings.
     * @param trafficClassValue Key argument of child.
     */
    public MmeQosConversion getMmeQosConversion(String trafficClassValue)
            throws JNCException {
        String path = "mme-qos-conversion[trafficClass='" + trafficClassValue + "']";
        return (MmeQosConversion)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-qos-conversion".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeQosConversionIterator() {
        return new ElementChildrenIterator(children, "mme-qos-conversion");
    }

    /**
     * Adds list entry "mmeQosConversion", using an existing object.
     * @param mmeQosConversion The object to add.
     * @return The added child.
     */
    public MmeQosConversion addMmeQosConversion(MmeQosConversion mmeQosConversion)
            throws JNCException {
        insertChild(mmeQosConversion, childrenNames());
        return mmeQosConversion;
    }

    /**
     * Adds list entry "mmeQosConversion", with specified keys.
     * @param trafficClassValue Key argument of child.
     * @return The added child.
     */
    public MmeQosConversion addMmeQosConversion(YangEnumeration trafficClassValue)
            throws JNCException {
        MmeQosConversion mmeQosConversion = new MmeQosConversion(trafficClassValue);
        return addMmeQosConversion(mmeQosConversion);
    }

    /**
     * Adds list entry "mmeQosConversion", with specified keys.
     * The keys are specified as strings.
     * @param trafficClassValue Key argument of child.
     * @return The added child.
     */
    public MmeQosConversion addMmeQosConversion(String trafficClassValue)
            throws JNCException {
        MmeQosConversion mmeQosConversion = new MmeQosConversion(trafficClassValue);
        return addMmeQosConversion(mmeQosConversion);
    }

    /**
     * Adds list entry "mmeQosConversion".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeQosConversion addMmeQosConversion() throws JNCException {
        MmeQosConversion mmeQosConversion = new MmeQosConversion();
        insertChild(mmeQosConversion, childrenNames());
        return mmeQosConversion;
    }

    /**
     * Deletes list entry "mmeQosConversion", with specified keys.
     * @param trafficClassValue Key argument of child.
     */
    public void deleteMmeQosConversion(YangEnumeration trafficClassValue)
            throws JNCException {
        String path = "mme-qos-conversion[trafficClass='" + trafficClassValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeQosConversion", with specified keys.
     * The keys are specified as strings.
     * @param trafficClassValue Key argument of child.
     */
    public void deleteMmeQosConversion(String trafficClassValue)
            throws JNCException {
        String path = "mme-qos-conversion[trafficClass='" + trafficClassValue + "']";
        delete(path);
    }

    /* Access methods for container child: "mme-amf-shutdown". */

    /**
     * Adds container entry "mmeAmfShutdown", using an existing object.
     * @param mmeAmfShutdown The object to add.
     * @return The added child.
     */
    public MmeAmfShutdown addMmeAmfShutdown(MmeAmfShutdown mmeAmfShutdown)
            throws JNCException {
        this.mmeAmfShutdown = mmeAmfShutdown;
        insertChild(mmeAmfShutdown, childrenNames());
        return mmeAmfShutdown;
    }

    /**
     * Adds container entry "mmeAmfShutdown".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeAmfShutdown addMmeAmfShutdown() throws JNCException {
        MmeAmfShutdown mmeAmfShutdown = new MmeAmfShutdown();
        this.mmeAmfShutdown = mmeAmfShutdown;
        insertChild(mmeAmfShutdown, childrenNames());
        return mmeAmfShutdown;
    }

    /**
     * Deletes container entry "mmeAmfShutdown".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeAmfShutdown() throws JNCException {
        this.mmeAmfShutdown = null;
        String path = "mme-amf-shutdown";
        return delete(path);
    }

    /* Access methods for container child: "mme-load-control-profile". */

    /**
     * Adds container entry "mmeLoadControlProfile", using an existing object.
     * @param mmeLoadControlProfile The object to add.
     * @return The added child.
     */
    public MmeLoadControlProfile addMmeLoadControlProfile(MmeLoadControlProfile mmeLoadControlProfile)
            throws JNCException {
        this.mmeLoadControlProfile = mmeLoadControlProfile;
        insertChild(mmeLoadControlProfile, childrenNames());
        return mmeLoadControlProfile;
    }

    /**
     * Adds container entry "mmeLoadControlProfile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeLoadControlProfile addMmeLoadControlProfile() throws JNCException {
        MmeLoadControlProfile mmeLoadControlProfile = new MmeLoadControlProfile();
        this.mmeLoadControlProfile = mmeLoadControlProfile;
        insertChild(mmeLoadControlProfile, childrenNames());
        return mmeLoadControlProfile;
    }

    /**
     * Deletes container entry "mmeLoadControlProfile".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeLoadControlProfile() throws JNCException {
        this.mmeLoadControlProfile = null;
        String path = "mme-load-control-profile";
        return delete(path);
    }

    /* Access methods for list child: "mme-plmn-load-control". */

    /**
     * Gets list entry "mmePlmnLoadControl", with specified keys.
     * @param plmnValue Key argument of child.
     */
    public MmePlmnLoadControl getMmePlmnLoadControl(YangString plmnValue)
            throws JNCException {
        String path = "mme-plmn-load-control[plmn='" + plmnValue + "']";
        return (MmePlmnLoadControl)searchOne(path);
    }

    /**
     * Gets list entry "mmePlmnLoadControl", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     */
    public MmePlmnLoadControl getMmePlmnLoadControl(String plmnValue)
            throws JNCException {
        String path = "mme-plmn-load-control[plmn='" + plmnValue + "']";
        return (MmePlmnLoadControl)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-plmn-load-control".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmePlmnLoadControlIterator() {
        return new ElementChildrenIterator(children, "mme-plmn-load-control");
    }

    /**
     * Adds list entry "mmePlmnLoadControl", using an existing object.
     * @param mmePlmnLoadControl The object to add.
     * @return The added child.
     */
    public MmePlmnLoadControl addMmePlmnLoadControl(MmePlmnLoadControl mmePlmnLoadControl)
            throws JNCException {
        insertChild(mmePlmnLoadControl, childrenNames());
        return mmePlmnLoadControl;
    }

    /**
     * Adds list entry "mmePlmnLoadControl", with specified keys.
     * @param plmnValue Key argument of child.
     * @return The added child.
     */
    public MmePlmnLoadControl addMmePlmnLoadControl(YangString plmnValue)
            throws JNCException {
        MmePlmnLoadControl mmePlmnLoadControl = new MmePlmnLoadControl(plmnValue);
        return addMmePlmnLoadControl(mmePlmnLoadControl);
    }

    /**
     * Adds list entry "mmePlmnLoadControl", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     * @return The added child.
     */
    public MmePlmnLoadControl addMmePlmnLoadControl(String plmnValue)
            throws JNCException {
        MmePlmnLoadControl mmePlmnLoadControl = new MmePlmnLoadControl(plmnValue);
        return addMmePlmnLoadControl(mmePlmnLoadControl);
    }

    /**
     * Adds list entry "mmePlmnLoadControl".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmePlmnLoadControl addMmePlmnLoadControl() throws JNCException {
        MmePlmnLoadControl mmePlmnLoadControl = new MmePlmnLoadControl();
        insertChild(mmePlmnLoadControl, childrenNames());
        return mmePlmnLoadControl;
    }

    /**
     * Deletes list entry "mmePlmnLoadControl", with specified keys.
     * @param plmnValue Key argument of child.
     */
    public void deleteMmePlmnLoadControl(YangString plmnValue)
            throws JNCException {
        String path = "mme-plmn-load-control[plmn='" + plmnValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmePlmnLoadControl", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     */
    public void deleteMmePlmnLoadControl(String plmnValue) throws JNCException {
        String path = "mme-plmn-load-control[plmn='" + plmnValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-long-mnc". */

    /**
     * Gets list entry "mmeLongMnc", with specified keys.
     * @param mccValue Key argument of child.
     */
    public MmeLongMnc getMmeLongMnc(YangString mccValue) throws JNCException {
        String path = "mme-long-mnc[mcc='" + mccValue + "']";
        return (MmeLongMnc)searchOne(path);
    }

    /**
     * Gets list entry "mmeLongMnc", with specified keys.
     * The keys are specified as strings.
     * @param mccValue Key argument of child.
     */
    public MmeLongMnc getMmeLongMnc(String mccValue) throws JNCException {
        String path = "mme-long-mnc[mcc='" + mccValue + "']";
        return (MmeLongMnc)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-long-mnc".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeLongMncIterator() {
        return new ElementChildrenIterator(children, "mme-long-mnc");
    }

    /**
     * Adds list entry "mmeLongMnc", using an existing object.
     * @param mmeLongMnc The object to add.
     * @return The added child.
     */
    public MmeLongMnc addMmeLongMnc(MmeLongMnc mmeLongMnc) throws JNCException {
        insertChild(mmeLongMnc, childrenNames());
        return mmeLongMnc;
    }

    /**
     * Adds list entry "mmeLongMnc", with specified keys.
     * @param mccValue Key argument of child.
     * @return The added child.
     */
    public MmeLongMnc addMmeLongMnc(YangString mccValue) throws JNCException {
        MmeLongMnc mmeLongMnc = new MmeLongMnc(mccValue);
        return addMmeLongMnc(mmeLongMnc);
    }

    /**
     * Adds list entry "mmeLongMnc", with specified keys.
     * The keys are specified as strings.
     * @param mccValue Key argument of child.
     * @return The added child.
     */
    public MmeLongMnc addMmeLongMnc(String mccValue) throws JNCException {
        MmeLongMnc mmeLongMnc = new MmeLongMnc(mccValue);
        return addMmeLongMnc(mmeLongMnc);
    }

    /**
     * Adds list entry "mmeLongMnc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeLongMnc addMmeLongMnc() throws JNCException {
        MmeLongMnc mmeLongMnc = new MmeLongMnc();
        insertChild(mmeLongMnc, childrenNames());
        return mmeLongMnc;
    }

    /**
     * Deletes list entry "mmeLongMnc", with specified keys.
     * @param mccValue Key argument of child.
     */
    public void deleteMmeLongMnc(YangString mccValue) throws JNCException {
        String path = "mme-long-mnc[mcc='" + mccValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeLongMnc", with specified keys.
     * The keys are specified as strings.
     * @param mccValue Key argument of child.
     */
    public void deleteMmeLongMnc(String mccValue) throws JNCException {
        String path = "mme-long-mnc[mcc='" + mccValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-bearer-limits-profile". */

    /**
     * Gets list entry "mmeBearerLimitsProfile", with specified keys.
     * @param nameValue Key argument of child.
     * @param qosClassIdentifierValue Key argument of child.
     */
    public MmeBearerLimitsProfile getMmeBearerLimitsProfile(YangString nameValue, YangEnumeration qosClassIdentifierValue)
            throws JNCException {
        String path = "mme-bearer-limits-profile[name='" + nameValue + "'][qosClassIdentifier='" + qosClassIdentifierValue + "']";
        return (MmeBearerLimitsProfile)searchOne(path);
    }

    /**
     * Gets list entry "mmeBearerLimitsProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @param qosClassIdentifierValue Key argument of child.
     */
    public MmeBearerLimitsProfile getMmeBearerLimitsProfile(String nameValue, String qosClassIdentifierValue)
            throws JNCException {
        String path = "mme-bearer-limits-profile[name='" + nameValue + "'][qosClassIdentifier='" + qosClassIdentifierValue + "']";
        return (MmeBearerLimitsProfile)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-bearer-limits-profile".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeBearerLimitsProfileIterator() {
        return new ElementChildrenIterator(children, "mme-bearer-limits-profile");
    }

    /**
     * Adds list entry "mmeBearerLimitsProfile", using an existing object.
     * @param mmeBearerLimitsProfile The object to add.
     * @return The added child.
     */
    public MmeBearerLimitsProfile addMmeBearerLimitsProfile(MmeBearerLimitsProfile mmeBearerLimitsProfile)
            throws JNCException {
        insertChild(mmeBearerLimitsProfile, childrenNames());
        return mmeBearerLimitsProfile;
    }

    /**
     * Adds list entry "mmeBearerLimitsProfile", with specified keys.
     * @param nameValue Key argument of child.
     * @param qosClassIdentifierValue Key argument of child.
     * @return The added child.
     */
    public MmeBearerLimitsProfile addMmeBearerLimitsProfile(YangString nameValue, YangEnumeration qosClassIdentifierValue)
            throws JNCException {
        MmeBearerLimitsProfile mmeBearerLimitsProfile = new MmeBearerLimitsProfile(nameValue, qosClassIdentifierValue);
        return addMmeBearerLimitsProfile(mmeBearerLimitsProfile);
    }

    /**
     * Adds list entry "mmeBearerLimitsProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @param qosClassIdentifierValue Key argument of child.
     * @return The added child.
     */
    public MmeBearerLimitsProfile addMmeBearerLimitsProfile(String nameValue, String qosClassIdentifierValue)
            throws JNCException {
        MmeBearerLimitsProfile mmeBearerLimitsProfile = new MmeBearerLimitsProfile(nameValue, qosClassIdentifierValue);
        return addMmeBearerLimitsProfile(mmeBearerLimitsProfile);
    }

    /**
     * Adds list entry "mmeBearerLimitsProfile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeBearerLimitsProfile addMmeBearerLimitsProfile()
            throws JNCException {
        MmeBearerLimitsProfile mmeBearerLimitsProfile = new MmeBearerLimitsProfile();
        insertChild(mmeBearerLimitsProfile, childrenNames());
        return mmeBearerLimitsProfile;
    }

    /**
     * Deletes list entry "mmeBearerLimitsProfile", with specified keys.
     * @param nameValue Key argument of child.
     * @param qosClassIdentifierValue Key argument of child.
     */
    public void deleteMmeBearerLimitsProfile(YangString nameValue, YangEnumeration qosClassIdentifierValue)
            throws JNCException {
        String path = "mme-bearer-limits-profile[name='" + nameValue + "'][qosClassIdentifier='" + qosClassIdentifierValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeBearerLimitsProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @param qosClassIdentifierValue Key argument of child.
     */
    public void deleteMmeBearerLimitsProfile(String nameValue, String qosClassIdentifierValue)
            throws JNCException {
        String path = "mme-bearer-limits-profile[name='" + nameValue + "'][qosClassIdentifier='" + qosClassIdentifierValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-local-eps-qos-entry". */

    /**
     * Gets list entry "mmeLocalEpsQosEntry", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeLocalEpsQosEntry getMmeLocalEpsQosEntry(YangString nameValue)
            throws JNCException {
        String path = "mme-local-eps-qos-entry[name='" + nameValue + "']";
        return (MmeLocalEpsQosEntry)searchOne(path);
    }

    /**
     * Gets list entry "mmeLocalEpsQosEntry", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeLocalEpsQosEntry getMmeLocalEpsQosEntry(String nameValue)
            throws JNCException {
        String path = "mme-local-eps-qos-entry[name='" + nameValue + "']";
        return (MmeLocalEpsQosEntry)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-local-eps-qos-entry".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeLocalEpsQosEntryIterator() {
        return new ElementChildrenIterator(children, "mme-local-eps-qos-entry");
    }

    /**
     * Adds list entry "mmeLocalEpsQosEntry", using an existing object.
     * @param mmeLocalEpsQosEntry The object to add.
     * @return The added child.
     */
    public MmeLocalEpsQosEntry addMmeLocalEpsQosEntry(MmeLocalEpsQosEntry mmeLocalEpsQosEntry)
            throws JNCException {
        insertChild(mmeLocalEpsQosEntry, childrenNames());
        return mmeLocalEpsQosEntry;
    }

    /**
     * Adds list entry "mmeLocalEpsQosEntry", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeLocalEpsQosEntry addMmeLocalEpsQosEntry(YangString nameValue)
            throws JNCException {
        MmeLocalEpsQosEntry mmeLocalEpsQosEntry = new MmeLocalEpsQosEntry(nameValue);
        return addMmeLocalEpsQosEntry(mmeLocalEpsQosEntry);
    }

    /**
     * Adds list entry "mmeLocalEpsQosEntry", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeLocalEpsQosEntry addMmeLocalEpsQosEntry(String nameValue)
            throws JNCException {
        MmeLocalEpsQosEntry mmeLocalEpsQosEntry = new MmeLocalEpsQosEntry(nameValue);
        return addMmeLocalEpsQosEntry(mmeLocalEpsQosEntry);
    }

    /**
     * Adds list entry "mmeLocalEpsQosEntry".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeLocalEpsQosEntry addMmeLocalEpsQosEntry() throws JNCException {
        MmeLocalEpsQosEntry mmeLocalEpsQosEntry = new MmeLocalEpsQosEntry();
        insertChild(mmeLocalEpsQosEntry, childrenNames());
        return mmeLocalEpsQosEntry;
    }

    /**
     * Deletes list entry "mmeLocalEpsQosEntry", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeLocalEpsQosEntry(YangString nameValue)
            throws JNCException {
        String path = "mme-local-eps-qos-entry[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeLocalEpsQosEntry", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeLocalEpsQosEntry(String nameValue) throws JNCException {
        String path = "mme-local-eps-qos-entry[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-location-report". */

    /**
     * Gets list entry "mmeLocationReport", with specified keys.
     * @param slnIdValue Key argument of child.
     */
    public MmeLocationReport getMmeLocationReport(YangUInt32 slnIdValue)
            throws JNCException {
        String path = "mme-location-report[slnId='" + slnIdValue + "']";
        return (MmeLocationReport)searchOne(path);
    }

    /**
     * Gets list entry "mmeLocationReport", with specified keys.
     * The keys are specified as strings.
     * @param slnIdValue Key argument of child.
     */
    public MmeLocationReport getMmeLocationReport(String slnIdValue)
            throws JNCException {
        String path = "mme-location-report[slnId='" + slnIdValue + "']";
        return (MmeLocationReport)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-location-report".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeLocationReportIterator() {
        return new ElementChildrenIterator(children, "mme-location-report");
    }

    /**
     * Adds list entry "mmeLocationReport", using an existing object.
     * @param mmeLocationReport The object to add.
     * @return The added child.
     */
    public MmeLocationReport addMmeLocationReport(MmeLocationReport mmeLocationReport)
            throws JNCException {
        insertChild(mmeLocationReport, childrenNames());
        return mmeLocationReport;
    }

    /**
     * Adds list entry "mmeLocationReport", with specified keys.
     * @param slnIdValue Key argument of child.
     * @return The added child.
     */
    public MmeLocationReport addMmeLocationReport(YangUInt32 slnIdValue)
            throws JNCException {
        MmeLocationReport mmeLocationReport = new MmeLocationReport(slnIdValue);
        return addMmeLocationReport(mmeLocationReport);
    }

    /**
     * Adds list entry "mmeLocationReport", with specified keys.
     * The keys are specified as strings.
     * @param slnIdValue Key argument of child.
     * @return The added child.
     */
    public MmeLocationReport addMmeLocationReport(String slnIdValue)
            throws JNCException {
        MmeLocationReport mmeLocationReport = new MmeLocationReport(slnIdValue);
        return addMmeLocationReport(mmeLocationReport);
    }

    /**
     * Adds list entry "mmeLocationReport".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeLocationReport addMmeLocationReport() throws JNCException {
        MmeLocationReport mmeLocationReport = new MmeLocationReport();
        insertChild(mmeLocationReport, childrenNames());
        return mmeLocationReport;
    }

    /**
     * Deletes list entry "mmeLocationReport", with specified keys.
     * @param slnIdValue Key argument of child.
     */
    public void deleteMmeLocationReport(YangUInt32 slnIdValue)
            throws JNCException {
        String path = "mme-location-report[slnId='" + slnIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeLocationReport", with specified keys.
     * The keys are specified as strings.
     * @param slnIdValue Key argument of child.
     */
    public void deleteMmeLocationReport(String slnIdValue) throws JNCException {
        String path = "mme-location-report[slnId='" + slnIdValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-voice-domain-profile". */

    /**
     * Gets list entry "mmeVoiceDomainProfile", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeVoiceDomainProfile getMmeVoiceDomainProfile(YangString nameValue)
            throws JNCException {
        String path = "mme-voice-domain-profile[name='" + nameValue + "']";
        return (MmeVoiceDomainProfile)searchOne(path);
    }

    /**
     * Gets list entry "mmeVoiceDomainProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeVoiceDomainProfile getMmeVoiceDomainProfile(String nameValue)
            throws JNCException {
        String path = "mme-voice-domain-profile[name='" + nameValue + "']";
        return (MmeVoiceDomainProfile)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-voice-domain-profile".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeVoiceDomainProfileIterator() {
        return new ElementChildrenIterator(children, "mme-voice-domain-profile");
    }

    /**
     * Adds list entry "mmeVoiceDomainProfile", using an existing object.
     * @param mmeVoiceDomainProfile The object to add.
     * @return The added child.
     */
    public MmeVoiceDomainProfile addMmeVoiceDomainProfile(MmeVoiceDomainProfile mmeVoiceDomainProfile)
            throws JNCException {
        insertChild(mmeVoiceDomainProfile, childrenNames());
        return mmeVoiceDomainProfile;
    }

    /**
     * Adds list entry "mmeVoiceDomainProfile", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeVoiceDomainProfile addMmeVoiceDomainProfile(YangString nameValue)
            throws JNCException {
        MmeVoiceDomainProfile mmeVoiceDomainProfile = new MmeVoiceDomainProfile(nameValue);
        return addMmeVoiceDomainProfile(mmeVoiceDomainProfile);
    }

    /**
     * Adds list entry "mmeVoiceDomainProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeVoiceDomainProfile addMmeVoiceDomainProfile(String nameValue)
            throws JNCException {
        MmeVoiceDomainProfile mmeVoiceDomainProfile = new MmeVoiceDomainProfile(nameValue);
        return addMmeVoiceDomainProfile(mmeVoiceDomainProfile);
    }

    /**
     * Adds list entry "mmeVoiceDomainProfile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeVoiceDomainProfile addMmeVoiceDomainProfile() throws JNCException {
        MmeVoiceDomainProfile mmeVoiceDomainProfile = new MmeVoiceDomainProfile();
        insertChild(mmeVoiceDomainProfile, childrenNames());
        return mmeVoiceDomainProfile;
    }

    /**
     * Deletes list entry "mmeVoiceDomainProfile", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeVoiceDomainProfile(YangString nameValue)
            throws JNCException {
        String path = "mme-voice-domain-profile[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeVoiceDomainProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeVoiceDomainProfile(String nameValue)
            throws JNCException {
        String path = "mme-voice-domain-profile[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-mvno-apn-list". */

    /**
     * Gets list entry "mmeMvnoApnList", with specified keys.
     * @param apnNameValue Key argument of child.
     */
    public MmeMvnoApnList getMmeMvnoApnList(YangString apnNameValue)
            throws JNCException {
        String path = "mme-mvno-apn-list[apnName='" + apnNameValue + "']";
        return (MmeMvnoApnList)searchOne(path);
    }

    /**
     * Gets list entry "mmeMvnoApnList", with specified keys.
     * The keys are specified as strings.
     * @param apnNameValue Key argument of child.
     */
    public MmeMvnoApnList getMmeMvnoApnList(String apnNameValue)
            throws JNCException {
        String path = "mme-mvno-apn-list[apnName='" + apnNameValue + "']";
        return (MmeMvnoApnList)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-mvno-apn-list".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeMvnoApnListIterator() {
        return new ElementChildrenIterator(children, "mme-mvno-apn-list");
    }

    /**
     * Adds list entry "mmeMvnoApnList", using an existing object.
     * @param mmeMvnoApnList The object to add.
     * @return The added child.
     */
    public MmeMvnoApnList addMmeMvnoApnList(MmeMvnoApnList mmeMvnoApnList)
            throws JNCException {
        insertChild(mmeMvnoApnList, childrenNames());
        return mmeMvnoApnList;
    }

    /**
     * Adds list entry "mmeMvnoApnList", with specified keys.
     * @param apnNameValue Key argument of child.
     * @return The added child.
     */
    public MmeMvnoApnList addMmeMvnoApnList(YangString apnNameValue)
            throws JNCException {
        MmeMvnoApnList mmeMvnoApnList = new MmeMvnoApnList(apnNameValue);
        return addMmeMvnoApnList(mmeMvnoApnList);
    }

    /**
     * Adds list entry "mmeMvnoApnList", with specified keys.
     * The keys are specified as strings.
     * @param apnNameValue Key argument of child.
     * @return The added child.
     */
    public MmeMvnoApnList addMmeMvnoApnList(String apnNameValue)
            throws JNCException {
        MmeMvnoApnList mmeMvnoApnList = new MmeMvnoApnList(apnNameValue);
        return addMmeMvnoApnList(mmeMvnoApnList);
    }

    /**
     * Adds list entry "mmeMvnoApnList".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeMvnoApnList addMmeMvnoApnList() throws JNCException {
        MmeMvnoApnList mmeMvnoApnList = new MmeMvnoApnList();
        insertChild(mmeMvnoApnList, childrenNames());
        return mmeMvnoApnList;
    }

    /**
     * Deletes list entry "mmeMvnoApnList", with specified keys.
     * @param apnNameValue Key argument of child.
     */
    public void deleteMmeMvnoApnList(YangString apnNameValue)
            throws JNCException {
        String path = "mme-mvno-apn-list[apnName='" + apnNameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeMvnoApnList", with specified keys.
     * The keys are specified as strings.
     * @param apnNameValue Key argument of child.
     */
    public void deleteMmeMvnoApnList(String apnNameValue) throws JNCException {
        String path = "mme-mvno-apn-list[apnName='" + apnNameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-apn-selection-profile". */

    /**
     * Gets list entry "mmeApnSelectionProfile", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeApnSelectionProfile getMmeApnSelectionProfile(YangString nameValue)
            throws JNCException {
        String path = "mme-apn-selection-profile[name='" + nameValue + "']";
        return (MmeApnSelectionProfile)searchOne(path);
    }

    /**
     * Gets list entry "mmeApnSelectionProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeApnSelectionProfile getMmeApnSelectionProfile(String nameValue)
            throws JNCException {
        String path = "mme-apn-selection-profile[name='" + nameValue + "']";
        return (MmeApnSelectionProfile)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-apn-selection-profile".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeApnSelectionProfileIterator() {
        return new ElementChildrenIterator(children, "mme-apn-selection-profile");
    }

    /**
     * Adds list entry "mmeApnSelectionProfile", using an existing object.
     * @param mmeApnSelectionProfile The object to add.
     * @return The added child.
     */
    public MmeApnSelectionProfile addMmeApnSelectionProfile(MmeApnSelectionProfile mmeApnSelectionProfile)
            throws JNCException {
        insertChild(mmeApnSelectionProfile, childrenNames());
        return mmeApnSelectionProfile;
    }

    /**
     * Adds list entry "mmeApnSelectionProfile", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeApnSelectionProfile addMmeApnSelectionProfile(YangString nameValue)
            throws JNCException {
        MmeApnSelectionProfile mmeApnSelectionProfile = new MmeApnSelectionProfile(nameValue);
        return addMmeApnSelectionProfile(mmeApnSelectionProfile);
    }

    /**
     * Adds list entry "mmeApnSelectionProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeApnSelectionProfile addMmeApnSelectionProfile(String nameValue)
            throws JNCException {
        MmeApnSelectionProfile mmeApnSelectionProfile = new MmeApnSelectionProfile(nameValue);
        return addMmeApnSelectionProfile(mmeApnSelectionProfile);
    }

    /**
     * Adds list entry "mmeApnSelectionProfile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeApnSelectionProfile addMmeApnSelectionProfile()
            throws JNCException {
        MmeApnSelectionProfile mmeApnSelectionProfile = new MmeApnSelectionProfile();
        insertChild(mmeApnSelectionProfile, childrenNames());
        return mmeApnSelectionProfile;
    }

    /**
     * Deletes list entry "mmeApnSelectionProfile", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeApnSelectionProfile(YangString nameValue)
            throws JNCException {
        String path = "mme-apn-selection-profile[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeApnSelectionProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeApnSelectionProfile(String nameValue)
            throws JNCException {
        String path = "mme-apn-selection-profile[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for container child: "list". */

    /**
     * Adds container entry "list", using an existing object.
     * @param list The object to add.
     * @return The added child.
     */
    public List addList(List list) throws JNCException {
        this.list = list;
        insertChild(list, childrenNames());
        return list;
    }

    /**
     * Adds container entry "list".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public List addList() throws JNCException {
        List list = new List();
        this.list = list;
        insertChild(list, childrenNames());
        return list;
    }

    /**
     * Deletes container entry "list".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteList() throws JNCException {
        this.list = null;
        String path = "list";
        return delete(path);
    }

    /* Access methods for container child: "offload". */

    /**
     * Adds container entry "offload", using an existing object.
     * @param offload The object to add.
     * @return The added child.
     */
    public Offload addOffload(Offload offload) throws JNCException {
        this.offload = offload;
        insertChild(offload, childrenNames());
        return offload;
    }

    /**
     * Adds container entry "offload".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Offload addOffload() throws JNCException {
        Offload offload = new Offload();
        this.offload = offload;
        insertChild(offload, childrenNames());
        return offload;
    }

    /**
     * Deletes container entry "offload".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteOffload() throws JNCException {
        this.offload = null;
        String path = "offload";
        return delete(path);
    }

    /* Access methods for list child: "subscriber-list-oper". */

    /**
     * Gets list entry "subscriberListOper", with specified keys.
     */
    public SubscriberListOper getSubscriberListOper() throws JNCException {
        String path = "subscriber-list-oper";
        return (SubscriberListOper)searchOne(path);
    }

    /**
     * Iterator method for the list "subscriber-list-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator subscriberListOperIterator() {
        return new ElementChildrenIterator(children, "subscriber-list-oper");
    }

    /**
     * Adds list entry "subscriberListOper", using an existing object.
     * @param subscriberListOper The object to add.
     * @return The added child.
     */
    public SubscriberListOper addSubscriberListOper(SubscriberListOper subscriberListOper)
            throws JNCException {
        insertChild(subscriberListOper, childrenNames());
        return subscriberListOper;
    }

    /**
     * Adds list entry "subscriberListOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SubscriberListOper addSubscriberListOper() throws JNCException {
        SubscriberListOper subscriberListOper = new SubscriberListOper();
        insertChild(subscriberListOper, childrenNames());
        return subscriberListOper;
    }

    /**
     * Deletes list entry "subscriberListOper", with specified keys.
     */
    public void deleteSubscriberListOper() throws JNCException {
        String path = "subscriber-list-oper";
        delete(path);
    }

    /* Access methods for container child: "mobile-context". */

    /**
     * Adds container entry "mobileContext", using an existing object.
     * @param mobileContext The object to add.
     * @return The added child.
     */
    public MobileContext addMobileContext(MobileContext mobileContext)
            throws JNCException {
        this.mobileContext = mobileContext;
        insertChild(mobileContext, childrenNames());
        return mobileContext;
    }

    /**
     * Adds container entry "mobileContext".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MobileContext addMobileContext() throws JNCException {
        MobileContext mobileContext = new MobileContext();
        this.mobileContext = mobileContext;
        insertChild(mobileContext, childrenNames());
        return mobileContext;
    }

    /**
     * Deletes container entry "mobileContext".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMobileContext() throws JNCException {
        this.mobileContext = null;
        String path = "mobile-context";
        return delete(path);
    }

    /* Access methods for container child: "session". */

    /**
     * Adds container entry "session", using an existing object.
     * @param session The object to add.
     * @return The added child.
     */
    public Session addSession(Session session) throws JNCException {
        this.session = session;
        insertChild(session, childrenNames());
        return session;
    }

    /**
     * Adds container entry "session".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Session addSession() throws JNCException {
        Session session = new Session();
        this.session = session;
        insertChild(session, childrenNames());
        return session;
    }

    /**
     * Deletes container entry "session".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSession() throws JNCException {
        this.session = null;
        String path = "session";
        return delete(path);
    }

    /* Access methods for container child: "requested-qos". */

    /**
     * Adds container entry "requestedQos", using an existing object.
     * @param requestedQos The object to add.
     * @return The added child.
     */
    public RequestedQos addRequestedQos(RequestedQos requestedQos)
            throws JNCException {
        this.requestedQos = requestedQos;
        insertChild(requestedQos, childrenNames());
        return requestedQos;
    }

    /**
     * Adds container entry "requestedQos".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public RequestedQos addRequestedQos() throws JNCException {
        RequestedQos requestedQos = new RequestedQos();
        this.requestedQos = requestedQos;
        insertChild(requestedQos, childrenNames());
        return requestedQos;
    }

    /**
     * Deletes container entry "requestedQos".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteRequestedQos() throws JNCException {
        this.requestedQos = null;
        String path = "requested-qos";
        return delete(path);
    }

    /* Access methods for container child: "negotiated-qos". */

    /**
     * Adds container entry "negotiatedQos", using an existing object.
     * @param negotiatedQos The object to add.
     * @return The added child.
     */
    public NegotiatedQos addNegotiatedQos(NegotiatedQos negotiatedQos)
            throws JNCException {
        this.negotiatedQos = negotiatedQos;
        insertChild(negotiatedQos, childrenNames());
        return negotiatedQos;
    }

    /**
     * Adds container entry "negotiatedQos".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public NegotiatedQos addNegotiatedQos() throws JNCException {
        NegotiatedQos negotiatedQos = new NegotiatedQos();
        this.negotiatedQos = negotiatedQos;
        insertChild(negotiatedQos, childrenNames());
        return negotiatedQos;
    }

    /**
     * Deletes container entry "negotiatedQos".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteNegotiatedQos() throws JNCException {
        this.negotiatedQos = null;
        String path = "negotiated-qos";
        return delete(path);
    }

    /* Access methods for container child: "subscribed-qos". */

    /**
     * Adds container entry "subscribedQos", using an existing object.
     * @param subscribedQos The object to add.
     * @return The added child.
     */
    public SubscribedQos addSubscribedQos(SubscribedQos subscribedQos)
            throws JNCException {
        this.subscribedQos = subscribedQos;
        insertChild(subscribedQos, childrenNames());
        return subscribedQos;
    }

    /**
     * Adds container entry "subscribedQos".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SubscribedQos addSubscribedQos() throws JNCException {
        SubscribedQos subscribedQos = new SubscribedQos();
        this.subscribedQos = subscribedQos;
        insertChild(subscribedQos, childrenNames());
        return subscribedQos;
    }

    /**
     * Deletes container entry "subscribedQos".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSubscribedQos() throws JNCException {
        this.subscribedQos = null;
        String path = "subscribed-qos";
        return delete(path);
    }

    /* Access methods for container child: "bearer". */

    /**
     * Adds container entry "bearer", using an existing object.
     * @param bearer The object to add.
     * @return The added child.
     */
    public Bearer addBearer(Bearer bearer) throws JNCException {
        this.bearer = bearer;
        insertChild(bearer, childrenNames());
        return bearer;
    }

    /**
     * Adds container entry "bearer".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Bearer addBearer() throws JNCException {
        Bearer bearer = new Bearer();
        this.bearer = bearer;
        insertChild(bearer, childrenNames());
        return bearer;
    }

    /**
     * Deletes container entry "bearer".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteBearer() throws JNCException {
        this.bearer = null;
        String path = "bearer";
        return delete(path);
    }

    /* Access methods for container child: "subscription". */

    /**
     * Adds container entry "subscription", using an existing object.
     * @param subscription The object to add.
     * @return The added child.
     */
    public Subscription addSubscription(Subscription subscription)
            throws JNCException {
        this.subscription = subscription;
        insertChild(subscription, childrenNames());
        return subscription;
    }

    /**
     * Adds container entry "subscription".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Subscription addSubscription() throws JNCException {
        Subscription subscription = new Subscription();
        this.subscription = subscription;
        insertChild(subscription, childrenNames());
        return subscription;
    }

    /**
     * Deletes container entry "subscription".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSubscription() throws JNCException {
        this.subscription = null;
        String path = "subscription";
        return delete(path);
    }

    /* Access methods for container child: "apn-profile". */

    /**
     * Adds container entry "apnProfile", using an existing object.
     * @param apnProfile The object to add.
     * @return The added child.
     */
    public ApnProfile addApnProfile(ApnProfile apnProfile) throws JNCException {
        this.apnProfile = apnProfile;
        insertChild(apnProfile, childrenNames());
        return apnProfile;
    }

    /**
     * Adds container entry "apnProfile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public ApnProfile addApnProfile() throws JNCException {
        ApnProfile apnProfile = new ApnProfile();
        this.apnProfile = apnProfile;
        insertChild(apnProfile, childrenNames());
        return apnProfile;
    }

    /**
     * Deletes container entry "apnProfile".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteApnProfile() throws JNCException {
        this.apnProfile = null;
        String path = "apn-profile";
        return delete(path);
    }

    /* Access methods for list child: "gs-context". */

    /**
     * Gets list entry "gsContext", with specified keys.
     */
    public GsContext getGsContext() throws JNCException {
        String path = "gs-context";
        return (GsContext)searchOne(path);
    }

    /**
     * Iterator method for the list "gs-context".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator gsContextIterator() {
        return new ElementChildrenIterator(children, "gs-context");
    }

    /**
     * Adds list entry "gsContext", using an existing object.
     * @param gsContext The object to add.
     * @return The added child.
     */
    public GsContext addGsContext(GsContext gsContext) throws JNCException {
        insertChild(gsContext, childrenNames());
        return gsContext;
    }

    /**
     * Adds list entry "gsContext".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public GsContext addGsContext() throws JNCException {
        GsContext gsContext = new GsContext();
        insertChild(gsContext, childrenNames());
        return gsContext;
    }

    /**
     * Deletes list entry "gsContext", with specified keys.
     */
    public void deleteGsContext() throws JNCException {
        String path = "gs-context";
        delete(path);
    }

    /* Access methods for list child: "csg-subscription-data". */

    /**
     * Gets list entry "csgSubscriptionData", with specified keys.
     */
    public CsgSubscriptionData getCsgSubscriptionData() throws JNCException {
        String path = "csg-subscription-data";
        return (CsgSubscriptionData)searchOne(path);
    }

    /**
     * Iterator method for the list "csg-subscription-data".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator csgSubscriptionDataIterator() {
        return new ElementChildrenIterator(children, "csg-subscription-data");
    }

    /**
     * Adds list entry "csgSubscriptionData", using an existing object.
     * @param csgSubscriptionData The object to add.
     * @return The added child.
     */
    public CsgSubscriptionData addCsgSubscriptionData(CsgSubscriptionData csgSubscriptionData)
            throws JNCException {
        insertChild(csgSubscriptionData, childrenNames());
        return csgSubscriptionData;
    }

    /**
     * Adds list entry "csgSubscriptionData".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public CsgSubscriptionData addCsgSubscriptionData() throws JNCException {
        CsgSubscriptionData csgSubscriptionData = new CsgSubscriptionData();
        insertChild(csgSubscriptionData, childrenNames());
        return csgSubscriptionData;
    }

    /**
     * Deletes list entry "csgSubscriptionData", with specified keys.
     */
    public void deleteCsgSubscriptionData() throws JNCException {
        String path = "csg-subscription-data";
        delete(path);
    }

    /* Access methods for list child: "offload-oper". */

    /**
     * Gets list entry "offloadOper", with specified keys.
     */
    public OffloadOper getOffloadOper() throws JNCException {
        String path = "offload-oper";
        return (OffloadOper)searchOne(path);
    }

    /**
     * Iterator method for the list "offload-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator offloadOperIterator() {
        return new ElementChildrenIterator(children, "offload-oper");
    }

    /**
     * Adds list entry "offloadOper", using an existing object.
     * @param offloadOper The object to add.
     * @return The added child.
     */
    public OffloadOper addOffloadOper(OffloadOper offloadOper)
            throws JNCException {
        insertChild(offloadOper, childrenNames());
        return offloadOper;
    }

    /**
     * Adds list entry "offloadOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public OffloadOper addOffloadOper() throws JNCException {
        OffloadOper offloadOper = new OffloadOper();
        insertChild(offloadOper, childrenNames());
        return offloadOper;
    }

    /**
     * Deletes list entry "offloadOper", with specified keys.
     */
    public void deleteOffloadOper() throws JNCException {
        String path = "offload-oper";
        delete(path);
    }

    /* Access methods for container child: "info". */

    /**
     * Adds container entry "info", using an existing object.
     * @param info The object to add.
     * @return The added child.
     */
    public Info addInfo(Info info) throws JNCException {
        this.info = info;
        insertChild(info, childrenNames());
        return info;
    }

    /**
     * Adds container entry "info".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Info addInfo() throws JNCException {
        Info info = new Info();
        this.info = info;
        insertChild(info, childrenNames());
        return info;
    }

    /**
     * Deletes container entry "info".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteInfo() throws JNCException {
        this.info = null;
        String path = "info";
        return delete(path);
    }

    /* Access methods for list child: "subscriber-info-oper". */

    /**
     * Gets list entry "subscriberInfoOper", with specified keys.
     */
    public SubscriberInfoOper getSubscriberInfoOper() throws JNCException {
        String path = "subscriber-info-oper";
        return (SubscriberInfoOper)searchOne(path);
    }

    /**
     * Iterator method for the list "subscriber-info-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator subscriberInfoOperIterator() {
        return new ElementChildrenIterator(children, "subscriber-info-oper");
    }

    /**
     * Adds list entry "subscriberInfoOper", using an existing object.
     * @param subscriberInfoOper The object to add.
     * @return The added child.
     */
    public SubscriberInfoOper addSubscriberInfoOper(SubscriberInfoOper subscriberInfoOper)
            throws JNCException {
        insertChild(subscriberInfoOper, childrenNames());
        return subscriberInfoOper;
    }

    /**
     * Adds list entry "subscriberInfoOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SubscriberInfoOper addSubscriberInfoOper() throws JNCException {
        SubscriberInfoOper subscriberInfoOper = new SubscriberInfoOper();
        insertChild(subscriberInfoOper, childrenNames());
        return subscriberInfoOper;
    }

    /**
     * Deletes list entry "subscriberInfoOper", with specified keys.
     */
    public void deleteSubscriberInfoOper() throws JNCException {
        String path = "subscriber-info-oper";
        delete(path);
    }

    /* Access methods for list child: "mme-local-qos-profile". */

    /**
     * Gets list entry "mmeLocalQosProfile", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeLocalQosProfile getMmeLocalQosProfile(YangString nameValue)
            throws JNCException {
        String path = "mme-local-qos-profile[name='" + nameValue + "']";
        return (MmeLocalQosProfile)searchOne(path);
    }

    /**
     * Gets list entry "mmeLocalQosProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeLocalQosProfile getMmeLocalQosProfile(String nameValue)
            throws JNCException {
        String path = "mme-local-qos-profile[name='" + nameValue + "']";
        return (MmeLocalQosProfile)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-local-qos-profile".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeLocalQosProfileIterator() {
        return new ElementChildrenIterator(children, "mme-local-qos-profile");
    }

    /**
     * Adds list entry "mmeLocalQosProfile", using an existing object.
     * @param mmeLocalQosProfile The object to add.
     * @return The added child.
     */
    public MmeLocalQosProfile addMmeLocalQosProfile(MmeLocalQosProfile mmeLocalQosProfile)
            throws JNCException {
        insertChild(mmeLocalQosProfile, childrenNames());
        return mmeLocalQosProfile;
    }

    /**
     * Adds list entry "mmeLocalQosProfile", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeLocalQosProfile addMmeLocalQosProfile(YangString nameValue)
            throws JNCException {
        MmeLocalQosProfile mmeLocalQosProfile = new MmeLocalQosProfile(nameValue);
        return addMmeLocalQosProfile(mmeLocalQosProfile);
    }

    /**
     * Adds list entry "mmeLocalQosProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeLocalQosProfile addMmeLocalQosProfile(String nameValue)
            throws JNCException {
        MmeLocalQosProfile mmeLocalQosProfile = new MmeLocalQosProfile(nameValue);
        return addMmeLocalQosProfile(mmeLocalQosProfile);
    }

    /**
     * Adds list entry "mmeLocalQosProfile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeLocalQosProfile addMmeLocalQosProfile() throws JNCException {
        MmeLocalQosProfile mmeLocalQosProfile = new MmeLocalQosProfile();
        insertChild(mmeLocalQosProfile, childrenNames());
        return mmeLocalQosProfile;
    }

    /**
     * Deletes list entry "mmeLocalQosProfile", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeLocalQosProfile(YangString nameValue)
            throws JNCException {
        String path = "mme-local-qos-profile[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeLocalQosProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeLocalQosProfile(String nameValue) throws JNCException {
        String path = "mme-local-qos-profile[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "camel-subscription". */

    /**
     * Gets list entry "camelSubscription", with specified keys.
     */
    public CamelSubscription getCamelSubscription() throws JNCException {
        String path = "camel-subscription";
        return (CamelSubscription)searchOne(path);
    }

    /**
     * Iterator method for the list "camel-subscription".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator camelSubscriptionIterator() {
        return new ElementChildrenIterator(children, "camel-subscription");
    }

    /**
     * Adds list entry "camelSubscription", using an existing object.
     * @param camelSubscription The object to add.
     * @return The added child.
     */
    public CamelSubscription addCamelSubscription(CamelSubscription camelSubscription)
            throws JNCException {
        insertChild(camelSubscription, childrenNames());
        return camelSubscription;
    }

    /**
     * Adds list entry "camelSubscription".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public CamelSubscription addCamelSubscription() throws JNCException {
        CamelSubscription camelSubscription = new CamelSubscription();
        insertChild(camelSubscription, childrenNames());
        return camelSubscription;
    }

    /**
     * Deletes list entry "camelSubscription", with specified keys.
     */
    public void deleteCamelSubscription() throws JNCException {
        String path = "camel-subscription";
        delete(path);
    }

    /* Access methods for list child: "camel-context". */

    /**
     * Gets list entry "camelContext", with specified keys.
     */
    public CamelContext getCamelContext() throws JNCException {
        String path = "camel-context";
        return (CamelContext)searchOne(path);
    }

    /**
     * Iterator method for the list "camel-context".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator camelContextIterator() {
        return new ElementChildrenIterator(children, "camel-context");
    }

    /**
     * Adds list entry "camelContext", using an existing object.
     * @param camelContext The object to add.
     * @return The added child.
     */
    public CamelContext addCamelContext(CamelContext camelContext)
            throws JNCException {
        insertChild(camelContext, childrenNames());
        return camelContext;
    }

    /**
     * Adds list entry "camelContext".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public CamelContext addCamelContext() throws JNCException {
        CamelContext camelContext = new CamelContext();
        insertChild(camelContext, childrenNames());
        return camelContext;
    }

    /**
     * Deletes list entry "camelContext", with specified keys.
     */
    public void deleteCamelContext() throws JNCException {
        String path = "camel-context";
        delete(path);
    }

    /* Access methods for list child: "llc-context". */

    /**
     * Gets list entry "llcContext", with specified keys.
     */
    public LlcContext getLlcContext() throws JNCException {
        String path = "llc-context";
        return (LlcContext)searchOne(path);
    }

    /**
     * Iterator method for the list "llc-context".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator llcContextIterator() {
        return new ElementChildrenIterator(children, "llc-context");
    }

    /**
     * Adds list entry "llcContext", using an existing object.
     * @param llcContext The object to add.
     * @return The added child.
     */
    public LlcContext addLlcContext(LlcContext llcContext) throws JNCException {
        insertChild(llcContext, childrenNames());
        return llcContext;
    }

    /**
     * Adds list entry "llcContext".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LlcContext addLlcContext() throws JNCException {
        LlcContext llcContext = new LlcContext();
        insertChild(llcContext, childrenNames());
        return llcContext;
    }

    /**
     * Deletes list entry "llcContext", with specified keys.
     */
    public void deleteLlcContext() throws JNCException {
        String path = "llc-context";
        delete(path);
    }

    /* Access methods for list child: "llc-pfc". */

    /**
     * Gets list entry "llcPfc", with specified keys.
     */
    public LlcPfc getLlcPfc() throws JNCException {
        String path = "llc-pfc";
        return (LlcPfc)searchOne(path);
    }

    /**
     * Iterator method for the list "llc-pfc".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator llcPfcIterator() {
        return new ElementChildrenIterator(children, "llc-pfc");
    }

    /**
     * Adds list entry "llcPfc", using an existing object.
     * @param llcPfc The object to add.
     * @return The added child.
     */
    public LlcPfc addLlcPfc(LlcPfc llcPfc) throws JNCException {
        insertChild(llcPfc, childrenNames());
        return llcPfc;
    }

    /**
     * Adds list entry "llcPfc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LlcPfc addLlcPfc() throws JNCException {
        LlcPfc llcPfc = new LlcPfc();
        insertChild(llcPfc, childrenNames());
        return llcPfc;
    }

    /**
     * Deletes list entry "llcPfc", with specified keys.
     */
    public void deleteLlcPfc() throws JNCException {
        String path = "llc-pfc";
        delete(path);
    }

    /* Access methods for list child: "sndcp-session". */

    /**
     * Gets list entry "sndcpSession", with specified keys.
     */
    public SndcpSession getSndcpSession() throws JNCException {
        String path = "sndcp-session";
        return (SndcpSession)searchOne(path);
    }

    /**
     * Iterator method for the list "sndcp-session".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator sndcpSessionIterator() {
        return new ElementChildrenIterator(children, "sndcp-session");
    }

    /**
     * Adds list entry "sndcpSession", using an existing object.
     * @param sndcpSession The object to add.
     * @return The added child.
     */
    public SndcpSession addSndcpSession(SndcpSession sndcpSession)
            throws JNCException {
        insertChild(sndcpSession, childrenNames());
        return sndcpSession;
    }

    /**
     * Adds list entry "sndcpSession".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SndcpSession addSndcpSession() throws JNCException {
        SndcpSession sndcpSession = new SndcpSession();
        insertChild(sndcpSession, childrenNames());
        return sndcpSession;
    }

    /**
     * Deletes list entry "sndcpSession", with specified keys.
     */
    public void deleteSndcpSession() throws JNCException {
        String path = "sndcp-session";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof PreferredApnList) preferredApnList = (PreferredApnList)child;
        else if (child instanceof DirectTunnelApnScreening) directTunnelApnScreening = (DirectTunnelApnScreening)child;
        else if (child instanceof MmeNodalQos) mmeNodalQos = (MmeNodalQos)child;
        else if (child instanceof MmeAmfShutdown) mmeAmfShutdown = (MmeAmfShutdown)child;
        else if (child instanceof MmeLoadControlProfile) mmeLoadControlProfile = (MmeLoadControlProfile)child;
        else if (child instanceof List) list = (List)child;
        else if (child instanceof Offload) offload = (Offload)child;
        else if (child instanceof MobileContext) mobileContext = (MobileContext)child;
        else if (child instanceof Session) session = (Session)child;
        else if (child instanceof RequestedQos) requestedQos = (RequestedQos)child;
        else if (child instanceof NegotiatedQos) negotiatedQos = (NegotiatedQos)child;
        else if (child instanceof SubscribedQos) subscribedQos = (SubscribedQos)child;
        else if (child instanceof Bearer) bearer = (Bearer)child;
        else if (child instanceof Subscription) subscription = (Subscription)child;
        else if (child instanceof ApnProfile) apnProfile = (ApnProfile)child;
        else if (child instanceof Info) info = (Info)child;
    }

}
