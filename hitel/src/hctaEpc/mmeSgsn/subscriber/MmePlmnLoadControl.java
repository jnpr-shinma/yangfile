/* 
 * @(#)MmePlmnLoadControl.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/mme-plmn-load-control"
 * <p>
 * See line 2183 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmePlmnLoadControl extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmePlmnLoadControl object.
     */
    public MmePlmnLoadControl() {
        super(Epc.NAMESPACE, "mme-plmn-load-control");
    }

    /**
     * Constructor for an initialized MmePlmnLoadControl object,
     * 
     * @param plmnValue Key argument of child.
     */
    public MmePlmnLoadControl(YangString plmnValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-plmn-load-control");
        Leaf plmn = new Leaf(Epc.NAMESPACE, "plmn");
        plmn.setValue(plmnValue);
        insertChild(plmn, childrenNames());
    }

    /**
     * Constructor for an initialized MmePlmnLoadControl object,
     * with String keys.
     * @param plmnValue Key argument of child.
     */
    public MmePlmnLoadControl(String plmnValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-plmn-load-control");
        Leaf plmn = new Leaf(Epc.NAMESPACE, "plmn");
        plmn.setValue(new YangString(plmnValue));
        insertChild(plmn, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmePlmnLoadControl clone() {
        MmePlmnLoadControl copy;
        try {
            copy = new MmePlmnLoadControl(getPlmnValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmePlmnLoadControl)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmePlmnLoadControl cloneShallow() {
        MmePlmnLoadControl copy;
        try {
            copy = new MmePlmnLoadControl(getPlmnValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmePlmnLoadControl)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "plmn",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "plmn",
            "ms-att-reqs-threshold",
            "ms-irau-reqs-threshold",
            "ms-pdpc-act-attempts-threshold",
            "ms-itau-reqs-threshold",
            "ms-dedbearer-reqs-threshold",
            "current-attach-subs-threshold",
            "current-pdp-context-threshold",
            "current-act-bearer-threshold",
            "load-control",
        };
    }

    /* Access methods for leaf child: "plmn". */

    /**
     * Gets the value for child leaf "plmn".
     * @return The value of the leaf.
     */
    public YangString getPlmnValue() throws JNCException {
        return (YangString)getValue("plmn");
    }

    /**
     * Sets the value for child leaf "plmn",
     * using instance of generated typedef class.
     * @param plmnValue The value to set.
     * @param plmnValue used during instantiation.
     */
    public void setPlmnValue(YangString plmnValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn",
            plmnValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "plmn",
     * using a String value.
     * @param plmnValue used during instantiation.
     */
    public void setPlmnValue(String plmnValue) throws JNCException {
        setPlmnValue(new YangString(plmnValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "plmn" leaf will not have a value.
     */
    public void addPlmn() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "ms-att-reqs-threshold". */

    /**
     * Gets the value for child leaf "ms-att-reqs-threshold".
     * @return The value of the leaf.
     */
    public YangUInt32 getMsAttReqsThresholdValue() throws JNCException {
        YangUInt32 msAttReqsThreshold = (YangUInt32)getValue("ms-att-reqs-threshold");
        if (msAttReqsThreshold == null) {
            msAttReqsThreshold = new YangUInt32("0");  // default
        }
        return msAttReqsThreshold;
    }

    /**
     * Sets the value for child leaf "ms-att-reqs-threshold",
     * using instance of generated typedef class.
     * @param msAttReqsThresholdValue The value to set.
     * @param msAttReqsThresholdValue used during instantiation.
     */
    public void setMsAttReqsThresholdValue(YangUInt32 msAttReqsThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ms-att-reqs-threshold",
            msAttReqsThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ms-att-reqs-threshold",
     * using Java primitive values.
     * @param msAttReqsThresholdValue used during instantiation.
     */
    public void setMsAttReqsThresholdValue(long msAttReqsThresholdValue)
            throws JNCException {
        setMsAttReqsThresholdValue(new YangUInt32(msAttReqsThresholdValue));
    }

    /**
     * Sets the value for child leaf "ms-att-reqs-threshold",
     * using a String value.
     * @param msAttReqsThresholdValue used during instantiation.
     */
    public void setMsAttReqsThresholdValue(String msAttReqsThresholdValue)
            throws JNCException {
        setMsAttReqsThresholdValue(new YangUInt32(msAttReqsThresholdValue));
    }

    /**
     * Unsets the value for child leaf "ms-att-reqs-threshold".
     */
    public void unsetMsAttReqsThresholdValue() throws JNCException {
        delete("ms-att-reqs-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ms-att-reqs-threshold" leaf will not have a value.
     */
    public void addMsAttReqsThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ms-att-reqs-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ms-att-reqs-threshold" with operation "replace".
     */
    public void markMsAttReqsThresholdReplace() throws JNCException {
        markLeafReplace("msAttReqsThreshold");
    }

    /**
     * Marks the leaf "ms-att-reqs-threshold" with operation "merge".
     */
    public void markMsAttReqsThresholdMerge() throws JNCException {
        markLeafMerge("msAttReqsThreshold");
    }

    /**
     * Marks the leaf "ms-att-reqs-threshold" with operation "create".
     */
    public void markMsAttReqsThresholdCreate() throws JNCException {
        markLeafCreate("msAttReqsThreshold");
    }

    /**
     * Marks the leaf "ms-att-reqs-threshold" with operation "delete".
     */
    public void markMsAttReqsThresholdDelete() throws JNCException {
        markLeafDelete("msAttReqsThreshold");
    }

    /* Access methods for optional leaf child: "ms-irau-reqs-threshold". */

    /**
     * Gets the value for child leaf "ms-irau-reqs-threshold".
     * @return The value of the leaf.
     */
    public YangUInt32 getMsIrauReqsThresholdValue() throws JNCException {
        YangUInt32 msIrauReqsThreshold = (YangUInt32)getValue("ms-irau-reqs-threshold");
        if (msIrauReqsThreshold == null) {
            msIrauReqsThreshold = new YangUInt32("0");  // default
        }
        return msIrauReqsThreshold;
    }

    /**
     * Sets the value for child leaf "ms-irau-reqs-threshold",
     * using instance of generated typedef class.
     * @param msIrauReqsThresholdValue The value to set.
     * @param msIrauReqsThresholdValue used during instantiation.
     */
    public void setMsIrauReqsThresholdValue(YangUInt32 msIrauReqsThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ms-irau-reqs-threshold",
            msIrauReqsThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ms-irau-reqs-threshold",
     * using Java primitive values.
     * @param msIrauReqsThresholdValue used during instantiation.
     */
    public void setMsIrauReqsThresholdValue(long msIrauReqsThresholdValue)
            throws JNCException {
        setMsIrauReqsThresholdValue(new YangUInt32(msIrauReqsThresholdValue));
    }

    /**
     * Sets the value for child leaf "ms-irau-reqs-threshold",
     * using a String value.
     * @param msIrauReqsThresholdValue used during instantiation.
     */
    public void setMsIrauReqsThresholdValue(String msIrauReqsThresholdValue)
            throws JNCException {
        setMsIrauReqsThresholdValue(new YangUInt32(msIrauReqsThresholdValue));
    }

    /**
     * Unsets the value for child leaf "ms-irau-reqs-threshold".
     */
    public void unsetMsIrauReqsThresholdValue() throws JNCException {
        delete("ms-irau-reqs-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ms-irau-reqs-threshold" leaf will not have a value.
     */
    public void addMsIrauReqsThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ms-irau-reqs-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ms-irau-reqs-threshold" with operation "replace".
     */
    public void markMsIrauReqsThresholdReplace() throws JNCException {
        markLeafReplace("msIrauReqsThreshold");
    }

    /**
     * Marks the leaf "ms-irau-reqs-threshold" with operation "merge".
     */
    public void markMsIrauReqsThresholdMerge() throws JNCException {
        markLeafMerge("msIrauReqsThreshold");
    }

    /**
     * Marks the leaf "ms-irau-reqs-threshold" with operation "create".
     */
    public void markMsIrauReqsThresholdCreate() throws JNCException {
        markLeafCreate("msIrauReqsThreshold");
    }

    /**
     * Marks the leaf "ms-irau-reqs-threshold" with operation "delete".
     */
    public void markMsIrauReqsThresholdDelete() throws JNCException {
        markLeafDelete("msIrauReqsThreshold");
    }

    /* Access methods for optional leaf child: "ms-pdpc-act-attempts-threshold". */

    /**
     * Gets the value for child leaf "ms-pdpc-act-attempts-threshold".
     * @return The value of the leaf.
     */
    public YangUInt32 getMsPdpcActAttemptsThresholdValue() throws JNCException {
        YangUInt32 msPdpcActAttemptsThreshold = (YangUInt32)getValue("ms-pdpc-act-attempts-threshold");
        if (msPdpcActAttemptsThreshold == null) {
            msPdpcActAttemptsThreshold = new YangUInt32("0");  // default
        }
        return msPdpcActAttemptsThreshold;
    }

    /**
     * Sets the value for child leaf "ms-pdpc-act-attempts-threshold",
     * using instance of generated typedef class.
     * @param msPdpcActAttemptsThresholdValue The value to set.
     * @param msPdpcActAttemptsThresholdValue used during instantiation.
     */
    public void setMsPdpcActAttemptsThresholdValue(YangUInt32 msPdpcActAttemptsThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ms-pdpc-act-attempts-threshold",
            msPdpcActAttemptsThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ms-pdpc-act-attempts-threshold",
     * using Java primitive values.
     * @param msPdpcActAttemptsThresholdValue used during instantiation.
     */
    public void setMsPdpcActAttemptsThresholdValue(long msPdpcActAttemptsThresholdValue)
            throws JNCException {
        setMsPdpcActAttemptsThresholdValue(new YangUInt32(msPdpcActAttemptsThresholdValue));
    }

    /**
     * Sets the value for child leaf "ms-pdpc-act-attempts-threshold",
     * using a String value.
     * @param msPdpcActAttemptsThresholdValue used during instantiation.
     */
    public void setMsPdpcActAttemptsThresholdValue(String msPdpcActAttemptsThresholdValue)
            throws JNCException {
        setMsPdpcActAttemptsThresholdValue(new YangUInt32(msPdpcActAttemptsThresholdValue));
    }

    /**
     * Unsets the value for child leaf "ms-pdpc-act-attempts-threshold".
     */
    public void unsetMsPdpcActAttemptsThresholdValue() throws JNCException {
        delete("ms-pdpc-act-attempts-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ms-pdpc-act-attempts-threshold" leaf will not have a value.
     */
    public void addMsPdpcActAttemptsThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ms-pdpc-act-attempts-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ms-pdpc-act-attempts-threshold" with operation "replace".
     */
    public void markMsPdpcActAttemptsThresholdReplace() throws JNCException {
        markLeafReplace("msPdpcActAttemptsThreshold");
    }

    /**
     * Marks the leaf "ms-pdpc-act-attempts-threshold" with operation "merge".
     */
    public void markMsPdpcActAttemptsThresholdMerge() throws JNCException {
        markLeafMerge("msPdpcActAttemptsThreshold");
    }

    /**
     * Marks the leaf "ms-pdpc-act-attempts-threshold" with operation "create".
     */
    public void markMsPdpcActAttemptsThresholdCreate() throws JNCException {
        markLeafCreate("msPdpcActAttemptsThreshold");
    }

    /**
     * Marks the leaf "ms-pdpc-act-attempts-threshold" with operation "delete".
     */
    public void markMsPdpcActAttemptsThresholdDelete() throws JNCException {
        markLeafDelete("msPdpcActAttemptsThreshold");
    }

    /* Access methods for optional leaf child: "ms-itau-reqs-threshold". */

    /**
     * Gets the value for child leaf "ms-itau-reqs-threshold".
     * @return The value of the leaf.
     */
    public YangUInt32 getMsItauReqsThresholdValue() throws JNCException {
        YangUInt32 msItauReqsThreshold = (YangUInt32)getValue("ms-itau-reqs-threshold");
        if (msItauReqsThreshold == null) {
            msItauReqsThreshold = new YangUInt32("0");  // default
        }
        return msItauReqsThreshold;
    }

    /**
     * Sets the value for child leaf "ms-itau-reqs-threshold",
     * using instance of generated typedef class.
     * @param msItauReqsThresholdValue The value to set.
     * @param msItauReqsThresholdValue used during instantiation.
     */
    public void setMsItauReqsThresholdValue(YangUInt32 msItauReqsThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ms-itau-reqs-threshold",
            msItauReqsThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ms-itau-reqs-threshold",
     * using Java primitive values.
     * @param msItauReqsThresholdValue used during instantiation.
     */
    public void setMsItauReqsThresholdValue(long msItauReqsThresholdValue)
            throws JNCException {
        setMsItauReqsThresholdValue(new YangUInt32(msItauReqsThresholdValue));
    }

    /**
     * Sets the value for child leaf "ms-itau-reqs-threshold",
     * using a String value.
     * @param msItauReqsThresholdValue used during instantiation.
     */
    public void setMsItauReqsThresholdValue(String msItauReqsThresholdValue)
            throws JNCException {
        setMsItauReqsThresholdValue(new YangUInt32(msItauReqsThresholdValue));
    }

    /**
     * Unsets the value for child leaf "ms-itau-reqs-threshold".
     */
    public void unsetMsItauReqsThresholdValue() throws JNCException {
        delete("ms-itau-reqs-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ms-itau-reqs-threshold" leaf will not have a value.
     */
    public void addMsItauReqsThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ms-itau-reqs-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ms-itau-reqs-threshold" with operation "replace".
     */
    public void markMsItauReqsThresholdReplace() throws JNCException {
        markLeafReplace("msItauReqsThreshold");
    }

    /**
     * Marks the leaf "ms-itau-reqs-threshold" with operation "merge".
     */
    public void markMsItauReqsThresholdMerge() throws JNCException {
        markLeafMerge("msItauReqsThreshold");
    }

    /**
     * Marks the leaf "ms-itau-reqs-threshold" with operation "create".
     */
    public void markMsItauReqsThresholdCreate() throws JNCException {
        markLeafCreate("msItauReqsThreshold");
    }

    /**
     * Marks the leaf "ms-itau-reqs-threshold" with operation "delete".
     */
    public void markMsItauReqsThresholdDelete() throws JNCException {
        markLeafDelete("msItauReqsThreshold");
    }

    /* Access methods for optional leaf child: "ms-dedbearer-reqs-threshold". */

    /**
     * Gets the value for child leaf "ms-dedbearer-reqs-threshold".
     * @return The value of the leaf.
     */
    public YangUInt32 getMsDedbearerReqsThresholdValue() throws JNCException {
        YangUInt32 msDedbearerReqsThreshold = (YangUInt32)getValue("ms-dedbearer-reqs-threshold");
        if (msDedbearerReqsThreshold == null) {
            msDedbearerReqsThreshold = new YangUInt32("0");  // default
        }
        return msDedbearerReqsThreshold;
    }

    /**
     * Sets the value for child leaf "ms-dedbearer-reqs-threshold",
     * using instance of generated typedef class.
     * @param msDedbearerReqsThresholdValue The value to set.
     * @param msDedbearerReqsThresholdValue used during instantiation.
     */
    public void setMsDedbearerReqsThresholdValue(YangUInt32 msDedbearerReqsThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ms-dedbearer-reqs-threshold",
            msDedbearerReqsThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ms-dedbearer-reqs-threshold",
     * using Java primitive values.
     * @param msDedbearerReqsThresholdValue used during instantiation.
     */
    public void setMsDedbearerReqsThresholdValue(long msDedbearerReqsThresholdValue)
            throws JNCException {
        setMsDedbearerReqsThresholdValue(new YangUInt32(msDedbearerReqsThresholdValue));
    }

    /**
     * Sets the value for child leaf "ms-dedbearer-reqs-threshold",
     * using a String value.
     * @param msDedbearerReqsThresholdValue used during instantiation.
     */
    public void setMsDedbearerReqsThresholdValue(String msDedbearerReqsThresholdValue)
            throws JNCException {
        setMsDedbearerReqsThresholdValue(new YangUInt32(msDedbearerReqsThresholdValue));
    }

    /**
     * Unsets the value for child leaf "ms-dedbearer-reqs-threshold".
     */
    public void unsetMsDedbearerReqsThresholdValue() throws JNCException {
        delete("ms-dedbearer-reqs-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ms-dedbearer-reqs-threshold" leaf will not have a value.
     */
    public void addMsDedbearerReqsThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ms-dedbearer-reqs-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ms-dedbearer-reqs-threshold" with operation "replace".
     */
    public void markMsDedbearerReqsThresholdReplace() throws JNCException {
        markLeafReplace("msDedbearerReqsThreshold");
    }

    /**
     * Marks the leaf "ms-dedbearer-reqs-threshold" with operation "merge".
     */
    public void markMsDedbearerReqsThresholdMerge() throws JNCException {
        markLeafMerge("msDedbearerReqsThreshold");
    }

    /**
     * Marks the leaf "ms-dedbearer-reqs-threshold" with operation "create".
     */
    public void markMsDedbearerReqsThresholdCreate() throws JNCException {
        markLeafCreate("msDedbearerReqsThreshold");
    }

    /**
     * Marks the leaf "ms-dedbearer-reqs-threshold" with operation "delete".
     */
    public void markMsDedbearerReqsThresholdDelete() throws JNCException {
        markLeafDelete("msDedbearerReqsThreshold");
    }

    /* Access methods for optional leaf child: "current-attach-subs-threshold". */

    /**
     * Gets the value for child leaf "current-attach-subs-threshold".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentAttachSubsThresholdValue() throws JNCException {
        YangUInt32 currentAttachSubsThreshold = (YangUInt32)getValue("current-attach-subs-threshold");
        if (currentAttachSubsThreshold == null) {
            currentAttachSubsThreshold = new YangUInt32("0");  // default
        }
        return currentAttachSubsThreshold;
    }

    /**
     * Sets the value for child leaf "current-attach-subs-threshold",
     * using instance of generated typedef class.
     * @param currentAttachSubsThresholdValue The value to set.
     * @param currentAttachSubsThresholdValue used during instantiation.
     */
    public void setCurrentAttachSubsThresholdValue(YangUInt32 currentAttachSubsThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-attach-subs-threshold",
            currentAttachSubsThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-attach-subs-threshold",
     * using Java primitive values.
     * @param currentAttachSubsThresholdValue used during instantiation.
     */
    public void setCurrentAttachSubsThresholdValue(long currentAttachSubsThresholdValue)
            throws JNCException {
        setCurrentAttachSubsThresholdValue(new YangUInt32(currentAttachSubsThresholdValue));
    }

    /**
     * Sets the value for child leaf "current-attach-subs-threshold",
     * using a String value.
     * @param currentAttachSubsThresholdValue used during instantiation.
     */
    public void setCurrentAttachSubsThresholdValue(String currentAttachSubsThresholdValue)
            throws JNCException {
        setCurrentAttachSubsThresholdValue(new YangUInt32(currentAttachSubsThresholdValue));
    }

    /**
     * Unsets the value for child leaf "current-attach-subs-threshold".
     */
    public void unsetCurrentAttachSubsThresholdValue() throws JNCException {
        delete("current-attach-subs-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-attach-subs-threshold" leaf will not have a value.
     */
    public void addCurrentAttachSubsThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-attach-subs-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-attach-subs-threshold" with operation "replace".
     */
    public void markCurrentAttachSubsThresholdReplace() throws JNCException {
        markLeafReplace("currentAttachSubsThreshold");
    }

    /**
     * Marks the leaf "current-attach-subs-threshold" with operation "merge".
     */
    public void markCurrentAttachSubsThresholdMerge() throws JNCException {
        markLeafMerge("currentAttachSubsThreshold");
    }

    /**
     * Marks the leaf "current-attach-subs-threshold" with operation "create".
     */
    public void markCurrentAttachSubsThresholdCreate() throws JNCException {
        markLeafCreate("currentAttachSubsThreshold");
    }

    /**
     * Marks the leaf "current-attach-subs-threshold" with operation "delete".
     */
    public void markCurrentAttachSubsThresholdDelete() throws JNCException {
        markLeafDelete("currentAttachSubsThreshold");
    }

    /* Access methods for optional leaf child: "current-pdp-context-threshold". */

    /**
     * Gets the value for child leaf "current-pdp-context-threshold".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentPdpContextThresholdValue() throws JNCException {
        YangUInt32 currentPdpContextThreshold = (YangUInt32)getValue("current-pdp-context-threshold");
        if (currentPdpContextThreshold == null) {
            currentPdpContextThreshold = new YangUInt32("0");  // default
        }
        return currentPdpContextThreshold;
    }

    /**
     * Sets the value for child leaf "current-pdp-context-threshold",
     * using instance of generated typedef class.
     * @param currentPdpContextThresholdValue The value to set.
     * @param currentPdpContextThresholdValue used during instantiation.
     */
    public void setCurrentPdpContextThresholdValue(YangUInt32 currentPdpContextThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-pdp-context-threshold",
            currentPdpContextThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-pdp-context-threshold",
     * using Java primitive values.
     * @param currentPdpContextThresholdValue used during instantiation.
     */
    public void setCurrentPdpContextThresholdValue(long currentPdpContextThresholdValue)
            throws JNCException {
        setCurrentPdpContextThresholdValue(new YangUInt32(currentPdpContextThresholdValue));
    }

    /**
     * Sets the value for child leaf "current-pdp-context-threshold",
     * using a String value.
     * @param currentPdpContextThresholdValue used during instantiation.
     */
    public void setCurrentPdpContextThresholdValue(String currentPdpContextThresholdValue)
            throws JNCException {
        setCurrentPdpContextThresholdValue(new YangUInt32(currentPdpContextThresholdValue));
    }

    /**
     * Unsets the value for child leaf "current-pdp-context-threshold".
     */
    public void unsetCurrentPdpContextThresholdValue() throws JNCException {
        delete("current-pdp-context-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-pdp-context-threshold" leaf will not have a value.
     */
    public void addCurrentPdpContextThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-pdp-context-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-pdp-context-threshold" with operation "replace".
     */
    public void markCurrentPdpContextThresholdReplace() throws JNCException {
        markLeafReplace("currentPdpContextThreshold");
    }

    /**
     * Marks the leaf "current-pdp-context-threshold" with operation "merge".
     */
    public void markCurrentPdpContextThresholdMerge() throws JNCException {
        markLeafMerge("currentPdpContextThreshold");
    }

    /**
     * Marks the leaf "current-pdp-context-threshold" with operation "create".
     */
    public void markCurrentPdpContextThresholdCreate() throws JNCException {
        markLeafCreate("currentPdpContextThreshold");
    }

    /**
     * Marks the leaf "current-pdp-context-threshold" with operation "delete".
     */
    public void markCurrentPdpContextThresholdDelete() throws JNCException {
        markLeafDelete("currentPdpContextThreshold");
    }

    /* Access methods for optional leaf child: "current-act-bearer-threshold". */

    /**
     * Gets the value for child leaf "current-act-bearer-threshold".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentActBearerThresholdValue() throws JNCException {
        YangUInt32 currentActBearerThreshold = (YangUInt32)getValue("current-act-bearer-threshold");
        if (currentActBearerThreshold == null) {
            currentActBearerThreshold = new YangUInt32("0");  // default
        }
        return currentActBearerThreshold;
    }

    /**
     * Sets the value for child leaf "current-act-bearer-threshold",
     * using instance of generated typedef class.
     * @param currentActBearerThresholdValue The value to set.
     * @param currentActBearerThresholdValue used during instantiation.
     */
    public void setCurrentActBearerThresholdValue(YangUInt32 currentActBearerThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-act-bearer-threshold",
            currentActBearerThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-act-bearer-threshold",
     * using Java primitive values.
     * @param currentActBearerThresholdValue used during instantiation.
     */
    public void setCurrentActBearerThresholdValue(long currentActBearerThresholdValue)
            throws JNCException {
        setCurrentActBearerThresholdValue(new YangUInt32(currentActBearerThresholdValue));
    }

    /**
     * Sets the value for child leaf "current-act-bearer-threshold",
     * using a String value.
     * @param currentActBearerThresholdValue used during instantiation.
     */
    public void setCurrentActBearerThresholdValue(String currentActBearerThresholdValue)
            throws JNCException {
        setCurrentActBearerThresholdValue(new YangUInt32(currentActBearerThresholdValue));
    }

    /**
     * Unsets the value for child leaf "current-act-bearer-threshold".
     */
    public void unsetCurrentActBearerThresholdValue() throws JNCException {
        delete("current-act-bearer-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-act-bearer-threshold" leaf will not have a value.
     */
    public void addCurrentActBearerThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-act-bearer-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-act-bearer-threshold" with operation "replace".
     */
    public void markCurrentActBearerThresholdReplace() throws JNCException {
        markLeafReplace("currentActBearerThreshold");
    }

    /**
     * Marks the leaf "current-act-bearer-threshold" with operation "merge".
     */
    public void markCurrentActBearerThresholdMerge() throws JNCException {
        markLeafMerge("currentActBearerThreshold");
    }

    /**
     * Marks the leaf "current-act-bearer-threshold" with operation "create".
     */
    public void markCurrentActBearerThresholdCreate() throws JNCException {
        markLeafCreate("currentActBearerThreshold");
    }

    /**
     * Marks the leaf "current-act-bearer-threshold" with operation "delete".
     */
    public void markCurrentActBearerThresholdDelete() throws JNCException {
        markLeafDelete("currentActBearerThreshold");
    }

    /* Access methods for optional leaf child: "load-control". */

    /**
     * Gets the value for child leaf "load-control".
     * @return The value of the leaf.
     */
    public YangEnumeration getLoadControlValue() throws JNCException {
        YangEnumeration loadControl = (YangEnumeration)getValue("load-control");
        if (loadControl == null) {
            loadControl = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return loadControl;
    }

    /**
     * Sets the value for child leaf "load-control",
     * using instance of generated typedef class.
     * @param loadControlValue The value to set.
     * @param loadControlValue used during instantiation.
     */
    public void setLoadControlValue(YangEnumeration loadControlValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "load-control",
            loadControlValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "load-control",
     * using a String value.
     * @param loadControlValue used during instantiation.
     */
    public void setLoadControlValue(String loadControlValue)
            throws JNCException {
        setLoadControlValue(new YangEnumeration(loadControlValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "load-control".
     */
    public void unsetLoadControlValue() throws JNCException {
        delete("load-control");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "load-control" leaf will not have a value.
     */
    public void addLoadControl() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "load-control",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "load-control" with operation "replace".
     */
    public void markLoadControlReplace() throws JNCException {
        markLeafReplace("loadControl");
    }

    /**
     * Marks the leaf "load-control" with operation "merge".
     */
    public void markLoadControlMerge() throws JNCException {
        markLeafMerge("loadControl");
    }

    /**
     * Marks the leaf "load-control" with operation "create".
     */
    public void markLoadControlCreate() throws JNCException {
        markLeafCreate("loadControl");
    }

    /**
     * Marks the leaf "load-control" with operation "delete".
     */
    public void markLoadControlDelete() throws JNCException {
        markLeafDelete("loadControl");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
