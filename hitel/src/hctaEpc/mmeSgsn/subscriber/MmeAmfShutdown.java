/* 
 * @(#)MmeAmfShutdown.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/mme-amf-shutdown"
 * <p>
 * See line 1878 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeAmfShutdown extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeAmfShutdown object.
     */
    public MmeAmfShutdown() {
        super(Epc.NAMESPACE, "mme-amf-shutdown");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeAmfShutdown clone() {
        return (MmeAmfShutdown)cloneContent(new MmeAmfShutdown());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeAmfShutdown cloneShallow() {
        return (MmeAmfShutdown)cloneShallowContent(new MmeAmfShutdown());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "connected-subs-action",
            "idle-subs-action",
            "duration",
        };
    }

    /* Access methods for optional leaf child: "connected-subs-action". */

    /**
     * Gets the value for child leaf "connected-subs-action".
     * @return The value of the leaf.
     */
    public YangEnumeration getConnectedSubsActionValue() throws JNCException {
        YangEnumeration connectedSubsAction = (YangEnumeration)getValue("connected-subs-action");
        if (connectedSubsAction == null) {
            connectedSubsAction = new YangEnumeration("offload-all", new String[] {  // default
                "offload-all",
                "offload-user-inactivity",
                "detach",
            });
        }
        return connectedSubsAction;
    }

    /**
     * Sets the value for child leaf "connected-subs-action",
     * using instance of generated typedef class.
     * @param connectedSubsActionValue The value to set.
     * @param connectedSubsActionValue used during instantiation.
     */
    public void setConnectedSubsActionValue(YangEnumeration connectedSubsActionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "connected-subs-action",
            connectedSubsActionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "connected-subs-action",
     * using a String value.
     * @param connectedSubsActionValue used during instantiation.
     */
    public void setConnectedSubsActionValue(String connectedSubsActionValue)
            throws JNCException {
        setConnectedSubsActionValue(new YangEnumeration(connectedSubsActionValue, new String[] {
             "offload-all",
             "offload-user-inactivity",
             "detach",
        }));
    }

    /**
     * Unsets the value for child leaf "connected-subs-action".
     */
    public void unsetConnectedSubsActionValue() throws JNCException {
        delete("connected-subs-action");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "connected-subs-action" leaf will not have a value.
     */
    public void addConnectedSubsAction() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "connected-subs-action",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "connected-subs-action" with operation "replace".
     */
    public void markConnectedSubsActionReplace() throws JNCException {
        markLeafReplace("connectedSubsAction");
    }

    /**
     * Marks the leaf "connected-subs-action" with operation "merge".
     */
    public void markConnectedSubsActionMerge() throws JNCException {
        markLeafMerge("connectedSubsAction");
    }

    /**
     * Marks the leaf "connected-subs-action" with operation "create".
     */
    public void markConnectedSubsActionCreate() throws JNCException {
        markLeafCreate("connectedSubsAction");
    }

    /**
     * Marks the leaf "connected-subs-action" with operation "delete".
     */
    public void markConnectedSubsActionDelete() throws JNCException {
        markLeafDelete("connectedSubsAction");
    }

    /* Access methods for optional leaf child: "idle-subs-action". */

    /**
     * Gets the value for child leaf "idle-subs-action".
     * @return The value of the leaf.
     */
    public YangEnumeration getIdleSubsActionValue() throws JNCException {
        YangEnumeration idleSubsAction = (YangEnumeration)getValue("idle-subs-action");
        if (idleSubsAction == null) {
            idleSubsAction = new YangEnumeration("offload-with-paging", new String[] {  // default
                "offload-after-tau-sr",
                "offload-after-tau",
                "offload-after-rau",
                "offload-with-paging",
                "implicit-detach",
            });
        }
        return idleSubsAction;
    }

    /**
     * Sets the value for child leaf "idle-subs-action",
     * using instance of generated typedef class.
     * @param idleSubsActionValue The value to set.
     * @param idleSubsActionValue used during instantiation.
     */
    public void setIdleSubsActionValue(YangEnumeration idleSubsActionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "idle-subs-action",
            idleSubsActionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "idle-subs-action",
     * using a String value.
     * @param idleSubsActionValue used during instantiation.
     */
    public void setIdleSubsActionValue(String idleSubsActionValue)
            throws JNCException {
        setIdleSubsActionValue(new YangEnumeration(idleSubsActionValue, new String[] {
             "offload-after-tau-sr",
             "offload-after-tau",
             "offload-after-rau",
             "offload-with-paging",
             "implicit-detach",
        }));
    }

    /**
     * Unsets the value for child leaf "idle-subs-action".
     */
    public void unsetIdleSubsActionValue() throws JNCException {
        delete("idle-subs-action");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "idle-subs-action" leaf will not have a value.
     */
    public void addIdleSubsAction() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "idle-subs-action",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "idle-subs-action" with operation "replace".
     */
    public void markIdleSubsActionReplace() throws JNCException {
        markLeafReplace("idleSubsAction");
    }

    /**
     * Marks the leaf "idle-subs-action" with operation "merge".
     */
    public void markIdleSubsActionMerge() throws JNCException {
        markLeafMerge("idleSubsAction");
    }

    /**
     * Marks the leaf "idle-subs-action" with operation "create".
     */
    public void markIdleSubsActionCreate() throws JNCException {
        markLeafCreate("idleSubsAction");
    }

    /**
     * Marks the leaf "idle-subs-action" with operation "delete".
     */
    public void markIdleSubsActionDelete() throws JNCException {
        markLeafDelete("idleSubsAction");
    }

    /* Access methods for optional leaf child: "duration". */

    /**
     * Gets the value for child leaf "duration".
     * @return The value of the leaf.
     */
    public YangUInt16 getDurationValue() throws JNCException {
        YangUInt16 duration = (YangUInt16)getValue("duration");
        if (duration == null) {
            duration = new YangUInt16("20");  // default
        }
        return duration;
    }

    /**
     * Sets the value for child leaf "duration",
     * using instance of generated typedef class.
     * @param durationValue The value to set.
     * @param durationValue used during instantiation.
     */
    public void setDurationValue(YangUInt16 durationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "duration",
            durationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "duration",
     * using Java primitive values.
     * @param durationValue used during instantiation.
     */
    public void setDurationValue(int durationValue) throws JNCException {
        setDurationValue(new YangUInt16(durationValue));
    }

    /**
     * Sets the value for child leaf "duration",
     * using a String value.
     * @param durationValue used during instantiation.
     */
    public void setDurationValue(String durationValue) throws JNCException {
        setDurationValue(new YangUInt16(durationValue));
    }

    /**
     * Unsets the value for child leaf "duration".
     */
    public void unsetDurationValue() throws JNCException {
        delete("duration");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "duration" leaf will not have a value.
     */
    public void addDuration() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "duration",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "duration" with operation "replace".
     */
    public void markDurationReplace() throws JNCException {
        markLeafReplace("duration");
    }

    /**
     * Marks the leaf "duration" with operation "merge".
     */
    public void markDurationMerge() throws JNCException {
        markLeafMerge("duration");
    }

    /**
     * Marks the leaf "duration" with operation "create".
     */
    public void markDurationCreate() throws JNCException {
        markLeafCreate("duration");
    }

    /**
     * Marks the leaf "duration" with operation "delete".
     */
    public void markDurationDelete() throws JNCException {
        markLeafDelete("duration");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
