/* 
 * @(#)MmeLoadControlProfile.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/mme-load-control-profile"
 * <p>
 * See line 2143 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeLoadControlProfile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeLoadControlProfile object.
     */
    public MmeLoadControlProfile() {
        super(Epc.NAMESPACE, "mme-load-control-profile");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeLoadControlProfile clone() {
        return (MmeLoadControlProfile)cloneContent(new MmeLoadControlProfile());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeLoadControlProfile cloneShallow() {
        return (MmeLoadControlProfile)cloneShallowContent(new MmeLoadControlProfile());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "alarm-update-interval",
            "attach-reject-cause",
            "irau-reject-cause",
            "ms-act-reject-cause",
            "itau-reject-cause",
        };
    }

    /* Access methods for optional leaf child: "alarm-update-interval". */

    /**
     * Gets the value for child leaf "alarm-update-interval".
     * @return The value of the leaf.
     */
    public YangUInt8 getAlarmUpdateIntervalValue() throws JNCException {
        YangUInt8 alarmUpdateInterval = (YangUInt8)getValue("alarm-update-interval");
        if (alarmUpdateInterval == null) {
            alarmUpdateInterval = new YangUInt8("15");  // default
        }
        return alarmUpdateInterval;
    }

    /**
     * Sets the value for child leaf "alarm-update-interval",
     * using instance of generated typedef class.
     * @param alarmUpdateIntervalValue The value to set.
     * @param alarmUpdateIntervalValue used during instantiation.
     */
    public void setAlarmUpdateIntervalValue(YangUInt8 alarmUpdateIntervalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alarm-update-interval",
            alarmUpdateIntervalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "alarm-update-interval",
     * using Java primitive values.
     * @param alarmUpdateIntervalValue used during instantiation.
     */
    public void setAlarmUpdateIntervalValue(short alarmUpdateIntervalValue)
            throws JNCException {
        setAlarmUpdateIntervalValue(new YangUInt8(alarmUpdateIntervalValue));
    }

    /**
     * Sets the value for child leaf "alarm-update-interval",
     * using a String value.
     * @param alarmUpdateIntervalValue used during instantiation.
     */
    public void setAlarmUpdateIntervalValue(String alarmUpdateIntervalValue)
            throws JNCException {
        setAlarmUpdateIntervalValue(new YangUInt8(alarmUpdateIntervalValue));
    }

    /**
     * Unsets the value for child leaf "alarm-update-interval".
     */
    public void unsetAlarmUpdateIntervalValue() throws JNCException {
        delete("alarm-update-interval");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "alarm-update-interval" leaf will not have a value.
     */
    public void addAlarmUpdateInterval() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alarm-update-interval",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "alarm-update-interval" with operation "replace".
     */
    public void markAlarmUpdateIntervalReplace() throws JNCException {
        markLeafReplace("alarmUpdateInterval");
    }

    /**
     * Marks the leaf "alarm-update-interval" with operation "merge".
     */
    public void markAlarmUpdateIntervalMerge() throws JNCException {
        markLeafMerge("alarmUpdateInterval");
    }

    /**
     * Marks the leaf "alarm-update-interval" with operation "create".
     */
    public void markAlarmUpdateIntervalCreate() throws JNCException {
        markLeafCreate("alarmUpdateInterval");
    }

    /**
     * Marks the leaf "alarm-update-interval" with operation "delete".
     */
    public void markAlarmUpdateIntervalDelete() throws JNCException {
        markLeafDelete("alarmUpdateInterval");
    }

    /* Access methods for optional leaf child: "attach-reject-cause". */

    /**
     * Gets the value for child leaf "attach-reject-cause".
     * @return The value of the leaf.
     */
    public YangUInt8 getAttachRejectCauseValue() throws JNCException {
        YangUInt8 attachRejectCause = (YangUInt8)getValue("attach-reject-cause");
        if (attachRejectCause == null) {
            attachRejectCause = new YangUInt8("0");  // default
        }
        return attachRejectCause;
    }

    /**
     * Sets the value for child leaf "attach-reject-cause",
     * using instance of generated typedef class.
     * @param attachRejectCauseValue The value to set.
     * @param attachRejectCauseValue used during instantiation.
     */
    public void setAttachRejectCauseValue(YangUInt8 attachRejectCauseValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attach-reject-cause",
            attachRejectCauseValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "attach-reject-cause",
     * using Java primitive values.
     * @param attachRejectCauseValue used during instantiation.
     */
    public void setAttachRejectCauseValue(short attachRejectCauseValue)
            throws JNCException {
        setAttachRejectCauseValue(new YangUInt8(attachRejectCauseValue));
    }

    /**
     * Sets the value for child leaf "attach-reject-cause",
     * using a String value.
     * @param attachRejectCauseValue used during instantiation.
     */
    public void setAttachRejectCauseValue(String attachRejectCauseValue)
            throws JNCException {
        setAttachRejectCauseValue(new YangUInt8(attachRejectCauseValue));
    }

    /**
     * Unsets the value for child leaf "attach-reject-cause".
     */
    public void unsetAttachRejectCauseValue() throws JNCException {
        delete("attach-reject-cause");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "attach-reject-cause" leaf will not have a value.
     */
    public void addAttachRejectCause() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attach-reject-cause",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "attach-reject-cause" with operation "replace".
     */
    public void markAttachRejectCauseReplace() throws JNCException {
        markLeafReplace("attachRejectCause");
    }

    /**
     * Marks the leaf "attach-reject-cause" with operation "merge".
     */
    public void markAttachRejectCauseMerge() throws JNCException {
        markLeafMerge("attachRejectCause");
    }

    /**
     * Marks the leaf "attach-reject-cause" with operation "create".
     */
    public void markAttachRejectCauseCreate() throws JNCException {
        markLeafCreate("attachRejectCause");
    }

    /**
     * Marks the leaf "attach-reject-cause" with operation "delete".
     */
    public void markAttachRejectCauseDelete() throws JNCException {
        markLeafDelete("attachRejectCause");
    }

    /* Access methods for optional leaf child: "irau-reject-cause". */

    /**
     * Gets the value for child leaf "irau-reject-cause".
     * @return The value of the leaf.
     */
    public YangUInt8 getIrauRejectCauseValue() throws JNCException {
        YangUInt8 irauRejectCause = (YangUInt8)getValue("irau-reject-cause");
        if (irauRejectCause == null) {
            irauRejectCause = new YangUInt8("0");  // default
        }
        return irauRejectCause;
    }

    /**
     * Sets the value for child leaf "irau-reject-cause",
     * using instance of generated typedef class.
     * @param irauRejectCauseValue The value to set.
     * @param irauRejectCauseValue used during instantiation.
     */
    public void setIrauRejectCauseValue(YangUInt8 irauRejectCauseValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "irau-reject-cause",
            irauRejectCauseValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "irau-reject-cause",
     * using Java primitive values.
     * @param irauRejectCauseValue used during instantiation.
     */
    public void setIrauRejectCauseValue(short irauRejectCauseValue)
            throws JNCException {
        setIrauRejectCauseValue(new YangUInt8(irauRejectCauseValue));
    }

    /**
     * Sets the value for child leaf "irau-reject-cause",
     * using a String value.
     * @param irauRejectCauseValue used during instantiation.
     */
    public void setIrauRejectCauseValue(String irauRejectCauseValue)
            throws JNCException {
        setIrauRejectCauseValue(new YangUInt8(irauRejectCauseValue));
    }

    /**
     * Unsets the value for child leaf "irau-reject-cause".
     */
    public void unsetIrauRejectCauseValue() throws JNCException {
        delete("irau-reject-cause");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "irau-reject-cause" leaf will not have a value.
     */
    public void addIrauRejectCause() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "irau-reject-cause",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "irau-reject-cause" with operation "replace".
     */
    public void markIrauRejectCauseReplace() throws JNCException {
        markLeafReplace("irauRejectCause");
    }

    /**
     * Marks the leaf "irau-reject-cause" with operation "merge".
     */
    public void markIrauRejectCauseMerge() throws JNCException {
        markLeafMerge("irauRejectCause");
    }

    /**
     * Marks the leaf "irau-reject-cause" with operation "create".
     */
    public void markIrauRejectCauseCreate() throws JNCException {
        markLeafCreate("irauRejectCause");
    }

    /**
     * Marks the leaf "irau-reject-cause" with operation "delete".
     */
    public void markIrauRejectCauseDelete() throws JNCException {
        markLeafDelete("irauRejectCause");
    }

    /* Access methods for optional leaf child: "ms-act-reject-cause". */

    /**
     * Gets the value for child leaf "ms-act-reject-cause".
     * @return The value of the leaf.
     */
    public YangUInt8 getMsActRejectCauseValue() throws JNCException {
        YangUInt8 msActRejectCause = (YangUInt8)getValue("ms-act-reject-cause");
        if (msActRejectCause == null) {
            msActRejectCause = new YangUInt8("0");  // default
        }
        return msActRejectCause;
    }

    /**
     * Sets the value for child leaf "ms-act-reject-cause",
     * using instance of generated typedef class.
     * @param msActRejectCauseValue The value to set.
     * @param msActRejectCauseValue used during instantiation.
     */
    public void setMsActRejectCauseValue(YangUInt8 msActRejectCauseValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ms-act-reject-cause",
            msActRejectCauseValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ms-act-reject-cause",
     * using Java primitive values.
     * @param msActRejectCauseValue used during instantiation.
     */
    public void setMsActRejectCauseValue(short msActRejectCauseValue)
            throws JNCException {
        setMsActRejectCauseValue(new YangUInt8(msActRejectCauseValue));
    }

    /**
     * Sets the value for child leaf "ms-act-reject-cause",
     * using a String value.
     * @param msActRejectCauseValue used during instantiation.
     */
    public void setMsActRejectCauseValue(String msActRejectCauseValue)
            throws JNCException {
        setMsActRejectCauseValue(new YangUInt8(msActRejectCauseValue));
    }

    /**
     * Unsets the value for child leaf "ms-act-reject-cause".
     */
    public void unsetMsActRejectCauseValue() throws JNCException {
        delete("ms-act-reject-cause");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ms-act-reject-cause" leaf will not have a value.
     */
    public void addMsActRejectCause() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ms-act-reject-cause",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ms-act-reject-cause" with operation "replace".
     */
    public void markMsActRejectCauseReplace() throws JNCException {
        markLeafReplace("msActRejectCause");
    }

    /**
     * Marks the leaf "ms-act-reject-cause" with operation "merge".
     */
    public void markMsActRejectCauseMerge() throws JNCException {
        markLeafMerge("msActRejectCause");
    }

    /**
     * Marks the leaf "ms-act-reject-cause" with operation "create".
     */
    public void markMsActRejectCauseCreate() throws JNCException {
        markLeafCreate("msActRejectCause");
    }

    /**
     * Marks the leaf "ms-act-reject-cause" with operation "delete".
     */
    public void markMsActRejectCauseDelete() throws JNCException {
        markLeafDelete("msActRejectCause");
    }

    /* Access methods for optional leaf child: "itau-reject-cause". */

    /**
     * Gets the value for child leaf "itau-reject-cause".
     * @return The value of the leaf.
     */
    public YangUInt8 getItauRejectCauseValue() throws JNCException {
        YangUInt8 itauRejectCause = (YangUInt8)getValue("itau-reject-cause");
        if (itauRejectCause == null) {
            itauRejectCause = new YangUInt8("0");  // default
        }
        return itauRejectCause;
    }

    /**
     * Sets the value for child leaf "itau-reject-cause",
     * using instance of generated typedef class.
     * @param itauRejectCauseValue The value to set.
     * @param itauRejectCauseValue used during instantiation.
     */
    public void setItauRejectCauseValue(YangUInt8 itauRejectCauseValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "itau-reject-cause",
            itauRejectCauseValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "itau-reject-cause",
     * using Java primitive values.
     * @param itauRejectCauseValue used during instantiation.
     */
    public void setItauRejectCauseValue(short itauRejectCauseValue)
            throws JNCException {
        setItauRejectCauseValue(new YangUInt8(itauRejectCauseValue));
    }

    /**
     * Sets the value for child leaf "itau-reject-cause",
     * using a String value.
     * @param itauRejectCauseValue used during instantiation.
     */
    public void setItauRejectCauseValue(String itauRejectCauseValue)
            throws JNCException {
        setItauRejectCauseValue(new YangUInt8(itauRejectCauseValue));
    }

    /**
     * Unsets the value for child leaf "itau-reject-cause".
     */
    public void unsetItauRejectCauseValue() throws JNCException {
        delete("itau-reject-cause");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "itau-reject-cause" leaf will not have a value.
     */
    public void addItauRejectCause() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "itau-reject-cause",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "itau-reject-cause" with operation "replace".
     */
    public void markItauRejectCauseReplace() throws JNCException {
        markLeafReplace("itauRejectCause");
    }

    /**
     * Marks the leaf "itau-reject-cause" with operation "merge".
     */
    public void markItauRejectCauseMerge() throws JNCException {
        markLeafMerge("itauRejectCause");
    }

    /**
     * Marks the leaf "itau-reject-cause" with operation "create".
     */
    public void markItauRejectCauseCreate() throws JNCException {
        markLeafCreate("itauRejectCause");
    }

    /**
     * Marks the leaf "itau-reject-cause" with operation "delete".
     */
    public void markItauRejectCauseDelete() throws JNCException {
        markLeafDelete("itauRejectCause");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
