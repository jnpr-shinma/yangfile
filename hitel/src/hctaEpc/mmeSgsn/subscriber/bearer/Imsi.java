/* 
 * @(#)Imsi.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber.bearer;
import .hctaEpc.ImeiT;
import .hctaEpc.ImeisvT;
import .hctaEpc.ImsiT;
import .hctaEpc.MsisdnT;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/bearer/imsi"
 * <p>
 * See line 1380 in
 * scCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Imsi extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Imsi object.
     */
    public Imsi() {
        super(Epc.NAMESPACE, "imsi");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Imsi clone() {
        return (Imsi)cloneContent(new Imsi());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Imsi cloneShallow() {
        return (Imsi)cloneShallowContent(new Imsi());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "imsi",
            "eps-bearer-id",
            "imei",
            "imeisv",
            "msisdn",
            "link-bearer-id",
            "eps-qos-in-use",
            "pgw-data-teid-or-grekey",
            "pgw-data-ip-address",
            "bearer-pgw-logical-name",
            "sgw-data-teid",
            "sgw-data-ip-address",
            "bearer-sgw-logical-name",
            "enb-data-teid",
            "enb-data-ip-address",
            "is-default-bearer",
            "bearer-s5-s8-protocoltype",
            "eps-arp-priority-level",
        };
    }

    /* Access methods for leaf child: "imsi". */

    /**
     * Gets the value for child leaf "imsi".
     * @return The value of the leaf.
     */
    public ImsiT getImsiValue() throws JNCException {
        return (ImsiT)getValue("imsi");
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a JNC type value.
     * @param imsiValue The value to set.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(ImsiT imsiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            imsiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a String value.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(String imsiValue) throws JNCException {
        setImsiValue(new ImsiT(imsiValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imsi" leaf will not have a value.
     */
    public void addImsi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "eps-bearer-id". */

    /**
     * Gets the value for child leaf "eps-bearer-id".
     * @return The value of the leaf.
     */
    public YangUInt8 getEpsBearerIdValue() throws JNCException {
        return (YangUInt8)getValue("eps-bearer-id");
    }

    /**
     * Sets the value for child leaf "eps-bearer-id",
     * using instance of generated typedef class.
     * @param epsBearerIdValue The value to set.
     * @param epsBearerIdValue used during instantiation.
     */
    public void setEpsBearerIdValue(YangUInt8 epsBearerIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eps-bearer-id",
            epsBearerIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "eps-bearer-id",
     * using Java primitive values.
     * @param epsBearerIdValue used during instantiation.
     */
    public void setEpsBearerIdValue(short epsBearerIdValue) throws JNCException {
        setEpsBearerIdValue(new YangUInt8(epsBearerIdValue));
    }

    /**
     * Sets the value for child leaf "eps-bearer-id",
     * using a String value.
     * @param epsBearerIdValue used during instantiation.
     */
    public void setEpsBearerIdValue(String epsBearerIdValue)
            throws JNCException {
        setEpsBearerIdValue(new YangUInt8(epsBearerIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "eps-bearer-id" leaf will not have a value.
     */
    public void addEpsBearerId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eps-bearer-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "imei". */

    /**
     * Gets the value for child leaf "imei".
     * @return The value of the leaf.
     */
    public ImeiT getImeiValue() throws JNCException {
        return (ImeiT)getValue("imei");
    }

    /**
     * Sets the value for child leaf "imei",
     * using a JNC type value.
     * @param imeiValue The value to set.
     * @param imeiValue used during instantiation.
     */
    public void setImeiValue(ImeiT imeiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imei",
            imeiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imei",
     * using a String value.
     * @param imeiValue used during instantiation.
     */
    public void setImeiValue(String imeiValue) throws JNCException {
        setImeiValue(new ImeiT(imeiValue));
    }

    /**
     * Unsets the value for child leaf "imei".
     */
    public void unsetImeiValue() throws JNCException {
        delete("imei");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imei" leaf will not have a value.
     */
    public void addImei() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imei",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "imei" with operation "replace".
     */
    public void markImeiReplace() throws JNCException {
        markLeafReplace("imei");
    }

    /**
     * Marks the leaf "imei" with operation "merge".
     */
    public void markImeiMerge() throws JNCException {
        markLeafMerge("imei");
    }

    /**
     * Marks the leaf "imei" with operation "create".
     */
    public void markImeiCreate() throws JNCException {
        markLeafCreate("imei");
    }

    /**
     * Marks the leaf "imei" with operation "delete".
     */
    public void markImeiDelete() throws JNCException {
        markLeafDelete("imei");
    }

    /* Access methods for optional leaf child: "imeisv". */

    /**
     * Gets the value for child leaf "imeisv".
     * @return The value of the leaf.
     */
    public ImeisvT getImeisvValue() throws JNCException {
        return (ImeisvT)getValue("imeisv");
    }

    /**
     * Sets the value for child leaf "imeisv",
     * using a JNC type value.
     * @param imeisvValue The value to set.
     * @param imeisvValue used during instantiation.
     */
    public void setImeisvValue(ImeisvT imeisvValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imeisv",
            imeisvValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imeisv",
     * using a String value.
     * @param imeisvValue used during instantiation.
     */
    public void setImeisvValue(String imeisvValue) throws JNCException {
        setImeisvValue(new ImeisvT(imeisvValue));
    }

    /**
     * Unsets the value for child leaf "imeisv".
     */
    public void unsetImeisvValue() throws JNCException {
        delete("imeisv");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imeisv" leaf will not have a value.
     */
    public void addImeisv() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imeisv",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "imeisv" with operation "replace".
     */
    public void markImeisvReplace() throws JNCException {
        markLeafReplace("imeisv");
    }

    /**
     * Marks the leaf "imeisv" with operation "merge".
     */
    public void markImeisvMerge() throws JNCException {
        markLeafMerge("imeisv");
    }

    /**
     * Marks the leaf "imeisv" with operation "create".
     */
    public void markImeisvCreate() throws JNCException {
        markLeafCreate("imeisv");
    }

    /**
     * Marks the leaf "imeisv" with operation "delete".
     */
    public void markImeisvDelete() throws JNCException {
        markLeafDelete("imeisv");
    }

    /* Access methods for optional leaf child: "msisdn". */

    /**
     * Gets the value for child leaf "msisdn".
     * @return The value of the leaf.
     */
    public MsisdnT getMsisdnValue() throws JNCException {
        return (MsisdnT)getValue("msisdn");
    }

    /**
     * Sets the value for child leaf "msisdn",
     * using a JNC type value.
     * @param msisdnValue The value to set.
     * @param msisdnValue used during instantiation.
     */
    public void setMsisdnValue(MsisdnT msisdnValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "msisdn",
            msisdnValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "msisdn",
     * using a String value.
     * @param msisdnValue used during instantiation.
     */
    public void setMsisdnValue(String msisdnValue) throws JNCException {
        setMsisdnValue(new MsisdnT(msisdnValue));
    }

    /**
     * Unsets the value for child leaf "msisdn".
     */
    public void unsetMsisdnValue() throws JNCException {
        delete("msisdn");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "msisdn" leaf will not have a value.
     */
    public void addMsisdn() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "msisdn",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "msisdn" with operation "replace".
     */
    public void markMsisdnReplace() throws JNCException {
        markLeafReplace("msisdn");
    }

    /**
     * Marks the leaf "msisdn" with operation "merge".
     */
    public void markMsisdnMerge() throws JNCException {
        markLeafMerge("msisdn");
    }

    /**
     * Marks the leaf "msisdn" with operation "create".
     */
    public void markMsisdnCreate() throws JNCException {
        markLeafCreate("msisdn");
    }

    /**
     * Marks the leaf "msisdn" with operation "delete".
     */
    public void markMsisdnDelete() throws JNCException {
        markLeafDelete("msisdn");
    }

    /* Access methods for optional leaf child: "link-bearer-id". */

    /**
     * Gets the value for child leaf "link-bearer-id".
     * @return The value of the leaf.
     */
    public YangUInt8 getLinkBearerIdValue() throws JNCException {
        return (YangUInt8)getValue("link-bearer-id");
    }

    /**
     * Sets the value for child leaf "link-bearer-id",
     * using instance of generated typedef class.
     * @param linkBearerIdValue The value to set.
     * @param linkBearerIdValue used during instantiation.
     */
    public void setLinkBearerIdValue(YangUInt8 linkBearerIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "link-bearer-id",
            linkBearerIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "link-bearer-id",
     * using Java primitive values.
     * @param linkBearerIdValue used during instantiation.
     */
    public void setLinkBearerIdValue(short linkBearerIdValue)
            throws JNCException {
        setLinkBearerIdValue(new YangUInt8(linkBearerIdValue));
    }

    /**
     * Sets the value for child leaf "link-bearer-id",
     * using a String value.
     * @param linkBearerIdValue used during instantiation.
     */
    public void setLinkBearerIdValue(String linkBearerIdValue)
            throws JNCException {
        setLinkBearerIdValue(new YangUInt8(linkBearerIdValue));
    }

    /**
     * Unsets the value for child leaf "link-bearer-id".
     */
    public void unsetLinkBearerIdValue() throws JNCException {
        delete("link-bearer-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "link-bearer-id" leaf will not have a value.
     */
    public void addLinkBearerId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "link-bearer-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "link-bearer-id" with operation "replace".
     */
    public void markLinkBearerIdReplace() throws JNCException {
        markLeafReplace("linkBearerId");
    }

    /**
     * Marks the leaf "link-bearer-id" with operation "merge".
     */
    public void markLinkBearerIdMerge() throws JNCException {
        markLeafMerge("linkBearerId");
    }

    /**
     * Marks the leaf "link-bearer-id" with operation "create".
     */
    public void markLinkBearerIdCreate() throws JNCException {
        markLeafCreate("linkBearerId");
    }

    /**
     * Marks the leaf "link-bearer-id" with operation "delete".
     */
    public void markLinkBearerIdDelete() throws JNCException {
        markLeafDelete("linkBearerId");
    }

    /* Access methods for optional leaf child: "eps-qos-in-use". */

    /**
     * Gets the value for child leaf "eps-qos-in-use".
     * @return The value of the leaf.
     */
    public YangString getEpsQosInUseValue() throws JNCException {
        return (YangString)getValue("eps-qos-in-use");
    }

    /**
     * Sets the value for child leaf "eps-qos-in-use",
     * using instance of generated typedef class.
     * @param epsQosInUseValue The value to set.
     * @param epsQosInUseValue used during instantiation.
     */
    public void setEpsQosInUseValue(YangString epsQosInUseValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eps-qos-in-use",
            epsQosInUseValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "eps-qos-in-use",
     * using a String value.
     * @param epsQosInUseValue used during instantiation.
     */
    public void setEpsQosInUseValue(String epsQosInUseValue)
            throws JNCException {
        setEpsQosInUseValue(new YangString(epsQosInUseValue));
    }

    /**
     * Unsets the value for child leaf "eps-qos-in-use".
     */
    public void unsetEpsQosInUseValue() throws JNCException {
        delete("eps-qos-in-use");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "eps-qos-in-use" leaf will not have a value.
     */
    public void addEpsQosInUse() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eps-qos-in-use",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "eps-qos-in-use" with operation "replace".
     */
    public void markEpsQosInUseReplace() throws JNCException {
        markLeafReplace("epsQosInUse");
    }

    /**
     * Marks the leaf "eps-qos-in-use" with operation "merge".
     */
    public void markEpsQosInUseMerge() throws JNCException {
        markLeafMerge("epsQosInUse");
    }

    /**
     * Marks the leaf "eps-qos-in-use" with operation "create".
     */
    public void markEpsQosInUseCreate() throws JNCException {
        markLeafCreate("epsQosInUse");
    }

    /**
     * Marks the leaf "eps-qos-in-use" with operation "delete".
     */
    public void markEpsQosInUseDelete() throws JNCException {
        markLeafDelete("epsQosInUse");
    }

    /* Access methods for optional leaf child: "pgw-data-teid-or-grekey". */

    /**
     * Gets the value for child leaf "pgw-data-teid-or-grekey".
     * @return The value of the leaf.
     */
    public YangUInt32 getPgwDataTeidOrGrekeyValue() throws JNCException {
        return (YangUInt32)getValue("pgw-data-teid-or-grekey");
    }

    /**
     * Sets the value for child leaf "pgw-data-teid-or-grekey",
     * using instance of generated typedef class.
     * @param pgwDataTeidOrGrekeyValue The value to set.
     * @param pgwDataTeidOrGrekeyValue used during instantiation.
     */
    public void setPgwDataTeidOrGrekeyValue(YangUInt32 pgwDataTeidOrGrekeyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-data-teid-or-grekey",
            pgwDataTeidOrGrekeyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pgw-data-teid-or-grekey",
     * using Java primitive values.
     * @param pgwDataTeidOrGrekeyValue used during instantiation.
     */
    public void setPgwDataTeidOrGrekeyValue(long pgwDataTeidOrGrekeyValue)
            throws JNCException {
        setPgwDataTeidOrGrekeyValue(new YangUInt32(pgwDataTeidOrGrekeyValue));
    }

    /**
     * Sets the value for child leaf "pgw-data-teid-or-grekey",
     * using a String value.
     * @param pgwDataTeidOrGrekeyValue used during instantiation.
     */
    public void setPgwDataTeidOrGrekeyValue(String pgwDataTeidOrGrekeyValue)
            throws JNCException {
        setPgwDataTeidOrGrekeyValue(new YangUInt32(pgwDataTeidOrGrekeyValue));
    }

    /**
     * Unsets the value for child leaf "pgw-data-teid-or-grekey".
     */
    public void unsetPgwDataTeidOrGrekeyValue() throws JNCException {
        delete("pgw-data-teid-or-grekey");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pgw-data-teid-or-grekey" leaf will not have a value.
     */
    public void addPgwDataTeidOrGrekey() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-data-teid-or-grekey",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pgw-data-teid-or-grekey" with operation "replace".
     */
    public void markPgwDataTeidOrGrekeyReplace() throws JNCException {
        markLeafReplace("pgwDataTeidOrGrekey");
    }

    /**
     * Marks the leaf "pgw-data-teid-or-grekey" with operation "merge".
     */
    public void markPgwDataTeidOrGrekeyMerge() throws JNCException {
        markLeafMerge("pgwDataTeidOrGrekey");
    }

    /**
     * Marks the leaf "pgw-data-teid-or-grekey" with operation "create".
     */
    public void markPgwDataTeidOrGrekeyCreate() throws JNCException {
        markLeafCreate("pgwDataTeidOrGrekey");
    }

    /**
     * Marks the leaf "pgw-data-teid-or-grekey" with operation "delete".
     */
    public void markPgwDataTeidOrGrekeyDelete() throws JNCException {
        markLeafDelete("pgwDataTeidOrGrekey");
    }

    /* Access methods for optional leaf child: "pgw-data-ip-address". */

    /**
     * Gets the value for child leaf "pgw-data-ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getPgwDataIpAddressValue() throws JNCException {
        return (IpAddress)getValue("pgw-data-ip-address");
    }

    /**
     * Sets the value for child leaf "pgw-data-ip-address",
     * using a JNC type value.
     * @param pgwDataIpAddressValue The value to set.
     * @param pgwDataIpAddressValue used during instantiation.
     */
    public void setPgwDataIpAddressValue(IpAddress pgwDataIpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-data-ip-address",
            pgwDataIpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pgw-data-ip-address",
     * using a String value.
     * @param pgwDataIpAddressValue used during instantiation.
     */
    public void setPgwDataIpAddressValue(String pgwDataIpAddressValue)
            throws JNCException {
        setPgwDataIpAddressValue(new IpAddress(pgwDataIpAddressValue));
    }

    /**
     * Unsets the value for child leaf "pgw-data-ip-address".
     */
    public void unsetPgwDataIpAddressValue() throws JNCException {
        delete("pgw-data-ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pgw-data-ip-address" leaf will not have a value.
     */
    public void addPgwDataIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-data-ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pgw-data-ip-address" with operation "replace".
     */
    public void markPgwDataIpAddressReplace() throws JNCException {
        markLeafReplace("pgwDataIpAddress");
    }

    /**
     * Marks the leaf "pgw-data-ip-address" with operation "merge".
     */
    public void markPgwDataIpAddressMerge() throws JNCException {
        markLeafMerge("pgwDataIpAddress");
    }

    /**
     * Marks the leaf "pgw-data-ip-address" with operation "create".
     */
    public void markPgwDataIpAddressCreate() throws JNCException {
        markLeafCreate("pgwDataIpAddress");
    }

    /**
     * Marks the leaf "pgw-data-ip-address" with operation "delete".
     */
    public void markPgwDataIpAddressDelete() throws JNCException {
        markLeafDelete("pgwDataIpAddress");
    }

    /* Access methods for optional leaf child: "bearer-pgw-logical-name". */

    /**
     * Gets the value for child leaf "bearer-pgw-logical-name".
     * @return The value of the leaf.
     */
    public YangString getBearerPgwLogicalNameValue() throws JNCException {
        return (YangString)getValue("bearer-pgw-logical-name");
    }

    /**
     * Sets the value for child leaf "bearer-pgw-logical-name",
     * using instance of generated typedef class.
     * @param bearerPgwLogicalNameValue The value to set.
     * @param bearerPgwLogicalNameValue used during instantiation.
     */
    public void setBearerPgwLogicalNameValue(YangString bearerPgwLogicalNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bearer-pgw-logical-name",
            bearerPgwLogicalNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bearer-pgw-logical-name",
     * using a String value.
     * @param bearerPgwLogicalNameValue used during instantiation.
     */
    public void setBearerPgwLogicalNameValue(String bearerPgwLogicalNameValue)
            throws JNCException {
        setBearerPgwLogicalNameValue(new YangString(bearerPgwLogicalNameValue));
    }

    /**
     * Unsets the value for child leaf "bearer-pgw-logical-name".
     */
    public void unsetBearerPgwLogicalNameValue() throws JNCException {
        delete("bearer-pgw-logical-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bearer-pgw-logical-name" leaf will not have a value.
     */
    public void addBearerPgwLogicalName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bearer-pgw-logical-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bearer-pgw-logical-name" with operation "replace".
     */
    public void markBearerPgwLogicalNameReplace() throws JNCException {
        markLeafReplace("bearerPgwLogicalName");
    }

    /**
     * Marks the leaf "bearer-pgw-logical-name" with operation "merge".
     */
    public void markBearerPgwLogicalNameMerge() throws JNCException {
        markLeafMerge("bearerPgwLogicalName");
    }

    /**
     * Marks the leaf "bearer-pgw-logical-name" with operation "create".
     */
    public void markBearerPgwLogicalNameCreate() throws JNCException {
        markLeafCreate("bearerPgwLogicalName");
    }

    /**
     * Marks the leaf "bearer-pgw-logical-name" with operation "delete".
     */
    public void markBearerPgwLogicalNameDelete() throws JNCException {
        markLeafDelete("bearerPgwLogicalName");
    }

    /* Access methods for optional leaf child: "sgw-data-teid". */

    /**
     * Gets the value for child leaf "sgw-data-teid".
     * @return The value of the leaf.
     */
    public YangUInt32 getSgwDataTeidValue() throws JNCException {
        return (YangUInt32)getValue("sgw-data-teid");
    }

    /**
     * Sets the value for child leaf "sgw-data-teid",
     * using instance of generated typedef class.
     * @param sgwDataTeidValue The value to set.
     * @param sgwDataTeidValue used during instantiation.
     */
    public void setSgwDataTeidValue(YangUInt32 sgwDataTeidValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgw-data-teid",
            sgwDataTeidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sgw-data-teid",
     * using Java primitive values.
     * @param sgwDataTeidValue used during instantiation.
     */
    public void setSgwDataTeidValue(long sgwDataTeidValue) throws JNCException {
        setSgwDataTeidValue(new YangUInt32(sgwDataTeidValue));
    }

    /**
     * Sets the value for child leaf "sgw-data-teid",
     * using a String value.
     * @param sgwDataTeidValue used during instantiation.
     */
    public void setSgwDataTeidValue(String sgwDataTeidValue)
            throws JNCException {
        setSgwDataTeidValue(new YangUInt32(sgwDataTeidValue));
    }

    /**
     * Unsets the value for child leaf "sgw-data-teid".
     */
    public void unsetSgwDataTeidValue() throws JNCException {
        delete("sgw-data-teid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sgw-data-teid" leaf will not have a value.
     */
    public void addSgwDataTeid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgw-data-teid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sgw-data-teid" with operation "replace".
     */
    public void markSgwDataTeidReplace() throws JNCException {
        markLeafReplace("sgwDataTeid");
    }

    /**
     * Marks the leaf "sgw-data-teid" with operation "merge".
     */
    public void markSgwDataTeidMerge() throws JNCException {
        markLeafMerge("sgwDataTeid");
    }

    /**
     * Marks the leaf "sgw-data-teid" with operation "create".
     */
    public void markSgwDataTeidCreate() throws JNCException {
        markLeafCreate("sgwDataTeid");
    }

    /**
     * Marks the leaf "sgw-data-teid" with operation "delete".
     */
    public void markSgwDataTeidDelete() throws JNCException {
        markLeafDelete("sgwDataTeid");
    }

    /* Access methods for optional leaf child: "sgw-data-ip-address". */

    /**
     * Gets the value for child leaf "sgw-data-ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getSgwDataIpAddressValue() throws JNCException {
        return (IpAddress)getValue("sgw-data-ip-address");
    }

    /**
     * Sets the value for child leaf "sgw-data-ip-address",
     * using a JNC type value.
     * @param sgwDataIpAddressValue The value to set.
     * @param sgwDataIpAddressValue used during instantiation.
     */
    public void setSgwDataIpAddressValue(IpAddress sgwDataIpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgw-data-ip-address",
            sgwDataIpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sgw-data-ip-address",
     * using a String value.
     * @param sgwDataIpAddressValue used during instantiation.
     */
    public void setSgwDataIpAddressValue(String sgwDataIpAddressValue)
            throws JNCException {
        setSgwDataIpAddressValue(new IpAddress(sgwDataIpAddressValue));
    }

    /**
     * Unsets the value for child leaf "sgw-data-ip-address".
     */
    public void unsetSgwDataIpAddressValue() throws JNCException {
        delete("sgw-data-ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sgw-data-ip-address" leaf will not have a value.
     */
    public void addSgwDataIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgw-data-ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sgw-data-ip-address" with operation "replace".
     */
    public void markSgwDataIpAddressReplace() throws JNCException {
        markLeafReplace("sgwDataIpAddress");
    }

    /**
     * Marks the leaf "sgw-data-ip-address" with operation "merge".
     */
    public void markSgwDataIpAddressMerge() throws JNCException {
        markLeafMerge("sgwDataIpAddress");
    }

    /**
     * Marks the leaf "sgw-data-ip-address" with operation "create".
     */
    public void markSgwDataIpAddressCreate() throws JNCException {
        markLeafCreate("sgwDataIpAddress");
    }

    /**
     * Marks the leaf "sgw-data-ip-address" with operation "delete".
     */
    public void markSgwDataIpAddressDelete() throws JNCException {
        markLeafDelete("sgwDataIpAddress");
    }

    /* Access methods for optional leaf child: "bearer-sgw-logical-name". */

    /**
     * Gets the value for child leaf "bearer-sgw-logical-name".
     * @return The value of the leaf.
     */
    public YangString getBearerSgwLogicalNameValue() throws JNCException {
        return (YangString)getValue("bearer-sgw-logical-name");
    }

    /**
     * Sets the value for child leaf "bearer-sgw-logical-name",
     * using instance of generated typedef class.
     * @param bearerSgwLogicalNameValue The value to set.
     * @param bearerSgwLogicalNameValue used during instantiation.
     */
    public void setBearerSgwLogicalNameValue(YangString bearerSgwLogicalNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bearer-sgw-logical-name",
            bearerSgwLogicalNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bearer-sgw-logical-name",
     * using a String value.
     * @param bearerSgwLogicalNameValue used during instantiation.
     */
    public void setBearerSgwLogicalNameValue(String bearerSgwLogicalNameValue)
            throws JNCException {
        setBearerSgwLogicalNameValue(new YangString(bearerSgwLogicalNameValue));
    }

    /**
     * Unsets the value for child leaf "bearer-sgw-logical-name".
     */
    public void unsetBearerSgwLogicalNameValue() throws JNCException {
        delete("bearer-sgw-logical-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bearer-sgw-logical-name" leaf will not have a value.
     */
    public void addBearerSgwLogicalName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bearer-sgw-logical-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bearer-sgw-logical-name" with operation "replace".
     */
    public void markBearerSgwLogicalNameReplace() throws JNCException {
        markLeafReplace("bearerSgwLogicalName");
    }

    /**
     * Marks the leaf "bearer-sgw-logical-name" with operation "merge".
     */
    public void markBearerSgwLogicalNameMerge() throws JNCException {
        markLeafMerge("bearerSgwLogicalName");
    }

    /**
     * Marks the leaf "bearer-sgw-logical-name" with operation "create".
     */
    public void markBearerSgwLogicalNameCreate() throws JNCException {
        markLeafCreate("bearerSgwLogicalName");
    }

    /**
     * Marks the leaf "bearer-sgw-logical-name" with operation "delete".
     */
    public void markBearerSgwLogicalNameDelete() throws JNCException {
        markLeafDelete("bearerSgwLogicalName");
    }

    /* Access methods for optional leaf child: "enb-data-teid". */

    /**
     * Gets the value for child leaf "enb-data-teid".
     * @return The value of the leaf.
     */
    public YangUInt32 getEnbDataTeidValue() throws JNCException {
        return (YangUInt32)getValue("enb-data-teid");
    }

    /**
     * Sets the value for child leaf "enb-data-teid",
     * using instance of generated typedef class.
     * @param enbDataTeidValue The value to set.
     * @param enbDataTeidValue used during instantiation.
     */
    public void setEnbDataTeidValue(YangUInt32 enbDataTeidValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enb-data-teid",
            enbDataTeidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enb-data-teid",
     * using Java primitive values.
     * @param enbDataTeidValue used during instantiation.
     */
    public void setEnbDataTeidValue(long enbDataTeidValue) throws JNCException {
        setEnbDataTeidValue(new YangUInt32(enbDataTeidValue));
    }

    /**
     * Sets the value for child leaf "enb-data-teid",
     * using a String value.
     * @param enbDataTeidValue used during instantiation.
     */
    public void setEnbDataTeidValue(String enbDataTeidValue)
            throws JNCException {
        setEnbDataTeidValue(new YangUInt32(enbDataTeidValue));
    }

    /**
     * Unsets the value for child leaf "enb-data-teid".
     */
    public void unsetEnbDataTeidValue() throws JNCException {
        delete("enb-data-teid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enb-data-teid" leaf will not have a value.
     */
    public void addEnbDataTeid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enb-data-teid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enb-data-teid" with operation "replace".
     */
    public void markEnbDataTeidReplace() throws JNCException {
        markLeafReplace("enbDataTeid");
    }

    /**
     * Marks the leaf "enb-data-teid" with operation "merge".
     */
    public void markEnbDataTeidMerge() throws JNCException {
        markLeafMerge("enbDataTeid");
    }

    /**
     * Marks the leaf "enb-data-teid" with operation "create".
     */
    public void markEnbDataTeidCreate() throws JNCException {
        markLeafCreate("enbDataTeid");
    }

    /**
     * Marks the leaf "enb-data-teid" with operation "delete".
     */
    public void markEnbDataTeidDelete() throws JNCException {
        markLeafDelete("enbDataTeid");
    }

    /* Access methods for optional leaf child: "enb-data-ip-address". */

    /**
     * Gets the value for child leaf "enb-data-ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getEnbDataIpAddressValue() throws JNCException {
        return (IpAddress)getValue("enb-data-ip-address");
    }

    /**
     * Sets the value for child leaf "enb-data-ip-address",
     * using a JNC type value.
     * @param enbDataIpAddressValue The value to set.
     * @param enbDataIpAddressValue used during instantiation.
     */
    public void setEnbDataIpAddressValue(IpAddress enbDataIpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enb-data-ip-address",
            enbDataIpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enb-data-ip-address",
     * using a String value.
     * @param enbDataIpAddressValue used during instantiation.
     */
    public void setEnbDataIpAddressValue(String enbDataIpAddressValue)
            throws JNCException {
        setEnbDataIpAddressValue(new IpAddress(enbDataIpAddressValue));
    }

    /**
     * Unsets the value for child leaf "enb-data-ip-address".
     */
    public void unsetEnbDataIpAddressValue() throws JNCException {
        delete("enb-data-ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enb-data-ip-address" leaf will not have a value.
     */
    public void addEnbDataIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enb-data-ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enb-data-ip-address" with operation "replace".
     */
    public void markEnbDataIpAddressReplace() throws JNCException {
        markLeafReplace("enbDataIpAddress");
    }

    /**
     * Marks the leaf "enb-data-ip-address" with operation "merge".
     */
    public void markEnbDataIpAddressMerge() throws JNCException {
        markLeafMerge("enbDataIpAddress");
    }

    /**
     * Marks the leaf "enb-data-ip-address" with operation "create".
     */
    public void markEnbDataIpAddressCreate() throws JNCException {
        markLeafCreate("enbDataIpAddress");
    }

    /**
     * Marks the leaf "enb-data-ip-address" with operation "delete".
     */
    public void markEnbDataIpAddressDelete() throws JNCException {
        markLeafDelete("enbDataIpAddress");
    }

    /* Access methods for optional leaf child: "is-default-bearer". */

    /**
     * Gets the value for child leaf "is-default-bearer".
     * @return The value of the leaf.
     */
    public YangString getIsDefaultBearerValue() throws JNCException {
        return (YangString)getValue("is-default-bearer");
    }

    /**
     * Sets the value for child leaf "is-default-bearer",
     * using instance of generated typedef class.
     * @param isDefaultBearerValue The value to set.
     * @param isDefaultBearerValue used during instantiation.
     */
    public void setIsDefaultBearerValue(YangString isDefaultBearerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "is-default-bearer",
            isDefaultBearerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "is-default-bearer",
     * using a String value.
     * @param isDefaultBearerValue used during instantiation.
     */
    public void setIsDefaultBearerValue(String isDefaultBearerValue)
            throws JNCException {
        setIsDefaultBearerValue(new YangString(isDefaultBearerValue));
    }

    /**
     * Unsets the value for child leaf "is-default-bearer".
     */
    public void unsetIsDefaultBearerValue() throws JNCException {
        delete("is-default-bearer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "is-default-bearer" leaf will not have a value.
     */
    public void addIsDefaultBearer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "is-default-bearer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "is-default-bearer" with operation "replace".
     */
    public void markIsDefaultBearerReplace() throws JNCException {
        markLeafReplace("isDefaultBearer");
    }

    /**
     * Marks the leaf "is-default-bearer" with operation "merge".
     */
    public void markIsDefaultBearerMerge() throws JNCException {
        markLeafMerge("isDefaultBearer");
    }

    /**
     * Marks the leaf "is-default-bearer" with operation "create".
     */
    public void markIsDefaultBearerCreate() throws JNCException {
        markLeafCreate("isDefaultBearer");
    }

    /**
     * Marks the leaf "is-default-bearer" with operation "delete".
     */
    public void markIsDefaultBearerDelete() throws JNCException {
        markLeafDelete("isDefaultBearer");
    }

    /* Access methods for optional leaf child: "bearer-s5-s8-protocoltype". */

    /**
     * Gets the value for child leaf "bearer-s5-s8-protocoltype".
     * @return The value of the leaf.
     */
    public YangString getBearerS5S8ProtocoltypeValue() throws JNCException {
        return (YangString)getValue("bearer-s5-s8-protocoltype");
    }

    /**
     * Sets the value for child leaf "bearer-s5-s8-protocoltype",
     * using instance of generated typedef class.
     * @param bearerS5S8ProtocoltypeValue The value to set.
     * @param bearerS5S8ProtocoltypeValue used during instantiation.
     */
    public void setBearerS5S8ProtocoltypeValue(YangString bearerS5S8ProtocoltypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bearer-s5-s8-protocoltype",
            bearerS5S8ProtocoltypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bearer-s5-s8-protocoltype",
     * using a String value.
     * @param bearerS5S8ProtocoltypeValue used during instantiation.
     */
    public void setBearerS5S8ProtocoltypeValue(String bearerS5S8ProtocoltypeValue)
            throws JNCException {
        setBearerS5S8ProtocoltypeValue(new YangString(bearerS5S8ProtocoltypeValue));
    }

    /**
     * Unsets the value for child leaf "bearer-s5-s8-protocoltype".
     */
    public void unsetBearerS5S8ProtocoltypeValue() throws JNCException {
        delete("bearer-s5-s8-protocoltype");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bearer-s5-s8-protocoltype" leaf will not have a value.
     */
    public void addBearerS5S8Protocoltype() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bearer-s5-s8-protocoltype",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bearer-s5-s8-protocoltype" with operation "replace".
     */
    public void markBearerS5S8ProtocoltypeReplace() throws JNCException {
        markLeafReplace("bearerS5S8Protocoltype");
    }

    /**
     * Marks the leaf "bearer-s5-s8-protocoltype" with operation "merge".
     */
    public void markBearerS5S8ProtocoltypeMerge() throws JNCException {
        markLeafMerge("bearerS5S8Protocoltype");
    }

    /**
     * Marks the leaf "bearer-s5-s8-protocoltype" with operation "create".
     */
    public void markBearerS5S8ProtocoltypeCreate() throws JNCException {
        markLeafCreate("bearerS5S8Protocoltype");
    }

    /**
     * Marks the leaf "bearer-s5-s8-protocoltype" with operation "delete".
     */
    public void markBearerS5S8ProtocoltypeDelete() throws JNCException {
        markLeafDelete("bearerS5S8Protocoltype");
    }

    /* Access methods for optional leaf child: "eps-arp-priority-level". */

    /**
     * Gets the value for child leaf "eps-arp-priority-level".
     * @return The value of the leaf.
     */
    public YangUInt8 getEpsArpPriorityLevelValue() throws JNCException {
        return (YangUInt8)getValue("eps-arp-priority-level");
    }

    /**
     * Sets the value for child leaf "eps-arp-priority-level",
     * using instance of generated typedef class.
     * @param epsArpPriorityLevelValue The value to set.
     * @param epsArpPriorityLevelValue used during instantiation.
     */
    public void setEpsArpPriorityLevelValue(YangUInt8 epsArpPriorityLevelValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eps-arp-priority-level",
            epsArpPriorityLevelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "eps-arp-priority-level",
     * using Java primitive values.
     * @param epsArpPriorityLevelValue used during instantiation.
     */
    public void setEpsArpPriorityLevelValue(short epsArpPriorityLevelValue)
            throws JNCException {
        setEpsArpPriorityLevelValue(new YangUInt8(epsArpPriorityLevelValue));
    }

    /**
     * Sets the value for child leaf "eps-arp-priority-level",
     * using a String value.
     * @param epsArpPriorityLevelValue used during instantiation.
     */
    public void setEpsArpPriorityLevelValue(String epsArpPriorityLevelValue)
            throws JNCException {
        setEpsArpPriorityLevelValue(new YangUInt8(epsArpPriorityLevelValue));
    }

    /**
     * Unsets the value for child leaf "eps-arp-priority-level".
     */
    public void unsetEpsArpPriorityLevelValue() throws JNCException {
        delete("eps-arp-priority-level");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "eps-arp-priority-level" leaf will not have a value.
     */
    public void addEpsArpPriorityLevel() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eps-arp-priority-level",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "eps-arp-priority-level" with operation "replace".
     */
    public void markEpsArpPriorityLevelReplace() throws JNCException {
        markLeafReplace("epsArpPriorityLevel");
    }

    /**
     * Marks the leaf "eps-arp-priority-level" with operation "merge".
     */
    public void markEpsArpPriorityLevelMerge() throws JNCException {
        markLeafMerge("epsArpPriorityLevel");
    }

    /**
     * Marks the leaf "eps-arp-priority-level" with operation "create".
     */
    public void markEpsArpPriorityLevelCreate() throws JNCException {
        markLeafCreate("epsArpPriorityLevel");
    }

    /**
     * Marks the leaf "eps-arp-priority-level" with operation "delete".
     */
    public void markEpsArpPriorityLevelDelete() throws JNCException {
        markLeafDelete("epsArpPriorityLevel");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
