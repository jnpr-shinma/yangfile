/* 
 * @(#)MmeQosConversion.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangEnumeration;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/mme-qos-conversion"
 * <p>
 * See line 1632 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeQosConversion extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeQosConversion object.
     */
    public MmeQosConversion() {
        super(Epc.NAMESPACE, "mme-qos-conversion");
    }

    /**
     * Constructor for an initialized MmeQosConversion object,
     * 
     * @param trafficClassValue Key argument of child.
     */
    public MmeQosConversion(YangEnumeration trafficClassValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-qos-conversion");
        Leaf trafficClass = new Leaf(Epc.NAMESPACE, "traffic-class");
        trafficClass.setValue(trafficClassValue);
        insertChild(trafficClass, childrenNames());
    }

    /**
     * Constructor for an initialized MmeQosConversion object,
     * with String keys.
     * @param trafficClassValue Key argument of child.
     */
    public MmeQosConversion(String trafficClassValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-qos-conversion");
        Leaf trafficClass = new Leaf(Epc.NAMESPACE, "traffic-class");
        trafficClass.setValue(new YangEnumeration(trafficClassValue, new String [] {"conversational", "streaming", "background", "interactive-thp1", "interactive-thp2", "interactive-thp3", }));
        insertChild(trafficClass, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeQosConversion clone() {
        MmeQosConversion copy;
        try {
            copy = new MmeQosConversion(getTrafficClassValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeQosConversion)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeQosConversion cloneShallow() {
        MmeQosConversion copy;
        try {
            copy = new MmeQosConversion(getTrafficClassValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeQosConversion)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "traffic-class",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "traffic-class",
            "max-sdu-size",
            "residual-ber",
            "delivery-of-erroneous-sdus",
            "arp-high",
            "arp-medium",
        };
    }

    /* Access methods for leaf child: "traffic-class". */

    /**
     * Gets the value for child leaf "traffic-class".
     * @return The value of the leaf.
     */
    public YangEnumeration getTrafficClassValue() throws JNCException {
        return (YangEnumeration)getValue("traffic-class");
    }

    /**
     * Sets the value for child leaf "traffic-class",
     * using instance of generated typedef class.
     * @param trafficClassValue The value to set.
     * @param trafficClassValue used during instantiation.
     */
    public void setTrafficClassValue(YangEnumeration trafficClassValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "traffic-class",
            trafficClassValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "traffic-class",
     * using a String value.
     * @param trafficClassValue used during instantiation.
     */
    public void setTrafficClassValue(String trafficClassValue)
            throws JNCException {
        setTrafficClassValue(new YangEnumeration(trafficClassValue, new String[] {
             "conversational",
             "streaming",
             "background",
             "interactive-thp1",
             "interactive-thp2",
             "interactive-thp3",
        }));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "traffic-class" leaf will not have a value.
     */
    public void addTrafficClass() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "traffic-class",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "max-sdu-size". */

    /**
     * Gets the value for child leaf "max-sdu-size".
     * @return The value of the leaf.
     */
    public YangUInt16 getMaxSduSizeValue() throws JNCException {
        YangUInt16 maxSduSize = (YangUInt16)getValue("max-sdu-size");
        if (maxSduSize == null) {
            maxSduSize = new YangUInt16("1500");  // default
        }
        return maxSduSize;
    }

    /**
     * Sets the value for child leaf "max-sdu-size",
     * using instance of generated typedef class.
     * @param maxSduSizeValue The value to set.
     * @param maxSduSizeValue used during instantiation.
     */
    public void setMaxSduSizeValue(YangUInt16 maxSduSizeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-sdu-size",
            maxSduSizeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-sdu-size",
     * using Java primitive values.
     * @param maxSduSizeValue used during instantiation.
     */
    public void setMaxSduSizeValue(int maxSduSizeValue) throws JNCException {
        setMaxSduSizeValue(new YangUInt16(maxSduSizeValue));
    }

    /**
     * Sets the value for child leaf "max-sdu-size",
     * using a String value.
     * @param maxSduSizeValue used during instantiation.
     */
    public void setMaxSduSizeValue(String maxSduSizeValue) throws JNCException {
        setMaxSduSizeValue(new YangUInt16(maxSduSizeValue));
    }

    /**
     * Unsets the value for child leaf "max-sdu-size".
     */
    public void unsetMaxSduSizeValue() throws JNCException {
        delete("max-sdu-size");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-sdu-size" leaf will not have a value.
     */
    public void addMaxSduSize() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-sdu-size",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-sdu-size" with operation "replace".
     */
    public void markMaxSduSizeReplace() throws JNCException {
        markLeafReplace("maxSduSize");
    }

    /**
     * Marks the leaf "max-sdu-size" with operation "merge".
     */
    public void markMaxSduSizeMerge() throws JNCException {
        markLeafMerge("maxSduSize");
    }

    /**
     * Marks the leaf "max-sdu-size" with operation "create".
     */
    public void markMaxSduSizeCreate() throws JNCException {
        markLeafCreate("maxSduSize");
    }

    /**
     * Marks the leaf "max-sdu-size" with operation "delete".
     */
    public void markMaxSduSizeDelete() throws JNCException {
        markLeafDelete("maxSduSize");
    }

    /* Access methods for optional leaf child: "residual-ber". */

    /**
     * Gets the value for child leaf "residual-ber".
     * @return The value of the leaf.
     */
    public YangEnumeration getResidualBerValue() throws JNCException {
        return (YangEnumeration)getValue("residual-ber");
    }

    /**
     * Sets the value for child leaf "residual-ber",
     * using instance of generated typedef class.
     * @param residualBerValue The value to set.
     * @param residualBerValue used during instantiation.
     */
    public void setResidualBerValue(YangEnumeration residualBerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "residual-ber",
            residualBerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "residual-ber",
     * using a String value.
     * @param residualBerValue used during instantiation.
     */
    public void setResidualBerValue(String residualBerValue)
            throws JNCException {
        setResidualBerValue(new YangEnumeration(residualBerValue, new String[] {
             "residualber-5hundredth",
             "residualber-1hundredth",
             "residualber-5thousandth",
             "residualber-4thousandth",
             "residualber-1thousandth",
             "residualber-1tenthousandth",
             "residualber-1hundredthousandth",
             "residualber-1millionth",
             "residualber-6hundredmillionth",
        }));
    }

    /**
     * Unsets the value for child leaf "residual-ber".
     */
    public void unsetResidualBerValue() throws JNCException {
        delete("residual-ber");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "residual-ber" leaf will not have a value.
     */
    public void addResidualBer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "residual-ber",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "residual-ber" with operation "replace".
     */
    public void markResidualBerReplace() throws JNCException {
        markLeafReplace("residualBer");
    }

    /**
     * Marks the leaf "residual-ber" with operation "merge".
     */
    public void markResidualBerMerge() throws JNCException {
        markLeafMerge("residualBer");
    }

    /**
     * Marks the leaf "residual-ber" with operation "create".
     */
    public void markResidualBerCreate() throws JNCException {
        markLeafCreate("residualBer");
    }

    /**
     * Marks the leaf "residual-ber" with operation "delete".
     */
    public void markResidualBerDelete() throws JNCException {
        markLeafDelete("residualBer");
    }

    /* Access methods for optional leaf child: "delivery-of-erroneous-sdus". */

    /**
     * Gets the value for child leaf "delivery-of-erroneous-sdus".
     * @return The value of the leaf.
     */
    public YangEnumeration getDeliveryOfErroneousSdusValue()
            throws JNCException {
        YangEnumeration deliveryOfErroneousSdus = (YangEnumeration)getValue("delivery-of-erroneous-sdus");
        if (deliveryOfErroneousSdus == null) {
            deliveryOfErroneousSdus = new YangEnumeration("err-sdus-not-delivered", new String[] {  // default
                "no-detect",
                "err-sdus-delivered",
                "err-sdus-not-delivered",
            });
        }
        return deliveryOfErroneousSdus;
    }

    /**
     * Sets the value for child leaf "delivery-of-erroneous-sdus",
     * using instance of generated typedef class.
     * @param deliveryOfErroneousSdusValue The value to set.
     * @param deliveryOfErroneousSdusValue used during instantiation.
     */
    public void setDeliveryOfErroneousSdusValue(YangEnumeration deliveryOfErroneousSdusValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "delivery-of-erroneous-sdus",
            deliveryOfErroneousSdusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "delivery-of-erroneous-sdus",
     * using a String value.
     * @param deliveryOfErroneousSdusValue used during instantiation.
     */
    public void setDeliveryOfErroneousSdusValue(String deliveryOfErroneousSdusValue)
            throws JNCException {
        setDeliveryOfErroneousSdusValue(new YangEnumeration(deliveryOfErroneousSdusValue, new String[] {
             "no-detect",
             "err-sdus-delivered",
             "err-sdus-not-delivered",
        }));
    }

    /**
     * Unsets the value for child leaf "delivery-of-erroneous-sdus".
     */
    public void unsetDeliveryOfErroneousSdusValue() throws JNCException {
        delete("delivery-of-erroneous-sdus");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "delivery-of-erroneous-sdus" leaf will not have a value.
     */
    public void addDeliveryOfErroneousSdus() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "delivery-of-erroneous-sdus",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "delivery-of-erroneous-sdus" with operation "replace".
     */
    public void markDeliveryOfErroneousSdusReplace() throws JNCException {
        markLeafReplace("deliveryOfErroneousSdus");
    }

    /**
     * Marks the leaf "delivery-of-erroneous-sdus" with operation "merge".
     */
    public void markDeliveryOfErroneousSdusMerge() throws JNCException {
        markLeafMerge("deliveryOfErroneousSdus");
    }

    /**
     * Marks the leaf "delivery-of-erroneous-sdus" with operation "create".
     */
    public void markDeliveryOfErroneousSdusCreate() throws JNCException {
        markLeafCreate("deliveryOfErroneousSdus");
    }

    /**
     * Marks the leaf "delivery-of-erroneous-sdus" with operation "delete".
     */
    public void markDeliveryOfErroneousSdusDelete() throws JNCException {
        markLeafDelete("deliveryOfErroneousSdus");
    }

    /* Access methods for optional leaf child: "arp-high". */

    /**
     * Gets the value for child leaf "arp-high".
     * @return The value of the leaf.
     */
    public YangUInt8 getArpHighValue() throws JNCException {
        YangUInt8 arpHigh = (YangUInt8)getValue("arp-high");
        if (arpHigh == null) {
            arpHigh = new YangUInt8("5");  // default
        }
        return arpHigh;
    }

    /**
     * Sets the value for child leaf "arp-high",
     * using instance of generated typedef class.
     * @param arpHighValue The value to set.
     * @param arpHighValue used during instantiation.
     */
    public void setArpHighValue(YangUInt8 arpHighValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "arp-high",
            arpHighValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "arp-high",
     * using Java primitive values.
     * @param arpHighValue used during instantiation.
     */
    public void setArpHighValue(short arpHighValue) throws JNCException {
        setArpHighValue(new YangUInt8(arpHighValue));
    }

    /**
     * Sets the value for child leaf "arp-high",
     * using a String value.
     * @param arpHighValue used during instantiation.
     */
    public void setArpHighValue(String arpHighValue) throws JNCException {
        setArpHighValue(new YangUInt8(arpHighValue));
    }

    /**
     * Unsets the value for child leaf "arp-high".
     */
    public void unsetArpHighValue() throws JNCException {
        delete("arp-high");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "arp-high" leaf will not have a value.
     */
    public void addArpHigh() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "arp-high",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "arp-high" with operation "replace".
     */
    public void markArpHighReplace() throws JNCException {
        markLeafReplace("arpHigh");
    }

    /**
     * Marks the leaf "arp-high" with operation "merge".
     */
    public void markArpHighMerge() throws JNCException {
        markLeafMerge("arpHigh");
    }

    /**
     * Marks the leaf "arp-high" with operation "create".
     */
    public void markArpHighCreate() throws JNCException {
        markLeafCreate("arpHigh");
    }

    /**
     * Marks the leaf "arp-high" with operation "delete".
     */
    public void markArpHighDelete() throws JNCException {
        markLeafDelete("arpHigh");
    }

    /* Access methods for optional leaf child: "arp-medium". */

    /**
     * Gets the value for child leaf "arp-medium".
     * @return The value of the leaf.
     */
    public YangUInt8 getArpMediumValue() throws JNCException {
        YangUInt8 arpMedium = (YangUInt8)getValue("arp-medium");
        if (arpMedium == null) {
            arpMedium = new YangUInt8("10");  // default
        }
        return arpMedium;
    }

    /**
     * Sets the value for child leaf "arp-medium",
     * using instance of generated typedef class.
     * @param arpMediumValue The value to set.
     * @param arpMediumValue used during instantiation.
     */
    public void setArpMediumValue(YangUInt8 arpMediumValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "arp-medium",
            arpMediumValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "arp-medium",
     * using Java primitive values.
     * @param arpMediumValue used during instantiation.
     */
    public void setArpMediumValue(short arpMediumValue) throws JNCException {
        setArpMediumValue(new YangUInt8(arpMediumValue));
    }

    /**
     * Sets the value for child leaf "arp-medium",
     * using a String value.
     * @param arpMediumValue used during instantiation.
     */
    public void setArpMediumValue(String arpMediumValue) throws JNCException {
        setArpMediumValue(new YangUInt8(arpMediumValue));
    }

    /**
     * Unsets the value for child leaf "arp-medium".
     */
    public void unsetArpMediumValue() throws JNCException {
        delete("arp-medium");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "arp-medium" leaf will not have a value.
     */
    public void addArpMedium() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "arp-medium",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "arp-medium" with operation "replace".
     */
    public void markArpMediumReplace() throws JNCException {
        markLeafReplace("arpMedium");
    }

    /**
     * Marks the leaf "arp-medium" with operation "merge".
     */
    public void markArpMediumMerge() throws JNCException {
        markLeafMerge("arpMedium");
    }

    /**
     * Marks the leaf "arp-medium" with operation "create".
     */
    public void markArpMediumCreate() throws JNCException {
        markLeafCreate("arpMedium");
    }

    /**
     * Marks the leaf "arp-medium" with operation "delete".
     */
    public void markArpMediumDelete() throws JNCException {
        markLeafDelete("arpMedium");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
