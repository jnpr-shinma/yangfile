/* 
 * @(#)CsgSubscriptionData.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;
import .hctaEpc.ImsiT;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/csg-subscription-data"
 * <p>
 * See line 1566 in
 * scCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class CsgSubscriptionData extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty CsgSubscriptionData object.
     */
    public CsgSubscriptionData() {
        super(Epc.NAMESPACE, "csg-subscription-data");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public CsgSubscriptionData clone() {
        return (CsgSubscriptionData)cloneContent(new CsgSubscriptionData());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public CsgSubscriptionData cloneShallow() {
        return (CsgSubscriptionData)cloneShallowContent(new CsgSubscriptionData());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "imsi",
            "csg-id",
            "expiration-date",
            "lipa-apn",
        };
    }

    /* Access methods for leaf child: "imsi". */

    /**
     * Gets the value for child leaf "imsi".
     * @return The value of the leaf.
     */
    public ImsiT getImsiValue() throws JNCException {
        return (ImsiT)getValue("imsi");
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a JNC type value.
     * @param imsiValue The value to set.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(ImsiT imsiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            imsiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a String value.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(String imsiValue) throws JNCException {
        setImsiValue(new ImsiT(imsiValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imsi" leaf will not have a value.
     */
    public void addImsi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "csg-id". */

    /**
     * Gets the value for child leaf "csg-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getCsgIdValue() throws JNCException {
        return (YangUInt32)getValue("csg-id");
    }

    /**
     * Sets the value for child leaf "csg-id",
     * using instance of generated typedef class.
     * @param csgIdValue The value to set.
     * @param csgIdValue used during instantiation.
     */
    public void setCsgIdValue(YangUInt32 csgIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "csg-id",
            csgIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "csg-id",
     * using Java primitive values.
     * @param csgIdValue used during instantiation.
     */
    public void setCsgIdValue(long csgIdValue) throws JNCException {
        setCsgIdValue(new YangUInt32(csgIdValue));
    }

    /**
     * Sets the value for child leaf "csg-id",
     * using a String value.
     * @param csgIdValue used during instantiation.
     */
    public void setCsgIdValue(String csgIdValue) throws JNCException {
        setCsgIdValue(new YangUInt32(csgIdValue));
    }

    /**
     * Unsets the value for child leaf "csg-id".
     */
    public void unsetCsgIdValue() throws JNCException {
        delete("csg-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "csg-id" leaf will not have a value.
     */
    public void addCsgId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "csg-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "csg-id" with operation "replace".
     */
    public void markCsgIdReplace() throws JNCException {
        markLeafReplace("csgId");
    }

    /**
     * Marks the leaf "csg-id" with operation "merge".
     */
    public void markCsgIdMerge() throws JNCException {
        markLeafMerge("csgId");
    }

    /**
     * Marks the leaf "csg-id" with operation "create".
     */
    public void markCsgIdCreate() throws JNCException {
        markLeafCreate("csgId");
    }

    /**
     * Marks the leaf "csg-id" with operation "delete".
     */
    public void markCsgIdDelete() throws JNCException {
        markLeafDelete("csgId");
    }

    /* Access methods for optional leaf child: "expiration-date". */

    /**
     * Gets the value for child leaf "expiration-date".
     * @return The value of the leaf.
     */
    public YangString getExpirationDateValue() throws JNCException {
        return (YangString)getValue("expiration-date");
    }

    /**
     * Sets the value for child leaf "expiration-date",
     * using instance of generated typedef class.
     * @param expirationDateValue The value to set.
     * @param expirationDateValue used during instantiation.
     */
    public void setExpirationDateValue(YangString expirationDateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "expiration-date",
            expirationDateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "expiration-date",
     * using a String value.
     * @param expirationDateValue used during instantiation.
     */
    public void setExpirationDateValue(String expirationDateValue)
            throws JNCException {
        setExpirationDateValue(new YangString(expirationDateValue));
    }

    /**
     * Unsets the value for child leaf "expiration-date".
     */
    public void unsetExpirationDateValue() throws JNCException {
        delete("expiration-date");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "expiration-date" leaf will not have a value.
     */
    public void addExpirationDate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "expiration-date",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "expiration-date" with operation "replace".
     */
    public void markExpirationDateReplace() throws JNCException {
        markLeafReplace("expirationDate");
    }

    /**
     * Marks the leaf "expiration-date" with operation "merge".
     */
    public void markExpirationDateMerge() throws JNCException {
        markLeafMerge("expirationDate");
    }

    /**
     * Marks the leaf "expiration-date" with operation "create".
     */
    public void markExpirationDateCreate() throws JNCException {
        markLeafCreate("expirationDate");
    }

    /**
     * Marks the leaf "expiration-date" with operation "delete".
     */
    public void markExpirationDateDelete() throws JNCException {
        markLeafDelete("expirationDate");
    }

    /* Access methods for optional leaf child: "lipa-apn". */

    /**
     * Gets the value for child leaf "lipa-apn".
     * @return The value of the leaf.
     */
    public YangString getLipaApnValue() throws JNCException {
        return (YangString)getValue("lipa-apn");
    }

    /**
     * Sets the value for child leaf "lipa-apn",
     * using instance of generated typedef class.
     * @param lipaApnValue The value to set.
     * @param lipaApnValue used during instantiation.
     */
    public void setLipaApnValue(YangString lipaApnValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lipa-apn",
            lipaApnValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lipa-apn",
     * using a String value.
     * @param lipaApnValue used during instantiation.
     */
    public void setLipaApnValue(String lipaApnValue) throws JNCException {
        setLipaApnValue(new YangString(lipaApnValue));
    }

    /**
     * Unsets the value for child leaf "lipa-apn".
     */
    public void unsetLipaApnValue() throws JNCException {
        delete("lipa-apn");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lipa-apn" leaf will not have a value.
     */
    public void addLipaApn() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lipa-apn",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lipa-apn" with operation "replace".
     */
    public void markLipaApnReplace() throws JNCException {
        markLeafReplace("lipaApn");
    }

    /**
     * Marks the leaf "lipa-apn" with operation "merge".
     */
    public void markLipaApnMerge() throws JNCException {
        markLeafMerge("lipaApn");
    }

    /**
     * Marks the leaf "lipa-apn" with operation "create".
     */
    public void markLipaApnCreate() throws JNCException {
        markLeafCreate("lipaApn");
    }

    /**
     * Marks the leaf "lipa-apn" with operation "delete".
     */
    public void markLipaApnDelete() throws JNCException {
        markLeafDelete("lipaApn");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
