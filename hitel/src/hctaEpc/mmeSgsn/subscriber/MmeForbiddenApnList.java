/* 
 * @(#)MmeForbiddenApnList.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/mme-forbidden-apn-list"
 * <p>
 * See line 782 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeForbiddenApnList extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeForbiddenApnList object.
     */
    public MmeForbiddenApnList() {
        super(Epc.NAMESPACE, "mme-forbidden-apn-list");
    }

    /**
     * Constructor for an initialized MmeForbiddenApnList object,
     * 
     * @param apnValue Key argument of child.
     */
    public MmeForbiddenApnList(YangString apnValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-forbidden-apn-list");
        Leaf apn = new Leaf(Epc.NAMESPACE, "apn");
        apn.setValue(apnValue);
        insertChild(apn, childrenNames());
    }

    /**
     * Constructor for an initialized MmeForbiddenApnList object,
     * with String keys.
     * @param apnValue Key argument of child.
     */
    public MmeForbiddenApnList(String apnValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-forbidden-apn-list");
        Leaf apn = new Leaf(Epc.NAMESPACE, "apn");
        apn.setValue(new YangString(apnValue));
        insertChild(apn, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeForbiddenApnList clone() {
        MmeForbiddenApnList copy;
        try {
            copy = new MmeForbiddenApnList(getApnValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeForbiddenApnList)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeForbiddenApnList cloneShallow() {
        MmeForbiddenApnList copy;
        try {
            copy = new MmeForbiddenApnList(getApnValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeForbiddenApnList)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "apn",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "apn",
            "forbidden-list",
        };
    }

    /* Access methods for leaf child: "apn". */

    /**
     * Gets the value for child leaf "apn".
     * @return The value of the leaf.
     */
    public YangString getApnValue() throws JNCException {
        return (YangString)getValue("apn");
    }

    /**
     * Sets the value for child leaf "apn",
     * using instance of generated typedef class.
     * @param apnValue The value to set.
     * @param apnValue used during instantiation.
     */
    public void setApnValue(YangString apnValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn",
            apnValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn",
     * using a String value.
     * @param apnValue used during instantiation.
     */
    public void setApnValue(String apnValue) throws JNCException {
        setApnValue(new YangString(apnValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn" leaf will not have a value.
     */
    public void addApn() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "forbidden-list". */

    /**
     * Gets the value for child leaf "forbidden-list".
     * @return The value of the leaf.
     */
    public YangString getForbiddenListValue() throws JNCException {
        return (YangString)getValue("forbidden-list");
    }

    /**
     * Sets the value for child leaf "forbidden-list",
     * using instance of generated typedef class.
     * @param forbiddenListValue The value to set.
     * @param forbiddenListValue used during instantiation.
     */
    public void setForbiddenListValue(YangString forbiddenListValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "forbidden-list",
            forbiddenListValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "forbidden-list",
     * using a String value.
     * @param forbiddenListValue used during instantiation.
     */
    public void setForbiddenListValue(String forbiddenListValue)
            throws JNCException {
        setForbiddenListValue(new YangString(forbiddenListValue));
    }

    /**
     * Unsets the value for child leaf "forbidden-list".
     */
    public void unsetForbiddenListValue() throws JNCException {
        delete("forbidden-list");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "forbidden-list" leaf will not have a value.
     */
    public void addForbiddenList() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "forbidden-list",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "forbidden-list" with operation "replace".
     */
    public void markForbiddenListReplace() throws JNCException {
        markLeafReplace("forbiddenList");
    }

    /**
     * Marks the leaf "forbidden-list" with operation "merge".
     */
    public void markForbiddenListMerge() throws JNCException {
        markLeafMerge("forbiddenList");
    }

    /**
     * Marks the leaf "forbidden-list" with operation "create".
     */
    public void markForbiddenListCreate() throws JNCException {
        markLeafCreate("forbiddenList");
    }

    /**
     * Marks the leaf "forbidden-list" with operation "delete".
     */
    public void markForbiddenListDelete() throws JNCException {
        markLeafDelete("forbiddenList");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
