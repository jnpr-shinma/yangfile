/* 
 * @(#)MmeVoiceDomainProfile.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/mme-voice-domain-profile"
 * <p>
 * See line 2756 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeVoiceDomainProfile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeVoiceDomainProfile object.
     */
    public MmeVoiceDomainProfile() {
        super(Epc.NAMESPACE, "mme-voice-domain-profile");
    }

    /**
     * Constructor for an initialized MmeVoiceDomainProfile object,
     * 
     * @param nameValue Key argument of child.
     */
    public MmeVoiceDomainProfile(YangString nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-voice-domain-profile");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized MmeVoiceDomainProfile object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public MmeVoiceDomainProfile(String nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-voice-domain-profile");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeVoiceDomainProfile clone() {
        MmeVoiceDomainProfile copy;
        try {
            copy = new MmeVoiceDomainProfile(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeVoiceDomainProfile)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeVoiceDomainProfile cloneShallow() {
        MmeVoiceDomainProfile copy;
        try {
            copy = new MmeVoiceDomainProfile(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeVoiceDomainProfile)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "dc00-cs-voice-only",
            "dc01-ps-voice-only",
            "dc10-cs-voice-preferred",
            "dc11-ps-voice-preferred",
            "vc00-cs-voice-only",
            "vc01-ps-voice-only",
            "vc10-cs-voice-preferred",
            "vc11-ps-voice-preferred",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "dc00-cs-voice-only". */

    /**
     * Gets the value for child leaf "dc00-cs-voice-only".
     * @return The value of the leaf.
     */
    public YangString getDc00CsVoiceOnlyValue() throws JNCException {
        YangString dc00CsVoiceOnly = (YangString)getValue("dc00-cs-voice-only");
        if (dc00CsVoiceOnly == null) {
            dc00CsVoiceOnly = new YangString("use-subscribed-value");  // default
        }
        return dc00CsVoiceOnly;
    }

    /**
     * Sets the value for child leaf "dc00-cs-voice-only",
     * using instance of generated typedef class.
     * @param dc00CsVoiceOnlyValue The value to set.
     * @param dc00CsVoiceOnlyValue used during instantiation.
     */
    public void setDc00CsVoiceOnlyValue(YangString dc00CsVoiceOnlyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dc00-cs-voice-only",
            dc00CsVoiceOnlyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dc00-cs-voice-only",
     * using a String value.
     * @param dc00CsVoiceOnlyValue used during instantiation.
     */
    public void setDc00CsVoiceOnlyValue(String dc00CsVoiceOnlyValue)
            throws JNCException {
        setDc00CsVoiceOnlyValue(new YangString(dc00CsVoiceOnlyValue));
    }

    /**
     * Unsets the value for child leaf "dc00-cs-voice-only".
     */
    public void unsetDc00CsVoiceOnlyValue() throws JNCException {
        delete("dc00-cs-voice-only");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dc00-cs-voice-only" leaf will not have a value.
     */
    public void addDc00CsVoiceOnly() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dc00-cs-voice-only",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dc00-cs-voice-only" with operation "replace".
     */
    public void markDc00CsVoiceOnlyReplace() throws JNCException {
        markLeafReplace("dc00CsVoiceOnly");
    }

    /**
     * Marks the leaf "dc00-cs-voice-only" with operation "merge".
     */
    public void markDc00CsVoiceOnlyMerge() throws JNCException {
        markLeafMerge("dc00CsVoiceOnly");
    }

    /**
     * Marks the leaf "dc00-cs-voice-only" with operation "create".
     */
    public void markDc00CsVoiceOnlyCreate() throws JNCException {
        markLeafCreate("dc00CsVoiceOnly");
    }

    /**
     * Marks the leaf "dc00-cs-voice-only" with operation "delete".
     */
    public void markDc00CsVoiceOnlyDelete() throws JNCException {
        markLeafDelete("dc00CsVoiceOnly");
    }

    /* Access methods for optional leaf child: "dc01-ps-voice-only". */

    /**
     * Gets the value for child leaf "dc01-ps-voice-only".
     * @return The value of the leaf.
     */
    public YangString getDc01PsVoiceOnlyValue() throws JNCException {
        YangString dc01PsVoiceOnly = (YangString)getValue("dc01-ps-voice-only");
        if (dc01PsVoiceOnly == null) {
            dc01PsVoiceOnly = new YangString("use-subscribed-value");  // default
        }
        return dc01PsVoiceOnly;
    }

    /**
     * Sets the value for child leaf "dc01-ps-voice-only",
     * using instance of generated typedef class.
     * @param dc01PsVoiceOnlyValue The value to set.
     * @param dc01PsVoiceOnlyValue used during instantiation.
     */
    public void setDc01PsVoiceOnlyValue(YangString dc01PsVoiceOnlyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dc01-ps-voice-only",
            dc01PsVoiceOnlyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dc01-ps-voice-only",
     * using a String value.
     * @param dc01PsVoiceOnlyValue used during instantiation.
     */
    public void setDc01PsVoiceOnlyValue(String dc01PsVoiceOnlyValue)
            throws JNCException {
        setDc01PsVoiceOnlyValue(new YangString(dc01PsVoiceOnlyValue));
    }

    /**
     * Unsets the value for child leaf "dc01-ps-voice-only".
     */
    public void unsetDc01PsVoiceOnlyValue() throws JNCException {
        delete("dc01-ps-voice-only");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dc01-ps-voice-only" leaf will not have a value.
     */
    public void addDc01PsVoiceOnly() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dc01-ps-voice-only",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dc01-ps-voice-only" with operation "replace".
     */
    public void markDc01PsVoiceOnlyReplace() throws JNCException {
        markLeafReplace("dc01PsVoiceOnly");
    }

    /**
     * Marks the leaf "dc01-ps-voice-only" with operation "merge".
     */
    public void markDc01PsVoiceOnlyMerge() throws JNCException {
        markLeafMerge("dc01PsVoiceOnly");
    }

    /**
     * Marks the leaf "dc01-ps-voice-only" with operation "create".
     */
    public void markDc01PsVoiceOnlyCreate() throws JNCException {
        markLeafCreate("dc01PsVoiceOnly");
    }

    /**
     * Marks the leaf "dc01-ps-voice-only" with operation "delete".
     */
    public void markDc01PsVoiceOnlyDelete() throws JNCException {
        markLeafDelete("dc01PsVoiceOnly");
    }

    /* Access methods for optional leaf child: "dc10-cs-voice-preferred". */

    /**
     * Gets the value for child leaf "dc10-cs-voice-preferred".
     * @return The value of the leaf.
     */
    public YangString getDc10CsVoicePreferredValue() throws JNCException {
        YangString dc10CsVoicePreferred = (YangString)getValue("dc10-cs-voice-preferred");
        if (dc10CsVoicePreferred == null) {
            dc10CsVoicePreferred = new YangString("use-subscribed-value");  // default
        }
        return dc10CsVoicePreferred;
    }

    /**
     * Sets the value for child leaf "dc10-cs-voice-preferred",
     * using instance of generated typedef class.
     * @param dc10CsVoicePreferredValue The value to set.
     * @param dc10CsVoicePreferredValue used during instantiation.
     */
    public void setDc10CsVoicePreferredValue(YangString dc10CsVoicePreferredValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dc10-cs-voice-preferred",
            dc10CsVoicePreferredValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dc10-cs-voice-preferred",
     * using a String value.
     * @param dc10CsVoicePreferredValue used during instantiation.
     */
    public void setDc10CsVoicePreferredValue(String dc10CsVoicePreferredValue)
            throws JNCException {
        setDc10CsVoicePreferredValue(new YangString(dc10CsVoicePreferredValue));
    }

    /**
     * Unsets the value for child leaf "dc10-cs-voice-preferred".
     */
    public void unsetDc10CsVoicePreferredValue() throws JNCException {
        delete("dc10-cs-voice-preferred");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dc10-cs-voice-preferred" leaf will not have a value.
     */
    public void addDc10CsVoicePreferred() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dc10-cs-voice-preferred",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dc10-cs-voice-preferred" with operation "replace".
     */
    public void markDc10CsVoicePreferredReplace() throws JNCException {
        markLeafReplace("dc10CsVoicePreferred");
    }

    /**
     * Marks the leaf "dc10-cs-voice-preferred" with operation "merge".
     */
    public void markDc10CsVoicePreferredMerge() throws JNCException {
        markLeafMerge("dc10CsVoicePreferred");
    }

    /**
     * Marks the leaf "dc10-cs-voice-preferred" with operation "create".
     */
    public void markDc10CsVoicePreferredCreate() throws JNCException {
        markLeafCreate("dc10CsVoicePreferred");
    }

    /**
     * Marks the leaf "dc10-cs-voice-preferred" with operation "delete".
     */
    public void markDc10CsVoicePreferredDelete() throws JNCException {
        markLeafDelete("dc10CsVoicePreferred");
    }

    /* Access methods for optional leaf child: "dc11-ps-voice-preferred". */

    /**
     * Gets the value for child leaf "dc11-ps-voice-preferred".
     * @return The value of the leaf.
     */
    public YangString getDc11PsVoicePreferredValue() throws JNCException {
        YangString dc11PsVoicePreferred = (YangString)getValue("dc11-ps-voice-preferred");
        if (dc11PsVoicePreferred == null) {
            dc11PsVoicePreferred = new YangString("use-subscribed-value");  // default
        }
        return dc11PsVoicePreferred;
    }

    /**
     * Sets the value for child leaf "dc11-ps-voice-preferred",
     * using instance of generated typedef class.
     * @param dc11PsVoicePreferredValue The value to set.
     * @param dc11PsVoicePreferredValue used during instantiation.
     */
    public void setDc11PsVoicePreferredValue(YangString dc11PsVoicePreferredValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dc11-ps-voice-preferred",
            dc11PsVoicePreferredValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dc11-ps-voice-preferred",
     * using a String value.
     * @param dc11PsVoicePreferredValue used during instantiation.
     */
    public void setDc11PsVoicePreferredValue(String dc11PsVoicePreferredValue)
            throws JNCException {
        setDc11PsVoicePreferredValue(new YangString(dc11PsVoicePreferredValue));
    }

    /**
     * Unsets the value for child leaf "dc11-ps-voice-preferred".
     */
    public void unsetDc11PsVoicePreferredValue() throws JNCException {
        delete("dc11-ps-voice-preferred");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dc11-ps-voice-preferred" leaf will not have a value.
     */
    public void addDc11PsVoicePreferred() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dc11-ps-voice-preferred",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dc11-ps-voice-preferred" with operation "replace".
     */
    public void markDc11PsVoicePreferredReplace() throws JNCException {
        markLeafReplace("dc11PsVoicePreferred");
    }

    /**
     * Marks the leaf "dc11-ps-voice-preferred" with operation "merge".
     */
    public void markDc11PsVoicePreferredMerge() throws JNCException {
        markLeafMerge("dc11PsVoicePreferred");
    }

    /**
     * Marks the leaf "dc11-ps-voice-preferred" with operation "create".
     */
    public void markDc11PsVoicePreferredCreate() throws JNCException {
        markLeafCreate("dc11PsVoicePreferred");
    }

    /**
     * Marks the leaf "dc11-ps-voice-preferred" with operation "delete".
     */
    public void markDc11PsVoicePreferredDelete() throws JNCException {
        markLeafDelete("dc11PsVoicePreferred");
    }

    /* Access methods for optional leaf child: "vc00-cs-voice-only". */

    /**
     * Gets the value for child leaf "vc00-cs-voice-only".
     * @return The value of the leaf.
     */
    public YangString getVc00CsVoiceOnlyValue() throws JNCException {
        YangString vc00CsVoiceOnly = (YangString)getValue("vc00-cs-voice-only");
        if (vc00CsVoiceOnly == null) {
            vc00CsVoiceOnly = new YangString("use-subscribed-value");  // default
        }
        return vc00CsVoiceOnly;
    }

    /**
     * Sets the value for child leaf "vc00-cs-voice-only",
     * using instance of generated typedef class.
     * @param vc00CsVoiceOnlyValue The value to set.
     * @param vc00CsVoiceOnlyValue used during instantiation.
     */
    public void setVc00CsVoiceOnlyValue(YangString vc00CsVoiceOnlyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vc00-cs-voice-only",
            vc00CsVoiceOnlyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vc00-cs-voice-only",
     * using a String value.
     * @param vc00CsVoiceOnlyValue used during instantiation.
     */
    public void setVc00CsVoiceOnlyValue(String vc00CsVoiceOnlyValue)
            throws JNCException {
        setVc00CsVoiceOnlyValue(new YangString(vc00CsVoiceOnlyValue));
    }

    /**
     * Unsets the value for child leaf "vc00-cs-voice-only".
     */
    public void unsetVc00CsVoiceOnlyValue() throws JNCException {
        delete("vc00-cs-voice-only");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vc00-cs-voice-only" leaf will not have a value.
     */
    public void addVc00CsVoiceOnly() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vc00-cs-voice-only",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vc00-cs-voice-only" with operation "replace".
     */
    public void markVc00CsVoiceOnlyReplace() throws JNCException {
        markLeafReplace("vc00CsVoiceOnly");
    }

    /**
     * Marks the leaf "vc00-cs-voice-only" with operation "merge".
     */
    public void markVc00CsVoiceOnlyMerge() throws JNCException {
        markLeafMerge("vc00CsVoiceOnly");
    }

    /**
     * Marks the leaf "vc00-cs-voice-only" with operation "create".
     */
    public void markVc00CsVoiceOnlyCreate() throws JNCException {
        markLeafCreate("vc00CsVoiceOnly");
    }

    /**
     * Marks the leaf "vc00-cs-voice-only" with operation "delete".
     */
    public void markVc00CsVoiceOnlyDelete() throws JNCException {
        markLeafDelete("vc00CsVoiceOnly");
    }

    /* Access methods for optional leaf child: "vc01-ps-voice-only". */

    /**
     * Gets the value for child leaf "vc01-ps-voice-only".
     * @return The value of the leaf.
     */
    public YangString getVc01PsVoiceOnlyValue() throws JNCException {
        YangString vc01PsVoiceOnly = (YangString)getValue("vc01-ps-voice-only");
        if (vc01PsVoiceOnly == null) {
            vc01PsVoiceOnly = new YangString("use-subscribed-value");  // default
        }
        return vc01PsVoiceOnly;
    }

    /**
     * Sets the value for child leaf "vc01-ps-voice-only",
     * using instance of generated typedef class.
     * @param vc01PsVoiceOnlyValue The value to set.
     * @param vc01PsVoiceOnlyValue used during instantiation.
     */
    public void setVc01PsVoiceOnlyValue(YangString vc01PsVoiceOnlyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vc01-ps-voice-only",
            vc01PsVoiceOnlyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vc01-ps-voice-only",
     * using a String value.
     * @param vc01PsVoiceOnlyValue used during instantiation.
     */
    public void setVc01PsVoiceOnlyValue(String vc01PsVoiceOnlyValue)
            throws JNCException {
        setVc01PsVoiceOnlyValue(new YangString(vc01PsVoiceOnlyValue));
    }

    /**
     * Unsets the value for child leaf "vc01-ps-voice-only".
     */
    public void unsetVc01PsVoiceOnlyValue() throws JNCException {
        delete("vc01-ps-voice-only");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vc01-ps-voice-only" leaf will not have a value.
     */
    public void addVc01PsVoiceOnly() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vc01-ps-voice-only",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vc01-ps-voice-only" with operation "replace".
     */
    public void markVc01PsVoiceOnlyReplace() throws JNCException {
        markLeafReplace("vc01PsVoiceOnly");
    }

    /**
     * Marks the leaf "vc01-ps-voice-only" with operation "merge".
     */
    public void markVc01PsVoiceOnlyMerge() throws JNCException {
        markLeafMerge("vc01PsVoiceOnly");
    }

    /**
     * Marks the leaf "vc01-ps-voice-only" with operation "create".
     */
    public void markVc01PsVoiceOnlyCreate() throws JNCException {
        markLeafCreate("vc01PsVoiceOnly");
    }

    /**
     * Marks the leaf "vc01-ps-voice-only" with operation "delete".
     */
    public void markVc01PsVoiceOnlyDelete() throws JNCException {
        markLeafDelete("vc01PsVoiceOnly");
    }

    /* Access methods for optional leaf child: "vc10-cs-voice-preferred". */

    /**
     * Gets the value for child leaf "vc10-cs-voice-preferred".
     * @return The value of the leaf.
     */
    public YangString getVc10CsVoicePreferredValue() throws JNCException {
        YangString vc10CsVoicePreferred = (YangString)getValue("vc10-cs-voice-preferred");
        if (vc10CsVoicePreferred == null) {
            vc10CsVoicePreferred = new YangString("use-subscribed-value");  // default
        }
        return vc10CsVoicePreferred;
    }

    /**
     * Sets the value for child leaf "vc10-cs-voice-preferred",
     * using instance of generated typedef class.
     * @param vc10CsVoicePreferredValue The value to set.
     * @param vc10CsVoicePreferredValue used during instantiation.
     */
    public void setVc10CsVoicePreferredValue(YangString vc10CsVoicePreferredValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vc10-cs-voice-preferred",
            vc10CsVoicePreferredValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vc10-cs-voice-preferred",
     * using a String value.
     * @param vc10CsVoicePreferredValue used during instantiation.
     */
    public void setVc10CsVoicePreferredValue(String vc10CsVoicePreferredValue)
            throws JNCException {
        setVc10CsVoicePreferredValue(new YangString(vc10CsVoicePreferredValue));
    }

    /**
     * Unsets the value for child leaf "vc10-cs-voice-preferred".
     */
    public void unsetVc10CsVoicePreferredValue() throws JNCException {
        delete("vc10-cs-voice-preferred");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vc10-cs-voice-preferred" leaf will not have a value.
     */
    public void addVc10CsVoicePreferred() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vc10-cs-voice-preferred",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vc10-cs-voice-preferred" with operation "replace".
     */
    public void markVc10CsVoicePreferredReplace() throws JNCException {
        markLeafReplace("vc10CsVoicePreferred");
    }

    /**
     * Marks the leaf "vc10-cs-voice-preferred" with operation "merge".
     */
    public void markVc10CsVoicePreferredMerge() throws JNCException {
        markLeafMerge("vc10CsVoicePreferred");
    }

    /**
     * Marks the leaf "vc10-cs-voice-preferred" with operation "create".
     */
    public void markVc10CsVoicePreferredCreate() throws JNCException {
        markLeafCreate("vc10CsVoicePreferred");
    }

    /**
     * Marks the leaf "vc10-cs-voice-preferred" with operation "delete".
     */
    public void markVc10CsVoicePreferredDelete() throws JNCException {
        markLeafDelete("vc10CsVoicePreferred");
    }

    /* Access methods for optional leaf child: "vc11-ps-voice-preferred". */

    /**
     * Gets the value for child leaf "vc11-ps-voice-preferred".
     * @return The value of the leaf.
     */
    public YangString getVc11PsVoicePreferredValue() throws JNCException {
        YangString vc11PsVoicePreferred = (YangString)getValue("vc11-ps-voice-preferred");
        if (vc11PsVoicePreferred == null) {
            vc11PsVoicePreferred = new YangString("use-subscribed-value");  // default
        }
        return vc11PsVoicePreferred;
    }

    /**
     * Sets the value for child leaf "vc11-ps-voice-preferred",
     * using instance of generated typedef class.
     * @param vc11PsVoicePreferredValue The value to set.
     * @param vc11PsVoicePreferredValue used during instantiation.
     */
    public void setVc11PsVoicePreferredValue(YangString vc11PsVoicePreferredValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vc11-ps-voice-preferred",
            vc11PsVoicePreferredValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vc11-ps-voice-preferred",
     * using a String value.
     * @param vc11PsVoicePreferredValue used during instantiation.
     */
    public void setVc11PsVoicePreferredValue(String vc11PsVoicePreferredValue)
            throws JNCException {
        setVc11PsVoicePreferredValue(new YangString(vc11PsVoicePreferredValue));
    }

    /**
     * Unsets the value for child leaf "vc11-ps-voice-preferred".
     */
    public void unsetVc11PsVoicePreferredValue() throws JNCException {
        delete("vc11-ps-voice-preferred");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vc11-ps-voice-preferred" leaf will not have a value.
     */
    public void addVc11PsVoicePreferred() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vc11-ps-voice-preferred",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vc11-ps-voice-preferred" with operation "replace".
     */
    public void markVc11PsVoicePreferredReplace() throws JNCException {
        markLeafReplace("vc11PsVoicePreferred");
    }

    /**
     * Marks the leaf "vc11-ps-voice-preferred" with operation "merge".
     */
    public void markVc11PsVoicePreferredMerge() throws JNCException {
        markLeafMerge("vc11PsVoicePreferred");
    }

    /**
     * Marks the leaf "vc11-ps-voice-preferred" with operation "create".
     */
    public void markVc11PsVoicePreferredCreate() throws JNCException {
        markLeafCreate("vc11PsVoicePreferred");
    }

    /**
     * Marks the leaf "vc11-ps-voice-preferred" with operation "delete".
     */
    public void markVc11PsVoicePreferredDelete() throws JNCException {
        markLeafDelete("vc11PsVoicePreferred");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
