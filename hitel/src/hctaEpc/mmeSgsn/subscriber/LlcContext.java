/* 
 * @(#)LlcContext.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;
import .hctaEpc.ImsiT;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/llc-context"
 * <p>
 * See line 49 in
 * sdCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class LlcContext extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty LlcContext object.
     */
    public LlcContext() {
        super(Epc.NAMESPACE, "llc-context");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public LlcContext clone() {
        return (LlcContext)cloneContent(new LlcContext());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public LlcContext cloneShallow() {
        return (LlcContext)cloneShallowContent(new LlcContext());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "imsi",
            "service",
            "sd-location",
            "llc-tlli",
            "new-tlli",
            "bucket-leak-rate",
            "bucket-full-ratio",
            "bucket-size",
            "data-saps-utilized",
            "ui-frames-to-ms",
            "ui-frames-from-ms",
            "i-frames-to-ms",
            "i-frames-from-ms",
            "i-frames-retransmitted-to-ms",
            "frames-protected-to-ms",
            "frames-protected-from-ms",
            "gea1-frames-ciphered-to-ms",
            "gea2-frames-ciphered-to-ms",
            "gea3-frames-ciphered-to-ms",
            "gea1-frames-ciphered-from-ms",
            "gea2-frames-ciphered-from-ms",
            "gea3-frames-ciphered-from-ms",
            "crc-errors-from-ms",
            "frames-buffered-to-ms",
            "congestion-discards-to-ms",
        };
    }

    /* Access methods for leaf child: "imsi". */

    /**
     * Gets the value for child leaf "imsi".
     * @return The value of the leaf.
     */
    public ImsiT getImsiValue() throws JNCException {
        return (ImsiT)getValue("imsi");
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a JNC type value.
     * @param imsiValue The value to set.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(ImsiT imsiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            imsiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a String value.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(String imsiValue) throws JNCException {
        setImsiValue(new ImsiT(imsiValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imsi" leaf will not have a value.
     */
    public void addImsi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "sd-location". */

    /**
     * Gets the value for child leaf "sd-location".
     * @return The value of the leaf.
     */
    public YangString getSdLocationValue() throws JNCException {
        return (YangString)getValue("sd-location");
    }

    /**
     * Sets the value for child leaf "sd-location",
     * using instance of generated typedef class.
     * @param sdLocationValue The value to set.
     * @param sdLocationValue used during instantiation.
     */
    public void setSdLocationValue(YangString sdLocationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sd-location",
            sdLocationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sd-location",
     * using a String value.
     * @param sdLocationValue used during instantiation.
     */
    public void setSdLocationValue(String sdLocationValue) throws JNCException {
        setSdLocationValue(new YangString(sdLocationValue));
    }

    /**
     * Unsets the value for child leaf "sd-location".
     */
    public void unsetSdLocationValue() throws JNCException {
        delete("sd-location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sd-location" leaf will not have a value.
     */
    public void addSdLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sd-location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sd-location" with operation "replace".
     */
    public void markSdLocationReplace() throws JNCException {
        markLeafReplace("sdLocation");
    }

    /**
     * Marks the leaf "sd-location" with operation "merge".
     */
    public void markSdLocationMerge() throws JNCException {
        markLeafMerge("sdLocation");
    }

    /**
     * Marks the leaf "sd-location" with operation "create".
     */
    public void markSdLocationCreate() throws JNCException {
        markLeafCreate("sdLocation");
    }

    /**
     * Marks the leaf "sd-location" with operation "delete".
     */
    public void markSdLocationDelete() throws JNCException {
        markLeafDelete("sdLocation");
    }

    /* Access methods for optional leaf child: "llc-tlli". */

    /**
     * Gets the value for child leaf "llc-tlli".
     * @return The value of the leaf.
     */
    public YangString getLlcTlliValue() throws JNCException {
        return (YangString)getValue("llc-tlli");
    }

    /**
     * Sets the value for child leaf "llc-tlli",
     * using instance of generated typedef class.
     * @param llcTlliValue The value to set.
     * @param llcTlliValue used during instantiation.
     */
    public void setLlcTlliValue(YangString llcTlliValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "llc-tlli",
            llcTlliValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "llc-tlli",
     * using a String value.
     * @param llcTlliValue used during instantiation.
     */
    public void setLlcTlliValue(String llcTlliValue) throws JNCException {
        setLlcTlliValue(new YangString(llcTlliValue));
    }

    /**
     * Unsets the value for child leaf "llc-tlli".
     */
    public void unsetLlcTlliValue() throws JNCException {
        delete("llc-tlli");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "llc-tlli" leaf will not have a value.
     */
    public void addLlcTlli() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "llc-tlli",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "llc-tlli" with operation "replace".
     */
    public void markLlcTlliReplace() throws JNCException {
        markLeafReplace("llcTlli");
    }

    /**
     * Marks the leaf "llc-tlli" with operation "merge".
     */
    public void markLlcTlliMerge() throws JNCException {
        markLeafMerge("llcTlli");
    }

    /**
     * Marks the leaf "llc-tlli" with operation "create".
     */
    public void markLlcTlliCreate() throws JNCException {
        markLeafCreate("llcTlli");
    }

    /**
     * Marks the leaf "llc-tlli" with operation "delete".
     */
    public void markLlcTlliDelete() throws JNCException {
        markLeafDelete("llcTlli");
    }

    /* Access methods for optional leaf child: "new-tlli". */

    /**
     * Gets the value for child leaf "new-tlli".
     * @return The value of the leaf.
     */
    public YangString getNewTlliValue() throws JNCException {
        return (YangString)getValue("new-tlli");
    }

    /**
     * Sets the value for child leaf "new-tlli",
     * using instance of generated typedef class.
     * @param newTlliValue The value to set.
     * @param newTlliValue used during instantiation.
     */
    public void setNewTlliValue(YangString newTlliValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "new-tlli",
            newTlliValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "new-tlli",
     * using a String value.
     * @param newTlliValue used during instantiation.
     */
    public void setNewTlliValue(String newTlliValue) throws JNCException {
        setNewTlliValue(new YangString(newTlliValue));
    }

    /**
     * Unsets the value for child leaf "new-tlli".
     */
    public void unsetNewTlliValue() throws JNCException {
        delete("new-tlli");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "new-tlli" leaf will not have a value.
     */
    public void addNewTlli() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "new-tlli",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "new-tlli" with operation "replace".
     */
    public void markNewTlliReplace() throws JNCException {
        markLeafReplace("newTlli");
    }

    /**
     * Marks the leaf "new-tlli" with operation "merge".
     */
    public void markNewTlliMerge() throws JNCException {
        markLeafMerge("newTlli");
    }

    /**
     * Marks the leaf "new-tlli" with operation "create".
     */
    public void markNewTlliCreate() throws JNCException {
        markLeafCreate("newTlli");
    }

    /**
     * Marks the leaf "new-tlli" with operation "delete".
     */
    public void markNewTlliDelete() throws JNCException {
        markLeafDelete("newTlli");
    }

    /* Access methods for optional leaf child: "bucket-leak-rate". */

    /**
     * Gets the value for child leaf "bucket-leak-rate".
     * @return The value of the leaf.
     */
    public YangUInt32 getBucketLeakRateValue() throws JNCException {
        return (YangUInt32)getValue("bucket-leak-rate");
    }

    /**
     * Sets the value for child leaf "bucket-leak-rate",
     * using instance of generated typedef class.
     * @param bucketLeakRateValue The value to set.
     * @param bucketLeakRateValue used during instantiation.
     */
    public void setBucketLeakRateValue(YangUInt32 bucketLeakRateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bucket-leak-rate",
            bucketLeakRateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bucket-leak-rate",
     * using Java primitive values.
     * @param bucketLeakRateValue used during instantiation.
     */
    public void setBucketLeakRateValue(long bucketLeakRateValue)
            throws JNCException {
        setBucketLeakRateValue(new YangUInt32(bucketLeakRateValue));
    }

    /**
     * Sets the value for child leaf "bucket-leak-rate",
     * using a String value.
     * @param bucketLeakRateValue used during instantiation.
     */
    public void setBucketLeakRateValue(String bucketLeakRateValue)
            throws JNCException {
        setBucketLeakRateValue(new YangUInt32(bucketLeakRateValue));
    }

    /**
     * Unsets the value for child leaf "bucket-leak-rate".
     */
    public void unsetBucketLeakRateValue() throws JNCException {
        delete("bucket-leak-rate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bucket-leak-rate" leaf will not have a value.
     */
    public void addBucketLeakRate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bucket-leak-rate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bucket-leak-rate" with operation "replace".
     */
    public void markBucketLeakRateReplace() throws JNCException {
        markLeafReplace("bucketLeakRate");
    }

    /**
     * Marks the leaf "bucket-leak-rate" with operation "merge".
     */
    public void markBucketLeakRateMerge() throws JNCException {
        markLeafMerge("bucketLeakRate");
    }

    /**
     * Marks the leaf "bucket-leak-rate" with operation "create".
     */
    public void markBucketLeakRateCreate() throws JNCException {
        markLeafCreate("bucketLeakRate");
    }

    /**
     * Marks the leaf "bucket-leak-rate" with operation "delete".
     */
    public void markBucketLeakRateDelete() throws JNCException {
        markLeafDelete("bucketLeakRate");
    }

    /* Access methods for optional leaf child: "bucket-full-ratio". */

    /**
     * Gets the value for child leaf "bucket-full-ratio".
     * @return The value of the leaf.
     */
    public YangString getBucketFullRatioValue() throws JNCException {
        return (YangString)getValue("bucket-full-ratio");
    }

    /**
     * Sets the value for child leaf "bucket-full-ratio",
     * using instance of generated typedef class.
     * @param bucketFullRatioValue The value to set.
     * @param bucketFullRatioValue used during instantiation.
     */
    public void setBucketFullRatioValue(YangString bucketFullRatioValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bucket-full-ratio",
            bucketFullRatioValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bucket-full-ratio",
     * using a String value.
     * @param bucketFullRatioValue used during instantiation.
     */
    public void setBucketFullRatioValue(String bucketFullRatioValue)
            throws JNCException {
        setBucketFullRatioValue(new YangString(bucketFullRatioValue));
    }

    /**
     * Unsets the value for child leaf "bucket-full-ratio".
     */
    public void unsetBucketFullRatioValue() throws JNCException {
        delete("bucket-full-ratio");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bucket-full-ratio" leaf will not have a value.
     */
    public void addBucketFullRatio() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bucket-full-ratio",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bucket-full-ratio" with operation "replace".
     */
    public void markBucketFullRatioReplace() throws JNCException {
        markLeafReplace("bucketFullRatio");
    }

    /**
     * Marks the leaf "bucket-full-ratio" with operation "merge".
     */
    public void markBucketFullRatioMerge() throws JNCException {
        markLeafMerge("bucketFullRatio");
    }

    /**
     * Marks the leaf "bucket-full-ratio" with operation "create".
     */
    public void markBucketFullRatioCreate() throws JNCException {
        markLeafCreate("bucketFullRatio");
    }

    /**
     * Marks the leaf "bucket-full-ratio" with operation "delete".
     */
    public void markBucketFullRatioDelete() throws JNCException {
        markLeafDelete("bucketFullRatio");
    }

    /* Access methods for optional leaf child: "bucket-size". */

    /**
     * Gets the value for child leaf "bucket-size".
     * @return The value of the leaf.
     */
    public YangUInt32 getBucketSizeValue() throws JNCException {
        return (YangUInt32)getValue("bucket-size");
    }

    /**
     * Sets the value for child leaf "bucket-size",
     * using instance of generated typedef class.
     * @param bucketSizeValue The value to set.
     * @param bucketSizeValue used during instantiation.
     */
    public void setBucketSizeValue(YangUInt32 bucketSizeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bucket-size",
            bucketSizeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bucket-size",
     * using Java primitive values.
     * @param bucketSizeValue used during instantiation.
     */
    public void setBucketSizeValue(long bucketSizeValue) throws JNCException {
        setBucketSizeValue(new YangUInt32(bucketSizeValue));
    }

    /**
     * Sets the value for child leaf "bucket-size",
     * using a String value.
     * @param bucketSizeValue used during instantiation.
     */
    public void setBucketSizeValue(String bucketSizeValue) throws JNCException {
        setBucketSizeValue(new YangUInt32(bucketSizeValue));
    }

    /**
     * Unsets the value for child leaf "bucket-size".
     */
    public void unsetBucketSizeValue() throws JNCException {
        delete("bucket-size");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bucket-size" leaf will not have a value.
     */
    public void addBucketSize() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bucket-size",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bucket-size" with operation "replace".
     */
    public void markBucketSizeReplace() throws JNCException {
        markLeafReplace("bucketSize");
    }

    /**
     * Marks the leaf "bucket-size" with operation "merge".
     */
    public void markBucketSizeMerge() throws JNCException {
        markLeafMerge("bucketSize");
    }

    /**
     * Marks the leaf "bucket-size" with operation "create".
     */
    public void markBucketSizeCreate() throws JNCException {
        markLeafCreate("bucketSize");
    }

    /**
     * Marks the leaf "bucket-size" with operation "delete".
     */
    public void markBucketSizeDelete() throws JNCException {
        markLeafDelete("bucketSize");
    }

    /* Access methods for optional leaf child: "data-saps-utilized". */

    /**
     * Gets the value for child leaf "data-saps-utilized".
     * @return The value of the leaf.
     */
    public YangUInt16 getDataSapsUtilizedValue() throws JNCException {
        return (YangUInt16)getValue("data-saps-utilized");
    }

    /**
     * Sets the value for child leaf "data-saps-utilized",
     * using instance of generated typedef class.
     * @param dataSapsUtilizedValue The value to set.
     * @param dataSapsUtilizedValue used during instantiation.
     */
    public void setDataSapsUtilizedValue(YangUInt16 dataSapsUtilizedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "data-saps-utilized",
            dataSapsUtilizedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "data-saps-utilized",
     * using Java primitive values.
     * @param dataSapsUtilizedValue used during instantiation.
     */
    public void setDataSapsUtilizedValue(int dataSapsUtilizedValue)
            throws JNCException {
        setDataSapsUtilizedValue(new YangUInt16(dataSapsUtilizedValue));
    }

    /**
     * Sets the value for child leaf "data-saps-utilized",
     * using a String value.
     * @param dataSapsUtilizedValue used during instantiation.
     */
    public void setDataSapsUtilizedValue(String dataSapsUtilizedValue)
            throws JNCException {
        setDataSapsUtilizedValue(new YangUInt16(dataSapsUtilizedValue));
    }

    /**
     * Unsets the value for child leaf "data-saps-utilized".
     */
    public void unsetDataSapsUtilizedValue() throws JNCException {
        delete("data-saps-utilized");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "data-saps-utilized" leaf will not have a value.
     */
    public void addDataSapsUtilized() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "data-saps-utilized",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "data-saps-utilized" with operation "replace".
     */
    public void markDataSapsUtilizedReplace() throws JNCException {
        markLeafReplace("dataSapsUtilized");
    }

    /**
     * Marks the leaf "data-saps-utilized" with operation "merge".
     */
    public void markDataSapsUtilizedMerge() throws JNCException {
        markLeafMerge("dataSapsUtilized");
    }

    /**
     * Marks the leaf "data-saps-utilized" with operation "create".
     */
    public void markDataSapsUtilizedCreate() throws JNCException {
        markLeafCreate("dataSapsUtilized");
    }

    /**
     * Marks the leaf "data-saps-utilized" with operation "delete".
     */
    public void markDataSapsUtilizedDelete() throws JNCException {
        markLeafDelete("dataSapsUtilized");
    }

    /* Access methods for optional leaf child: "ui-frames-to-ms". */

    /**
     * Gets the value for child leaf "ui-frames-to-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getUiFramesToMsValue() throws JNCException {
        return (YangUInt32)getValue("ui-frames-to-ms");
    }

    /**
     * Sets the value for child leaf "ui-frames-to-ms",
     * using instance of generated typedef class.
     * @param uiFramesToMsValue The value to set.
     * @param uiFramesToMsValue used during instantiation.
     */
    public void setUiFramesToMsValue(YangUInt32 uiFramesToMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ui-frames-to-ms",
            uiFramesToMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ui-frames-to-ms",
     * using Java primitive values.
     * @param uiFramesToMsValue used during instantiation.
     */
    public void setUiFramesToMsValue(long uiFramesToMsValue)
            throws JNCException {
        setUiFramesToMsValue(new YangUInt32(uiFramesToMsValue));
    }

    /**
     * Sets the value for child leaf "ui-frames-to-ms",
     * using a String value.
     * @param uiFramesToMsValue used during instantiation.
     */
    public void setUiFramesToMsValue(String uiFramesToMsValue)
            throws JNCException {
        setUiFramesToMsValue(new YangUInt32(uiFramesToMsValue));
    }

    /**
     * Unsets the value for child leaf "ui-frames-to-ms".
     */
    public void unsetUiFramesToMsValue() throws JNCException {
        delete("ui-frames-to-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ui-frames-to-ms" leaf will not have a value.
     */
    public void addUiFramesToMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ui-frames-to-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ui-frames-to-ms" with operation "replace".
     */
    public void markUiFramesToMsReplace() throws JNCException {
        markLeafReplace("uiFramesToMs");
    }

    /**
     * Marks the leaf "ui-frames-to-ms" with operation "merge".
     */
    public void markUiFramesToMsMerge() throws JNCException {
        markLeafMerge("uiFramesToMs");
    }

    /**
     * Marks the leaf "ui-frames-to-ms" with operation "create".
     */
    public void markUiFramesToMsCreate() throws JNCException {
        markLeafCreate("uiFramesToMs");
    }

    /**
     * Marks the leaf "ui-frames-to-ms" with operation "delete".
     */
    public void markUiFramesToMsDelete() throws JNCException {
        markLeafDelete("uiFramesToMs");
    }

    /* Access methods for optional leaf child: "ui-frames-from-ms". */

    /**
     * Gets the value for child leaf "ui-frames-from-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getUiFramesFromMsValue() throws JNCException {
        return (YangUInt32)getValue("ui-frames-from-ms");
    }

    /**
     * Sets the value for child leaf "ui-frames-from-ms",
     * using instance of generated typedef class.
     * @param uiFramesFromMsValue The value to set.
     * @param uiFramesFromMsValue used during instantiation.
     */
    public void setUiFramesFromMsValue(YangUInt32 uiFramesFromMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ui-frames-from-ms",
            uiFramesFromMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ui-frames-from-ms",
     * using Java primitive values.
     * @param uiFramesFromMsValue used during instantiation.
     */
    public void setUiFramesFromMsValue(long uiFramesFromMsValue)
            throws JNCException {
        setUiFramesFromMsValue(new YangUInt32(uiFramesFromMsValue));
    }

    /**
     * Sets the value for child leaf "ui-frames-from-ms",
     * using a String value.
     * @param uiFramesFromMsValue used during instantiation.
     */
    public void setUiFramesFromMsValue(String uiFramesFromMsValue)
            throws JNCException {
        setUiFramesFromMsValue(new YangUInt32(uiFramesFromMsValue));
    }

    /**
     * Unsets the value for child leaf "ui-frames-from-ms".
     */
    public void unsetUiFramesFromMsValue() throws JNCException {
        delete("ui-frames-from-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ui-frames-from-ms" leaf will not have a value.
     */
    public void addUiFramesFromMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ui-frames-from-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ui-frames-from-ms" with operation "replace".
     */
    public void markUiFramesFromMsReplace() throws JNCException {
        markLeafReplace("uiFramesFromMs");
    }

    /**
     * Marks the leaf "ui-frames-from-ms" with operation "merge".
     */
    public void markUiFramesFromMsMerge() throws JNCException {
        markLeafMerge("uiFramesFromMs");
    }

    /**
     * Marks the leaf "ui-frames-from-ms" with operation "create".
     */
    public void markUiFramesFromMsCreate() throws JNCException {
        markLeafCreate("uiFramesFromMs");
    }

    /**
     * Marks the leaf "ui-frames-from-ms" with operation "delete".
     */
    public void markUiFramesFromMsDelete() throws JNCException {
        markLeafDelete("uiFramesFromMs");
    }

    /* Access methods for optional leaf child: "i-frames-to-ms". */

    /**
     * Gets the value for child leaf "i-frames-to-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getIFramesToMsValue() throws JNCException {
        return (YangUInt32)getValue("i-frames-to-ms");
    }

    /**
     * Sets the value for child leaf "i-frames-to-ms",
     * using instance of generated typedef class.
     * @param iFramesToMsValue The value to set.
     * @param iFramesToMsValue used during instantiation.
     */
    public void setIFramesToMsValue(YangUInt32 iFramesToMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "i-frames-to-ms",
            iFramesToMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "i-frames-to-ms",
     * using Java primitive values.
     * @param iFramesToMsValue used during instantiation.
     */
    public void setIFramesToMsValue(long iFramesToMsValue) throws JNCException {
        setIFramesToMsValue(new YangUInt32(iFramesToMsValue));
    }

    /**
     * Sets the value for child leaf "i-frames-to-ms",
     * using a String value.
     * @param iFramesToMsValue used during instantiation.
     */
    public void setIFramesToMsValue(String iFramesToMsValue)
            throws JNCException {
        setIFramesToMsValue(new YangUInt32(iFramesToMsValue));
    }

    /**
     * Unsets the value for child leaf "i-frames-to-ms".
     */
    public void unsetIFramesToMsValue() throws JNCException {
        delete("i-frames-to-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "i-frames-to-ms" leaf will not have a value.
     */
    public void addIFramesToMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "i-frames-to-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "i-frames-to-ms" with operation "replace".
     */
    public void markIFramesToMsReplace() throws JNCException {
        markLeafReplace("iFramesToMs");
    }

    /**
     * Marks the leaf "i-frames-to-ms" with operation "merge".
     */
    public void markIFramesToMsMerge() throws JNCException {
        markLeafMerge("iFramesToMs");
    }

    /**
     * Marks the leaf "i-frames-to-ms" with operation "create".
     */
    public void markIFramesToMsCreate() throws JNCException {
        markLeafCreate("iFramesToMs");
    }

    /**
     * Marks the leaf "i-frames-to-ms" with operation "delete".
     */
    public void markIFramesToMsDelete() throws JNCException {
        markLeafDelete("iFramesToMs");
    }

    /* Access methods for optional leaf child: "i-frames-from-ms". */

    /**
     * Gets the value for child leaf "i-frames-from-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getIFramesFromMsValue() throws JNCException {
        return (YangUInt32)getValue("i-frames-from-ms");
    }

    /**
     * Sets the value for child leaf "i-frames-from-ms",
     * using instance of generated typedef class.
     * @param iFramesFromMsValue The value to set.
     * @param iFramesFromMsValue used during instantiation.
     */
    public void setIFramesFromMsValue(YangUInt32 iFramesFromMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "i-frames-from-ms",
            iFramesFromMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "i-frames-from-ms",
     * using Java primitive values.
     * @param iFramesFromMsValue used during instantiation.
     */
    public void setIFramesFromMsValue(long iFramesFromMsValue)
            throws JNCException {
        setIFramesFromMsValue(new YangUInt32(iFramesFromMsValue));
    }

    /**
     * Sets the value for child leaf "i-frames-from-ms",
     * using a String value.
     * @param iFramesFromMsValue used during instantiation.
     */
    public void setIFramesFromMsValue(String iFramesFromMsValue)
            throws JNCException {
        setIFramesFromMsValue(new YangUInt32(iFramesFromMsValue));
    }

    /**
     * Unsets the value for child leaf "i-frames-from-ms".
     */
    public void unsetIFramesFromMsValue() throws JNCException {
        delete("i-frames-from-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "i-frames-from-ms" leaf will not have a value.
     */
    public void addIFramesFromMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "i-frames-from-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "i-frames-from-ms" with operation "replace".
     */
    public void markIFramesFromMsReplace() throws JNCException {
        markLeafReplace("iFramesFromMs");
    }

    /**
     * Marks the leaf "i-frames-from-ms" with operation "merge".
     */
    public void markIFramesFromMsMerge() throws JNCException {
        markLeafMerge("iFramesFromMs");
    }

    /**
     * Marks the leaf "i-frames-from-ms" with operation "create".
     */
    public void markIFramesFromMsCreate() throws JNCException {
        markLeafCreate("iFramesFromMs");
    }

    /**
     * Marks the leaf "i-frames-from-ms" with operation "delete".
     */
    public void markIFramesFromMsDelete() throws JNCException {
        markLeafDelete("iFramesFromMs");
    }

    /* Access methods for optional leaf child: "i-frames-retransmitted-to-ms". */

    /**
     * Gets the value for child leaf "i-frames-retransmitted-to-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getIFramesRetransmittedToMsValue() throws JNCException {
        return (YangUInt32)getValue("i-frames-retransmitted-to-ms");
    }

    /**
     * Sets the value for child leaf "i-frames-retransmitted-to-ms",
     * using instance of generated typedef class.
     * @param iFramesRetransmittedToMsValue The value to set.
     * @param iFramesRetransmittedToMsValue used during instantiation.
     */
    public void setIFramesRetransmittedToMsValue(YangUInt32 iFramesRetransmittedToMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "i-frames-retransmitted-to-ms",
            iFramesRetransmittedToMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "i-frames-retransmitted-to-ms",
     * using Java primitive values.
     * @param iFramesRetransmittedToMsValue used during instantiation.
     */
    public void setIFramesRetransmittedToMsValue(long iFramesRetransmittedToMsValue)
            throws JNCException {
        setIFramesRetransmittedToMsValue(new YangUInt32(iFramesRetransmittedToMsValue));
    }

    /**
     * Sets the value for child leaf "i-frames-retransmitted-to-ms",
     * using a String value.
     * @param iFramesRetransmittedToMsValue used during instantiation.
     */
    public void setIFramesRetransmittedToMsValue(String iFramesRetransmittedToMsValue)
            throws JNCException {
        setIFramesRetransmittedToMsValue(new YangUInt32(iFramesRetransmittedToMsValue));
    }

    /**
     * Unsets the value for child leaf "i-frames-retransmitted-to-ms".
     */
    public void unsetIFramesRetransmittedToMsValue() throws JNCException {
        delete("i-frames-retransmitted-to-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "i-frames-retransmitted-to-ms" leaf will not have a value.
     */
    public void addIFramesRetransmittedToMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "i-frames-retransmitted-to-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "i-frames-retransmitted-to-ms" with operation "replace".
     */
    public void markIFramesRetransmittedToMsReplace() throws JNCException {
        markLeafReplace("iFramesRetransmittedToMs");
    }

    /**
     * Marks the leaf "i-frames-retransmitted-to-ms" with operation "merge".
     */
    public void markIFramesRetransmittedToMsMerge() throws JNCException {
        markLeafMerge("iFramesRetransmittedToMs");
    }

    /**
     * Marks the leaf "i-frames-retransmitted-to-ms" with operation "create".
     */
    public void markIFramesRetransmittedToMsCreate() throws JNCException {
        markLeafCreate("iFramesRetransmittedToMs");
    }

    /**
     * Marks the leaf "i-frames-retransmitted-to-ms" with operation "delete".
     */
    public void markIFramesRetransmittedToMsDelete() throws JNCException {
        markLeafDelete("iFramesRetransmittedToMs");
    }

    /* Access methods for optional leaf child: "frames-protected-to-ms". */

    /**
     * Gets the value for child leaf "frames-protected-to-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getFramesProtectedToMsValue() throws JNCException {
        return (YangUInt32)getValue("frames-protected-to-ms");
    }

    /**
     * Sets the value for child leaf "frames-protected-to-ms",
     * using instance of generated typedef class.
     * @param framesProtectedToMsValue The value to set.
     * @param framesProtectedToMsValue used during instantiation.
     */
    public void setFramesProtectedToMsValue(YangUInt32 framesProtectedToMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "frames-protected-to-ms",
            framesProtectedToMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "frames-protected-to-ms",
     * using Java primitive values.
     * @param framesProtectedToMsValue used during instantiation.
     */
    public void setFramesProtectedToMsValue(long framesProtectedToMsValue)
            throws JNCException {
        setFramesProtectedToMsValue(new YangUInt32(framesProtectedToMsValue));
    }

    /**
     * Sets the value for child leaf "frames-protected-to-ms",
     * using a String value.
     * @param framesProtectedToMsValue used during instantiation.
     */
    public void setFramesProtectedToMsValue(String framesProtectedToMsValue)
            throws JNCException {
        setFramesProtectedToMsValue(new YangUInt32(framesProtectedToMsValue));
    }

    /**
     * Unsets the value for child leaf "frames-protected-to-ms".
     */
    public void unsetFramesProtectedToMsValue() throws JNCException {
        delete("frames-protected-to-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "frames-protected-to-ms" leaf will not have a value.
     */
    public void addFramesProtectedToMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "frames-protected-to-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "frames-protected-to-ms" with operation "replace".
     */
    public void markFramesProtectedToMsReplace() throws JNCException {
        markLeafReplace("framesProtectedToMs");
    }

    /**
     * Marks the leaf "frames-protected-to-ms" with operation "merge".
     */
    public void markFramesProtectedToMsMerge() throws JNCException {
        markLeafMerge("framesProtectedToMs");
    }

    /**
     * Marks the leaf "frames-protected-to-ms" with operation "create".
     */
    public void markFramesProtectedToMsCreate() throws JNCException {
        markLeafCreate("framesProtectedToMs");
    }

    /**
     * Marks the leaf "frames-protected-to-ms" with operation "delete".
     */
    public void markFramesProtectedToMsDelete() throws JNCException {
        markLeafDelete("framesProtectedToMs");
    }

    /* Access methods for optional leaf child: "frames-protected-from-ms". */

    /**
     * Gets the value for child leaf "frames-protected-from-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getFramesProtectedFromMsValue() throws JNCException {
        return (YangUInt32)getValue("frames-protected-from-ms");
    }

    /**
     * Sets the value for child leaf "frames-protected-from-ms",
     * using instance of generated typedef class.
     * @param framesProtectedFromMsValue The value to set.
     * @param framesProtectedFromMsValue used during instantiation.
     */
    public void setFramesProtectedFromMsValue(YangUInt32 framesProtectedFromMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "frames-protected-from-ms",
            framesProtectedFromMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "frames-protected-from-ms",
     * using Java primitive values.
     * @param framesProtectedFromMsValue used during instantiation.
     */
    public void setFramesProtectedFromMsValue(long framesProtectedFromMsValue)
            throws JNCException {
        setFramesProtectedFromMsValue(new YangUInt32(framesProtectedFromMsValue));
    }

    /**
     * Sets the value for child leaf "frames-protected-from-ms",
     * using a String value.
     * @param framesProtectedFromMsValue used during instantiation.
     */
    public void setFramesProtectedFromMsValue(String framesProtectedFromMsValue)
            throws JNCException {
        setFramesProtectedFromMsValue(new YangUInt32(framesProtectedFromMsValue));
    }

    /**
     * Unsets the value for child leaf "frames-protected-from-ms".
     */
    public void unsetFramesProtectedFromMsValue() throws JNCException {
        delete("frames-protected-from-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "frames-protected-from-ms" leaf will not have a value.
     */
    public void addFramesProtectedFromMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "frames-protected-from-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "frames-protected-from-ms" with operation "replace".
     */
    public void markFramesProtectedFromMsReplace() throws JNCException {
        markLeafReplace("framesProtectedFromMs");
    }

    /**
     * Marks the leaf "frames-protected-from-ms" with operation "merge".
     */
    public void markFramesProtectedFromMsMerge() throws JNCException {
        markLeafMerge("framesProtectedFromMs");
    }

    /**
     * Marks the leaf "frames-protected-from-ms" with operation "create".
     */
    public void markFramesProtectedFromMsCreate() throws JNCException {
        markLeafCreate("framesProtectedFromMs");
    }

    /**
     * Marks the leaf "frames-protected-from-ms" with operation "delete".
     */
    public void markFramesProtectedFromMsDelete() throws JNCException {
        markLeafDelete("framesProtectedFromMs");
    }

    /* Access methods for optional leaf child: "gea1-frames-ciphered-to-ms". */

    /**
     * Gets the value for child leaf "gea1-frames-ciphered-to-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getGea1FramesCipheredToMsValue() throws JNCException {
        return (YangUInt32)getValue("gea1-frames-ciphered-to-ms");
    }

    /**
     * Sets the value for child leaf "gea1-frames-ciphered-to-ms",
     * using instance of generated typedef class.
     * @param gea1FramesCipheredToMsValue The value to set.
     * @param gea1FramesCipheredToMsValue used during instantiation.
     */
    public void setGea1FramesCipheredToMsValue(YangUInt32 gea1FramesCipheredToMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gea1-frames-ciphered-to-ms",
            gea1FramesCipheredToMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gea1-frames-ciphered-to-ms",
     * using Java primitive values.
     * @param gea1FramesCipheredToMsValue used during instantiation.
     */
    public void setGea1FramesCipheredToMsValue(long gea1FramesCipheredToMsValue)
            throws JNCException {
        setGea1FramesCipheredToMsValue(new YangUInt32(gea1FramesCipheredToMsValue));
    }

    /**
     * Sets the value for child leaf "gea1-frames-ciphered-to-ms",
     * using a String value.
     * @param gea1FramesCipheredToMsValue used during instantiation.
     */
    public void setGea1FramesCipheredToMsValue(String gea1FramesCipheredToMsValue)
            throws JNCException {
        setGea1FramesCipheredToMsValue(new YangUInt32(gea1FramesCipheredToMsValue));
    }

    /**
     * Unsets the value for child leaf "gea1-frames-ciphered-to-ms".
     */
    public void unsetGea1FramesCipheredToMsValue() throws JNCException {
        delete("gea1-frames-ciphered-to-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gea1-frames-ciphered-to-ms" leaf will not have a value.
     */
    public void addGea1FramesCipheredToMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gea1-frames-ciphered-to-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gea1-frames-ciphered-to-ms" with operation "replace".
     */
    public void markGea1FramesCipheredToMsReplace() throws JNCException {
        markLeafReplace("gea1FramesCipheredToMs");
    }

    /**
     * Marks the leaf "gea1-frames-ciphered-to-ms" with operation "merge".
     */
    public void markGea1FramesCipheredToMsMerge() throws JNCException {
        markLeafMerge("gea1FramesCipheredToMs");
    }

    /**
     * Marks the leaf "gea1-frames-ciphered-to-ms" with operation "create".
     */
    public void markGea1FramesCipheredToMsCreate() throws JNCException {
        markLeafCreate("gea1FramesCipheredToMs");
    }

    /**
     * Marks the leaf "gea1-frames-ciphered-to-ms" with operation "delete".
     */
    public void markGea1FramesCipheredToMsDelete() throws JNCException {
        markLeafDelete("gea1FramesCipheredToMs");
    }

    /* Access methods for optional leaf child: "gea2-frames-ciphered-to-ms". */

    /**
     * Gets the value for child leaf "gea2-frames-ciphered-to-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getGea2FramesCipheredToMsValue() throws JNCException {
        return (YangUInt32)getValue("gea2-frames-ciphered-to-ms");
    }

    /**
     * Sets the value for child leaf "gea2-frames-ciphered-to-ms",
     * using instance of generated typedef class.
     * @param gea2FramesCipheredToMsValue The value to set.
     * @param gea2FramesCipheredToMsValue used during instantiation.
     */
    public void setGea2FramesCipheredToMsValue(YangUInt32 gea2FramesCipheredToMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gea2-frames-ciphered-to-ms",
            gea2FramesCipheredToMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gea2-frames-ciphered-to-ms",
     * using Java primitive values.
     * @param gea2FramesCipheredToMsValue used during instantiation.
     */
    public void setGea2FramesCipheredToMsValue(long gea2FramesCipheredToMsValue)
            throws JNCException {
        setGea2FramesCipheredToMsValue(new YangUInt32(gea2FramesCipheredToMsValue));
    }

    /**
     * Sets the value for child leaf "gea2-frames-ciphered-to-ms",
     * using a String value.
     * @param gea2FramesCipheredToMsValue used during instantiation.
     */
    public void setGea2FramesCipheredToMsValue(String gea2FramesCipheredToMsValue)
            throws JNCException {
        setGea2FramesCipheredToMsValue(new YangUInt32(gea2FramesCipheredToMsValue));
    }

    /**
     * Unsets the value for child leaf "gea2-frames-ciphered-to-ms".
     */
    public void unsetGea2FramesCipheredToMsValue() throws JNCException {
        delete("gea2-frames-ciphered-to-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gea2-frames-ciphered-to-ms" leaf will not have a value.
     */
    public void addGea2FramesCipheredToMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gea2-frames-ciphered-to-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gea2-frames-ciphered-to-ms" with operation "replace".
     */
    public void markGea2FramesCipheredToMsReplace() throws JNCException {
        markLeafReplace("gea2FramesCipheredToMs");
    }

    /**
     * Marks the leaf "gea2-frames-ciphered-to-ms" with operation "merge".
     */
    public void markGea2FramesCipheredToMsMerge() throws JNCException {
        markLeafMerge("gea2FramesCipheredToMs");
    }

    /**
     * Marks the leaf "gea2-frames-ciphered-to-ms" with operation "create".
     */
    public void markGea2FramesCipheredToMsCreate() throws JNCException {
        markLeafCreate("gea2FramesCipheredToMs");
    }

    /**
     * Marks the leaf "gea2-frames-ciphered-to-ms" with operation "delete".
     */
    public void markGea2FramesCipheredToMsDelete() throws JNCException {
        markLeafDelete("gea2FramesCipheredToMs");
    }

    /* Access methods for optional leaf child: "gea3-frames-ciphered-to-ms". */

    /**
     * Gets the value for child leaf "gea3-frames-ciphered-to-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getGea3FramesCipheredToMsValue() throws JNCException {
        return (YangUInt32)getValue("gea3-frames-ciphered-to-ms");
    }

    /**
     * Sets the value for child leaf "gea3-frames-ciphered-to-ms",
     * using instance of generated typedef class.
     * @param gea3FramesCipheredToMsValue The value to set.
     * @param gea3FramesCipheredToMsValue used during instantiation.
     */
    public void setGea3FramesCipheredToMsValue(YangUInt32 gea3FramesCipheredToMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gea3-frames-ciphered-to-ms",
            gea3FramesCipheredToMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gea3-frames-ciphered-to-ms",
     * using Java primitive values.
     * @param gea3FramesCipheredToMsValue used during instantiation.
     */
    public void setGea3FramesCipheredToMsValue(long gea3FramesCipheredToMsValue)
            throws JNCException {
        setGea3FramesCipheredToMsValue(new YangUInt32(gea3FramesCipheredToMsValue));
    }

    /**
     * Sets the value for child leaf "gea3-frames-ciphered-to-ms",
     * using a String value.
     * @param gea3FramesCipheredToMsValue used during instantiation.
     */
    public void setGea3FramesCipheredToMsValue(String gea3FramesCipheredToMsValue)
            throws JNCException {
        setGea3FramesCipheredToMsValue(new YangUInt32(gea3FramesCipheredToMsValue));
    }

    /**
     * Unsets the value for child leaf "gea3-frames-ciphered-to-ms".
     */
    public void unsetGea3FramesCipheredToMsValue() throws JNCException {
        delete("gea3-frames-ciphered-to-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gea3-frames-ciphered-to-ms" leaf will not have a value.
     */
    public void addGea3FramesCipheredToMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gea3-frames-ciphered-to-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gea3-frames-ciphered-to-ms" with operation "replace".
     */
    public void markGea3FramesCipheredToMsReplace() throws JNCException {
        markLeafReplace("gea3FramesCipheredToMs");
    }

    /**
     * Marks the leaf "gea3-frames-ciphered-to-ms" with operation "merge".
     */
    public void markGea3FramesCipheredToMsMerge() throws JNCException {
        markLeafMerge("gea3FramesCipheredToMs");
    }

    /**
     * Marks the leaf "gea3-frames-ciphered-to-ms" with operation "create".
     */
    public void markGea3FramesCipheredToMsCreate() throws JNCException {
        markLeafCreate("gea3FramesCipheredToMs");
    }

    /**
     * Marks the leaf "gea3-frames-ciphered-to-ms" with operation "delete".
     */
    public void markGea3FramesCipheredToMsDelete() throws JNCException {
        markLeafDelete("gea3FramesCipheredToMs");
    }

    /* Access methods for optional leaf child: "gea1-frames-ciphered-from-ms". */

    /**
     * Gets the value for child leaf "gea1-frames-ciphered-from-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getGea1FramesCipheredFromMsValue() throws JNCException {
        return (YangUInt32)getValue("gea1-frames-ciphered-from-ms");
    }

    /**
     * Sets the value for child leaf "gea1-frames-ciphered-from-ms",
     * using instance of generated typedef class.
     * @param gea1FramesCipheredFromMsValue The value to set.
     * @param gea1FramesCipheredFromMsValue used during instantiation.
     */
    public void setGea1FramesCipheredFromMsValue(YangUInt32 gea1FramesCipheredFromMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gea1-frames-ciphered-from-ms",
            gea1FramesCipheredFromMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gea1-frames-ciphered-from-ms",
     * using Java primitive values.
     * @param gea1FramesCipheredFromMsValue used during instantiation.
     */
    public void setGea1FramesCipheredFromMsValue(long gea1FramesCipheredFromMsValue)
            throws JNCException {
        setGea1FramesCipheredFromMsValue(new YangUInt32(gea1FramesCipheredFromMsValue));
    }

    /**
     * Sets the value for child leaf "gea1-frames-ciphered-from-ms",
     * using a String value.
     * @param gea1FramesCipheredFromMsValue used during instantiation.
     */
    public void setGea1FramesCipheredFromMsValue(String gea1FramesCipheredFromMsValue)
            throws JNCException {
        setGea1FramesCipheredFromMsValue(new YangUInt32(gea1FramesCipheredFromMsValue));
    }

    /**
     * Unsets the value for child leaf "gea1-frames-ciphered-from-ms".
     */
    public void unsetGea1FramesCipheredFromMsValue() throws JNCException {
        delete("gea1-frames-ciphered-from-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gea1-frames-ciphered-from-ms" leaf will not have a value.
     */
    public void addGea1FramesCipheredFromMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gea1-frames-ciphered-from-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gea1-frames-ciphered-from-ms" with operation "replace".
     */
    public void markGea1FramesCipheredFromMsReplace() throws JNCException {
        markLeafReplace("gea1FramesCipheredFromMs");
    }

    /**
     * Marks the leaf "gea1-frames-ciphered-from-ms" with operation "merge".
     */
    public void markGea1FramesCipheredFromMsMerge() throws JNCException {
        markLeafMerge("gea1FramesCipheredFromMs");
    }

    /**
     * Marks the leaf "gea1-frames-ciphered-from-ms" with operation "create".
     */
    public void markGea1FramesCipheredFromMsCreate() throws JNCException {
        markLeafCreate("gea1FramesCipheredFromMs");
    }

    /**
     * Marks the leaf "gea1-frames-ciphered-from-ms" with operation "delete".
     */
    public void markGea1FramesCipheredFromMsDelete() throws JNCException {
        markLeafDelete("gea1FramesCipheredFromMs");
    }

    /* Access methods for optional leaf child: "gea2-frames-ciphered-from-ms". */

    /**
     * Gets the value for child leaf "gea2-frames-ciphered-from-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getGea2FramesCipheredFromMsValue() throws JNCException {
        return (YangUInt32)getValue("gea2-frames-ciphered-from-ms");
    }

    /**
     * Sets the value for child leaf "gea2-frames-ciphered-from-ms",
     * using instance of generated typedef class.
     * @param gea2FramesCipheredFromMsValue The value to set.
     * @param gea2FramesCipheredFromMsValue used during instantiation.
     */
    public void setGea2FramesCipheredFromMsValue(YangUInt32 gea2FramesCipheredFromMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gea2-frames-ciphered-from-ms",
            gea2FramesCipheredFromMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gea2-frames-ciphered-from-ms",
     * using Java primitive values.
     * @param gea2FramesCipheredFromMsValue used during instantiation.
     */
    public void setGea2FramesCipheredFromMsValue(long gea2FramesCipheredFromMsValue)
            throws JNCException {
        setGea2FramesCipheredFromMsValue(new YangUInt32(gea2FramesCipheredFromMsValue));
    }

    /**
     * Sets the value for child leaf "gea2-frames-ciphered-from-ms",
     * using a String value.
     * @param gea2FramesCipheredFromMsValue used during instantiation.
     */
    public void setGea2FramesCipheredFromMsValue(String gea2FramesCipheredFromMsValue)
            throws JNCException {
        setGea2FramesCipheredFromMsValue(new YangUInt32(gea2FramesCipheredFromMsValue));
    }

    /**
     * Unsets the value for child leaf "gea2-frames-ciphered-from-ms".
     */
    public void unsetGea2FramesCipheredFromMsValue() throws JNCException {
        delete("gea2-frames-ciphered-from-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gea2-frames-ciphered-from-ms" leaf will not have a value.
     */
    public void addGea2FramesCipheredFromMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gea2-frames-ciphered-from-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gea2-frames-ciphered-from-ms" with operation "replace".
     */
    public void markGea2FramesCipheredFromMsReplace() throws JNCException {
        markLeafReplace("gea2FramesCipheredFromMs");
    }

    /**
     * Marks the leaf "gea2-frames-ciphered-from-ms" with operation "merge".
     */
    public void markGea2FramesCipheredFromMsMerge() throws JNCException {
        markLeafMerge("gea2FramesCipheredFromMs");
    }

    /**
     * Marks the leaf "gea2-frames-ciphered-from-ms" with operation "create".
     */
    public void markGea2FramesCipheredFromMsCreate() throws JNCException {
        markLeafCreate("gea2FramesCipheredFromMs");
    }

    /**
     * Marks the leaf "gea2-frames-ciphered-from-ms" with operation "delete".
     */
    public void markGea2FramesCipheredFromMsDelete() throws JNCException {
        markLeafDelete("gea2FramesCipheredFromMs");
    }

    /* Access methods for optional leaf child: "gea3-frames-ciphered-from-ms". */

    /**
     * Gets the value for child leaf "gea3-frames-ciphered-from-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getGea3FramesCipheredFromMsValue() throws JNCException {
        return (YangUInt32)getValue("gea3-frames-ciphered-from-ms");
    }

    /**
     * Sets the value for child leaf "gea3-frames-ciphered-from-ms",
     * using instance of generated typedef class.
     * @param gea3FramesCipheredFromMsValue The value to set.
     * @param gea3FramesCipheredFromMsValue used during instantiation.
     */
    public void setGea3FramesCipheredFromMsValue(YangUInt32 gea3FramesCipheredFromMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gea3-frames-ciphered-from-ms",
            gea3FramesCipheredFromMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gea3-frames-ciphered-from-ms",
     * using Java primitive values.
     * @param gea3FramesCipheredFromMsValue used during instantiation.
     */
    public void setGea3FramesCipheredFromMsValue(long gea3FramesCipheredFromMsValue)
            throws JNCException {
        setGea3FramesCipheredFromMsValue(new YangUInt32(gea3FramesCipheredFromMsValue));
    }

    /**
     * Sets the value for child leaf "gea3-frames-ciphered-from-ms",
     * using a String value.
     * @param gea3FramesCipheredFromMsValue used during instantiation.
     */
    public void setGea3FramesCipheredFromMsValue(String gea3FramesCipheredFromMsValue)
            throws JNCException {
        setGea3FramesCipheredFromMsValue(new YangUInt32(gea3FramesCipheredFromMsValue));
    }

    /**
     * Unsets the value for child leaf "gea3-frames-ciphered-from-ms".
     */
    public void unsetGea3FramesCipheredFromMsValue() throws JNCException {
        delete("gea3-frames-ciphered-from-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gea3-frames-ciphered-from-ms" leaf will not have a value.
     */
    public void addGea3FramesCipheredFromMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gea3-frames-ciphered-from-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gea3-frames-ciphered-from-ms" with operation "replace".
     */
    public void markGea3FramesCipheredFromMsReplace() throws JNCException {
        markLeafReplace("gea3FramesCipheredFromMs");
    }

    /**
     * Marks the leaf "gea3-frames-ciphered-from-ms" with operation "merge".
     */
    public void markGea3FramesCipheredFromMsMerge() throws JNCException {
        markLeafMerge("gea3FramesCipheredFromMs");
    }

    /**
     * Marks the leaf "gea3-frames-ciphered-from-ms" with operation "create".
     */
    public void markGea3FramesCipheredFromMsCreate() throws JNCException {
        markLeafCreate("gea3FramesCipheredFromMs");
    }

    /**
     * Marks the leaf "gea3-frames-ciphered-from-ms" with operation "delete".
     */
    public void markGea3FramesCipheredFromMsDelete() throws JNCException {
        markLeafDelete("gea3FramesCipheredFromMs");
    }

    /* Access methods for optional leaf child: "crc-errors-from-ms". */

    /**
     * Gets the value for child leaf "crc-errors-from-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getCrcErrorsFromMsValue() throws JNCException {
        return (YangUInt32)getValue("crc-errors-from-ms");
    }

    /**
     * Sets the value for child leaf "crc-errors-from-ms",
     * using instance of generated typedef class.
     * @param crcErrorsFromMsValue The value to set.
     * @param crcErrorsFromMsValue used during instantiation.
     */
    public void setCrcErrorsFromMsValue(YangUInt32 crcErrorsFromMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "crc-errors-from-ms",
            crcErrorsFromMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "crc-errors-from-ms",
     * using Java primitive values.
     * @param crcErrorsFromMsValue used during instantiation.
     */
    public void setCrcErrorsFromMsValue(long crcErrorsFromMsValue)
            throws JNCException {
        setCrcErrorsFromMsValue(new YangUInt32(crcErrorsFromMsValue));
    }

    /**
     * Sets the value for child leaf "crc-errors-from-ms",
     * using a String value.
     * @param crcErrorsFromMsValue used during instantiation.
     */
    public void setCrcErrorsFromMsValue(String crcErrorsFromMsValue)
            throws JNCException {
        setCrcErrorsFromMsValue(new YangUInt32(crcErrorsFromMsValue));
    }

    /**
     * Unsets the value for child leaf "crc-errors-from-ms".
     */
    public void unsetCrcErrorsFromMsValue() throws JNCException {
        delete("crc-errors-from-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "crc-errors-from-ms" leaf will not have a value.
     */
    public void addCrcErrorsFromMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "crc-errors-from-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "crc-errors-from-ms" with operation "replace".
     */
    public void markCrcErrorsFromMsReplace() throws JNCException {
        markLeafReplace("crcErrorsFromMs");
    }

    /**
     * Marks the leaf "crc-errors-from-ms" with operation "merge".
     */
    public void markCrcErrorsFromMsMerge() throws JNCException {
        markLeafMerge("crcErrorsFromMs");
    }

    /**
     * Marks the leaf "crc-errors-from-ms" with operation "create".
     */
    public void markCrcErrorsFromMsCreate() throws JNCException {
        markLeafCreate("crcErrorsFromMs");
    }

    /**
     * Marks the leaf "crc-errors-from-ms" with operation "delete".
     */
    public void markCrcErrorsFromMsDelete() throws JNCException {
        markLeafDelete("crcErrorsFromMs");
    }

    /* Access methods for optional leaf child: "frames-buffered-to-ms". */

    /**
     * Gets the value for child leaf "frames-buffered-to-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getFramesBufferedToMsValue() throws JNCException {
        return (YangUInt32)getValue("frames-buffered-to-ms");
    }

    /**
     * Sets the value for child leaf "frames-buffered-to-ms",
     * using instance of generated typedef class.
     * @param framesBufferedToMsValue The value to set.
     * @param framesBufferedToMsValue used during instantiation.
     */
    public void setFramesBufferedToMsValue(YangUInt32 framesBufferedToMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "frames-buffered-to-ms",
            framesBufferedToMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "frames-buffered-to-ms",
     * using Java primitive values.
     * @param framesBufferedToMsValue used during instantiation.
     */
    public void setFramesBufferedToMsValue(long framesBufferedToMsValue)
            throws JNCException {
        setFramesBufferedToMsValue(new YangUInt32(framesBufferedToMsValue));
    }

    /**
     * Sets the value for child leaf "frames-buffered-to-ms",
     * using a String value.
     * @param framesBufferedToMsValue used during instantiation.
     */
    public void setFramesBufferedToMsValue(String framesBufferedToMsValue)
            throws JNCException {
        setFramesBufferedToMsValue(new YangUInt32(framesBufferedToMsValue));
    }

    /**
     * Unsets the value for child leaf "frames-buffered-to-ms".
     */
    public void unsetFramesBufferedToMsValue() throws JNCException {
        delete("frames-buffered-to-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "frames-buffered-to-ms" leaf will not have a value.
     */
    public void addFramesBufferedToMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "frames-buffered-to-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "frames-buffered-to-ms" with operation "replace".
     */
    public void markFramesBufferedToMsReplace() throws JNCException {
        markLeafReplace("framesBufferedToMs");
    }

    /**
     * Marks the leaf "frames-buffered-to-ms" with operation "merge".
     */
    public void markFramesBufferedToMsMerge() throws JNCException {
        markLeafMerge("framesBufferedToMs");
    }

    /**
     * Marks the leaf "frames-buffered-to-ms" with operation "create".
     */
    public void markFramesBufferedToMsCreate() throws JNCException {
        markLeafCreate("framesBufferedToMs");
    }

    /**
     * Marks the leaf "frames-buffered-to-ms" with operation "delete".
     */
    public void markFramesBufferedToMsDelete() throws JNCException {
        markLeafDelete("framesBufferedToMs");
    }

    /* Access methods for optional leaf child: "congestion-discards-to-ms". */

    /**
     * Gets the value for child leaf "congestion-discards-to-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getCongestionDiscardsToMsValue() throws JNCException {
        return (YangUInt32)getValue("congestion-discards-to-ms");
    }

    /**
     * Sets the value for child leaf "congestion-discards-to-ms",
     * using instance of generated typedef class.
     * @param congestionDiscardsToMsValue The value to set.
     * @param congestionDiscardsToMsValue used during instantiation.
     */
    public void setCongestionDiscardsToMsValue(YangUInt32 congestionDiscardsToMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "congestion-discards-to-ms",
            congestionDiscardsToMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "congestion-discards-to-ms",
     * using Java primitive values.
     * @param congestionDiscardsToMsValue used during instantiation.
     */
    public void setCongestionDiscardsToMsValue(long congestionDiscardsToMsValue)
            throws JNCException {
        setCongestionDiscardsToMsValue(new YangUInt32(congestionDiscardsToMsValue));
    }

    /**
     * Sets the value for child leaf "congestion-discards-to-ms",
     * using a String value.
     * @param congestionDiscardsToMsValue used during instantiation.
     */
    public void setCongestionDiscardsToMsValue(String congestionDiscardsToMsValue)
            throws JNCException {
        setCongestionDiscardsToMsValue(new YangUInt32(congestionDiscardsToMsValue));
    }

    /**
     * Unsets the value for child leaf "congestion-discards-to-ms".
     */
    public void unsetCongestionDiscardsToMsValue() throws JNCException {
        delete("congestion-discards-to-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "congestion-discards-to-ms" leaf will not have a value.
     */
    public void addCongestionDiscardsToMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "congestion-discards-to-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "congestion-discards-to-ms" with operation "replace".
     */
    public void markCongestionDiscardsToMsReplace() throws JNCException {
        markLeafReplace("congestionDiscardsToMs");
    }

    /**
     * Marks the leaf "congestion-discards-to-ms" with operation "merge".
     */
    public void markCongestionDiscardsToMsMerge() throws JNCException {
        markLeafMerge("congestionDiscardsToMs");
    }

    /**
     * Marks the leaf "congestion-discards-to-ms" with operation "create".
     */
    public void markCongestionDiscardsToMsCreate() throws JNCException {
        markLeafCreate("congestionDiscardsToMs");
    }

    /**
     * Marks the leaf "congestion-discards-to-ms" with operation "delete".
     */
    public void markCongestionDiscardsToMsDelete() throws JNCException {
        markLeafDelete("congestionDiscardsToMs");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
