/* 
 * @(#)MmeSubscriberClass.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUnion;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/mme-subscriber-class"
 * <p>
 * See line 940 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeSubscriberClass extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeSubscriberClass object.
     */
    public MmeSubscriberClass() {
        super(Epc.NAMESPACE, "mme-subscriber-class");
    }

    /**
     * Constructor for an initialized MmeSubscriberClass object,
     * 
     * @param nameValue Key argument of child.
     */
    public MmeSubscriberClass(YangString nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-subscriber-class");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized MmeSubscriberClass object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public MmeSubscriberClass(String nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-subscriber-class");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeSubscriberClass clone() {
        MmeSubscriberClass copy;
        try {
            copy = new MmeSubscriberClass(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeSubscriberClass)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeSubscriberClass cloneShallow() {
        MmeSubscriberClass copy;
        try {
            copy = new MmeSubscriberClass(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeSubscriberClass)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "forbidden-ta-list",
            "forbidden-apn-list",
            "eq-plmn-list",
            "subscriber-type",
            "rfsp-index",
            "local-qos-profile",
            "csfb",
            "snr-apn-operator-id",
            "snr-reject-cause-code",
            "snr-emm-reject-cause-code",
            "voice-domain-profile",
            "local-eps-qos-entry",
            "local-qos-pdn-access-type",
            "charging-char-for-gateway-sel",
            "handover-restriction",
            "apn-selection-profile",
            "ims-vops-agreement",
            "gateway-interface-sel",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "forbidden-ta-list". */

    /**
     * Gets the value for child leaf "forbidden-ta-list".
     * @return The value of the leaf.
     */
    public YangString getForbiddenTaListValue() throws JNCException {
        YangString forbiddenTaList = (YangString)getValue("forbidden-ta-list");
        if (forbiddenTaList == null) {
            forbiddenTaList = new YangString("");  // default
        }
        return forbiddenTaList;
    }

    /**
     * Sets the value for child leaf "forbidden-ta-list",
     * using instance of generated typedef class.
     * @param forbiddenTaListValue The value to set.
     * @param forbiddenTaListValue used during instantiation.
     */
    public void setForbiddenTaListValue(YangString forbiddenTaListValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "forbidden-ta-list",
            forbiddenTaListValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "forbidden-ta-list",
     * using a String value.
     * @param forbiddenTaListValue used during instantiation.
     */
    public void setForbiddenTaListValue(String forbiddenTaListValue)
            throws JNCException {
        setForbiddenTaListValue(new YangString(forbiddenTaListValue));
    }

    /**
     * Unsets the value for child leaf "forbidden-ta-list".
     */
    public void unsetForbiddenTaListValue() throws JNCException {
        delete("forbidden-ta-list");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "forbidden-ta-list" leaf will not have a value.
     */
    public void addForbiddenTaList() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "forbidden-ta-list",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "forbidden-ta-list" with operation "replace".
     */
    public void markForbiddenTaListReplace() throws JNCException {
        markLeafReplace("forbiddenTaList");
    }

    /**
     * Marks the leaf "forbidden-ta-list" with operation "merge".
     */
    public void markForbiddenTaListMerge() throws JNCException {
        markLeafMerge("forbiddenTaList");
    }

    /**
     * Marks the leaf "forbidden-ta-list" with operation "create".
     */
    public void markForbiddenTaListCreate() throws JNCException {
        markLeafCreate("forbiddenTaList");
    }

    /**
     * Marks the leaf "forbidden-ta-list" with operation "delete".
     */
    public void markForbiddenTaListDelete() throws JNCException {
        markLeafDelete("forbiddenTaList");
    }

    /* Access methods for optional leaf child: "forbidden-apn-list". */

    /**
     * Gets the value for child leaf "forbidden-apn-list".
     * @return The value of the leaf.
     */
    public YangString getForbiddenApnListValue() throws JNCException {
        YangString forbiddenApnList = (YangString)getValue("forbidden-apn-list");
        if (forbiddenApnList == null) {
            forbiddenApnList = new YangString("");  // default
        }
        return forbiddenApnList;
    }

    /**
     * Sets the value for child leaf "forbidden-apn-list",
     * using instance of generated typedef class.
     * @param forbiddenApnListValue The value to set.
     * @param forbiddenApnListValue used during instantiation.
     */
    public void setForbiddenApnListValue(YangString forbiddenApnListValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "forbidden-apn-list",
            forbiddenApnListValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "forbidden-apn-list",
     * using a String value.
     * @param forbiddenApnListValue used during instantiation.
     */
    public void setForbiddenApnListValue(String forbiddenApnListValue)
            throws JNCException {
        setForbiddenApnListValue(new YangString(forbiddenApnListValue));
    }

    /**
     * Unsets the value for child leaf "forbidden-apn-list".
     */
    public void unsetForbiddenApnListValue() throws JNCException {
        delete("forbidden-apn-list");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "forbidden-apn-list" leaf will not have a value.
     */
    public void addForbiddenApnList() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "forbidden-apn-list",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "forbidden-apn-list" with operation "replace".
     */
    public void markForbiddenApnListReplace() throws JNCException {
        markLeafReplace("forbiddenApnList");
    }

    /**
     * Marks the leaf "forbidden-apn-list" with operation "merge".
     */
    public void markForbiddenApnListMerge() throws JNCException {
        markLeafMerge("forbiddenApnList");
    }

    /**
     * Marks the leaf "forbidden-apn-list" with operation "create".
     */
    public void markForbiddenApnListCreate() throws JNCException {
        markLeafCreate("forbiddenApnList");
    }

    /**
     * Marks the leaf "forbidden-apn-list" with operation "delete".
     */
    public void markForbiddenApnListDelete() throws JNCException {
        markLeafDelete("forbiddenApnList");
    }

    /* Access methods for optional leaf child: "eq-plmn-list". */

    /**
     * Gets the value for child leaf "eq-plmn-list".
     * @return The value of the leaf.
     */
    public YangString getEqPlmnListValue() throws JNCException {
        return (YangString)getValue("eq-plmn-list");
    }

    /**
     * Sets the value for child leaf "eq-plmn-list",
     * using instance of generated typedef class.
     * @param eqPlmnListValue The value to set.
     * @param eqPlmnListValue used during instantiation.
     */
    public void setEqPlmnListValue(YangString eqPlmnListValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eq-plmn-list",
            eqPlmnListValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "eq-plmn-list",
     * using a String value.
     * @param eqPlmnListValue used during instantiation.
     */
    public void setEqPlmnListValue(String eqPlmnListValue) throws JNCException {
        setEqPlmnListValue(new YangString(eqPlmnListValue));
    }

    /**
     * Unsets the value for child leaf "eq-plmn-list".
     */
    public void unsetEqPlmnListValue() throws JNCException {
        delete("eq-plmn-list");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "eq-plmn-list" leaf will not have a value.
     */
    public void addEqPlmnList() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eq-plmn-list",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "eq-plmn-list" with operation "replace".
     */
    public void markEqPlmnListReplace() throws JNCException {
        markLeafReplace("eqPlmnList");
    }

    /**
     * Marks the leaf "eq-plmn-list" with operation "merge".
     */
    public void markEqPlmnListMerge() throws JNCException {
        markLeafMerge("eqPlmnList");
    }

    /**
     * Marks the leaf "eq-plmn-list" with operation "create".
     */
    public void markEqPlmnListCreate() throws JNCException {
        markLeafCreate("eqPlmnList");
    }

    /**
     * Marks the leaf "eq-plmn-list" with operation "delete".
     */
    public void markEqPlmnListDelete() throws JNCException {
        markLeafDelete("eqPlmnList");
    }

    /* Access methods for optional leaf child: "subscriber-type". */

    /**
     * Gets the value for child leaf "subscriber-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getSubscriberTypeValue() throws JNCException {
        YangEnumeration subscriberType = (YangEnumeration)getValue("subscriber-type");
        if (subscriberType == null) {
            subscriberType = new YangEnumeration("homer", new String[] {  // default
                "roamer",
                "homer",
                "snr-roamer",
            });
        }
        return subscriberType;
    }

    /**
     * Sets the value for child leaf "subscriber-type",
     * using instance of generated typedef class.
     * @param subscriberTypeValue The value to set.
     * @param subscriberTypeValue used during instantiation.
     */
    public void setSubscriberTypeValue(YangEnumeration subscriberTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "subscriber-type",
            subscriberTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "subscriber-type",
     * using a String value.
     * @param subscriberTypeValue used during instantiation.
     */
    public void setSubscriberTypeValue(String subscriberTypeValue)
            throws JNCException {
        setSubscriberTypeValue(new YangEnumeration(subscriberTypeValue, new String[] {
             "roamer",
             "homer",
             "snr-roamer",
        }));
    }

    /**
     * Unsets the value for child leaf "subscriber-type".
     */
    public void unsetSubscriberTypeValue() throws JNCException {
        delete("subscriber-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "subscriber-type" leaf will not have a value.
     */
    public void addSubscriberType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "subscriber-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "subscriber-type" with operation "replace".
     */
    public void markSubscriberTypeReplace() throws JNCException {
        markLeafReplace("subscriberType");
    }

    /**
     * Marks the leaf "subscriber-type" with operation "merge".
     */
    public void markSubscriberTypeMerge() throws JNCException {
        markLeafMerge("subscriberType");
    }

    /**
     * Marks the leaf "subscriber-type" with operation "create".
     */
    public void markSubscriberTypeCreate() throws JNCException {
        markLeafCreate("subscriberType");
    }

    /**
     * Marks the leaf "subscriber-type" with operation "delete".
     */
    public void markSubscriberTypeDelete() throws JNCException {
        markLeafDelete("subscriberType");
    }

    /* Access methods for optional leaf child: "rfsp-index". */

    /**
     * Gets the value for child leaf "rfsp-index".
     * @return The value of the leaf.
     */
    public YangString getRfspIndexValue() throws JNCException {
        YangString rfspIndex = (YangString)getValue("rfsp-index");
        if (rfspIndex == null) {
            rfspIndex = new YangString("use-subscribed-value");  // default
        }
        return rfspIndex;
    }

    /**
     * Sets the value for child leaf "rfsp-index",
     * using instance of generated typedef class.
     * @param rfspIndexValue The value to set.
     * @param rfspIndexValue used during instantiation.
     */
    public void setRfspIndexValue(YangString rfspIndexValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfsp-index",
            rfspIndexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rfsp-index",
     * using a String value.
     * @param rfspIndexValue used during instantiation.
     */
    public void setRfspIndexValue(String rfspIndexValue) throws JNCException {
        setRfspIndexValue(new YangString(rfspIndexValue));
    }

    /**
     * Unsets the value for child leaf "rfsp-index".
     */
    public void unsetRfspIndexValue() throws JNCException {
        delete("rfsp-index");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rfsp-index" leaf will not have a value.
     */
    public void addRfspIndex() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfsp-index",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rfsp-index" with operation "replace".
     */
    public void markRfspIndexReplace() throws JNCException {
        markLeafReplace("rfspIndex");
    }

    /**
     * Marks the leaf "rfsp-index" with operation "merge".
     */
    public void markRfspIndexMerge() throws JNCException {
        markLeafMerge("rfspIndex");
    }

    /**
     * Marks the leaf "rfsp-index" with operation "create".
     */
    public void markRfspIndexCreate() throws JNCException {
        markLeafCreate("rfspIndex");
    }

    /**
     * Marks the leaf "rfsp-index" with operation "delete".
     */
    public void markRfspIndexDelete() throws JNCException {
        markLeafDelete("rfspIndex");
    }

    /* Access methods for optional leaf child: "local-qos-profile". */

    /**
     * Gets the value for child leaf "local-qos-profile".
     * @return The value of the leaf.
     */
    public YangString getLocalQosProfileValue() throws JNCException {
        return (YangString)getValue("local-qos-profile");
    }

    /**
     * Sets the value for child leaf "local-qos-profile",
     * using instance of generated typedef class.
     * @param localQosProfileValue The value to set.
     * @param localQosProfileValue used during instantiation.
     */
    public void setLocalQosProfileValue(YangString localQosProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-qos-profile",
            localQosProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-qos-profile",
     * using a String value.
     * @param localQosProfileValue used during instantiation.
     */
    public void setLocalQosProfileValue(String localQosProfileValue)
            throws JNCException {
        setLocalQosProfileValue(new YangString(localQosProfileValue));
    }

    /**
     * Unsets the value for child leaf "local-qos-profile".
     */
    public void unsetLocalQosProfileValue() throws JNCException {
        delete("local-qos-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-qos-profile" leaf will not have a value.
     */
    public void addLocalQosProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-qos-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-qos-profile" with operation "replace".
     */
    public void markLocalQosProfileReplace() throws JNCException {
        markLeafReplace("localQosProfile");
    }

    /**
     * Marks the leaf "local-qos-profile" with operation "merge".
     */
    public void markLocalQosProfileMerge() throws JNCException {
        markLeafMerge("localQosProfile");
    }

    /**
     * Marks the leaf "local-qos-profile" with operation "create".
     */
    public void markLocalQosProfileCreate() throws JNCException {
        markLeafCreate("localQosProfile");
    }

    /**
     * Marks the leaf "local-qos-profile" with operation "delete".
     */
    public void markLocalQosProfileDelete() throws JNCException {
        markLeafDelete("localQosProfile");
    }

    /* Access methods for optional leaf child: "csfb". */

    /**
     * Gets the value for child leaf "csfb".
     * @return The value of the leaf.
     */
    public YangBoolean getCsfbValue() throws JNCException {
        YangBoolean csfb = (YangBoolean)getValue("csfb");
        if (csfb == null) {
            csfb = new YangBoolean("true");  // default
        }
        return csfb;
    }

    /**
     * Sets the value for child leaf "csfb",
     * using instance of generated typedef class.
     * @param csfbValue The value to set.
     * @param csfbValue used during instantiation.
     */
    public void setCsfbValue(YangBoolean csfbValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "csfb",
            csfbValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "csfb",
     * using Java primitive values.
     * @param csfbValue used during instantiation.
     */
    public void setCsfbValue(Boolean csfbValue) throws JNCException {
        setCsfbValue(new YangBoolean(csfbValue));
    }

    /**
     * Sets the value for child leaf "csfb",
     * using a String value.
     * @param csfbValue used during instantiation.
     */
    public void setCsfbValue(String csfbValue) throws JNCException {
        setCsfbValue(new YangBoolean(csfbValue));
    }

    /**
     * Unsets the value for child leaf "csfb".
     */
    public void unsetCsfbValue() throws JNCException {
        delete("csfb");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "csfb" leaf will not have a value.
     */
    public void addCsfb() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "csfb",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "csfb" with operation "replace".
     */
    public void markCsfbReplace() throws JNCException {
        markLeafReplace("csfb");
    }

    /**
     * Marks the leaf "csfb" with operation "merge".
     */
    public void markCsfbMerge() throws JNCException {
        markLeafMerge("csfb");
    }

    /**
     * Marks the leaf "csfb" with operation "create".
     */
    public void markCsfbCreate() throws JNCException {
        markLeafCreate("csfb");
    }

    /**
     * Marks the leaf "csfb" with operation "delete".
     */
    public void markCsfbDelete() throws JNCException {
        markLeafDelete("csfb");
    }

    /* Access methods for optional leaf child: "snr-apn-operator-id". */

    /**
     * Gets the value for child leaf "snr-apn-operator-id".
     * @return The value of the leaf.
     */
    public YangString getSnrApnOperatorIdValue() throws JNCException {
        YangString snrApnOperatorId = (YangString)getValue("snr-apn-operator-id");
        if (snrApnOperatorId == null) {
            snrApnOperatorId = new YangString("none");  // default
        }
        return snrApnOperatorId;
    }

    /**
     * Sets the value for child leaf "snr-apn-operator-id",
     * using instance of generated typedef class.
     * @param snrApnOperatorIdValue The value to set.
     * @param snrApnOperatorIdValue used during instantiation.
     */
    public void setSnrApnOperatorIdValue(YangString snrApnOperatorIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "snr-apn-operator-id",
            snrApnOperatorIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "snr-apn-operator-id",
     * using a String value.
     * @param snrApnOperatorIdValue used during instantiation.
     */
    public void setSnrApnOperatorIdValue(String snrApnOperatorIdValue)
            throws JNCException {
        setSnrApnOperatorIdValue(new YangString(snrApnOperatorIdValue));
    }

    /**
     * Unsets the value for child leaf "snr-apn-operator-id".
     */
    public void unsetSnrApnOperatorIdValue() throws JNCException {
        delete("snr-apn-operator-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "snr-apn-operator-id" leaf will not have a value.
     */
    public void addSnrApnOperatorId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "snr-apn-operator-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "snr-apn-operator-id" with operation "replace".
     */
    public void markSnrApnOperatorIdReplace() throws JNCException {
        markLeafReplace("snrApnOperatorId");
    }

    /**
     * Marks the leaf "snr-apn-operator-id" with operation "merge".
     */
    public void markSnrApnOperatorIdMerge() throws JNCException {
        markLeafMerge("snrApnOperatorId");
    }

    /**
     * Marks the leaf "snr-apn-operator-id" with operation "create".
     */
    public void markSnrApnOperatorIdCreate() throws JNCException {
        markLeafCreate("snrApnOperatorId");
    }

    /**
     * Marks the leaf "snr-apn-operator-id" with operation "delete".
     */
    public void markSnrApnOperatorIdDelete() throws JNCException {
        markLeafDelete("snrApnOperatorId");
    }

    /* Access methods for optional leaf child: "snr-reject-cause-code". */

    /**
     * Gets the value for child leaf "snr-reject-cause-code".
     * @return The value of the leaf.
     */
    public YangUnion getSnrRejectCauseCodeValue() throws JNCException {
        return (YangUnion)getValue("snr-reject-cause-code");
    }

    /**
     * Sets the value for child leaf "snr-reject-cause-code",
     * using instance of generated typedef class.
     * @param snrRejectCauseCodeValue The value to set.
     * @param snrRejectCauseCodeValue used during instantiation.
     */
    public void setSnrRejectCauseCodeValue(YangUnion snrRejectCauseCodeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "snr-reject-cause-code",
            snrRejectCauseCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "snr-reject-cause-code",
     * using a String value.
     * @param snrRejectCauseCodeValue used during instantiation.
     */
    public void setSnrRejectCauseCodeValue(String snrRejectCauseCodeValue)
            throws JNCException {
        setSnrRejectCauseCodeValue(new YangUnion(snrRejectCauseCodeValue, new String[] {
             "com.tailf.jnc.YangString",
             "com.tailf.jnc.YangEnumeration",
        }));
    }

    /**
     * Unsets the value for child leaf "snr-reject-cause-code".
     */
    public void unsetSnrRejectCauseCodeValue() throws JNCException {
        delete("snr-reject-cause-code");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "snr-reject-cause-code" leaf will not have a value.
     */
    public void addSnrRejectCauseCode() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "snr-reject-cause-code",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "snr-reject-cause-code" with operation "replace".
     */
    public void markSnrRejectCauseCodeReplace() throws JNCException {
        markLeafReplace("snrRejectCauseCode");
    }

    /**
     * Marks the leaf "snr-reject-cause-code" with operation "merge".
     */
    public void markSnrRejectCauseCodeMerge() throws JNCException {
        markLeafMerge("snrRejectCauseCode");
    }

    /**
     * Marks the leaf "snr-reject-cause-code" with operation "create".
     */
    public void markSnrRejectCauseCodeCreate() throws JNCException {
        markLeafCreate("snrRejectCauseCode");
    }

    /**
     * Marks the leaf "snr-reject-cause-code" with operation "delete".
     */
    public void markSnrRejectCauseCodeDelete() throws JNCException {
        markLeafDelete("snrRejectCauseCode");
    }

    /* Access methods for optional leaf child: "snr-emm-reject-cause-code". */

    /**
     * Gets the value for child leaf "snr-emm-reject-cause-code".
     * @return The value of the leaf.
     */
    public YangUnion getSnrEmmRejectCauseCodeValue() throws JNCException {
        return (YangUnion)getValue("snr-emm-reject-cause-code");
    }

    /**
     * Sets the value for child leaf "snr-emm-reject-cause-code",
     * using instance of generated typedef class.
     * @param snrEmmRejectCauseCodeValue The value to set.
     * @param snrEmmRejectCauseCodeValue used during instantiation.
     */
    public void setSnrEmmRejectCauseCodeValue(YangUnion snrEmmRejectCauseCodeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "snr-emm-reject-cause-code",
            snrEmmRejectCauseCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "snr-emm-reject-cause-code",
     * using a String value.
     * @param snrEmmRejectCauseCodeValue used during instantiation.
     */
    public void setSnrEmmRejectCauseCodeValue(String snrEmmRejectCauseCodeValue)
            throws JNCException {
        setSnrEmmRejectCauseCodeValue(new YangUnion(snrEmmRejectCauseCodeValue, new String[] {
             "com.tailf.jnc.YangString",
             "com.tailf.jnc.YangEnumeration",
        }));
    }

    /**
     * Unsets the value for child leaf "snr-emm-reject-cause-code".
     */
    public void unsetSnrEmmRejectCauseCodeValue() throws JNCException {
        delete("snr-emm-reject-cause-code");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "snr-emm-reject-cause-code" leaf will not have a value.
     */
    public void addSnrEmmRejectCauseCode() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "snr-emm-reject-cause-code",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "snr-emm-reject-cause-code" with operation "replace".
     */
    public void markSnrEmmRejectCauseCodeReplace() throws JNCException {
        markLeafReplace("snrEmmRejectCauseCode");
    }

    /**
     * Marks the leaf "snr-emm-reject-cause-code" with operation "merge".
     */
    public void markSnrEmmRejectCauseCodeMerge() throws JNCException {
        markLeafMerge("snrEmmRejectCauseCode");
    }

    /**
     * Marks the leaf "snr-emm-reject-cause-code" with operation "create".
     */
    public void markSnrEmmRejectCauseCodeCreate() throws JNCException {
        markLeafCreate("snrEmmRejectCauseCode");
    }

    /**
     * Marks the leaf "snr-emm-reject-cause-code" with operation "delete".
     */
    public void markSnrEmmRejectCauseCodeDelete() throws JNCException {
        markLeafDelete("snrEmmRejectCauseCode");
    }

    /* Access methods for optional leaf child: "voice-domain-profile". */

    /**
     * Gets the value for child leaf "voice-domain-profile".
     * @return The value of the leaf.
     */
    public YangString getVoiceDomainProfileValue() throws JNCException {
        return (YangString)getValue("voice-domain-profile");
    }

    /**
     * Sets the value for child leaf "voice-domain-profile",
     * using instance of generated typedef class.
     * @param voiceDomainProfileValue The value to set.
     * @param voiceDomainProfileValue used during instantiation.
     */
    public void setVoiceDomainProfileValue(YangString voiceDomainProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "voice-domain-profile",
            voiceDomainProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "voice-domain-profile",
     * using a String value.
     * @param voiceDomainProfileValue used during instantiation.
     */
    public void setVoiceDomainProfileValue(String voiceDomainProfileValue)
            throws JNCException {
        setVoiceDomainProfileValue(new YangString(voiceDomainProfileValue));
    }

    /**
     * Unsets the value for child leaf "voice-domain-profile".
     */
    public void unsetVoiceDomainProfileValue() throws JNCException {
        delete("voice-domain-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "voice-domain-profile" leaf will not have a value.
     */
    public void addVoiceDomainProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "voice-domain-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "voice-domain-profile" with operation "replace".
     */
    public void markVoiceDomainProfileReplace() throws JNCException {
        markLeafReplace("voiceDomainProfile");
    }

    /**
     * Marks the leaf "voice-domain-profile" with operation "merge".
     */
    public void markVoiceDomainProfileMerge() throws JNCException {
        markLeafMerge("voiceDomainProfile");
    }

    /**
     * Marks the leaf "voice-domain-profile" with operation "create".
     */
    public void markVoiceDomainProfileCreate() throws JNCException {
        markLeafCreate("voiceDomainProfile");
    }

    /**
     * Marks the leaf "voice-domain-profile" with operation "delete".
     */
    public void markVoiceDomainProfileDelete() throws JNCException {
        markLeafDelete("voiceDomainProfile");
    }

    /* Access methods for optional leaf child: "local-eps-qos-entry". */

    /**
     * Gets the value for child leaf "local-eps-qos-entry".
     * @return The value of the leaf.
     */
    public YangString getLocalEpsQosEntryValue() throws JNCException {
        return (YangString)getValue("local-eps-qos-entry");
    }

    /**
     * Sets the value for child leaf "local-eps-qos-entry",
     * using instance of generated typedef class.
     * @param localEpsQosEntryValue The value to set.
     * @param localEpsQosEntryValue used during instantiation.
     */
    public void setLocalEpsQosEntryValue(YangString localEpsQosEntryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-eps-qos-entry",
            localEpsQosEntryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-eps-qos-entry",
     * using a String value.
     * @param localEpsQosEntryValue used during instantiation.
     */
    public void setLocalEpsQosEntryValue(String localEpsQosEntryValue)
            throws JNCException {
        setLocalEpsQosEntryValue(new YangString(localEpsQosEntryValue));
    }

    /**
     * Unsets the value for child leaf "local-eps-qos-entry".
     */
    public void unsetLocalEpsQosEntryValue() throws JNCException {
        delete("local-eps-qos-entry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-eps-qos-entry" leaf will not have a value.
     */
    public void addLocalEpsQosEntry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-eps-qos-entry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-eps-qos-entry" with operation "replace".
     */
    public void markLocalEpsQosEntryReplace() throws JNCException {
        markLeafReplace("localEpsQosEntry");
    }

    /**
     * Marks the leaf "local-eps-qos-entry" with operation "merge".
     */
    public void markLocalEpsQosEntryMerge() throws JNCException {
        markLeafMerge("localEpsQosEntry");
    }

    /**
     * Marks the leaf "local-eps-qos-entry" with operation "create".
     */
    public void markLocalEpsQosEntryCreate() throws JNCException {
        markLeafCreate("localEpsQosEntry");
    }

    /**
     * Marks the leaf "local-eps-qos-entry" with operation "delete".
     */
    public void markLocalEpsQosEntryDelete() throws JNCException {
        markLeafDelete("localEpsQosEntry");
    }

    /* Access methods for optional leaf child: "local-qos-pdn-access-type". */

    /**
     * Gets the value for child leaf "local-qos-pdn-access-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getLocalQosPdnAccessTypeValue() throws JNCException {
        YangEnumeration localQosPdnAccessType = (YangEnumeration)getValue("local-qos-pdn-access-type");
        if (localQosPdnAccessType == null) {
            localQosPdnAccessType = new YangEnumeration("hplmn", new String[] {  // default
                "hplmn",
                "vplmn",
                "both",
            });
        }
        return localQosPdnAccessType;
    }

    /**
     * Sets the value for child leaf "local-qos-pdn-access-type",
     * using instance of generated typedef class.
     * @param localQosPdnAccessTypeValue The value to set.
     * @param localQosPdnAccessTypeValue used during instantiation.
     */
    public void setLocalQosPdnAccessTypeValue(YangEnumeration localQosPdnAccessTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-qos-pdn-access-type",
            localQosPdnAccessTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-qos-pdn-access-type",
     * using a String value.
     * @param localQosPdnAccessTypeValue used during instantiation.
     */
    public void setLocalQosPdnAccessTypeValue(String localQosPdnAccessTypeValue)
            throws JNCException {
        setLocalQosPdnAccessTypeValue(new YangEnumeration(localQosPdnAccessTypeValue, new String[] {
             "hplmn",
             "vplmn",
             "both",
        }));
    }

    /**
     * Unsets the value for child leaf "local-qos-pdn-access-type".
     */
    public void unsetLocalQosPdnAccessTypeValue() throws JNCException {
        delete("local-qos-pdn-access-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-qos-pdn-access-type" leaf will not have a value.
     */
    public void addLocalQosPdnAccessType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-qos-pdn-access-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-qos-pdn-access-type" with operation "replace".
     */
    public void markLocalQosPdnAccessTypeReplace() throws JNCException {
        markLeafReplace("localQosPdnAccessType");
    }

    /**
     * Marks the leaf "local-qos-pdn-access-type" with operation "merge".
     */
    public void markLocalQosPdnAccessTypeMerge() throws JNCException {
        markLeafMerge("localQosPdnAccessType");
    }

    /**
     * Marks the leaf "local-qos-pdn-access-type" with operation "create".
     */
    public void markLocalQosPdnAccessTypeCreate() throws JNCException {
        markLeafCreate("localQosPdnAccessType");
    }

    /**
     * Marks the leaf "local-qos-pdn-access-type" with operation "delete".
     */
    public void markLocalQosPdnAccessTypeDelete() throws JNCException {
        markLeafDelete("localQosPdnAccessType");
    }

    /* Access methods for optional leaf child: "charging-char-for-gateway-sel". */

    /**
     * Gets the value for child leaf "charging-char-for-gateway-sel".
     * @return The value of the leaf.
     */
    public YangString getChargingCharForGatewaySelValue() throws JNCException {
        YangString chargingCharForGatewaySel = (YangString)getValue("charging-char-for-gateway-sel");
        if (chargingCharForGatewaySel == null) {
            chargingCharForGatewaySel = new YangString("disable");  // default
        }
        return chargingCharForGatewaySel;
    }

    /**
     * Sets the value for child leaf "charging-char-for-gateway-sel",
     * using instance of generated typedef class.
     * @param chargingCharForGatewaySelValue The value to set.
     * @param chargingCharForGatewaySelValue used during instantiation.
     */
    public void setChargingCharForGatewaySelValue(YangString chargingCharForGatewaySelValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "charging-char-for-gateway-sel",
            chargingCharForGatewaySelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "charging-char-for-gateway-sel",
     * using a String value.
     * @param chargingCharForGatewaySelValue used during instantiation.
     */
    public void setChargingCharForGatewaySelValue(String chargingCharForGatewaySelValue)
            throws JNCException {
        setChargingCharForGatewaySelValue(new YangString(chargingCharForGatewaySelValue));
    }

    /**
     * Unsets the value for child leaf "charging-char-for-gateway-sel".
     */
    public void unsetChargingCharForGatewaySelValue() throws JNCException {
        delete("charging-char-for-gateway-sel");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "charging-char-for-gateway-sel" leaf will not have a value.
     */
    public void addChargingCharForGatewaySel() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "charging-char-for-gateway-sel",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "charging-char-for-gateway-sel" with operation "replace".
     */
    public void markChargingCharForGatewaySelReplace() throws JNCException {
        markLeafReplace("chargingCharForGatewaySel");
    }

    /**
     * Marks the leaf "charging-char-for-gateway-sel" with operation "merge".
     */
    public void markChargingCharForGatewaySelMerge() throws JNCException {
        markLeafMerge("chargingCharForGatewaySel");
    }

    /**
     * Marks the leaf "charging-char-for-gateway-sel" with operation "create".
     */
    public void markChargingCharForGatewaySelCreate() throws JNCException {
        markLeafCreate("chargingCharForGatewaySel");
    }

    /**
     * Marks the leaf "charging-char-for-gateway-sel" with operation "delete".
     */
    public void markChargingCharForGatewaySelDelete() throws JNCException {
        markLeafDelete("chargingCharForGatewaySel");
    }

    /* Access methods for optional leaf child: "handover-restriction". */

    /**
     * Gets the value for child leaf "handover-restriction".
     * @return The value of the leaf.
     */
    public YangString getHandoverRestrictionValue() throws JNCException {
        YangString handoverRestriction = (YangString)getValue("handover-restriction");
        if (handoverRestriction == null) {
            handoverRestriction = new YangString("none");  // default
        }
        return handoverRestriction;
    }

    /**
     * Sets the value for child leaf "handover-restriction",
     * using instance of generated typedef class.
     * @param handoverRestrictionValue The value to set.
     * @param handoverRestrictionValue used during instantiation.
     */
    public void setHandoverRestrictionValue(YangString handoverRestrictionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "handover-restriction",
            handoverRestrictionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "handover-restriction",
     * using a String value.
     * @param handoverRestrictionValue used during instantiation.
     */
    public void setHandoverRestrictionValue(String handoverRestrictionValue)
            throws JNCException {
        setHandoverRestrictionValue(new YangString(handoverRestrictionValue));
    }

    /**
     * Unsets the value for child leaf "handover-restriction".
     */
    public void unsetHandoverRestrictionValue() throws JNCException {
        delete("handover-restriction");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "handover-restriction" leaf will not have a value.
     */
    public void addHandoverRestriction() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "handover-restriction",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "handover-restriction" with operation "replace".
     */
    public void markHandoverRestrictionReplace() throws JNCException {
        markLeafReplace("handoverRestriction");
    }

    /**
     * Marks the leaf "handover-restriction" with operation "merge".
     */
    public void markHandoverRestrictionMerge() throws JNCException {
        markLeafMerge("handoverRestriction");
    }

    /**
     * Marks the leaf "handover-restriction" with operation "create".
     */
    public void markHandoverRestrictionCreate() throws JNCException {
        markLeafCreate("handoverRestriction");
    }

    /**
     * Marks the leaf "handover-restriction" with operation "delete".
     */
    public void markHandoverRestrictionDelete() throws JNCException {
        markLeafDelete("handoverRestriction");
    }

    /* Access methods for optional leaf child: "apn-selection-profile". */

    /**
     * Gets the value for child leaf "apn-selection-profile".
     * @return The value of the leaf.
     */
    public YangString getApnSelectionProfileValue() throws JNCException {
        YangString apnSelectionProfile = (YangString)getValue("apn-selection-profile");
        if (apnSelectionProfile == null) {
            apnSelectionProfile = new YangString("default");  // default
        }
        return apnSelectionProfile;
    }

    /**
     * Sets the value for child leaf "apn-selection-profile",
     * using instance of generated typedef class.
     * @param apnSelectionProfileValue The value to set.
     * @param apnSelectionProfileValue used during instantiation.
     */
    public void setApnSelectionProfileValue(YangString apnSelectionProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-selection-profile",
            apnSelectionProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-selection-profile",
     * using a String value.
     * @param apnSelectionProfileValue used during instantiation.
     */
    public void setApnSelectionProfileValue(String apnSelectionProfileValue)
            throws JNCException {
        setApnSelectionProfileValue(new YangString(apnSelectionProfileValue));
    }

    /**
     * Unsets the value for child leaf "apn-selection-profile".
     */
    public void unsetApnSelectionProfileValue() throws JNCException {
        delete("apn-selection-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-selection-profile" leaf will not have a value.
     */
    public void addApnSelectionProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-selection-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-selection-profile" with operation "replace".
     */
    public void markApnSelectionProfileReplace() throws JNCException {
        markLeafReplace("apnSelectionProfile");
    }

    /**
     * Marks the leaf "apn-selection-profile" with operation "merge".
     */
    public void markApnSelectionProfileMerge() throws JNCException {
        markLeafMerge("apnSelectionProfile");
    }

    /**
     * Marks the leaf "apn-selection-profile" with operation "create".
     */
    public void markApnSelectionProfileCreate() throws JNCException {
        markLeafCreate("apnSelectionProfile");
    }

    /**
     * Marks the leaf "apn-selection-profile" with operation "delete".
     */
    public void markApnSelectionProfileDelete() throws JNCException {
        markLeafDelete("apnSelectionProfile");
    }

    /* Access methods for optional leaf child: "ims-vops-agreement". */

    /**
     * Gets the value for child leaf "ims-vops-agreement".
     * @return The value of the leaf.
     */
    public YangEnumeration getImsVopsAgreementValue() throws JNCException {
        YangEnumeration imsVopsAgreement = (YangEnumeration)getValue("ims-vops-agreement");
        if (imsVopsAgreement == null) {
            imsVopsAgreement = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return imsVopsAgreement;
    }

    /**
     * Sets the value for child leaf "ims-vops-agreement",
     * using instance of generated typedef class.
     * @param imsVopsAgreementValue The value to set.
     * @param imsVopsAgreementValue used during instantiation.
     */
    public void setImsVopsAgreementValue(YangEnumeration imsVopsAgreementValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ims-vops-agreement",
            imsVopsAgreementValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ims-vops-agreement",
     * using a String value.
     * @param imsVopsAgreementValue used during instantiation.
     */
    public void setImsVopsAgreementValue(String imsVopsAgreementValue)
            throws JNCException {
        setImsVopsAgreementValue(new YangEnumeration(imsVopsAgreementValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "ims-vops-agreement".
     */
    public void unsetImsVopsAgreementValue() throws JNCException {
        delete("ims-vops-agreement");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ims-vops-agreement" leaf will not have a value.
     */
    public void addImsVopsAgreement() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ims-vops-agreement",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ims-vops-agreement" with operation "replace".
     */
    public void markImsVopsAgreementReplace() throws JNCException {
        markLeafReplace("imsVopsAgreement");
    }

    /**
     * Marks the leaf "ims-vops-agreement" with operation "merge".
     */
    public void markImsVopsAgreementMerge() throws JNCException {
        markLeafMerge("imsVopsAgreement");
    }

    /**
     * Marks the leaf "ims-vops-agreement" with operation "create".
     */
    public void markImsVopsAgreementCreate() throws JNCException {
        markLeafCreate("imsVopsAgreement");
    }

    /**
     * Marks the leaf "ims-vops-agreement" with operation "delete".
     */
    public void markImsVopsAgreementDelete() throws JNCException {
        markLeafDelete("imsVopsAgreement");
    }

    /* Access methods for optional leaf child: "gateway-interface-sel". */

    /**
     * Gets the value for child leaf "gateway-interface-sel".
     * @return The value of the leaf.
     */
    public YangEnumeration getGatewayInterfaceSelValue() throws JNCException {
        YangEnumeration gatewayInterfaceSel = (YangEnumeration)getValue("gateway-interface-sel");
        if (gatewayInterfaceSel == null) {
            gatewayInterfaceSel = new YangEnumeration("s4-preferred", new String[] {  // default
                "gn",
                "s4-preferred",
                "ue-epc-capability",
            });
        }
        return gatewayInterfaceSel;
    }

    /**
     * Sets the value for child leaf "gateway-interface-sel",
     * using instance of generated typedef class.
     * @param gatewayInterfaceSelValue The value to set.
     * @param gatewayInterfaceSelValue used during instantiation.
     */
    public void setGatewayInterfaceSelValue(YangEnumeration gatewayInterfaceSelValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gateway-interface-sel",
            gatewayInterfaceSelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gateway-interface-sel",
     * using a String value.
     * @param gatewayInterfaceSelValue used during instantiation.
     */
    public void setGatewayInterfaceSelValue(String gatewayInterfaceSelValue)
            throws JNCException {
        setGatewayInterfaceSelValue(new YangEnumeration(gatewayInterfaceSelValue, new String[] {
             "gn",
             "s4-preferred",
             "ue-epc-capability",
        }));
    }

    /**
     * Unsets the value for child leaf "gateway-interface-sel".
     */
    public void unsetGatewayInterfaceSelValue() throws JNCException {
        delete("gateway-interface-sel");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gateway-interface-sel" leaf will not have a value.
     */
    public void addGatewayInterfaceSel() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gateway-interface-sel",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gateway-interface-sel" with operation "replace".
     */
    public void markGatewayInterfaceSelReplace() throws JNCException {
        markLeafReplace("gatewayInterfaceSel");
    }

    /**
     * Marks the leaf "gateway-interface-sel" with operation "merge".
     */
    public void markGatewayInterfaceSelMerge() throws JNCException {
        markLeafMerge("gatewayInterfaceSel");
    }

    /**
     * Marks the leaf "gateway-interface-sel" with operation "create".
     */
    public void markGatewayInterfaceSelCreate() throws JNCException {
        markLeafCreate("gatewayInterfaceSel");
    }

    /**
     * Marks the leaf "gateway-interface-sel" with operation "delete".
     */
    public void markGatewayInterfaceSelDelete() throws JNCException {
        markLeafDelete("gatewayInterfaceSel");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
