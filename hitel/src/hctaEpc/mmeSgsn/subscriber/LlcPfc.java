/* 
 * @(#)LlcPfc.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;
import .hctaEpc.ImsiT;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/llc-pfc"
 * <p>
 * See line 100 in
 * sdCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class LlcPfc extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty LlcPfc object.
     */
    public LlcPfc() {
        super(Epc.NAMESPACE, "llc-pfc");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public LlcPfc clone() {
        return (LlcPfc)cloneContent(new LlcPfc());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public LlcPfc cloneShallow() {
        return (LlcPfc)cloneShallowContent(new LlcPfc());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "imsi",
            "packet-flow-identifier",
            "service",
            "location",
            "pfc-bucket-leak-rate",
            "pfc-bucket-full-ratio",
            "pfc-bucket-size",
        };
    }

    /* Access methods for leaf child: "imsi". */

    /**
     * Gets the value for child leaf "imsi".
     * @return The value of the leaf.
     */
    public ImsiT getImsiValue() throws JNCException {
        return (ImsiT)getValue("imsi");
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a JNC type value.
     * @param imsiValue The value to set.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(ImsiT imsiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            imsiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a String value.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(String imsiValue) throws JNCException {
        setImsiValue(new ImsiT(imsiValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imsi" leaf will not have a value.
     */
    public void addImsi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "packet-flow-identifier". */

    /**
     * Gets the value for child leaf "packet-flow-identifier".
     * @return The value of the leaf.
     */
    public YangUInt8 getPacketFlowIdentifierValue() throws JNCException {
        return (YangUInt8)getValue("packet-flow-identifier");
    }

    /**
     * Sets the value for child leaf "packet-flow-identifier",
     * using instance of generated typedef class.
     * @param packetFlowIdentifierValue The value to set.
     * @param packetFlowIdentifierValue used during instantiation.
     */
    public void setPacketFlowIdentifierValue(YangUInt8 packetFlowIdentifierValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "packet-flow-identifier",
            packetFlowIdentifierValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "packet-flow-identifier",
     * using Java primitive values.
     * @param packetFlowIdentifierValue used during instantiation.
     */
    public void setPacketFlowIdentifierValue(short packetFlowIdentifierValue)
            throws JNCException {
        setPacketFlowIdentifierValue(new YangUInt8(packetFlowIdentifierValue));
    }

    /**
     * Sets the value for child leaf "packet-flow-identifier",
     * using a String value.
     * @param packetFlowIdentifierValue used during instantiation.
     */
    public void setPacketFlowIdentifierValue(String packetFlowIdentifierValue)
            throws JNCException {
        setPacketFlowIdentifierValue(new YangUInt8(packetFlowIdentifierValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "packet-flow-identifier" leaf will not have a value.
     */
    public void addPacketFlowIdentifier() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "packet-flow-identifier",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "pfc-bucket-leak-rate". */

    /**
     * Gets the value for child leaf "pfc-bucket-leak-rate".
     * @return The value of the leaf.
     */
    public YangUInt32 getPfcBucketLeakRateValue() throws JNCException {
        return (YangUInt32)getValue("pfc-bucket-leak-rate");
    }

    /**
     * Sets the value for child leaf "pfc-bucket-leak-rate",
     * using instance of generated typedef class.
     * @param pfcBucketLeakRateValue The value to set.
     * @param pfcBucketLeakRateValue used during instantiation.
     */
    public void setPfcBucketLeakRateValue(YangUInt32 pfcBucketLeakRateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-bucket-leak-rate",
            pfcBucketLeakRateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pfc-bucket-leak-rate",
     * using Java primitive values.
     * @param pfcBucketLeakRateValue used during instantiation.
     */
    public void setPfcBucketLeakRateValue(long pfcBucketLeakRateValue)
            throws JNCException {
        setPfcBucketLeakRateValue(new YangUInt32(pfcBucketLeakRateValue));
    }

    /**
     * Sets the value for child leaf "pfc-bucket-leak-rate",
     * using a String value.
     * @param pfcBucketLeakRateValue used during instantiation.
     */
    public void setPfcBucketLeakRateValue(String pfcBucketLeakRateValue)
            throws JNCException {
        setPfcBucketLeakRateValue(new YangUInt32(pfcBucketLeakRateValue));
    }

    /**
     * Unsets the value for child leaf "pfc-bucket-leak-rate".
     */
    public void unsetPfcBucketLeakRateValue() throws JNCException {
        delete("pfc-bucket-leak-rate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pfc-bucket-leak-rate" leaf will not have a value.
     */
    public void addPfcBucketLeakRate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-bucket-leak-rate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pfc-bucket-leak-rate" with operation "replace".
     */
    public void markPfcBucketLeakRateReplace() throws JNCException {
        markLeafReplace("pfcBucketLeakRate");
    }

    /**
     * Marks the leaf "pfc-bucket-leak-rate" with operation "merge".
     */
    public void markPfcBucketLeakRateMerge() throws JNCException {
        markLeafMerge("pfcBucketLeakRate");
    }

    /**
     * Marks the leaf "pfc-bucket-leak-rate" with operation "create".
     */
    public void markPfcBucketLeakRateCreate() throws JNCException {
        markLeafCreate("pfcBucketLeakRate");
    }

    /**
     * Marks the leaf "pfc-bucket-leak-rate" with operation "delete".
     */
    public void markPfcBucketLeakRateDelete() throws JNCException {
        markLeafDelete("pfcBucketLeakRate");
    }

    /* Access methods for optional leaf child: "pfc-bucket-full-ratio". */

    /**
     * Gets the value for child leaf "pfc-bucket-full-ratio".
     * @return The value of the leaf.
     */
    public YangString getPfcBucketFullRatioValue() throws JNCException {
        return (YangString)getValue("pfc-bucket-full-ratio");
    }

    /**
     * Sets the value for child leaf "pfc-bucket-full-ratio",
     * using instance of generated typedef class.
     * @param pfcBucketFullRatioValue The value to set.
     * @param pfcBucketFullRatioValue used during instantiation.
     */
    public void setPfcBucketFullRatioValue(YangString pfcBucketFullRatioValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-bucket-full-ratio",
            pfcBucketFullRatioValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pfc-bucket-full-ratio",
     * using a String value.
     * @param pfcBucketFullRatioValue used during instantiation.
     */
    public void setPfcBucketFullRatioValue(String pfcBucketFullRatioValue)
            throws JNCException {
        setPfcBucketFullRatioValue(new YangString(pfcBucketFullRatioValue));
    }

    /**
     * Unsets the value for child leaf "pfc-bucket-full-ratio".
     */
    public void unsetPfcBucketFullRatioValue() throws JNCException {
        delete("pfc-bucket-full-ratio");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pfc-bucket-full-ratio" leaf will not have a value.
     */
    public void addPfcBucketFullRatio() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-bucket-full-ratio",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pfc-bucket-full-ratio" with operation "replace".
     */
    public void markPfcBucketFullRatioReplace() throws JNCException {
        markLeafReplace("pfcBucketFullRatio");
    }

    /**
     * Marks the leaf "pfc-bucket-full-ratio" with operation "merge".
     */
    public void markPfcBucketFullRatioMerge() throws JNCException {
        markLeafMerge("pfcBucketFullRatio");
    }

    /**
     * Marks the leaf "pfc-bucket-full-ratio" with operation "create".
     */
    public void markPfcBucketFullRatioCreate() throws JNCException {
        markLeafCreate("pfcBucketFullRatio");
    }

    /**
     * Marks the leaf "pfc-bucket-full-ratio" with operation "delete".
     */
    public void markPfcBucketFullRatioDelete() throws JNCException {
        markLeafDelete("pfcBucketFullRatio");
    }

    /* Access methods for optional leaf child: "pfc-bucket-size". */

    /**
     * Gets the value for child leaf "pfc-bucket-size".
     * @return The value of the leaf.
     */
    public YangUInt32 getPfcBucketSizeValue() throws JNCException {
        return (YangUInt32)getValue("pfc-bucket-size");
    }

    /**
     * Sets the value for child leaf "pfc-bucket-size",
     * using instance of generated typedef class.
     * @param pfcBucketSizeValue The value to set.
     * @param pfcBucketSizeValue used during instantiation.
     */
    public void setPfcBucketSizeValue(YangUInt32 pfcBucketSizeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-bucket-size",
            pfcBucketSizeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pfc-bucket-size",
     * using Java primitive values.
     * @param pfcBucketSizeValue used during instantiation.
     */
    public void setPfcBucketSizeValue(long pfcBucketSizeValue)
            throws JNCException {
        setPfcBucketSizeValue(new YangUInt32(pfcBucketSizeValue));
    }

    /**
     * Sets the value for child leaf "pfc-bucket-size",
     * using a String value.
     * @param pfcBucketSizeValue used during instantiation.
     */
    public void setPfcBucketSizeValue(String pfcBucketSizeValue)
            throws JNCException {
        setPfcBucketSizeValue(new YangUInt32(pfcBucketSizeValue));
    }

    /**
     * Unsets the value for child leaf "pfc-bucket-size".
     */
    public void unsetPfcBucketSizeValue() throws JNCException {
        delete("pfc-bucket-size");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pfc-bucket-size" leaf will not have a value.
     */
    public void addPfcBucketSize() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-bucket-size",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pfc-bucket-size" with operation "replace".
     */
    public void markPfcBucketSizeReplace() throws JNCException {
        markLeafReplace("pfcBucketSize");
    }

    /**
     * Marks the leaf "pfc-bucket-size" with operation "merge".
     */
    public void markPfcBucketSizeMerge() throws JNCException {
        markLeafMerge("pfcBucketSize");
    }

    /**
     * Marks the leaf "pfc-bucket-size" with operation "create".
     */
    public void markPfcBucketSizeCreate() throws JNCException {
        markLeafCreate("pfcBucketSize");
    }

    /**
     * Marks the leaf "pfc-bucket-size" with operation "delete".
     */
    public void markPfcBucketSizeDelete() throws JNCException {
        markLeafDelete("pfcBucketSize");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
