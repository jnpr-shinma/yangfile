/* 
 * @(#)MmeLocalEpsQosEntry.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/mme-local-eps-qos-entry"
 * <p>
 * See line 2623 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeLocalEpsQosEntry extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeLocalEpsQosEntry object.
     */
    public MmeLocalEpsQosEntry() {
        super(Epc.NAMESPACE, "mme-local-eps-qos-entry");
    }

    /**
     * Constructor for an initialized MmeLocalEpsQosEntry object,
     * 
     * @param nameValue Key argument of child.
     */
    public MmeLocalEpsQosEntry(YangString nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-local-eps-qos-entry");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized MmeLocalEpsQosEntry object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public MmeLocalEpsQosEntry(String nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-local-eps-qos-entry");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeLocalEpsQosEntry clone() {
        MmeLocalEpsQosEntry copy;
        try {
            copy = new MmeLocalEpsQosEntry(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeLocalEpsQosEntry)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeLocalEpsQosEntry cloneShallow() {
        MmeLocalEpsQosEntry copy;
        try {
            copy = new MmeLocalEpsQosEntry(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeLocalEpsQosEntry)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "default-bearer-limits-profile",
            "dedicated-bearer-limits-profile",
            "ue-ambr-uplink",
            "ue-ambr-downlink",
            "apn-ambr-uplink",
            "apn-ambr-downlink",
            "local-qos-action",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "default-bearer-limits-profile". */

    /**
     * Gets the value for child leaf "default-bearer-limits-profile".
     * @return The value of the leaf.
     */
    public YangString getDefaultBearerLimitsProfileValue() throws JNCException {
        return (YangString)getValue("default-bearer-limits-profile");
    }

    /**
     * Sets the value for child leaf "default-bearer-limits-profile",
     * using instance of generated typedef class.
     * @param defaultBearerLimitsProfileValue The value to set.
     * @param defaultBearerLimitsProfileValue used during instantiation.
     */
    public void setDefaultBearerLimitsProfileValue(YangString defaultBearerLimitsProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "default-bearer-limits-profile",
            defaultBearerLimitsProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "default-bearer-limits-profile",
     * using a String value.
     * @param defaultBearerLimitsProfileValue used during instantiation.
     */
    public void setDefaultBearerLimitsProfileValue(String defaultBearerLimitsProfileValue)
            throws JNCException {
        setDefaultBearerLimitsProfileValue(new YangString(defaultBearerLimitsProfileValue));
    }

    /**
     * Unsets the value for child leaf "default-bearer-limits-profile".
     */
    public void unsetDefaultBearerLimitsProfileValue() throws JNCException {
        delete("default-bearer-limits-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "default-bearer-limits-profile" leaf will not have a value.
     */
    public void addDefaultBearerLimitsProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "default-bearer-limits-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "default-bearer-limits-profile" with operation "replace".
     */
    public void markDefaultBearerLimitsProfileReplace() throws JNCException {
        markLeafReplace("defaultBearerLimitsProfile");
    }

    /**
     * Marks the leaf "default-bearer-limits-profile" with operation "merge".
     */
    public void markDefaultBearerLimitsProfileMerge() throws JNCException {
        markLeafMerge("defaultBearerLimitsProfile");
    }

    /**
     * Marks the leaf "default-bearer-limits-profile" with operation "create".
     */
    public void markDefaultBearerLimitsProfileCreate() throws JNCException {
        markLeafCreate("defaultBearerLimitsProfile");
    }

    /**
     * Marks the leaf "default-bearer-limits-profile" with operation "delete".
     */
    public void markDefaultBearerLimitsProfileDelete() throws JNCException {
        markLeafDelete("defaultBearerLimitsProfile");
    }

    /* Access methods for optional leaf child: "dedicated-bearer-limits-profile". */

    /**
     * Gets the value for child leaf "dedicated-bearer-limits-profile".
     * @return The value of the leaf.
     */
    public YangString getDedicatedBearerLimitsProfileValue()
            throws JNCException {
        return (YangString)getValue("dedicated-bearer-limits-profile");
    }

    /**
     * Sets the value for child leaf "dedicated-bearer-limits-profile",
     * using instance of generated typedef class.
     * @param dedicatedBearerLimitsProfileValue The value to set.
     * @param dedicatedBearerLimitsProfileValue used during instantiation.
     */
    public void setDedicatedBearerLimitsProfileValue(YangString dedicatedBearerLimitsProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dedicated-bearer-limits-profile",
            dedicatedBearerLimitsProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dedicated-bearer-limits-profile",
     * using a String value.
     * @param dedicatedBearerLimitsProfileValue used during instantiation.
     */
    public void setDedicatedBearerLimitsProfileValue(String dedicatedBearerLimitsProfileValue)
            throws JNCException {
        setDedicatedBearerLimitsProfileValue(new YangString(dedicatedBearerLimitsProfileValue));
    }

    /**
     * Unsets the value for child leaf "dedicated-bearer-limits-profile".
     */
    public void unsetDedicatedBearerLimitsProfileValue() throws JNCException {
        delete("dedicated-bearer-limits-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dedicated-bearer-limits-profile" leaf will not have a value.
     */
    public void addDedicatedBearerLimitsProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dedicated-bearer-limits-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dedicated-bearer-limits-profile" with operation "replace".
     */
    public void markDedicatedBearerLimitsProfileReplace() throws JNCException {
        markLeafReplace("dedicatedBearerLimitsProfile");
    }

    /**
     * Marks the leaf "dedicated-bearer-limits-profile" with operation "merge".
     */
    public void markDedicatedBearerLimitsProfileMerge() throws JNCException {
        markLeafMerge("dedicatedBearerLimitsProfile");
    }

    /**
     * Marks the leaf "dedicated-bearer-limits-profile" with operation "create".
     */
    public void markDedicatedBearerLimitsProfileCreate() throws JNCException {
        markLeafCreate("dedicatedBearerLimitsProfile");
    }

    /**
     * Marks the leaf "dedicated-bearer-limits-profile" with operation "delete".
     */
    public void markDedicatedBearerLimitsProfileDelete() throws JNCException {
        markLeafDelete("dedicatedBearerLimitsProfile");
    }

    /* Access methods for optional leaf child: "ue-ambr-uplink". */

    /**
     * Gets the value for child leaf "ue-ambr-uplink".
     * @return The value of the leaf.
     */
    public YangUInt32 getUeAmbrUplinkValue() throws JNCException {
        YangUInt32 ueAmbrUplink = (YangUInt32)getValue("ue-ambr-uplink");
        if (ueAmbrUplink == null) {
            ueAmbrUplink = new YangUInt32("4294968");  // default
        }
        return ueAmbrUplink;
    }

    /**
     * Sets the value for child leaf "ue-ambr-uplink",
     * using instance of generated typedef class.
     * @param ueAmbrUplinkValue The value to set.
     * @param ueAmbrUplinkValue used during instantiation.
     */
    public void setUeAmbrUplinkValue(YangUInt32 ueAmbrUplinkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-ambr-uplink",
            ueAmbrUplinkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ue-ambr-uplink",
     * using Java primitive values.
     * @param ueAmbrUplinkValue used during instantiation.
     */
    public void setUeAmbrUplinkValue(long ueAmbrUplinkValue)
            throws JNCException {
        setUeAmbrUplinkValue(new YangUInt32(ueAmbrUplinkValue));
    }

    /**
     * Sets the value for child leaf "ue-ambr-uplink",
     * using a String value.
     * @param ueAmbrUplinkValue used during instantiation.
     */
    public void setUeAmbrUplinkValue(String ueAmbrUplinkValue)
            throws JNCException {
        setUeAmbrUplinkValue(new YangUInt32(ueAmbrUplinkValue));
    }

    /**
     * Unsets the value for child leaf "ue-ambr-uplink".
     */
    public void unsetUeAmbrUplinkValue() throws JNCException {
        delete("ue-ambr-uplink");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ue-ambr-uplink" leaf will not have a value.
     */
    public void addUeAmbrUplink() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-ambr-uplink",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ue-ambr-uplink" with operation "replace".
     */
    public void markUeAmbrUplinkReplace() throws JNCException {
        markLeafReplace("ueAmbrUplink");
    }

    /**
     * Marks the leaf "ue-ambr-uplink" with operation "merge".
     */
    public void markUeAmbrUplinkMerge() throws JNCException {
        markLeafMerge("ueAmbrUplink");
    }

    /**
     * Marks the leaf "ue-ambr-uplink" with operation "create".
     */
    public void markUeAmbrUplinkCreate() throws JNCException {
        markLeafCreate("ueAmbrUplink");
    }

    /**
     * Marks the leaf "ue-ambr-uplink" with operation "delete".
     */
    public void markUeAmbrUplinkDelete() throws JNCException {
        markLeafDelete("ueAmbrUplink");
    }

    /* Access methods for optional leaf child: "ue-ambr-downlink". */

    /**
     * Gets the value for child leaf "ue-ambr-downlink".
     * @return The value of the leaf.
     */
    public YangUInt32 getUeAmbrDownlinkValue() throws JNCException {
        YangUInt32 ueAmbrDownlink = (YangUInt32)getValue("ue-ambr-downlink");
        if (ueAmbrDownlink == null) {
            ueAmbrDownlink = new YangUInt32("4294968");  // default
        }
        return ueAmbrDownlink;
    }

    /**
     * Sets the value for child leaf "ue-ambr-downlink",
     * using instance of generated typedef class.
     * @param ueAmbrDownlinkValue The value to set.
     * @param ueAmbrDownlinkValue used during instantiation.
     */
    public void setUeAmbrDownlinkValue(YangUInt32 ueAmbrDownlinkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-ambr-downlink",
            ueAmbrDownlinkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ue-ambr-downlink",
     * using Java primitive values.
     * @param ueAmbrDownlinkValue used during instantiation.
     */
    public void setUeAmbrDownlinkValue(long ueAmbrDownlinkValue)
            throws JNCException {
        setUeAmbrDownlinkValue(new YangUInt32(ueAmbrDownlinkValue));
    }

    /**
     * Sets the value for child leaf "ue-ambr-downlink",
     * using a String value.
     * @param ueAmbrDownlinkValue used during instantiation.
     */
    public void setUeAmbrDownlinkValue(String ueAmbrDownlinkValue)
            throws JNCException {
        setUeAmbrDownlinkValue(new YangUInt32(ueAmbrDownlinkValue));
    }

    /**
     * Unsets the value for child leaf "ue-ambr-downlink".
     */
    public void unsetUeAmbrDownlinkValue() throws JNCException {
        delete("ue-ambr-downlink");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ue-ambr-downlink" leaf will not have a value.
     */
    public void addUeAmbrDownlink() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-ambr-downlink",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ue-ambr-downlink" with operation "replace".
     */
    public void markUeAmbrDownlinkReplace() throws JNCException {
        markLeafReplace("ueAmbrDownlink");
    }

    /**
     * Marks the leaf "ue-ambr-downlink" with operation "merge".
     */
    public void markUeAmbrDownlinkMerge() throws JNCException {
        markLeafMerge("ueAmbrDownlink");
    }

    /**
     * Marks the leaf "ue-ambr-downlink" with operation "create".
     */
    public void markUeAmbrDownlinkCreate() throws JNCException {
        markLeafCreate("ueAmbrDownlink");
    }

    /**
     * Marks the leaf "ue-ambr-downlink" with operation "delete".
     */
    public void markUeAmbrDownlinkDelete() throws JNCException {
        markLeafDelete("ueAmbrDownlink");
    }

    /* Access methods for optional leaf child: "apn-ambr-uplink". */

    /**
     * Gets the value for child leaf "apn-ambr-uplink".
     * @return The value of the leaf.
     */
    public YangUInt32 getApnAmbrUplinkValue() throws JNCException {
        YangUInt32 apnAmbrUplink = (YangUInt32)getValue("apn-ambr-uplink");
        if (apnAmbrUplink == null) {
            apnAmbrUplink = new YangUInt32("4294968");  // default
        }
        return apnAmbrUplink;
    }

    /**
     * Sets the value for child leaf "apn-ambr-uplink",
     * using instance of generated typedef class.
     * @param apnAmbrUplinkValue The value to set.
     * @param apnAmbrUplinkValue used during instantiation.
     */
    public void setApnAmbrUplinkValue(YangUInt32 apnAmbrUplinkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-ambr-uplink",
            apnAmbrUplinkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-ambr-uplink",
     * using Java primitive values.
     * @param apnAmbrUplinkValue used during instantiation.
     */
    public void setApnAmbrUplinkValue(long apnAmbrUplinkValue)
            throws JNCException {
        setApnAmbrUplinkValue(new YangUInt32(apnAmbrUplinkValue));
    }

    /**
     * Sets the value for child leaf "apn-ambr-uplink",
     * using a String value.
     * @param apnAmbrUplinkValue used during instantiation.
     */
    public void setApnAmbrUplinkValue(String apnAmbrUplinkValue)
            throws JNCException {
        setApnAmbrUplinkValue(new YangUInt32(apnAmbrUplinkValue));
    }

    /**
     * Unsets the value for child leaf "apn-ambr-uplink".
     */
    public void unsetApnAmbrUplinkValue() throws JNCException {
        delete("apn-ambr-uplink");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-ambr-uplink" leaf will not have a value.
     */
    public void addApnAmbrUplink() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-ambr-uplink",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-ambr-uplink" with operation "replace".
     */
    public void markApnAmbrUplinkReplace() throws JNCException {
        markLeafReplace("apnAmbrUplink");
    }

    /**
     * Marks the leaf "apn-ambr-uplink" with operation "merge".
     */
    public void markApnAmbrUplinkMerge() throws JNCException {
        markLeafMerge("apnAmbrUplink");
    }

    /**
     * Marks the leaf "apn-ambr-uplink" with operation "create".
     */
    public void markApnAmbrUplinkCreate() throws JNCException {
        markLeafCreate("apnAmbrUplink");
    }

    /**
     * Marks the leaf "apn-ambr-uplink" with operation "delete".
     */
    public void markApnAmbrUplinkDelete() throws JNCException {
        markLeafDelete("apnAmbrUplink");
    }

    /* Access methods for optional leaf child: "apn-ambr-downlink". */

    /**
     * Gets the value for child leaf "apn-ambr-downlink".
     * @return The value of the leaf.
     */
    public YangUInt32 getApnAmbrDownlinkValue() throws JNCException {
        YangUInt32 apnAmbrDownlink = (YangUInt32)getValue("apn-ambr-downlink");
        if (apnAmbrDownlink == null) {
            apnAmbrDownlink = new YangUInt32("4294968");  // default
        }
        return apnAmbrDownlink;
    }

    /**
     * Sets the value for child leaf "apn-ambr-downlink",
     * using instance of generated typedef class.
     * @param apnAmbrDownlinkValue The value to set.
     * @param apnAmbrDownlinkValue used during instantiation.
     */
    public void setApnAmbrDownlinkValue(YangUInt32 apnAmbrDownlinkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-ambr-downlink",
            apnAmbrDownlinkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-ambr-downlink",
     * using Java primitive values.
     * @param apnAmbrDownlinkValue used during instantiation.
     */
    public void setApnAmbrDownlinkValue(long apnAmbrDownlinkValue)
            throws JNCException {
        setApnAmbrDownlinkValue(new YangUInt32(apnAmbrDownlinkValue));
    }

    /**
     * Sets the value for child leaf "apn-ambr-downlink",
     * using a String value.
     * @param apnAmbrDownlinkValue used during instantiation.
     */
    public void setApnAmbrDownlinkValue(String apnAmbrDownlinkValue)
            throws JNCException {
        setApnAmbrDownlinkValue(new YangUInt32(apnAmbrDownlinkValue));
    }

    /**
     * Unsets the value for child leaf "apn-ambr-downlink".
     */
    public void unsetApnAmbrDownlinkValue() throws JNCException {
        delete("apn-ambr-downlink");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-ambr-downlink" leaf will not have a value.
     */
    public void addApnAmbrDownlink() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-ambr-downlink",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-ambr-downlink" with operation "replace".
     */
    public void markApnAmbrDownlinkReplace() throws JNCException {
        markLeafReplace("apnAmbrDownlink");
    }

    /**
     * Marks the leaf "apn-ambr-downlink" with operation "merge".
     */
    public void markApnAmbrDownlinkMerge() throws JNCException {
        markLeafMerge("apnAmbrDownlink");
    }

    /**
     * Marks the leaf "apn-ambr-downlink" with operation "create".
     */
    public void markApnAmbrDownlinkCreate() throws JNCException {
        markLeafCreate("apnAmbrDownlink");
    }

    /**
     * Marks the leaf "apn-ambr-downlink" with operation "delete".
     */
    public void markApnAmbrDownlinkDelete() throws JNCException {
        markLeafDelete("apnAmbrDownlink");
    }

    /* Access methods for optional leaf child: "local-qos-action". */

    /**
     * Gets the value for child leaf "local-qos-action".
     * @return The value of the leaf.
     */
    public YangEnumeration getLocalQosActionValue() throws JNCException {
        YangEnumeration localQosAction = (YangEnumeration)getValue("local-qos-action");
        if (localQosAction == null) {
            localQosAction = new YangEnumeration("enforce", new String[] {  // default
                "enforce",
                "downgrade",
                "negotiate",
            });
        }
        return localQosAction;
    }

    /**
     * Sets the value for child leaf "local-qos-action",
     * using instance of generated typedef class.
     * @param localQosActionValue The value to set.
     * @param localQosActionValue used during instantiation.
     */
    public void setLocalQosActionValue(YangEnumeration localQosActionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-qos-action",
            localQosActionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-qos-action",
     * using a String value.
     * @param localQosActionValue used during instantiation.
     */
    public void setLocalQosActionValue(String localQosActionValue)
            throws JNCException {
        setLocalQosActionValue(new YangEnumeration(localQosActionValue, new String[] {
             "enforce",
             "downgrade",
             "negotiate",
        }));
    }

    /**
     * Unsets the value for child leaf "local-qos-action".
     */
    public void unsetLocalQosActionValue() throws JNCException {
        delete("local-qos-action");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-qos-action" leaf will not have a value.
     */
    public void addLocalQosAction() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-qos-action",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-qos-action" with operation "replace".
     */
    public void markLocalQosActionReplace() throws JNCException {
        markLeafReplace("localQosAction");
    }

    /**
     * Marks the leaf "local-qos-action" with operation "merge".
     */
    public void markLocalQosActionMerge() throws JNCException {
        markLeafMerge("localQosAction");
    }

    /**
     * Marks the leaf "local-qos-action" with operation "create".
     */
    public void markLocalQosActionCreate() throws JNCException {
        markLeafCreate("localQosAction");
    }

    /**
     * Marks the leaf "local-qos-action" with operation "delete".
     */
    public void markLocalQosActionDelete() throws JNCException {
        markLeafDelete("localQosAction");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
