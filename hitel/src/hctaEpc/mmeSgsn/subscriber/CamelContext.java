/* 
 * @(#)CamelContext.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;
import .hctaEpc.ImsiT;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/camel-context"
 * <p>
 * See line 242 in
 * sgsnScCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class CamelContext extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty CamelContext object.
     */
    public CamelContext() {
        super(Epc.NAMESPACE, "camel-context");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public CamelContext clone() {
        return (CamelContext)cloneContent(new CamelContext());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public CamelContext cloneShallow() {
        return (CamelContext)cloneShallowContent(new CamelContext());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "imsi",
            "signatured-session-id",
            "ssf-ref-number",
            "scp-ref-number",
            "ssf-state",
            "edp-list",
            "tcp-threshold",
            "vc-threshold",
            "tsw-threshold",
            "tcp-timestamp",
            "tcp-timestamp-current-interval",
            "tsw-timestamp",
            "tsp-timestamp",
            "tsl-timestamp",
            "tsp-vol-count",
            "tsl-vol-count",
            "tsp-rollover",
            "tsl-rollover",
            "scp-address",
        };
    }

    /* Access methods for leaf child: "imsi". */

    /**
     * Gets the value for child leaf "imsi".
     * @return The value of the leaf.
     */
    public ImsiT getImsiValue() throws JNCException {
        return (ImsiT)getValue("imsi");
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a JNC type value.
     * @param imsiValue The value to set.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(ImsiT imsiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            imsiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a String value.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(String imsiValue) throws JNCException {
        setImsiValue(new ImsiT(imsiValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imsi" leaf will not have a value.
     */
    public void addImsi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "signatured-session-id". */

    /**
     * Gets the value for child leaf "signatured-session-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getSignaturedSessionIdValue() throws JNCException {
        return (YangUInt32)getValue("signatured-session-id");
    }

    /**
     * Sets the value for child leaf "signatured-session-id",
     * using instance of generated typedef class.
     * @param signaturedSessionIdValue The value to set.
     * @param signaturedSessionIdValue used during instantiation.
     */
    public void setSignaturedSessionIdValue(YangUInt32 signaturedSessionIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "signatured-session-id",
            signaturedSessionIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "signatured-session-id",
     * using Java primitive values.
     * @param signaturedSessionIdValue used during instantiation.
     */
    public void setSignaturedSessionIdValue(long signaturedSessionIdValue)
            throws JNCException {
        setSignaturedSessionIdValue(new YangUInt32(signaturedSessionIdValue));
    }

    /**
     * Sets the value for child leaf "signatured-session-id",
     * using a String value.
     * @param signaturedSessionIdValue used during instantiation.
     */
    public void setSignaturedSessionIdValue(String signaturedSessionIdValue)
            throws JNCException {
        setSignaturedSessionIdValue(new YangUInt32(signaturedSessionIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "signatured-session-id" leaf will not have a value.
     */
    public void addSignaturedSessionId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "signatured-session-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "ssf-ref-number". */

    /**
     * Gets the value for child leaf "ssf-ref-number".
     * @return The value of the leaf.
     */
    public YangUInt32 getSsfRefNumberValue() throws JNCException {
        return (YangUInt32)getValue("ssf-ref-number");
    }

    /**
     * Sets the value for child leaf "ssf-ref-number",
     * using instance of generated typedef class.
     * @param ssfRefNumberValue The value to set.
     * @param ssfRefNumberValue used during instantiation.
     */
    public void setSsfRefNumberValue(YangUInt32 ssfRefNumberValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ssf-ref-number",
            ssfRefNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ssf-ref-number",
     * using Java primitive values.
     * @param ssfRefNumberValue used during instantiation.
     */
    public void setSsfRefNumberValue(long ssfRefNumberValue)
            throws JNCException {
        setSsfRefNumberValue(new YangUInt32(ssfRefNumberValue));
    }

    /**
     * Sets the value for child leaf "ssf-ref-number",
     * using a String value.
     * @param ssfRefNumberValue used during instantiation.
     */
    public void setSsfRefNumberValue(String ssfRefNumberValue)
            throws JNCException {
        setSsfRefNumberValue(new YangUInt32(ssfRefNumberValue));
    }

    /**
     * Unsets the value for child leaf "ssf-ref-number".
     */
    public void unsetSsfRefNumberValue() throws JNCException {
        delete("ssf-ref-number");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ssf-ref-number" leaf will not have a value.
     */
    public void addSsfRefNumber() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ssf-ref-number",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ssf-ref-number" with operation "replace".
     */
    public void markSsfRefNumberReplace() throws JNCException {
        markLeafReplace("ssfRefNumber");
    }

    /**
     * Marks the leaf "ssf-ref-number" with operation "merge".
     */
    public void markSsfRefNumberMerge() throws JNCException {
        markLeafMerge("ssfRefNumber");
    }

    /**
     * Marks the leaf "ssf-ref-number" with operation "create".
     */
    public void markSsfRefNumberCreate() throws JNCException {
        markLeafCreate("ssfRefNumber");
    }

    /**
     * Marks the leaf "ssf-ref-number" with operation "delete".
     */
    public void markSsfRefNumberDelete() throws JNCException {
        markLeafDelete("ssfRefNumber");
    }

    /* Access methods for optional leaf child: "scp-ref-number". */

    /**
     * Gets the value for child leaf "scp-ref-number".
     * @return The value of the leaf.
     */
    public YangUInt32 getScpRefNumberValue() throws JNCException {
        return (YangUInt32)getValue("scp-ref-number");
    }

    /**
     * Sets the value for child leaf "scp-ref-number",
     * using instance of generated typedef class.
     * @param scpRefNumberValue The value to set.
     * @param scpRefNumberValue used during instantiation.
     */
    public void setScpRefNumberValue(YangUInt32 scpRefNumberValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "scp-ref-number",
            scpRefNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scp-ref-number",
     * using Java primitive values.
     * @param scpRefNumberValue used during instantiation.
     */
    public void setScpRefNumberValue(long scpRefNumberValue)
            throws JNCException {
        setScpRefNumberValue(new YangUInt32(scpRefNumberValue));
    }

    /**
     * Sets the value for child leaf "scp-ref-number",
     * using a String value.
     * @param scpRefNumberValue used during instantiation.
     */
    public void setScpRefNumberValue(String scpRefNumberValue)
            throws JNCException {
        setScpRefNumberValue(new YangUInt32(scpRefNumberValue));
    }

    /**
     * Unsets the value for child leaf "scp-ref-number".
     */
    public void unsetScpRefNumberValue() throws JNCException {
        delete("scp-ref-number");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scp-ref-number" leaf will not have a value.
     */
    public void addScpRefNumber() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "scp-ref-number",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scp-ref-number" with operation "replace".
     */
    public void markScpRefNumberReplace() throws JNCException {
        markLeafReplace("scpRefNumber");
    }

    /**
     * Marks the leaf "scp-ref-number" with operation "merge".
     */
    public void markScpRefNumberMerge() throws JNCException {
        markLeafMerge("scpRefNumber");
    }

    /**
     * Marks the leaf "scp-ref-number" with operation "create".
     */
    public void markScpRefNumberCreate() throws JNCException {
        markLeafCreate("scpRefNumber");
    }

    /**
     * Marks the leaf "scp-ref-number" with operation "delete".
     */
    public void markScpRefNumberDelete() throws JNCException {
        markLeafDelete("scpRefNumber");
    }

    /* Access methods for optional leaf child: "ssf-state". */

    /**
     * Gets the value for child leaf "ssf-state".
     * @return The value of the leaf.
     */
    public YangString getSsfStateValue() throws JNCException {
        return (YangString)getValue("ssf-state");
    }

    /**
     * Sets the value for child leaf "ssf-state",
     * using instance of generated typedef class.
     * @param ssfStateValue The value to set.
     * @param ssfStateValue used during instantiation.
     */
    public void setSsfStateValue(YangString ssfStateValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ssf-state",
            ssfStateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ssf-state",
     * using a String value.
     * @param ssfStateValue used during instantiation.
     */
    public void setSsfStateValue(String ssfStateValue) throws JNCException {
        setSsfStateValue(new YangString(ssfStateValue));
    }

    /**
     * Unsets the value for child leaf "ssf-state".
     */
    public void unsetSsfStateValue() throws JNCException {
        delete("ssf-state");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ssf-state" leaf will not have a value.
     */
    public void addSsfState() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ssf-state",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ssf-state" with operation "replace".
     */
    public void markSsfStateReplace() throws JNCException {
        markLeafReplace("ssfState");
    }

    /**
     * Marks the leaf "ssf-state" with operation "merge".
     */
    public void markSsfStateMerge() throws JNCException {
        markLeafMerge("ssfState");
    }

    /**
     * Marks the leaf "ssf-state" with operation "create".
     */
    public void markSsfStateCreate() throws JNCException {
        markLeafCreate("ssfState");
    }

    /**
     * Marks the leaf "ssf-state" with operation "delete".
     */
    public void markSsfStateDelete() throws JNCException {
        markLeafDelete("ssfState");
    }

    /* Access methods for optional leaf child: "edp-list". */

    /**
     * Gets the value for child leaf "edp-list".
     * @return The value of the leaf.
     */
    public YangString getEdpListValue() throws JNCException {
        return (YangString)getValue("edp-list");
    }

    /**
     * Sets the value for child leaf "edp-list",
     * using instance of generated typedef class.
     * @param edpListValue The value to set.
     * @param edpListValue used during instantiation.
     */
    public void setEdpListValue(YangString edpListValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "edp-list",
            edpListValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "edp-list",
     * using a String value.
     * @param edpListValue used during instantiation.
     */
    public void setEdpListValue(String edpListValue) throws JNCException {
        setEdpListValue(new YangString(edpListValue));
    }

    /**
     * Unsets the value for child leaf "edp-list".
     */
    public void unsetEdpListValue() throws JNCException {
        delete("edp-list");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "edp-list" leaf will not have a value.
     */
    public void addEdpList() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "edp-list",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "edp-list" with operation "replace".
     */
    public void markEdpListReplace() throws JNCException {
        markLeafReplace("edpList");
    }

    /**
     * Marks the leaf "edp-list" with operation "merge".
     */
    public void markEdpListMerge() throws JNCException {
        markLeafMerge("edpList");
    }

    /**
     * Marks the leaf "edp-list" with operation "create".
     */
    public void markEdpListCreate() throws JNCException {
        markLeafCreate("edpList");
    }

    /**
     * Marks the leaf "edp-list" with operation "delete".
     */
    public void markEdpListDelete() throws JNCException {
        markLeafDelete("edpList");
    }

    /* Access methods for optional leaf child: "tcp-threshold". */

    /**
     * Gets the value for child leaf "tcp-threshold".
     * @return The value of the leaf.
     */
    public YangUInt32 getTcpThresholdValue() throws JNCException {
        return (YangUInt32)getValue("tcp-threshold");
    }

    /**
     * Sets the value for child leaf "tcp-threshold",
     * using instance of generated typedef class.
     * @param tcpThresholdValue The value to set.
     * @param tcpThresholdValue used during instantiation.
     */
    public void setTcpThresholdValue(YangUInt32 tcpThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tcp-threshold",
            tcpThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tcp-threshold",
     * using Java primitive values.
     * @param tcpThresholdValue used during instantiation.
     */
    public void setTcpThresholdValue(long tcpThresholdValue)
            throws JNCException {
        setTcpThresholdValue(new YangUInt32(tcpThresholdValue));
    }

    /**
     * Sets the value for child leaf "tcp-threshold",
     * using a String value.
     * @param tcpThresholdValue used during instantiation.
     */
    public void setTcpThresholdValue(String tcpThresholdValue)
            throws JNCException {
        setTcpThresholdValue(new YangUInt32(tcpThresholdValue));
    }

    /**
     * Unsets the value for child leaf "tcp-threshold".
     */
    public void unsetTcpThresholdValue() throws JNCException {
        delete("tcp-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tcp-threshold" leaf will not have a value.
     */
    public void addTcpThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tcp-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tcp-threshold" with operation "replace".
     */
    public void markTcpThresholdReplace() throws JNCException {
        markLeafReplace("tcpThreshold");
    }

    /**
     * Marks the leaf "tcp-threshold" with operation "merge".
     */
    public void markTcpThresholdMerge() throws JNCException {
        markLeafMerge("tcpThreshold");
    }

    /**
     * Marks the leaf "tcp-threshold" with operation "create".
     */
    public void markTcpThresholdCreate() throws JNCException {
        markLeafCreate("tcpThreshold");
    }

    /**
     * Marks the leaf "tcp-threshold" with operation "delete".
     */
    public void markTcpThresholdDelete() throws JNCException {
        markLeafDelete("tcpThreshold");
    }

    /* Access methods for optional leaf child: "vc-threshold". */

    /**
     * Gets the value for child leaf "vc-threshold".
     * @return The value of the leaf.
     */
    public YangUInt32 getVcThresholdValue() throws JNCException {
        return (YangUInt32)getValue("vc-threshold");
    }

    /**
     * Sets the value for child leaf "vc-threshold",
     * using instance of generated typedef class.
     * @param vcThresholdValue The value to set.
     * @param vcThresholdValue used during instantiation.
     */
    public void setVcThresholdValue(YangUInt32 vcThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vc-threshold",
            vcThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vc-threshold",
     * using Java primitive values.
     * @param vcThresholdValue used during instantiation.
     */
    public void setVcThresholdValue(long vcThresholdValue) throws JNCException {
        setVcThresholdValue(new YangUInt32(vcThresholdValue));
    }

    /**
     * Sets the value for child leaf "vc-threshold",
     * using a String value.
     * @param vcThresholdValue used during instantiation.
     */
    public void setVcThresholdValue(String vcThresholdValue)
            throws JNCException {
        setVcThresholdValue(new YangUInt32(vcThresholdValue));
    }

    /**
     * Unsets the value for child leaf "vc-threshold".
     */
    public void unsetVcThresholdValue() throws JNCException {
        delete("vc-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vc-threshold" leaf will not have a value.
     */
    public void addVcThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vc-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vc-threshold" with operation "replace".
     */
    public void markVcThresholdReplace() throws JNCException {
        markLeafReplace("vcThreshold");
    }

    /**
     * Marks the leaf "vc-threshold" with operation "merge".
     */
    public void markVcThresholdMerge() throws JNCException {
        markLeafMerge("vcThreshold");
    }

    /**
     * Marks the leaf "vc-threshold" with operation "create".
     */
    public void markVcThresholdCreate() throws JNCException {
        markLeafCreate("vcThreshold");
    }

    /**
     * Marks the leaf "vc-threshold" with operation "delete".
     */
    public void markVcThresholdDelete() throws JNCException {
        markLeafDelete("vcThreshold");
    }

    /* Access methods for optional leaf child: "tsw-threshold". */

    /**
     * Gets the value for child leaf "tsw-threshold".
     * @return The value of the leaf.
     */
    public YangUInt32 getTswThresholdValue() throws JNCException {
        return (YangUInt32)getValue("tsw-threshold");
    }

    /**
     * Sets the value for child leaf "tsw-threshold",
     * using instance of generated typedef class.
     * @param tswThresholdValue The value to set.
     * @param tswThresholdValue used during instantiation.
     */
    public void setTswThresholdValue(YangUInt32 tswThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsw-threshold",
            tswThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tsw-threshold",
     * using Java primitive values.
     * @param tswThresholdValue used during instantiation.
     */
    public void setTswThresholdValue(long tswThresholdValue)
            throws JNCException {
        setTswThresholdValue(new YangUInt32(tswThresholdValue));
    }

    /**
     * Sets the value for child leaf "tsw-threshold",
     * using a String value.
     * @param tswThresholdValue used during instantiation.
     */
    public void setTswThresholdValue(String tswThresholdValue)
            throws JNCException {
        setTswThresholdValue(new YangUInt32(tswThresholdValue));
    }

    /**
     * Unsets the value for child leaf "tsw-threshold".
     */
    public void unsetTswThresholdValue() throws JNCException {
        delete("tsw-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tsw-threshold" leaf will not have a value.
     */
    public void addTswThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsw-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tsw-threshold" with operation "replace".
     */
    public void markTswThresholdReplace() throws JNCException {
        markLeafReplace("tswThreshold");
    }

    /**
     * Marks the leaf "tsw-threshold" with operation "merge".
     */
    public void markTswThresholdMerge() throws JNCException {
        markLeafMerge("tswThreshold");
    }

    /**
     * Marks the leaf "tsw-threshold" with operation "create".
     */
    public void markTswThresholdCreate() throws JNCException {
        markLeafCreate("tswThreshold");
    }

    /**
     * Marks the leaf "tsw-threshold" with operation "delete".
     */
    public void markTswThresholdDelete() throws JNCException {
        markLeafDelete("tswThreshold");
    }

    /* Access methods for optional leaf child: "tcp-timestamp". */

    /**
     * Gets the value for child leaf "tcp-timestamp".
     * @return The value of the leaf.
     */
    public YangString getTcpTimestampValue() throws JNCException {
        return (YangString)getValue("tcp-timestamp");
    }

    /**
     * Sets the value for child leaf "tcp-timestamp",
     * using instance of generated typedef class.
     * @param tcpTimestampValue The value to set.
     * @param tcpTimestampValue used during instantiation.
     */
    public void setTcpTimestampValue(YangString tcpTimestampValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tcp-timestamp",
            tcpTimestampValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tcp-timestamp",
     * using a String value.
     * @param tcpTimestampValue used during instantiation.
     */
    public void setTcpTimestampValue(String tcpTimestampValue)
            throws JNCException {
        setTcpTimestampValue(new YangString(tcpTimestampValue));
    }

    /**
     * Unsets the value for child leaf "tcp-timestamp".
     */
    public void unsetTcpTimestampValue() throws JNCException {
        delete("tcp-timestamp");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tcp-timestamp" leaf will not have a value.
     */
    public void addTcpTimestamp() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tcp-timestamp",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tcp-timestamp" with operation "replace".
     */
    public void markTcpTimestampReplace() throws JNCException {
        markLeafReplace("tcpTimestamp");
    }

    /**
     * Marks the leaf "tcp-timestamp" with operation "merge".
     */
    public void markTcpTimestampMerge() throws JNCException {
        markLeafMerge("tcpTimestamp");
    }

    /**
     * Marks the leaf "tcp-timestamp" with operation "create".
     */
    public void markTcpTimestampCreate() throws JNCException {
        markLeafCreate("tcpTimestamp");
    }

    /**
     * Marks the leaf "tcp-timestamp" with operation "delete".
     */
    public void markTcpTimestampDelete() throws JNCException {
        markLeafDelete("tcpTimestamp");
    }

    /* Access methods for optional leaf child: "tcp-timestamp-current-interval". */

    /**
     * Gets the value for child leaf "tcp-timestamp-current-interval".
     * @return The value of the leaf.
     */
    public YangString getTcpTimestampCurrentIntervalValue() throws JNCException {
        return (YangString)getValue("tcp-timestamp-current-interval");
    }

    /**
     * Sets the value for child leaf "tcp-timestamp-current-interval",
     * using instance of generated typedef class.
     * @param tcpTimestampCurrentIntervalValue The value to set.
     * @param tcpTimestampCurrentIntervalValue used during instantiation.
     */
    public void setTcpTimestampCurrentIntervalValue(YangString tcpTimestampCurrentIntervalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tcp-timestamp-current-interval",
            tcpTimestampCurrentIntervalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tcp-timestamp-current-interval",
     * using a String value.
     * @param tcpTimestampCurrentIntervalValue used during instantiation.
     */
    public void setTcpTimestampCurrentIntervalValue(String tcpTimestampCurrentIntervalValue)
            throws JNCException {
        setTcpTimestampCurrentIntervalValue(new YangString(tcpTimestampCurrentIntervalValue));
    }

    /**
     * Unsets the value for child leaf "tcp-timestamp-current-interval".
     */
    public void unsetTcpTimestampCurrentIntervalValue() throws JNCException {
        delete("tcp-timestamp-current-interval");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tcp-timestamp-current-interval" leaf will not have a value.
     */
    public void addTcpTimestampCurrentInterval() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tcp-timestamp-current-interval",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tcp-timestamp-current-interval" with operation "replace".
     */
    public void markTcpTimestampCurrentIntervalReplace() throws JNCException {
        markLeafReplace("tcpTimestampCurrentInterval");
    }

    /**
     * Marks the leaf "tcp-timestamp-current-interval" with operation "merge".
     */
    public void markTcpTimestampCurrentIntervalMerge() throws JNCException {
        markLeafMerge("tcpTimestampCurrentInterval");
    }

    /**
     * Marks the leaf "tcp-timestamp-current-interval" with operation "create".
     */
    public void markTcpTimestampCurrentIntervalCreate() throws JNCException {
        markLeafCreate("tcpTimestampCurrentInterval");
    }

    /**
     * Marks the leaf "tcp-timestamp-current-interval" with operation "delete".
     */
    public void markTcpTimestampCurrentIntervalDelete() throws JNCException {
        markLeafDelete("tcpTimestampCurrentInterval");
    }

    /* Access methods for optional leaf child: "tsw-timestamp". */

    /**
     * Gets the value for child leaf "tsw-timestamp".
     * @return The value of the leaf.
     */
    public YangString getTswTimestampValue() throws JNCException {
        return (YangString)getValue("tsw-timestamp");
    }

    /**
     * Sets the value for child leaf "tsw-timestamp",
     * using instance of generated typedef class.
     * @param tswTimestampValue The value to set.
     * @param tswTimestampValue used during instantiation.
     */
    public void setTswTimestampValue(YangString tswTimestampValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsw-timestamp",
            tswTimestampValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tsw-timestamp",
     * using a String value.
     * @param tswTimestampValue used during instantiation.
     */
    public void setTswTimestampValue(String tswTimestampValue)
            throws JNCException {
        setTswTimestampValue(new YangString(tswTimestampValue));
    }

    /**
     * Unsets the value for child leaf "tsw-timestamp".
     */
    public void unsetTswTimestampValue() throws JNCException {
        delete("tsw-timestamp");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tsw-timestamp" leaf will not have a value.
     */
    public void addTswTimestamp() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsw-timestamp",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tsw-timestamp" with operation "replace".
     */
    public void markTswTimestampReplace() throws JNCException {
        markLeafReplace("tswTimestamp");
    }

    /**
     * Marks the leaf "tsw-timestamp" with operation "merge".
     */
    public void markTswTimestampMerge() throws JNCException {
        markLeafMerge("tswTimestamp");
    }

    /**
     * Marks the leaf "tsw-timestamp" with operation "create".
     */
    public void markTswTimestampCreate() throws JNCException {
        markLeafCreate("tswTimestamp");
    }

    /**
     * Marks the leaf "tsw-timestamp" with operation "delete".
     */
    public void markTswTimestampDelete() throws JNCException {
        markLeafDelete("tswTimestamp");
    }

    /* Access methods for optional leaf child: "tsp-timestamp". */

    /**
     * Gets the value for child leaf "tsp-timestamp".
     * @return The value of the leaf.
     */
    public YangString getTspTimestampValue() throws JNCException {
        return (YangString)getValue("tsp-timestamp");
    }

    /**
     * Sets the value for child leaf "tsp-timestamp",
     * using instance of generated typedef class.
     * @param tspTimestampValue The value to set.
     * @param tspTimestampValue used during instantiation.
     */
    public void setTspTimestampValue(YangString tspTimestampValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsp-timestamp",
            tspTimestampValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tsp-timestamp",
     * using a String value.
     * @param tspTimestampValue used during instantiation.
     */
    public void setTspTimestampValue(String tspTimestampValue)
            throws JNCException {
        setTspTimestampValue(new YangString(tspTimestampValue));
    }

    /**
     * Unsets the value for child leaf "tsp-timestamp".
     */
    public void unsetTspTimestampValue() throws JNCException {
        delete("tsp-timestamp");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tsp-timestamp" leaf will not have a value.
     */
    public void addTspTimestamp() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsp-timestamp",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tsp-timestamp" with operation "replace".
     */
    public void markTspTimestampReplace() throws JNCException {
        markLeafReplace("tspTimestamp");
    }

    /**
     * Marks the leaf "tsp-timestamp" with operation "merge".
     */
    public void markTspTimestampMerge() throws JNCException {
        markLeafMerge("tspTimestamp");
    }

    /**
     * Marks the leaf "tsp-timestamp" with operation "create".
     */
    public void markTspTimestampCreate() throws JNCException {
        markLeafCreate("tspTimestamp");
    }

    /**
     * Marks the leaf "tsp-timestamp" with operation "delete".
     */
    public void markTspTimestampDelete() throws JNCException {
        markLeafDelete("tspTimestamp");
    }

    /* Access methods for optional leaf child: "tsl-timestamp". */

    /**
     * Gets the value for child leaf "tsl-timestamp".
     * @return The value of the leaf.
     */
    public YangString getTslTimestampValue() throws JNCException {
        return (YangString)getValue("tsl-timestamp");
    }

    /**
     * Sets the value for child leaf "tsl-timestamp",
     * using instance of generated typedef class.
     * @param tslTimestampValue The value to set.
     * @param tslTimestampValue used during instantiation.
     */
    public void setTslTimestampValue(YangString tslTimestampValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsl-timestamp",
            tslTimestampValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tsl-timestamp",
     * using a String value.
     * @param tslTimestampValue used during instantiation.
     */
    public void setTslTimestampValue(String tslTimestampValue)
            throws JNCException {
        setTslTimestampValue(new YangString(tslTimestampValue));
    }

    /**
     * Unsets the value for child leaf "tsl-timestamp".
     */
    public void unsetTslTimestampValue() throws JNCException {
        delete("tsl-timestamp");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tsl-timestamp" leaf will not have a value.
     */
    public void addTslTimestamp() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsl-timestamp",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tsl-timestamp" with operation "replace".
     */
    public void markTslTimestampReplace() throws JNCException {
        markLeafReplace("tslTimestamp");
    }

    /**
     * Marks the leaf "tsl-timestamp" with operation "merge".
     */
    public void markTslTimestampMerge() throws JNCException {
        markLeafMerge("tslTimestamp");
    }

    /**
     * Marks the leaf "tsl-timestamp" with operation "create".
     */
    public void markTslTimestampCreate() throws JNCException {
        markLeafCreate("tslTimestamp");
    }

    /**
     * Marks the leaf "tsl-timestamp" with operation "delete".
     */
    public void markTslTimestampDelete() throws JNCException {
        markLeafDelete("tslTimestamp");
    }

    /* Access methods for optional leaf child: "tsp-vol-count". */

    /**
     * Gets the value for child leaf "tsp-vol-count".
     * @return The value of the leaf.
     */
    public YangUInt32 getTspVolCountValue() throws JNCException {
        return (YangUInt32)getValue("tsp-vol-count");
    }

    /**
     * Sets the value for child leaf "tsp-vol-count",
     * using instance of generated typedef class.
     * @param tspVolCountValue The value to set.
     * @param tspVolCountValue used during instantiation.
     */
    public void setTspVolCountValue(YangUInt32 tspVolCountValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsp-vol-count",
            tspVolCountValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tsp-vol-count",
     * using Java primitive values.
     * @param tspVolCountValue used during instantiation.
     */
    public void setTspVolCountValue(long tspVolCountValue) throws JNCException {
        setTspVolCountValue(new YangUInt32(tspVolCountValue));
    }

    /**
     * Sets the value for child leaf "tsp-vol-count",
     * using a String value.
     * @param tspVolCountValue used during instantiation.
     */
    public void setTspVolCountValue(String tspVolCountValue)
            throws JNCException {
        setTspVolCountValue(new YangUInt32(tspVolCountValue));
    }

    /**
     * Unsets the value for child leaf "tsp-vol-count".
     */
    public void unsetTspVolCountValue() throws JNCException {
        delete("tsp-vol-count");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tsp-vol-count" leaf will not have a value.
     */
    public void addTspVolCount() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsp-vol-count",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tsp-vol-count" with operation "replace".
     */
    public void markTspVolCountReplace() throws JNCException {
        markLeafReplace("tspVolCount");
    }

    /**
     * Marks the leaf "tsp-vol-count" with operation "merge".
     */
    public void markTspVolCountMerge() throws JNCException {
        markLeafMerge("tspVolCount");
    }

    /**
     * Marks the leaf "tsp-vol-count" with operation "create".
     */
    public void markTspVolCountCreate() throws JNCException {
        markLeafCreate("tspVolCount");
    }

    /**
     * Marks the leaf "tsp-vol-count" with operation "delete".
     */
    public void markTspVolCountDelete() throws JNCException {
        markLeafDelete("tspVolCount");
    }

    /* Access methods for optional leaf child: "tsl-vol-count". */

    /**
     * Gets the value for child leaf "tsl-vol-count".
     * @return The value of the leaf.
     */
    public YangUInt32 getTslVolCountValue() throws JNCException {
        return (YangUInt32)getValue("tsl-vol-count");
    }

    /**
     * Sets the value for child leaf "tsl-vol-count",
     * using instance of generated typedef class.
     * @param tslVolCountValue The value to set.
     * @param tslVolCountValue used during instantiation.
     */
    public void setTslVolCountValue(YangUInt32 tslVolCountValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsl-vol-count",
            tslVolCountValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tsl-vol-count",
     * using Java primitive values.
     * @param tslVolCountValue used during instantiation.
     */
    public void setTslVolCountValue(long tslVolCountValue) throws JNCException {
        setTslVolCountValue(new YangUInt32(tslVolCountValue));
    }

    /**
     * Sets the value for child leaf "tsl-vol-count",
     * using a String value.
     * @param tslVolCountValue used during instantiation.
     */
    public void setTslVolCountValue(String tslVolCountValue)
            throws JNCException {
        setTslVolCountValue(new YangUInt32(tslVolCountValue));
    }

    /**
     * Unsets the value for child leaf "tsl-vol-count".
     */
    public void unsetTslVolCountValue() throws JNCException {
        delete("tsl-vol-count");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tsl-vol-count" leaf will not have a value.
     */
    public void addTslVolCount() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsl-vol-count",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tsl-vol-count" with operation "replace".
     */
    public void markTslVolCountReplace() throws JNCException {
        markLeafReplace("tslVolCount");
    }

    /**
     * Marks the leaf "tsl-vol-count" with operation "merge".
     */
    public void markTslVolCountMerge() throws JNCException {
        markLeafMerge("tslVolCount");
    }

    /**
     * Marks the leaf "tsl-vol-count" with operation "create".
     */
    public void markTslVolCountCreate() throws JNCException {
        markLeafCreate("tslVolCount");
    }

    /**
     * Marks the leaf "tsl-vol-count" with operation "delete".
     */
    public void markTslVolCountDelete() throws JNCException {
        markLeafDelete("tslVolCount");
    }

    /* Access methods for optional leaf child: "tsp-rollover". */

    /**
     * Gets the value for child leaf "tsp-rollover".
     * @return The value of the leaf.
     */
    public YangUInt32 getTspRolloverValue() throws JNCException {
        return (YangUInt32)getValue("tsp-rollover");
    }

    /**
     * Sets the value for child leaf "tsp-rollover",
     * using instance of generated typedef class.
     * @param tspRolloverValue The value to set.
     * @param tspRolloverValue used during instantiation.
     */
    public void setTspRolloverValue(YangUInt32 tspRolloverValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsp-rollover",
            tspRolloverValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tsp-rollover",
     * using Java primitive values.
     * @param tspRolloverValue used during instantiation.
     */
    public void setTspRolloverValue(long tspRolloverValue) throws JNCException {
        setTspRolloverValue(new YangUInt32(tspRolloverValue));
    }

    /**
     * Sets the value for child leaf "tsp-rollover",
     * using a String value.
     * @param tspRolloverValue used during instantiation.
     */
    public void setTspRolloverValue(String tspRolloverValue)
            throws JNCException {
        setTspRolloverValue(new YangUInt32(tspRolloverValue));
    }

    /**
     * Unsets the value for child leaf "tsp-rollover".
     */
    public void unsetTspRolloverValue() throws JNCException {
        delete("tsp-rollover");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tsp-rollover" leaf will not have a value.
     */
    public void addTspRollover() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsp-rollover",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tsp-rollover" with operation "replace".
     */
    public void markTspRolloverReplace() throws JNCException {
        markLeafReplace("tspRollover");
    }

    /**
     * Marks the leaf "tsp-rollover" with operation "merge".
     */
    public void markTspRolloverMerge() throws JNCException {
        markLeafMerge("tspRollover");
    }

    /**
     * Marks the leaf "tsp-rollover" with operation "create".
     */
    public void markTspRolloverCreate() throws JNCException {
        markLeafCreate("tspRollover");
    }

    /**
     * Marks the leaf "tsp-rollover" with operation "delete".
     */
    public void markTspRolloverDelete() throws JNCException {
        markLeafDelete("tspRollover");
    }

    /* Access methods for optional leaf child: "tsl-rollover". */

    /**
     * Gets the value for child leaf "tsl-rollover".
     * @return The value of the leaf.
     */
    public YangUInt32 getTslRolloverValue() throws JNCException {
        return (YangUInt32)getValue("tsl-rollover");
    }

    /**
     * Sets the value for child leaf "tsl-rollover",
     * using instance of generated typedef class.
     * @param tslRolloverValue The value to set.
     * @param tslRolloverValue used during instantiation.
     */
    public void setTslRolloverValue(YangUInt32 tslRolloverValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsl-rollover",
            tslRolloverValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tsl-rollover",
     * using Java primitive values.
     * @param tslRolloverValue used during instantiation.
     */
    public void setTslRolloverValue(long tslRolloverValue) throws JNCException {
        setTslRolloverValue(new YangUInt32(tslRolloverValue));
    }

    /**
     * Sets the value for child leaf "tsl-rollover",
     * using a String value.
     * @param tslRolloverValue used during instantiation.
     */
    public void setTslRolloverValue(String tslRolloverValue)
            throws JNCException {
        setTslRolloverValue(new YangUInt32(tslRolloverValue));
    }

    /**
     * Unsets the value for child leaf "tsl-rollover".
     */
    public void unsetTslRolloverValue() throws JNCException {
        delete("tsl-rollover");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tsl-rollover" leaf will not have a value.
     */
    public void addTslRollover() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tsl-rollover",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tsl-rollover" with operation "replace".
     */
    public void markTslRolloverReplace() throws JNCException {
        markLeafReplace("tslRollover");
    }

    /**
     * Marks the leaf "tsl-rollover" with operation "merge".
     */
    public void markTslRolloverMerge() throws JNCException {
        markLeafMerge("tslRollover");
    }

    /**
     * Marks the leaf "tsl-rollover" with operation "create".
     */
    public void markTslRolloverCreate() throws JNCException {
        markLeafCreate("tslRollover");
    }

    /**
     * Marks the leaf "tsl-rollover" with operation "delete".
     */
    public void markTslRolloverDelete() throws JNCException {
        markLeafDelete("tslRollover");
    }

    /* Access methods for optional leaf child: "scp-address". */

    /**
     * Gets the value for child leaf "scp-address".
     * @return The value of the leaf.
     */
    public YangString getScpAddressValue() throws JNCException {
        return (YangString)getValue("scp-address");
    }

    /**
     * Sets the value for child leaf "scp-address",
     * using instance of generated typedef class.
     * @param scpAddressValue The value to set.
     * @param scpAddressValue used during instantiation.
     */
    public void setScpAddressValue(YangString scpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "scp-address",
            scpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scp-address",
     * using a String value.
     * @param scpAddressValue used during instantiation.
     */
    public void setScpAddressValue(String scpAddressValue) throws JNCException {
        setScpAddressValue(new YangString(scpAddressValue));
    }

    /**
     * Unsets the value for child leaf "scp-address".
     */
    public void unsetScpAddressValue() throws JNCException {
        delete("scp-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scp-address" leaf will not have a value.
     */
    public void addScpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "scp-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scp-address" with operation "replace".
     */
    public void markScpAddressReplace() throws JNCException {
        markLeafReplace("scpAddress");
    }

    /**
     * Marks the leaf "scp-address" with operation "merge".
     */
    public void markScpAddressMerge() throws JNCException {
        markLeafMerge("scpAddress");
    }

    /**
     * Marks the leaf "scp-address" with operation "create".
     */
    public void markScpAddressCreate() throws JNCException {
        markLeafCreate("scpAddress");
    }

    /**
     * Marks the leaf "scp-address" with operation "delete".
     */
    public void markScpAddressDelete() throws JNCException {
        markLeafDelete("scpAddress");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
