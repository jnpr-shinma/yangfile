/* 
 * @(#)MmeSubscriberPlmn.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;

import Element;

import ElementLeafListValueIterator;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/mme-subscriber-plmn"
 * <p>
 * See line 809 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeSubscriberPlmn extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeSubscriberPlmn object.
     */
    public MmeSubscriberPlmn() {
        super(Epc.NAMESPACE, "mme-subscriber-plmn");
    }

    /**
     * Constructor for an initialized MmeSubscriberPlmn object,
     * 
     * @param plmnValue Key argument of child.
     */
    public MmeSubscriberPlmn(YangString plmnValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-subscriber-plmn");
        Leaf plmn = new Leaf(Epc.NAMESPACE, "plmn");
        plmn.setValue(plmnValue);
        insertChild(plmn, childrenNames());
    }

    /**
     * Constructor for an initialized MmeSubscriberPlmn object,
     * with String keys.
     * @param plmnValue Key argument of child.
     */
    public MmeSubscriberPlmn(String plmnValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-subscriber-plmn");
        Leaf plmn = new Leaf(Epc.NAMESPACE, "plmn");
        plmn.setValue(new YangString(plmnValue));
        insertChild(plmn, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeSubscriberPlmn clone() {
        MmeSubscriberPlmn copy;
        try {
            copy = new MmeSubscriberPlmn(getPlmnValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeSubscriberPlmn)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeSubscriberPlmn cloneShallow() {
        MmeSubscriberPlmn copy;
        try {
            copy = new MmeSubscriberPlmn(getPlmnValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeSubscriberPlmn)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "plmn",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "gtp-profile",
            "plmn",
            "protocol-type",
            "suppress-hss-notify",
            "ims-support",
            "native-mme-group-ids",
            "lgw-protocol-type",
            "mt-lr",
            "mo-lr",
            "nri-bit-length",
            "dns-preference",
            "ims-local-breakout",
            "local-breakout",
            "local-breakout-apn-list",
        };
    }

    /* Access methods for optional leaf child: "gtp-profile". */

    /**
     * Gets the value for child leaf "gtp-profile".
     * @return The value of the leaf.
     */
    public YangString getGtpProfileValue() throws JNCException {
        YangString gtpProfile = (YangString)getValue("gtp-profile");
        if (gtpProfile == null) {
            gtpProfile = new YangString("none");  // default
        }
        return gtpProfile;
    }

    /**
     * Sets the value for child leaf "gtp-profile",
     * using instance of generated typedef class.
     * @param gtpProfileValue The value to set.
     * @param gtpProfileValue used during instantiation.
     */
    public void setGtpProfileValue(YangString gtpProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gtp-profile",
            gtpProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gtp-profile",
     * using a String value.
     * @param gtpProfileValue used during instantiation.
     */
    public void setGtpProfileValue(String gtpProfileValue) throws JNCException {
        setGtpProfileValue(new YangString(gtpProfileValue));
    }

    /**
     * Unsets the value for child leaf "gtp-profile".
     */
    public void unsetGtpProfileValue() throws JNCException {
        delete("gtp-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gtp-profile" leaf will not have a value.
     */
    public void addGtpProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gtp-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gtp-profile" with operation "replace".
     */
    public void markGtpProfileReplace() throws JNCException {
        markLeafReplace("gtpProfile");
    }

    /**
     * Marks the leaf "gtp-profile" with operation "merge".
     */
    public void markGtpProfileMerge() throws JNCException {
        markLeafMerge("gtpProfile");
    }

    /**
     * Marks the leaf "gtp-profile" with operation "create".
     */
    public void markGtpProfileCreate() throws JNCException {
        markLeafCreate("gtpProfile");
    }

    /**
     * Marks the leaf "gtp-profile" with operation "delete".
     */
    public void markGtpProfileDelete() throws JNCException {
        markLeafDelete("gtpProfile");
    }

    /* Access methods for leaf child: "plmn". */

    /**
     * Gets the value for child leaf "plmn".
     * @return The value of the leaf.
     */
    public YangString getPlmnValue() throws JNCException {
        return (YangString)getValue("plmn");
    }

    /**
     * Sets the value for child leaf "plmn",
     * using instance of generated typedef class.
     * @param plmnValue The value to set.
     * @param plmnValue used during instantiation.
     */
    public void setPlmnValue(YangString plmnValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn",
            plmnValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "plmn",
     * using a String value.
     * @param plmnValue used during instantiation.
     */
    public void setPlmnValue(String plmnValue) throws JNCException {
        setPlmnValue(new YangString(plmnValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "plmn" leaf will not have a value.
     */
    public void addPlmn() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "protocol-type". */

    /**
     * Gets the value for child leaf "protocol-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getProtocolTypeValue() throws JNCException {
        YangEnumeration protocolType = (YangEnumeration)getValue("protocol-type");
        if (protocolType == null) {
            protocolType = new YangEnumeration("gtp", new String[] {  // default
                "gtp",
                "pmip",
            });
        }
        return protocolType;
    }

    /**
     * Sets the value for child leaf "protocol-type",
     * using instance of generated typedef class.
     * @param protocolTypeValue The value to set.
     * @param protocolTypeValue used during instantiation.
     */
    public void setProtocolTypeValue(YangEnumeration protocolTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "protocol-type",
            protocolTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "protocol-type",
     * using a String value.
     * @param protocolTypeValue used during instantiation.
     */
    public void setProtocolTypeValue(String protocolTypeValue)
            throws JNCException {
        setProtocolTypeValue(new YangEnumeration(protocolTypeValue, new String[] {
             "gtp",
             "pmip",
        }));
    }

    /**
     * Unsets the value for child leaf "protocol-type".
     */
    public void unsetProtocolTypeValue() throws JNCException {
        delete("protocol-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "protocol-type" leaf will not have a value.
     */
    public void addProtocolType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "protocol-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "protocol-type" with operation "replace".
     */
    public void markProtocolTypeReplace() throws JNCException {
        markLeafReplace("protocolType");
    }

    /**
     * Marks the leaf "protocol-type" with operation "merge".
     */
    public void markProtocolTypeMerge() throws JNCException {
        markLeafMerge("protocolType");
    }

    /**
     * Marks the leaf "protocol-type" with operation "create".
     */
    public void markProtocolTypeCreate() throws JNCException {
        markLeafCreate("protocolType");
    }

    /**
     * Marks the leaf "protocol-type" with operation "delete".
     */
    public void markProtocolTypeDelete() throws JNCException {
        markLeafDelete("protocolType");
    }

    /* Access methods for optional leaf child: "suppress-hss-notify". */

    /**
     * Gets the value for child leaf "suppress-hss-notify".
     * @return The value of the leaf.
     */
    public YangEnumeration getSuppressHssNotifyValue() throws JNCException {
        YangEnumeration suppressHssNotify = (YangEnumeration)getValue("suppress-hss-notify");
        if (suppressHssNotify == null) {
            suppressHssNotify = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return suppressHssNotify;
    }

    /**
     * Sets the value for child leaf "suppress-hss-notify",
     * using instance of generated typedef class.
     * @param suppressHssNotifyValue The value to set.
     * @param suppressHssNotifyValue used during instantiation.
     */
    public void setSuppressHssNotifyValue(YangEnumeration suppressHssNotifyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "suppress-hss-notify",
            suppressHssNotifyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "suppress-hss-notify",
     * using a String value.
     * @param suppressHssNotifyValue used during instantiation.
     */
    public void setSuppressHssNotifyValue(String suppressHssNotifyValue)
            throws JNCException {
        setSuppressHssNotifyValue(new YangEnumeration(suppressHssNotifyValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "suppress-hss-notify".
     */
    public void unsetSuppressHssNotifyValue() throws JNCException {
        delete("suppress-hss-notify");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "suppress-hss-notify" leaf will not have a value.
     */
    public void addSuppressHssNotify() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "suppress-hss-notify",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "suppress-hss-notify" with operation "replace".
     */
    public void markSuppressHssNotifyReplace() throws JNCException {
        markLeafReplace("suppressHssNotify");
    }

    /**
     * Marks the leaf "suppress-hss-notify" with operation "merge".
     */
    public void markSuppressHssNotifyMerge() throws JNCException {
        markLeafMerge("suppressHssNotify");
    }

    /**
     * Marks the leaf "suppress-hss-notify" with operation "create".
     */
    public void markSuppressHssNotifyCreate() throws JNCException {
        markLeafCreate("suppressHssNotify");
    }

    /**
     * Marks the leaf "suppress-hss-notify" with operation "delete".
     */
    public void markSuppressHssNotifyDelete() throws JNCException {
        markLeafDelete("suppressHssNotify");
    }

    /* Access methods for optional leaf child: "ims-support". */

    /**
     * Gets the value for child leaf "ims-support".
     * @return The value of the leaf.
     */
    public YangEnumeration getImsSupportValue() throws JNCException {
        YangEnumeration imsSupport = (YangEnumeration)getValue("ims-support");
        if (imsSupport == null) {
            imsSupport = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return imsSupport;
    }

    /**
     * Sets the value for child leaf "ims-support",
     * using instance of generated typedef class.
     * @param imsSupportValue The value to set.
     * @param imsSupportValue used during instantiation.
     */
    public void setImsSupportValue(YangEnumeration imsSupportValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ims-support",
            imsSupportValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ims-support",
     * using a String value.
     * @param imsSupportValue used during instantiation.
     */
    public void setImsSupportValue(String imsSupportValue) throws JNCException {
        setImsSupportValue(new YangEnumeration(imsSupportValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "ims-support".
     */
    public void unsetImsSupportValue() throws JNCException {
        delete("ims-support");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ims-support" leaf will not have a value.
     */
    public void addImsSupport() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ims-support",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ims-support" with operation "replace".
     */
    public void markImsSupportReplace() throws JNCException {
        markLeafReplace("imsSupport");
    }

    /**
     * Marks the leaf "ims-support" with operation "merge".
     */
    public void markImsSupportMerge() throws JNCException {
        markLeafMerge("imsSupport");
    }

    /**
     * Marks the leaf "ims-support" with operation "create".
     */
    public void markImsSupportCreate() throws JNCException {
        markLeafCreate("imsSupport");
    }

    /**
     * Marks the leaf "ims-support" with operation "delete".
     */
    public void markImsSupportDelete() throws JNCException {
        markLeafDelete("imsSupport");
    }

    /* Access methods for optional leaf child: "native-mme-group-ids". */

    /**
     * Gets the value for child leaf "native-mme-group-ids".
     * @return The value of the leaf.
     */
    public YangString getNativeMmeGroupIdsValue() throws JNCException {
        YangString nativeMmeGroupIds = (YangString)getValue("native-mme-group-ids");
        if (nativeMmeGroupIds == null) {
            nativeMmeGroupIds = new YangString("none");  // default
        }
        return nativeMmeGroupIds;
    }

    /**
     * Sets the value for child leaf "native-mme-group-ids",
     * using instance of generated typedef class.
     * @param nativeMmeGroupIdsValue The value to set.
     * @param nativeMmeGroupIdsValue used during instantiation.
     */
    public void setNativeMmeGroupIdsValue(YangString nativeMmeGroupIdsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "native-mme-group-ids",
            nativeMmeGroupIdsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "native-mme-group-ids",
     * using a String value.
     * @param nativeMmeGroupIdsValue used during instantiation.
     */
    public void setNativeMmeGroupIdsValue(String nativeMmeGroupIdsValue)
            throws JNCException {
        setNativeMmeGroupIdsValue(new YangString(nativeMmeGroupIdsValue));
    }

    /**
     * Unsets the value for child leaf "native-mme-group-ids".
     */
    public void unsetNativeMmeGroupIdsValue() throws JNCException {
        delete("native-mme-group-ids");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "native-mme-group-ids" leaf will not have a value.
     */
    public void addNativeMmeGroupIds() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "native-mme-group-ids",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "native-mme-group-ids" with operation "replace".
     */
    public void markNativeMmeGroupIdsReplace() throws JNCException {
        markLeafReplace("nativeMmeGroupIds");
    }

    /**
     * Marks the leaf "native-mme-group-ids" with operation "merge".
     */
    public void markNativeMmeGroupIdsMerge() throws JNCException {
        markLeafMerge("nativeMmeGroupIds");
    }

    /**
     * Marks the leaf "native-mme-group-ids" with operation "create".
     */
    public void markNativeMmeGroupIdsCreate() throws JNCException {
        markLeafCreate("nativeMmeGroupIds");
    }

    /**
     * Marks the leaf "native-mme-group-ids" with operation "delete".
     */
    public void markNativeMmeGroupIdsDelete() throws JNCException {
        markLeafDelete("nativeMmeGroupIds");
    }

    /* Access methods for optional leaf child: "lgw-protocol-type". */

    /**
     * Gets the value for child leaf "lgw-protocol-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getLgwProtocolTypeValue() throws JNCException {
        YangEnumeration lgwProtocolType = (YangEnumeration)getValue("lgw-protocol-type");
        if (lgwProtocolType == null) {
            lgwProtocolType = new YangEnumeration("pmip", new String[] {  // default
                "gtp",
                "pmip",
            });
        }
        return lgwProtocolType;
    }

    /**
     * Sets the value for child leaf "lgw-protocol-type",
     * using instance of generated typedef class.
     * @param lgwProtocolTypeValue The value to set.
     * @param lgwProtocolTypeValue used during instantiation.
     */
    public void setLgwProtocolTypeValue(YangEnumeration lgwProtocolTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lgw-protocol-type",
            lgwProtocolTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lgw-protocol-type",
     * using a String value.
     * @param lgwProtocolTypeValue used during instantiation.
     */
    public void setLgwProtocolTypeValue(String lgwProtocolTypeValue)
            throws JNCException {
        setLgwProtocolTypeValue(new YangEnumeration(lgwProtocolTypeValue, new String[] {
             "gtp",
             "pmip",
        }));
    }

    /**
     * Unsets the value for child leaf "lgw-protocol-type".
     */
    public void unsetLgwProtocolTypeValue() throws JNCException {
        delete("lgw-protocol-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lgw-protocol-type" leaf will not have a value.
     */
    public void addLgwProtocolType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lgw-protocol-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lgw-protocol-type" with operation "replace".
     */
    public void markLgwProtocolTypeReplace() throws JNCException {
        markLeafReplace("lgwProtocolType");
    }

    /**
     * Marks the leaf "lgw-protocol-type" with operation "merge".
     */
    public void markLgwProtocolTypeMerge() throws JNCException {
        markLeafMerge("lgwProtocolType");
    }

    /**
     * Marks the leaf "lgw-protocol-type" with operation "create".
     */
    public void markLgwProtocolTypeCreate() throws JNCException {
        markLeafCreate("lgwProtocolType");
    }

    /**
     * Marks the leaf "lgw-protocol-type" with operation "delete".
     */
    public void markLgwProtocolTypeDelete() throws JNCException {
        markLeafDelete("lgwProtocolType");
    }

    /* Access methods for optional leaf child: "mt-lr". */

    /**
     * Gets the value for child leaf "mt-lr".
     * @return The value of the leaf.
     */
    public YangEnumeration getMtLrValue() throws JNCException {
        YangEnumeration mtLr = (YangEnumeration)getValue("mt-lr");
        if (mtLr == null) {
            mtLr = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return mtLr;
    }

    /**
     * Sets the value for child leaf "mt-lr",
     * using instance of generated typedef class.
     * @param mtLrValue The value to set.
     * @param mtLrValue used during instantiation.
     */
    public void setMtLrValue(YangEnumeration mtLrValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mt-lr",
            mtLrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mt-lr",
     * using a String value.
     * @param mtLrValue used during instantiation.
     */
    public void setMtLrValue(String mtLrValue) throws JNCException {
        setMtLrValue(new YangEnumeration(mtLrValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "mt-lr".
     */
    public void unsetMtLrValue() throws JNCException {
        delete("mt-lr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mt-lr" leaf will not have a value.
     */
    public void addMtLr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mt-lr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mt-lr" with operation "replace".
     */
    public void markMtLrReplace() throws JNCException {
        markLeafReplace("mtLr");
    }

    /**
     * Marks the leaf "mt-lr" with operation "merge".
     */
    public void markMtLrMerge() throws JNCException {
        markLeafMerge("mtLr");
    }

    /**
     * Marks the leaf "mt-lr" with operation "create".
     */
    public void markMtLrCreate() throws JNCException {
        markLeafCreate("mtLr");
    }

    /**
     * Marks the leaf "mt-lr" with operation "delete".
     */
    public void markMtLrDelete() throws JNCException {
        markLeafDelete("mtLr");
    }

    /* Access methods for optional leaf child: "mo-lr". */

    /**
     * Gets the value for child leaf "mo-lr".
     * @return The value of the leaf.
     */
    public YangEnumeration getMoLrValue() throws JNCException {
        YangEnumeration moLr = (YangEnumeration)getValue("mo-lr");
        if (moLr == null) {
            moLr = new YangEnumeration("disable", new String[] {  // default
                "disable",
            });
        }
        return moLr;
    }

    /**
     * Sets the value for child leaf "mo-lr",
     * using instance of generated typedef class.
     * @param moLrValue The value to set.
     * @param moLrValue used during instantiation.
     */
    public void setMoLrValue(YangEnumeration moLrValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mo-lr",
            moLrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mo-lr",
     * using a String value.
     * @param moLrValue used during instantiation.
     */
    public void setMoLrValue(String moLrValue) throws JNCException {
        setMoLrValue(new YangEnumeration(moLrValue, new String[] {
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "mo-lr".
     */
    public void unsetMoLrValue() throws JNCException {
        delete("mo-lr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mo-lr" leaf will not have a value.
     */
    public void addMoLr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mo-lr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mo-lr" with operation "replace".
     */
    public void markMoLrReplace() throws JNCException {
        markLeafReplace("moLr");
    }

    /**
     * Marks the leaf "mo-lr" with operation "merge".
     */
    public void markMoLrMerge() throws JNCException {
        markLeafMerge("moLr");
    }

    /**
     * Marks the leaf "mo-lr" with operation "create".
     */
    public void markMoLrCreate() throws JNCException {
        markLeafCreate("moLr");
    }

    /**
     * Marks the leaf "mo-lr" with operation "delete".
     */
    public void markMoLrDelete() throws JNCException {
        markLeafDelete("moLr");
    }

    /* Access methods for optional leaf child: "nri-bit-length". */

    /**
     * Gets the value for child leaf "nri-bit-length".
     * @return The value of the leaf.
     */
    public YangUInt8 getNriBitLengthValue() throws JNCException {
        YangUInt8 nriBitLength = (YangUInt8)getValue("nri-bit-length");
        if (nriBitLength == null) {
            nriBitLength = new YangUInt8("0");  // default
        }
        return nriBitLength;
    }

    /**
     * Sets the value for child leaf "nri-bit-length",
     * using instance of generated typedef class.
     * @param nriBitLengthValue The value to set.
     * @param nriBitLengthValue used during instantiation.
     */
    public void setNriBitLengthValue(YangUInt8 nriBitLengthValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nri-bit-length",
            nriBitLengthValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nri-bit-length",
     * using Java primitive values.
     * @param nriBitLengthValue used during instantiation.
     */
    public void setNriBitLengthValue(short nriBitLengthValue)
            throws JNCException {
        setNriBitLengthValue(new YangUInt8(nriBitLengthValue));
    }

    /**
     * Sets the value for child leaf "nri-bit-length",
     * using a String value.
     * @param nriBitLengthValue used during instantiation.
     */
    public void setNriBitLengthValue(String nriBitLengthValue)
            throws JNCException {
        setNriBitLengthValue(new YangUInt8(nriBitLengthValue));
    }

    /**
     * Unsets the value for child leaf "nri-bit-length".
     */
    public void unsetNriBitLengthValue() throws JNCException {
        delete("nri-bit-length");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nri-bit-length" leaf will not have a value.
     */
    public void addNriBitLength() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nri-bit-length",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nri-bit-length" with operation "replace".
     */
    public void markNriBitLengthReplace() throws JNCException {
        markLeafReplace("nriBitLength");
    }

    /**
     * Marks the leaf "nri-bit-length" with operation "merge".
     */
    public void markNriBitLengthMerge() throws JNCException {
        markLeafMerge("nriBitLength");
    }

    /**
     * Marks the leaf "nri-bit-length" with operation "create".
     */
    public void markNriBitLengthCreate() throws JNCException {
        markLeafCreate("nriBitLength");
    }

    /**
     * Marks the leaf "nri-bit-length" with operation "delete".
     */
    public void markNriBitLengthDelete() throws JNCException {
        markLeafDelete("nriBitLength");
    }

    /* Access methods for optional leaf child: "dns-preference". */

    /**
     * Gets the value for child leaf "dns-preference".
     * @return The value of the leaf.
     */
    public YangEnumeration getDnsPreferenceValue() throws JNCException {
        YangEnumeration dnsPreference = (YangEnumeration)getValue("dns-preference");
        if (dnsPreference == null) {
            dnsPreference = new YangEnumeration("unknown", new String[] {  // default
                "unknown",
                "s-naptr",
                "address-only",
            });
        }
        return dnsPreference;
    }

    /**
     * Sets the value for child leaf "dns-preference",
     * using instance of generated typedef class.
     * @param dnsPreferenceValue The value to set.
     * @param dnsPreferenceValue used during instantiation.
     */
    public void setDnsPreferenceValue(YangEnumeration dnsPreferenceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dns-preference",
            dnsPreferenceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dns-preference",
     * using a String value.
     * @param dnsPreferenceValue used during instantiation.
     */
    public void setDnsPreferenceValue(String dnsPreferenceValue)
            throws JNCException {
        setDnsPreferenceValue(new YangEnumeration(dnsPreferenceValue, new String[] {
             "unknown",
             "s-naptr",
             "address-only",
        }));
    }

    /**
     * Unsets the value for child leaf "dns-preference".
     */
    public void unsetDnsPreferenceValue() throws JNCException {
        delete("dns-preference");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dns-preference" leaf will not have a value.
     */
    public void addDnsPreference() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dns-preference",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dns-preference" with operation "replace".
     */
    public void markDnsPreferenceReplace() throws JNCException {
        markLeafReplace("dnsPreference");
    }

    /**
     * Marks the leaf "dns-preference" with operation "merge".
     */
    public void markDnsPreferenceMerge() throws JNCException {
        markLeafMerge("dnsPreference");
    }

    /**
     * Marks the leaf "dns-preference" with operation "create".
     */
    public void markDnsPreferenceCreate() throws JNCException {
        markLeafCreate("dnsPreference");
    }

    /**
     * Marks the leaf "dns-preference" with operation "delete".
     */
    public void markDnsPreferenceDelete() throws JNCException {
        markLeafDelete("dnsPreference");
    }

    /* Access methods for optional leaf child: "ims-local-breakout". */

    /**
     * Gets the value for child leaf "ims-local-breakout".
     * @return The value of the leaf.
     */
    public YangEnumeration getImsLocalBreakoutValue() throws JNCException {
        YangEnumeration imsLocalBreakout = (YangEnumeration)getValue("ims-local-breakout");
        if (imsLocalBreakout == null) {
            imsLocalBreakout = new YangEnumeration("allow", new String[] {  // default
                "allow",
                "disallow",
            });
        }
        return imsLocalBreakout;
    }

    /**
     * Sets the value for child leaf "ims-local-breakout",
     * using instance of generated typedef class.
     * @param imsLocalBreakoutValue The value to set.
     * @param imsLocalBreakoutValue used during instantiation.
     */
    public void setImsLocalBreakoutValue(YangEnumeration imsLocalBreakoutValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ims-local-breakout",
            imsLocalBreakoutValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ims-local-breakout",
     * using a String value.
     * @param imsLocalBreakoutValue used during instantiation.
     */
    public void setImsLocalBreakoutValue(String imsLocalBreakoutValue)
            throws JNCException {
        setImsLocalBreakoutValue(new YangEnumeration(imsLocalBreakoutValue, new String[] {
             "allow",
             "disallow",
        }));
    }

    /**
     * Unsets the value for child leaf "ims-local-breakout".
     */
    public void unsetImsLocalBreakoutValue() throws JNCException {
        delete("ims-local-breakout");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ims-local-breakout" leaf will not have a value.
     */
    public void addImsLocalBreakout() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ims-local-breakout",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ims-local-breakout" with operation "replace".
     */
    public void markImsLocalBreakoutReplace() throws JNCException {
        markLeafReplace("imsLocalBreakout");
    }

    /**
     * Marks the leaf "ims-local-breakout" with operation "merge".
     */
    public void markImsLocalBreakoutMerge() throws JNCException {
        markLeafMerge("imsLocalBreakout");
    }

    /**
     * Marks the leaf "ims-local-breakout" with operation "create".
     */
    public void markImsLocalBreakoutCreate() throws JNCException {
        markLeafCreate("imsLocalBreakout");
    }

    /**
     * Marks the leaf "ims-local-breakout" with operation "delete".
     */
    public void markImsLocalBreakoutDelete() throws JNCException {
        markLeafDelete("imsLocalBreakout");
    }

    /* Access methods for optional leaf child: "local-breakout". */

    /**
     * Gets the value for child leaf "local-breakout".
     * @return The value of the leaf.
     */
    public YangEnumeration getLocalBreakoutValue() throws JNCException {
        YangEnumeration localBreakout = (YangEnumeration)getValue("local-breakout");
        if (localBreakout == null) {
            localBreakout = new YangEnumeration("allow", new String[] {  // default
                "allow",
                "disallow",
            });
        }
        return localBreakout;
    }

    /**
     * Sets the value for child leaf "local-breakout",
     * using instance of generated typedef class.
     * @param localBreakoutValue The value to set.
     * @param localBreakoutValue used during instantiation.
     */
    public void setLocalBreakoutValue(YangEnumeration localBreakoutValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-breakout",
            localBreakoutValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-breakout",
     * using a String value.
     * @param localBreakoutValue used during instantiation.
     */
    public void setLocalBreakoutValue(String localBreakoutValue)
            throws JNCException {
        setLocalBreakoutValue(new YangEnumeration(localBreakoutValue, new String[] {
             "allow",
             "disallow",
        }));
    }

    /**
     * Unsets the value for child leaf "local-breakout".
     */
    public void unsetLocalBreakoutValue() throws JNCException {
        delete("local-breakout");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-breakout" leaf will not have a value.
     */
    public void addLocalBreakout() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-breakout",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-breakout" with operation "replace".
     */
    public void markLocalBreakoutReplace() throws JNCException {
        markLeafReplace("localBreakout");
    }

    /**
     * Marks the leaf "local-breakout" with operation "merge".
     */
    public void markLocalBreakoutMerge() throws JNCException {
        markLeafMerge("localBreakout");
    }

    /**
     * Marks the leaf "local-breakout" with operation "create".
     */
    public void markLocalBreakoutCreate() throws JNCException {
        markLeafCreate("localBreakout");
    }

    /**
     * Marks the leaf "local-breakout" with operation "delete".
     */
    public void markLocalBreakoutDelete() throws JNCException {
        markLeafDelete("localBreakout");
    }

    /* Access methods for optional leaf-list child: "local-breakout-apn-list". */

    /**
     * Iterator method for the leaf-list "local-breakout-apn-list".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator localBreakoutApnListIterator() {
        return new ElementLeafListValueIterator(children, "local-breakout-apn-list");
    }

    /**
     * Sets the value for child leaf-list "local-breakout-apn-list",
     * using instance of generated typedef class.
     * @param localBreakoutApnListValue The value to set.
     * @param localBreakoutApnListValue used during instantiation.
     */
    public void setLocalBreakoutApnListValue(YangString localBreakoutApnListValue)
            throws JNCException {
        setLeafListValue(Epc.NAMESPACE,
            "local-breakout-apn-list",
            localBreakoutApnListValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "local-breakout-apn-list",
     * using a String value.
     * @param localBreakoutApnListValue used during instantiation.
     */
    public void setLocalBreakoutApnListValue(String localBreakoutApnListValue)
            throws JNCException {
        setLocalBreakoutApnListValue(new YangString(localBreakoutApnListValue));
    }

    /**
     * Deletes leaf-list entry "localBreakoutApnList".
     * @param localBreakoutApnListValue Value to delete.
     */
    public void deleteLocalBreakoutApnList(YangString localBreakoutApnListValue)
            throws JNCException {
        String path = "localBreakoutApnList[localBreakoutApnListValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "localBreakoutApnList".
     * The value is specified as a string.
     * @param localBreakoutApnListValue Value to delete.
     */
    public void deleteLocalBreakoutApnList(String localBreakoutApnListValue)
            throws JNCException {
        String path = "localBreakoutApnList[localBreakoutApnListValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-breakout-apn-list" leaf-list will not have a value.
     */
    public void addLocalBreakoutApnList() throws JNCException {
        setLeafListValue(Epc.NAMESPACE,
            "local-breakout-apn-list",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "local-breakout-apn-list" with operation "replace".
     * @param localBreakoutApnListValue The value to mark
     */
    public void markLocalBreakoutApnListReplace(YangString localBreakoutApnListValue)
            throws JNCException {
        markLeafReplace("localBreakoutApnList[name='" + localBreakoutApnListValue + "']");
    }

    /**
     * Marks the leaf-list "local-breakout-apn-list" with operation "merge".
     * @param localBreakoutApnListValue The value to mark
     */
    public void markLocalBreakoutApnListMerge(YangString localBreakoutApnListValue)
            throws JNCException {
        markLeafMerge("localBreakoutApnList[name='" + localBreakoutApnListValue + "']");
    }

    /**
     * Marks the leaf-list "local-breakout-apn-list" with operation "create".
     * @param localBreakoutApnListValue The value to mark
     */
    public void markLocalBreakoutApnListCreate(YangString localBreakoutApnListValue)
            throws JNCException {
        markLeafCreate("localBreakoutApnList[name='" + localBreakoutApnListValue + "']");
    }

    /**
     * Marks the leaf-list "local-breakout-apn-list" with operation "delete".
     * @param localBreakoutApnListValue The value to mark
     */
    public void markLocalBreakoutApnListDelete(YangString localBreakoutApnListValue)
            throws JNCException {
        markLeafDelete("localBreakoutApnList[name='" + localBreakoutApnListValue + "']");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
