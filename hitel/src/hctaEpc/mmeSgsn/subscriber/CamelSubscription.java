/* 
 * @(#)CamelSubscription.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;
import .hctaEpc.ImsiT;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/camel-subscription"
 * <p>
 * See line 190 in
 * sgsnScCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class CamelSubscription extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty CamelSubscription object.
     */
    public CamelSubscription() {
        super(Epc.NAMESPACE, "camel-subscription");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public CamelSubscription clone() {
        return (CamelSubscription)cloneContent(new CamelSubscription());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public CamelSubscription cloneShallow() {
        return (CamelSubscription)cloneShallowContent(new CamelSubscription());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "imsi",
            "tdp-type",
            "phase-supported",
            "scp-address",
            "service-key",
            "default-gprs-handling",
        };
    }

    /* Access methods for leaf child: "imsi". */

    /**
     * Gets the value for child leaf "imsi".
     * @return The value of the leaf.
     */
    public ImsiT getImsiValue() throws JNCException {
        return (ImsiT)getValue("imsi");
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a JNC type value.
     * @param imsiValue The value to set.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(ImsiT imsiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            imsiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a String value.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(String imsiValue) throws JNCException {
        setImsiValue(new ImsiT(imsiValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imsi" leaf will not have a value.
     */
    public void addImsi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "tdp-type". */

    /**
     * Gets the value for child leaf "tdp-type".
     * @return The value of the leaf.
     */
    public YangUInt8 getTdpTypeValue() throws JNCException {
        return (YangUInt8)getValue("tdp-type");
    }

    /**
     * Sets the value for child leaf "tdp-type",
     * using instance of generated typedef class.
     * @param tdpTypeValue The value to set.
     * @param tdpTypeValue used during instantiation.
     */
    public void setTdpTypeValue(YangUInt8 tdpTypeValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tdp-type",
            tdpTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tdp-type",
     * using Java primitive values.
     * @param tdpTypeValue used during instantiation.
     */
    public void setTdpTypeValue(short tdpTypeValue) throws JNCException {
        setTdpTypeValue(new YangUInt8(tdpTypeValue));
    }

    /**
     * Sets the value for child leaf "tdp-type",
     * using a String value.
     * @param tdpTypeValue used during instantiation.
     */
    public void setTdpTypeValue(String tdpTypeValue) throws JNCException {
        setTdpTypeValue(new YangUInt8(tdpTypeValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tdp-type" leaf will not have a value.
     */
    public void addTdpType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tdp-type",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "phase-supported". */

    /**
     * Gets the value for child leaf "phase-supported".
     * @return The value of the leaf.
     */
    public YangUInt16 getPhaseSupportedValue() throws JNCException {
        return (YangUInt16)getValue("phase-supported");
    }

    /**
     * Sets the value for child leaf "phase-supported",
     * using instance of generated typedef class.
     * @param phaseSupportedValue The value to set.
     * @param phaseSupportedValue used during instantiation.
     */
    public void setPhaseSupportedValue(YangUInt16 phaseSupportedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "phase-supported",
            phaseSupportedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "phase-supported",
     * using Java primitive values.
     * @param phaseSupportedValue used during instantiation.
     */
    public void setPhaseSupportedValue(int phaseSupportedValue)
            throws JNCException {
        setPhaseSupportedValue(new YangUInt16(phaseSupportedValue));
    }

    /**
     * Sets the value for child leaf "phase-supported",
     * using a String value.
     * @param phaseSupportedValue used during instantiation.
     */
    public void setPhaseSupportedValue(String phaseSupportedValue)
            throws JNCException {
        setPhaseSupportedValue(new YangUInt16(phaseSupportedValue));
    }

    /**
     * Unsets the value for child leaf "phase-supported".
     */
    public void unsetPhaseSupportedValue() throws JNCException {
        delete("phase-supported");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "phase-supported" leaf will not have a value.
     */
    public void addPhaseSupported() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "phase-supported",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "phase-supported" with operation "replace".
     */
    public void markPhaseSupportedReplace() throws JNCException {
        markLeafReplace("phaseSupported");
    }

    /**
     * Marks the leaf "phase-supported" with operation "merge".
     */
    public void markPhaseSupportedMerge() throws JNCException {
        markLeafMerge("phaseSupported");
    }

    /**
     * Marks the leaf "phase-supported" with operation "create".
     */
    public void markPhaseSupportedCreate() throws JNCException {
        markLeafCreate("phaseSupported");
    }

    /**
     * Marks the leaf "phase-supported" with operation "delete".
     */
    public void markPhaseSupportedDelete() throws JNCException {
        markLeafDelete("phaseSupported");
    }

    /* Access methods for optional leaf child: "scp-address". */

    /**
     * Gets the value for child leaf "scp-address".
     * @return The value of the leaf.
     */
    public YangString getScpAddressValue() throws JNCException {
        return (YangString)getValue("scp-address");
    }

    /**
     * Sets the value for child leaf "scp-address",
     * using instance of generated typedef class.
     * @param scpAddressValue The value to set.
     * @param scpAddressValue used during instantiation.
     */
    public void setScpAddressValue(YangString scpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "scp-address",
            scpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scp-address",
     * using a String value.
     * @param scpAddressValue used during instantiation.
     */
    public void setScpAddressValue(String scpAddressValue) throws JNCException {
        setScpAddressValue(new YangString(scpAddressValue));
    }

    /**
     * Unsets the value for child leaf "scp-address".
     */
    public void unsetScpAddressValue() throws JNCException {
        delete("scp-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scp-address" leaf will not have a value.
     */
    public void addScpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "scp-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scp-address" with operation "replace".
     */
    public void markScpAddressReplace() throws JNCException {
        markLeafReplace("scpAddress");
    }

    /**
     * Marks the leaf "scp-address" with operation "merge".
     */
    public void markScpAddressMerge() throws JNCException {
        markLeafMerge("scpAddress");
    }

    /**
     * Marks the leaf "scp-address" with operation "create".
     */
    public void markScpAddressCreate() throws JNCException {
        markLeafCreate("scpAddress");
    }

    /**
     * Marks the leaf "scp-address" with operation "delete".
     */
    public void markScpAddressDelete() throws JNCException {
        markLeafDelete("scpAddress");
    }

    /* Access methods for optional leaf child: "service-key". */

    /**
     * Gets the value for child leaf "service-key".
     * @return The value of the leaf.
     */
    public YangUInt32 getServiceKeyValue() throws JNCException {
        return (YangUInt32)getValue("service-key");
    }

    /**
     * Sets the value for child leaf "service-key",
     * using instance of generated typedef class.
     * @param serviceKeyValue The value to set.
     * @param serviceKeyValue used during instantiation.
     */
    public void setServiceKeyValue(YangUInt32 serviceKeyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service-key",
            serviceKeyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service-key",
     * using Java primitive values.
     * @param serviceKeyValue used during instantiation.
     */
    public void setServiceKeyValue(long serviceKeyValue) throws JNCException {
        setServiceKeyValue(new YangUInt32(serviceKeyValue));
    }

    /**
     * Sets the value for child leaf "service-key",
     * using a String value.
     * @param serviceKeyValue used during instantiation.
     */
    public void setServiceKeyValue(String serviceKeyValue) throws JNCException {
        setServiceKeyValue(new YangUInt32(serviceKeyValue));
    }

    /**
     * Unsets the value for child leaf "service-key".
     */
    public void unsetServiceKeyValue() throws JNCException {
        delete("service-key");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service-key" leaf will not have a value.
     */
    public void addServiceKey() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service-key",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service-key" with operation "replace".
     */
    public void markServiceKeyReplace() throws JNCException {
        markLeafReplace("serviceKey");
    }

    /**
     * Marks the leaf "service-key" with operation "merge".
     */
    public void markServiceKeyMerge() throws JNCException {
        markLeafMerge("serviceKey");
    }

    /**
     * Marks the leaf "service-key" with operation "create".
     */
    public void markServiceKeyCreate() throws JNCException {
        markLeafCreate("serviceKey");
    }

    /**
     * Marks the leaf "service-key" with operation "delete".
     */
    public void markServiceKeyDelete() throws JNCException {
        markLeafDelete("serviceKey");
    }

    /* Access methods for optional leaf child: "default-gprs-handling". */

    /**
     * Gets the value for child leaf "default-gprs-handling".
     * @return The value of the leaf.
     */
    public YangString getDefaultGprsHandlingValue() throws JNCException {
        return (YangString)getValue("default-gprs-handling");
    }

    /**
     * Sets the value for child leaf "default-gprs-handling",
     * using instance of generated typedef class.
     * @param defaultGprsHandlingValue The value to set.
     * @param defaultGprsHandlingValue used during instantiation.
     */
    public void setDefaultGprsHandlingValue(YangString defaultGprsHandlingValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "default-gprs-handling",
            defaultGprsHandlingValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "default-gprs-handling",
     * using a String value.
     * @param defaultGprsHandlingValue used during instantiation.
     */
    public void setDefaultGprsHandlingValue(String defaultGprsHandlingValue)
            throws JNCException {
        setDefaultGprsHandlingValue(new YangString(defaultGprsHandlingValue));
    }

    /**
     * Unsets the value for child leaf "default-gprs-handling".
     */
    public void unsetDefaultGprsHandlingValue() throws JNCException {
        delete("default-gprs-handling");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "default-gprs-handling" leaf will not have a value.
     */
    public void addDefaultGprsHandling() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "default-gprs-handling",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "default-gprs-handling" with operation "replace".
     */
    public void markDefaultGprsHandlingReplace() throws JNCException {
        markLeafReplace("defaultGprsHandling");
    }

    /**
     * Marks the leaf "default-gprs-handling" with operation "merge".
     */
    public void markDefaultGprsHandlingMerge() throws JNCException {
        markLeafMerge("defaultGprsHandling");
    }

    /**
     * Marks the leaf "default-gprs-handling" with operation "create".
     */
    public void markDefaultGprsHandlingCreate() throws JNCException {
        markLeafCreate("defaultGprsHandling");
    }

    /**
     * Marks the leaf "default-gprs-handling" with operation "delete".
     */
    public void markDefaultGprsHandlingDelete() throws JNCException {
        markLeafDelete("defaultGprsHandling");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
