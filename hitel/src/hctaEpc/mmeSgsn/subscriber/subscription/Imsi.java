/* 
 * @(#)Imsi.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber.subscription;
import .hctaEpc.ImeiT;
import .hctaEpc.ImeisvT;
import .hctaEpc.ImsiT;
import .hctaEpc.MsisdnT;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/subscription/imsi"
 * <p>
 * See line 1434 in
 * scCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Imsi extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Imsi object.
     */
    public Imsi() {
        super(Epc.NAMESPACE, "imsi");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Imsi clone() {
        return (Imsi)cloneContent(new Imsi());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Imsi cloneShallow() {
        return (Imsi)cloneShallowContent(new Imsi());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "imsi",
            "msisdn",
            "imei",
            "imeisv",
            "access-restrict-data",
            "apn-oi",
            "subscription-charging-characteristics",
            "ul-ambr",
            "dl-ambr",
            "rat-freq-selection-priority-id",
            "subscriber-status",
            "hss-realm",
            "hss-host-identity",
            "location-confirm-flag",
            "subscription-type",
            "hlr-number",
            "stn-sr",
            "ics-indicator",
            "mps-eps-priority",
            "mps-cs-priority",
            "vplmn-lipa-allowed",
        };
    }

    /* Access methods for leaf child: "imsi". */

    /**
     * Gets the value for child leaf "imsi".
     * @return The value of the leaf.
     */
    public ImsiT getImsiValue() throws JNCException {
        return (ImsiT)getValue("imsi");
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a JNC type value.
     * @param imsiValue The value to set.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(ImsiT imsiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            imsiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a String value.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(String imsiValue) throws JNCException {
        setImsiValue(new ImsiT(imsiValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imsi" leaf will not have a value.
     */
    public void addImsi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "msisdn". */

    /**
     * Gets the value for child leaf "msisdn".
     * @return The value of the leaf.
     */
    public MsisdnT getMsisdnValue() throws JNCException {
        return (MsisdnT)getValue("msisdn");
    }

    /**
     * Sets the value for child leaf "msisdn",
     * using a JNC type value.
     * @param msisdnValue The value to set.
     * @param msisdnValue used during instantiation.
     */
    public void setMsisdnValue(MsisdnT msisdnValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "msisdn",
            msisdnValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "msisdn",
     * using a String value.
     * @param msisdnValue used during instantiation.
     */
    public void setMsisdnValue(String msisdnValue) throws JNCException {
        setMsisdnValue(new MsisdnT(msisdnValue));
    }

    /**
     * Unsets the value for child leaf "msisdn".
     */
    public void unsetMsisdnValue() throws JNCException {
        delete("msisdn");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "msisdn" leaf will not have a value.
     */
    public void addMsisdn() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "msisdn",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "msisdn" with operation "replace".
     */
    public void markMsisdnReplace() throws JNCException {
        markLeafReplace("msisdn");
    }

    /**
     * Marks the leaf "msisdn" with operation "merge".
     */
    public void markMsisdnMerge() throws JNCException {
        markLeafMerge("msisdn");
    }

    /**
     * Marks the leaf "msisdn" with operation "create".
     */
    public void markMsisdnCreate() throws JNCException {
        markLeafCreate("msisdn");
    }

    /**
     * Marks the leaf "msisdn" with operation "delete".
     */
    public void markMsisdnDelete() throws JNCException {
        markLeafDelete("msisdn");
    }

    /* Access methods for optional leaf child: "imei". */

    /**
     * Gets the value for child leaf "imei".
     * @return The value of the leaf.
     */
    public ImeiT getImeiValue() throws JNCException {
        return (ImeiT)getValue("imei");
    }

    /**
     * Sets the value for child leaf "imei",
     * using a JNC type value.
     * @param imeiValue The value to set.
     * @param imeiValue used during instantiation.
     */
    public void setImeiValue(ImeiT imeiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imei",
            imeiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imei",
     * using a String value.
     * @param imeiValue used during instantiation.
     */
    public void setImeiValue(String imeiValue) throws JNCException {
        setImeiValue(new ImeiT(imeiValue));
    }

    /**
     * Unsets the value for child leaf "imei".
     */
    public void unsetImeiValue() throws JNCException {
        delete("imei");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imei" leaf will not have a value.
     */
    public void addImei() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imei",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "imei" with operation "replace".
     */
    public void markImeiReplace() throws JNCException {
        markLeafReplace("imei");
    }

    /**
     * Marks the leaf "imei" with operation "merge".
     */
    public void markImeiMerge() throws JNCException {
        markLeafMerge("imei");
    }

    /**
     * Marks the leaf "imei" with operation "create".
     */
    public void markImeiCreate() throws JNCException {
        markLeafCreate("imei");
    }

    /**
     * Marks the leaf "imei" with operation "delete".
     */
    public void markImeiDelete() throws JNCException {
        markLeafDelete("imei");
    }

    /* Access methods for optional leaf child: "imeisv". */

    /**
     * Gets the value for child leaf "imeisv".
     * @return The value of the leaf.
     */
    public ImeisvT getImeisvValue() throws JNCException {
        return (ImeisvT)getValue("imeisv");
    }

    /**
     * Sets the value for child leaf "imeisv",
     * using a JNC type value.
     * @param imeisvValue The value to set.
     * @param imeisvValue used during instantiation.
     */
    public void setImeisvValue(ImeisvT imeisvValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imeisv",
            imeisvValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imeisv",
     * using a String value.
     * @param imeisvValue used during instantiation.
     */
    public void setImeisvValue(String imeisvValue) throws JNCException {
        setImeisvValue(new ImeisvT(imeisvValue));
    }

    /**
     * Unsets the value for child leaf "imeisv".
     */
    public void unsetImeisvValue() throws JNCException {
        delete("imeisv");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imeisv" leaf will not have a value.
     */
    public void addImeisv() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imeisv",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "imeisv" with operation "replace".
     */
    public void markImeisvReplace() throws JNCException {
        markLeafReplace("imeisv");
    }

    /**
     * Marks the leaf "imeisv" with operation "merge".
     */
    public void markImeisvMerge() throws JNCException {
        markLeafMerge("imeisv");
    }

    /**
     * Marks the leaf "imeisv" with operation "create".
     */
    public void markImeisvCreate() throws JNCException {
        markLeafCreate("imeisv");
    }

    /**
     * Marks the leaf "imeisv" with operation "delete".
     */
    public void markImeisvDelete() throws JNCException {
        markLeafDelete("imeisv");
    }

    /* Access methods for optional leaf child: "access-restrict-data". */

    /**
     * Gets the value for child leaf "access-restrict-data".
     * @return The value of the leaf.
     */
    public YangString getAccessRestrictDataValue() throws JNCException {
        return (YangString)getValue("access-restrict-data");
    }

    /**
     * Sets the value for child leaf "access-restrict-data",
     * using instance of generated typedef class.
     * @param accessRestrictDataValue The value to set.
     * @param accessRestrictDataValue used during instantiation.
     */
    public void setAccessRestrictDataValue(YangString accessRestrictDataValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "access-restrict-data",
            accessRestrictDataValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "access-restrict-data",
     * using a String value.
     * @param accessRestrictDataValue used during instantiation.
     */
    public void setAccessRestrictDataValue(String accessRestrictDataValue)
            throws JNCException {
        setAccessRestrictDataValue(new YangString(accessRestrictDataValue));
    }

    /**
     * Unsets the value for child leaf "access-restrict-data".
     */
    public void unsetAccessRestrictDataValue() throws JNCException {
        delete("access-restrict-data");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "access-restrict-data" leaf will not have a value.
     */
    public void addAccessRestrictData() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "access-restrict-data",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "access-restrict-data" with operation "replace".
     */
    public void markAccessRestrictDataReplace() throws JNCException {
        markLeafReplace("accessRestrictData");
    }

    /**
     * Marks the leaf "access-restrict-data" with operation "merge".
     */
    public void markAccessRestrictDataMerge() throws JNCException {
        markLeafMerge("accessRestrictData");
    }

    /**
     * Marks the leaf "access-restrict-data" with operation "create".
     */
    public void markAccessRestrictDataCreate() throws JNCException {
        markLeafCreate("accessRestrictData");
    }

    /**
     * Marks the leaf "access-restrict-data" with operation "delete".
     */
    public void markAccessRestrictDataDelete() throws JNCException {
        markLeafDelete("accessRestrictData");
    }

    /* Access methods for optional leaf child: "apn-oi". */

    /**
     * Gets the value for child leaf "apn-oi".
     * @return The value of the leaf.
     */
    public YangString getApnOiValue() throws JNCException {
        return (YangString)getValue("apn-oi");
    }

    /**
     * Sets the value for child leaf "apn-oi",
     * using instance of generated typedef class.
     * @param apnOiValue The value to set.
     * @param apnOiValue used during instantiation.
     */
    public void setApnOiValue(YangString apnOiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-oi",
            apnOiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-oi",
     * using a String value.
     * @param apnOiValue used during instantiation.
     */
    public void setApnOiValue(String apnOiValue) throws JNCException {
        setApnOiValue(new YangString(apnOiValue));
    }

    /**
     * Unsets the value for child leaf "apn-oi".
     */
    public void unsetApnOiValue() throws JNCException {
        delete("apn-oi");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-oi" leaf will not have a value.
     */
    public void addApnOi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-oi",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-oi" with operation "replace".
     */
    public void markApnOiReplace() throws JNCException {
        markLeafReplace("apnOi");
    }

    /**
     * Marks the leaf "apn-oi" with operation "merge".
     */
    public void markApnOiMerge() throws JNCException {
        markLeafMerge("apnOi");
    }

    /**
     * Marks the leaf "apn-oi" with operation "create".
     */
    public void markApnOiCreate() throws JNCException {
        markLeafCreate("apnOi");
    }

    /**
     * Marks the leaf "apn-oi" with operation "delete".
     */
    public void markApnOiDelete() throws JNCException {
        markLeafDelete("apnOi");
    }

    /* Access methods for optional leaf child: "subscription-charging-characteristics". */

    /**
     * Gets the value for child leaf "subscription-charging-characteristics".
     * @return The value of the leaf.
     */
    public YangUInt16 getSubscriptionChargingCharacteristicsValue()
            throws JNCException {
        return (YangUInt16)getValue("subscription-charging-characteristics");
    }

    /**
     * Sets the value for child leaf "subscription-charging-characteristics",
     * using instance of generated typedef class.
     * @param subscriptionChargingCharacteristicsValue The value to set.
     * @param subscriptionChargingCharacteristicsValue used during instantiation.
     */
    public void setSubscriptionChargingCharacteristicsValue(YangUInt16 subscriptionChargingCharacteristicsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "subscription-charging-characteristics",
            subscriptionChargingCharacteristicsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "subscription-charging-characteristics",
     * using Java primitive values.
     * @param subscriptionChargingCharacteristicsValue used during instantiation.
     */
    public void setSubscriptionChargingCharacteristicsValue(int subscriptionChargingCharacteristicsValue)
            throws JNCException {
        setSubscriptionChargingCharacteristicsValue(new YangUInt16(subscriptionChargingCharacteristicsValue));
    }

    /**
     * Sets the value for child leaf "subscription-charging-characteristics",
     * using a String value.
     * @param subscriptionChargingCharacteristicsValue used during instantiation.
     */
    public void setSubscriptionChargingCharacteristicsValue(String subscriptionChargingCharacteristicsValue)
            throws JNCException {
        setSubscriptionChargingCharacteristicsValue(new YangUInt16(subscriptionChargingCharacteristicsValue));
    }

    /**
     * Unsets the value for child leaf "subscription-charging-characteristics".
     */
    public void unsetSubscriptionChargingCharacteristicsValue()
            throws JNCException {
        delete("subscription-charging-characteristics");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "subscription-charging-characteristics" leaf will not have a value.
     */
    public void addSubscriptionChargingCharacteristics() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "subscription-charging-characteristics",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "subscription-charging-characteristics" with operation "replace".
     */
    public void markSubscriptionChargingCharacteristicsReplace()
            throws JNCException {
        markLeafReplace("subscriptionChargingCharacteristics");
    }

    /**
     * Marks the leaf "subscription-charging-characteristics" with operation "merge".
     */
    public void markSubscriptionChargingCharacteristicsMerge()
            throws JNCException {
        markLeafMerge("subscriptionChargingCharacteristics");
    }

    /**
     * Marks the leaf "subscription-charging-characteristics" with operation "create".
     */
    public void markSubscriptionChargingCharacteristicsCreate()
            throws JNCException {
        markLeafCreate("subscriptionChargingCharacteristics");
    }

    /**
     * Marks the leaf "subscription-charging-characteristics" with operation "delete".
     */
    public void markSubscriptionChargingCharacteristicsDelete()
            throws JNCException {
        markLeafDelete("subscriptionChargingCharacteristics");
    }

    /* Access methods for optional leaf child: "ul-ambr". */

    /**
     * Gets the value for child leaf "ul-ambr".
     * @return The value of the leaf.
     */
    public YangUInt32 getUlAmbrValue() throws JNCException {
        return (YangUInt32)getValue("ul-ambr");
    }

    /**
     * Sets the value for child leaf "ul-ambr",
     * using instance of generated typedef class.
     * @param ulAmbrValue The value to set.
     * @param ulAmbrValue used during instantiation.
     */
    public void setUlAmbrValue(YangUInt32 ulAmbrValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ul-ambr",
            ulAmbrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ul-ambr",
     * using Java primitive values.
     * @param ulAmbrValue used during instantiation.
     */
    public void setUlAmbrValue(long ulAmbrValue) throws JNCException {
        setUlAmbrValue(new YangUInt32(ulAmbrValue));
    }

    /**
     * Sets the value for child leaf "ul-ambr",
     * using a String value.
     * @param ulAmbrValue used during instantiation.
     */
    public void setUlAmbrValue(String ulAmbrValue) throws JNCException {
        setUlAmbrValue(new YangUInt32(ulAmbrValue));
    }

    /**
     * Unsets the value for child leaf "ul-ambr".
     */
    public void unsetUlAmbrValue() throws JNCException {
        delete("ul-ambr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ul-ambr" leaf will not have a value.
     */
    public void addUlAmbr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ul-ambr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ul-ambr" with operation "replace".
     */
    public void markUlAmbrReplace() throws JNCException {
        markLeafReplace("ulAmbr");
    }

    /**
     * Marks the leaf "ul-ambr" with operation "merge".
     */
    public void markUlAmbrMerge() throws JNCException {
        markLeafMerge("ulAmbr");
    }

    /**
     * Marks the leaf "ul-ambr" with operation "create".
     */
    public void markUlAmbrCreate() throws JNCException {
        markLeafCreate("ulAmbr");
    }

    /**
     * Marks the leaf "ul-ambr" with operation "delete".
     */
    public void markUlAmbrDelete() throws JNCException {
        markLeafDelete("ulAmbr");
    }

    /* Access methods for optional leaf child: "dl-ambr". */

    /**
     * Gets the value for child leaf "dl-ambr".
     * @return The value of the leaf.
     */
    public YangUInt32 getDlAmbrValue() throws JNCException {
        return (YangUInt32)getValue("dl-ambr");
    }

    /**
     * Sets the value for child leaf "dl-ambr",
     * using instance of generated typedef class.
     * @param dlAmbrValue The value to set.
     * @param dlAmbrValue used during instantiation.
     */
    public void setDlAmbrValue(YangUInt32 dlAmbrValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dl-ambr",
            dlAmbrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dl-ambr",
     * using Java primitive values.
     * @param dlAmbrValue used during instantiation.
     */
    public void setDlAmbrValue(long dlAmbrValue) throws JNCException {
        setDlAmbrValue(new YangUInt32(dlAmbrValue));
    }

    /**
     * Sets the value for child leaf "dl-ambr",
     * using a String value.
     * @param dlAmbrValue used during instantiation.
     */
    public void setDlAmbrValue(String dlAmbrValue) throws JNCException {
        setDlAmbrValue(new YangUInt32(dlAmbrValue));
    }

    /**
     * Unsets the value for child leaf "dl-ambr".
     */
    public void unsetDlAmbrValue() throws JNCException {
        delete("dl-ambr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dl-ambr" leaf will not have a value.
     */
    public void addDlAmbr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dl-ambr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dl-ambr" with operation "replace".
     */
    public void markDlAmbrReplace() throws JNCException {
        markLeafReplace("dlAmbr");
    }

    /**
     * Marks the leaf "dl-ambr" with operation "merge".
     */
    public void markDlAmbrMerge() throws JNCException {
        markLeafMerge("dlAmbr");
    }

    /**
     * Marks the leaf "dl-ambr" with operation "create".
     */
    public void markDlAmbrCreate() throws JNCException {
        markLeafCreate("dlAmbr");
    }

    /**
     * Marks the leaf "dl-ambr" with operation "delete".
     */
    public void markDlAmbrDelete() throws JNCException {
        markLeafDelete("dlAmbr");
    }

    /* Access methods for optional leaf child: "rat-freq-selection-priority-id". */

    /**
     * Gets the value for child leaf "rat-freq-selection-priority-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getRatFreqSelectionPriorityIdValue() throws JNCException {
        return (YangUInt32)getValue("rat-freq-selection-priority-id");
    }

    /**
     * Sets the value for child leaf "rat-freq-selection-priority-id",
     * using instance of generated typedef class.
     * @param ratFreqSelectionPriorityIdValue The value to set.
     * @param ratFreqSelectionPriorityIdValue used during instantiation.
     */
    public void setRatFreqSelectionPriorityIdValue(YangUInt32 ratFreqSelectionPriorityIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rat-freq-selection-priority-id",
            ratFreqSelectionPriorityIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rat-freq-selection-priority-id",
     * using Java primitive values.
     * @param ratFreqSelectionPriorityIdValue used during instantiation.
     */
    public void setRatFreqSelectionPriorityIdValue(long ratFreqSelectionPriorityIdValue)
            throws JNCException {
        setRatFreqSelectionPriorityIdValue(new YangUInt32(ratFreqSelectionPriorityIdValue));
    }

    /**
     * Sets the value for child leaf "rat-freq-selection-priority-id",
     * using a String value.
     * @param ratFreqSelectionPriorityIdValue used during instantiation.
     */
    public void setRatFreqSelectionPriorityIdValue(String ratFreqSelectionPriorityIdValue)
            throws JNCException {
        setRatFreqSelectionPriorityIdValue(new YangUInt32(ratFreqSelectionPriorityIdValue));
    }

    /**
     * Unsets the value for child leaf "rat-freq-selection-priority-id".
     */
    public void unsetRatFreqSelectionPriorityIdValue() throws JNCException {
        delete("rat-freq-selection-priority-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rat-freq-selection-priority-id" leaf will not have a value.
     */
    public void addRatFreqSelectionPriorityId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rat-freq-selection-priority-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rat-freq-selection-priority-id" with operation "replace".
     */
    public void markRatFreqSelectionPriorityIdReplace() throws JNCException {
        markLeafReplace("ratFreqSelectionPriorityId");
    }

    /**
     * Marks the leaf "rat-freq-selection-priority-id" with operation "merge".
     */
    public void markRatFreqSelectionPriorityIdMerge() throws JNCException {
        markLeafMerge("ratFreqSelectionPriorityId");
    }

    /**
     * Marks the leaf "rat-freq-selection-priority-id" with operation "create".
     */
    public void markRatFreqSelectionPriorityIdCreate() throws JNCException {
        markLeafCreate("ratFreqSelectionPriorityId");
    }

    /**
     * Marks the leaf "rat-freq-selection-priority-id" with operation "delete".
     */
    public void markRatFreqSelectionPriorityIdDelete() throws JNCException {
        markLeafDelete("ratFreqSelectionPriorityId");
    }

    /* Access methods for optional leaf child: "subscriber-status". */

    /**
     * Gets the value for child leaf "subscriber-status".
     * @return The value of the leaf.
     */
    public YangString getSubscriberStatusValue() throws JNCException {
        return (YangString)getValue("subscriber-status");
    }

    /**
     * Sets the value for child leaf "subscriber-status",
     * using instance of generated typedef class.
     * @param subscriberStatusValue The value to set.
     * @param subscriberStatusValue used during instantiation.
     */
    public void setSubscriberStatusValue(YangString subscriberStatusValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "subscriber-status",
            subscriberStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "subscriber-status",
     * using a String value.
     * @param subscriberStatusValue used during instantiation.
     */
    public void setSubscriberStatusValue(String subscriberStatusValue)
            throws JNCException {
        setSubscriberStatusValue(new YangString(subscriberStatusValue));
    }

    /**
     * Unsets the value for child leaf "subscriber-status".
     */
    public void unsetSubscriberStatusValue() throws JNCException {
        delete("subscriber-status");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "subscriber-status" leaf will not have a value.
     */
    public void addSubscriberStatus() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "subscriber-status",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "subscriber-status" with operation "replace".
     */
    public void markSubscriberStatusReplace() throws JNCException {
        markLeafReplace("subscriberStatus");
    }

    /**
     * Marks the leaf "subscriber-status" with operation "merge".
     */
    public void markSubscriberStatusMerge() throws JNCException {
        markLeafMerge("subscriberStatus");
    }

    /**
     * Marks the leaf "subscriber-status" with operation "create".
     */
    public void markSubscriberStatusCreate() throws JNCException {
        markLeafCreate("subscriberStatus");
    }

    /**
     * Marks the leaf "subscriber-status" with operation "delete".
     */
    public void markSubscriberStatusDelete() throws JNCException {
        markLeafDelete("subscriberStatus");
    }

    /* Access methods for optional leaf child: "hss-realm". */

    /**
     * Gets the value for child leaf "hss-realm".
     * @return The value of the leaf.
     */
    public YangString getHssRealmValue() throws JNCException {
        return (YangString)getValue("hss-realm");
    }

    /**
     * Sets the value for child leaf "hss-realm",
     * using instance of generated typedef class.
     * @param hssRealmValue The value to set.
     * @param hssRealmValue used during instantiation.
     */
    public void setHssRealmValue(YangString hssRealmValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "hss-realm",
            hssRealmValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "hss-realm",
     * using a String value.
     * @param hssRealmValue used during instantiation.
     */
    public void setHssRealmValue(String hssRealmValue) throws JNCException {
        setHssRealmValue(new YangString(hssRealmValue));
    }

    /**
     * Unsets the value for child leaf "hss-realm".
     */
    public void unsetHssRealmValue() throws JNCException {
        delete("hss-realm");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "hss-realm" leaf will not have a value.
     */
    public void addHssRealm() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "hss-realm",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "hss-realm" with operation "replace".
     */
    public void markHssRealmReplace() throws JNCException {
        markLeafReplace("hssRealm");
    }

    /**
     * Marks the leaf "hss-realm" with operation "merge".
     */
    public void markHssRealmMerge() throws JNCException {
        markLeafMerge("hssRealm");
    }

    /**
     * Marks the leaf "hss-realm" with operation "create".
     */
    public void markHssRealmCreate() throws JNCException {
        markLeafCreate("hssRealm");
    }

    /**
     * Marks the leaf "hss-realm" with operation "delete".
     */
    public void markHssRealmDelete() throws JNCException {
        markLeafDelete("hssRealm");
    }

    /* Access methods for optional leaf child: "hss-host-identity". */

    /**
     * Gets the value for child leaf "hss-host-identity".
     * @return The value of the leaf.
     */
    public YangString getHssHostIdentityValue() throws JNCException {
        return (YangString)getValue("hss-host-identity");
    }

    /**
     * Sets the value for child leaf "hss-host-identity",
     * using instance of generated typedef class.
     * @param hssHostIdentityValue The value to set.
     * @param hssHostIdentityValue used during instantiation.
     */
    public void setHssHostIdentityValue(YangString hssHostIdentityValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "hss-host-identity",
            hssHostIdentityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "hss-host-identity",
     * using a String value.
     * @param hssHostIdentityValue used during instantiation.
     */
    public void setHssHostIdentityValue(String hssHostIdentityValue)
            throws JNCException {
        setHssHostIdentityValue(new YangString(hssHostIdentityValue));
    }

    /**
     * Unsets the value for child leaf "hss-host-identity".
     */
    public void unsetHssHostIdentityValue() throws JNCException {
        delete("hss-host-identity");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "hss-host-identity" leaf will not have a value.
     */
    public void addHssHostIdentity() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "hss-host-identity",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "hss-host-identity" with operation "replace".
     */
    public void markHssHostIdentityReplace() throws JNCException {
        markLeafReplace("hssHostIdentity");
    }

    /**
     * Marks the leaf "hss-host-identity" with operation "merge".
     */
    public void markHssHostIdentityMerge() throws JNCException {
        markLeafMerge("hssHostIdentity");
    }

    /**
     * Marks the leaf "hss-host-identity" with operation "create".
     */
    public void markHssHostIdentityCreate() throws JNCException {
        markLeafCreate("hssHostIdentity");
    }

    /**
     * Marks the leaf "hss-host-identity" with operation "delete".
     */
    public void markHssHostIdentityDelete() throws JNCException {
        markLeafDelete("hssHostIdentity");
    }

    /* Access methods for optional leaf child: "location-confirm-flag". */

    /**
     * Gets the value for child leaf "location-confirm-flag".
     * @return The value of the leaf.
     */
    public YangString getLocationConfirmFlagValue() throws JNCException {
        return (YangString)getValue("location-confirm-flag");
    }

    /**
     * Sets the value for child leaf "location-confirm-flag",
     * using instance of generated typedef class.
     * @param locationConfirmFlagValue The value to set.
     * @param locationConfirmFlagValue used during instantiation.
     */
    public void setLocationConfirmFlagValue(YangString locationConfirmFlagValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location-confirm-flag",
            locationConfirmFlagValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location-confirm-flag",
     * using a String value.
     * @param locationConfirmFlagValue used during instantiation.
     */
    public void setLocationConfirmFlagValue(String locationConfirmFlagValue)
            throws JNCException {
        setLocationConfirmFlagValue(new YangString(locationConfirmFlagValue));
    }

    /**
     * Unsets the value for child leaf "location-confirm-flag".
     */
    public void unsetLocationConfirmFlagValue() throws JNCException {
        delete("location-confirm-flag");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location-confirm-flag" leaf will not have a value.
     */
    public void addLocationConfirmFlag() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location-confirm-flag",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location-confirm-flag" with operation "replace".
     */
    public void markLocationConfirmFlagReplace() throws JNCException {
        markLeafReplace("locationConfirmFlag");
    }

    /**
     * Marks the leaf "location-confirm-flag" with operation "merge".
     */
    public void markLocationConfirmFlagMerge() throws JNCException {
        markLeafMerge("locationConfirmFlag");
    }

    /**
     * Marks the leaf "location-confirm-flag" with operation "create".
     */
    public void markLocationConfirmFlagCreate() throws JNCException {
        markLeafCreate("locationConfirmFlag");
    }

    /**
     * Marks the leaf "location-confirm-flag" with operation "delete".
     */
    public void markLocationConfirmFlagDelete() throws JNCException {
        markLeafDelete("locationConfirmFlag");
    }

    /* Access methods for optional leaf child: "subscription-type". */

    /**
     * Gets the value for child leaf "subscription-type".
     * @return The value of the leaf.
     */
    public YangString getSubscriptionTypeValue() throws JNCException {
        return (YangString)getValue("subscription-type");
    }

    /**
     * Sets the value for child leaf "subscription-type",
     * using instance of generated typedef class.
     * @param subscriptionTypeValue The value to set.
     * @param subscriptionTypeValue used during instantiation.
     */
    public void setSubscriptionTypeValue(YangString subscriptionTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "subscription-type",
            subscriptionTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "subscription-type",
     * using a String value.
     * @param subscriptionTypeValue used during instantiation.
     */
    public void setSubscriptionTypeValue(String subscriptionTypeValue)
            throws JNCException {
        setSubscriptionTypeValue(new YangString(subscriptionTypeValue));
    }

    /**
     * Unsets the value for child leaf "subscription-type".
     */
    public void unsetSubscriptionTypeValue() throws JNCException {
        delete("subscription-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "subscription-type" leaf will not have a value.
     */
    public void addSubscriptionType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "subscription-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "subscription-type" with operation "replace".
     */
    public void markSubscriptionTypeReplace() throws JNCException {
        markLeafReplace("subscriptionType");
    }

    /**
     * Marks the leaf "subscription-type" with operation "merge".
     */
    public void markSubscriptionTypeMerge() throws JNCException {
        markLeafMerge("subscriptionType");
    }

    /**
     * Marks the leaf "subscription-type" with operation "create".
     */
    public void markSubscriptionTypeCreate() throws JNCException {
        markLeafCreate("subscriptionType");
    }

    /**
     * Marks the leaf "subscription-type" with operation "delete".
     */
    public void markSubscriptionTypeDelete() throws JNCException {
        markLeafDelete("subscriptionType");
    }

    /* Access methods for optional leaf child: "hlr-number". */

    /**
     * Gets the value for child leaf "hlr-number".
     * @return The value of the leaf.
     */
    public YangString getHlrNumberValue() throws JNCException {
        return (YangString)getValue("hlr-number");
    }

    /**
     * Sets the value for child leaf "hlr-number",
     * using instance of generated typedef class.
     * @param hlrNumberValue The value to set.
     * @param hlrNumberValue used during instantiation.
     */
    public void setHlrNumberValue(YangString hlrNumberValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "hlr-number",
            hlrNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "hlr-number",
     * using a String value.
     * @param hlrNumberValue used during instantiation.
     */
    public void setHlrNumberValue(String hlrNumberValue) throws JNCException {
        setHlrNumberValue(new YangString(hlrNumberValue));
    }

    /**
     * Unsets the value for child leaf "hlr-number".
     */
    public void unsetHlrNumberValue() throws JNCException {
        delete("hlr-number");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "hlr-number" leaf will not have a value.
     */
    public void addHlrNumber() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "hlr-number",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "hlr-number" with operation "replace".
     */
    public void markHlrNumberReplace() throws JNCException {
        markLeafReplace("hlrNumber");
    }

    /**
     * Marks the leaf "hlr-number" with operation "merge".
     */
    public void markHlrNumberMerge() throws JNCException {
        markLeafMerge("hlrNumber");
    }

    /**
     * Marks the leaf "hlr-number" with operation "create".
     */
    public void markHlrNumberCreate() throws JNCException {
        markLeafCreate("hlrNumber");
    }

    /**
     * Marks the leaf "hlr-number" with operation "delete".
     */
    public void markHlrNumberDelete() throws JNCException {
        markLeafDelete("hlrNumber");
    }

    /* Access methods for optional leaf child: "stn-sr". */

    /**
     * Gets the value for child leaf "stn-sr".
     * @return The value of the leaf.
     */
    public YangString getStnSrValue() throws JNCException {
        return (YangString)getValue("stn-sr");
    }

    /**
     * Sets the value for child leaf "stn-sr",
     * using instance of generated typedef class.
     * @param stnSrValue The value to set.
     * @param stnSrValue used during instantiation.
     */
    public void setStnSrValue(YangString stnSrValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "stn-sr",
            stnSrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "stn-sr",
     * using a String value.
     * @param stnSrValue used during instantiation.
     */
    public void setStnSrValue(String stnSrValue) throws JNCException {
        setStnSrValue(new YangString(stnSrValue));
    }

    /**
     * Unsets the value for child leaf "stn-sr".
     */
    public void unsetStnSrValue() throws JNCException {
        delete("stn-sr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "stn-sr" leaf will not have a value.
     */
    public void addStnSr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "stn-sr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "stn-sr" with operation "replace".
     */
    public void markStnSrReplace() throws JNCException {
        markLeafReplace("stnSr");
    }

    /**
     * Marks the leaf "stn-sr" with operation "merge".
     */
    public void markStnSrMerge() throws JNCException {
        markLeafMerge("stnSr");
    }

    /**
     * Marks the leaf "stn-sr" with operation "create".
     */
    public void markStnSrCreate() throws JNCException {
        markLeafCreate("stnSr");
    }

    /**
     * Marks the leaf "stn-sr" with operation "delete".
     */
    public void markStnSrDelete() throws JNCException {
        markLeafDelete("stnSr");
    }

    /* Access methods for optional leaf child: "ics-indicator". */

    /**
     * Gets the value for child leaf "ics-indicator".
     * @return The value of the leaf.
     */
    public YangString getIcsIndicatorValue() throws JNCException {
        return (YangString)getValue("ics-indicator");
    }

    /**
     * Sets the value for child leaf "ics-indicator",
     * using instance of generated typedef class.
     * @param icsIndicatorValue The value to set.
     * @param icsIndicatorValue used during instantiation.
     */
    public void setIcsIndicatorValue(YangString icsIndicatorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ics-indicator",
            icsIndicatorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ics-indicator",
     * using a String value.
     * @param icsIndicatorValue used during instantiation.
     */
    public void setIcsIndicatorValue(String icsIndicatorValue)
            throws JNCException {
        setIcsIndicatorValue(new YangString(icsIndicatorValue));
    }

    /**
     * Unsets the value for child leaf "ics-indicator".
     */
    public void unsetIcsIndicatorValue() throws JNCException {
        delete("ics-indicator");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ics-indicator" leaf will not have a value.
     */
    public void addIcsIndicator() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ics-indicator",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ics-indicator" with operation "replace".
     */
    public void markIcsIndicatorReplace() throws JNCException {
        markLeafReplace("icsIndicator");
    }

    /**
     * Marks the leaf "ics-indicator" with operation "merge".
     */
    public void markIcsIndicatorMerge() throws JNCException {
        markLeafMerge("icsIndicator");
    }

    /**
     * Marks the leaf "ics-indicator" with operation "create".
     */
    public void markIcsIndicatorCreate() throws JNCException {
        markLeafCreate("icsIndicator");
    }

    /**
     * Marks the leaf "ics-indicator" with operation "delete".
     */
    public void markIcsIndicatorDelete() throws JNCException {
        markLeafDelete("icsIndicator");
    }

    /* Access methods for optional leaf child: "mps-eps-priority". */

    /**
     * Gets the value for child leaf "mps-eps-priority".
     * @return The value of the leaf.
     */
    public YangUInt8 getMpsEpsPriorityValue() throws JNCException {
        return (YangUInt8)getValue("mps-eps-priority");
    }

    /**
     * Sets the value for child leaf "mps-eps-priority",
     * using instance of generated typedef class.
     * @param mpsEpsPriorityValue The value to set.
     * @param mpsEpsPriorityValue used during instantiation.
     */
    public void setMpsEpsPriorityValue(YangUInt8 mpsEpsPriorityValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mps-eps-priority",
            mpsEpsPriorityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mps-eps-priority",
     * using Java primitive values.
     * @param mpsEpsPriorityValue used during instantiation.
     */
    public void setMpsEpsPriorityValue(short mpsEpsPriorityValue)
            throws JNCException {
        setMpsEpsPriorityValue(new YangUInt8(mpsEpsPriorityValue));
    }

    /**
     * Sets the value for child leaf "mps-eps-priority",
     * using a String value.
     * @param mpsEpsPriorityValue used during instantiation.
     */
    public void setMpsEpsPriorityValue(String mpsEpsPriorityValue)
            throws JNCException {
        setMpsEpsPriorityValue(new YangUInt8(mpsEpsPriorityValue));
    }

    /**
     * Unsets the value for child leaf "mps-eps-priority".
     */
    public void unsetMpsEpsPriorityValue() throws JNCException {
        delete("mps-eps-priority");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mps-eps-priority" leaf will not have a value.
     */
    public void addMpsEpsPriority() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mps-eps-priority",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mps-eps-priority" with operation "replace".
     */
    public void markMpsEpsPriorityReplace() throws JNCException {
        markLeafReplace("mpsEpsPriority");
    }

    /**
     * Marks the leaf "mps-eps-priority" with operation "merge".
     */
    public void markMpsEpsPriorityMerge() throws JNCException {
        markLeafMerge("mpsEpsPriority");
    }

    /**
     * Marks the leaf "mps-eps-priority" with operation "create".
     */
    public void markMpsEpsPriorityCreate() throws JNCException {
        markLeafCreate("mpsEpsPriority");
    }

    /**
     * Marks the leaf "mps-eps-priority" with operation "delete".
     */
    public void markMpsEpsPriorityDelete() throws JNCException {
        markLeafDelete("mpsEpsPriority");
    }

    /* Access methods for optional leaf child: "mps-cs-priority". */

    /**
     * Gets the value for child leaf "mps-cs-priority".
     * @return The value of the leaf.
     */
    public YangUInt8 getMpsCsPriorityValue() throws JNCException {
        return (YangUInt8)getValue("mps-cs-priority");
    }

    /**
     * Sets the value for child leaf "mps-cs-priority",
     * using instance of generated typedef class.
     * @param mpsCsPriorityValue The value to set.
     * @param mpsCsPriorityValue used during instantiation.
     */
    public void setMpsCsPriorityValue(YangUInt8 mpsCsPriorityValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mps-cs-priority",
            mpsCsPriorityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mps-cs-priority",
     * using Java primitive values.
     * @param mpsCsPriorityValue used during instantiation.
     */
    public void setMpsCsPriorityValue(short mpsCsPriorityValue)
            throws JNCException {
        setMpsCsPriorityValue(new YangUInt8(mpsCsPriorityValue));
    }

    /**
     * Sets the value for child leaf "mps-cs-priority",
     * using a String value.
     * @param mpsCsPriorityValue used during instantiation.
     */
    public void setMpsCsPriorityValue(String mpsCsPriorityValue)
            throws JNCException {
        setMpsCsPriorityValue(new YangUInt8(mpsCsPriorityValue));
    }

    /**
     * Unsets the value for child leaf "mps-cs-priority".
     */
    public void unsetMpsCsPriorityValue() throws JNCException {
        delete("mps-cs-priority");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mps-cs-priority" leaf will not have a value.
     */
    public void addMpsCsPriority() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mps-cs-priority",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mps-cs-priority" with operation "replace".
     */
    public void markMpsCsPriorityReplace() throws JNCException {
        markLeafReplace("mpsCsPriority");
    }

    /**
     * Marks the leaf "mps-cs-priority" with operation "merge".
     */
    public void markMpsCsPriorityMerge() throws JNCException {
        markLeafMerge("mpsCsPriority");
    }

    /**
     * Marks the leaf "mps-cs-priority" with operation "create".
     */
    public void markMpsCsPriorityCreate() throws JNCException {
        markLeafCreate("mpsCsPriority");
    }

    /**
     * Marks the leaf "mps-cs-priority" with operation "delete".
     */
    public void markMpsCsPriorityDelete() throws JNCException {
        markLeafDelete("mpsCsPriority");
    }

    /* Access methods for optional leaf child: "vplmn-lipa-allowed". */

    /**
     * Gets the value for child leaf "vplmn-lipa-allowed".
     * @return The value of the leaf.
     */
    public YangString getVplmnLipaAllowedValue() throws JNCException {
        return (YangString)getValue("vplmn-lipa-allowed");
    }

    /**
     * Sets the value for child leaf "vplmn-lipa-allowed",
     * using instance of generated typedef class.
     * @param vplmnLipaAllowedValue The value to set.
     * @param vplmnLipaAllowedValue used during instantiation.
     */
    public void setVplmnLipaAllowedValue(YangString vplmnLipaAllowedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vplmn-lipa-allowed",
            vplmnLipaAllowedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vplmn-lipa-allowed",
     * using a String value.
     * @param vplmnLipaAllowedValue used during instantiation.
     */
    public void setVplmnLipaAllowedValue(String vplmnLipaAllowedValue)
            throws JNCException {
        setVplmnLipaAllowedValue(new YangString(vplmnLipaAllowedValue));
    }

    /**
     * Unsets the value for child leaf "vplmn-lipa-allowed".
     */
    public void unsetVplmnLipaAllowedValue() throws JNCException {
        delete("vplmn-lipa-allowed");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vplmn-lipa-allowed" leaf will not have a value.
     */
    public void addVplmnLipaAllowed() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vplmn-lipa-allowed",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vplmn-lipa-allowed" with operation "replace".
     */
    public void markVplmnLipaAllowedReplace() throws JNCException {
        markLeafReplace("vplmnLipaAllowed");
    }

    /**
     * Marks the leaf "vplmn-lipa-allowed" with operation "merge".
     */
    public void markVplmnLipaAllowedMerge() throws JNCException {
        markLeafMerge("vplmnLipaAllowed");
    }

    /**
     * Marks the leaf "vplmn-lipa-allowed" with operation "create".
     */
    public void markVplmnLipaAllowedCreate() throws JNCException {
        markLeafCreate("vplmnLipaAllowed");
    }

    /**
     * Marks the leaf "vplmn-lipa-allowed" with operation "delete".
     */
    public void markVplmnLipaAllowedDelete() throws JNCException {
        markLeafDelete("vplmnLipaAllowed");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
