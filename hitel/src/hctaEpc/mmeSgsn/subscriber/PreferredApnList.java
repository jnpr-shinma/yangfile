/* 
 * @(#)PreferredApnList.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;

import Apn;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/preferred-apn-list"
 * <p>
 * See line 565 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class PreferredApnList extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty PreferredApnList object.
     */
    public PreferredApnList() {
        super(Epc.NAMESPACE, "preferred-apn-list");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public PreferredApnList clone() {
        return (PreferredApnList)cloneContent(new PreferredApnList());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public PreferredApnList cloneShallow() {
        return (PreferredApnList)cloneShallowContent(new PreferredApnList());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "apn",
        };
    }

    /* Access methods for list child: "apn". */

    /**
     * Gets list entry "apn", with specified keys.
     * @param apnNiValue Key argument of child.
     */
    public Apn getApn(YangString apnNiValue) throws JNCException {
        String path = "apn[apnNi='" + apnNiValue + "']";
        return (Apn)searchOne(path);
    }

    /**
     * Gets list entry "apn", with specified keys.
     * The keys are specified as strings.
     * @param apnNiValue Key argument of child.
     */
    public Apn getApn(String apnNiValue) throws JNCException {
        String path = "apn[apnNi='" + apnNiValue + "']";
        return (Apn)searchOne(path);
    }

    /**
     * Iterator method for the list "apn".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator apnIterator() {
        return new ElementChildrenIterator(children, "apn");
    }

    /**
     * Adds list entry "apn", using an existing object.
     * @param apn The object to add.
     * @return The added child.
     */
    public Apn addApn(Apn apn) throws JNCException {
        insertChild(apn, childrenNames());
        return apn;
    }

    /**
     * Adds list entry "apn", with specified keys.
     * @param apnNiValue Key argument of child.
     * @return The added child.
     */
    public Apn addApn(YangString apnNiValue) throws JNCException {
        Apn apn = new Apn(apnNiValue);
        return addApn(apn);
    }

    /**
     * Adds list entry "apn", with specified keys.
     * The keys are specified as strings.
     * @param apnNiValue Key argument of child.
     * @return The added child.
     */
    public Apn addApn(String apnNiValue) throws JNCException {
        Apn apn = new Apn(apnNiValue);
        return addApn(apn);
    }

    /**
     * Adds list entry "apn".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Apn addApn() throws JNCException {
        Apn apn = new Apn();
        insertChild(apn, childrenNames());
        return apn;
    }

    /**
     * Deletes list entry "apn", with specified keys.
     * @param apnNiValue Key argument of child.
     */
    public void deleteApn(YangString apnNiValue) throws JNCException {
        String path = "apn[apnNi='" + apnNiValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "apn", with specified keys.
     * The keys are specified as strings.
     * @param apnNiValue Key argument of child.
     */
    public void deleteApn(String apnNiValue) throws JNCException {
        String path = "apn[apnNi='" + apnNiValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
