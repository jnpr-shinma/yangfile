/* 
 * @(#)SndcpSession.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;
import .hctaEpc.ImsiT;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/sndcp-session"
 * <p>
 * See line 157 in
 * sdCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class SndcpSession extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty SndcpSession object.
     */
    public SndcpSession() {
        super(Epc.NAMESPACE, "sndcp-session");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public SndcpSession clone() {
        return (SndcpSession)cloneContent(new SndcpSession());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public SndcpSession cloneShallow() {
        return (SndcpSession)cloneShallowContent(new SndcpSession());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "imsi",
            "nsapi",
            "service",
            "sd-location",
            "discarded-npdus-from-ms",
            "sn-pdus-to-ms",
            "sn-pdus-from-ms",
            "octets-to-ms",
            "octets-from-ms",
            "octets-to-network",
            "octets-from-network",
            "neg-type-of-header-compression",
            "v42bis-protocol-mode-encoder",
            "v42bis-protocol-mode-decoder",
            "v42bis-compression-direction",
            "v42bis-dictionary",
            "v42bis-max-string-size",
            "last-decode-error",
            "comp-ratio-encoder",
            "comp-ratio-decoder",
            "rfc1144-neg-slots",
            "rfc1144-uncompressed-tcp-sent",
            "rfc1144-compressed-tcp-sent",
            "rfc1144-outbound-searches",
            "rfc1144-outbound-misses",
            "rfc1144-uncompress-tcp-received",
            "rfc1144-compressed-tcp-received",
            "rfc1144-errors-received",
            "rfc1144-tossed-pkts-received",
        };
    }

    /* Access methods for leaf child: "imsi". */

    /**
     * Gets the value for child leaf "imsi".
     * @return The value of the leaf.
     */
    public ImsiT getImsiValue() throws JNCException {
        return (ImsiT)getValue("imsi");
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a JNC type value.
     * @param imsiValue The value to set.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(ImsiT imsiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            imsiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a String value.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(String imsiValue) throws JNCException {
        setImsiValue(new ImsiT(imsiValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imsi" leaf will not have a value.
     */
    public void addImsi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "nsapi". */

    /**
     * Gets the value for child leaf "nsapi".
     * @return The value of the leaf.
     */
    public YangUInt8 getNsapiValue() throws JNCException {
        return (YangUInt8)getValue("nsapi");
    }

    /**
     * Sets the value for child leaf "nsapi",
     * using instance of generated typedef class.
     * @param nsapiValue The value to set.
     * @param nsapiValue used during instantiation.
     */
    public void setNsapiValue(YangUInt8 nsapiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsapi",
            nsapiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsapi",
     * using Java primitive values.
     * @param nsapiValue used during instantiation.
     */
    public void setNsapiValue(short nsapiValue) throws JNCException {
        setNsapiValue(new YangUInt8(nsapiValue));
    }

    /**
     * Sets the value for child leaf "nsapi",
     * using a String value.
     * @param nsapiValue used during instantiation.
     */
    public void setNsapiValue(String nsapiValue) throws JNCException {
        setNsapiValue(new YangUInt8(nsapiValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsapi" leaf will not have a value.
     */
    public void addNsapi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsapi",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "sd-location". */

    /**
     * Gets the value for child leaf "sd-location".
     * @return The value of the leaf.
     */
    public YangString getSdLocationValue() throws JNCException {
        return (YangString)getValue("sd-location");
    }

    /**
     * Sets the value for child leaf "sd-location",
     * using instance of generated typedef class.
     * @param sdLocationValue The value to set.
     * @param sdLocationValue used during instantiation.
     */
    public void setSdLocationValue(YangString sdLocationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sd-location",
            sdLocationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sd-location",
     * using a String value.
     * @param sdLocationValue used during instantiation.
     */
    public void setSdLocationValue(String sdLocationValue) throws JNCException {
        setSdLocationValue(new YangString(sdLocationValue));
    }

    /**
     * Unsets the value for child leaf "sd-location".
     */
    public void unsetSdLocationValue() throws JNCException {
        delete("sd-location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sd-location" leaf will not have a value.
     */
    public void addSdLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sd-location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sd-location" with operation "replace".
     */
    public void markSdLocationReplace() throws JNCException {
        markLeafReplace("sdLocation");
    }

    /**
     * Marks the leaf "sd-location" with operation "merge".
     */
    public void markSdLocationMerge() throws JNCException {
        markLeafMerge("sdLocation");
    }

    /**
     * Marks the leaf "sd-location" with operation "create".
     */
    public void markSdLocationCreate() throws JNCException {
        markLeafCreate("sdLocation");
    }

    /**
     * Marks the leaf "sd-location" with operation "delete".
     */
    public void markSdLocationDelete() throws JNCException {
        markLeafDelete("sdLocation");
    }

    /* Access methods for optional leaf child: "discarded-npdus-from-ms". */

    /**
     * Gets the value for child leaf "discarded-npdus-from-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getDiscardedNpdusFromMsValue() throws JNCException {
        return (YangUInt32)getValue("discarded-npdus-from-ms");
    }

    /**
     * Sets the value for child leaf "discarded-npdus-from-ms",
     * using instance of generated typedef class.
     * @param discardedNpdusFromMsValue The value to set.
     * @param discardedNpdusFromMsValue used during instantiation.
     */
    public void setDiscardedNpdusFromMsValue(YangUInt32 discardedNpdusFromMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "discarded-npdus-from-ms",
            discardedNpdusFromMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "discarded-npdus-from-ms",
     * using Java primitive values.
     * @param discardedNpdusFromMsValue used during instantiation.
     */
    public void setDiscardedNpdusFromMsValue(long discardedNpdusFromMsValue)
            throws JNCException {
        setDiscardedNpdusFromMsValue(new YangUInt32(discardedNpdusFromMsValue));
    }

    /**
     * Sets the value for child leaf "discarded-npdus-from-ms",
     * using a String value.
     * @param discardedNpdusFromMsValue used during instantiation.
     */
    public void setDiscardedNpdusFromMsValue(String discardedNpdusFromMsValue)
            throws JNCException {
        setDiscardedNpdusFromMsValue(new YangUInt32(discardedNpdusFromMsValue));
    }

    /**
     * Unsets the value for child leaf "discarded-npdus-from-ms".
     */
    public void unsetDiscardedNpdusFromMsValue() throws JNCException {
        delete("discarded-npdus-from-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "discarded-npdus-from-ms" leaf will not have a value.
     */
    public void addDiscardedNpdusFromMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "discarded-npdus-from-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "discarded-npdus-from-ms" with operation "replace".
     */
    public void markDiscardedNpdusFromMsReplace() throws JNCException {
        markLeafReplace("discardedNpdusFromMs");
    }

    /**
     * Marks the leaf "discarded-npdus-from-ms" with operation "merge".
     */
    public void markDiscardedNpdusFromMsMerge() throws JNCException {
        markLeafMerge("discardedNpdusFromMs");
    }

    /**
     * Marks the leaf "discarded-npdus-from-ms" with operation "create".
     */
    public void markDiscardedNpdusFromMsCreate() throws JNCException {
        markLeafCreate("discardedNpdusFromMs");
    }

    /**
     * Marks the leaf "discarded-npdus-from-ms" with operation "delete".
     */
    public void markDiscardedNpdusFromMsDelete() throws JNCException {
        markLeafDelete("discardedNpdusFromMs");
    }

    /* Access methods for optional leaf child: "sn-pdus-to-ms". */

    /**
     * Gets the value for child leaf "sn-pdus-to-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getSnPdusToMsValue() throws JNCException {
        return (YangUInt32)getValue("sn-pdus-to-ms");
    }

    /**
     * Sets the value for child leaf "sn-pdus-to-ms",
     * using instance of generated typedef class.
     * @param snPdusToMsValue The value to set.
     * @param snPdusToMsValue used during instantiation.
     */
    public void setSnPdusToMsValue(YangUInt32 snPdusToMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sn-pdus-to-ms",
            snPdusToMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sn-pdus-to-ms",
     * using Java primitive values.
     * @param snPdusToMsValue used during instantiation.
     */
    public void setSnPdusToMsValue(long snPdusToMsValue) throws JNCException {
        setSnPdusToMsValue(new YangUInt32(snPdusToMsValue));
    }

    /**
     * Sets the value for child leaf "sn-pdus-to-ms",
     * using a String value.
     * @param snPdusToMsValue used during instantiation.
     */
    public void setSnPdusToMsValue(String snPdusToMsValue) throws JNCException {
        setSnPdusToMsValue(new YangUInt32(snPdusToMsValue));
    }

    /**
     * Unsets the value for child leaf "sn-pdus-to-ms".
     */
    public void unsetSnPdusToMsValue() throws JNCException {
        delete("sn-pdus-to-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sn-pdus-to-ms" leaf will not have a value.
     */
    public void addSnPdusToMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sn-pdus-to-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sn-pdus-to-ms" with operation "replace".
     */
    public void markSnPdusToMsReplace() throws JNCException {
        markLeafReplace("snPdusToMs");
    }

    /**
     * Marks the leaf "sn-pdus-to-ms" with operation "merge".
     */
    public void markSnPdusToMsMerge() throws JNCException {
        markLeafMerge("snPdusToMs");
    }

    /**
     * Marks the leaf "sn-pdus-to-ms" with operation "create".
     */
    public void markSnPdusToMsCreate() throws JNCException {
        markLeafCreate("snPdusToMs");
    }

    /**
     * Marks the leaf "sn-pdus-to-ms" with operation "delete".
     */
    public void markSnPdusToMsDelete() throws JNCException {
        markLeafDelete("snPdusToMs");
    }

    /* Access methods for optional leaf child: "sn-pdus-from-ms". */

    /**
     * Gets the value for child leaf "sn-pdus-from-ms".
     * @return The value of the leaf.
     */
    public YangUInt32 getSnPdusFromMsValue() throws JNCException {
        return (YangUInt32)getValue("sn-pdus-from-ms");
    }

    /**
     * Sets the value for child leaf "sn-pdus-from-ms",
     * using instance of generated typedef class.
     * @param snPdusFromMsValue The value to set.
     * @param snPdusFromMsValue used during instantiation.
     */
    public void setSnPdusFromMsValue(YangUInt32 snPdusFromMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sn-pdus-from-ms",
            snPdusFromMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sn-pdus-from-ms",
     * using Java primitive values.
     * @param snPdusFromMsValue used during instantiation.
     */
    public void setSnPdusFromMsValue(long snPdusFromMsValue)
            throws JNCException {
        setSnPdusFromMsValue(new YangUInt32(snPdusFromMsValue));
    }

    /**
     * Sets the value for child leaf "sn-pdus-from-ms",
     * using a String value.
     * @param snPdusFromMsValue used during instantiation.
     */
    public void setSnPdusFromMsValue(String snPdusFromMsValue)
            throws JNCException {
        setSnPdusFromMsValue(new YangUInt32(snPdusFromMsValue));
    }

    /**
     * Unsets the value for child leaf "sn-pdus-from-ms".
     */
    public void unsetSnPdusFromMsValue() throws JNCException {
        delete("sn-pdus-from-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sn-pdus-from-ms" leaf will not have a value.
     */
    public void addSnPdusFromMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sn-pdus-from-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sn-pdus-from-ms" with operation "replace".
     */
    public void markSnPdusFromMsReplace() throws JNCException {
        markLeafReplace("snPdusFromMs");
    }

    /**
     * Marks the leaf "sn-pdus-from-ms" with operation "merge".
     */
    public void markSnPdusFromMsMerge() throws JNCException {
        markLeafMerge("snPdusFromMs");
    }

    /**
     * Marks the leaf "sn-pdus-from-ms" with operation "create".
     */
    public void markSnPdusFromMsCreate() throws JNCException {
        markLeafCreate("snPdusFromMs");
    }

    /**
     * Marks the leaf "sn-pdus-from-ms" with operation "delete".
     */
    public void markSnPdusFromMsDelete() throws JNCException {
        markLeafDelete("snPdusFromMs");
    }

    /* Access methods for optional leaf child: "octets-to-ms". */

    /**
     * Gets the value for child leaf "octets-to-ms".
     * @return The value of the leaf.
     */
    public YangString getOctetsToMsValue() throws JNCException {
        return (YangString)getValue("octets-to-ms");
    }

    /**
     * Sets the value for child leaf "octets-to-ms",
     * using instance of generated typedef class.
     * @param octetsToMsValue The value to set.
     * @param octetsToMsValue used during instantiation.
     */
    public void setOctetsToMsValue(YangString octetsToMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "octets-to-ms",
            octetsToMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "octets-to-ms",
     * using a String value.
     * @param octetsToMsValue used during instantiation.
     */
    public void setOctetsToMsValue(String octetsToMsValue) throws JNCException {
        setOctetsToMsValue(new YangString(octetsToMsValue));
    }

    /**
     * Unsets the value for child leaf "octets-to-ms".
     */
    public void unsetOctetsToMsValue() throws JNCException {
        delete("octets-to-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "octets-to-ms" leaf will not have a value.
     */
    public void addOctetsToMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "octets-to-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "octets-to-ms" with operation "replace".
     */
    public void markOctetsToMsReplace() throws JNCException {
        markLeafReplace("octetsToMs");
    }

    /**
     * Marks the leaf "octets-to-ms" with operation "merge".
     */
    public void markOctetsToMsMerge() throws JNCException {
        markLeafMerge("octetsToMs");
    }

    /**
     * Marks the leaf "octets-to-ms" with operation "create".
     */
    public void markOctetsToMsCreate() throws JNCException {
        markLeafCreate("octetsToMs");
    }

    /**
     * Marks the leaf "octets-to-ms" with operation "delete".
     */
    public void markOctetsToMsDelete() throws JNCException {
        markLeafDelete("octetsToMs");
    }

    /* Access methods for optional leaf child: "octets-from-ms". */

    /**
     * Gets the value for child leaf "octets-from-ms".
     * @return The value of the leaf.
     */
    public YangString getOctetsFromMsValue() throws JNCException {
        return (YangString)getValue("octets-from-ms");
    }

    /**
     * Sets the value for child leaf "octets-from-ms",
     * using instance of generated typedef class.
     * @param octetsFromMsValue The value to set.
     * @param octetsFromMsValue used during instantiation.
     */
    public void setOctetsFromMsValue(YangString octetsFromMsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "octets-from-ms",
            octetsFromMsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "octets-from-ms",
     * using a String value.
     * @param octetsFromMsValue used during instantiation.
     */
    public void setOctetsFromMsValue(String octetsFromMsValue)
            throws JNCException {
        setOctetsFromMsValue(new YangString(octetsFromMsValue));
    }

    /**
     * Unsets the value for child leaf "octets-from-ms".
     */
    public void unsetOctetsFromMsValue() throws JNCException {
        delete("octets-from-ms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "octets-from-ms" leaf will not have a value.
     */
    public void addOctetsFromMs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "octets-from-ms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "octets-from-ms" with operation "replace".
     */
    public void markOctetsFromMsReplace() throws JNCException {
        markLeafReplace("octetsFromMs");
    }

    /**
     * Marks the leaf "octets-from-ms" with operation "merge".
     */
    public void markOctetsFromMsMerge() throws JNCException {
        markLeafMerge("octetsFromMs");
    }

    /**
     * Marks the leaf "octets-from-ms" with operation "create".
     */
    public void markOctetsFromMsCreate() throws JNCException {
        markLeafCreate("octetsFromMs");
    }

    /**
     * Marks the leaf "octets-from-ms" with operation "delete".
     */
    public void markOctetsFromMsDelete() throws JNCException {
        markLeafDelete("octetsFromMs");
    }

    /* Access methods for optional leaf child: "octets-to-network". */

    /**
     * Gets the value for child leaf "octets-to-network".
     * @return The value of the leaf.
     */
    public YangString getOctetsToNetworkValue() throws JNCException {
        return (YangString)getValue("octets-to-network");
    }

    /**
     * Sets the value for child leaf "octets-to-network",
     * using instance of generated typedef class.
     * @param octetsToNetworkValue The value to set.
     * @param octetsToNetworkValue used during instantiation.
     */
    public void setOctetsToNetworkValue(YangString octetsToNetworkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "octets-to-network",
            octetsToNetworkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "octets-to-network",
     * using a String value.
     * @param octetsToNetworkValue used during instantiation.
     */
    public void setOctetsToNetworkValue(String octetsToNetworkValue)
            throws JNCException {
        setOctetsToNetworkValue(new YangString(octetsToNetworkValue));
    }

    /**
     * Unsets the value for child leaf "octets-to-network".
     */
    public void unsetOctetsToNetworkValue() throws JNCException {
        delete("octets-to-network");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "octets-to-network" leaf will not have a value.
     */
    public void addOctetsToNetwork() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "octets-to-network",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "octets-to-network" with operation "replace".
     */
    public void markOctetsToNetworkReplace() throws JNCException {
        markLeafReplace("octetsToNetwork");
    }

    /**
     * Marks the leaf "octets-to-network" with operation "merge".
     */
    public void markOctetsToNetworkMerge() throws JNCException {
        markLeafMerge("octetsToNetwork");
    }

    /**
     * Marks the leaf "octets-to-network" with operation "create".
     */
    public void markOctetsToNetworkCreate() throws JNCException {
        markLeafCreate("octetsToNetwork");
    }

    /**
     * Marks the leaf "octets-to-network" with operation "delete".
     */
    public void markOctetsToNetworkDelete() throws JNCException {
        markLeafDelete("octetsToNetwork");
    }

    /* Access methods for optional leaf child: "octets-from-network". */

    /**
     * Gets the value for child leaf "octets-from-network".
     * @return The value of the leaf.
     */
    public YangString getOctetsFromNetworkValue() throws JNCException {
        return (YangString)getValue("octets-from-network");
    }

    /**
     * Sets the value for child leaf "octets-from-network",
     * using instance of generated typedef class.
     * @param octetsFromNetworkValue The value to set.
     * @param octetsFromNetworkValue used during instantiation.
     */
    public void setOctetsFromNetworkValue(YangString octetsFromNetworkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "octets-from-network",
            octetsFromNetworkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "octets-from-network",
     * using a String value.
     * @param octetsFromNetworkValue used during instantiation.
     */
    public void setOctetsFromNetworkValue(String octetsFromNetworkValue)
            throws JNCException {
        setOctetsFromNetworkValue(new YangString(octetsFromNetworkValue));
    }

    /**
     * Unsets the value for child leaf "octets-from-network".
     */
    public void unsetOctetsFromNetworkValue() throws JNCException {
        delete("octets-from-network");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "octets-from-network" leaf will not have a value.
     */
    public void addOctetsFromNetwork() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "octets-from-network",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "octets-from-network" with operation "replace".
     */
    public void markOctetsFromNetworkReplace() throws JNCException {
        markLeafReplace("octetsFromNetwork");
    }

    /**
     * Marks the leaf "octets-from-network" with operation "merge".
     */
    public void markOctetsFromNetworkMerge() throws JNCException {
        markLeafMerge("octetsFromNetwork");
    }

    /**
     * Marks the leaf "octets-from-network" with operation "create".
     */
    public void markOctetsFromNetworkCreate() throws JNCException {
        markLeafCreate("octetsFromNetwork");
    }

    /**
     * Marks the leaf "octets-from-network" with operation "delete".
     */
    public void markOctetsFromNetworkDelete() throws JNCException {
        markLeafDelete("octetsFromNetwork");
    }

    /* Access methods for optional leaf child: "neg-type-of-header-compression". */

    /**
     * Gets the value for child leaf "neg-type-of-header-compression".
     * @return The value of the leaf.
     */
    public YangString getNegTypeOfHeaderCompressionValue() throws JNCException {
        return (YangString)getValue("neg-type-of-header-compression");
    }

    /**
     * Sets the value for child leaf "neg-type-of-header-compression",
     * using instance of generated typedef class.
     * @param negTypeOfHeaderCompressionValue The value to set.
     * @param negTypeOfHeaderCompressionValue used during instantiation.
     */
    public void setNegTypeOfHeaderCompressionValue(YangString negTypeOfHeaderCompressionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "neg-type-of-header-compression",
            negTypeOfHeaderCompressionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "neg-type-of-header-compression",
     * using a String value.
     * @param negTypeOfHeaderCompressionValue used during instantiation.
     */
    public void setNegTypeOfHeaderCompressionValue(String negTypeOfHeaderCompressionValue)
            throws JNCException {
        setNegTypeOfHeaderCompressionValue(new YangString(negTypeOfHeaderCompressionValue));
    }

    /**
     * Unsets the value for child leaf "neg-type-of-header-compression".
     */
    public void unsetNegTypeOfHeaderCompressionValue() throws JNCException {
        delete("neg-type-of-header-compression");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "neg-type-of-header-compression" leaf will not have a value.
     */
    public void addNegTypeOfHeaderCompression() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "neg-type-of-header-compression",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "neg-type-of-header-compression" with operation "replace".
     */
    public void markNegTypeOfHeaderCompressionReplace() throws JNCException {
        markLeafReplace("negTypeOfHeaderCompression");
    }

    /**
     * Marks the leaf "neg-type-of-header-compression" with operation "merge".
     */
    public void markNegTypeOfHeaderCompressionMerge() throws JNCException {
        markLeafMerge("negTypeOfHeaderCompression");
    }

    /**
     * Marks the leaf "neg-type-of-header-compression" with operation "create".
     */
    public void markNegTypeOfHeaderCompressionCreate() throws JNCException {
        markLeafCreate("negTypeOfHeaderCompression");
    }

    /**
     * Marks the leaf "neg-type-of-header-compression" with operation "delete".
     */
    public void markNegTypeOfHeaderCompressionDelete() throws JNCException {
        markLeafDelete("negTypeOfHeaderCompression");
    }

    /* Access methods for optional leaf child: "v42bis-protocol-mode-encoder". */

    /**
     * Gets the value for child leaf "v42bis-protocol-mode-encoder".
     * @return The value of the leaf.
     */
    public YangString getV42bisProtocolModeEncoderValue() throws JNCException {
        return (YangString)getValue("v42bis-protocol-mode-encoder");
    }

    /**
     * Sets the value for child leaf "v42bis-protocol-mode-encoder",
     * using instance of generated typedef class.
     * @param v42bisProtocolModeEncoderValue The value to set.
     * @param v42bisProtocolModeEncoderValue used during instantiation.
     */
    public void setV42bisProtocolModeEncoderValue(YangString v42bisProtocolModeEncoderValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-protocol-mode-encoder",
            v42bisProtocolModeEncoderValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "v42bis-protocol-mode-encoder",
     * using a String value.
     * @param v42bisProtocolModeEncoderValue used during instantiation.
     */
    public void setV42bisProtocolModeEncoderValue(String v42bisProtocolModeEncoderValue)
            throws JNCException {
        setV42bisProtocolModeEncoderValue(new YangString(v42bisProtocolModeEncoderValue));
    }

    /**
     * Unsets the value for child leaf "v42bis-protocol-mode-encoder".
     */
    public void unsetV42bisProtocolModeEncoderValue() throws JNCException {
        delete("v42bis-protocol-mode-encoder");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "v42bis-protocol-mode-encoder" leaf will not have a value.
     */
    public void addV42bisProtocolModeEncoder() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-protocol-mode-encoder",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "v42bis-protocol-mode-encoder" with operation "replace".
     */
    public void markV42bisProtocolModeEncoderReplace() throws JNCException {
        markLeafReplace("v42bisProtocolModeEncoder");
    }

    /**
     * Marks the leaf "v42bis-protocol-mode-encoder" with operation "merge".
     */
    public void markV42bisProtocolModeEncoderMerge() throws JNCException {
        markLeafMerge("v42bisProtocolModeEncoder");
    }

    /**
     * Marks the leaf "v42bis-protocol-mode-encoder" with operation "create".
     */
    public void markV42bisProtocolModeEncoderCreate() throws JNCException {
        markLeafCreate("v42bisProtocolModeEncoder");
    }

    /**
     * Marks the leaf "v42bis-protocol-mode-encoder" with operation "delete".
     */
    public void markV42bisProtocolModeEncoderDelete() throws JNCException {
        markLeafDelete("v42bisProtocolModeEncoder");
    }

    /* Access methods for optional leaf child: "v42bis-protocol-mode-decoder". */

    /**
     * Gets the value for child leaf "v42bis-protocol-mode-decoder".
     * @return The value of the leaf.
     */
    public YangString getV42bisProtocolModeDecoderValue() throws JNCException {
        return (YangString)getValue("v42bis-protocol-mode-decoder");
    }

    /**
     * Sets the value for child leaf "v42bis-protocol-mode-decoder",
     * using instance of generated typedef class.
     * @param v42bisProtocolModeDecoderValue The value to set.
     * @param v42bisProtocolModeDecoderValue used during instantiation.
     */
    public void setV42bisProtocolModeDecoderValue(YangString v42bisProtocolModeDecoderValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-protocol-mode-decoder",
            v42bisProtocolModeDecoderValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "v42bis-protocol-mode-decoder",
     * using a String value.
     * @param v42bisProtocolModeDecoderValue used during instantiation.
     */
    public void setV42bisProtocolModeDecoderValue(String v42bisProtocolModeDecoderValue)
            throws JNCException {
        setV42bisProtocolModeDecoderValue(new YangString(v42bisProtocolModeDecoderValue));
    }

    /**
     * Unsets the value for child leaf "v42bis-protocol-mode-decoder".
     */
    public void unsetV42bisProtocolModeDecoderValue() throws JNCException {
        delete("v42bis-protocol-mode-decoder");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "v42bis-protocol-mode-decoder" leaf will not have a value.
     */
    public void addV42bisProtocolModeDecoder() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-protocol-mode-decoder",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "v42bis-protocol-mode-decoder" with operation "replace".
     */
    public void markV42bisProtocolModeDecoderReplace() throws JNCException {
        markLeafReplace("v42bisProtocolModeDecoder");
    }

    /**
     * Marks the leaf "v42bis-protocol-mode-decoder" with operation "merge".
     */
    public void markV42bisProtocolModeDecoderMerge() throws JNCException {
        markLeafMerge("v42bisProtocolModeDecoder");
    }

    /**
     * Marks the leaf "v42bis-protocol-mode-decoder" with operation "create".
     */
    public void markV42bisProtocolModeDecoderCreate() throws JNCException {
        markLeafCreate("v42bisProtocolModeDecoder");
    }

    /**
     * Marks the leaf "v42bis-protocol-mode-decoder" with operation "delete".
     */
    public void markV42bisProtocolModeDecoderDelete() throws JNCException {
        markLeafDelete("v42bisProtocolModeDecoder");
    }

    /* Access methods for optional leaf child: "v42bis-compression-direction". */

    /**
     * Gets the value for child leaf "v42bis-compression-direction".
     * @return The value of the leaf.
     */
    public YangString getV42bisCompressionDirectionValue() throws JNCException {
        return (YangString)getValue("v42bis-compression-direction");
    }

    /**
     * Sets the value for child leaf "v42bis-compression-direction",
     * using instance of generated typedef class.
     * @param v42bisCompressionDirectionValue The value to set.
     * @param v42bisCompressionDirectionValue used during instantiation.
     */
    public void setV42bisCompressionDirectionValue(YangString v42bisCompressionDirectionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-compression-direction",
            v42bisCompressionDirectionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "v42bis-compression-direction",
     * using a String value.
     * @param v42bisCompressionDirectionValue used during instantiation.
     */
    public void setV42bisCompressionDirectionValue(String v42bisCompressionDirectionValue)
            throws JNCException {
        setV42bisCompressionDirectionValue(new YangString(v42bisCompressionDirectionValue));
    }

    /**
     * Unsets the value for child leaf "v42bis-compression-direction".
     */
    public void unsetV42bisCompressionDirectionValue() throws JNCException {
        delete("v42bis-compression-direction");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "v42bis-compression-direction" leaf will not have a value.
     */
    public void addV42bisCompressionDirection() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-compression-direction",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "v42bis-compression-direction" with operation "replace".
     */
    public void markV42bisCompressionDirectionReplace() throws JNCException {
        markLeafReplace("v42bisCompressionDirection");
    }

    /**
     * Marks the leaf "v42bis-compression-direction" with operation "merge".
     */
    public void markV42bisCompressionDirectionMerge() throws JNCException {
        markLeafMerge("v42bisCompressionDirection");
    }

    /**
     * Marks the leaf "v42bis-compression-direction" with operation "create".
     */
    public void markV42bisCompressionDirectionCreate() throws JNCException {
        markLeafCreate("v42bisCompressionDirection");
    }

    /**
     * Marks the leaf "v42bis-compression-direction" with operation "delete".
     */
    public void markV42bisCompressionDirectionDelete() throws JNCException {
        markLeafDelete("v42bisCompressionDirection");
    }

    /* Access methods for optional leaf child: "v42bis-dictionary". */

    /**
     * Gets the value for child leaf "v42bis-dictionary".
     * @return The value of the leaf.
     */
    public YangUInt32 getV42bisDictionaryValue() throws JNCException {
        return (YangUInt32)getValue("v42bis-dictionary");
    }

    /**
     * Sets the value for child leaf "v42bis-dictionary",
     * using instance of generated typedef class.
     * @param v42bisDictionaryValue The value to set.
     * @param v42bisDictionaryValue used during instantiation.
     */
    public void setV42bisDictionaryValue(YangUInt32 v42bisDictionaryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-dictionary",
            v42bisDictionaryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "v42bis-dictionary",
     * using Java primitive values.
     * @param v42bisDictionaryValue used during instantiation.
     */
    public void setV42bisDictionaryValue(long v42bisDictionaryValue)
            throws JNCException {
        setV42bisDictionaryValue(new YangUInt32(v42bisDictionaryValue));
    }

    /**
     * Sets the value for child leaf "v42bis-dictionary",
     * using a String value.
     * @param v42bisDictionaryValue used during instantiation.
     */
    public void setV42bisDictionaryValue(String v42bisDictionaryValue)
            throws JNCException {
        setV42bisDictionaryValue(new YangUInt32(v42bisDictionaryValue));
    }

    /**
     * Unsets the value for child leaf "v42bis-dictionary".
     */
    public void unsetV42bisDictionaryValue() throws JNCException {
        delete("v42bis-dictionary");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "v42bis-dictionary" leaf will not have a value.
     */
    public void addV42bisDictionary() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-dictionary",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "v42bis-dictionary" with operation "replace".
     */
    public void markV42bisDictionaryReplace() throws JNCException {
        markLeafReplace("v42bisDictionary");
    }

    /**
     * Marks the leaf "v42bis-dictionary" with operation "merge".
     */
    public void markV42bisDictionaryMerge() throws JNCException {
        markLeafMerge("v42bisDictionary");
    }

    /**
     * Marks the leaf "v42bis-dictionary" with operation "create".
     */
    public void markV42bisDictionaryCreate() throws JNCException {
        markLeafCreate("v42bisDictionary");
    }

    /**
     * Marks the leaf "v42bis-dictionary" with operation "delete".
     */
    public void markV42bisDictionaryDelete() throws JNCException {
        markLeafDelete("v42bisDictionary");
    }

    /* Access methods for optional leaf child: "v42bis-max-string-size". */

    /**
     * Gets the value for child leaf "v42bis-max-string-size".
     * @return The value of the leaf.
     */
    public YangUInt32 getV42bisMaxStringSizeValue() throws JNCException {
        return (YangUInt32)getValue("v42bis-max-string-size");
    }

    /**
     * Sets the value for child leaf "v42bis-max-string-size",
     * using instance of generated typedef class.
     * @param v42bisMaxStringSizeValue The value to set.
     * @param v42bisMaxStringSizeValue used during instantiation.
     */
    public void setV42bisMaxStringSizeValue(YangUInt32 v42bisMaxStringSizeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-max-string-size",
            v42bisMaxStringSizeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "v42bis-max-string-size",
     * using Java primitive values.
     * @param v42bisMaxStringSizeValue used during instantiation.
     */
    public void setV42bisMaxStringSizeValue(long v42bisMaxStringSizeValue)
            throws JNCException {
        setV42bisMaxStringSizeValue(new YangUInt32(v42bisMaxStringSizeValue));
    }

    /**
     * Sets the value for child leaf "v42bis-max-string-size",
     * using a String value.
     * @param v42bisMaxStringSizeValue used during instantiation.
     */
    public void setV42bisMaxStringSizeValue(String v42bisMaxStringSizeValue)
            throws JNCException {
        setV42bisMaxStringSizeValue(new YangUInt32(v42bisMaxStringSizeValue));
    }

    /**
     * Unsets the value for child leaf "v42bis-max-string-size".
     */
    public void unsetV42bisMaxStringSizeValue() throws JNCException {
        delete("v42bis-max-string-size");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "v42bis-max-string-size" leaf will not have a value.
     */
    public void addV42bisMaxStringSize() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-max-string-size",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "v42bis-max-string-size" with operation "replace".
     */
    public void markV42bisMaxStringSizeReplace() throws JNCException {
        markLeafReplace("v42bisMaxStringSize");
    }

    /**
     * Marks the leaf "v42bis-max-string-size" with operation "merge".
     */
    public void markV42bisMaxStringSizeMerge() throws JNCException {
        markLeafMerge("v42bisMaxStringSize");
    }

    /**
     * Marks the leaf "v42bis-max-string-size" with operation "create".
     */
    public void markV42bisMaxStringSizeCreate() throws JNCException {
        markLeafCreate("v42bisMaxStringSize");
    }

    /**
     * Marks the leaf "v42bis-max-string-size" with operation "delete".
     */
    public void markV42bisMaxStringSizeDelete() throws JNCException {
        markLeafDelete("v42bisMaxStringSize");
    }

    /* Access methods for optional leaf child: "last-decode-error". */

    /**
     * Gets the value for child leaf "last-decode-error".
     * @return The value of the leaf.
     */
    public YangString getLastDecodeErrorValue() throws JNCException {
        return (YangString)getValue("last-decode-error");
    }

    /**
     * Sets the value for child leaf "last-decode-error",
     * using instance of generated typedef class.
     * @param lastDecodeErrorValue The value to set.
     * @param lastDecodeErrorValue used during instantiation.
     */
    public void setLastDecodeErrorValue(YangString lastDecodeErrorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "last-decode-error",
            lastDecodeErrorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "last-decode-error",
     * using a String value.
     * @param lastDecodeErrorValue used during instantiation.
     */
    public void setLastDecodeErrorValue(String lastDecodeErrorValue)
            throws JNCException {
        setLastDecodeErrorValue(new YangString(lastDecodeErrorValue));
    }

    /**
     * Unsets the value for child leaf "last-decode-error".
     */
    public void unsetLastDecodeErrorValue() throws JNCException {
        delete("last-decode-error");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "last-decode-error" leaf will not have a value.
     */
    public void addLastDecodeError() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "last-decode-error",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "last-decode-error" with operation "replace".
     */
    public void markLastDecodeErrorReplace() throws JNCException {
        markLeafReplace("lastDecodeError");
    }

    /**
     * Marks the leaf "last-decode-error" with operation "merge".
     */
    public void markLastDecodeErrorMerge() throws JNCException {
        markLeafMerge("lastDecodeError");
    }

    /**
     * Marks the leaf "last-decode-error" with operation "create".
     */
    public void markLastDecodeErrorCreate() throws JNCException {
        markLeafCreate("lastDecodeError");
    }

    /**
     * Marks the leaf "last-decode-error" with operation "delete".
     */
    public void markLastDecodeErrorDelete() throws JNCException {
        markLeafDelete("lastDecodeError");
    }

    /* Access methods for optional leaf child: "comp-ratio-encoder". */

    /**
     * Gets the value for child leaf "comp-ratio-encoder".
     * @return The value of the leaf.
     */
    public YangString getCompRatioEncoderValue() throws JNCException {
        return (YangString)getValue("comp-ratio-encoder");
    }

    /**
     * Sets the value for child leaf "comp-ratio-encoder",
     * using instance of generated typedef class.
     * @param compRatioEncoderValue The value to set.
     * @param compRatioEncoderValue used during instantiation.
     */
    public void setCompRatioEncoderValue(YangString compRatioEncoderValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "comp-ratio-encoder",
            compRatioEncoderValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "comp-ratio-encoder",
     * using a String value.
     * @param compRatioEncoderValue used during instantiation.
     */
    public void setCompRatioEncoderValue(String compRatioEncoderValue)
            throws JNCException {
        setCompRatioEncoderValue(new YangString(compRatioEncoderValue));
    }

    /**
     * Unsets the value for child leaf "comp-ratio-encoder".
     */
    public void unsetCompRatioEncoderValue() throws JNCException {
        delete("comp-ratio-encoder");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "comp-ratio-encoder" leaf will not have a value.
     */
    public void addCompRatioEncoder() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "comp-ratio-encoder",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "comp-ratio-encoder" with operation "replace".
     */
    public void markCompRatioEncoderReplace() throws JNCException {
        markLeafReplace("compRatioEncoder");
    }

    /**
     * Marks the leaf "comp-ratio-encoder" with operation "merge".
     */
    public void markCompRatioEncoderMerge() throws JNCException {
        markLeafMerge("compRatioEncoder");
    }

    /**
     * Marks the leaf "comp-ratio-encoder" with operation "create".
     */
    public void markCompRatioEncoderCreate() throws JNCException {
        markLeafCreate("compRatioEncoder");
    }

    /**
     * Marks the leaf "comp-ratio-encoder" with operation "delete".
     */
    public void markCompRatioEncoderDelete() throws JNCException {
        markLeafDelete("compRatioEncoder");
    }

    /* Access methods for optional leaf child: "comp-ratio-decoder". */

    /**
     * Gets the value for child leaf "comp-ratio-decoder".
     * @return The value of the leaf.
     */
    public YangString getCompRatioDecoderValue() throws JNCException {
        return (YangString)getValue("comp-ratio-decoder");
    }

    /**
     * Sets the value for child leaf "comp-ratio-decoder",
     * using instance of generated typedef class.
     * @param compRatioDecoderValue The value to set.
     * @param compRatioDecoderValue used during instantiation.
     */
    public void setCompRatioDecoderValue(YangString compRatioDecoderValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "comp-ratio-decoder",
            compRatioDecoderValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "comp-ratio-decoder",
     * using a String value.
     * @param compRatioDecoderValue used during instantiation.
     */
    public void setCompRatioDecoderValue(String compRatioDecoderValue)
            throws JNCException {
        setCompRatioDecoderValue(new YangString(compRatioDecoderValue));
    }

    /**
     * Unsets the value for child leaf "comp-ratio-decoder".
     */
    public void unsetCompRatioDecoderValue() throws JNCException {
        delete("comp-ratio-decoder");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "comp-ratio-decoder" leaf will not have a value.
     */
    public void addCompRatioDecoder() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "comp-ratio-decoder",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "comp-ratio-decoder" with operation "replace".
     */
    public void markCompRatioDecoderReplace() throws JNCException {
        markLeafReplace("compRatioDecoder");
    }

    /**
     * Marks the leaf "comp-ratio-decoder" with operation "merge".
     */
    public void markCompRatioDecoderMerge() throws JNCException {
        markLeafMerge("compRatioDecoder");
    }

    /**
     * Marks the leaf "comp-ratio-decoder" with operation "create".
     */
    public void markCompRatioDecoderCreate() throws JNCException {
        markLeafCreate("compRatioDecoder");
    }

    /**
     * Marks the leaf "comp-ratio-decoder" with operation "delete".
     */
    public void markCompRatioDecoderDelete() throws JNCException {
        markLeafDelete("compRatioDecoder");
    }

    /* Access methods for optional leaf child: "rfc1144-neg-slots". */

    /**
     * Gets the value for child leaf "rfc1144-neg-slots".
     * @return The value of the leaf.
     */
    public YangUInt16 getRfc1144NegSlotsValue() throws JNCException {
        return (YangUInt16)getValue("rfc1144-neg-slots");
    }

    /**
     * Sets the value for child leaf "rfc1144-neg-slots",
     * using instance of generated typedef class.
     * @param rfc1144NegSlotsValue The value to set.
     * @param rfc1144NegSlotsValue used during instantiation.
     */
    public void setRfc1144NegSlotsValue(YangUInt16 rfc1144NegSlotsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-neg-slots",
            rfc1144NegSlotsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rfc1144-neg-slots",
     * using Java primitive values.
     * @param rfc1144NegSlotsValue used during instantiation.
     */
    public void setRfc1144NegSlotsValue(int rfc1144NegSlotsValue)
            throws JNCException {
        setRfc1144NegSlotsValue(new YangUInt16(rfc1144NegSlotsValue));
    }

    /**
     * Sets the value for child leaf "rfc1144-neg-slots",
     * using a String value.
     * @param rfc1144NegSlotsValue used during instantiation.
     */
    public void setRfc1144NegSlotsValue(String rfc1144NegSlotsValue)
            throws JNCException {
        setRfc1144NegSlotsValue(new YangUInt16(rfc1144NegSlotsValue));
    }

    /**
     * Unsets the value for child leaf "rfc1144-neg-slots".
     */
    public void unsetRfc1144NegSlotsValue() throws JNCException {
        delete("rfc1144-neg-slots");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rfc1144-neg-slots" leaf will not have a value.
     */
    public void addRfc1144NegSlots() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-neg-slots",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rfc1144-neg-slots" with operation "replace".
     */
    public void markRfc1144NegSlotsReplace() throws JNCException {
        markLeafReplace("rfc1144NegSlots");
    }

    /**
     * Marks the leaf "rfc1144-neg-slots" with operation "merge".
     */
    public void markRfc1144NegSlotsMerge() throws JNCException {
        markLeafMerge("rfc1144NegSlots");
    }

    /**
     * Marks the leaf "rfc1144-neg-slots" with operation "create".
     */
    public void markRfc1144NegSlotsCreate() throws JNCException {
        markLeafCreate("rfc1144NegSlots");
    }

    /**
     * Marks the leaf "rfc1144-neg-slots" with operation "delete".
     */
    public void markRfc1144NegSlotsDelete() throws JNCException {
        markLeafDelete("rfc1144NegSlots");
    }

    /* Access methods for optional leaf child: "rfc1144-uncompressed-tcp-sent". */

    /**
     * Gets the value for child leaf "rfc1144-uncompressed-tcp-sent".
     * @return The value of the leaf.
     */
    public YangUInt32 getRfc1144UncompressedTcpSentValue() throws JNCException {
        return (YangUInt32)getValue("rfc1144-uncompressed-tcp-sent");
    }

    /**
     * Sets the value for child leaf "rfc1144-uncompressed-tcp-sent",
     * using instance of generated typedef class.
     * @param rfc1144UncompressedTcpSentValue The value to set.
     * @param rfc1144UncompressedTcpSentValue used during instantiation.
     */
    public void setRfc1144UncompressedTcpSentValue(YangUInt32 rfc1144UncompressedTcpSentValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-uncompressed-tcp-sent",
            rfc1144UncompressedTcpSentValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rfc1144-uncompressed-tcp-sent",
     * using Java primitive values.
     * @param rfc1144UncompressedTcpSentValue used during instantiation.
     */
    public void setRfc1144UncompressedTcpSentValue(long rfc1144UncompressedTcpSentValue)
            throws JNCException {
        setRfc1144UncompressedTcpSentValue(new YangUInt32(rfc1144UncompressedTcpSentValue));
    }

    /**
     * Sets the value for child leaf "rfc1144-uncompressed-tcp-sent",
     * using a String value.
     * @param rfc1144UncompressedTcpSentValue used during instantiation.
     */
    public void setRfc1144UncompressedTcpSentValue(String rfc1144UncompressedTcpSentValue)
            throws JNCException {
        setRfc1144UncompressedTcpSentValue(new YangUInt32(rfc1144UncompressedTcpSentValue));
    }

    /**
     * Unsets the value for child leaf "rfc1144-uncompressed-tcp-sent".
     */
    public void unsetRfc1144UncompressedTcpSentValue() throws JNCException {
        delete("rfc1144-uncompressed-tcp-sent");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rfc1144-uncompressed-tcp-sent" leaf will not have a value.
     */
    public void addRfc1144UncompressedTcpSent() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-uncompressed-tcp-sent",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rfc1144-uncompressed-tcp-sent" with operation "replace".
     */
    public void markRfc1144UncompressedTcpSentReplace() throws JNCException {
        markLeafReplace("rfc1144UncompressedTcpSent");
    }

    /**
     * Marks the leaf "rfc1144-uncompressed-tcp-sent" with operation "merge".
     */
    public void markRfc1144UncompressedTcpSentMerge() throws JNCException {
        markLeafMerge("rfc1144UncompressedTcpSent");
    }

    /**
     * Marks the leaf "rfc1144-uncompressed-tcp-sent" with operation "create".
     */
    public void markRfc1144UncompressedTcpSentCreate() throws JNCException {
        markLeafCreate("rfc1144UncompressedTcpSent");
    }

    /**
     * Marks the leaf "rfc1144-uncompressed-tcp-sent" with operation "delete".
     */
    public void markRfc1144UncompressedTcpSentDelete() throws JNCException {
        markLeafDelete("rfc1144UncompressedTcpSent");
    }

    /* Access methods for optional leaf child: "rfc1144-compressed-tcp-sent". */

    /**
     * Gets the value for child leaf "rfc1144-compressed-tcp-sent".
     * @return The value of the leaf.
     */
    public YangUInt32 getRfc1144CompressedTcpSentValue() throws JNCException {
        return (YangUInt32)getValue("rfc1144-compressed-tcp-sent");
    }

    /**
     * Sets the value for child leaf "rfc1144-compressed-tcp-sent",
     * using instance of generated typedef class.
     * @param rfc1144CompressedTcpSentValue The value to set.
     * @param rfc1144CompressedTcpSentValue used during instantiation.
     */
    public void setRfc1144CompressedTcpSentValue(YangUInt32 rfc1144CompressedTcpSentValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-compressed-tcp-sent",
            rfc1144CompressedTcpSentValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rfc1144-compressed-tcp-sent",
     * using Java primitive values.
     * @param rfc1144CompressedTcpSentValue used during instantiation.
     */
    public void setRfc1144CompressedTcpSentValue(long rfc1144CompressedTcpSentValue)
            throws JNCException {
        setRfc1144CompressedTcpSentValue(new YangUInt32(rfc1144CompressedTcpSentValue));
    }

    /**
     * Sets the value for child leaf "rfc1144-compressed-tcp-sent",
     * using a String value.
     * @param rfc1144CompressedTcpSentValue used during instantiation.
     */
    public void setRfc1144CompressedTcpSentValue(String rfc1144CompressedTcpSentValue)
            throws JNCException {
        setRfc1144CompressedTcpSentValue(new YangUInt32(rfc1144CompressedTcpSentValue));
    }

    /**
     * Unsets the value for child leaf "rfc1144-compressed-tcp-sent".
     */
    public void unsetRfc1144CompressedTcpSentValue() throws JNCException {
        delete("rfc1144-compressed-tcp-sent");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rfc1144-compressed-tcp-sent" leaf will not have a value.
     */
    public void addRfc1144CompressedTcpSent() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-compressed-tcp-sent",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rfc1144-compressed-tcp-sent" with operation "replace".
     */
    public void markRfc1144CompressedTcpSentReplace() throws JNCException {
        markLeafReplace("rfc1144CompressedTcpSent");
    }

    /**
     * Marks the leaf "rfc1144-compressed-tcp-sent" with operation "merge".
     */
    public void markRfc1144CompressedTcpSentMerge() throws JNCException {
        markLeafMerge("rfc1144CompressedTcpSent");
    }

    /**
     * Marks the leaf "rfc1144-compressed-tcp-sent" with operation "create".
     */
    public void markRfc1144CompressedTcpSentCreate() throws JNCException {
        markLeafCreate("rfc1144CompressedTcpSent");
    }

    /**
     * Marks the leaf "rfc1144-compressed-tcp-sent" with operation "delete".
     */
    public void markRfc1144CompressedTcpSentDelete() throws JNCException {
        markLeafDelete("rfc1144CompressedTcpSent");
    }

    /* Access methods for optional leaf child: "rfc1144-outbound-searches". */

    /**
     * Gets the value for child leaf "rfc1144-outbound-searches".
     * @return The value of the leaf.
     */
    public YangUInt32 getRfc1144OutboundSearchesValue() throws JNCException {
        return (YangUInt32)getValue("rfc1144-outbound-searches");
    }

    /**
     * Sets the value for child leaf "rfc1144-outbound-searches",
     * using instance of generated typedef class.
     * @param rfc1144OutboundSearchesValue The value to set.
     * @param rfc1144OutboundSearchesValue used during instantiation.
     */
    public void setRfc1144OutboundSearchesValue(YangUInt32 rfc1144OutboundSearchesValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-outbound-searches",
            rfc1144OutboundSearchesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rfc1144-outbound-searches",
     * using Java primitive values.
     * @param rfc1144OutboundSearchesValue used during instantiation.
     */
    public void setRfc1144OutboundSearchesValue(long rfc1144OutboundSearchesValue)
            throws JNCException {
        setRfc1144OutboundSearchesValue(new YangUInt32(rfc1144OutboundSearchesValue));
    }

    /**
     * Sets the value for child leaf "rfc1144-outbound-searches",
     * using a String value.
     * @param rfc1144OutboundSearchesValue used during instantiation.
     */
    public void setRfc1144OutboundSearchesValue(String rfc1144OutboundSearchesValue)
            throws JNCException {
        setRfc1144OutboundSearchesValue(new YangUInt32(rfc1144OutboundSearchesValue));
    }

    /**
     * Unsets the value for child leaf "rfc1144-outbound-searches".
     */
    public void unsetRfc1144OutboundSearchesValue() throws JNCException {
        delete("rfc1144-outbound-searches");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rfc1144-outbound-searches" leaf will not have a value.
     */
    public void addRfc1144OutboundSearches() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-outbound-searches",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rfc1144-outbound-searches" with operation "replace".
     */
    public void markRfc1144OutboundSearchesReplace() throws JNCException {
        markLeafReplace("rfc1144OutboundSearches");
    }

    /**
     * Marks the leaf "rfc1144-outbound-searches" with operation "merge".
     */
    public void markRfc1144OutboundSearchesMerge() throws JNCException {
        markLeafMerge("rfc1144OutboundSearches");
    }

    /**
     * Marks the leaf "rfc1144-outbound-searches" with operation "create".
     */
    public void markRfc1144OutboundSearchesCreate() throws JNCException {
        markLeafCreate("rfc1144OutboundSearches");
    }

    /**
     * Marks the leaf "rfc1144-outbound-searches" with operation "delete".
     */
    public void markRfc1144OutboundSearchesDelete() throws JNCException {
        markLeafDelete("rfc1144OutboundSearches");
    }

    /* Access methods for optional leaf child: "rfc1144-outbound-misses". */

    /**
     * Gets the value for child leaf "rfc1144-outbound-misses".
     * @return The value of the leaf.
     */
    public YangUInt32 getRfc1144OutboundMissesValue() throws JNCException {
        return (YangUInt32)getValue("rfc1144-outbound-misses");
    }

    /**
     * Sets the value for child leaf "rfc1144-outbound-misses",
     * using instance of generated typedef class.
     * @param rfc1144OutboundMissesValue The value to set.
     * @param rfc1144OutboundMissesValue used during instantiation.
     */
    public void setRfc1144OutboundMissesValue(YangUInt32 rfc1144OutboundMissesValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-outbound-misses",
            rfc1144OutboundMissesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rfc1144-outbound-misses",
     * using Java primitive values.
     * @param rfc1144OutboundMissesValue used during instantiation.
     */
    public void setRfc1144OutboundMissesValue(long rfc1144OutboundMissesValue)
            throws JNCException {
        setRfc1144OutboundMissesValue(new YangUInt32(rfc1144OutboundMissesValue));
    }

    /**
     * Sets the value for child leaf "rfc1144-outbound-misses",
     * using a String value.
     * @param rfc1144OutboundMissesValue used during instantiation.
     */
    public void setRfc1144OutboundMissesValue(String rfc1144OutboundMissesValue)
            throws JNCException {
        setRfc1144OutboundMissesValue(new YangUInt32(rfc1144OutboundMissesValue));
    }

    /**
     * Unsets the value for child leaf "rfc1144-outbound-misses".
     */
    public void unsetRfc1144OutboundMissesValue() throws JNCException {
        delete("rfc1144-outbound-misses");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rfc1144-outbound-misses" leaf will not have a value.
     */
    public void addRfc1144OutboundMisses() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-outbound-misses",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rfc1144-outbound-misses" with operation "replace".
     */
    public void markRfc1144OutboundMissesReplace() throws JNCException {
        markLeafReplace("rfc1144OutboundMisses");
    }

    /**
     * Marks the leaf "rfc1144-outbound-misses" with operation "merge".
     */
    public void markRfc1144OutboundMissesMerge() throws JNCException {
        markLeafMerge("rfc1144OutboundMisses");
    }

    /**
     * Marks the leaf "rfc1144-outbound-misses" with operation "create".
     */
    public void markRfc1144OutboundMissesCreate() throws JNCException {
        markLeafCreate("rfc1144OutboundMisses");
    }

    /**
     * Marks the leaf "rfc1144-outbound-misses" with operation "delete".
     */
    public void markRfc1144OutboundMissesDelete() throws JNCException {
        markLeafDelete("rfc1144OutboundMisses");
    }

    /* Access methods for optional leaf child: "rfc1144-uncompress-tcp-received". */

    /**
     * Gets the value for child leaf "rfc1144-uncompress-tcp-received".
     * @return The value of the leaf.
     */
    public YangUInt32 getRfc1144UncompressTcpReceivedValue()
            throws JNCException {
        return (YangUInt32)getValue("rfc1144-uncompress-tcp-received");
    }

    /**
     * Sets the value for child leaf "rfc1144-uncompress-tcp-received",
     * using instance of generated typedef class.
     * @param rfc1144UncompressTcpReceivedValue The value to set.
     * @param rfc1144UncompressTcpReceivedValue used during instantiation.
     */
    public void setRfc1144UncompressTcpReceivedValue(YangUInt32 rfc1144UncompressTcpReceivedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-uncompress-tcp-received",
            rfc1144UncompressTcpReceivedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rfc1144-uncompress-tcp-received",
     * using Java primitive values.
     * @param rfc1144UncompressTcpReceivedValue used during instantiation.
     */
    public void setRfc1144UncompressTcpReceivedValue(long rfc1144UncompressTcpReceivedValue)
            throws JNCException {
        setRfc1144UncompressTcpReceivedValue(new YangUInt32(rfc1144UncompressTcpReceivedValue));
    }

    /**
     * Sets the value for child leaf "rfc1144-uncompress-tcp-received",
     * using a String value.
     * @param rfc1144UncompressTcpReceivedValue used during instantiation.
     */
    public void setRfc1144UncompressTcpReceivedValue(String rfc1144UncompressTcpReceivedValue)
            throws JNCException {
        setRfc1144UncompressTcpReceivedValue(new YangUInt32(rfc1144UncompressTcpReceivedValue));
    }

    /**
     * Unsets the value for child leaf "rfc1144-uncompress-tcp-received".
     */
    public void unsetRfc1144UncompressTcpReceivedValue() throws JNCException {
        delete("rfc1144-uncompress-tcp-received");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rfc1144-uncompress-tcp-received" leaf will not have a value.
     */
    public void addRfc1144UncompressTcpReceived() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-uncompress-tcp-received",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rfc1144-uncompress-tcp-received" with operation "replace".
     */
    public void markRfc1144UncompressTcpReceivedReplace() throws JNCException {
        markLeafReplace("rfc1144UncompressTcpReceived");
    }

    /**
     * Marks the leaf "rfc1144-uncompress-tcp-received" with operation "merge".
     */
    public void markRfc1144UncompressTcpReceivedMerge() throws JNCException {
        markLeafMerge("rfc1144UncompressTcpReceived");
    }

    /**
     * Marks the leaf "rfc1144-uncompress-tcp-received" with operation "create".
     */
    public void markRfc1144UncompressTcpReceivedCreate() throws JNCException {
        markLeafCreate("rfc1144UncompressTcpReceived");
    }

    /**
     * Marks the leaf "rfc1144-uncompress-tcp-received" with operation "delete".
     */
    public void markRfc1144UncompressTcpReceivedDelete() throws JNCException {
        markLeafDelete("rfc1144UncompressTcpReceived");
    }

    /* Access methods for optional leaf child: "rfc1144-compressed-tcp-received". */

    /**
     * Gets the value for child leaf "rfc1144-compressed-tcp-received".
     * @return The value of the leaf.
     */
    public YangUInt32 getRfc1144CompressedTcpReceivedValue()
            throws JNCException {
        return (YangUInt32)getValue("rfc1144-compressed-tcp-received");
    }

    /**
     * Sets the value for child leaf "rfc1144-compressed-tcp-received",
     * using instance of generated typedef class.
     * @param rfc1144CompressedTcpReceivedValue The value to set.
     * @param rfc1144CompressedTcpReceivedValue used during instantiation.
     */
    public void setRfc1144CompressedTcpReceivedValue(YangUInt32 rfc1144CompressedTcpReceivedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-compressed-tcp-received",
            rfc1144CompressedTcpReceivedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rfc1144-compressed-tcp-received",
     * using Java primitive values.
     * @param rfc1144CompressedTcpReceivedValue used during instantiation.
     */
    public void setRfc1144CompressedTcpReceivedValue(long rfc1144CompressedTcpReceivedValue)
            throws JNCException {
        setRfc1144CompressedTcpReceivedValue(new YangUInt32(rfc1144CompressedTcpReceivedValue));
    }

    /**
     * Sets the value for child leaf "rfc1144-compressed-tcp-received",
     * using a String value.
     * @param rfc1144CompressedTcpReceivedValue used during instantiation.
     */
    public void setRfc1144CompressedTcpReceivedValue(String rfc1144CompressedTcpReceivedValue)
            throws JNCException {
        setRfc1144CompressedTcpReceivedValue(new YangUInt32(rfc1144CompressedTcpReceivedValue));
    }

    /**
     * Unsets the value for child leaf "rfc1144-compressed-tcp-received".
     */
    public void unsetRfc1144CompressedTcpReceivedValue() throws JNCException {
        delete("rfc1144-compressed-tcp-received");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rfc1144-compressed-tcp-received" leaf will not have a value.
     */
    public void addRfc1144CompressedTcpReceived() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-compressed-tcp-received",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rfc1144-compressed-tcp-received" with operation "replace".
     */
    public void markRfc1144CompressedTcpReceivedReplace() throws JNCException {
        markLeafReplace("rfc1144CompressedTcpReceived");
    }

    /**
     * Marks the leaf "rfc1144-compressed-tcp-received" with operation "merge".
     */
    public void markRfc1144CompressedTcpReceivedMerge() throws JNCException {
        markLeafMerge("rfc1144CompressedTcpReceived");
    }

    /**
     * Marks the leaf "rfc1144-compressed-tcp-received" with operation "create".
     */
    public void markRfc1144CompressedTcpReceivedCreate() throws JNCException {
        markLeafCreate("rfc1144CompressedTcpReceived");
    }

    /**
     * Marks the leaf "rfc1144-compressed-tcp-received" with operation "delete".
     */
    public void markRfc1144CompressedTcpReceivedDelete() throws JNCException {
        markLeafDelete("rfc1144CompressedTcpReceived");
    }

    /* Access methods for optional leaf child: "rfc1144-errors-received". */

    /**
     * Gets the value for child leaf "rfc1144-errors-received".
     * @return The value of the leaf.
     */
    public YangUInt32 getRfc1144ErrorsReceivedValue() throws JNCException {
        return (YangUInt32)getValue("rfc1144-errors-received");
    }

    /**
     * Sets the value for child leaf "rfc1144-errors-received",
     * using instance of generated typedef class.
     * @param rfc1144ErrorsReceivedValue The value to set.
     * @param rfc1144ErrorsReceivedValue used during instantiation.
     */
    public void setRfc1144ErrorsReceivedValue(YangUInt32 rfc1144ErrorsReceivedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-errors-received",
            rfc1144ErrorsReceivedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rfc1144-errors-received",
     * using Java primitive values.
     * @param rfc1144ErrorsReceivedValue used during instantiation.
     */
    public void setRfc1144ErrorsReceivedValue(long rfc1144ErrorsReceivedValue)
            throws JNCException {
        setRfc1144ErrorsReceivedValue(new YangUInt32(rfc1144ErrorsReceivedValue));
    }

    /**
     * Sets the value for child leaf "rfc1144-errors-received",
     * using a String value.
     * @param rfc1144ErrorsReceivedValue used during instantiation.
     */
    public void setRfc1144ErrorsReceivedValue(String rfc1144ErrorsReceivedValue)
            throws JNCException {
        setRfc1144ErrorsReceivedValue(new YangUInt32(rfc1144ErrorsReceivedValue));
    }

    /**
     * Unsets the value for child leaf "rfc1144-errors-received".
     */
    public void unsetRfc1144ErrorsReceivedValue() throws JNCException {
        delete("rfc1144-errors-received");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rfc1144-errors-received" leaf will not have a value.
     */
    public void addRfc1144ErrorsReceived() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-errors-received",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rfc1144-errors-received" with operation "replace".
     */
    public void markRfc1144ErrorsReceivedReplace() throws JNCException {
        markLeafReplace("rfc1144ErrorsReceived");
    }

    /**
     * Marks the leaf "rfc1144-errors-received" with operation "merge".
     */
    public void markRfc1144ErrorsReceivedMerge() throws JNCException {
        markLeafMerge("rfc1144ErrorsReceived");
    }

    /**
     * Marks the leaf "rfc1144-errors-received" with operation "create".
     */
    public void markRfc1144ErrorsReceivedCreate() throws JNCException {
        markLeafCreate("rfc1144ErrorsReceived");
    }

    /**
     * Marks the leaf "rfc1144-errors-received" with operation "delete".
     */
    public void markRfc1144ErrorsReceivedDelete() throws JNCException {
        markLeafDelete("rfc1144ErrorsReceived");
    }

    /* Access methods for optional leaf child: "rfc1144-tossed-pkts-received". */

    /**
     * Gets the value for child leaf "rfc1144-tossed-pkts-received".
     * @return The value of the leaf.
     */
    public YangUInt32 getRfc1144TossedPktsReceivedValue() throws JNCException {
        return (YangUInt32)getValue("rfc1144-tossed-pkts-received");
    }

    /**
     * Sets the value for child leaf "rfc1144-tossed-pkts-received",
     * using instance of generated typedef class.
     * @param rfc1144TossedPktsReceivedValue The value to set.
     * @param rfc1144TossedPktsReceivedValue used during instantiation.
     */
    public void setRfc1144TossedPktsReceivedValue(YangUInt32 rfc1144TossedPktsReceivedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-tossed-pkts-received",
            rfc1144TossedPktsReceivedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rfc1144-tossed-pkts-received",
     * using Java primitive values.
     * @param rfc1144TossedPktsReceivedValue used during instantiation.
     */
    public void setRfc1144TossedPktsReceivedValue(long rfc1144TossedPktsReceivedValue)
            throws JNCException {
        setRfc1144TossedPktsReceivedValue(new YangUInt32(rfc1144TossedPktsReceivedValue));
    }

    /**
     * Sets the value for child leaf "rfc1144-tossed-pkts-received",
     * using a String value.
     * @param rfc1144TossedPktsReceivedValue used during instantiation.
     */
    public void setRfc1144TossedPktsReceivedValue(String rfc1144TossedPktsReceivedValue)
            throws JNCException {
        setRfc1144TossedPktsReceivedValue(new YangUInt32(rfc1144TossedPktsReceivedValue));
    }

    /**
     * Unsets the value for child leaf "rfc1144-tossed-pkts-received".
     */
    public void unsetRfc1144TossedPktsReceivedValue() throws JNCException {
        delete("rfc1144-tossed-pkts-received");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rfc1144-tossed-pkts-received" leaf will not have a value.
     */
    public void addRfc1144TossedPktsReceived() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-tossed-pkts-received",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rfc1144-tossed-pkts-received" with operation "replace".
     */
    public void markRfc1144TossedPktsReceivedReplace() throws JNCException {
        markLeafReplace("rfc1144TossedPktsReceived");
    }

    /**
     * Marks the leaf "rfc1144-tossed-pkts-received" with operation "merge".
     */
    public void markRfc1144TossedPktsReceivedMerge() throws JNCException {
        markLeafMerge("rfc1144TossedPktsReceived");
    }

    /**
     * Marks the leaf "rfc1144-tossed-pkts-received" with operation "create".
     */
    public void markRfc1144TossedPktsReceivedCreate() throws JNCException {
        markLeafCreate("rfc1144TossedPktsReceived");
    }

    /**
     * Marks the leaf "rfc1144-tossed-pkts-received" with operation "delete".
     */
    public void markRfc1144TossedPktsReceivedDelete() throws JNCException {
        markLeafDelete("rfc1144TossedPktsReceived");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
