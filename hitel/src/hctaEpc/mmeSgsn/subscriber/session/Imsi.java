/* 
 * @(#)Imsi.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber.session;
import .hctaEpc.ImeiT;
import .hctaEpc.ImeisvT;
import .hctaEpc.ImsiT;
import .hctaEpc.MsisdnT;
import .ietfInetTypes.IpAddress;
import .ietfInetTypes.Ipv4Address;
import .ietfInetTypes.Ipv6Address;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/session/imsi"
 * <p>
 * See line 1209 in
 * scCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Imsi extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Imsi object.
     */
    public Imsi() {
        super(Epc.NAMESPACE, "imsi");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Imsi clone() {
        return (Imsi)cloneContent(new Imsi());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Imsi cloneShallow() {
        return (Imsi)cloneShallowContent(new Imsi());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "imsi",
            "nsapi-or-bearer-id",
            "msisdn",
            "imei",
            "imeisv",
            "apn-subscribed",
            "apn-in-use",
            "charging-id",
            "link-bearer-ids",
            "ue-ipv4-address",
            "ue-ipv6-address",
            "session-pdn-type",
            "session-charging-characteristics",
            "pgw-control-teid-or-grekey",
            "pgw-control-ip-address",
            "session-pgw-logical-name",
            "sgw-control-teid",
            "sgw-control-ip-address",
            "session-sgw-logical-name",
            "apn-ul-ambr-in-use",
            "apn-dl-ambr-in-use",
            "apn-restriction",
            "local-control-teid",
            "session-s5-s8-protocoltype",
            "datapath-ggsn-address",
            "signaling-ggsn-address",
            "session-subscription-context-identifier",
            "pdp-type",
            "ggsn-remote-teid",
            "ggsn-local-teid",
            "signaling-ggsn-teid",
            "datapath-ran-address",
            "ran-remote-teid",
            "ran-local-teid",
            "session-packet-flow-identifier",
            "session-llc-sapi",
            "mvno",
            "local-eps-qos-entry",
            "lipa-session",
        };
    }

    /* Access methods for leaf child: "imsi". */

    /**
     * Gets the value for child leaf "imsi".
     * @return The value of the leaf.
     */
    public ImsiT getImsiValue() throws JNCException {
        return (ImsiT)getValue("imsi");
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a JNC type value.
     * @param imsiValue The value to set.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(ImsiT imsiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            imsiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a String value.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(String imsiValue) throws JNCException {
        setImsiValue(new ImsiT(imsiValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imsi" leaf will not have a value.
     */
    public void addImsi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "nsapi-or-bearer-id". */

    /**
     * Gets the value for child leaf "nsapi-or-bearer-id".
     * @return The value of the leaf.
     */
    public YangUInt8 getNsapiOrBearerIdValue() throws JNCException {
        return (YangUInt8)getValue("nsapi-or-bearer-id");
    }

    /**
     * Sets the value for child leaf "nsapi-or-bearer-id",
     * using instance of generated typedef class.
     * @param nsapiOrBearerIdValue The value to set.
     * @param nsapiOrBearerIdValue used during instantiation.
     */
    public void setNsapiOrBearerIdValue(YangUInt8 nsapiOrBearerIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsapi-or-bearer-id",
            nsapiOrBearerIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsapi-or-bearer-id",
     * using Java primitive values.
     * @param nsapiOrBearerIdValue used during instantiation.
     */
    public void setNsapiOrBearerIdValue(short nsapiOrBearerIdValue)
            throws JNCException {
        setNsapiOrBearerIdValue(new YangUInt8(nsapiOrBearerIdValue));
    }

    /**
     * Sets the value for child leaf "nsapi-or-bearer-id",
     * using a String value.
     * @param nsapiOrBearerIdValue used during instantiation.
     */
    public void setNsapiOrBearerIdValue(String nsapiOrBearerIdValue)
            throws JNCException {
        setNsapiOrBearerIdValue(new YangUInt8(nsapiOrBearerIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsapi-or-bearer-id" leaf will not have a value.
     */
    public void addNsapiOrBearerId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsapi-or-bearer-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "msisdn". */

    /**
     * Gets the value for child leaf "msisdn".
     * @return The value of the leaf.
     */
    public MsisdnT getMsisdnValue() throws JNCException {
        return (MsisdnT)getValue("msisdn");
    }

    /**
     * Sets the value for child leaf "msisdn",
     * using a JNC type value.
     * @param msisdnValue The value to set.
     * @param msisdnValue used during instantiation.
     */
    public void setMsisdnValue(MsisdnT msisdnValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "msisdn",
            msisdnValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "msisdn",
     * using a String value.
     * @param msisdnValue used during instantiation.
     */
    public void setMsisdnValue(String msisdnValue) throws JNCException {
        setMsisdnValue(new MsisdnT(msisdnValue));
    }

    /**
     * Unsets the value for child leaf "msisdn".
     */
    public void unsetMsisdnValue() throws JNCException {
        delete("msisdn");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "msisdn" leaf will not have a value.
     */
    public void addMsisdn() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "msisdn",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "msisdn" with operation "replace".
     */
    public void markMsisdnReplace() throws JNCException {
        markLeafReplace("msisdn");
    }

    /**
     * Marks the leaf "msisdn" with operation "merge".
     */
    public void markMsisdnMerge() throws JNCException {
        markLeafMerge("msisdn");
    }

    /**
     * Marks the leaf "msisdn" with operation "create".
     */
    public void markMsisdnCreate() throws JNCException {
        markLeafCreate("msisdn");
    }

    /**
     * Marks the leaf "msisdn" with operation "delete".
     */
    public void markMsisdnDelete() throws JNCException {
        markLeafDelete("msisdn");
    }

    /* Access methods for optional leaf child: "imei". */

    /**
     * Gets the value for child leaf "imei".
     * @return The value of the leaf.
     */
    public ImeiT getImeiValue() throws JNCException {
        return (ImeiT)getValue("imei");
    }

    /**
     * Sets the value for child leaf "imei",
     * using a JNC type value.
     * @param imeiValue The value to set.
     * @param imeiValue used during instantiation.
     */
    public void setImeiValue(ImeiT imeiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imei",
            imeiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imei",
     * using a String value.
     * @param imeiValue used during instantiation.
     */
    public void setImeiValue(String imeiValue) throws JNCException {
        setImeiValue(new ImeiT(imeiValue));
    }

    /**
     * Unsets the value for child leaf "imei".
     */
    public void unsetImeiValue() throws JNCException {
        delete("imei");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imei" leaf will not have a value.
     */
    public void addImei() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imei",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "imei" with operation "replace".
     */
    public void markImeiReplace() throws JNCException {
        markLeafReplace("imei");
    }

    /**
     * Marks the leaf "imei" with operation "merge".
     */
    public void markImeiMerge() throws JNCException {
        markLeafMerge("imei");
    }

    /**
     * Marks the leaf "imei" with operation "create".
     */
    public void markImeiCreate() throws JNCException {
        markLeafCreate("imei");
    }

    /**
     * Marks the leaf "imei" with operation "delete".
     */
    public void markImeiDelete() throws JNCException {
        markLeafDelete("imei");
    }

    /* Access methods for optional leaf child: "imeisv". */

    /**
     * Gets the value for child leaf "imeisv".
     * @return The value of the leaf.
     */
    public ImeisvT getImeisvValue() throws JNCException {
        return (ImeisvT)getValue("imeisv");
    }

    /**
     * Sets the value for child leaf "imeisv",
     * using a JNC type value.
     * @param imeisvValue The value to set.
     * @param imeisvValue used during instantiation.
     */
    public void setImeisvValue(ImeisvT imeisvValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imeisv",
            imeisvValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imeisv",
     * using a String value.
     * @param imeisvValue used during instantiation.
     */
    public void setImeisvValue(String imeisvValue) throws JNCException {
        setImeisvValue(new ImeisvT(imeisvValue));
    }

    /**
     * Unsets the value for child leaf "imeisv".
     */
    public void unsetImeisvValue() throws JNCException {
        delete("imeisv");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imeisv" leaf will not have a value.
     */
    public void addImeisv() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imeisv",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "imeisv" with operation "replace".
     */
    public void markImeisvReplace() throws JNCException {
        markLeafReplace("imeisv");
    }

    /**
     * Marks the leaf "imeisv" with operation "merge".
     */
    public void markImeisvMerge() throws JNCException {
        markLeafMerge("imeisv");
    }

    /**
     * Marks the leaf "imeisv" with operation "create".
     */
    public void markImeisvCreate() throws JNCException {
        markLeafCreate("imeisv");
    }

    /**
     * Marks the leaf "imeisv" with operation "delete".
     */
    public void markImeisvDelete() throws JNCException {
        markLeafDelete("imeisv");
    }

    /* Access methods for optional leaf child: "apn-subscribed". */

    /**
     * Gets the value for child leaf "apn-subscribed".
     * @return The value of the leaf.
     */
    public YangString getApnSubscribedValue() throws JNCException {
        return (YangString)getValue("apn-subscribed");
    }

    /**
     * Sets the value for child leaf "apn-subscribed",
     * using instance of generated typedef class.
     * @param apnSubscribedValue The value to set.
     * @param apnSubscribedValue used during instantiation.
     */
    public void setApnSubscribedValue(YangString apnSubscribedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-subscribed",
            apnSubscribedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-subscribed",
     * using a String value.
     * @param apnSubscribedValue used during instantiation.
     */
    public void setApnSubscribedValue(String apnSubscribedValue)
            throws JNCException {
        setApnSubscribedValue(new YangString(apnSubscribedValue));
    }

    /**
     * Unsets the value for child leaf "apn-subscribed".
     */
    public void unsetApnSubscribedValue() throws JNCException {
        delete("apn-subscribed");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-subscribed" leaf will not have a value.
     */
    public void addApnSubscribed() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-subscribed",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-subscribed" with operation "replace".
     */
    public void markApnSubscribedReplace() throws JNCException {
        markLeafReplace("apnSubscribed");
    }

    /**
     * Marks the leaf "apn-subscribed" with operation "merge".
     */
    public void markApnSubscribedMerge() throws JNCException {
        markLeafMerge("apnSubscribed");
    }

    /**
     * Marks the leaf "apn-subscribed" with operation "create".
     */
    public void markApnSubscribedCreate() throws JNCException {
        markLeafCreate("apnSubscribed");
    }

    /**
     * Marks the leaf "apn-subscribed" with operation "delete".
     */
    public void markApnSubscribedDelete() throws JNCException {
        markLeafDelete("apnSubscribed");
    }

    /* Access methods for optional leaf child: "apn-in-use". */

    /**
     * Gets the value for child leaf "apn-in-use".
     * @return The value of the leaf.
     */
    public YangString getApnInUseValue() throws JNCException {
        return (YangString)getValue("apn-in-use");
    }

    /**
     * Sets the value for child leaf "apn-in-use",
     * using instance of generated typedef class.
     * @param apnInUseValue The value to set.
     * @param apnInUseValue used during instantiation.
     */
    public void setApnInUseValue(YangString apnInUseValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-in-use",
            apnInUseValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-in-use",
     * using a String value.
     * @param apnInUseValue used during instantiation.
     */
    public void setApnInUseValue(String apnInUseValue) throws JNCException {
        setApnInUseValue(new YangString(apnInUseValue));
    }

    /**
     * Unsets the value for child leaf "apn-in-use".
     */
    public void unsetApnInUseValue() throws JNCException {
        delete("apn-in-use");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-in-use" leaf will not have a value.
     */
    public void addApnInUse() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-in-use",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-in-use" with operation "replace".
     */
    public void markApnInUseReplace() throws JNCException {
        markLeafReplace("apnInUse");
    }

    /**
     * Marks the leaf "apn-in-use" with operation "merge".
     */
    public void markApnInUseMerge() throws JNCException {
        markLeafMerge("apnInUse");
    }

    /**
     * Marks the leaf "apn-in-use" with operation "create".
     */
    public void markApnInUseCreate() throws JNCException {
        markLeafCreate("apnInUse");
    }

    /**
     * Marks the leaf "apn-in-use" with operation "delete".
     */
    public void markApnInUseDelete() throws JNCException {
        markLeafDelete("apnInUse");
    }

    /* Access methods for optional leaf child: "charging-id". */

    /**
     * Gets the value for child leaf "charging-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getChargingIdValue() throws JNCException {
        return (YangUInt32)getValue("charging-id");
    }

    /**
     * Sets the value for child leaf "charging-id",
     * using instance of generated typedef class.
     * @param chargingIdValue The value to set.
     * @param chargingIdValue used during instantiation.
     */
    public void setChargingIdValue(YangUInt32 chargingIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "charging-id",
            chargingIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "charging-id",
     * using Java primitive values.
     * @param chargingIdValue used during instantiation.
     */
    public void setChargingIdValue(long chargingIdValue) throws JNCException {
        setChargingIdValue(new YangUInt32(chargingIdValue));
    }

    /**
     * Sets the value for child leaf "charging-id",
     * using a String value.
     * @param chargingIdValue used during instantiation.
     */
    public void setChargingIdValue(String chargingIdValue) throws JNCException {
        setChargingIdValue(new YangUInt32(chargingIdValue));
    }

    /**
     * Unsets the value for child leaf "charging-id".
     */
    public void unsetChargingIdValue() throws JNCException {
        delete("charging-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "charging-id" leaf will not have a value.
     */
    public void addChargingId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "charging-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "charging-id" with operation "replace".
     */
    public void markChargingIdReplace() throws JNCException {
        markLeafReplace("chargingId");
    }

    /**
     * Marks the leaf "charging-id" with operation "merge".
     */
    public void markChargingIdMerge() throws JNCException {
        markLeafMerge("chargingId");
    }

    /**
     * Marks the leaf "charging-id" with operation "create".
     */
    public void markChargingIdCreate() throws JNCException {
        markLeafCreate("chargingId");
    }

    /**
     * Marks the leaf "charging-id" with operation "delete".
     */
    public void markChargingIdDelete() throws JNCException {
        markLeafDelete("chargingId");
    }

    /* Access methods for optional leaf child: "link-bearer-ids". */

    /**
     * Gets the value for child leaf "link-bearer-ids".
     * @return The value of the leaf.
     */
    public YangString getLinkBearerIdsValue() throws JNCException {
        return (YangString)getValue("link-bearer-ids");
    }

    /**
     * Sets the value for child leaf "link-bearer-ids",
     * using instance of generated typedef class.
     * @param linkBearerIdsValue The value to set.
     * @param linkBearerIdsValue used during instantiation.
     */
    public void setLinkBearerIdsValue(YangString linkBearerIdsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "link-bearer-ids",
            linkBearerIdsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "link-bearer-ids",
     * using a String value.
     * @param linkBearerIdsValue used during instantiation.
     */
    public void setLinkBearerIdsValue(String linkBearerIdsValue)
            throws JNCException {
        setLinkBearerIdsValue(new YangString(linkBearerIdsValue));
    }

    /**
     * Unsets the value for child leaf "link-bearer-ids".
     */
    public void unsetLinkBearerIdsValue() throws JNCException {
        delete("link-bearer-ids");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "link-bearer-ids" leaf will not have a value.
     */
    public void addLinkBearerIds() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "link-bearer-ids",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "link-bearer-ids" with operation "replace".
     */
    public void markLinkBearerIdsReplace() throws JNCException {
        markLeafReplace("linkBearerIds");
    }

    /**
     * Marks the leaf "link-bearer-ids" with operation "merge".
     */
    public void markLinkBearerIdsMerge() throws JNCException {
        markLeafMerge("linkBearerIds");
    }

    /**
     * Marks the leaf "link-bearer-ids" with operation "create".
     */
    public void markLinkBearerIdsCreate() throws JNCException {
        markLeafCreate("linkBearerIds");
    }

    /**
     * Marks the leaf "link-bearer-ids" with operation "delete".
     */
    public void markLinkBearerIdsDelete() throws JNCException {
        markLeafDelete("linkBearerIds");
    }

    /* Access methods for optional leaf child: "ue-ipv4-address". */

    /**
     * Gets the value for child leaf "ue-ipv4-address".
     * @return The value of the leaf.
     */
    public Ipv4Address getUeIpv4AddressValue() throws JNCException {
        return (Ipv4Address)getValue("ue-ipv4-address");
    }

    /**
     * Sets the value for child leaf "ue-ipv4-address",
     * using a JNC type value.
     * @param ueIpv4AddressValue The value to set.
     * @param ueIpv4AddressValue used during instantiation.
     */
    public void setUeIpv4AddressValue(Ipv4Address ueIpv4AddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-ipv4-address",
            ueIpv4AddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ue-ipv4-address",
     * using a String value.
     * @param ueIpv4AddressValue used during instantiation.
     */
    public void setUeIpv4AddressValue(String ueIpv4AddressValue)
            throws JNCException {
        setUeIpv4AddressValue(new Ipv4Address(ueIpv4AddressValue));
    }

    /**
     * Unsets the value for child leaf "ue-ipv4-address".
     */
    public void unsetUeIpv4AddressValue() throws JNCException {
        delete("ue-ipv4-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ue-ipv4-address" leaf will not have a value.
     */
    public void addUeIpv4Address() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-ipv4-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ue-ipv4-address" with operation "replace".
     */
    public void markUeIpv4AddressReplace() throws JNCException {
        markLeafReplace("ueIpv4Address");
    }

    /**
     * Marks the leaf "ue-ipv4-address" with operation "merge".
     */
    public void markUeIpv4AddressMerge() throws JNCException {
        markLeafMerge("ueIpv4Address");
    }

    /**
     * Marks the leaf "ue-ipv4-address" with operation "create".
     */
    public void markUeIpv4AddressCreate() throws JNCException {
        markLeafCreate("ueIpv4Address");
    }

    /**
     * Marks the leaf "ue-ipv4-address" with operation "delete".
     */
    public void markUeIpv4AddressDelete() throws JNCException {
        markLeafDelete("ueIpv4Address");
    }

    /* Access methods for optional leaf child: "ue-ipv6-address". */

    /**
     * Gets the value for child leaf "ue-ipv6-address".
     * @return The value of the leaf.
     */
    public Ipv6Address getUeIpv6AddressValue() throws JNCException {
        return (Ipv6Address)getValue("ue-ipv6-address");
    }

    /**
     * Sets the value for child leaf "ue-ipv6-address",
     * using a JNC type value.
     * @param ueIpv6AddressValue The value to set.
     * @param ueIpv6AddressValue used during instantiation.
     */
    public void setUeIpv6AddressValue(Ipv6Address ueIpv6AddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-ipv6-address",
            ueIpv6AddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ue-ipv6-address",
     * using a String value.
     * @param ueIpv6AddressValue used during instantiation.
     */
    public void setUeIpv6AddressValue(String ueIpv6AddressValue)
            throws JNCException {
        setUeIpv6AddressValue(new Ipv6Address(ueIpv6AddressValue));
    }

    /**
     * Unsets the value for child leaf "ue-ipv6-address".
     */
    public void unsetUeIpv6AddressValue() throws JNCException {
        delete("ue-ipv6-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ue-ipv6-address" leaf will not have a value.
     */
    public void addUeIpv6Address() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-ipv6-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ue-ipv6-address" with operation "replace".
     */
    public void markUeIpv6AddressReplace() throws JNCException {
        markLeafReplace("ueIpv6Address");
    }

    /**
     * Marks the leaf "ue-ipv6-address" with operation "merge".
     */
    public void markUeIpv6AddressMerge() throws JNCException {
        markLeafMerge("ueIpv6Address");
    }

    /**
     * Marks the leaf "ue-ipv6-address" with operation "create".
     */
    public void markUeIpv6AddressCreate() throws JNCException {
        markLeafCreate("ueIpv6Address");
    }

    /**
     * Marks the leaf "ue-ipv6-address" with operation "delete".
     */
    public void markUeIpv6AddressDelete() throws JNCException {
        markLeafDelete("ueIpv6Address");
    }

    /* Access methods for optional leaf child: "session-pdn-type". */

    /**
     * Gets the value for child leaf "session-pdn-type".
     * @return The value of the leaf.
     */
    public YangString getSessionPdnTypeValue() throws JNCException {
        return (YangString)getValue("session-pdn-type");
    }

    /**
     * Sets the value for child leaf "session-pdn-type",
     * using instance of generated typedef class.
     * @param sessionPdnTypeValue The value to set.
     * @param sessionPdnTypeValue used during instantiation.
     */
    public void setSessionPdnTypeValue(YangString sessionPdnTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-pdn-type",
            sessionPdnTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "session-pdn-type",
     * using a String value.
     * @param sessionPdnTypeValue used during instantiation.
     */
    public void setSessionPdnTypeValue(String sessionPdnTypeValue)
            throws JNCException {
        setSessionPdnTypeValue(new YangString(sessionPdnTypeValue));
    }

    /**
     * Unsets the value for child leaf "session-pdn-type".
     */
    public void unsetSessionPdnTypeValue() throws JNCException {
        delete("session-pdn-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "session-pdn-type" leaf will not have a value.
     */
    public void addSessionPdnType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-pdn-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "session-pdn-type" with operation "replace".
     */
    public void markSessionPdnTypeReplace() throws JNCException {
        markLeafReplace("sessionPdnType");
    }

    /**
     * Marks the leaf "session-pdn-type" with operation "merge".
     */
    public void markSessionPdnTypeMerge() throws JNCException {
        markLeafMerge("sessionPdnType");
    }

    /**
     * Marks the leaf "session-pdn-type" with operation "create".
     */
    public void markSessionPdnTypeCreate() throws JNCException {
        markLeafCreate("sessionPdnType");
    }

    /**
     * Marks the leaf "session-pdn-type" with operation "delete".
     */
    public void markSessionPdnTypeDelete() throws JNCException {
        markLeafDelete("sessionPdnType");
    }

    /* Access methods for optional leaf child: "session-charging-characteristics". */

    /**
     * Gets the value for child leaf "session-charging-characteristics".
     * @return The value of the leaf.
     */
    public YangUInt16 getSessionChargingCharacteristicsValue()
            throws JNCException {
        return (YangUInt16)getValue("session-charging-characteristics");
    }

    /**
     * Sets the value for child leaf "session-charging-characteristics",
     * using instance of generated typedef class.
     * @param sessionChargingCharacteristicsValue The value to set.
     * @param sessionChargingCharacteristicsValue used during instantiation.
     */
    public void setSessionChargingCharacteristicsValue(YangUInt16 sessionChargingCharacteristicsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-charging-characteristics",
            sessionChargingCharacteristicsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "session-charging-characteristics",
     * using Java primitive values.
     * @param sessionChargingCharacteristicsValue used during instantiation.
     */
    public void setSessionChargingCharacteristicsValue(int sessionChargingCharacteristicsValue)
            throws JNCException {
        setSessionChargingCharacteristicsValue(new YangUInt16(sessionChargingCharacteristicsValue));
    }

    /**
     * Sets the value for child leaf "session-charging-characteristics",
     * using a String value.
     * @param sessionChargingCharacteristicsValue used during instantiation.
     */
    public void setSessionChargingCharacteristicsValue(String sessionChargingCharacteristicsValue)
            throws JNCException {
        setSessionChargingCharacteristicsValue(new YangUInt16(sessionChargingCharacteristicsValue));
    }

    /**
     * Unsets the value for child leaf "session-charging-characteristics".
     */
    public void unsetSessionChargingCharacteristicsValue() throws JNCException {
        delete("session-charging-characteristics");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "session-charging-characteristics" leaf will not have a value.
     */
    public void addSessionChargingCharacteristics() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-charging-characteristics",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "session-charging-characteristics" with operation "replace".
     */
    public void markSessionChargingCharacteristicsReplace() throws JNCException {
        markLeafReplace("sessionChargingCharacteristics");
    }

    /**
     * Marks the leaf "session-charging-characteristics" with operation "merge".
     */
    public void markSessionChargingCharacteristicsMerge() throws JNCException {
        markLeafMerge("sessionChargingCharacteristics");
    }

    /**
     * Marks the leaf "session-charging-characteristics" with operation "create".
     */
    public void markSessionChargingCharacteristicsCreate() throws JNCException {
        markLeafCreate("sessionChargingCharacteristics");
    }

    /**
     * Marks the leaf "session-charging-characteristics" with operation "delete".
     */
    public void markSessionChargingCharacteristicsDelete() throws JNCException {
        markLeafDelete("sessionChargingCharacteristics");
    }

    /* Access methods for optional leaf child: "pgw-control-teid-or-grekey". */

    /**
     * Gets the value for child leaf "pgw-control-teid-or-grekey".
     * @return The value of the leaf.
     */
    public YangUInt32 getPgwControlTeidOrGrekeyValue() throws JNCException {
        return (YangUInt32)getValue("pgw-control-teid-or-grekey");
    }

    /**
     * Sets the value for child leaf "pgw-control-teid-or-grekey",
     * using instance of generated typedef class.
     * @param pgwControlTeidOrGrekeyValue The value to set.
     * @param pgwControlTeidOrGrekeyValue used during instantiation.
     */
    public void setPgwControlTeidOrGrekeyValue(YangUInt32 pgwControlTeidOrGrekeyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-control-teid-or-grekey",
            pgwControlTeidOrGrekeyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pgw-control-teid-or-grekey",
     * using Java primitive values.
     * @param pgwControlTeidOrGrekeyValue used during instantiation.
     */
    public void setPgwControlTeidOrGrekeyValue(long pgwControlTeidOrGrekeyValue)
            throws JNCException {
        setPgwControlTeidOrGrekeyValue(new YangUInt32(pgwControlTeidOrGrekeyValue));
    }

    /**
     * Sets the value for child leaf "pgw-control-teid-or-grekey",
     * using a String value.
     * @param pgwControlTeidOrGrekeyValue used during instantiation.
     */
    public void setPgwControlTeidOrGrekeyValue(String pgwControlTeidOrGrekeyValue)
            throws JNCException {
        setPgwControlTeidOrGrekeyValue(new YangUInt32(pgwControlTeidOrGrekeyValue));
    }

    /**
     * Unsets the value for child leaf "pgw-control-teid-or-grekey".
     */
    public void unsetPgwControlTeidOrGrekeyValue() throws JNCException {
        delete("pgw-control-teid-or-grekey");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pgw-control-teid-or-grekey" leaf will not have a value.
     */
    public void addPgwControlTeidOrGrekey() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-control-teid-or-grekey",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pgw-control-teid-or-grekey" with operation "replace".
     */
    public void markPgwControlTeidOrGrekeyReplace() throws JNCException {
        markLeafReplace("pgwControlTeidOrGrekey");
    }

    /**
     * Marks the leaf "pgw-control-teid-or-grekey" with operation "merge".
     */
    public void markPgwControlTeidOrGrekeyMerge() throws JNCException {
        markLeafMerge("pgwControlTeidOrGrekey");
    }

    /**
     * Marks the leaf "pgw-control-teid-or-grekey" with operation "create".
     */
    public void markPgwControlTeidOrGrekeyCreate() throws JNCException {
        markLeafCreate("pgwControlTeidOrGrekey");
    }

    /**
     * Marks the leaf "pgw-control-teid-or-grekey" with operation "delete".
     */
    public void markPgwControlTeidOrGrekeyDelete() throws JNCException {
        markLeafDelete("pgwControlTeidOrGrekey");
    }

    /* Access methods for optional leaf child: "pgw-control-ip-address". */

    /**
     * Gets the value for child leaf "pgw-control-ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getPgwControlIpAddressValue() throws JNCException {
        return (IpAddress)getValue("pgw-control-ip-address");
    }

    /**
     * Sets the value for child leaf "pgw-control-ip-address",
     * using a JNC type value.
     * @param pgwControlIpAddressValue The value to set.
     * @param pgwControlIpAddressValue used during instantiation.
     */
    public void setPgwControlIpAddressValue(IpAddress pgwControlIpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-control-ip-address",
            pgwControlIpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pgw-control-ip-address",
     * using a String value.
     * @param pgwControlIpAddressValue used during instantiation.
     */
    public void setPgwControlIpAddressValue(String pgwControlIpAddressValue)
            throws JNCException {
        setPgwControlIpAddressValue(new IpAddress(pgwControlIpAddressValue));
    }

    /**
     * Unsets the value for child leaf "pgw-control-ip-address".
     */
    public void unsetPgwControlIpAddressValue() throws JNCException {
        delete("pgw-control-ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pgw-control-ip-address" leaf will not have a value.
     */
    public void addPgwControlIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-control-ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pgw-control-ip-address" with operation "replace".
     */
    public void markPgwControlIpAddressReplace() throws JNCException {
        markLeafReplace("pgwControlIpAddress");
    }

    /**
     * Marks the leaf "pgw-control-ip-address" with operation "merge".
     */
    public void markPgwControlIpAddressMerge() throws JNCException {
        markLeafMerge("pgwControlIpAddress");
    }

    /**
     * Marks the leaf "pgw-control-ip-address" with operation "create".
     */
    public void markPgwControlIpAddressCreate() throws JNCException {
        markLeafCreate("pgwControlIpAddress");
    }

    /**
     * Marks the leaf "pgw-control-ip-address" with operation "delete".
     */
    public void markPgwControlIpAddressDelete() throws JNCException {
        markLeafDelete("pgwControlIpAddress");
    }

    /* Access methods for optional leaf child: "session-pgw-logical-name". */

    /**
     * Gets the value for child leaf "session-pgw-logical-name".
     * @return The value of the leaf.
     */
    public YangString getSessionPgwLogicalNameValue() throws JNCException {
        return (YangString)getValue("session-pgw-logical-name");
    }

    /**
     * Sets the value for child leaf "session-pgw-logical-name",
     * using instance of generated typedef class.
     * @param sessionPgwLogicalNameValue The value to set.
     * @param sessionPgwLogicalNameValue used during instantiation.
     */
    public void setSessionPgwLogicalNameValue(YangString sessionPgwLogicalNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-pgw-logical-name",
            sessionPgwLogicalNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "session-pgw-logical-name",
     * using a String value.
     * @param sessionPgwLogicalNameValue used during instantiation.
     */
    public void setSessionPgwLogicalNameValue(String sessionPgwLogicalNameValue)
            throws JNCException {
        setSessionPgwLogicalNameValue(new YangString(sessionPgwLogicalNameValue));
    }

    /**
     * Unsets the value for child leaf "session-pgw-logical-name".
     */
    public void unsetSessionPgwLogicalNameValue() throws JNCException {
        delete("session-pgw-logical-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "session-pgw-logical-name" leaf will not have a value.
     */
    public void addSessionPgwLogicalName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-pgw-logical-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "session-pgw-logical-name" with operation "replace".
     */
    public void markSessionPgwLogicalNameReplace() throws JNCException {
        markLeafReplace("sessionPgwLogicalName");
    }

    /**
     * Marks the leaf "session-pgw-logical-name" with operation "merge".
     */
    public void markSessionPgwLogicalNameMerge() throws JNCException {
        markLeafMerge("sessionPgwLogicalName");
    }

    /**
     * Marks the leaf "session-pgw-logical-name" with operation "create".
     */
    public void markSessionPgwLogicalNameCreate() throws JNCException {
        markLeafCreate("sessionPgwLogicalName");
    }

    /**
     * Marks the leaf "session-pgw-logical-name" with operation "delete".
     */
    public void markSessionPgwLogicalNameDelete() throws JNCException {
        markLeafDelete("sessionPgwLogicalName");
    }

    /* Access methods for optional leaf child: "sgw-control-teid". */

    /**
     * Gets the value for child leaf "sgw-control-teid".
     * @return The value of the leaf.
     */
    public YangUInt32 getSgwControlTeidValue() throws JNCException {
        return (YangUInt32)getValue("sgw-control-teid");
    }

    /**
     * Sets the value for child leaf "sgw-control-teid",
     * using instance of generated typedef class.
     * @param sgwControlTeidValue The value to set.
     * @param sgwControlTeidValue used during instantiation.
     */
    public void setSgwControlTeidValue(YangUInt32 sgwControlTeidValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgw-control-teid",
            sgwControlTeidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sgw-control-teid",
     * using Java primitive values.
     * @param sgwControlTeidValue used during instantiation.
     */
    public void setSgwControlTeidValue(long sgwControlTeidValue)
            throws JNCException {
        setSgwControlTeidValue(new YangUInt32(sgwControlTeidValue));
    }

    /**
     * Sets the value for child leaf "sgw-control-teid",
     * using a String value.
     * @param sgwControlTeidValue used during instantiation.
     */
    public void setSgwControlTeidValue(String sgwControlTeidValue)
            throws JNCException {
        setSgwControlTeidValue(new YangUInt32(sgwControlTeidValue));
    }

    /**
     * Unsets the value for child leaf "sgw-control-teid".
     */
    public void unsetSgwControlTeidValue() throws JNCException {
        delete("sgw-control-teid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sgw-control-teid" leaf will not have a value.
     */
    public void addSgwControlTeid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgw-control-teid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sgw-control-teid" with operation "replace".
     */
    public void markSgwControlTeidReplace() throws JNCException {
        markLeafReplace("sgwControlTeid");
    }

    /**
     * Marks the leaf "sgw-control-teid" with operation "merge".
     */
    public void markSgwControlTeidMerge() throws JNCException {
        markLeafMerge("sgwControlTeid");
    }

    /**
     * Marks the leaf "sgw-control-teid" with operation "create".
     */
    public void markSgwControlTeidCreate() throws JNCException {
        markLeafCreate("sgwControlTeid");
    }

    /**
     * Marks the leaf "sgw-control-teid" with operation "delete".
     */
    public void markSgwControlTeidDelete() throws JNCException {
        markLeafDelete("sgwControlTeid");
    }

    /* Access methods for optional leaf child: "sgw-control-ip-address". */

    /**
     * Gets the value for child leaf "sgw-control-ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getSgwControlIpAddressValue() throws JNCException {
        return (IpAddress)getValue("sgw-control-ip-address");
    }

    /**
     * Sets the value for child leaf "sgw-control-ip-address",
     * using a JNC type value.
     * @param sgwControlIpAddressValue The value to set.
     * @param sgwControlIpAddressValue used during instantiation.
     */
    public void setSgwControlIpAddressValue(IpAddress sgwControlIpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgw-control-ip-address",
            sgwControlIpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sgw-control-ip-address",
     * using a String value.
     * @param sgwControlIpAddressValue used during instantiation.
     */
    public void setSgwControlIpAddressValue(String sgwControlIpAddressValue)
            throws JNCException {
        setSgwControlIpAddressValue(new IpAddress(sgwControlIpAddressValue));
    }

    /**
     * Unsets the value for child leaf "sgw-control-ip-address".
     */
    public void unsetSgwControlIpAddressValue() throws JNCException {
        delete("sgw-control-ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sgw-control-ip-address" leaf will not have a value.
     */
    public void addSgwControlIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgw-control-ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sgw-control-ip-address" with operation "replace".
     */
    public void markSgwControlIpAddressReplace() throws JNCException {
        markLeafReplace("sgwControlIpAddress");
    }

    /**
     * Marks the leaf "sgw-control-ip-address" with operation "merge".
     */
    public void markSgwControlIpAddressMerge() throws JNCException {
        markLeafMerge("sgwControlIpAddress");
    }

    /**
     * Marks the leaf "sgw-control-ip-address" with operation "create".
     */
    public void markSgwControlIpAddressCreate() throws JNCException {
        markLeafCreate("sgwControlIpAddress");
    }

    /**
     * Marks the leaf "sgw-control-ip-address" with operation "delete".
     */
    public void markSgwControlIpAddressDelete() throws JNCException {
        markLeafDelete("sgwControlIpAddress");
    }

    /* Access methods for optional leaf child: "session-sgw-logical-name". */

    /**
     * Gets the value for child leaf "session-sgw-logical-name".
     * @return The value of the leaf.
     */
    public YangString getSessionSgwLogicalNameValue() throws JNCException {
        return (YangString)getValue("session-sgw-logical-name");
    }

    /**
     * Sets the value for child leaf "session-sgw-logical-name",
     * using instance of generated typedef class.
     * @param sessionSgwLogicalNameValue The value to set.
     * @param sessionSgwLogicalNameValue used during instantiation.
     */
    public void setSessionSgwLogicalNameValue(YangString sessionSgwLogicalNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-sgw-logical-name",
            sessionSgwLogicalNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "session-sgw-logical-name",
     * using a String value.
     * @param sessionSgwLogicalNameValue used during instantiation.
     */
    public void setSessionSgwLogicalNameValue(String sessionSgwLogicalNameValue)
            throws JNCException {
        setSessionSgwLogicalNameValue(new YangString(sessionSgwLogicalNameValue));
    }

    /**
     * Unsets the value for child leaf "session-sgw-logical-name".
     */
    public void unsetSessionSgwLogicalNameValue() throws JNCException {
        delete("session-sgw-logical-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "session-sgw-logical-name" leaf will not have a value.
     */
    public void addSessionSgwLogicalName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-sgw-logical-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "session-sgw-logical-name" with operation "replace".
     */
    public void markSessionSgwLogicalNameReplace() throws JNCException {
        markLeafReplace("sessionSgwLogicalName");
    }

    /**
     * Marks the leaf "session-sgw-logical-name" with operation "merge".
     */
    public void markSessionSgwLogicalNameMerge() throws JNCException {
        markLeafMerge("sessionSgwLogicalName");
    }

    /**
     * Marks the leaf "session-sgw-logical-name" with operation "create".
     */
    public void markSessionSgwLogicalNameCreate() throws JNCException {
        markLeafCreate("sessionSgwLogicalName");
    }

    /**
     * Marks the leaf "session-sgw-logical-name" with operation "delete".
     */
    public void markSessionSgwLogicalNameDelete() throws JNCException {
        markLeafDelete("sessionSgwLogicalName");
    }

    /* Access methods for optional leaf child: "apn-ul-ambr-in-use". */

    /**
     * Gets the value for child leaf "apn-ul-ambr-in-use".
     * @return The value of the leaf.
     */
    public YangUInt32 getApnUlAmbrInUseValue() throws JNCException {
        return (YangUInt32)getValue("apn-ul-ambr-in-use");
    }

    /**
     * Sets the value for child leaf "apn-ul-ambr-in-use",
     * using instance of generated typedef class.
     * @param apnUlAmbrInUseValue The value to set.
     * @param apnUlAmbrInUseValue used during instantiation.
     */
    public void setApnUlAmbrInUseValue(YangUInt32 apnUlAmbrInUseValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-ul-ambr-in-use",
            apnUlAmbrInUseValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-ul-ambr-in-use",
     * using Java primitive values.
     * @param apnUlAmbrInUseValue used during instantiation.
     */
    public void setApnUlAmbrInUseValue(long apnUlAmbrInUseValue)
            throws JNCException {
        setApnUlAmbrInUseValue(new YangUInt32(apnUlAmbrInUseValue));
    }

    /**
     * Sets the value for child leaf "apn-ul-ambr-in-use",
     * using a String value.
     * @param apnUlAmbrInUseValue used during instantiation.
     */
    public void setApnUlAmbrInUseValue(String apnUlAmbrInUseValue)
            throws JNCException {
        setApnUlAmbrInUseValue(new YangUInt32(apnUlAmbrInUseValue));
    }

    /**
     * Unsets the value for child leaf "apn-ul-ambr-in-use".
     */
    public void unsetApnUlAmbrInUseValue() throws JNCException {
        delete("apn-ul-ambr-in-use");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-ul-ambr-in-use" leaf will not have a value.
     */
    public void addApnUlAmbrInUse() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-ul-ambr-in-use",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-ul-ambr-in-use" with operation "replace".
     */
    public void markApnUlAmbrInUseReplace() throws JNCException {
        markLeafReplace("apnUlAmbrInUse");
    }

    /**
     * Marks the leaf "apn-ul-ambr-in-use" with operation "merge".
     */
    public void markApnUlAmbrInUseMerge() throws JNCException {
        markLeafMerge("apnUlAmbrInUse");
    }

    /**
     * Marks the leaf "apn-ul-ambr-in-use" with operation "create".
     */
    public void markApnUlAmbrInUseCreate() throws JNCException {
        markLeafCreate("apnUlAmbrInUse");
    }

    /**
     * Marks the leaf "apn-ul-ambr-in-use" with operation "delete".
     */
    public void markApnUlAmbrInUseDelete() throws JNCException {
        markLeafDelete("apnUlAmbrInUse");
    }

    /* Access methods for optional leaf child: "apn-dl-ambr-in-use". */

    /**
     * Gets the value for child leaf "apn-dl-ambr-in-use".
     * @return The value of the leaf.
     */
    public YangUInt32 getApnDlAmbrInUseValue() throws JNCException {
        return (YangUInt32)getValue("apn-dl-ambr-in-use");
    }

    /**
     * Sets the value for child leaf "apn-dl-ambr-in-use",
     * using instance of generated typedef class.
     * @param apnDlAmbrInUseValue The value to set.
     * @param apnDlAmbrInUseValue used during instantiation.
     */
    public void setApnDlAmbrInUseValue(YangUInt32 apnDlAmbrInUseValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-dl-ambr-in-use",
            apnDlAmbrInUseValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-dl-ambr-in-use",
     * using Java primitive values.
     * @param apnDlAmbrInUseValue used during instantiation.
     */
    public void setApnDlAmbrInUseValue(long apnDlAmbrInUseValue)
            throws JNCException {
        setApnDlAmbrInUseValue(new YangUInt32(apnDlAmbrInUseValue));
    }

    /**
     * Sets the value for child leaf "apn-dl-ambr-in-use",
     * using a String value.
     * @param apnDlAmbrInUseValue used during instantiation.
     */
    public void setApnDlAmbrInUseValue(String apnDlAmbrInUseValue)
            throws JNCException {
        setApnDlAmbrInUseValue(new YangUInt32(apnDlAmbrInUseValue));
    }

    /**
     * Unsets the value for child leaf "apn-dl-ambr-in-use".
     */
    public void unsetApnDlAmbrInUseValue() throws JNCException {
        delete("apn-dl-ambr-in-use");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-dl-ambr-in-use" leaf will not have a value.
     */
    public void addApnDlAmbrInUse() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-dl-ambr-in-use",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-dl-ambr-in-use" with operation "replace".
     */
    public void markApnDlAmbrInUseReplace() throws JNCException {
        markLeafReplace("apnDlAmbrInUse");
    }

    /**
     * Marks the leaf "apn-dl-ambr-in-use" with operation "merge".
     */
    public void markApnDlAmbrInUseMerge() throws JNCException {
        markLeafMerge("apnDlAmbrInUse");
    }

    /**
     * Marks the leaf "apn-dl-ambr-in-use" with operation "create".
     */
    public void markApnDlAmbrInUseCreate() throws JNCException {
        markLeafCreate("apnDlAmbrInUse");
    }

    /**
     * Marks the leaf "apn-dl-ambr-in-use" with operation "delete".
     */
    public void markApnDlAmbrInUseDelete() throws JNCException {
        markLeafDelete("apnDlAmbrInUse");
    }

    /* Access methods for optional leaf child: "apn-restriction". */

    /**
     * Gets the value for child leaf "apn-restriction".
     * @return The value of the leaf.
     */
    public YangString getApnRestrictionValue() throws JNCException {
        return (YangString)getValue("apn-restriction");
    }

    /**
     * Sets the value for child leaf "apn-restriction",
     * using instance of generated typedef class.
     * @param apnRestrictionValue The value to set.
     * @param apnRestrictionValue used during instantiation.
     */
    public void setApnRestrictionValue(YangString apnRestrictionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-restriction",
            apnRestrictionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-restriction",
     * using a String value.
     * @param apnRestrictionValue used during instantiation.
     */
    public void setApnRestrictionValue(String apnRestrictionValue)
            throws JNCException {
        setApnRestrictionValue(new YangString(apnRestrictionValue));
    }

    /**
     * Unsets the value for child leaf "apn-restriction".
     */
    public void unsetApnRestrictionValue() throws JNCException {
        delete("apn-restriction");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-restriction" leaf will not have a value.
     */
    public void addApnRestriction() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-restriction",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-restriction" with operation "replace".
     */
    public void markApnRestrictionReplace() throws JNCException {
        markLeafReplace("apnRestriction");
    }

    /**
     * Marks the leaf "apn-restriction" with operation "merge".
     */
    public void markApnRestrictionMerge() throws JNCException {
        markLeafMerge("apnRestriction");
    }

    /**
     * Marks the leaf "apn-restriction" with operation "create".
     */
    public void markApnRestrictionCreate() throws JNCException {
        markLeafCreate("apnRestriction");
    }

    /**
     * Marks the leaf "apn-restriction" with operation "delete".
     */
    public void markApnRestrictionDelete() throws JNCException {
        markLeafDelete("apnRestriction");
    }

    /* Access methods for optional leaf child: "local-control-teid". */

    /**
     * Gets the value for child leaf "local-control-teid".
     * @return The value of the leaf.
     */
    public YangUInt32 getLocalControlTeidValue() throws JNCException {
        return (YangUInt32)getValue("local-control-teid");
    }

    /**
     * Sets the value for child leaf "local-control-teid",
     * using instance of generated typedef class.
     * @param localControlTeidValue The value to set.
     * @param localControlTeidValue used during instantiation.
     */
    public void setLocalControlTeidValue(YangUInt32 localControlTeidValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-control-teid",
            localControlTeidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-control-teid",
     * using Java primitive values.
     * @param localControlTeidValue used during instantiation.
     */
    public void setLocalControlTeidValue(long localControlTeidValue)
            throws JNCException {
        setLocalControlTeidValue(new YangUInt32(localControlTeidValue));
    }

    /**
     * Sets the value for child leaf "local-control-teid",
     * using a String value.
     * @param localControlTeidValue used during instantiation.
     */
    public void setLocalControlTeidValue(String localControlTeidValue)
            throws JNCException {
        setLocalControlTeidValue(new YangUInt32(localControlTeidValue));
    }

    /**
     * Unsets the value for child leaf "local-control-teid".
     */
    public void unsetLocalControlTeidValue() throws JNCException {
        delete("local-control-teid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-control-teid" leaf will not have a value.
     */
    public void addLocalControlTeid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-control-teid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-control-teid" with operation "replace".
     */
    public void markLocalControlTeidReplace() throws JNCException {
        markLeafReplace("localControlTeid");
    }

    /**
     * Marks the leaf "local-control-teid" with operation "merge".
     */
    public void markLocalControlTeidMerge() throws JNCException {
        markLeafMerge("localControlTeid");
    }

    /**
     * Marks the leaf "local-control-teid" with operation "create".
     */
    public void markLocalControlTeidCreate() throws JNCException {
        markLeafCreate("localControlTeid");
    }

    /**
     * Marks the leaf "local-control-teid" with operation "delete".
     */
    public void markLocalControlTeidDelete() throws JNCException {
        markLeafDelete("localControlTeid");
    }

    /* Access methods for optional leaf child: "session-s5-s8-protocoltype". */

    /**
     * Gets the value for child leaf "session-s5-s8-protocoltype".
     * @return The value of the leaf.
     */
    public YangString getSessionS5S8ProtocoltypeValue() throws JNCException {
        return (YangString)getValue("session-s5-s8-protocoltype");
    }

    /**
     * Sets the value for child leaf "session-s5-s8-protocoltype",
     * using instance of generated typedef class.
     * @param sessionS5S8ProtocoltypeValue The value to set.
     * @param sessionS5S8ProtocoltypeValue used during instantiation.
     */
    public void setSessionS5S8ProtocoltypeValue(YangString sessionS5S8ProtocoltypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-s5-s8-protocoltype",
            sessionS5S8ProtocoltypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "session-s5-s8-protocoltype",
     * using a String value.
     * @param sessionS5S8ProtocoltypeValue used during instantiation.
     */
    public void setSessionS5S8ProtocoltypeValue(String sessionS5S8ProtocoltypeValue)
            throws JNCException {
        setSessionS5S8ProtocoltypeValue(new YangString(sessionS5S8ProtocoltypeValue));
    }

    /**
     * Unsets the value for child leaf "session-s5-s8-protocoltype".
     */
    public void unsetSessionS5S8ProtocoltypeValue() throws JNCException {
        delete("session-s5-s8-protocoltype");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "session-s5-s8-protocoltype" leaf will not have a value.
     */
    public void addSessionS5S8Protocoltype() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-s5-s8-protocoltype",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "session-s5-s8-protocoltype" with operation "replace".
     */
    public void markSessionS5S8ProtocoltypeReplace() throws JNCException {
        markLeafReplace("sessionS5S8Protocoltype");
    }

    /**
     * Marks the leaf "session-s5-s8-protocoltype" with operation "merge".
     */
    public void markSessionS5S8ProtocoltypeMerge() throws JNCException {
        markLeafMerge("sessionS5S8Protocoltype");
    }

    /**
     * Marks the leaf "session-s5-s8-protocoltype" with operation "create".
     */
    public void markSessionS5S8ProtocoltypeCreate() throws JNCException {
        markLeafCreate("sessionS5S8Protocoltype");
    }

    /**
     * Marks the leaf "session-s5-s8-protocoltype" with operation "delete".
     */
    public void markSessionS5S8ProtocoltypeDelete() throws JNCException {
        markLeafDelete("sessionS5S8Protocoltype");
    }

    /* Access methods for optional leaf child: "datapath-ggsn-address". */

    /**
     * Gets the value for child leaf "datapath-ggsn-address".
     * @return The value of the leaf.
     */
    public IpAddress getDatapathGgsnAddressValue() throws JNCException {
        return (IpAddress)getValue("datapath-ggsn-address");
    }

    /**
     * Sets the value for child leaf "datapath-ggsn-address",
     * using a JNC type value.
     * @param datapathGgsnAddressValue The value to set.
     * @param datapathGgsnAddressValue used during instantiation.
     */
    public void setDatapathGgsnAddressValue(IpAddress datapathGgsnAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "datapath-ggsn-address",
            datapathGgsnAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "datapath-ggsn-address",
     * using a String value.
     * @param datapathGgsnAddressValue used during instantiation.
     */
    public void setDatapathGgsnAddressValue(String datapathGgsnAddressValue)
            throws JNCException {
        setDatapathGgsnAddressValue(new IpAddress(datapathGgsnAddressValue));
    }

    /**
     * Unsets the value for child leaf "datapath-ggsn-address".
     */
    public void unsetDatapathGgsnAddressValue() throws JNCException {
        delete("datapath-ggsn-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "datapath-ggsn-address" leaf will not have a value.
     */
    public void addDatapathGgsnAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "datapath-ggsn-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "datapath-ggsn-address" with operation "replace".
     */
    public void markDatapathGgsnAddressReplace() throws JNCException {
        markLeafReplace("datapathGgsnAddress");
    }

    /**
     * Marks the leaf "datapath-ggsn-address" with operation "merge".
     */
    public void markDatapathGgsnAddressMerge() throws JNCException {
        markLeafMerge("datapathGgsnAddress");
    }

    /**
     * Marks the leaf "datapath-ggsn-address" with operation "create".
     */
    public void markDatapathGgsnAddressCreate() throws JNCException {
        markLeafCreate("datapathGgsnAddress");
    }

    /**
     * Marks the leaf "datapath-ggsn-address" with operation "delete".
     */
    public void markDatapathGgsnAddressDelete() throws JNCException {
        markLeafDelete("datapathGgsnAddress");
    }

    /* Access methods for optional leaf child: "signaling-ggsn-address". */

    /**
     * Gets the value for child leaf "signaling-ggsn-address".
     * @return The value of the leaf.
     */
    public IpAddress getSignalingGgsnAddressValue() throws JNCException {
        return (IpAddress)getValue("signaling-ggsn-address");
    }

    /**
     * Sets the value for child leaf "signaling-ggsn-address",
     * using a JNC type value.
     * @param signalingGgsnAddressValue The value to set.
     * @param signalingGgsnAddressValue used during instantiation.
     */
    public void setSignalingGgsnAddressValue(IpAddress signalingGgsnAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "signaling-ggsn-address",
            signalingGgsnAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "signaling-ggsn-address",
     * using a String value.
     * @param signalingGgsnAddressValue used during instantiation.
     */
    public void setSignalingGgsnAddressValue(String signalingGgsnAddressValue)
            throws JNCException {
        setSignalingGgsnAddressValue(new IpAddress(signalingGgsnAddressValue));
    }

    /**
     * Unsets the value for child leaf "signaling-ggsn-address".
     */
    public void unsetSignalingGgsnAddressValue() throws JNCException {
        delete("signaling-ggsn-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "signaling-ggsn-address" leaf will not have a value.
     */
    public void addSignalingGgsnAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "signaling-ggsn-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "signaling-ggsn-address" with operation "replace".
     */
    public void markSignalingGgsnAddressReplace() throws JNCException {
        markLeafReplace("signalingGgsnAddress");
    }

    /**
     * Marks the leaf "signaling-ggsn-address" with operation "merge".
     */
    public void markSignalingGgsnAddressMerge() throws JNCException {
        markLeafMerge("signalingGgsnAddress");
    }

    /**
     * Marks the leaf "signaling-ggsn-address" with operation "create".
     */
    public void markSignalingGgsnAddressCreate() throws JNCException {
        markLeafCreate("signalingGgsnAddress");
    }

    /**
     * Marks the leaf "signaling-ggsn-address" with operation "delete".
     */
    public void markSignalingGgsnAddressDelete() throws JNCException {
        markLeafDelete("signalingGgsnAddress");
    }

    /* Access methods for optional leaf child: "session-subscription-context-identifier". */

    /**
     * Gets the value for child leaf "session-subscription-context-identifier".
     * @return The value of the leaf.
     */
    public YangUInt32 getSessionSubscriptionContextIdentifierValue()
            throws JNCException {
        return (YangUInt32)getValue("session-subscription-context-identifier");
    }

    /**
     * Sets the value for child leaf "session-subscription-context-identifier",
     * using instance of generated typedef class.
     * @param sessionSubscriptionContextIdentifierValue The value to set.
     * @param sessionSubscriptionContextIdentifierValue used during instantiation.
     */
    public void setSessionSubscriptionContextIdentifierValue(YangUInt32 sessionSubscriptionContextIdentifierValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-subscription-context-identifier",
            sessionSubscriptionContextIdentifierValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "session-subscription-context-identifier",
     * using Java primitive values.
     * @param sessionSubscriptionContextIdentifierValue used during instantiation.
     */
    public void setSessionSubscriptionContextIdentifierValue(long sessionSubscriptionContextIdentifierValue)
            throws JNCException {
        setSessionSubscriptionContextIdentifierValue(new YangUInt32(sessionSubscriptionContextIdentifierValue));
    }

    /**
     * Sets the value for child leaf "session-subscription-context-identifier",
     * using a String value.
     * @param sessionSubscriptionContextIdentifierValue used during instantiation.
     */
    public void setSessionSubscriptionContextIdentifierValue(String sessionSubscriptionContextIdentifierValue)
            throws JNCException {
        setSessionSubscriptionContextIdentifierValue(new YangUInt32(sessionSubscriptionContextIdentifierValue));
    }

    /**
     * Unsets the value for child leaf "session-subscription-context-identifier".
     */
    public void unsetSessionSubscriptionContextIdentifierValue()
            throws JNCException {
        delete("session-subscription-context-identifier");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "session-subscription-context-identifier" leaf will not have a value.
     */
    public void addSessionSubscriptionContextIdentifier() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-subscription-context-identifier",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "session-subscription-context-identifier" with operation "replace".
     */
    public void markSessionSubscriptionContextIdentifierReplace()
            throws JNCException {
        markLeafReplace("sessionSubscriptionContextIdentifier");
    }

    /**
     * Marks the leaf "session-subscription-context-identifier" with operation "merge".
     */
    public void markSessionSubscriptionContextIdentifierMerge()
            throws JNCException {
        markLeafMerge("sessionSubscriptionContextIdentifier");
    }

    /**
     * Marks the leaf "session-subscription-context-identifier" with operation "create".
     */
    public void markSessionSubscriptionContextIdentifierCreate()
            throws JNCException {
        markLeafCreate("sessionSubscriptionContextIdentifier");
    }

    /**
     * Marks the leaf "session-subscription-context-identifier" with operation "delete".
     */
    public void markSessionSubscriptionContextIdentifierDelete()
            throws JNCException {
        markLeafDelete("sessionSubscriptionContextIdentifier");
    }

    /* Access methods for optional leaf child: "pdp-type". */

    /**
     * Gets the value for child leaf "pdp-type".
     * @return The value of the leaf.
     */
    public YangString getPdpTypeValue() throws JNCException {
        return (YangString)getValue("pdp-type");
    }

    /**
     * Sets the value for child leaf "pdp-type",
     * using instance of generated typedef class.
     * @param pdpTypeValue The value to set.
     * @param pdpTypeValue used during instantiation.
     */
    public void setPdpTypeValue(YangString pdpTypeValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdp-type",
            pdpTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pdp-type",
     * using a String value.
     * @param pdpTypeValue used during instantiation.
     */
    public void setPdpTypeValue(String pdpTypeValue) throws JNCException {
        setPdpTypeValue(new YangString(pdpTypeValue));
    }

    /**
     * Unsets the value for child leaf "pdp-type".
     */
    public void unsetPdpTypeValue() throws JNCException {
        delete("pdp-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pdp-type" leaf will not have a value.
     */
    public void addPdpType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdp-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pdp-type" with operation "replace".
     */
    public void markPdpTypeReplace() throws JNCException {
        markLeafReplace("pdpType");
    }

    /**
     * Marks the leaf "pdp-type" with operation "merge".
     */
    public void markPdpTypeMerge() throws JNCException {
        markLeafMerge("pdpType");
    }

    /**
     * Marks the leaf "pdp-type" with operation "create".
     */
    public void markPdpTypeCreate() throws JNCException {
        markLeafCreate("pdpType");
    }

    /**
     * Marks the leaf "pdp-type" with operation "delete".
     */
    public void markPdpTypeDelete() throws JNCException {
        markLeafDelete("pdpType");
    }

    /* Access methods for optional leaf child: "ggsn-remote-teid". */

    /**
     * Gets the value for child leaf "ggsn-remote-teid".
     * @return The value of the leaf.
     */
    public YangUInt32 getGgsnRemoteTeidValue() throws JNCException {
        return (YangUInt32)getValue("ggsn-remote-teid");
    }

    /**
     * Sets the value for child leaf "ggsn-remote-teid",
     * using instance of generated typedef class.
     * @param ggsnRemoteTeidValue The value to set.
     * @param ggsnRemoteTeidValue used during instantiation.
     */
    public void setGgsnRemoteTeidValue(YangUInt32 ggsnRemoteTeidValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ggsn-remote-teid",
            ggsnRemoteTeidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ggsn-remote-teid",
     * using Java primitive values.
     * @param ggsnRemoteTeidValue used during instantiation.
     */
    public void setGgsnRemoteTeidValue(long ggsnRemoteTeidValue)
            throws JNCException {
        setGgsnRemoteTeidValue(new YangUInt32(ggsnRemoteTeidValue));
    }

    /**
     * Sets the value for child leaf "ggsn-remote-teid",
     * using a String value.
     * @param ggsnRemoteTeidValue used during instantiation.
     */
    public void setGgsnRemoteTeidValue(String ggsnRemoteTeidValue)
            throws JNCException {
        setGgsnRemoteTeidValue(new YangUInt32(ggsnRemoteTeidValue));
    }

    /**
     * Unsets the value for child leaf "ggsn-remote-teid".
     */
    public void unsetGgsnRemoteTeidValue() throws JNCException {
        delete("ggsn-remote-teid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ggsn-remote-teid" leaf will not have a value.
     */
    public void addGgsnRemoteTeid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ggsn-remote-teid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ggsn-remote-teid" with operation "replace".
     */
    public void markGgsnRemoteTeidReplace() throws JNCException {
        markLeafReplace("ggsnRemoteTeid");
    }

    /**
     * Marks the leaf "ggsn-remote-teid" with operation "merge".
     */
    public void markGgsnRemoteTeidMerge() throws JNCException {
        markLeafMerge("ggsnRemoteTeid");
    }

    /**
     * Marks the leaf "ggsn-remote-teid" with operation "create".
     */
    public void markGgsnRemoteTeidCreate() throws JNCException {
        markLeafCreate("ggsnRemoteTeid");
    }

    /**
     * Marks the leaf "ggsn-remote-teid" with operation "delete".
     */
    public void markGgsnRemoteTeidDelete() throws JNCException {
        markLeafDelete("ggsnRemoteTeid");
    }

    /* Access methods for optional leaf child: "ggsn-local-teid". */

    /**
     * Gets the value for child leaf "ggsn-local-teid".
     * @return The value of the leaf.
     */
    public YangUInt32 getGgsnLocalTeidValue() throws JNCException {
        return (YangUInt32)getValue("ggsn-local-teid");
    }

    /**
     * Sets the value for child leaf "ggsn-local-teid",
     * using instance of generated typedef class.
     * @param ggsnLocalTeidValue The value to set.
     * @param ggsnLocalTeidValue used during instantiation.
     */
    public void setGgsnLocalTeidValue(YangUInt32 ggsnLocalTeidValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ggsn-local-teid",
            ggsnLocalTeidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ggsn-local-teid",
     * using Java primitive values.
     * @param ggsnLocalTeidValue used during instantiation.
     */
    public void setGgsnLocalTeidValue(long ggsnLocalTeidValue)
            throws JNCException {
        setGgsnLocalTeidValue(new YangUInt32(ggsnLocalTeidValue));
    }

    /**
     * Sets the value for child leaf "ggsn-local-teid",
     * using a String value.
     * @param ggsnLocalTeidValue used during instantiation.
     */
    public void setGgsnLocalTeidValue(String ggsnLocalTeidValue)
            throws JNCException {
        setGgsnLocalTeidValue(new YangUInt32(ggsnLocalTeidValue));
    }

    /**
     * Unsets the value for child leaf "ggsn-local-teid".
     */
    public void unsetGgsnLocalTeidValue() throws JNCException {
        delete("ggsn-local-teid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ggsn-local-teid" leaf will not have a value.
     */
    public void addGgsnLocalTeid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ggsn-local-teid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ggsn-local-teid" with operation "replace".
     */
    public void markGgsnLocalTeidReplace() throws JNCException {
        markLeafReplace("ggsnLocalTeid");
    }

    /**
     * Marks the leaf "ggsn-local-teid" with operation "merge".
     */
    public void markGgsnLocalTeidMerge() throws JNCException {
        markLeafMerge("ggsnLocalTeid");
    }

    /**
     * Marks the leaf "ggsn-local-teid" with operation "create".
     */
    public void markGgsnLocalTeidCreate() throws JNCException {
        markLeafCreate("ggsnLocalTeid");
    }

    /**
     * Marks the leaf "ggsn-local-teid" with operation "delete".
     */
    public void markGgsnLocalTeidDelete() throws JNCException {
        markLeafDelete("ggsnLocalTeid");
    }

    /* Access methods for optional leaf child: "signaling-ggsn-teid". */

    /**
     * Gets the value for child leaf "signaling-ggsn-teid".
     * @return The value of the leaf.
     */
    public YangUInt32 getSignalingGgsnTeidValue() throws JNCException {
        return (YangUInt32)getValue("signaling-ggsn-teid");
    }

    /**
     * Sets the value for child leaf "signaling-ggsn-teid",
     * using instance of generated typedef class.
     * @param signalingGgsnTeidValue The value to set.
     * @param signalingGgsnTeidValue used during instantiation.
     */
    public void setSignalingGgsnTeidValue(YangUInt32 signalingGgsnTeidValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "signaling-ggsn-teid",
            signalingGgsnTeidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "signaling-ggsn-teid",
     * using Java primitive values.
     * @param signalingGgsnTeidValue used during instantiation.
     */
    public void setSignalingGgsnTeidValue(long signalingGgsnTeidValue)
            throws JNCException {
        setSignalingGgsnTeidValue(new YangUInt32(signalingGgsnTeidValue));
    }

    /**
     * Sets the value for child leaf "signaling-ggsn-teid",
     * using a String value.
     * @param signalingGgsnTeidValue used during instantiation.
     */
    public void setSignalingGgsnTeidValue(String signalingGgsnTeidValue)
            throws JNCException {
        setSignalingGgsnTeidValue(new YangUInt32(signalingGgsnTeidValue));
    }

    /**
     * Unsets the value for child leaf "signaling-ggsn-teid".
     */
    public void unsetSignalingGgsnTeidValue() throws JNCException {
        delete("signaling-ggsn-teid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "signaling-ggsn-teid" leaf will not have a value.
     */
    public void addSignalingGgsnTeid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "signaling-ggsn-teid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "signaling-ggsn-teid" with operation "replace".
     */
    public void markSignalingGgsnTeidReplace() throws JNCException {
        markLeafReplace("signalingGgsnTeid");
    }

    /**
     * Marks the leaf "signaling-ggsn-teid" with operation "merge".
     */
    public void markSignalingGgsnTeidMerge() throws JNCException {
        markLeafMerge("signalingGgsnTeid");
    }

    /**
     * Marks the leaf "signaling-ggsn-teid" with operation "create".
     */
    public void markSignalingGgsnTeidCreate() throws JNCException {
        markLeafCreate("signalingGgsnTeid");
    }

    /**
     * Marks the leaf "signaling-ggsn-teid" with operation "delete".
     */
    public void markSignalingGgsnTeidDelete() throws JNCException {
        markLeafDelete("signalingGgsnTeid");
    }

    /* Access methods for optional leaf child: "datapath-ran-address". */

    /**
     * Gets the value for child leaf "datapath-ran-address".
     * @return The value of the leaf.
     */
    public IpAddress getDatapathRanAddressValue() throws JNCException {
        return (IpAddress)getValue("datapath-ran-address");
    }

    /**
     * Sets the value for child leaf "datapath-ran-address",
     * using a JNC type value.
     * @param datapathRanAddressValue The value to set.
     * @param datapathRanAddressValue used during instantiation.
     */
    public void setDatapathRanAddressValue(IpAddress datapathRanAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "datapath-ran-address",
            datapathRanAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "datapath-ran-address",
     * using a String value.
     * @param datapathRanAddressValue used during instantiation.
     */
    public void setDatapathRanAddressValue(String datapathRanAddressValue)
            throws JNCException {
        setDatapathRanAddressValue(new IpAddress(datapathRanAddressValue));
    }

    /**
     * Unsets the value for child leaf "datapath-ran-address".
     */
    public void unsetDatapathRanAddressValue() throws JNCException {
        delete("datapath-ran-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "datapath-ran-address" leaf will not have a value.
     */
    public void addDatapathRanAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "datapath-ran-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "datapath-ran-address" with operation "replace".
     */
    public void markDatapathRanAddressReplace() throws JNCException {
        markLeafReplace("datapathRanAddress");
    }

    /**
     * Marks the leaf "datapath-ran-address" with operation "merge".
     */
    public void markDatapathRanAddressMerge() throws JNCException {
        markLeafMerge("datapathRanAddress");
    }

    /**
     * Marks the leaf "datapath-ran-address" with operation "create".
     */
    public void markDatapathRanAddressCreate() throws JNCException {
        markLeafCreate("datapathRanAddress");
    }

    /**
     * Marks the leaf "datapath-ran-address" with operation "delete".
     */
    public void markDatapathRanAddressDelete() throws JNCException {
        markLeafDelete("datapathRanAddress");
    }

    /* Access methods for optional leaf child: "ran-remote-teid". */

    /**
     * Gets the value for child leaf "ran-remote-teid".
     * @return The value of the leaf.
     */
    public YangUInt32 getRanRemoteTeidValue() throws JNCException {
        return (YangUInt32)getValue("ran-remote-teid");
    }

    /**
     * Sets the value for child leaf "ran-remote-teid",
     * using instance of generated typedef class.
     * @param ranRemoteTeidValue The value to set.
     * @param ranRemoteTeidValue used during instantiation.
     */
    public void setRanRemoteTeidValue(YangUInt32 ranRemoteTeidValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ran-remote-teid",
            ranRemoteTeidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ran-remote-teid",
     * using Java primitive values.
     * @param ranRemoteTeidValue used during instantiation.
     */
    public void setRanRemoteTeidValue(long ranRemoteTeidValue)
            throws JNCException {
        setRanRemoteTeidValue(new YangUInt32(ranRemoteTeidValue));
    }

    /**
     * Sets the value for child leaf "ran-remote-teid",
     * using a String value.
     * @param ranRemoteTeidValue used during instantiation.
     */
    public void setRanRemoteTeidValue(String ranRemoteTeidValue)
            throws JNCException {
        setRanRemoteTeidValue(new YangUInt32(ranRemoteTeidValue));
    }

    /**
     * Unsets the value for child leaf "ran-remote-teid".
     */
    public void unsetRanRemoteTeidValue() throws JNCException {
        delete("ran-remote-teid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ran-remote-teid" leaf will not have a value.
     */
    public void addRanRemoteTeid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ran-remote-teid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ran-remote-teid" with operation "replace".
     */
    public void markRanRemoteTeidReplace() throws JNCException {
        markLeafReplace("ranRemoteTeid");
    }

    /**
     * Marks the leaf "ran-remote-teid" with operation "merge".
     */
    public void markRanRemoteTeidMerge() throws JNCException {
        markLeafMerge("ranRemoteTeid");
    }

    /**
     * Marks the leaf "ran-remote-teid" with operation "create".
     */
    public void markRanRemoteTeidCreate() throws JNCException {
        markLeafCreate("ranRemoteTeid");
    }

    /**
     * Marks the leaf "ran-remote-teid" with operation "delete".
     */
    public void markRanRemoteTeidDelete() throws JNCException {
        markLeafDelete("ranRemoteTeid");
    }

    /* Access methods for optional leaf child: "ran-local-teid". */

    /**
     * Gets the value for child leaf "ran-local-teid".
     * @return The value of the leaf.
     */
    public YangUInt32 getRanLocalTeidValue() throws JNCException {
        return (YangUInt32)getValue("ran-local-teid");
    }

    /**
     * Sets the value for child leaf "ran-local-teid",
     * using instance of generated typedef class.
     * @param ranLocalTeidValue The value to set.
     * @param ranLocalTeidValue used during instantiation.
     */
    public void setRanLocalTeidValue(YangUInt32 ranLocalTeidValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ran-local-teid",
            ranLocalTeidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ran-local-teid",
     * using Java primitive values.
     * @param ranLocalTeidValue used during instantiation.
     */
    public void setRanLocalTeidValue(long ranLocalTeidValue)
            throws JNCException {
        setRanLocalTeidValue(new YangUInt32(ranLocalTeidValue));
    }

    /**
     * Sets the value for child leaf "ran-local-teid",
     * using a String value.
     * @param ranLocalTeidValue used during instantiation.
     */
    public void setRanLocalTeidValue(String ranLocalTeidValue)
            throws JNCException {
        setRanLocalTeidValue(new YangUInt32(ranLocalTeidValue));
    }

    /**
     * Unsets the value for child leaf "ran-local-teid".
     */
    public void unsetRanLocalTeidValue() throws JNCException {
        delete("ran-local-teid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ran-local-teid" leaf will not have a value.
     */
    public void addRanLocalTeid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ran-local-teid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ran-local-teid" with operation "replace".
     */
    public void markRanLocalTeidReplace() throws JNCException {
        markLeafReplace("ranLocalTeid");
    }

    /**
     * Marks the leaf "ran-local-teid" with operation "merge".
     */
    public void markRanLocalTeidMerge() throws JNCException {
        markLeafMerge("ranLocalTeid");
    }

    /**
     * Marks the leaf "ran-local-teid" with operation "create".
     */
    public void markRanLocalTeidCreate() throws JNCException {
        markLeafCreate("ranLocalTeid");
    }

    /**
     * Marks the leaf "ran-local-teid" with operation "delete".
     */
    public void markRanLocalTeidDelete() throws JNCException {
        markLeafDelete("ranLocalTeid");
    }

    /* Access methods for optional leaf child: "session-packet-flow-identifier". */

    /**
     * Gets the value for child leaf "session-packet-flow-identifier".
     * @return The value of the leaf.
     */
    public YangUInt32 getSessionPacketFlowIdentifierValue() throws JNCException {
        return (YangUInt32)getValue("session-packet-flow-identifier");
    }

    /**
     * Sets the value for child leaf "session-packet-flow-identifier",
     * using instance of generated typedef class.
     * @param sessionPacketFlowIdentifierValue The value to set.
     * @param sessionPacketFlowIdentifierValue used during instantiation.
     */
    public void setSessionPacketFlowIdentifierValue(YangUInt32 sessionPacketFlowIdentifierValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-packet-flow-identifier",
            sessionPacketFlowIdentifierValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "session-packet-flow-identifier",
     * using Java primitive values.
     * @param sessionPacketFlowIdentifierValue used during instantiation.
     */
    public void setSessionPacketFlowIdentifierValue(long sessionPacketFlowIdentifierValue)
            throws JNCException {
        setSessionPacketFlowIdentifierValue(new YangUInt32(sessionPacketFlowIdentifierValue));
    }

    /**
     * Sets the value for child leaf "session-packet-flow-identifier",
     * using a String value.
     * @param sessionPacketFlowIdentifierValue used during instantiation.
     */
    public void setSessionPacketFlowIdentifierValue(String sessionPacketFlowIdentifierValue)
            throws JNCException {
        setSessionPacketFlowIdentifierValue(new YangUInt32(sessionPacketFlowIdentifierValue));
    }

    /**
     * Unsets the value for child leaf "session-packet-flow-identifier".
     */
    public void unsetSessionPacketFlowIdentifierValue() throws JNCException {
        delete("session-packet-flow-identifier");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "session-packet-flow-identifier" leaf will not have a value.
     */
    public void addSessionPacketFlowIdentifier() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-packet-flow-identifier",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "session-packet-flow-identifier" with operation "replace".
     */
    public void markSessionPacketFlowIdentifierReplace() throws JNCException {
        markLeafReplace("sessionPacketFlowIdentifier");
    }

    /**
     * Marks the leaf "session-packet-flow-identifier" with operation "merge".
     */
    public void markSessionPacketFlowIdentifierMerge() throws JNCException {
        markLeafMerge("sessionPacketFlowIdentifier");
    }

    /**
     * Marks the leaf "session-packet-flow-identifier" with operation "create".
     */
    public void markSessionPacketFlowIdentifierCreate() throws JNCException {
        markLeafCreate("sessionPacketFlowIdentifier");
    }

    /**
     * Marks the leaf "session-packet-flow-identifier" with operation "delete".
     */
    public void markSessionPacketFlowIdentifierDelete() throws JNCException {
        markLeafDelete("sessionPacketFlowIdentifier");
    }

    /* Access methods for optional leaf child: "session-llc-sapi". */

    /**
     * Gets the value for child leaf "session-llc-sapi".
     * @return The value of the leaf.
     */
    public YangUInt32 getSessionLlcSapiValue() throws JNCException {
        return (YangUInt32)getValue("session-llc-sapi");
    }

    /**
     * Sets the value for child leaf "session-llc-sapi",
     * using instance of generated typedef class.
     * @param sessionLlcSapiValue The value to set.
     * @param sessionLlcSapiValue used during instantiation.
     */
    public void setSessionLlcSapiValue(YangUInt32 sessionLlcSapiValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-llc-sapi",
            sessionLlcSapiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "session-llc-sapi",
     * using Java primitive values.
     * @param sessionLlcSapiValue used during instantiation.
     */
    public void setSessionLlcSapiValue(long sessionLlcSapiValue)
            throws JNCException {
        setSessionLlcSapiValue(new YangUInt32(sessionLlcSapiValue));
    }

    /**
     * Sets the value for child leaf "session-llc-sapi",
     * using a String value.
     * @param sessionLlcSapiValue used during instantiation.
     */
    public void setSessionLlcSapiValue(String sessionLlcSapiValue)
            throws JNCException {
        setSessionLlcSapiValue(new YangUInt32(sessionLlcSapiValue));
    }

    /**
     * Unsets the value for child leaf "session-llc-sapi".
     */
    public void unsetSessionLlcSapiValue() throws JNCException {
        delete("session-llc-sapi");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "session-llc-sapi" leaf will not have a value.
     */
    public void addSessionLlcSapi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-llc-sapi",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "session-llc-sapi" with operation "replace".
     */
    public void markSessionLlcSapiReplace() throws JNCException {
        markLeafReplace("sessionLlcSapi");
    }

    /**
     * Marks the leaf "session-llc-sapi" with operation "merge".
     */
    public void markSessionLlcSapiMerge() throws JNCException {
        markLeafMerge("sessionLlcSapi");
    }

    /**
     * Marks the leaf "session-llc-sapi" with operation "create".
     */
    public void markSessionLlcSapiCreate() throws JNCException {
        markLeafCreate("sessionLlcSapi");
    }

    /**
     * Marks the leaf "session-llc-sapi" with operation "delete".
     */
    public void markSessionLlcSapiDelete() throws JNCException {
        markLeafDelete("sessionLlcSapi");
    }

    /* Access methods for optional leaf child: "mvno". */

    /**
     * Gets the value for child leaf "mvno".
     * @return The value of the leaf.
     */
    public YangString getMvnoValue() throws JNCException {
        return (YangString)getValue("mvno");
    }

    /**
     * Sets the value for child leaf "mvno",
     * using instance of generated typedef class.
     * @param mvnoValue The value to set.
     * @param mvnoValue used during instantiation.
     */
    public void setMvnoValue(YangString mvnoValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mvno",
            mvnoValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mvno",
     * using a String value.
     * @param mvnoValue used during instantiation.
     */
    public void setMvnoValue(String mvnoValue) throws JNCException {
        setMvnoValue(new YangString(mvnoValue));
    }

    /**
     * Unsets the value for child leaf "mvno".
     */
    public void unsetMvnoValue() throws JNCException {
        delete("mvno");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mvno" leaf will not have a value.
     */
    public void addMvno() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mvno",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mvno" with operation "replace".
     */
    public void markMvnoReplace() throws JNCException {
        markLeafReplace("mvno");
    }

    /**
     * Marks the leaf "mvno" with operation "merge".
     */
    public void markMvnoMerge() throws JNCException {
        markLeafMerge("mvno");
    }

    /**
     * Marks the leaf "mvno" with operation "create".
     */
    public void markMvnoCreate() throws JNCException {
        markLeafCreate("mvno");
    }

    /**
     * Marks the leaf "mvno" with operation "delete".
     */
    public void markMvnoDelete() throws JNCException {
        markLeafDelete("mvno");
    }

    /* Access methods for optional leaf child: "local-eps-qos-entry". */

    /**
     * Gets the value for child leaf "local-eps-qos-entry".
     * @return The value of the leaf.
     */
    public YangString getLocalEpsQosEntryValue() throws JNCException {
        return (YangString)getValue("local-eps-qos-entry");
    }

    /**
     * Sets the value for child leaf "local-eps-qos-entry",
     * using instance of generated typedef class.
     * @param localEpsQosEntryValue The value to set.
     * @param localEpsQosEntryValue used during instantiation.
     */
    public void setLocalEpsQosEntryValue(YangString localEpsQosEntryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-eps-qos-entry",
            localEpsQosEntryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-eps-qos-entry",
     * using a String value.
     * @param localEpsQosEntryValue used during instantiation.
     */
    public void setLocalEpsQosEntryValue(String localEpsQosEntryValue)
            throws JNCException {
        setLocalEpsQosEntryValue(new YangString(localEpsQosEntryValue));
    }

    /**
     * Unsets the value for child leaf "local-eps-qos-entry".
     */
    public void unsetLocalEpsQosEntryValue() throws JNCException {
        delete("local-eps-qos-entry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-eps-qos-entry" leaf will not have a value.
     */
    public void addLocalEpsQosEntry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-eps-qos-entry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-eps-qos-entry" with operation "replace".
     */
    public void markLocalEpsQosEntryReplace() throws JNCException {
        markLeafReplace("localEpsQosEntry");
    }

    /**
     * Marks the leaf "local-eps-qos-entry" with operation "merge".
     */
    public void markLocalEpsQosEntryMerge() throws JNCException {
        markLeafMerge("localEpsQosEntry");
    }

    /**
     * Marks the leaf "local-eps-qos-entry" with operation "create".
     */
    public void markLocalEpsQosEntryCreate() throws JNCException {
        markLeafCreate("localEpsQosEntry");
    }

    /**
     * Marks the leaf "local-eps-qos-entry" with operation "delete".
     */
    public void markLocalEpsQosEntryDelete() throws JNCException {
        markLeafDelete("localEpsQosEntry");
    }

    /* Access methods for optional leaf child: "lipa-session". */

    /**
     * Gets the value for child leaf "lipa-session".
     * @return The value of the leaf.
     */
    public YangString getLipaSessionValue() throws JNCException {
        return (YangString)getValue("lipa-session");
    }

    /**
     * Sets the value for child leaf "lipa-session",
     * using instance of generated typedef class.
     * @param lipaSessionValue The value to set.
     * @param lipaSessionValue used during instantiation.
     */
    public void setLipaSessionValue(YangString lipaSessionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lipa-session",
            lipaSessionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lipa-session",
     * using a String value.
     * @param lipaSessionValue used during instantiation.
     */
    public void setLipaSessionValue(String lipaSessionValue)
            throws JNCException {
        setLipaSessionValue(new YangString(lipaSessionValue));
    }

    /**
     * Unsets the value for child leaf "lipa-session".
     */
    public void unsetLipaSessionValue() throws JNCException {
        delete("lipa-session");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lipa-session" leaf will not have a value.
     */
    public void addLipaSession() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lipa-session",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lipa-session" with operation "replace".
     */
    public void markLipaSessionReplace() throws JNCException {
        markLeafReplace("lipaSession");
    }

    /**
     * Marks the leaf "lipa-session" with operation "merge".
     */
    public void markLipaSessionMerge() throws JNCException {
        markLeafMerge("lipaSession");
    }

    /**
     * Marks the leaf "lipa-session" with operation "create".
     */
    public void markLipaSessionCreate() throws JNCException {
        markLeafCreate("lipaSession");
    }

    /**
     * Marks the leaf "lipa-session" with operation "delete".
     */
    public void markLipaSessionDelete() throws JNCException {
        markLeafDelete("lipaSession");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
