/* 
 * @(#)DirectTunnelApnScreening.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/direct-tunnel-apn-screening"
 * <p>
 * See line 588 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class DirectTunnelApnScreening extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty DirectTunnelApnScreening object.
     */
    public DirectTunnelApnScreening() {
        super(Epc.NAMESPACE, "direct-tunnel-apn-screening");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public DirectTunnelApnScreening clone() {
        return (DirectTunnelApnScreening)cloneContent(new DirectTunnelApnScreening());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public DirectTunnelApnScreening cloneShallow() {
        return (DirectTunnelApnScreening)cloneShallowContent(new DirectTunnelApnScreening());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "group",
            "apn-list",
        };
    }

    /* Access methods for optional leaf child: "group". */

    /**
     * Gets the value for child leaf "group".
     * @return The value of the leaf.
     */
    public YangEnumeration getGroupValue() throws JNCException {
        YangEnumeration group = (YangEnumeration)getValue("group");
        if (group == null) {
            group = new YangEnumeration("default", new String[] {  // default
                "default",
            });
        }
        return group;
    }

    /**
     * Sets the value for child leaf "group",
     * using instance of generated typedef class.
     * @param groupValue The value to set.
     * @param groupValue used during instantiation.
     */
    public void setGroupValue(YangEnumeration groupValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "group",
            groupValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "group",
     * using a String value.
     * @param groupValue used during instantiation.
     */
    public void setGroupValue(String groupValue) throws JNCException {
        setGroupValue(new YangEnumeration(groupValue, new String[] {
             "default",
        }));
    }

    /**
     * Unsets the value for child leaf "group".
     */
    public void unsetGroupValue() throws JNCException {
        delete("group");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "group" leaf will not have a value.
     */
    public void addGroup() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "group",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "group" with operation "replace".
     */
    public void markGroupReplace() throws JNCException {
        markLeafReplace("group");
    }

    /**
     * Marks the leaf "group" with operation "merge".
     */
    public void markGroupMerge() throws JNCException {
        markLeafMerge("group");
    }

    /**
     * Marks the leaf "group" with operation "create".
     */
    public void markGroupCreate() throws JNCException {
        markLeafCreate("group");
    }

    /**
     * Marks the leaf "group" with operation "delete".
     */
    public void markGroupDelete() throws JNCException {
        markLeafDelete("group");
    }

    /* Access methods for optional leaf child: "apn-list". */

    /**
     * Gets the value for child leaf "apn-list".
     * @return The value of the leaf.
     */
    public YangString getApnListValue() throws JNCException {
        return (YangString)getValue("apn-list");
    }

    /**
     * Sets the value for child leaf "apn-list",
     * using instance of generated typedef class.
     * @param apnListValue The value to set.
     * @param apnListValue used during instantiation.
     */
    public void setApnListValue(YangString apnListValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-list",
            apnListValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-list",
     * using a String value.
     * @param apnListValue used during instantiation.
     */
    public void setApnListValue(String apnListValue) throws JNCException {
        setApnListValue(new YangString(apnListValue));
    }

    /**
     * Unsets the value for child leaf "apn-list".
     */
    public void unsetApnListValue() throws JNCException {
        delete("apn-list");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-list" leaf will not have a value.
     */
    public void addApnList() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-list",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-list" with operation "replace".
     */
    public void markApnListReplace() throws JNCException {
        markLeafReplace("apnList");
    }

    /**
     * Marks the leaf "apn-list" with operation "merge".
     */
    public void markApnListMerge() throws JNCException {
        markLeafMerge("apnList");
    }

    /**
     * Marks the leaf "apn-list" with operation "create".
     */
    public void markApnListCreate() throws JNCException {
        markLeafCreate("apnList");
    }

    /**
     * Marks the leaf "apn-list" with operation "delete".
     */
    public void markApnListDelete() throws JNCException {
        markLeafDelete("apnList");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
