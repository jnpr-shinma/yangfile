/* 
 * @(#)MmeApnSelectionProfile.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/mme-apn-selection-profile"
 * <p>
 * See line 2863 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeApnSelectionProfile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeApnSelectionProfile object.
     */
    public MmeApnSelectionProfile() {
        super(Epc.NAMESPACE, "mme-apn-selection-profile");
    }

    /**
     * Constructor for an initialized MmeApnSelectionProfile object,
     * 
     * @param nameValue Key argument of child.
     */
    public MmeApnSelectionProfile(YangString nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-apn-selection-profile");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized MmeApnSelectionProfile object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public MmeApnSelectionProfile(String nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-apn-selection-profile");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeApnSelectionProfile clone() {
        MmeApnSelectionProfile copy;
        try {
            copy = new MmeApnSelectionProfile(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeApnSelectionProfile)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeApnSelectionProfile cloneShallow() {
        MmeApnSelectionProfile copy;
        try {
            copy = new MmeApnSelectionProfile(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeApnSelectionProfile)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "local-config-default-pdn-type",
            "secondary-apn-source-gprs",
            "secondary-apn-source-epc",
            "local-config-apn",
            "wildcard-dns-fail-override",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "local-config-default-pdn-type". */

    /**
     * Gets the value for child leaf "local-config-default-pdn-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getLocalConfigDefaultPdnTypeValue()
            throws JNCException {
        YangEnumeration localConfigDefaultPdnType = (YangEnumeration)getValue("local-config-default-pdn-type");
        if (localConfigDefaultPdnType == null) {
            localConfigDefaultPdnType = new YangEnumeration("ipv4", new String[] {  // default
                "ipv4",
                "ipv6",
                "ipv4v6",
            });
        }
        return localConfigDefaultPdnType;
    }

    /**
     * Sets the value for child leaf "local-config-default-pdn-type",
     * using instance of generated typedef class.
     * @param localConfigDefaultPdnTypeValue The value to set.
     * @param localConfigDefaultPdnTypeValue used during instantiation.
     */
    public void setLocalConfigDefaultPdnTypeValue(YangEnumeration localConfigDefaultPdnTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-config-default-pdn-type",
            localConfigDefaultPdnTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-config-default-pdn-type",
     * using a String value.
     * @param localConfigDefaultPdnTypeValue used during instantiation.
     */
    public void setLocalConfigDefaultPdnTypeValue(String localConfigDefaultPdnTypeValue)
            throws JNCException {
        setLocalConfigDefaultPdnTypeValue(new YangEnumeration(localConfigDefaultPdnTypeValue, new String[] {
             "ipv4",
             "ipv6",
             "ipv4v6",
        }));
    }

    /**
     * Unsets the value for child leaf "local-config-default-pdn-type".
     */
    public void unsetLocalConfigDefaultPdnTypeValue() throws JNCException {
        delete("local-config-default-pdn-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-config-default-pdn-type" leaf will not have a value.
     */
    public void addLocalConfigDefaultPdnType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-config-default-pdn-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-config-default-pdn-type" with operation "replace".
     */
    public void markLocalConfigDefaultPdnTypeReplace() throws JNCException {
        markLeafReplace("localConfigDefaultPdnType");
    }

    /**
     * Marks the leaf "local-config-default-pdn-type" with operation "merge".
     */
    public void markLocalConfigDefaultPdnTypeMerge() throws JNCException {
        markLeafMerge("localConfigDefaultPdnType");
    }

    /**
     * Marks the leaf "local-config-default-pdn-type" with operation "create".
     */
    public void markLocalConfigDefaultPdnTypeCreate() throws JNCException {
        markLeafCreate("localConfigDefaultPdnType");
    }

    /**
     * Marks the leaf "local-config-default-pdn-type" with operation "delete".
     */
    public void markLocalConfigDefaultPdnTypeDelete() throws JNCException {
        markLeafDelete("localConfigDefaultPdnType");
    }

    /* Access methods for optional leaf child: "secondary-apn-source-gprs". */

    /**
     * Gets the value for child leaf "secondary-apn-source-gprs".
     * @return The value of the leaf.
     */
    public YangEnumeration getSecondaryApnSourceGprsValue() throws JNCException {
        YangEnumeration secondaryApnSourceGprs = (YangEnumeration)getValue("secondary-apn-source-gprs");
        if (secondaryApnSourceGprs == null) {
            secondaryApnSourceGprs = new YangEnumeration("off", new String[] {  // default
                "single-subscription",
                "single-subscription-or-local",
                "first-subscription",
                "first-subscription-or-local",
                "local-config",
                "off",
            });
        }
        return secondaryApnSourceGprs;
    }

    /**
     * Sets the value for child leaf "secondary-apn-source-gprs",
     * using instance of generated typedef class.
     * @param secondaryApnSourceGprsValue The value to set.
     * @param secondaryApnSourceGprsValue used during instantiation.
     */
    public void setSecondaryApnSourceGprsValue(YangEnumeration secondaryApnSourceGprsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "secondary-apn-source-gprs",
            secondaryApnSourceGprsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "secondary-apn-source-gprs",
     * using a String value.
     * @param secondaryApnSourceGprsValue used during instantiation.
     */
    public void setSecondaryApnSourceGprsValue(String secondaryApnSourceGprsValue)
            throws JNCException {
        setSecondaryApnSourceGprsValue(new YangEnumeration(secondaryApnSourceGprsValue, new String[] {
             "single-subscription",
             "single-subscription-or-local",
             "first-subscription",
             "first-subscription-or-local",
             "local-config",
             "off",
        }));
    }

    /**
     * Unsets the value for child leaf "secondary-apn-source-gprs".
     */
    public void unsetSecondaryApnSourceGprsValue() throws JNCException {
        delete("secondary-apn-source-gprs");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "secondary-apn-source-gprs" leaf will not have a value.
     */
    public void addSecondaryApnSourceGprs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "secondary-apn-source-gprs",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "secondary-apn-source-gprs" with operation "replace".
     */
    public void markSecondaryApnSourceGprsReplace() throws JNCException {
        markLeafReplace("secondaryApnSourceGprs");
    }

    /**
     * Marks the leaf "secondary-apn-source-gprs" with operation "merge".
     */
    public void markSecondaryApnSourceGprsMerge() throws JNCException {
        markLeafMerge("secondaryApnSourceGprs");
    }

    /**
     * Marks the leaf "secondary-apn-source-gprs" with operation "create".
     */
    public void markSecondaryApnSourceGprsCreate() throws JNCException {
        markLeafCreate("secondaryApnSourceGprs");
    }

    /**
     * Marks the leaf "secondary-apn-source-gprs" with operation "delete".
     */
    public void markSecondaryApnSourceGprsDelete() throws JNCException {
        markLeafDelete("secondaryApnSourceGprs");
    }

    /* Access methods for optional leaf child: "secondary-apn-source-epc". */

    /**
     * Gets the value for child leaf "secondary-apn-source-epc".
     * @return The value of the leaf.
     */
    public YangEnumeration getSecondaryApnSourceEpcValue() throws JNCException {
        YangEnumeration secondaryApnSourceEpc = (YangEnumeration)getValue("secondary-apn-source-epc");
        if (secondaryApnSourceEpc == null) {
            secondaryApnSourceEpc = new YangEnumeration("off", new String[] {  // default
                "default-subscription",
                "local-config",
                "off",
            });
        }
        return secondaryApnSourceEpc;
    }

    /**
     * Sets the value for child leaf "secondary-apn-source-epc",
     * using instance of generated typedef class.
     * @param secondaryApnSourceEpcValue The value to set.
     * @param secondaryApnSourceEpcValue used during instantiation.
     */
    public void setSecondaryApnSourceEpcValue(YangEnumeration secondaryApnSourceEpcValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "secondary-apn-source-epc",
            secondaryApnSourceEpcValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "secondary-apn-source-epc",
     * using a String value.
     * @param secondaryApnSourceEpcValue used during instantiation.
     */
    public void setSecondaryApnSourceEpcValue(String secondaryApnSourceEpcValue)
            throws JNCException {
        setSecondaryApnSourceEpcValue(new YangEnumeration(secondaryApnSourceEpcValue, new String[] {
             "default-subscription",
             "local-config",
             "off",
        }));
    }

    /**
     * Unsets the value for child leaf "secondary-apn-source-epc".
     */
    public void unsetSecondaryApnSourceEpcValue() throws JNCException {
        delete("secondary-apn-source-epc");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "secondary-apn-source-epc" leaf will not have a value.
     */
    public void addSecondaryApnSourceEpc() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "secondary-apn-source-epc",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "secondary-apn-source-epc" with operation "replace".
     */
    public void markSecondaryApnSourceEpcReplace() throws JNCException {
        markLeafReplace("secondaryApnSourceEpc");
    }

    /**
     * Marks the leaf "secondary-apn-source-epc" with operation "merge".
     */
    public void markSecondaryApnSourceEpcMerge() throws JNCException {
        markLeafMerge("secondaryApnSourceEpc");
    }

    /**
     * Marks the leaf "secondary-apn-source-epc" with operation "create".
     */
    public void markSecondaryApnSourceEpcCreate() throws JNCException {
        markLeafCreate("secondaryApnSourceEpc");
    }

    /**
     * Marks the leaf "secondary-apn-source-epc" with operation "delete".
     */
    public void markSecondaryApnSourceEpcDelete() throws JNCException {
        markLeafDelete("secondaryApnSourceEpc");
    }

    /* Access methods for optional leaf child: "local-config-apn". */

    /**
     * Gets the value for child leaf "local-config-apn".
     * @return The value of the leaf.
     */
    public YangString getLocalConfigApnValue() throws JNCException {
        YangString localConfigApn = (YangString)getValue("local-config-apn");
        if (localConfigApn == null) {
            localConfigApn = new YangString("default.apnni.com");  // default
        }
        return localConfigApn;
    }

    /**
     * Sets the value for child leaf "local-config-apn",
     * using instance of generated typedef class.
     * @param localConfigApnValue The value to set.
     * @param localConfigApnValue used during instantiation.
     */
    public void setLocalConfigApnValue(YangString localConfigApnValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-config-apn",
            localConfigApnValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-config-apn",
     * using a String value.
     * @param localConfigApnValue used during instantiation.
     */
    public void setLocalConfigApnValue(String localConfigApnValue)
            throws JNCException {
        setLocalConfigApnValue(new YangString(localConfigApnValue));
    }

    /**
     * Unsets the value for child leaf "local-config-apn".
     */
    public void unsetLocalConfigApnValue() throws JNCException {
        delete("local-config-apn");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-config-apn" leaf will not have a value.
     */
    public void addLocalConfigApn() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-config-apn",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-config-apn" with operation "replace".
     */
    public void markLocalConfigApnReplace() throws JNCException {
        markLeafReplace("localConfigApn");
    }

    /**
     * Marks the leaf "local-config-apn" with operation "merge".
     */
    public void markLocalConfigApnMerge() throws JNCException {
        markLeafMerge("localConfigApn");
    }

    /**
     * Marks the leaf "local-config-apn" with operation "create".
     */
    public void markLocalConfigApnCreate() throws JNCException {
        markLeafCreate("localConfigApn");
    }

    /**
     * Marks the leaf "local-config-apn" with operation "delete".
     */
    public void markLocalConfigApnDelete() throws JNCException {
        markLeafDelete("localConfigApn");
    }

    /* Access methods for optional leaf child: "wildcard-dns-fail-override". */

    /**
     * Gets the value for child leaf "wildcard-dns-fail-override".
     * @return The value of the leaf.
     */
    public YangEnumeration getWildcardDnsFailOverrideValue()
            throws JNCException {
        YangEnumeration wildcardDnsFailOverride = (YangEnumeration)getValue("wildcard-dns-fail-override");
        if (wildcardDnsFailOverride == null) {
            wildcardDnsFailOverride = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return wildcardDnsFailOverride;
    }

    /**
     * Sets the value for child leaf "wildcard-dns-fail-override",
     * using instance of generated typedef class.
     * @param wildcardDnsFailOverrideValue The value to set.
     * @param wildcardDnsFailOverrideValue used during instantiation.
     */
    public void setWildcardDnsFailOverrideValue(YangEnumeration wildcardDnsFailOverrideValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "wildcard-dns-fail-override",
            wildcardDnsFailOverrideValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "wildcard-dns-fail-override",
     * using a String value.
     * @param wildcardDnsFailOverrideValue used during instantiation.
     */
    public void setWildcardDnsFailOverrideValue(String wildcardDnsFailOverrideValue)
            throws JNCException {
        setWildcardDnsFailOverrideValue(new YangEnumeration(wildcardDnsFailOverrideValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "wildcard-dns-fail-override".
     */
    public void unsetWildcardDnsFailOverrideValue() throws JNCException {
        delete("wildcard-dns-fail-override");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "wildcard-dns-fail-override" leaf will not have a value.
     */
    public void addWildcardDnsFailOverride() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "wildcard-dns-fail-override",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "wildcard-dns-fail-override" with operation "replace".
     */
    public void markWildcardDnsFailOverrideReplace() throws JNCException {
        markLeafReplace("wildcardDnsFailOverride");
    }

    /**
     * Marks the leaf "wildcard-dns-fail-override" with operation "merge".
     */
    public void markWildcardDnsFailOverrideMerge() throws JNCException {
        markLeafMerge("wildcardDnsFailOverride");
    }

    /**
     * Marks the leaf "wildcard-dns-fail-override" with operation "create".
     */
    public void markWildcardDnsFailOverrideCreate() throws JNCException {
        markLeafCreate("wildcardDnsFailOverride");
    }

    /**
     * Marks the leaf "wildcard-dns-fail-override" with operation "delete".
     */
    public void markWildcardDnsFailOverrideDelete() throws JNCException {
        markLeafDelete("wildcardDnsFailOverride");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
