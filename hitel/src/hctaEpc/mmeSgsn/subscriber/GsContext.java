/* 
 * @(#)GsContext.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;
import .hctaEpc.ImsiT;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/gs-context"
 * <p>
 * See line 1535 in
 * scCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class GsContext extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty GsContext object.
     */
    public GsContext() {
        super(Epc.NAMESPACE, "gs-context");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public GsContext clone() {
        return (GsContext)cloneContent(new GsContext());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public GsContext cloneShallow() {
        return (GsContext)cloneShallowContent(new GsContext());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "imsi",
            "vlr-number",
            "gs-state",
            "vlr-reliable",
            "non-gprs-alert-flag",
        };
    }

    /* Access methods for leaf child: "imsi". */

    /**
     * Gets the value for child leaf "imsi".
     * @return The value of the leaf.
     */
    public ImsiT getImsiValue() throws JNCException {
        return (ImsiT)getValue("imsi");
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a JNC type value.
     * @param imsiValue The value to set.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(ImsiT imsiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            imsiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a String value.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(String imsiValue) throws JNCException {
        setImsiValue(new ImsiT(imsiValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imsi" leaf will not have a value.
     */
    public void addImsi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "vlr-number". */

    /**
     * Gets the value for child leaf "vlr-number".
     * @return The value of the leaf.
     */
    public YangString getVlrNumberValue() throws JNCException {
        return (YangString)getValue("vlr-number");
    }

    /**
     * Sets the value for child leaf "vlr-number",
     * using instance of generated typedef class.
     * @param vlrNumberValue The value to set.
     * @param vlrNumberValue used during instantiation.
     */
    public void setVlrNumberValue(YangString vlrNumberValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-number",
            vlrNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlr-number",
     * using a String value.
     * @param vlrNumberValue used during instantiation.
     */
    public void setVlrNumberValue(String vlrNumberValue) throws JNCException {
        setVlrNumberValue(new YangString(vlrNumberValue));
    }

    /**
     * Unsets the value for child leaf "vlr-number".
     */
    public void unsetVlrNumberValue() throws JNCException {
        delete("vlr-number");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlr-number" leaf will not have a value.
     */
    public void addVlrNumber() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-number",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlr-number" with operation "replace".
     */
    public void markVlrNumberReplace() throws JNCException {
        markLeafReplace("vlrNumber");
    }

    /**
     * Marks the leaf "vlr-number" with operation "merge".
     */
    public void markVlrNumberMerge() throws JNCException {
        markLeafMerge("vlrNumber");
    }

    /**
     * Marks the leaf "vlr-number" with operation "create".
     */
    public void markVlrNumberCreate() throws JNCException {
        markLeafCreate("vlrNumber");
    }

    /**
     * Marks the leaf "vlr-number" with operation "delete".
     */
    public void markVlrNumberDelete() throws JNCException {
        markLeafDelete("vlrNumber");
    }

    /* Access methods for optional leaf child: "gs-state". */

    /**
     * Gets the value for child leaf "gs-state".
     * @return The value of the leaf.
     */
    public YangString getGsStateValue() throws JNCException {
        return (YangString)getValue("gs-state");
    }

    /**
     * Sets the value for child leaf "gs-state",
     * using instance of generated typedef class.
     * @param gsStateValue The value to set.
     * @param gsStateValue used during instantiation.
     */
    public void setGsStateValue(YangString gsStateValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gs-state",
            gsStateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gs-state",
     * using a String value.
     * @param gsStateValue used during instantiation.
     */
    public void setGsStateValue(String gsStateValue) throws JNCException {
        setGsStateValue(new YangString(gsStateValue));
    }

    /**
     * Unsets the value for child leaf "gs-state".
     */
    public void unsetGsStateValue() throws JNCException {
        delete("gs-state");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gs-state" leaf will not have a value.
     */
    public void addGsState() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gs-state",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gs-state" with operation "replace".
     */
    public void markGsStateReplace() throws JNCException {
        markLeafReplace("gsState");
    }

    /**
     * Marks the leaf "gs-state" with operation "merge".
     */
    public void markGsStateMerge() throws JNCException {
        markLeafMerge("gsState");
    }

    /**
     * Marks the leaf "gs-state" with operation "create".
     */
    public void markGsStateCreate() throws JNCException {
        markLeafCreate("gsState");
    }

    /**
     * Marks the leaf "gs-state" with operation "delete".
     */
    public void markGsStateDelete() throws JNCException {
        markLeafDelete("gsState");
    }

    /* Access methods for optional leaf child: "vlr-reliable". */

    /**
     * Gets the value for child leaf "vlr-reliable".
     * @return The value of the leaf.
     */
    public YangString getVlrReliableValue() throws JNCException {
        return (YangString)getValue("vlr-reliable");
    }

    /**
     * Sets the value for child leaf "vlr-reliable",
     * using instance of generated typedef class.
     * @param vlrReliableValue The value to set.
     * @param vlrReliableValue used during instantiation.
     */
    public void setVlrReliableValue(YangString vlrReliableValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-reliable",
            vlrReliableValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlr-reliable",
     * using a String value.
     * @param vlrReliableValue used during instantiation.
     */
    public void setVlrReliableValue(String vlrReliableValue)
            throws JNCException {
        setVlrReliableValue(new YangString(vlrReliableValue));
    }

    /**
     * Unsets the value for child leaf "vlr-reliable".
     */
    public void unsetVlrReliableValue() throws JNCException {
        delete("vlr-reliable");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlr-reliable" leaf will not have a value.
     */
    public void addVlrReliable() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-reliable",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlr-reliable" with operation "replace".
     */
    public void markVlrReliableReplace() throws JNCException {
        markLeafReplace("vlrReliable");
    }

    /**
     * Marks the leaf "vlr-reliable" with operation "merge".
     */
    public void markVlrReliableMerge() throws JNCException {
        markLeafMerge("vlrReliable");
    }

    /**
     * Marks the leaf "vlr-reliable" with operation "create".
     */
    public void markVlrReliableCreate() throws JNCException {
        markLeafCreate("vlrReliable");
    }

    /**
     * Marks the leaf "vlr-reliable" with operation "delete".
     */
    public void markVlrReliableDelete() throws JNCException {
        markLeafDelete("vlrReliable");
    }

    /* Access methods for optional leaf child: "non-gprs-alert-flag". */

    /**
     * Gets the value for child leaf "non-gprs-alert-flag".
     * @return The value of the leaf.
     */
    public YangString getNonGprsAlertFlagValue() throws JNCException {
        return (YangString)getValue("non-gprs-alert-flag");
    }

    /**
     * Sets the value for child leaf "non-gprs-alert-flag",
     * using instance of generated typedef class.
     * @param nonGprsAlertFlagValue The value to set.
     * @param nonGprsAlertFlagValue used during instantiation.
     */
    public void setNonGprsAlertFlagValue(YangString nonGprsAlertFlagValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "non-gprs-alert-flag",
            nonGprsAlertFlagValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "non-gprs-alert-flag",
     * using a String value.
     * @param nonGprsAlertFlagValue used during instantiation.
     */
    public void setNonGprsAlertFlagValue(String nonGprsAlertFlagValue)
            throws JNCException {
        setNonGprsAlertFlagValue(new YangString(nonGprsAlertFlagValue));
    }

    /**
     * Unsets the value for child leaf "non-gprs-alert-flag".
     */
    public void unsetNonGprsAlertFlagValue() throws JNCException {
        delete("non-gprs-alert-flag");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "non-gprs-alert-flag" leaf will not have a value.
     */
    public void addNonGprsAlertFlag() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "non-gprs-alert-flag",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "non-gprs-alert-flag" with operation "replace".
     */
    public void markNonGprsAlertFlagReplace() throws JNCException {
        markLeafReplace("nonGprsAlertFlag");
    }

    /**
     * Marks the leaf "non-gprs-alert-flag" with operation "merge".
     */
    public void markNonGprsAlertFlagMerge() throws JNCException {
        markLeafMerge("nonGprsAlertFlag");
    }

    /**
     * Marks the leaf "non-gprs-alert-flag" with operation "create".
     */
    public void markNonGprsAlertFlagCreate() throws JNCException {
        markLeafCreate("nonGprsAlertFlag");
    }

    /**
     * Marks the leaf "non-gprs-alert-flag" with operation "delete".
     */
    public void markNonGprsAlertFlagDelete() throws JNCException {
        markLeafDelete("nonGprsAlertFlag");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
