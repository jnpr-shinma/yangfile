/* 
 * @(#)MmeEquivalentPlmn.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/mme-equivalent-plmn"
 * <p>
 * See line 610 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeEquivalentPlmn extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeEquivalentPlmn object.
     */
    public MmeEquivalentPlmn() {
        super(Epc.NAMESPACE, "mme-equivalent-plmn");
    }

    /**
     * Constructor for an initialized MmeEquivalentPlmn object,
     * 
     * @param nameValue Key argument of child.
     */
    public MmeEquivalentPlmn(YangString nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-equivalent-plmn");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized MmeEquivalentPlmn object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public MmeEquivalentPlmn(String nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-equivalent-plmn");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeEquivalentPlmn clone() {
        MmeEquivalentPlmn copy;
        try {
            copy = new MmeEquivalentPlmn(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeEquivalentPlmn)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeEquivalentPlmn cloneShallow() {
        MmeEquivalentPlmn copy;
        try {
            copy = new MmeEquivalentPlmn(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeEquivalentPlmn)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "plmn-list",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "plmn-list". */

    /**
     * Gets the value for child leaf "plmn-list".
     * @return The value of the leaf.
     */
    public YangString getPlmnListValue() throws JNCException {
        return (YangString)getValue("plmn-list");
    }

    /**
     * Sets the value for child leaf "plmn-list",
     * using instance of generated typedef class.
     * @param plmnListValue The value to set.
     * @param plmnListValue used during instantiation.
     */
    public void setPlmnListValue(YangString plmnListValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-list",
            plmnListValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "plmn-list",
     * using a String value.
     * @param plmnListValue used during instantiation.
     */
    public void setPlmnListValue(String plmnListValue) throws JNCException {
        setPlmnListValue(new YangString(plmnListValue));
    }

    /**
     * Unsets the value for child leaf "plmn-list".
     */
    public void unsetPlmnListValue() throws JNCException {
        delete("plmn-list");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "plmn-list" leaf will not have a value.
     */
    public void addPlmnList() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-list",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "plmn-list" with operation "replace".
     */
    public void markPlmnListReplace() throws JNCException {
        markLeafReplace("plmnList");
    }

    /**
     * Marks the leaf "plmn-list" with operation "merge".
     */
    public void markPlmnListMerge() throws JNCException {
        markLeafMerge("plmnList");
    }

    /**
     * Marks the leaf "plmn-list" with operation "create".
     */
    public void markPlmnListCreate() throws JNCException {
        markLeafCreate("plmnList");
    }

    /**
     * Marks the leaf "plmn-list" with operation "delete".
     */
    public void markPlmnListDelete() throws JNCException {
        markLeafDelete("plmnList");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
