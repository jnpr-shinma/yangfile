/* 
 * @(#)Imsi.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber.apnProfile;
import .hctaEpc.ImeiT;
import .hctaEpc.ImeisvT;
import .hctaEpc.ImsiT;
import .hctaEpc.MsisdnT;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/apnProfile/imsi"
 * <p>
 * See line 1483 in
 * scCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Imsi extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Imsi object.
     */
    public Imsi() {
        super(Epc.NAMESPACE, "imsi");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Imsi clone() {
        return (Imsi)cloneContent(new Imsi());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Imsi cloneShallow() {
        return (Imsi)cloneShallowContent(new Imsi());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "imsi",
            "context-id",
            "imei",
            "imeisv",
            "msisdn",
            "apn-name",
            "apn-profile-pdn-type",
            "service-selection",
            "eps-sub-qos",
            "apn-ul-ambr",
            "apn-dl-ambr",
            "is-vplmn-allowed",
            "mip6-agent-info",
            "pgw-allocation-type",
            "sessions",
            "apn-charging-characteristics",
            "ipv4-pdp-address",
            "qos-profile",
            "lipa-permission",
        };
    }

    /* Access methods for leaf child: "imsi". */

    /**
     * Gets the value for child leaf "imsi".
     * @return The value of the leaf.
     */
    public ImsiT getImsiValue() throws JNCException {
        return (ImsiT)getValue("imsi");
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a JNC type value.
     * @param imsiValue The value to set.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(ImsiT imsiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            imsiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a String value.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(String imsiValue) throws JNCException {
        setImsiValue(new ImsiT(imsiValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imsi" leaf will not have a value.
     */
    public void addImsi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "context-id". */

    /**
     * Gets the value for child leaf "context-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getContextIdValue() throws JNCException {
        return (YangUInt32)getValue("context-id");
    }

    /**
     * Sets the value for child leaf "context-id",
     * using instance of generated typedef class.
     * @param contextIdValue The value to set.
     * @param contextIdValue used during instantiation.
     */
    public void setContextIdValue(YangUInt32 contextIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "context-id",
            contextIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "context-id",
     * using Java primitive values.
     * @param contextIdValue used during instantiation.
     */
    public void setContextIdValue(long contextIdValue) throws JNCException {
        setContextIdValue(new YangUInt32(contextIdValue));
    }

    /**
     * Sets the value for child leaf "context-id",
     * using a String value.
     * @param contextIdValue used during instantiation.
     */
    public void setContextIdValue(String contextIdValue) throws JNCException {
        setContextIdValue(new YangUInt32(contextIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "context-id" leaf will not have a value.
     */
    public void addContextId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "context-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "imei". */

    /**
     * Gets the value for child leaf "imei".
     * @return The value of the leaf.
     */
    public ImeiT getImeiValue() throws JNCException {
        return (ImeiT)getValue("imei");
    }

    /**
     * Sets the value for child leaf "imei",
     * using a JNC type value.
     * @param imeiValue The value to set.
     * @param imeiValue used during instantiation.
     */
    public void setImeiValue(ImeiT imeiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imei",
            imeiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imei",
     * using a String value.
     * @param imeiValue used during instantiation.
     */
    public void setImeiValue(String imeiValue) throws JNCException {
        setImeiValue(new ImeiT(imeiValue));
    }

    /**
     * Unsets the value for child leaf "imei".
     */
    public void unsetImeiValue() throws JNCException {
        delete("imei");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imei" leaf will not have a value.
     */
    public void addImei() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imei",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "imei" with operation "replace".
     */
    public void markImeiReplace() throws JNCException {
        markLeafReplace("imei");
    }

    /**
     * Marks the leaf "imei" with operation "merge".
     */
    public void markImeiMerge() throws JNCException {
        markLeafMerge("imei");
    }

    /**
     * Marks the leaf "imei" with operation "create".
     */
    public void markImeiCreate() throws JNCException {
        markLeafCreate("imei");
    }

    /**
     * Marks the leaf "imei" with operation "delete".
     */
    public void markImeiDelete() throws JNCException {
        markLeafDelete("imei");
    }

    /* Access methods for optional leaf child: "imeisv". */

    /**
     * Gets the value for child leaf "imeisv".
     * @return The value of the leaf.
     */
    public ImeisvT getImeisvValue() throws JNCException {
        return (ImeisvT)getValue("imeisv");
    }

    /**
     * Sets the value for child leaf "imeisv",
     * using a JNC type value.
     * @param imeisvValue The value to set.
     * @param imeisvValue used during instantiation.
     */
    public void setImeisvValue(ImeisvT imeisvValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imeisv",
            imeisvValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imeisv",
     * using a String value.
     * @param imeisvValue used during instantiation.
     */
    public void setImeisvValue(String imeisvValue) throws JNCException {
        setImeisvValue(new ImeisvT(imeisvValue));
    }

    /**
     * Unsets the value for child leaf "imeisv".
     */
    public void unsetImeisvValue() throws JNCException {
        delete("imeisv");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imeisv" leaf will not have a value.
     */
    public void addImeisv() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imeisv",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "imeisv" with operation "replace".
     */
    public void markImeisvReplace() throws JNCException {
        markLeafReplace("imeisv");
    }

    /**
     * Marks the leaf "imeisv" with operation "merge".
     */
    public void markImeisvMerge() throws JNCException {
        markLeafMerge("imeisv");
    }

    /**
     * Marks the leaf "imeisv" with operation "create".
     */
    public void markImeisvCreate() throws JNCException {
        markLeafCreate("imeisv");
    }

    /**
     * Marks the leaf "imeisv" with operation "delete".
     */
    public void markImeisvDelete() throws JNCException {
        markLeafDelete("imeisv");
    }

    /* Access methods for optional leaf child: "msisdn". */

    /**
     * Gets the value for child leaf "msisdn".
     * @return The value of the leaf.
     */
    public MsisdnT getMsisdnValue() throws JNCException {
        return (MsisdnT)getValue("msisdn");
    }

    /**
     * Sets the value for child leaf "msisdn",
     * using a JNC type value.
     * @param msisdnValue The value to set.
     * @param msisdnValue used during instantiation.
     */
    public void setMsisdnValue(MsisdnT msisdnValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "msisdn",
            msisdnValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "msisdn",
     * using a String value.
     * @param msisdnValue used during instantiation.
     */
    public void setMsisdnValue(String msisdnValue) throws JNCException {
        setMsisdnValue(new MsisdnT(msisdnValue));
    }

    /**
     * Unsets the value for child leaf "msisdn".
     */
    public void unsetMsisdnValue() throws JNCException {
        delete("msisdn");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "msisdn" leaf will not have a value.
     */
    public void addMsisdn() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "msisdn",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "msisdn" with operation "replace".
     */
    public void markMsisdnReplace() throws JNCException {
        markLeafReplace("msisdn");
    }

    /**
     * Marks the leaf "msisdn" with operation "merge".
     */
    public void markMsisdnMerge() throws JNCException {
        markLeafMerge("msisdn");
    }

    /**
     * Marks the leaf "msisdn" with operation "create".
     */
    public void markMsisdnCreate() throws JNCException {
        markLeafCreate("msisdn");
    }

    /**
     * Marks the leaf "msisdn" with operation "delete".
     */
    public void markMsisdnDelete() throws JNCException {
        markLeafDelete("msisdn");
    }

    /* Access methods for optional leaf child: "apn-name". */

    /**
     * Gets the value for child leaf "apn-name".
     * @return The value of the leaf.
     */
    public YangString getApnNameValue() throws JNCException {
        return (YangString)getValue("apn-name");
    }

    /**
     * Sets the value for child leaf "apn-name",
     * using instance of generated typedef class.
     * @param apnNameValue The value to set.
     * @param apnNameValue used during instantiation.
     */
    public void setApnNameValue(YangString apnNameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-name",
            apnNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-name",
     * using a String value.
     * @param apnNameValue used during instantiation.
     */
    public void setApnNameValue(String apnNameValue) throws JNCException {
        setApnNameValue(new YangString(apnNameValue));
    }

    /**
     * Unsets the value for child leaf "apn-name".
     */
    public void unsetApnNameValue() throws JNCException {
        delete("apn-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-name" leaf will not have a value.
     */
    public void addApnName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-name" with operation "replace".
     */
    public void markApnNameReplace() throws JNCException {
        markLeafReplace("apnName");
    }

    /**
     * Marks the leaf "apn-name" with operation "merge".
     */
    public void markApnNameMerge() throws JNCException {
        markLeafMerge("apnName");
    }

    /**
     * Marks the leaf "apn-name" with operation "create".
     */
    public void markApnNameCreate() throws JNCException {
        markLeafCreate("apnName");
    }

    /**
     * Marks the leaf "apn-name" with operation "delete".
     */
    public void markApnNameDelete() throws JNCException {
        markLeafDelete("apnName");
    }

    /* Access methods for optional leaf child: "apn-profile-pdn-type". */

    /**
     * Gets the value for child leaf "apn-profile-pdn-type".
     * @return The value of the leaf.
     */
    public YangString getApnProfilePdnTypeValue() throws JNCException {
        return (YangString)getValue("apn-profile-pdn-type");
    }

    /**
     * Sets the value for child leaf "apn-profile-pdn-type",
     * using instance of generated typedef class.
     * @param apnProfilePdnTypeValue The value to set.
     * @param apnProfilePdnTypeValue used during instantiation.
     */
    public void setApnProfilePdnTypeValue(YangString apnProfilePdnTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-profile-pdn-type",
            apnProfilePdnTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-profile-pdn-type",
     * using a String value.
     * @param apnProfilePdnTypeValue used during instantiation.
     */
    public void setApnProfilePdnTypeValue(String apnProfilePdnTypeValue)
            throws JNCException {
        setApnProfilePdnTypeValue(new YangString(apnProfilePdnTypeValue));
    }

    /**
     * Unsets the value for child leaf "apn-profile-pdn-type".
     */
    public void unsetApnProfilePdnTypeValue() throws JNCException {
        delete("apn-profile-pdn-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-profile-pdn-type" leaf will not have a value.
     */
    public void addApnProfilePdnType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-profile-pdn-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-profile-pdn-type" with operation "replace".
     */
    public void markApnProfilePdnTypeReplace() throws JNCException {
        markLeafReplace("apnProfilePdnType");
    }

    /**
     * Marks the leaf "apn-profile-pdn-type" with operation "merge".
     */
    public void markApnProfilePdnTypeMerge() throws JNCException {
        markLeafMerge("apnProfilePdnType");
    }

    /**
     * Marks the leaf "apn-profile-pdn-type" with operation "create".
     */
    public void markApnProfilePdnTypeCreate() throws JNCException {
        markLeafCreate("apnProfilePdnType");
    }

    /**
     * Marks the leaf "apn-profile-pdn-type" with operation "delete".
     */
    public void markApnProfilePdnTypeDelete() throws JNCException {
        markLeafDelete("apnProfilePdnType");
    }

    /* Access methods for optional leaf child: "service-selection". */

    /**
     * Gets the value for child leaf "service-selection".
     * @return The value of the leaf.
     */
    public YangString getServiceSelectionValue() throws JNCException {
        return (YangString)getValue("service-selection");
    }

    /**
     * Sets the value for child leaf "service-selection",
     * using instance of generated typedef class.
     * @param serviceSelectionValue The value to set.
     * @param serviceSelectionValue used during instantiation.
     */
    public void setServiceSelectionValue(YangString serviceSelectionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service-selection",
            serviceSelectionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service-selection",
     * using a String value.
     * @param serviceSelectionValue used during instantiation.
     */
    public void setServiceSelectionValue(String serviceSelectionValue)
            throws JNCException {
        setServiceSelectionValue(new YangString(serviceSelectionValue));
    }

    /**
     * Unsets the value for child leaf "service-selection".
     */
    public void unsetServiceSelectionValue() throws JNCException {
        delete("service-selection");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service-selection" leaf will not have a value.
     */
    public void addServiceSelection() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service-selection",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service-selection" with operation "replace".
     */
    public void markServiceSelectionReplace() throws JNCException {
        markLeafReplace("serviceSelection");
    }

    /**
     * Marks the leaf "service-selection" with operation "merge".
     */
    public void markServiceSelectionMerge() throws JNCException {
        markLeafMerge("serviceSelection");
    }

    /**
     * Marks the leaf "service-selection" with operation "create".
     */
    public void markServiceSelectionCreate() throws JNCException {
        markLeafCreate("serviceSelection");
    }

    /**
     * Marks the leaf "service-selection" with operation "delete".
     */
    public void markServiceSelectionDelete() throws JNCException {
        markLeafDelete("serviceSelection");
    }

    /* Access methods for optional leaf child: "eps-sub-qos". */

    /**
     * Gets the value for child leaf "eps-sub-qos".
     * @return The value of the leaf.
     */
    public YangString getEpsSubQosValue() throws JNCException {
        return (YangString)getValue("eps-sub-qos");
    }

    /**
     * Sets the value for child leaf "eps-sub-qos",
     * using instance of generated typedef class.
     * @param epsSubQosValue The value to set.
     * @param epsSubQosValue used during instantiation.
     */
    public void setEpsSubQosValue(YangString epsSubQosValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eps-sub-qos",
            epsSubQosValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "eps-sub-qos",
     * using a String value.
     * @param epsSubQosValue used during instantiation.
     */
    public void setEpsSubQosValue(String epsSubQosValue) throws JNCException {
        setEpsSubQosValue(new YangString(epsSubQosValue));
    }

    /**
     * Unsets the value for child leaf "eps-sub-qos".
     */
    public void unsetEpsSubQosValue() throws JNCException {
        delete("eps-sub-qos");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "eps-sub-qos" leaf will not have a value.
     */
    public void addEpsSubQos() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eps-sub-qos",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "eps-sub-qos" with operation "replace".
     */
    public void markEpsSubQosReplace() throws JNCException {
        markLeafReplace("epsSubQos");
    }

    /**
     * Marks the leaf "eps-sub-qos" with operation "merge".
     */
    public void markEpsSubQosMerge() throws JNCException {
        markLeafMerge("epsSubQos");
    }

    /**
     * Marks the leaf "eps-sub-qos" with operation "create".
     */
    public void markEpsSubQosCreate() throws JNCException {
        markLeafCreate("epsSubQos");
    }

    /**
     * Marks the leaf "eps-sub-qos" with operation "delete".
     */
    public void markEpsSubQosDelete() throws JNCException {
        markLeafDelete("epsSubQos");
    }

    /* Access methods for optional leaf child: "apn-ul-ambr". */

    /**
     * Gets the value for child leaf "apn-ul-ambr".
     * @return The value of the leaf.
     */
    public YangUInt32 getApnUlAmbrValue() throws JNCException {
        return (YangUInt32)getValue("apn-ul-ambr");
    }

    /**
     * Sets the value for child leaf "apn-ul-ambr",
     * using instance of generated typedef class.
     * @param apnUlAmbrValue The value to set.
     * @param apnUlAmbrValue used during instantiation.
     */
    public void setApnUlAmbrValue(YangUInt32 apnUlAmbrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-ul-ambr",
            apnUlAmbrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-ul-ambr",
     * using Java primitive values.
     * @param apnUlAmbrValue used during instantiation.
     */
    public void setApnUlAmbrValue(long apnUlAmbrValue) throws JNCException {
        setApnUlAmbrValue(new YangUInt32(apnUlAmbrValue));
    }

    /**
     * Sets the value for child leaf "apn-ul-ambr",
     * using a String value.
     * @param apnUlAmbrValue used during instantiation.
     */
    public void setApnUlAmbrValue(String apnUlAmbrValue) throws JNCException {
        setApnUlAmbrValue(new YangUInt32(apnUlAmbrValue));
    }

    /**
     * Unsets the value for child leaf "apn-ul-ambr".
     */
    public void unsetApnUlAmbrValue() throws JNCException {
        delete("apn-ul-ambr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-ul-ambr" leaf will not have a value.
     */
    public void addApnUlAmbr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-ul-ambr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-ul-ambr" with operation "replace".
     */
    public void markApnUlAmbrReplace() throws JNCException {
        markLeafReplace("apnUlAmbr");
    }

    /**
     * Marks the leaf "apn-ul-ambr" with operation "merge".
     */
    public void markApnUlAmbrMerge() throws JNCException {
        markLeafMerge("apnUlAmbr");
    }

    /**
     * Marks the leaf "apn-ul-ambr" with operation "create".
     */
    public void markApnUlAmbrCreate() throws JNCException {
        markLeafCreate("apnUlAmbr");
    }

    /**
     * Marks the leaf "apn-ul-ambr" with operation "delete".
     */
    public void markApnUlAmbrDelete() throws JNCException {
        markLeafDelete("apnUlAmbr");
    }

    /* Access methods for optional leaf child: "apn-dl-ambr". */

    /**
     * Gets the value for child leaf "apn-dl-ambr".
     * @return The value of the leaf.
     */
    public YangUInt32 getApnDlAmbrValue() throws JNCException {
        return (YangUInt32)getValue("apn-dl-ambr");
    }

    /**
     * Sets the value for child leaf "apn-dl-ambr",
     * using instance of generated typedef class.
     * @param apnDlAmbrValue The value to set.
     * @param apnDlAmbrValue used during instantiation.
     */
    public void setApnDlAmbrValue(YangUInt32 apnDlAmbrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-dl-ambr",
            apnDlAmbrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-dl-ambr",
     * using Java primitive values.
     * @param apnDlAmbrValue used during instantiation.
     */
    public void setApnDlAmbrValue(long apnDlAmbrValue) throws JNCException {
        setApnDlAmbrValue(new YangUInt32(apnDlAmbrValue));
    }

    /**
     * Sets the value for child leaf "apn-dl-ambr",
     * using a String value.
     * @param apnDlAmbrValue used during instantiation.
     */
    public void setApnDlAmbrValue(String apnDlAmbrValue) throws JNCException {
        setApnDlAmbrValue(new YangUInt32(apnDlAmbrValue));
    }

    /**
     * Unsets the value for child leaf "apn-dl-ambr".
     */
    public void unsetApnDlAmbrValue() throws JNCException {
        delete("apn-dl-ambr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-dl-ambr" leaf will not have a value.
     */
    public void addApnDlAmbr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-dl-ambr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-dl-ambr" with operation "replace".
     */
    public void markApnDlAmbrReplace() throws JNCException {
        markLeafReplace("apnDlAmbr");
    }

    /**
     * Marks the leaf "apn-dl-ambr" with operation "merge".
     */
    public void markApnDlAmbrMerge() throws JNCException {
        markLeafMerge("apnDlAmbr");
    }

    /**
     * Marks the leaf "apn-dl-ambr" with operation "create".
     */
    public void markApnDlAmbrCreate() throws JNCException {
        markLeafCreate("apnDlAmbr");
    }

    /**
     * Marks the leaf "apn-dl-ambr" with operation "delete".
     */
    public void markApnDlAmbrDelete() throws JNCException {
        markLeafDelete("apnDlAmbr");
    }

    /* Access methods for optional leaf child: "is-vplmn-allowed". */

    /**
     * Gets the value for child leaf "is-vplmn-allowed".
     * @return The value of the leaf.
     */
    public YangString getIsVplmnAllowedValue() throws JNCException {
        return (YangString)getValue("is-vplmn-allowed");
    }

    /**
     * Sets the value for child leaf "is-vplmn-allowed",
     * using instance of generated typedef class.
     * @param isVplmnAllowedValue The value to set.
     * @param isVplmnAllowedValue used during instantiation.
     */
    public void setIsVplmnAllowedValue(YangString isVplmnAllowedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "is-vplmn-allowed",
            isVplmnAllowedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "is-vplmn-allowed",
     * using a String value.
     * @param isVplmnAllowedValue used during instantiation.
     */
    public void setIsVplmnAllowedValue(String isVplmnAllowedValue)
            throws JNCException {
        setIsVplmnAllowedValue(new YangString(isVplmnAllowedValue));
    }

    /**
     * Unsets the value for child leaf "is-vplmn-allowed".
     */
    public void unsetIsVplmnAllowedValue() throws JNCException {
        delete("is-vplmn-allowed");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "is-vplmn-allowed" leaf will not have a value.
     */
    public void addIsVplmnAllowed() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "is-vplmn-allowed",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "is-vplmn-allowed" with operation "replace".
     */
    public void markIsVplmnAllowedReplace() throws JNCException {
        markLeafReplace("isVplmnAllowed");
    }

    /**
     * Marks the leaf "is-vplmn-allowed" with operation "merge".
     */
    public void markIsVplmnAllowedMerge() throws JNCException {
        markLeafMerge("isVplmnAllowed");
    }

    /**
     * Marks the leaf "is-vplmn-allowed" with operation "create".
     */
    public void markIsVplmnAllowedCreate() throws JNCException {
        markLeafCreate("isVplmnAllowed");
    }

    /**
     * Marks the leaf "is-vplmn-allowed" with operation "delete".
     */
    public void markIsVplmnAllowedDelete() throws JNCException {
        markLeafDelete("isVplmnAllowed");
    }

    /* Access methods for optional leaf child: "mip6-agent-info". */

    /**
     * Gets the value for child leaf "mip6-agent-info".
     * @return The value of the leaf.
     */
    public YangString getMip6AgentInfoValue() throws JNCException {
        return (YangString)getValue("mip6-agent-info");
    }

    /**
     * Sets the value for child leaf "mip6-agent-info",
     * using instance of generated typedef class.
     * @param mip6AgentInfoValue The value to set.
     * @param mip6AgentInfoValue used during instantiation.
     */
    public void setMip6AgentInfoValue(YangString mip6AgentInfoValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mip6-agent-info",
            mip6AgentInfoValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mip6-agent-info",
     * using a String value.
     * @param mip6AgentInfoValue used during instantiation.
     */
    public void setMip6AgentInfoValue(String mip6AgentInfoValue)
            throws JNCException {
        setMip6AgentInfoValue(new YangString(mip6AgentInfoValue));
    }

    /**
     * Unsets the value for child leaf "mip6-agent-info".
     */
    public void unsetMip6AgentInfoValue() throws JNCException {
        delete("mip6-agent-info");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mip6-agent-info" leaf will not have a value.
     */
    public void addMip6AgentInfo() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mip6-agent-info",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mip6-agent-info" with operation "replace".
     */
    public void markMip6AgentInfoReplace() throws JNCException {
        markLeafReplace("mip6AgentInfo");
    }

    /**
     * Marks the leaf "mip6-agent-info" with operation "merge".
     */
    public void markMip6AgentInfoMerge() throws JNCException {
        markLeafMerge("mip6AgentInfo");
    }

    /**
     * Marks the leaf "mip6-agent-info" with operation "create".
     */
    public void markMip6AgentInfoCreate() throws JNCException {
        markLeafCreate("mip6AgentInfo");
    }

    /**
     * Marks the leaf "mip6-agent-info" with operation "delete".
     */
    public void markMip6AgentInfoDelete() throws JNCException {
        markLeafDelete("mip6AgentInfo");
    }

    /* Access methods for optional leaf child: "pgw-allocation-type". */

    /**
     * Gets the value for child leaf "pgw-allocation-type".
     * @return The value of the leaf.
     */
    public YangString getPgwAllocationTypeValue() throws JNCException {
        return (YangString)getValue("pgw-allocation-type");
    }

    /**
     * Sets the value for child leaf "pgw-allocation-type",
     * using instance of generated typedef class.
     * @param pgwAllocationTypeValue The value to set.
     * @param pgwAllocationTypeValue used during instantiation.
     */
    public void setPgwAllocationTypeValue(YangString pgwAllocationTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-allocation-type",
            pgwAllocationTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pgw-allocation-type",
     * using a String value.
     * @param pgwAllocationTypeValue used during instantiation.
     */
    public void setPgwAllocationTypeValue(String pgwAllocationTypeValue)
            throws JNCException {
        setPgwAllocationTypeValue(new YangString(pgwAllocationTypeValue));
    }

    /**
     * Unsets the value for child leaf "pgw-allocation-type".
     */
    public void unsetPgwAllocationTypeValue() throws JNCException {
        delete("pgw-allocation-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pgw-allocation-type" leaf will not have a value.
     */
    public void addPgwAllocationType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-allocation-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pgw-allocation-type" with operation "replace".
     */
    public void markPgwAllocationTypeReplace() throws JNCException {
        markLeafReplace("pgwAllocationType");
    }

    /**
     * Marks the leaf "pgw-allocation-type" with operation "merge".
     */
    public void markPgwAllocationTypeMerge() throws JNCException {
        markLeafMerge("pgwAllocationType");
    }

    /**
     * Marks the leaf "pgw-allocation-type" with operation "create".
     */
    public void markPgwAllocationTypeCreate() throws JNCException {
        markLeafCreate("pgwAllocationType");
    }

    /**
     * Marks the leaf "pgw-allocation-type" with operation "delete".
     */
    public void markPgwAllocationTypeDelete() throws JNCException {
        markLeafDelete("pgwAllocationType");
    }

    /* Access methods for optional leaf child: "sessions". */

    /**
     * Gets the value for child leaf "sessions".
     * @return The value of the leaf.
     */
    public YangUInt32 getSessionsValue() throws JNCException {
        return (YangUInt32)getValue("sessions");
    }

    /**
     * Sets the value for child leaf "sessions",
     * using instance of generated typedef class.
     * @param sessionsValue The value to set.
     * @param sessionsValue used during instantiation.
     */
    public void setSessionsValue(YangUInt32 sessionsValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sessions",
            sessionsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sessions",
     * using Java primitive values.
     * @param sessionsValue used during instantiation.
     */
    public void setSessionsValue(long sessionsValue) throws JNCException {
        setSessionsValue(new YangUInt32(sessionsValue));
    }

    /**
     * Sets the value for child leaf "sessions",
     * using a String value.
     * @param sessionsValue used during instantiation.
     */
    public void setSessionsValue(String sessionsValue) throws JNCException {
        setSessionsValue(new YangUInt32(sessionsValue));
    }

    /**
     * Unsets the value for child leaf "sessions".
     */
    public void unsetSessionsValue() throws JNCException {
        delete("sessions");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sessions" leaf will not have a value.
     */
    public void addSessions() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sessions",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sessions" with operation "replace".
     */
    public void markSessionsReplace() throws JNCException {
        markLeafReplace("sessions");
    }

    /**
     * Marks the leaf "sessions" with operation "merge".
     */
    public void markSessionsMerge() throws JNCException {
        markLeafMerge("sessions");
    }

    /**
     * Marks the leaf "sessions" with operation "create".
     */
    public void markSessionsCreate() throws JNCException {
        markLeafCreate("sessions");
    }

    /**
     * Marks the leaf "sessions" with operation "delete".
     */
    public void markSessionsDelete() throws JNCException {
        markLeafDelete("sessions");
    }

    /* Access methods for optional leaf child: "apn-charging-characteristics". */

    /**
     * Gets the value for child leaf "apn-charging-characteristics".
     * @return The value of the leaf.
     */
    public YangUInt16 getApnChargingCharacteristicsValue() throws JNCException {
        return (YangUInt16)getValue("apn-charging-characteristics");
    }

    /**
     * Sets the value for child leaf "apn-charging-characteristics",
     * using instance of generated typedef class.
     * @param apnChargingCharacteristicsValue The value to set.
     * @param apnChargingCharacteristicsValue used during instantiation.
     */
    public void setApnChargingCharacteristicsValue(YangUInt16 apnChargingCharacteristicsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-charging-characteristics",
            apnChargingCharacteristicsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-charging-characteristics",
     * using Java primitive values.
     * @param apnChargingCharacteristicsValue used during instantiation.
     */
    public void setApnChargingCharacteristicsValue(int apnChargingCharacteristicsValue)
            throws JNCException {
        setApnChargingCharacteristicsValue(new YangUInt16(apnChargingCharacteristicsValue));
    }

    /**
     * Sets the value for child leaf "apn-charging-characteristics",
     * using a String value.
     * @param apnChargingCharacteristicsValue used during instantiation.
     */
    public void setApnChargingCharacteristicsValue(String apnChargingCharacteristicsValue)
            throws JNCException {
        setApnChargingCharacteristicsValue(new YangUInt16(apnChargingCharacteristicsValue));
    }

    /**
     * Unsets the value for child leaf "apn-charging-characteristics".
     */
    public void unsetApnChargingCharacteristicsValue() throws JNCException {
        delete("apn-charging-characteristics");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-charging-characteristics" leaf will not have a value.
     */
    public void addApnChargingCharacteristics() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-charging-characteristics",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-charging-characteristics" with operation "replace".
     */
    public void markApnChargingCharacteristicsReplace() throws JNCException {
        markLeafReplace("apnChargingCharacteristics");
    }

    /**
     * Marks the leaf "apn-charging-characteristics" with operation "merge".
     */
    public void markApnChargingCharacteristicsMerge() throws JNCException {
        markLeafMerge("apnChargingCharacteristics");
    }

    /**
     * Marks the leaf "apn-charging-characteristics" with operation "create".
     */
    public void markApnChargingCharacteristicsCreate() throws JNCException {
        markLeafCreate("apnChargingCharacteristics");
    }

    /**
     * Marks the leaf "apn-charging-characteristics" with operation "delete".
     */
    public void markApnChargingCharacteristicsDelete() throws JNCException {
        markLeafDelete("apnChargingCharacteristics");
    }

    /* Access methods for optional leaf child: "ipv4-pdp-address". */

    /**
     * Gets the value for child leaf "ipv4-pdp-address".
     * @return The value of the leaf.
     */
    public IpAddress getIpv4PdpAddressValue() throws JNCException {
        return (IpAddress)getValue("ipv4-pdp-address");
    }

    /**
     * Sets the value for child leaf "ipv4-pdp-address",
     * using a JNC type value.
     * @param ipv4PdpAddressValue The value to set.
     * @param ipv4PdpAddressValue used during instantiation.
     */
    public void setIpv4PdpAddressValue(IpAddress ipv4PdpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ipv4-pdp-address",
            ipv4PdpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ipv4-pdp-address",
     * using a String value.
     * @param ipv4PdpAddressValue used during instantiation.
     */
    public void setIpv4PdpAddressValue(String ipv4PdpAddressValue)
            throws JNCException {
        setIpv4PdpAddressValue(new IpAddress(ipv4PdpAddressValue));
    }

    /**
     * Unsets the value for child leaf "ipv4-pdp-address".
     */
    public void unsetIpv4PdpAddressValue() throws JNCException {
        delete("ipv4-pdp-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ipv4-pdp-address" leaf will not have a value.
     */
    public void addIpv4PdpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ipv4-pdp-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ipv4-pdp-address" with operation "replace".
     */
    public void markIpv4PdpAddressReplace() throws JNCException {
        markLeafReplace("ipv4PdpAddress");
    }

    /**
     * Marks the leaf "ipv4-pdp-address" with operation "merge".
     */
    public void markIpv4PdpAddressMerge() throws JNCException {
        markLeafMerge("ipv4PdpAddress");
    }

    /**
     * Marks the leaf "ipv4-pdp-address" with operation "create".
     */
    public void markIpv4PdpAddressCreate() throws JNCException {
        markLeafCreate("ipv4PdpAddress");
    }

    /**
     * Marks the leaf "ipv4-pdp-address" with operation "delete".
     */
    public void markIpv4PdpAddressDelete() throws JNCException {
        markLeafDelete("ipv4PdpAddress");
    }

    /* Access methods for optional leaf child: "qos-profile". */

    /**
     * Gets the value for child leaf "qos-profile".
     * @return The value of the leaf.
     */
    public YangString getQosProfileValue() throws JNCException {
        return (YangString)getValue("qos-profile");
    }

    /**
     * Sets the value for child leaf "qos-profile",
     * using instance of generated typedef class.
     * @param qosProfileValue The value to set.
     * @param qosProfileValue used during instantiation.
     */
    public void setQosProfileValue(YangString qosProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "qos-profile",
            qosProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "qos-profile",
     * using a String value.
     * @param qosProfileValue used during instantiation.
     */
    public void setQosProfileValue(String qosProfileValue) throws JNCException {
        setQosProfileValue(new YangString(qosProfileValue));
    }

    /**
     * Unsets the value for child leaf "qos-profile".
     */
    public void unsetQosProfileValue() throws JNCException {
        delete("qos-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "qos-profile" leaf will not have a value.
     */
    public void addQosProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "qos-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "qos-profile" with operation "replace".
     */
    public void markQosProfileReplace() throws JNCException {
        markLeafReplace("qosProfile");
    }

    /**
     * Marks the leaf "qos-profile" with operation "merge".
     */
    public void markQosProfileMerge() throws JNCException {
        markLeafMerge("qosProfile");
    }

    /**
     * Marks the leaf "qos-profile" with operation "create".
     */
    public void markQosProfileCreate() throws JNCException {
        markLeafCreate("qosProfile");
    }

    /**
     * Marks the leaf "qos-profile" with operation "delete".
     */
    public void markQosProfileDelete() throws JNCException {
        markLeafDelete("qosProfile");
    }

    /* Access methods for optional leaf child: "lipa-permission". */

    /**
     * Gets the value for child leaf "lipa-permission".
     * @return The value of the leaf.
     */
    public YangString getLipaPermissionValue() throws JNCException {
        return (YangString)getValue("lipa-permission");
    }

    /**
     * Sets the value for child leaf "lipa-permission",
     * using instance of generated typedef class.
     * @param lipaPermissionValue The value to set.
     * @param lipaPermissionValue used during instantiation.
     */
    public void setLipaPermissionValue(YangString lipaPermissionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lipa-permission",
            lipaPermissionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lipa-permission",
     * using a String value.
     * @param lipaPermissionValue used during instantiation.
     */
    public void setLipaPermissionValue(String lipaPermissionValue)
            throws JNCException {
        setLipaPermissionValue(new YangString(lipaPermissionValue));
    }

    /**
     * Unsets the value for child leaf "lipa-permission".
     */
    public void unsetLipaPermissionValue() throws JNCException {
        delete("lipa-permission");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lipa-permission" leaf will not have a value.
     */
    public void addLipaPermission() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lipa-permission",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lipa-permission" with operation "replace".
     */
    public void markLipaPermissionReplace() throws JNCException {
        markLeafReplace("lipaPermission");
    }

    /**
     * Marks the leaf "lipa-permission" with operation "merge".
     */
    public void markLipaPermissionMerge() throws JNCException {
        markLeafMerge("lipaPermission");
    }

    /**
     * Marks the leaf "lipa-permission" with operation "create".
     */
    public void markLipaPermissionCreate() throws JNCException {
        markLeafCreate("lipaPermission");
    }

    /**
     * Marks the leaf "lipa-permission" with operation "delete".
     */
    public void markLipaPermissionDelete() throws JNCException {
        markLeafDelete("lipaPermission");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
