/* 
 * @(#)MmeLocalQosProfile.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/mme-local-qos-profile"
 * <p>
 * See line 921 in
 * sgsnScConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeLocalQosProfile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeLocalQosProfile object.
     */
    public MmeLocalQosProfile() {
        super(Epc.NAMESPACE, "mme-local-qos-profile");
    }

    /**
     * Constructor for an initialized MmeLocalQosProfile object,
     * 
     * @param nameValue Key argument of child.
     */
    public MmeLocalQosProfile(YangString nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-local-qos-profile");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized MmeLocalQosProfile object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public MmeLocalQosProfile(String nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-local-qos-profile");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeLocalQosProfile clone() {
        MmeLocalQosProfile copy;
        try {
            copy = new MmeLocalQosProfile(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeLocalQosProfile)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeLocalQosProfile cloneShallow() {
        MmeLocalQosProfile copy;
        try {
            copy = new MmeLocalQosProfile(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeLocalQosProfile)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "delivery-order",
            "delivery-of-erroneous-sdus",
            "traffic-class",
            "max-sdu-size-str",
            "traffic-handling-priority",
            "sdu-error-ratio",
            "residual-biterror-rate",
            "max-bitrate-uplink-str",
            "max-bitrate-downlink-str",
            "guaranteed-bitrate-uplink-str",
            "guaranteed-bitrate-downlink-str",
            "allocation-retention",
            "transfer-delay",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "delivery-order". */

    /**
     * Gets the value for child leaf "delivery-order".
     * @return The value of the leaf.
     */
    public YangEnumeration getDeliveryOrderValue() throws JNCException {
        YangEnumeration deliveryOrder = (YangEnumeration)getValue("delivery-order");
        if (deliveryOrder == null) {
            deliveryOrder = new YangEnumeration("use-subscribed", new String[] {  // default
                "use-subscribed",
                "with-delivery-order",
                "without-delivery-order",
            });
        }
        return deliveryOrder;
    }

    /**
     * Sets the value for child leaf "delivery-order",
     * using instance of generated typedef class.
     * @param deliveryOrderValue The value to set.
     * @param deliveryOrderValue used during instantiation.
     */
    public void setDeliveryOrderValue(YangEnumeration deliveryOrderValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "delivery-order",
            deliveryOrderValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "delivery-order",
     * using a String value.
     * @param deliveryOrderValue used during instantiation.
     */
    public void setDeliveryOrderValue(String deliveryOrderValue)
            throws JNCException {
        setDeliveryOrderValue(new YangEnumeration(deliveryOrderValue, new String[] {
             "use-subscribed",
             "with-delivery-order",
             "without-delivery-order",
        }));
    }

    /**
     * Unsets the value for child leaf "delivery-order".
     */
    public void unsetDeliveryOrderValue() throws JNCException {
        delete("delivery-order");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "delivery-order" leaf will not have a value.
     */
    public void addDeliveryOrder() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "delivery-order",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "delivery-order" with operation "replace".
     */
    public void markDeliveryOrderReplace() throws JNCException {
        markLeafReplace("deliveryOrder");
    }

    /**
     * Marks the leaf "delivery-order" with operation "merge".
     */
    public void markDeliveryOrderMerge() throws JNCException {
        markLeafMerge("deliveryOrder");
    }

    /**
     * Marks the leaf "delivery-order" with operation "create".
     */
    public void markDeliveryOrderCreate() throws JNCException {
        markLeafCreate("deliveryOrder");
    }

    /**
     * Marks the leaf "delivery-order" with operation "delete".
     */
    public void markDeliveryOrderDelete() throws JNCException {
        markLeafDelete("deliveryOrder");
    }

    /* Access methods for optional leaf child: "delivery-of-erroneous-sdus". */

    /**
     * Gets the value for child leaf "delivery-of-erroneous-sdus".
     * @return The value of the leaf.
     */
    public YangEnumeration getDeliveryOfErroneousSdusValue()
            throws JNCException {
        YangEnumeration deliveryOfErroneousSdus = (YangEnumeration)getValue("delivery-of-erroneous-sdus");
        if (deliveryOfErroneousSdus == null) {
            deliveryOfErroneousSdus = new YangEnumeration("use-subscribed", new String[] {  // default
                "use-subscribed",
                "no-detect",
                "err-sdus-delivered",
                "err-sdus-not-delivered",
            });
        }
        return deliveryOfErroneousSdus;
    }

    /**
     * Sets the value for child leaf "delivery-of-erroneous-sdus",
     * using instance of generated typedef class.
     * @param deliveryOfErroneousSdusValue The value to set.
     * @param deliveryOfErroneousSdusValue used during instantiation.
     */
    public void setDeliveryOfErroneousSdusValue(YangEnumeration deliveryOfErroneousSdusValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "delivery-of-erroneous-sdus",
            deliveryOfErroneousSdusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "delivery-of-erroneous-sdus",
     * using a String value.
     * @param deliveryOfErroneousSdusValue used during instantiation.
     */
    public void setDeliveryOfErroneousSdusValue(String deliveryOfErroneousSdusValue)
            throws JNCException {
        setDeliveryOfErroneousSdusValue(new YangEnumeration(deliveryOfErroneousSdusValue, new String[] {
             "use-subscribed",
             "no-detect",
             "err-sdus-delivered",
             "err-sdus-not-delivered",
        }));
    }

    /**
     * Unsets the value for child leaf "delivery-of-erroneous-sdus".
     */
    public void unsetDeliveryOfErroneousSdusValue() throws JNCException {
        delete("delivery-of-erroneous-sdus");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "delivery-of-erroneous-sdus" leaf will not have a value.
     */
    public void addDeliveryOfErroneousSdus() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "delivery-of-erroneous-sdus",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "delivery-of-erroneous-sdus" with operation "replace".
     */
    public void markDeliveryOfErroneousSdusReplace() throws JNCException {
        markLeafReplace("deliveryOfErroneousSdus");
    }

    /**
     * Marks the leaf "delivery-of-erroneous-sdus" with operation "merge".
     */
    public void markDeliveryOfErroneousSdusMerge() throws JNCException {
        markLeafMerge("deliveryOfErroneousSdus");
    }

    /**
     * Marks the leaf "delivery-of-erroneous-sdus" with operation "create".
     */
    public void markDeliveryOfErroneousSdusCreate() throws JNCException {
        markLeafCreate("deliveryOfErroneousSdus");
    }

    /**
     * Marks the leaf "delivery-of-erroneous-sdus" with operation "delete".
     */
    public void markDeliveryOfErroneousSdusDelete() throws JNCException {
        markLeafDelete("deliveryOfErroneousSdus");
    }

    /* Access methods for optional leaf child: "traffic-class". */

    /**
     * Gets the value for child leaf "traffic-class".
     * @return The value of the leaf.
     */
    public YangEnumeration getTrafficClassValue() throws JNCException {
        YangEnumeration trafficClass = (YangEnumeration)getValue("traffic-class");
        if (trafficClass == null) {
            trafficClass = new YangEnumeration("use-subscribed", new String[] {  // default
                "use-subscribed",
                "conversation",
                "streaming",
                "interactive",
                "background",
            });
        }
        return trafficClass;
    }

    /**
     * Sets the value for child leaf "traffic-class",
     * using instance of generated typedef class.
     * @param trafficClassValue The value to set.
     * @param trafficClassValue used during instantiation.
     */
    public void setTrafficClassValue(YangEnumeration trafficClassValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "traffic-class",
            trafficClassValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "traffic-class",
     * using a String value.
     * @param trafficClassValue used during instantiation.
     */
    public void setTrafficClassValue(String trafficClassValue)
            throws JNCException {
        setTrafficClassValue(new YangEnumeration(trafficClassValue, new String[] {
             "use-subscribed",
             "conversation",
             "streaming",
             "interactive",
             "background",
        }));
    }

    /**
     * Unsets the value for child leaf "traffic-class".
     */
    public void unsetTrafficClassValue() throws JNCException {
        delete("traffic-class");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "traffic-class" leaf will not have a value.
     */
    public void addTrafficClass() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "traffic-class",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "traffic-class" with operation "replace".
     */
    public void markTrafficClassReplace() throws JNCException {
        markLeafReplace("trafficClass");
    }

    /**
     * Marks the leaf "traffic-class" with operation "merge".
     */
    public void markTrafficClassMerge() throws JNCException {
        markLeafMerge("trafficClass");
    }

    /**
     * Marks the leaf "traffic-class" with operation "create".
     */
    public void markTrafficClassCreate() throws JNCException {
        markLeafCreate("trafficClass");
    }

    /**
     * Marks the leaf "traffic-class" with operation "delete".
     */
    public void markTrafficClassDelete() throws JNCException {
        markLeafDelete("trafficClass");
    }

    /* Access methods for optional leaf child: "max-sdu-size-str". */

    /**
     * Gets the value for child leaf "max-sdu-size-str".
     * @return The value of the leaf.
     */
    public YangString getMaxSduSizeStrValue() throws JNCException {
        YangString maxSduSizeStr = (YangString)getValue("max-sdu-size-str");
        if (maxSduSizeStr == null) {
            maxSduSizeStr = new YangString("use-subscribed");  // default
        }
        return maxSduSizeStr;
    }

    /**
     * Sets the value for child leaf "max-sdu-size-str",
     * using instance of generated typedef class.
     * @param maxSduSizeStrValue The value to set.
     * @param maxSduSizeStrValue used during instantiation.
     */
    public void setMaxSduSizeStrValue(YangString maxSduSizeStrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-sdu-size-str",
            maxSduSizeStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-sdu-size-str",
     * using a String value.
     * @param maxSduSizeStrValue used during instantiation.
     */
    public void setMaxSduSizeStrValue(String maxSduSizeStrValue)
            throws JNCException {
        setMaxSduSizeStrValue(new YangString(maxSduSizeStrValue));
    }

    /**
     * Unsets the value for child leaf "max-sdu-size-str".
     */
    public void unsetMaxSduSizeStrValue() throws JNCException {
        delete("max-sdu-size-str");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-sdu-size-str" leaf will not have a value.
     */
    public void addMaxSduSizeStr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-sdu-size-str",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-sdu-size-str" with operation "replace".
     */
    public void markMaxSduSizeStrReplace() throws JNCException {
        markLeafReplace("maxSduSizeStr");
    }

    /**
     * Marks the leaf "max-sdu-size-str" with operation "merge".
     */
    public void markMaxSduSizeStrMerge() throws JNCException {
        markLeafMerge("maxSduSizeStr");
    }

    /**
     * Marks the leaf "max-sdu-size-str" with operation "create".
     */
    public void markMaxSduSizeStrCreate() throws JNCException {
        markLeafCreate("maxSduSizeStr");
    }

    /**
     * Marks the leaf "max-sdu-size-str" with operation "delete".
     */
    public void markMaxSduSizeStrDelete() throws JNCException {
        markLeafDelete("maxSduSizeStr");
    }

    /* Access methods for optional leaf child: "traffic-handling-priority". */

    /**
     * Gets the value for child leaf "traffic-handling-priority".
     * @return The value of the leaf.
     */
    public YangEnumeration getTrafficHandlingPriorityValue()
            throws JNCException {
        YangEnumeration trafficHandlingPriority = (YangEnumeration)getValue("traffic-handling-priority");
        if (trafficHandlingPriority == null) {
            trafficHandlingPriority = new YangEnumeration("use-subscribed", new String[] {  // default
                "use-subscribed",
                "priority-level1",
                "priority-level2",
                "priority-level3",
            });
        }
        return trafficHandlingPriority;
    }

    /**
     * Sets the value for child leaf "traffic-handling-priority",
     * using instance of generated typedef class.
     * @param trafficHandlingPriorityValue The value to set.
     * @param trafficHandlingPriorityValue used during instantiation.
     */
    public void setTrafficHandlingPriorityValue(YangEnumeration trafficHandlingPriorityValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "traffic-handling-priority",
            trafficHandlingPriorityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "traffic-handling-priority",
     * using a String value.
     * @param trafficHandlingPriorityValue used during instantiation.
     */
    public void setTrafficHandlingPriorityValue(String trafficHandlingPriorityValue)
            throws JNCException {
        setTrafficHandlingPriorityValue(new YangEnumeration(trafficHandlingPriorityValue, new String[] {
             "use-subscribed",
             "priority-level1",
             "priority-level2",
             "priority-level3",
        }));
    }

    /**
     * Unsets the value for child leaf "traffic-handling-priority".
     */
    public void unsetTrafficHandlingPriorityValue() throws JNCException {
        delete("traffic-handling-priority");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "traffic-handling-priority" leaf will not have a value.
     */
    public void addTrafficHandlingPriority() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "traffic-handling-priority",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "traffic-handling-priority" with operation "replace".
     */
    public void markTrafficHandlingPriorityReplace() throws JNCException {
        markLeafReplace("trafficHandlingPriority");
    }

    /**
     * Marks the leaf "traffic-handling-priority" with operation "merge".
     */
    public void markTrafficHandlingPriorityMerge() throws JNCException {
        markLeafMerge("trafficHandlingPriority");
    }

    /**
     * Marks the leaf "traffic-handling-priority" with operation "create".
     */
    public void markTrafficHandlingPriorityCreate() throws JNCException {
        markLeafCreate("trafficHandlingPriority");
    }

    /**
     * Marks the leaf "traffic-handling-priority" with operation "delete".
     */
    public void markTrafficHandlingPriorityDelete() throws JNCException {
        markLeafDelete("trafficHandlingPriority");
    }

    /* Access methods for optional leaf child: "sdu-error-ratio". */

    /**
     * Gets the value for child leaf "sdu-error-ratio".
     * @return The value of the leaf.
     */
    public YangEnumeration getSduErrorRatioValue() throws JNCException {
        YangEnumeration sduErrorRatio = (YangEnumeration)getValue("sdu-error-ratio");
        if (sduErrorRatio == null) {
            sduErrorRatio = new YangEnumeration("use-subscribed", new String[] {  // default
                "use-subscribed",
                "sdu-err-ratio-1hundredth",
                "sdu-err-ratio-7thousandth",
                "sdu-err-ratio-1thousandth",
                "sdu-err-ratio-1tenth",
                "sdu-err-ratio-1hunthousandth",
                "sdu-err-ratio-1tenthousandth",
            });
        }
        return sduErrorRatio;
    }

    /**
     * Sets the value for child leaf "sdu-error-ratio",
     * using instance of generated typedef class.
     * @param sduErrorRatioValue The value to set.
     * @param sduErrorRatioValue used during instantiation.
     */
    public void setSduErrorRatioValue(YangEnumeration sduErrorRatioValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sdu-error-ratio",
            sduErrorRatioValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sdu-error-ratio",
     * using a String value.
     * @param sduErrorRatioValue used during instantiation.
     */
    public void setSduErrorRatioValue(String sduErrorRatioValue)
            throws JNCException {
        setSduErrorRatioValue(new YangEnumeration(sduErrorRatioValue, new String[] {
             "use-subscribed",
             "sdu-err-ratio-1hundredth",
             "sdu-err-ratio-7thousandth",
             "sdu-err-ratio-1thousandth",
             "sdu-err-ratio-1tenth",
             "sdu-err-ratio-1hunthousandth",
             "sdu-err-ratio-1tenthousandth",
        }));
    }

    /**
     * Unsets the value for child leaf "sdu-error-ratio".
     */
    public void unsetSduErrorRatioValue() throws JNCException {
        delete("sdu-error-ratio");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sdu-error-ratio" leaf will not have a value.
     */
    public void addSduErrorRatio() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sdu-error-ratio",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sdu-error-ratio" with operation "replace".
     */
    public void markSduErrorRatioReplace() throws JNCException {
        markLeafReplace("sduErrorRatio");
    }

    /**
     * Marks the leaf "sdu-error-ratio" with operation "merge".
     */
    public void markSduErrorRatioMerge() throws JNCException {
        markLeafMerge("sduErrorRatio");
    }

    /**
     * Marks the leaf "sdu-error-ratio" with operation "create".
     */
    public void markSduErrorRatioCreate() throws JNCException {
        markLeafCreate("sduErrorRatio");
    }

    /**
     * Marks the leaf "sdu-error-ratio" with operation "delete".
     */
    public void markSduErrorRatioDelete() throws JNCException {
        markLeafDelete("sduErrorRatio");
    }

    /* Access methods for optional leaf child: "residual-biterror-rate". */

    /**
     * Gets the value for child leaf "residual-biterror-rate".
     * @return The value of the leaf.
     */
    public YangEnumeration getResidualBiterrorRateValue() throws JNCException {
        YangEnumeration residualBiterrorRate = (YangEnumeration)getValue("residual-biterror-rate");
        if (residualBiterrorRate == null) {
            residualBiterrorRate = new YangEnumeration("use-subscribed", new String[] {  // default
                "use-subscribed",
                "residualber-5hundredth",
                "residualber-1hundredth",
                "residualber-5thousandth",
                "residualber-4thousandth",
                "residualber-1thousandth",
                "residualber-1tenthousandth",
                "residualber-1hundredthousandth",
                "residualber-1millionth",
                "residualber-6hundredmillionth",
            });
        }
        return residualBiterrorRate;
    }

    /**
     * Sets the value for child leaf "residual-biterror-rate",
     * using instance of generated typedef class.
     * @param residualBiterrorRateValue The value to set.
     * @param residualBiterrorRateValue used during instantiation.
     */
    public void setResidualBiterrorRateValue(YangEnumeration residualBiterrorRateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "residual-biterror-rate",
            residualBiterrorRateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "residual-biterror-rate",
     * using a String value.
     * @param residualBiterrorRateValue used during instantiation.
     */
    public void setResidualBiterrorRateValue(String residualBiterrorRateValue)
            throws JNCException {
        setResidualBiterrorRateValue(new YangEnumeration(residualBiterrorRateValue, new String[] {
             "use-subscribed",
             "residualber-5hundredth",
             "residualber-1hundredth",
             "residualber-5thousandth",
             "residualber-4thousandth",
             "residualber-1thousandth",
             "residualber-1tenthousandth",
             "residualber-1hundredthousandth",
             "residualber-1millionth",
             "residualber-6hundredmillionth",
        }));
    }

    /**
     * Unsets the value for child leaf "residual-biterror-rate".
     */
    public void unsetResidualBiterrorRateValue() throws JNCException {
        delete("residual-biterror-rate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "residual-biterror-rate" leaf will not have a value.
     */
    public void addResidualBiterrorRate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "residual-biterror-rate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "residual-biterror-rate" with operation "replace".
     */
    public void markResidualBiterrorRateReplace() throws JNCException {
        markLeafReplace("residualBiterrorRate");
    }

    /**
     * Marks the leaf "residual-biterror-rate" with operation "merge".
     */
    public void markResidualBiterrorRateMerge() throws JNCException {
        markLeafMerge("residualBiterrorRate");
    }

    /**
     * Marks the leaf "residual-biterror-rate" with operation "create".
     */
    public void markResidualBiterrorRateCreate() throws JNCException {
        markLeafCreate("residualBiterrorRate");
    }

    /**
     * Marks the leaf "residual-biterror-rate" with operation "delete".
     */
    public void markResidualBiterrorRateDelete() throws JNCException {
        markLeafDelete("residualBiterrorRate");
    }

    /* Access methods for optional leaf child: "max-bitrate-uplink-str". */

    /**
     * Gets the value for child leaf "max-bitrate-uplink-str".
     * @return The value of the leaf.
     */
    public YangString getMaxBitrateUplinkStrValue() throws JNCException {
        YangString maxBitrateUplinkStr = (YangString)getValue("max-bitrate-uplink-str");
        if (maxBitrateUplinkStr == null) {
            maxBitrateUplinkStr = new YangString("use-subscribed");  // default
        }
        return maxBitrateUplinkStr;
    }

    /**
     * Sets the value for child leaf "max-bitrate-uplink-str",
     * using instance of generated typedef class.
     * @param maxBitrateUplinkStrValue The value to set.
     * @param maxBitrateUplinkStrValue used during instantiation.
     */
    public void setMaxBitrateUplinkStrValue(YangString maxBitrateUplinkStrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-bitrate-uplink-str",
            maxBitrateUplinkStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-bitrate-uplink-str",
     * using a String value.
     * @param maxBitrateUplinkStrValue used during instantiation.
     */
    public void setMaxBitrateUplinkStrValue(String maxBitrateUplinkStrValue)
            throws JNCException {
        setMaxBitrateUplinkStrValue(new YangString(maxBitrateUplinkStrValue));
    }

    /**
     * Unsets the value for child leaf "max-bitrate-uplink-str".
     */
    public void unsetMaxBitrateUplinkStrValue() throws JNCException {
        delete("max-bitrate-uplink-str");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-bitrate-uplink-str" leaf will not have a value.
     */
    public void addMaxBitrateUplinkStr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-bitrate-uplink-str",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-bitrate-uplink-str" with operation "replace".
     */
    public void markMaxBitrateUplinkStrReplace() throws JNCException {
        markLeafReplace("maxBitrateUplinkStr");
    }

    /**
     * Marks the leaf "max-bitrate-uplink-str" with operation "merge".
     */
    public void markMaxBitrateUplinkStrMerge() throws JNCException {
        markLeafMerge("maxBitrateUplinkStr");
    }

    /**
     * Marks the leaf "max-bitrate-uplink-str" with operation "create".
     */
    public void markMaxBitrateUplinkStrCreate() throws JNCException {
        markLeafCreate("maxBitrateUplinkStr");
    }

    /**
     * Marks the leaf "max-bitrate-uplink-str" with operation "delete".
     */
    public void markMaxBitrateUplinkStrDelete() throws JNCException {
        markLeafDelete("maxBitrateUplinkStr");
    }

    /* Access methods for optional leaf child: "max-bitrate-downlink-str". */

    /**
     * Gets the value for child leaf "max-bitrate-downlink-str".
     * @return The value of the leaf.
     */
    public YangString getMaxBitrateDownlinkStrValue() throws JNCException {
        YangString maxBitrateDownlinkStr = (YangString)getValue("max-bitrate-downlink-str");
        if (maxBitrateDownlinkStr == null) {
            maxBitrateDownlinkStr = new YangString("use-subscribed");  // default
        }
        return maxBitrateDownlinkStr;
    }

    /**
     * Sets the value for child leaf "max-bitrate-downlink-str",
     * using instance of generated typedef class.
     * @param maxBitrateDownlinkStrValue The value to set.
     * @param maxBitrateDownlinkStrValue used during instantiation.
     */
    public void setMaxBitrateDownlinkStrValue(YangString maxBitrateDownlinkStrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-bitrate-downlink-str",
            maxBitrateDownlinkStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-bitrate-downlink-str",
     * using a String value.
     * @param maxBitrateDownlinkStrValue used during instantiation.
     */
    public void setMaxBitrateDownlinkStrValue(String maxBitrateDownlinkStrValue)
            throws JNCException {
        setMaxBitrateDownlinkStrValue(new YangString(maxBitrateDownlinkStrValue));
    }

    /**
     * Unsets the value for child leaf "max-bitrate-downlink-str".
     */
    public void unsetMaxBitrateDownlinkStrValue() throws JNCException {
        delete("max-bitrate-downlink-str");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-bitrate-downlink-str" leaf will not have a value.
     */
    public void addMaxBitrateDownlinkStr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-bitrate-downlink-str",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-bitrate-downlink-str" with operation "replace".
     */
    public void markMaxBitrateDownlinkStrReplace() throws JNCException {
        markLeafReplace("maxBitrateDownlinkStr");
    }

    /**
     * Marks the leaf "max-bitrate-downlink-str" with operation "merge".
     */
    public void markMaxBitrateDownlinkStrMerge() throws JNCException {
        markLeafMerge("maxBitrateDownlinkStr");
    }

    /**
     * Marks the leaf "max-bitrate-downlink-str" with operation "create".
     */
    public void markMaxBitrateDownlinkStrCreate() throws JNCException {
        markLeafCreate("maxBitrateDownlinkStr");
    }

    /**
     * Marks the leaf "max-bitrate-downlink-str" with operation "delete".
     */
    public void markMaxBitrateDownlinkStrDelete() throws JNCException {
        markLeafDelete("maxBitrateDownlinkStr");
    }

    /* Access methods for optional leaf child: "guaranteed-bitrate-uplink-str". */

    /**
     * Gets the value for child leaf "guaranteed-bitrate-uplink-str".
     * @return The value of the leaf.
     */
    public YangString getGuaranteedBitrateUplinkStrValue() throws JNCException {
        YangString guaranteedBitrateUplinkStr = (YangString)getValue("guaranteed-bitrate-uplink-str");
        if (guaranteedBitrateUplinkStr == null) {
            guaranteedBitrateUplinkStr = new YangString("use-subscribed");  // default
        }
        return guaranteedBitrateUplinkStr;
    }

    /**
     * Sets the value for child leaf "guaranteed-bitrate-uplink-str",
     * using instance of generated typedef class.
     * @param guaranteedBitrateUplinkStrValue The value to set.
     * @param guaranteedBitrateUplinkStrValue used during instantiation.
     */
    public void setGuaranteedBitrateUplinkStrValue(YangString guaranteedBitrateUplinkStrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guaranteed-bitrate-uplink-str",
            guaranteedBitrateUplinkStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "guaranteed-bitrate-uplink-str",
     * using a String value.
     * @param guaranteedBitrateUplinkStrValue used during instantiation.
     */
    public void setGuaranteedBitrateUplinkStrValue(String guaranteedBitrateUplinkStrValue)
            throws JNCException {
        setGuaranteedBitrateUplinkStrValue(new YangString(guaranteedBitrateUplinkStrValue));
    }

    /**
     * Unsets the value for child leaf "guaranteed-bitrate-uplink-str".
     */
    public void unsetGuaranteedBitrateUplinkStrValue() throws JNCException {
        delete("guaranteed-bitrate-uplink-str");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "guaranteed-bitrate-uplink-str" leaf will not have a value.
     */
    public void addGuaranteedBitrateUplinkStr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guaranteed-bitrate-uplink-str",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "guaranteed-bitrate-uplink-str" with operation "replace".
     */
    public void markGuaranteedBitrateUplinkStrReplace() throws JNCException {
        markLeafReplace("guaranteedBitrateUplinkStr");
    }

    /**
     * Marks the leaf "guaranteed-bitrate-uplink-str" with operation "merge".
     */
    public void markGuaranteedBitrateUplinkStrMerge() throws JNCException {
        markLeafMerge("guaranteedBitrateUplinkStr");
    }

    /**
     * Marks the leaf "guaranteed-bitrate-uplink-str" with operation "create".
     */
    public void markGuaranteedBitrateUplinkStrCreate() throws JNCException {
        markLeafCreate("guaranteedBitrateUplinkStr");
    }

    /**
     * Marks the leaf "guaranteed-bitrate-uplink-str" with operation "delete".
     */
    public void markGuaranteedBitrateUplinkStrDelete() throws JNCException {
        markLeafDelete("guaranteedBitrateUplinkStr");
    }

    /* Access methods for optional leaf child: "guaranteed-bitrate-downlink-str". */

    /**
     * Gets the value for child leaf "guaranteed-bitrate-downlink-str".
     * @return The value of the leaf.
     */
    public YangString getGuaranteedBitrateDownlinkStrValue()
            throws JNCException {
        YangString guaranteedBitrateDownlinkStr = (YangString)getValue("guaranteed-bitrate-downlink-str");
        if (guaranteedBitrateDownlinkStr == null) {
            guaranteedBitrateDownlinkStr = new YangString("use-subscribed");  // default
        }
        return guaranteedBitrateDownlinkStr;
    }

    /**
     * Sets the value for child leaf "guaranteed-bitrate-downlink-str",
     * using instance of generated typedef class.
     * @param guaranteedBitrateDownlinkStrValue The value to set.
     * @param guaranteedBitrateDownlinkStrValue used during instantiation.
     */
    public void setGuaranteedBitrateDownlinkStrValue(YangString guaranteedBitrateDownlinkStrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guaranteed-bitrate-downlink-str",
            guaranteedBitrateDownlinkStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "guaranteed-bitrate-downlink-str",
     * using a String value.
     * @param guaranteedBitrateDownlinkStrValue used during instantiation.
     */
    public void setGuaranteedBitrateDownlinkStrValue(String guaranteedBitrateDownlinkStrValue)
            throws JNCException {
        setGuaranteedBitrateDownlinkStrValue(new YangString(guaranteedBitrateDownlinkStrValue));
    }

    /**
     * Unsets the value for child leaf "guaranteed-bitrate-downlink-str".
     */
    public void unsetGuaranteedBitrateDownlinkStrValue() throws JNCException {
        delete("guaranteed-bitrate-downlink-str");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "guaranteed-bitrate-downlink-str" leaf will not have a value.
     */
    public void addGuaranteedBitrateDownlinkStr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guaranteed-bitrate-downlink-str",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "guaranteed-bitrate-downlink-str" with operation "replace".
     */
    public void markGuaranteedBitrateDownlinkStrReplace() throws JNCException {
        markLeafReplace("guaranteedBitrateDownlinkStr");
    }

    /**
     * Marks the leaf "guaranteed-bitrate-downlink-str" with operation "merge".
     */
    public void markGuaranteedBitrateDownlinkStrMerge() throws JNCException {
        markLeafMerge("guaranteedBitrateDownlinkStr");
    }

    /**
     * Marks the leaf "guaranteed-bitrate-downlink-str" with operation "create".
     */
    public void markGuaranteedBitrateDownlinkStrCreate() throws JNCException {
        markLeafCreate("guaranteedBitrateDownlinkStr");
    }

    /**
     * Marks the leaf "guaranteed-bitrate-downlink-str" with operation "delete".
     */
    public void markGuaranteedBitrateDownlinkStrDelete() throws JNCException {
        markLeafDelete("guaranteedBitrateDownlinkStr");
    }

    /* Access methods for optional leaf child: "allocation-retention". */

    /**
     * Gets the value for child leaf "allocation-retention".
     * @return The value of the leaf.
     */
    public YangEnumeration getAllocationRetentionValue() throws JNCException {
        YangEnumeration allocationRetention = (YangEnumeration)getValue("allocation-retention");
        if (allocationRetention == null) {
            allocationRetention = new YangEnumeration("use-subscribed", new String[] {  // default
                "use-subscribed",
                "allocation-retention-level1",
                "allocation-retention-level2",
                "allocation-retention-level3",
            });
        }
        return allocationRetention;
    }

    /**
     * Sets the value for child leaf "allocation-retention",
     * using instance of generated typedef class.
     * @param allocationRetentionValue The value to set.
     * @param allocationRetentionValue used during instantiation.
     */
    public void setAllocationRetentionValue(YangEnumeration allocationRetentionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "allocation-retention",
            allocationRetentionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "allocation-retention",
     * using a String value.
     * @param allocationRetentionValue used during instantiation.
     */
    public void setAllocationRetentionValue(String allocationRetentionValue)
            throws JNCException {
        setAllocationRetentionValue(new YangEnumeration(allocationRetentionValue, new String[] {
             "use-subscribed",
             "allocation-retention-level1",
             "allocation-retention-level2",
             "allocation-retention-level3",
        }));
    }

    /**
     * Unsets the value for child leaf "allocation-retention".
     */
    public void unsetAllocationRetentionValue() throws JNCException {
        delete("allocation-retention");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "allocation-retention" leaf will not have a value.
     */
    public void addAllocationRetention() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "allocation-retention",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "allocation-retention" with operation "replace".
     */
    public void markAllocationRetentionReplace() throws JNCException {
        markLeafReplace("allocationRetention");
    }

    /**
     * Marks the leaf "allocation-retention" with operation "merge".
     */
    public void markAllocationRetentionMerge() throws JNCException {
        markLeafMerge("allocationRetention");
    }

    /**
     * Marks the leaf "allocation-retention" with operation "create".
     */
    public void markAllocationRetentionCreate() throws JNCException {
        markLeafCreate("allocationRetention");
    }

    /**
     * Marks the leaf "allocation-retention" with operation "delete".
     */
    public void markAllocationRetentionDelete() throws JNCException {
        markLeafDelete("allocationRetention");
    }

    /* Access methods for optional leaf child: "transfer-delay". */

    /**
     * Gets the value for child leaf "transfer-delay".
     * @return The value of the leaf.
     */
    public YangString getTransferDelayValue() throws JNCException {
        YangString transferDelay = (YangString)getValue("transfer-delay");
        if (transferDelay == null) {
            transferDelay = new YangString("use-subscribed");  // default
        }
        return transferDelay;
    }

    /**
     * Sets the value for child leaf "transfer-delay",
     * using instance of generated typedef class.
     * @param transferDelayValue The value to set.
     * @param transferDelayValue used during instantiation.
     */
    public void setTransferDelayValue(YangString transferDelayValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "transfer-delay",
            transferDelayValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "transfer-delay",
     * using a String value.
     * @param transferDelayValue used during instantiation.
     */
    public void setTransferDelayValue(String transferDelayValue)
            throws JNCException {
        setTransferDelayValue(new YangString(transferDelayValue));
    }

    /**
     * Unsets the value for child leaf "transfer-delay".
     */
    public void unsetTransferDelayValue() throws JNCException {
        delete("transfer-delay");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "transfer-delay" leaf will not have a value.
     */
    public void addTransferDelay() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "transfer-delay",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "transfer-delay" with operation "replace".
     */
    public void markTransferDelayReplace() throws JNCException {
        markLeafReplace("transferDelay");
    }

    /**
     * Marks the leaf "transfer-delay" with operation "merge".
     */
    public void markTransferDelayMerge() throws JNCException {
        markLeafMerge("transferDelay");
    }

    /**
     * Marks the leaf "transfer-delay" with operation "create".
     */
    public void markTransferDelayCreate() throws JNCException {
        markLeafCreate("transferDelay");
    }

    /**
     * Marks the leaf "transfer-delay" with operation "delete".
     */
    public void markTransferDelayDelete() throws JNCException {
        markLeafDelete("transferDelay");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
