/* 
 * @(#)Imsi.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.subscriber.negotiatedQos;
import .hctaEpc.ImsiT;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/subscriber/negotiatedQos/imsi"
 * <p>
 * See line 1302 in
 * scCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Imsi extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Imsi object.
     */
    public Imsi() {
        super(Epc.NAMESPACE, "imsi");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Imsi clone() {
        return (Imsi)cloneContent(new Imsi());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Imsi cloneShallow() {
        return (Imsi)cloneShallowContent(new Imsi());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "imsi",
            "nsapi",
            "delivery-order",
            "delivery-of-erroneous-sdus",
            "traffic-class",
            "max-sdu-size",
            "traffic-handling-priority",
            "sdu-error-ratio",
            "residual-biterror-rate",
            "max-bitrate-uplink",
            "max-bitrate-downlink",
            "guaranteed-bitrate-uplink",
            "guaranteed-bitrate-downlink",
            "allocation-retention",
            "transfer-delay",
            "local-qos-profile",
        };
    }

    /* Access methods for leaf child: "imsi". */

    /**
     * Gets the value for child leaf "imsi".
     * @return The value of the leaf.
     */
    public ImsiT getImsiValue() throws JNCException {
        return (ImsiT)getValue("imsi");
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a JNC type value.
     * @param imsiValue The value to set.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(ImsiT imsiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            imsiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imsi",
     * using a String value.
     * @param imsiValue used during instantiation.
     */
    public void setImsiValue(String imsiValue) throws JNCException {
        setImsiValue(new ImsiT(imsiValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imsi" leaf will not have a value.
     */
    public void addImsi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "nsapi". */

    /**
     * Gets the value for child leaf "nsapi".
     * @return The value of the leaf.
     */
    public YangUInt8 getNsapiValue() throws JNCException {
        return (YangUInt8)getValue("nsapi");
    }

    /**
     * Sets the value for child leaf "nsapi",
     * using instance of generated typedef class.
     * @param nsapiValue The value to set.
     * @param nsapiValue used during instantiation.
     */
    public void setNsapiValue(YangUInt8 nsapiValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsapi",
            nsapiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsapi",
     * using Java primitive values.
     * @param nsapiValue used during instantiation.
     */
    public void setNsapiValue(short nsapiValue) throws JNCException {
        setNsapiValue(new YangUInt8(nsapiValue));
    }

    /**
     * Sets the value for child leaf "nsapi",
     * using a String value.
     * @param nsapiValue used during instantiation.
     */
    public void setNsapiValue(String nsapiValue) throws JNCException {
        setNsapiValue(new YangUInt8(nsapiValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsapi" leaf will not have a value.
     */
    public void addNsapi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsapi",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "delivery-order". */

    /**
     * Gets the value for child leaf "delivery-order".
     * @return The value of the leaf.
     */
    public YangString getDeliveryOrderValue() throws JNCException {
        return (YangString)getValue("delivery-order");
    }

    /**
     * Sets the value for child leaf "delivery-order",
     * using instance of generated typedef class.
     * @param deliveryOrderValue The value to set.
     * @param deliveryOrderValue used during instantiation.
     */
    public void setDeliveryOrderValue(YangString deliveryOrderValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "delivery-order",
            deliveryOrderValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "delivery-order",
     * using a String value.
     * @param deliveryOrderValue used during instantiation.
     */
    public void setDeliveryOrderValue(String deliveryOrderValue)
            throws JNCException {
        setDeliveryOrderValue(new YangString(deliveryOrderValue));
    }

    /**
     * Unsets the value for child leaf "delivery-order".
     */
    public void unsetDeliveryOrderValue() throws JNCException {
        delete("delivery-order");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "delivery-order" leaf will not have a value.
     */
    public void addDeliveryOrder() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "delivery-order",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "delivery-order" with operation "replace".
     */
    public void markDeliveryOrderReplace() throws JNCException {
        markLeafReplace("deliveryOrder");
    }

    /**
     * Marks the leaf "delivery-order" with operation "merge".
     */
    public void markDeliveryOrderMerge() throws JNCException {
        markLeafMerge("deliveryOrder");
    }

    /**
     * Marks the leaf "delivery-order" with operation "create".
     */
    public void markDeliveryOrderCreate() throws JNCException {
        markLeafCreate("deliveryOrder");
    }

    /**
     * Marks the leaf "delivery-order" with operation "delete".
     */
    public void markDeliveryOrderDelete() throws JNCException {
        markLeafDelete("deliveryOrder");
    }

    /* Access methods for optional leaf child: "delivery-of-erroneous-sdus". */

    /**
     * Gets the value for child leaf "delivery-of-erroneous-sdus".
     * @return The value of the leaf.
     */
    public YangString getDeliveryOfErroneousSdusValue() throws JNCException {
        return (YangString)getValue("delivery-of-erroneous-sdus");
    }

    /**
     * Sets the value for child leaf "delivery-of-erroneous-sdus",
     * using instance of generated typedef class.
     * @param deliveryOfErroneousSdusValue The value to set.
     * @param deliveryOfErroneousSdusValue used during instantiation.
     */
    public void setDeliveryOfErroneousSdusValue(YangString deliveryOfErroneousSdusValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "delivery-of-erroneous-sdus",
            deliveryOfErroneousSdusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "delivery-of-erroneous-sdus",
     * using a String value.
     * @param deliveryOfErroneousSdusValue used during instantiation.
     */
    public void setDeliveryOfErroneousSdusValue(String deliveryOfErroneousSdusValue)
            throws JNCException {
        setDeliveryOfErroneousSdusValue(new YangString(deliveryOfErroneousSdusValue));
    }

    /**
     * Unsets the value for child leaf "delivery-of-erroneous-sdus".
     */
    public void unsetDeliveryOfErroneousSdusValue() throws JNCException {
        delete("delivery-of-erroneous-sdus");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "delivery-of-erroneous-sdus" leaf will not have a value.
     */
    public void addDeliveryOfErroneousSdus() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "delivery-of-erroneous-sdus",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "delivery-of-erroneous-sdus" with operation "replace".
     */
    public void markDeliveryOfErroneousSdusReplace() throws JNCException {
        markLeafReplace("deliveryOfErroneousSdus");
    }

    /**
     * Marks the leaf "delivery-of-erroneous-sdus" with operation "merge".
     */
    public void markDeliveryOfErroneousSdusMerge() throws JNCException {
        markLeafMerge("deliveryOfErroneousSdus");
    }

    /**
     * Marks the leaf "delivery-of-erroneous-sdus" with operation "create".
     */
    public void markDeliveryOfErroneousSdusCreate() throws JNCException {
        markLeafCreate("deliveryOfErroneousSdus");
    }

    /**
     * Marks the leaf "delivery-of-erroneous-sdus" with operation "delete".
     */
    public void markDeliveryOfErroneousSdusDelete() throws JNCException {
        markLeafDelete("deliveryOfErroneousSdus");
    }

    /* Access methods for optional leaf child: "traffic-class". */

    /**
     * Gets the value for child leaf "traffic-class".
     * @return The value of the leaf.
     */
    public YangString getTrafficClassValue() throws JNCException {
        return (YangString)getValue("traffic-class");
    }

    /**
     * Sets the value for child leaf "traffic-class",
     * using instance of generated typedef class.
     * @param trafficClassValue The value to set.
     * @param trafficClassValue used during instantiation.
     */
    public void setTrafficClassValue(YangString trafficClassValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "traffic-class",
            trafficClassValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "traffic-class",
     * using a String value.
     * @param trafficClassValue used during instantiation.
     */
    public void setTrafficClassValue(String trafficClassValue)
            throws JNCException {
        setTrafficClassValue(new YangString(trafficClassValue));
    }

    /**
     * Unsets the value for child leaf "traffic-class".
     */
    public void unsetTrafficClassValue() throws JNCException {
        delete("traffic-class");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "traffic-class" leaf will not have a value.
     */
    public void addTrafficClass() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "traffic-class",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "traffic-class" with operation "replace".
     */
    public void markTrafficClassReplace() throws JNCException {
        markLeafReplace("trafficClass");
    }

    /**
     * Marks the leaf "traffic-class" with operation "merge".
     */
    public void markTrafficClassMerge() throws JNCException {
        markLeafMerge("trafficClass");
    }

    /**
     * Marks the leaf "traffic-class" with operation "create".
     */
    public void markTrafficClassCreate() throws JNCException {
        markLeafCreate("trafficClass");
    }

    /**
     * Marks the leaf "traffic-class" with operation "delete".
     */
    public void markTrafficClassDelete() throws JNCException {
        markLeafDelete("trafficClass");
    }

    /* Access methods for optional leaf child: "max-sdu-size". */

    /**
     * Gets the value for child leaf "max-sdu-size".
     * @return The value of the leaf.
     */
    public YangUInt32 getMaxSduSizeValue() throws JNCException {
        return (YangUInt32)getValue("max-sdu-size");
    }

    /**
     * Sets the value for child leaf "max-sdu-size",
     * using instance of generated typedef class.
     * @param maxSduSizeValue The value to set.
     * @param maxSduSizeValue used during instantiation.
     */
    public void setMaxSduSizeValue(YangUInt32 maxSduSizeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-sdu-size",
            maxSduSizeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-sdu-size",
     * using Java primitive values.
     * @param maxSduSizeValue used during instantiation.
     */
    public void setMaxSduSizeValue(long maxSduSizeValue) throws JNCException {
        setMaxSduSizeValue(new YangUInt32(maxSduSizeValue));
    }

    /**
     * Sets the value for child leaf "max-sdu-size",
     * using a String value.
     * @param maxSduSizeValue used during instantiation.
     */
    public void setMaxSduSizeValue(String maxSduSizeValue) throws JNCException {
        setMaxSduSizeValue(new YangUInt32(maxSduSizeValue));
    }

    /**
     * Unsets the value for child leaf "max-sdu-size".
     */
    public void unsetMaxSduSizeValue() throws JNCException {
        delete("max-sdu-size");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-sdu-size" leaf will not have a value.
     */
    public void addMaxSduSize() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-sdu-size",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-sdu-size" with operation "replace".
     */
    public void markMaxSduSizeReplace() throws JNCException {
        markLeafReplace("maxSduSize");
    }

    /**
     * Marks the leaf "max-sdu-size" with operation "merge".
     */
    public void markMaxSduSizeMerge() throws JNCException {
        markLeafMerge("maxSduSize");
    }

    /**
     * Marks the leaf "max-sdu-size" with operation "create".
     */
    public void markMaxSduSizeCreate() throws JNCException {
        markLeafCreate("maxSduSize");
    }

    /**
     * Marks the leaf "max-sdu-size" with operation "delete".
     */
    public void markMaxSduSizeDelete() throws JNCException {
        markLeafDelete("maxSduSize");
    }

    /* Access methods for optional leaf child: "traffic-handling-priority". */

    /**
     * Gets the value for child leaf "traffic-handling-priority".
     * @return The value of the leaf.
     */
    public YangUInt8 getTrafficHandlingPriorityValue() throws JNCException {
        return (YangUInt8)getValue("traffic-handling-priority");
    }

    /**
     * Sets the value for child leaf "traffic-handling-priority",
     * using instance of generated typedef class.
     * @param trafficHandlingPriorityValue The value to set.
     * @param trafficHandlingPriorityValue used during instantiation.
     */
    public void setTrafficHandlingPriorityValue(YangUInt8 trafficHandlingPriorityValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "traffic-handling-priority",
            trafficHandlingPriorityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "traffic-handling-priority",
     * using Java primitive values.
     * @param trafficHandlingPriorityValue used during instantiation.
     */
    public void setTrafficHandlingPriorityValue(short trafficHandlingPriorityValue)
            throws JNCException {
        setTrafficHandlingPriorityValue(new YangUInt8(trafficHandlingPriorityValue));
    }

    /**
     * Sets the value for child leaf "traffic-handling-priority",
     * using a String value.
     * @param trafficHandlingPriorityValue used during instantiation.
     */
    public void setTrafficHandlingPriorityValue(String trafficHandlingPriorityValue)
            throws JNCException {
        setTrafficHandlingPriorityValue(new YangUInt8(trafficHandlingPriorityValue));
    }

    /**
     * Unsets the value for child leaf "traffic-handling-priority".
     */
    public void unsetTrafficHandlingPriorityValue() throws JNCException {
        delete("traffic-handling-priority");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "traffic-handling-priority" leaf will not have a value.
     */
    public void addTrafficHandlingPriority() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "traffic-handling-priority",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "traffic-handling-priority" with operation "replace".
     */
    public void markTrafficHandlingPriorityReplace() throws JNCException {
        markLeafReplace("trafficHandlingPriority");
    }

    /**
     * Marks the leaf "traffic-handling-priority" with operation "merge".
     */
    public void markTrafficHandlingPriorityMerge() throws JNCException {
        markLeafMerge("trafficHandlingPriority");
    }

    /**
     * Marks the leaf "traffic-handling-priority" with operation "create".
     */
    public void markTrafficHandlingPriorityCreate() throws JNCException {
        markLeafCreate("trafficHandlingPriority");
    }

    /**
     * Marks the leaf "traffic-handling-priority" with operation "delete".
     */
    public void markTrafficHandlingPriorityDelete() throws JNCException {
        markLeafDelete("trafficHandlingPriority");
    }

    /* Access methods for optional leaf child: "sdu-error-ratio". */

    /**
     * Gets the value for child leaf "sdu-error-ratio".
     * @return The value of the leaf.
     */
    public YangUInt8 getSduErrorRatioValue() throws JNCException {
        return (YangUInt8)getValue("sdu-error-ratio");
    }

    /**
     * Sets the value for child leaf "sdu-error-ratio",
     * using instance of generated typedef class.
     * @param sduErrorRatioValue The value to set.
     * @param sduErrorRatioValue used during instantiation.
     */
    public void setSduErrorRatioValue(YangUInt8 sduErrorRatioValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sdu-error-ratio",
            sduErrorRatioValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sdu-error-ratio",
     * using Java primitive values.
     * @param sduErrorRatioValue used during instantiation.
     */
    public void setSduErrorRatioValue(short sduErrorRatioValue)
            throws JNCException {
        setSduErrorRatioValue(new YangUInt8(sduErrorRatioValue));
    }

    /**
     * Sets the value for child leaf "sdu-error-ratio",
     * using a String value.
     * @param sduErrorRatioValue used during instantiation.
     */
    public void setSduErrorRatioValue(String sduErrorRatioValue)
            throws JNCException {
        setSduErrorRatioValue(new YangUInt8(sduErrorRatioValue));
    }

    /**
     * Unsets the value for child leaf "sdu-error-ratio".
     */
    public void unsetSduErrorRatioValue() throws JNCException {
        delete("sdu-error-ratio");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sdu-error-ratio" leaf will not have a value.
     */
    public void addSduErrorRatio() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sdu-error-ratio",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sdu-error-ratio" with operation "replace".
     */
    public void markSduErrorRatioReplace() throws JNCException {
        markLeafReplace("sduErrorRatio");
    }

    /**
     * Marks the leaf "sdu-error-ratio" with operation "merge".
     */
    public void markSduErrorRatioMerge() throws JNCException {
        markLeafMerge("sduErrorRatio");
    }

    /**
     * Marks the leaf "sdu-error-ratio" with operation "create".
     */
    public void markSduErrorRatioCreate() throws JNCException {
        markLeafCreate("sduErrorRatio");
    }

    /**
     * Marks the leaf "sdu-error-ratio" with operation "delete".
     */
    public void markSduErrorRatioDelete() throws JNCException {
        markLeafDelete("sduErrorRatio");
    }

    /* Access methods for optional leaf child: "residual-biterror-rate". */

    /**
     * Gets the value for child leaf "residual-biterror-rate".
     * @return The value of the leaf.
     */
    public YangUInt8 getResidualBiterrorRateValue() throws JNCException {
        return (YangUInt8)getValue("residual-biterror-rate");
    }

    /**
     * Sets the value for child leaf "residual-biterror-rate",
     * using instance of generated typedef class.
     * @param residualBiterrorRateValue The value to set.
     * @param residualBiterrorRateValue used during instantiation.
     */
    public void setResidualBiterrorRateValue(YangUInt8 residualBiterrorRateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "residual-biterror-rate",
            residualBiterrorRateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "residual-biterror-rate",
     * using Java primitive values.
     * @param residualBiterrorRateValue used during instantiation.
     */
    public void setResidualBiterrorRateValue(short residualBiterrorRateValue)
            throws JNCException {
        setResidualBiterrorRateValue(new YangUInt8(residualBiterrorRateValue));
    }

    /**
     * Sets the value for child leaf "residual-biterror-rate",
     * using a String value.
     * @param residualBiterrorRateValue used during instantiation.
     */
    public void setResidualBiterrorRateValue(String residualBiterrorRateValue)
            throws JNCException {
        setResidualBiterrorRateValue(new YangUInt8(residualBiterrorRateValue));
    }

    /**
     * Unsets the value for child leaf "residual-biterror-rate".
     */
    public void unsetResidualBiterrorRateValue() throws JNCException {
        delete("residual-biterror-rate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "residual-biterror-rate" leaf will not have a value.
     */
    public void addResidualBiterrorRate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "residual-biterror-rate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "residual-biterror-rate" with operation "replace".
     */
    public void markResidualBiterrorRateReplace() throws JNCException {
        markLeafReplace("residualBiterrorRate");
    }

    /**
     * Marks the leaf "residual-biterror-rate" with operation "merge".
     */
    public void markResidualBiterrorRateMerge() throws JNCException {
        markLeafMerge("residualBiterrorRate");
    }

    /**
     * Marks the leaf "residual-biterror-rate" with operation "create".
     */
    public void markResidualBiterrorRateCreate() throws JNCException {
        markLeafCreate("residualBiterrorRate");
    }

    /**
     * Marks the leaf "residual-biterror-rate" with operation "delete".
     */
    public void markResidualBiterrorRateDelete() throws JNCException {
        markLeafDelete("residualBiterrorRate");
    }

    /* Access methods for optional leaf child: "max-bitrate-uplink". */

    /**
     * Gets the value for child leaf "max-bitrate-uplink".
     * @return The value of the leaf.
     */
    public YangUInt32 getMaxBitrateUplinkValue() throws JNCException {
        return (YangUInt32)getValue("max-bitrate-uplink");
    }

    /**
     * Sets the value for child leaf "max-bitrate-uplink",
     * using instance of generated typedef class.
     * @param maxBitrateUplinkValue The value to set.
     * @param maxBitrateUplinkValue used during instantiation.
     */
    public void setMaxBitrateUplinkValue(YangUInt32 maxBitrateUplinkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-bitrate-uplink",
            maxBitrateUplinkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-bitrate-uplink",
     * using Java primitive values.
     * @param maxBitrateUplinkValue used during instantiation.
     */
    public void setMaxBitrateUplinkValue(long maxBitrateUplinkValue)
            throws JNCException {
        setMaxBitrateUplinkValue(new YangUInt32(maxBitrateUplinkValue));
    }

    /**
     * Sets the value for child leaf "max-bitrate-uplink",
     * using a String value.
     * @param maxBitrateUplinkValue used during instantiation.
     */
    public void setMaxBitrateUplinkValue(String maxBitrateUplinkValue)
            throws JNCException {
        setMaxBitrateUplinkValue(new YangUInt32(maxBitrateUplinkValue));
    }

    /**
     * Unsets the value for child leaf "max-bitrate-uplink".
     */
    public void unsetMaxBitrateUplinkValue() throws JNCException {
        delete("max-bitrate-uplink");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-bitrate-uplink" leaf will not have a value.
     */
    public void addMaxBitrateUplink() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-bitrate-uplink",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-bitrate-uplink" with operation "replace".
     */
    public void markMaxBitrateUplinkReplace() throws JNCException {
        markLeafReplace("maxBitrateUplink");
    }

    /**
     * Marks the leaf "max-bitrate-uplink" with operation "merge".
     */
    public void markMaxBitrateUplinkMerge() throws JNCException {
        markLeafMerge("maxBitrateUplink");
    }

    /**
     * Marks the leaf "max-bitrate-uplink" with operation "create".
     */
    public void markMaxBitrateUplinkCreate() throws JNCException {
        markLeafCreate("maxBitrateUplink");
    }

    /**
     * Marks the leaf "max-bitrate-uplink" with operation "delete".
     */
    public void markMaxBitrateUplinkDelete() throws JNCException {
        markLeafDelete("maxBitrateUplink");
    }

    /* Access methods for optional leaf child: "max-bitrate-downlink". */

    /**
     * Gets the value for child leaf "max-bitrate-downlink".
     * @return The value of the leaf.
     */
    public YangUInt32 getMaxBitrateDownlinkValue() throws JNCException {
        return (YangUInt32)getValue("max-bitrate-downlink");
    }

    /**
     * Sets the value for child leaf "max-bitrate-downlink",
     * using instance of generated typedef class.
     * @param maxBitrateDownlinkValue The value to set.
     * @param maxBitrateDownlinkValue used during instantiation.
     */
    public void setMaxBitrateDownlinkValue(YangUInt32 maxBitrateDownlinkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-bitrate-downlink",
            maxBitrateDownlinkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-bitrate-downlink",
     * using Java primitive values.
     * @param maxBitrateDownlinkValue used during instantiation.
     */
    public void setMaxBitrateDownlinkValue(long maxBitrateDownlinkValue)
            throws JNCException {
        setMaxBitrateDownlinkValue(new YangUInt32(maxBitrateDownlinkValue));
    }

    /**
     * Sets the value for child leaf "max-bitrate-downlink",
     * using a String value.
     * @param maxBitrateDownlinkValue used during instantiation.
     */
    public void setMaxBitrateDownlinkValue(String maxBitrateDownlinkValue)
            throws JNCException {
        setMaxBitrateDownlinkValue(new YangUInt32(maxBitrateDownlinkValue));
    }

    /**
     * Unsets the value for child leaf "max-bitrate-downlink".
     */
    public void unsetMaxBitrateDownlinkValue() throws JNCException {
        delete("max-bitrate-downlink");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-bitrate-downlink" leaf will not have a value.
     */
    public void addMaxBitrateDownlink() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-bitrate-downlink",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-bitrate-downlink" with operation "replace".
     */
    public void markMaxBitrateDownlinkReplace() throws JNCException {
        markLeafReplace("maxBitrateDownlink");
    }

    /**
     * Marks the leaf "max-bitrate-downlink" with operation "merge".
     */
    public void markMaxBitrateDownlinkMerge() throws JNCException {
        markLeafMerge("maxBitrateDownlink");
    }

    /**
     * Marks the leaf "max-bitrate-downlink" with operation "create".
     */
    public void markMaxBitrateDownlinkCreate() throws JNCException {
        markLeafCreate("maxBitrateDownlink");
    }

    /**
     * Marks the leaf "max-bitrate-downlink" with operation "delete".
     */
    public void markMaxBitrateDownlinkDelete() throws JNCException {
        markLeafDelete("maxBitrateDownlink");
    }

    /* Access methods for optional leaf child: "guaranteed-bitrate-uplink". */

    /**
     * Gets the value for child leaf "guaranteed-bitrate-uplink".
     * @return The value of the leaf.
     */
    public YangUInt32 getGuaranteedBitrateUplinkValue() throws JNCException {
        return (YangUInt32)getValue("guaranteed-bitrate-uplink");
    }

    /**
     * Sets the value for child leaf "guaranteed-bitrate-uplink",
     * using instance of generated typedef class.
     * @param guaranteedBitrateUplinkValue The value to set.
     * @param guaranteedBitrateUplinkValue used during instantiation.
     */
    public void setGuaranteedBitrateUplinkValue(YangUInt32 guaranteedBitrateUplinkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guaranteed-bitrate-uplink",
            guaranteedBitrateUplinkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "guaranteed-bitrate-uplink",
     * using Java primitive values.
     * @param guaranteedBitrateUplinkValue used during instantiation.
     */
    public void setGuaranteedBitrateUplinkValue(long guaranteedBitrateUplinkValue)
            throws JNCException {
        setGuaranteedBitrateUplinkValue(new YangUInt32(guaranteedBitrateUplinkValue));
    }

    /**
     * Sets the value for child leaf "guaranteed-bitrate-uplink",
     * using a String value.
     * @param guaranteedBitrateUplinkValue used during instantiation.
     */
    public void setGuaranteedBitrateUplinkValue(String guaranteedBitrateUplinkValue)
            throws JNCException {
        setGuaranteedBitrateUplinkValue(new YangUInt32(guaranteedBitrateUplinkValue));
    }

    /**
     * Unsets the value for child leaf "guaranteed-bitrate-uplink".
     */
    public void unsetGuaranteedBitrateUplinkValue() throws JNCException {
        delete("guaranteed-bitrate-uplink");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "guaranteed-bitrate-uplink" leaf will not have a value.
     */
    public void addGuaranteedBitrateUplink() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guaranteed-bitrate-uplink",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "guaranteed-bitrate-uplink" with operation "replace".
     */
    public void markGuaranteedBitrateUplinkReplace() throws JNCException {
        markLeafReplace("guaranteedBitrateUplink");
    }

    /**
     * Marks the leaf "guaranteed-bitrate-uplink" with operation "merge".
     */
    public void markGuaranteedBitrateUplinkMerge() throws JNCException {
        markLeafMerge("guaranteedBitrateUplink");
    }

    /**
     * Marks the leaf "guaranteed-bitrate-uplink" with operation "create".
     */
    public void markGuaranteedBitrateUplinkCreate() throws JNCException {
        markLeafCreate("guaranteedBitrateUplink");
    }

    /**
     * Marks the leaf "guaranteed-bitrate-uplink" with operation "delete".
     */
    public void markGuaranteedBitrateUplinkDelete() throws JNCException {
        markLeafDelete("guaranteedBitrateUplink");
    }

    /* Access methods for optional leaf child: "guaranteed-bitrate-downlink". */

    /**
     * Gets the value for child leaf "guaranteed-bitrate-downlink".
     * @return The value of the leaf.
     */
    public YangUInt32 getGuaranteedBitrateDownlinkValue() throws JNCException {
        return (YangUInt32)getValue("guaranteed-bitrate-downlink");
    }

    /**
     * Sets the value for child leaf "guaranteed-bitrate-downlink",
     * using instance of generated typedef class.
     * @param guaranteedBitrateDownlinkValue The value to set.
     * @param guaranteedBitrateDownlinkValue used during instantiation.
     */
    public void setGuaranteedBitrateDownlinkValue(YangUInt32 guaranteedBitrateDownlinkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guaranteed-bitrate-downlink",
            guaranteedBitrateDownlinkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "guaranteed-bitrate-downlink",
     * using Java primitive values.
     * @param guaranteedBitrateDownlinkValue used during instantiation.
     */
    public void setGuaranteedBitrateDownlinkValue(long guaranteedBitrateDownlinkValue)
            throws JNCException {
        setGuaranteedBitrateDownlinkValue(new YangUInt32(guaranteedBitrateDownlinkValue));
    }

    /**
     * Sets the value for child leaf "guaranteed-bitrate-downlink",
     * using a String value.
     * @param guaranteedBitrateDownlinkValue used during instantiation.
     */
    public void setGuaranteedBitrateDownlinkValue(String guaranteedBitrateDownlinkValue)
            throws JNCException {
        setGuaranteedBitrateDownlinkValue(new YangUInt32(guaranteedBitrateDownlinkValue));
    }

    /**
     * Unsets the value for child leaf "guaranteed-bitrate-downlink".
     */
    public void unsetGuaranteedBitrateDownlinkValue() throws JNCException {
        delete("guaranteed-bitrate-downlink");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "guaranteed-bitrate-downlink" leaf will not have a value.
     */
    public void addGuaranteedBitrateDownlink() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guaranteed-bitrate-downlink",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "guaranteed-bitrate-downlink" with operation "replace".
     */
    public void markGuaranteedBitrateDownlinkReplace() throws JNCException {
        markLeafReplace("guaranteedBitrateDownlink");
    }

    /**
     * Marks the leaf "guaranteed-bitrate-downlink" with operation "merge".
     */
    public void markGuaranteedBitrateDownlinkMerge() throws JNCException {
        markLeafMerge("guaranteedBitrateDownlink");
    }

    /**
     * Marks the leaf "guaranteed-bitrate-downlink" with operation "create".
     */
    public void markGuaranteedBitrateDownlinkCreate() throws JNCException {
        markLeafCreate("guaranteedBitrateDownlink");
    }

    /**
     * Marks the leaf "guaranteed-bitrate-downlink" with operation "delete".
     */
    public void markGuaranteedBitrateDownlinkDelete() throws JNCException {
        markLeafDelete("guaranteedBitrateDownlink");
    }

    /* Access methods for optional leaf child: "allocation-retention". */

    /**
     * Gets the value for child leaf "allocation-retention".
     * @return The value of the leaf.
     */
    public YangString getAllocationRetentionValue() throws JNCException {
        return (YangString)getValue("allocation-retention");
    }

    /**
     * Sets the value for child leaf "allocation-retention",
     * using instance of generated typedef class.
     * @param allocationRetentionValue The value to set.
     * @param allocationRetentionValue used during instantiation.
     */
    public void setAllocationRetentionValue(YangString allocationRetentionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "allocation-retention",
            allocationRetentionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "allocation-retention",
     * using a String value.
     * @param allocationRetentionValue used during instantiation.
     */
    public void setAllocationRetentionValue(String allocationRetentionValue)
            throws JNCException {
        setAllocationRetentionValue(new YangString(allocationRetentionValue));
    }

    /**
     * Unsets the value for child leaf "allocation-retention".
     */
    public void unsetAllocationRetentionValue() throws JNCException {
        delete("allocation-retention");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "allocation-retention" leaf will not have a value.
     */
    public void addAllocationRetention() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "allocation-retention",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "allocation-retention" with operation "replace".
     */
    public void markAllocationRetentionReplace() throws JNCException {
        markLeafReplace("allocationRetention");
    }

    /**
     * Marks the leaf "allocation-retention" with operation "merge".
     */
    public void markAllocationRetentionMerge() throws JNCException {
        markLeafMerge("allocationRetention");
    }

    /**
     * Marks the leaf "allocation-retention" with operation "create".
     */
    public void markAllocationRetentionCreate() throws JNCException {
        markLeafCreate("allocationRetention");
    }

    /**
     * Marks the leaf "allocation-retention" with operation "delete".
     */
    public void markAllocationRetentionDelete() throws JNCException {
        markLeafDelete("allocationRetention");
    }

    /* Access methods for optional leaf child: "transfer-delay". */

    /**
     * Gets the value for child leaf "transfer-delay".
     * @return The value of the leaf.
     */
    public YangUInt32 getTransferDelayValue() throws JNCException {
        return (YangUInt32)getValue("transfer-delay");
    }

    /**
     * Sets the value for child leaf "transfer-delay",
     * using instance of generated typedef class.
     * @param transferDelayValue The value to set.
     * @param transferDelayValue used during instantiation.
     */
    public void setTransferDelayValue(YangUInt32 transferDelayValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "transfer-delay",
            transferDelayValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "transfer-delay",
     * using Java primitive values.
     * @param transferDelayValue used during instantiation.
     */
    public void setTransferDelayValue(long transferDelayValue)
            throws JNCException {
        setTransferDelayValue(new YangUInt32(transferDelayValue));
    }

    /**
     * Sets the value for child leaf "transfer-delay",
     * using a String value.
     * @param transferDelayValue used during instantiation.
     */
    public void setTransferDelayValue(String transferDelayValue)
            throws JNCException {
        setTransferDelayValue(new YangUInt32(transferDelayValue));
    }

    /**
     * Unsets the value for child leaf "transfer-delay".
     */
    public void unsetTransferDelayValue() throws JNCException {
        delete("transfer-delay");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "transfer-delay" leaf will not have a value.
     */
    public void addTransferDelay() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "transfer-delay",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "transfer-delay" with operation "replace".
     */
    public void markTransferDelayReplace() throws JNCException {
        markLeafReplace("transferDelay");
    }

    /**
     * Marks the leaf "transfer-delay" with operation "merge".
     */
    public void markTransferDelayMerge() throws JNCException {
        markLeafMerge("transferDelay");
    }

    /**
     * Marks the leaf "transfer-delay" with operation "create".
     */
    public void markTransferDelayCreate() throws JNCException {
        markLeafCreate("transferDelay");
    }

    /**
     * Marks the leaf "transfer-delay" with operation "delete".
     */
    public void markTransferDelayDelete() throws JNCException {
        markLeafDelete("transferDelay");
    }

    /* Access methods for optional leaf child: "local-qos-profile". */

    /**
     * Gets the value for child leaf "local-qos-profile".
     * @return The value of the leaf.
     */
    public YangString getLocalQosProfileValue() throws JNCException {
        return (YangString)getValue("local-qos-profile");
    }

    /**
     * Sets the value for child leaf "local-qos-profile",
     * using instance of generated typedef class.
     * @param localQosProfileValue The value to set.
     * @param localQosProfileValue used during instantiation.
     */
    public void setLocalQosProfileValue(YangString localQosProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-qos-profile",
            localQosProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-qos-profile",
     * using a String value.
     * @param localQosProfileValue used during instantiation.
     */
    public void setLocalQosProfileValue(String localQosProfileValue)
            throws JNCException {
        setLocalQosProfileValue(new YangString(localQosProfileValue));
    }

    /**
     * Unsets the value for child leaf "local-qos-profile".
     */
    public void unsetLocalQosProfileValue() throws JNCException {
        delete("local-qos-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-qos-profile" leaf will not have a value.
     */
    public void addLocalQosProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-qos-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-qos-profile" with operation "replace".
     */
    public void markLocalQosProfileReplace() throws JNCException {
        markLeafReplace("localQosProfile");
    }

    /**
     * Marks the leaf "local-qos-profile" with operation "merge".
     */
    public void markLocalQosProfileMerge() throws JNCException {
        markLeafMerge("localQosProfile");
    }

    /**
     * Marks the leaf "local-qos-profile" with operation "create".
     */
    public void markLocalQosProfileCreate() throws JNCException {
        markLeafCreate("localQosProfile");
    }

    /**
     * Marks the leaf "local-qos-profile" with operation "delete".
     */
    public void markLocalQosProfileDelete() throws JNCException {
        markLeafDelete("localQosProfile");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
