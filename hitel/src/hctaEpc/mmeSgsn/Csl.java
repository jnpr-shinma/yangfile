/* 
 * @(#)Csl.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn;

import AgwCsl;

import AgwCslOper;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import NodeSet;

import StreamingCsl;

import StreamingCslOper;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/csl"
 * <p>
 * See line 23 in
 * cslConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Csl extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "agw-csl".
     */
    public AgwCsl agwCsl = null;

    /**
     * Field for child container "streaming-csl".
     */
    public StreamingCsl streamingCsl = null;

    /**
     * Constructor for an empty Csl object.
     */
    public Csl() {
        super(Epc.NAMESPACE, "csl");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Csl clone() {
        return (Csl)cloneContent(new Csl());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Csl cloneShallow() {
        return (Csl)cloneShallowContent(new Csl());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "agw-csl",
            "streaming-csl",
            "agw-csl-oper",
            "streaming-csl-oper",
        };
    }

    /* Access methods for container child: "agw-csl". */

    /**
     * Adds container entry "agwCsl", using an existing object.
     * @param agwCsl The object to add.
     * @return The added child.
     */
    public AgwCsl addAgwCsl(AgwCsl agwCsl) throws JNCException {
        this.agwCsl = agwCsl;
        insertChild(agwCsl, childrenNames());
        return agwCsl;
    }

    /**
     * Adds container entry "agwCsl".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AgwCsl addAgwCsl() throws JNCException {
        AgwCsl agwCsl = new AgwCsl();
        this.agwCsl = agwCsl;
        insertChild(agwCsl, childrenNames());
        return agwCsl;
    }

    /**
     * Deletes container entry "agwCsl".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteAgwCsl() throws JNCException {
        this.agwCsl = null;
        String path = "agw-csl";
        return delete(path);
    }

    /* Access methods for container child: "streaming-csl". */

    /**
     * Adds container entry "streamingCsl", using an existing object.
     * @param streamingCsl The object to add.
     * @return The added child.
     */
    public StreamingCsl addStreamingCsl(StreamingCsl streamingCsl)
            throws JNCException {
        this.streamingCsl = streamingCsl;
        insertChild(streamingCsl, childrenNames());
        return streamingCsl;
    }

    /**
     * Adds container entry "streamingCsl".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public StreamingCsl addStreamingCsl() throws JNCException {
        StreamingCsl streamingCsl = new StreamingCsl();
        this.streamingCsl = streamingCsl;
        insertChild(streamingCsl, childrenNames());
        return streamingCsl;
    }

    /**
     * Deletes container entry "streamingCsl".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteStreamingCsl() throws JNCException {
        this.streamingCsl = null;
        String path = "streaming-csl";
        return delete(path);
    }

    /* Access methods for list child: "agw-csl-oper". */

    /**
     * Gets list entry "agwCslOper", with specified keys.
     */
    public AgwCslOper getAgwCslOper() throws JNCException {
        String path = "agw-csl-oper";
        return (AgwCslOper)searchOne(path);
    }

    /**
     * Iterator method for the list "agw-csl-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator agwCslOperIterator() {
        return new ElementChildrenIterator(children, "agw-csl-oper");
    }

    /**
     * Adds list entry "agwCslOper", using an existing object.
     * @param agwCslOper The object to add.
     * @return The added child.
     */
    public AgwCslOper addAgwCslOper(AgwCslOper agwCslOper) throws JNCException {
        insertChild(agwCslOper, childrenNames());
        return agwCslOper;
    }

    /**
     * Adds list entry "agwCslOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AgwCslOper addAgwCslOper() throws JNCException {
        AgwCslOper agwCslOper = new AgwCslOper();
        insertChild(agwCslOper, childrenNames());
        return agwCslOper;
    }

    /**
     * Deletes list entry "agwCslOper", with specified keys.
     */
    public void deleteAgwCslOper() throws JNCException {
        String path = "agw-csl-oper";
        delete(path);
    }

    /* Access methods for list child: "streaming-csl-oper". */

    /**
     * Gets list entry "streamingCslOper", with specified keys.
     */
    public StreamingCslOper getStreamingCslOper() throws JNCException {
        String path = "streaming-csl-oper";
        return (StreamingCslOper)searchOne(path);
    }

    /**
     * Iterator method for the list "streaming-csl-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator streamingCslOperIterator() {
        return new ElementChildrenIterator(children, "streaming-csl-oper");
    }

    /**
     * Adds list entry "streamingCslOper", using an existing object.
     * @param streamingCslOper The object to add.
     * @return The added child.
     */
    public StreamingCslOper addStreamingCslOper(StreamingCslOper streamingCslOper)
            throws JNCException {
        insertChild(streamingCslOper, childrenNames());
        return streamingCslOper;
    }

    /**
     * Adds list entry "streamingCslOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public StreamingCslOper addStreamingCslOper() throws JNCException {
        StreamingCslOper streamingCslOper = new StreamingCslOper();
        insertChild(streamingCslOper, childrenNames());
        return streamingCslOper;
    }

    /**
     * Deletes list entry "streamingCslOper", with specified keys.
     */
    public void deleteStreamingCslOper() throws JNCException {
        String path = "streaming-csl-oper";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof AgwCsl) agwCsl = (AgwCsl)child;
        else if (child instanceof StreamingCsl) streamingCsl = (StreamingCsl)child;
    }

}
