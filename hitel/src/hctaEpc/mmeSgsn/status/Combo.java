/* 
 * @(#)Combo.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.status;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/status/combo"
 * <p>
 * See line 1857 in
 * scCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Combo extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Combo object.
     */
    public Combo() {
        super(Epc.NAMESPACE, "combo");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Combo clone() {
        return (Combo)cloneContent(new Combo());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Combo cloneShallow() {
        return (Combo)cloneShallowContent(new Combo());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "service",
            "location",
            "current-subscribers",
            "current-bearers",
            "current-sessions",
            "current-pdp-contexts",
            "lte-attach-success-rate",
            "gprs-attach-success-rate",
            "umts-attach-success-rate",
            "lte-sess-act-success-rate",
            "gprs-sess-act-success-rate",
            "umts-sess-act-success-rate",
        };
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "current-subscribers". */

    /**
     * Gets the value for child leaf "current-subscribers".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentSubscribersValue() throws JNCException {
        return (YangUInt32)getValue("current-subscribers");
    }

    /**
     * Sets the value for child leaf "current-subscribers",
     * using instance of generated typedef class.
     * @param currentSubscribersValue The value to set.
     * @param currentSubscribersValue used during instantiation.
     */
    public void setCurrentSubscribersValue(YangUInt32 currentSubscribersValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-subscribers",
            currentSubscribersValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-subscribers",
     * using Java primitive values.
     * @param currentSubscribersValue used during instantiation.
     */
    public void setCurrentSubscribersValue(long currentSubscribersValue)
            throws JNCException {
        setCurrentSubscribersValue(new YangUInt32(currentSubscribersValue));
    }

    /**
     * Sets the value for child leaf "current-subscribers",
     * using a String value.
     * @param currentSubscribersValue used during instantiation.
     */
    public void setCurrentSubscribersValue(String currentSubscribersValue)
            throws JNCException {
        setCurrentSubscribersValue(new YangUInt32(currentSubscribersValue));
    }

    /**
     * Unsets the value for child leaf "current-subscribers".
     */
    public void unsetCurrentSubscribersValue() throws JNCException {
        delete("current-subscribers");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-subscribers" leaf will not have a value.
     */
    public void addCurrentSubscribers() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-subscribers",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-subscribers" with operation "replace".
     */
    public void markCurrentSubscribersReplace() throws JNCException {
        markLeafReplace("currentSubscribers");
    }

    /**
     * Marks the leaf "current-subscribers" with operation "merge".
     */
    public void markCurrentSubscribersMerge() throws JNCException {
        markLeafMerge("currentSubscribers");
    }

    /**
     * Marks the leaf "current-subscribers" with operation "create".
     */
    public void markCurrentSubscribersCreate() throws JNCException {
        markLeafCreate("currentSubscribers");
    }

    /**
     * Marks the leaf "current-subscribers" with operation "delete".
     */
    public void markCurrentSubscribersDelete() throws JNCException {
        markLeafDelete("currentSubscribers");
    }

    /* Access methods for optional leaf child: "current-bearers". */

    /**
     * Gets the value for child leaf "current-bearers".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentBearersValue() throws JNCException {
        return (YangUInt32)getValue("current-bearers");
    }

    /**
     * Sets the value for child leaf "current-bearers",
     * using instance of generated typedef class.
     * @param currentBearersValue The value to set.
     * @param currentBearersValue used during instantiation.
     */
    public void setCurrentBearersValue(YangUInt32 currentBearersValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-bearers",
            currentBearersValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-bearers",
     * using Java primitive values.
     * @param currentBearersValue used during instantiation.
     */
    public void setCurrentBearersValue(long currentBearersValue)
            throws JNCException {
        setCurrentBearersValue(new YangUInt32(currentBearersValue));
    }

    /**
     * Sets the value for child leaf "current-bearers",
     * using a String value.
     * @param currentBearersValue used during instantiation.
     */
    public void setCurrentBearersValue(String currentBearersValue)
            throws JNCException {
        setCurrentBearersValue(new YangUInt32(currentBearersValue));
    }

    /**
     * Unsets the value for child leaf "current-bearers".
     */
    public void unsetCurrentBearersValue() throws JNCException {
        delete("current-bearers");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-bearers" leaf will not have a value.
     */
    public void addCurrentBearers() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-bearers",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-bearers" with operation "replace".
     */
    public void markCurrentBearersReplace() throws JNCException {
        markLeafReplace("currentBearers");
    }

    /**
     * Marks the leaf "current-bearers" with operation "merge".
     */
    public void markCurrentBearersMerge() throws JNCException {
        markLeafMerge("currentBearers");
    }

    /**
     * Marks the leaf "current-bearers" with operation "create".
     */
    public void markCurrentBearersCreate() throws JNCException {
        markLeafCreate("currentBearers");
    }

    /**
     * Marks the leaf "current-bearers" with operation "delete".
     */
    public void markCurrentBearersDelete() throws JNCException {
        markLeafDelete("currentBearers");
    }

    /* Access methods for optional leaf child: "current-sessions". */

    /**
     * Gets the value for child leaf "current-sessions".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentSessionsValue() throws JNCException {
        return (YangUInt32)getValue("current-sessions");
    }

    /**
     * Sets the value for child leaf "current-sessions",
     * using instance of generated typedef class.
     * @param currentSessionsValue The value to set.
     * @param currentSessionsValue used during instantiation.
     */
    public void setCurrentSessionsValue(YangUInt32 currentSessionsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-sessions",
            currentSessionsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-sessions",
     * using Java primitive values.
     * @param currentSessionsValue used during instantiation.
     */
    public void setCurrentSessionsValue(long currentSessionsValue)
            throws JNCException {
        setCurrentSessionsValue(new YangUInt32(currentSessionsValue));
    }

    /**
     * Sets the value for child leaf "current-sessions",
     * using a String value.
     * @param currentSessionsValue used during instantiation.
     */
    public void setCurrentSessionsValue(String currentSessionsValue)
            throws JNCException {
        setCurrentSessionsValue(new YangUInt32(currentSessionsValue));
    }

    /**
     * Unsets the value for child leaf "current-sessions".
     */
    public void unsetCurrentSessionsValue() throws JNCException {
        delete("current-sessions");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-sessions" leaf will not have a value.
     */
    public void addCurrentSessions() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-sessions",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-sessions" with operation "replace".
     */
    public void markCurrentSessionsReplace() throws JNCException {
        markLeafReplace("currentSessions");
    }

    /**
     * Marks the leaf "current-sessions" with operation "merge".
     */
    public void markCurrentSessionsMerge() throws JNCException {
        markLeafMerge("currentSessions");
    }

    /**
     * Marks the leaf "current-sessions" with operation "create".
     */
    public void markCurrentSessionsCreate() throws JNCException {
        markLeafCreate("currentSessions");
    }

    /**
     * Marks the leaf "current-sessions" with operation "delete".
     */
    public void markCurrentSessionsDelete() throws JNCException {
        markLeafDelete("currentSessions");
    }

    /* Access methods for optional leaf child: "current-pdp-contexts". */

    /**
     * Gets the value for child leaf "current-pdp-contexts".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentPdpContextsValue() throws JNCException {
        return (YangUInt32)getValue("current-pdp-contexts");
    }

    /**
     * Sets the value for child leaf "current-pdp-contexts",
     * using instance of generated typedef class.
     * @param currentPdpContextsValue The value to set.
     * @param currentPdpContextsValue used during instantiation.
     */
    public void setCurrentPdpContextsValue(YangUInt32 currentPdpContextsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-pdp-contexts",
            currentPdpContextsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-pdp-contexts",
     * using Java primitive values.
     * @param currentPdpContextsValue used during instantiation.
     */
    public void setCurrentPdpContextsValue(long currentPdpContextsValue)
            throws JNCException {
        setCurrentPdpContextsValue(new YangUInt32(currentPdpContextsValue));
    }

    /**
     * Sets the value for child leaf "current-pdp-contexts",
     * using a String value.
     * @param currentPdpContextsValue used during instantiation.
     */
    public void setCurrentPdpContextsValue(String currentPdpContextsValue)
            throws JNCException {
        setCurrentPdpContextsValue(new YangUInt32(currentPdpContextsValue));
    }

    /**
     * Unsets the value for child leaf "current-pdp-contexts".
     */
    public void unsetCurrentPdpContextsValue() throws JNCException {
        delete("current-pdp-contexts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-pdp-contexts" leaf will not have a value.
     */
    public void addCurrentPdpContexts() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-pdp-contexts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-pdp-contexts" with operation "replace".
     */
    public void markCurrentPdpContextsReplace() throws JNCException {
        markLeafReplace("currentPdpContexts");
    }

    /**
     * Marks the leaf "current-pdp-contexts" with operation "merge".
     */
    public void markCurrentPdpContextsMerge() throws JNCException {
        markLeafMerge("currentPdpContexts");
    }

    /**
     * Marks the leaf "current-pdp-contexts" with operation "create".
     */
    public void markCurrentPdpContextsCreate() throws JNCException {
        markLeafCreate("currentPdpContexts");
    }

    /**
     * Marks the leaf "current-pdp-contexts" with operation "delete".
     */
    public void markCurrentPdpContextsDelete() throws JNCException {
        markLeafDelete("currentPdpContexts");
    }

    /* Access methods for optional leaf child: "lte-attach-success-rate". */

    /**
     * Gets the value for child leaf "lte-attach-success-rate".
     * @return The value of the leaf.
     */
    public YangUInt32 getLteAttachSuccessRateValue() throws JNCException {
        return (YangUInt32)getValue("lte-attach-success-rate");
    }

    /**
     * Sets the value for child leaf "lte-attach-success-rate",
     * using instance of generated typedef class.
     * @param lteAttachSuccessRateValue The value to set.
     * @param lteAttachSuccessRateValue used during instantiation.
     */
    public void setLteAttachSuccessRateValue(YangUInt32 lteAttachSuccessRateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lte-attach-success-rate",
            lteAttachSuccessRateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lte-attach-success-rate",
     * using Java primitive values.
     * @param lteAttachSuccessRateValue used during instantiation.
     */
    public void setLteAttachSuccessRateValue(long lteAttachSuccessRateValue)
            throws JNCException {
        setLteAttachSuccessRateValue(new YangUInt32(lteAttachSuccessRateValue));
    }

    /**
     * Sets the value for child leaf "lte-attach-success-rate",
     * using a String value.
     * @param lteAttachSuccessRateValue used during instantiation.
     */
    public void setLteAttachSuccessRateValue(String lteAttachSuccessRateValue)
            throws JNCException {
        setLteAttachSuccessRateValue(new YangUInt32(lteAttachSuccessRateValue));
    }

    /**
     * Unsets the value for child leaf "lte-attach-success-rate".
     */
    public void unsetLteAttachSuccessRateValue() throws JNCException {
        delete("lte-attach-success-rate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lte-attach-success-rate" leaf will not have a value.
     */
    public void addLteAttachSuccessRate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lte-attach-success-rate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lte-attach-success-rate" with operation "replace".
     */
    public void markLteAttachSuccessRateReplace() throws JNCException {
        markLeafReplace("lteAttachSuccessRate");
    }

    /**
     * Marks the leaf "lte-attach-success-rate" with operation "merge".
     */
    public void markLteAttachSuccessRateMerge() throws JNCException {
        markLeafMerge("lteAttachSuccessRate");
    }

    /**
     * Marks the leaf "lte-attach-success-rate" with operation "create".
     */
    public void markLteAttachSuccessRateCreate() throws JNCException {
        markLeafCreate("lteAttachSuccessRate");
    }

    /**
     * Marks the leaf "lte-attach-success-rate" with operation "delete".
     */
    public void markLteAttachSuccessRateDelete() throws JNCException {
        markLeafDelete("lteAttachSuccessRate");
    }

    /* Access methods for optional leaf child: "gprs-attach-success-rate". */

    /**
     * Gets the value for child leaf "gprs-attach-success-rate".
     * @return The value of the leaf.
     */
    public YangUInt32 getGprsAttachSuccessRateValue() throws JNCException {
        return (YangUInt32)getValue("gprs-attach-success-rate");
    }

    /**
     * Sets the value for child leaf "gprs-attach-success-rate",
     * using instance of generated typedef class.
     * @param gprsAttachSuccessRateValue The value to set.
     * @param gprsAttachSuccessRateValue used during instantiation.
     */
    public void setGprsAttachSuccessRateValue(YangUInt32 gprsAttachSuccessRateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gprs-attach-success-rate",
            gprsAttachSuccessRateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gprs-attach-success-rate",
     * using Java primitive values.
     * @param gprsAttachSuccessRateValue used during instantiation.
     */
    public void setGprsAttachSuccessRateValue(long gprsAttachSuccessRateValue)
            throws JNCException {
        setGprsAttachSuccessRateValue(new YangUInt32(gprsAttachSuccessRateValue));
    }

    /**
     * Sets the value for child leaf "gprs-attach-success-rate",
     * using a String value.
     * @param gprsAttachSuccessRateValue used during instantiation.
     */
    public void setGprsAttachSuccessRateValue(String gprsAttachSuccessRateValue)
            throws JNCException {
        setGprsAttachSuccessRateValue(new YangUInt32(gprsAttachSuccessRateValue));
    }

    /**
     * Unsets the value for child leaf "gprs-attach-success-rate".
     */
    public void unsetGprsAttachSuccessRateValue() throws JNCException {
        delete("gprs-attach-success-rate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gprs-attach-success-rate" leaf will not have a value.
     */
    public void addGprsAttachSuccessRate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gprs-attach-success-rate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gprs-attach-success-rate" with operation "replace".
     */
    public void markGprsAttachSuccessRateReplace() throws JNCException {
        markLeafReplace("gprsAttachSuccessRate");
    }

    /**
     * Marks the leaf "gprs-attach-success-rate" with operation "merge".
     */
    public void markGprsAttachSuccessRateMerge() throws JNCException {
        markLeafMerge("gprsAttachSuccessRate");
    }

    /**
     * Marks the leaf "gprs-attach-success-rate" with operation "create".
     */
    public void markGprsAttachSuccessRateCreate() throws JNCException {
        markLeafCreate("gprsAttachSuccessRate");
    }

    /**
     * Marks the leaf "gprs-attach-success-rate" with operation "delete".
     */
    public void markGprsAttachSuccessRateDelete() throws JNCException {
        markLeafDelete("gprsAttachSuccessRate");
    }

    /* Access methods for optional leaf child: "umts-attach-success-rate". */

    /**
     * Gets the value for child leaf "umts-attach-success-rate".
     * @return The value of the leaf.
     */
    public YangUInt32 getUmtsAttachSuccessRateValue() throws JNCException {
        return (YangUInt32)getValue("umts-attach-success-rate");
    }

    /**
     * Sets the value for child leaf "umts-attach-success-rate",
     * using instance of generated typedef class.
     * @param umtsAttachSuccessRateValue The value to set.
     * @param umtsAttachSuccessRateValue used during instantiation.
     */
    public void setUmtsAttachSuccessRateValue(YangUInt32 umtsAttachSuccessRateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "umts-attach-success-rate",
            umtsAttachSuccessRateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "umts-attach-success-rate",
     * using Java primitive values.
     * @param umtsAttachSuccessRateValue used during instantiation.
     */
    public void setUmtsAttachSuccessRateValue(long umtsAttachSuccessRateValue)
            throws JNCException {
        setUmtsAttachSuccessRateValue(new YangUInt32(umtsAttachSuccessRateValue));
    }

    /**
     * Sets the value for child leaf "umts-attach-success-rate",
     * using a String value.
     * @param umtsAttachSuccessRateValue used during instantiation.
     */
    public void setUmtsAttachSuccessRateValue(String umtsAttachSuccessRateValue)
            throws JNCException {
        setUmtsAttachSuccessRateValue(new YangUInt32(umtsAttachSuccessRateValue));
    }

    /**
     * Unsets the value for child leaf "umts-attach-success-rate".
     */
    public void unsetUmtsAttachSuccessRateValue() throws JNCException {
        delete("umts-attach-success-rate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "umts-attach-success-rate" leaf will not have a value.
     */
    public void addUmtsAttachSuccessRate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "umts-attach-success-rate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "umts-attach-success-rate" with operation "replace".
     */
    public void markUmtsAttachSuccessRateReplace() throws JNCException {
        markLeafReplace("umtsAttachSuccessRate");
    }

    /**
     * Marks the leaf "umts-attach-success-rate" with operation "merge".
     */
    public void markUmtsAttachSuccessRateMerge() throws JNCException {
        markLeafMerge("umtsAttachSuccessRate");
    }

    /**
     * Marks the leaf "umts-attach-success-rate" with operation "create".
     */
    public void markUmtsAttachSuccessRateCreate() throws JNCException {
        markLeafCreate("umtsAttachSuccessRate");
    }

    /**
     * Marks the leaf "umts-attach-success-rate" with operation "delete".
     */
    public void markUmtsAttachSuccessRateDelete() throws JNCException {
        markLeafDelete("umtsAttachSuccessRate");
    }

    /* Access methods for optional leaf child: "lte-sess-act-success-rate". */

    /**
     * Gets the value for child leaf "lte-sess-act-success-rate".
     * @return The value of the leaf.
     */
    public YangUInt32 getLteSessActSuccessRateValue() throws JNCException {
        return (YangUInt32)getValue("lte-sess-act-success-rate");
    }

    /**
     * Sets the value for child leaf "lte-sess-act-success-rate",
     * using instance of generated typedef class.
     * @param lteSessActSuccessRateValue The value to set.
     * @param lteSessActSuccessRateValue used during instantiation.
     */
    public void setLteSessActSuccessRateValue(YangUInt32 lteSessActSuccessRateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lte-sess-act-success-rate",
            lteSessActSuccessRateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lte-sess-act-success-rate",
     * using Java primitive values.
     * @param lteSessActSuccessRateValue used during instantiation.
     */
    public void setLteSessActSuccessRateValue(long lteSessActSuccessRateValue)
            throws JNCException {
        setLteSessActSuccessRateValue(new YangUInt32(lteSessActSuccessRateValue));
    }

    /**
     * Sets the value for child leaf "lte-sess-act-success-rate",
     * using a String value.
     * @param lteSessActSuccessRateValue used during instantiation.
     */
    public void setLteSessActSuccessRateValue(String lteSessActSuccessRateValue)
            throws JNCException {
        setLteSessActSuccessRateValue(new YangUInt32(lteSessActSuccessRateValue));
    }

    /**
     * Unsets the value for child leaf "lte-sess-act-success-rate".
     */
    public void unsetLteSessActSuccessRateValue() throws JNCException {
        delete("lte-sess-act-success-rate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lte-sess-act-success-rate" leaf will not have a value.
     */
    public void addLteSessActSuccessRate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lte-sess-act-success-rate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lte-sess-act-success-rate" with operation "replace".
     */
    public void markLteSessActSuccessRateReplace() throws JNCException {
        markLeafReplace("lteSessActSuccessRate");
    }

    /**
     * Marks the leaf "lte-sess-act-success-rate" with operation "merge".
     */
    public void markLteSessActSuccessRateMerge() throws JNCException {
        markLeafMerge("lteSessActSuccessRate");
    }

    /**
     * Marks the leaf "lte-sess-act-success-rate" with operation "create".
     */
    public void markLteSessActSuccessRateCreate() throws JNCException {
        markLeafCreate("lteSessActSuccessRate");
    }

    /**
     * Marks the leaf "lte-sess-act-success-rate" with operation "delete".
     */
    public void markLteSessActSuccessRateDelete() throws JNCException {
        markLeafDelete("lteSessActSuccessRate");
    }

    /* Access methods for optional leaf child: "gprs-sess-act-success-rate". */

    /**
     * Gets the value for child leaf "gprs-sess-act-success-rate".
     * @return The value of the leaf.
     */
    public YangUInt32 getGprsSessActSuccessRateValue() throws JNCException {
        return (YangUInt32)getValue("gprs-sess-act-success-rate");
    }

    /**
     * Sets the value for child leaf "gprs-sess-act-success-rate",
     * using instance of generated typedef class.
     * @param gprsSessActSuccessRateValue The value to set.
     * @param gprsSessActSuccessRateValue used during instantiation.
     */
    public void setGprsSessActSuccessRateValue(YangUInt32 gprsSessActSuccessRateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gprs-sess-act-success-rate",
            gprsSessActSuccessRateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gprs-sess-act-success-rate",
     * using Java primitive values.
     * @param gprsSessActSuccessRateValue used during instantiation.
     */
    public void setGprsSessActSuccessRateValue(long gprsSessActSuccessRateValue)
            throws JNCException {
        setGprsSessActSuccessRateValue(new YangUInt32(gprsSessActSuccessRateValue));
    }

    /**
     * Sets the value for child leaf "gprs-sess-act-success-rate",
     * using a String value.
     * @param gprsSessActSuccessRateValue used during instantiation.
     */
    public void setGprsSessActSuccessRateValue(String gprsSessActSuccessRateValue)
            throws JNCException {
        setGprsSessActSuccessRateValue(new YangUInt32(gprsSessActSuccessRateValue));
    }

    /**
     * Unsets the value for child leaf "gprs-sess-act-success-rate".
     */
    public void unsetGprsSessActSuccessRateValue() throws JNCException {
        delete("gprs-sess-act-success-rate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gprs-sess-act-success-rate" leaf will not have a value.
     */
    public void addGprsSessActSuccessRate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gprs-sess-act-success-rate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gprs-sess-act-success-rate" with operation "replace".
     */
    public void markGprsSessActSuccessRateReplace() throws JNCException {
        markLeafReplace("gprsSessActSuccessRate");
    }

    /**
     * Marks the leaf "gprs-sess-act-success-rate" with operation "merge".
     */
    public void markGprsSessActSuccessRateMerge() throws JNCException {
        markLeafMerge("gprsSessActSuccessRate");
    }

    /**
     * Marks the leaf "gprs-sess-act-success-rate" with operation "create".
     */
    public void markGprsSessActSuccessRateCreate() throws JNCException {
        markLeafCreate("gprsSessActSuccessRate");
    }

    /**
     * Marks the leaf "gprs-sess-act-success-rate" with operation "delete".
     */
    public void markGprsSessActSuccessRateDelete() throws JNCException {
        markLeafDelete("gprsSessActSuccessRate");
    }

    /* Access methods for optional leaf child: "umts-sess-act-success-rate". */

    /**
     * Gets the value for child leaf "umts-sess-act-success-rate".
     * @return The value of the leaf.
     */
    public YangUInt32 getUmtsSessActSuccessRateValue() throws JNCException {
        return (YangUInt32)getValue("umts-sess-act-success-rate");
    }

    /**
     * Sets the value for child leaf "umts-sess-act-success-rate",
     * using instance of generated typedef class.
     * @param umtsSessActSuccessRateValue The value to set.
     * @param umtsSessActSuccessRateValue used during instantiation.
     */
    public void setUmtsSessActSuccessRateValue(YangUInt32 umtsSessActSuccessRateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "umts-sess-act-success-rate",
            umtsSessActSuccessRateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "umts-sess-act-success-rate",
     * using Java primitive values.
     * @param umtsSessActSuccessRateValue used during instantiation.
     */
    public void setUmtsSessActSuccessRateValue(long umtsSessActSuccessRateValue)
            throws JNCException {
        setUmtsSessActSuccessRateValue(new YangUInt32(umtsSessActSuccessRateValue));
    }

    /**
     * Sets the value for child leaf "umts-sess-act-success-rate",
     * using a String value.
     * @param umtsSessActSuccessRateValue used during instantiation.
     */
    public void setUmtsSessActSuccessRateValue(String umtsSessActSuccessRateValue)
            throws JNCException {
        setUmtsSessActSuccessRateValue(new YangUInt32(umtsSessActSuccessRateValue));
    }

    /**
     * Unsets the value for child leaf "umts-sess-act-success-rate".
     */
    public void unsetUmtsSessActSuccessRateValue() throws JNCException {
        delete("umts-sess-act-success-rate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "umts-sess-act-success-rate" leaf will not have a value.
     */
    public void addUmtsSessActSuccessRate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "umts-sess-act-success-rate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "umts-sess-act-success-rate" with operation "replace".
     */
    public void markUmtsSessActSuccessRateReplace() throws JNCException {
        markLeafReplace("umtsSessActSuccessRate");
    }

    /**
     * Marks the leaf "umts-sess-act-success-rate" with operation "merge".
     */
    public void markUmtsSessActSuccessRateMerge() throws JNCException {
        markLeafMerge("umtsSessActSuccessRate");
    }

    /**
     * Marks the leaf "umts-sess-act-success-rate" with operation "create".
     */
    public void markUmtsSessActSuccessRateCreate() throws JNCException {
        markLeafCreate("umtsSessActSuccessRate");
    }

    /**
     * Marks the leaf "umts-sess-act-success-rate" with operation "delete".
     */
    public void markUmtsSessActSuccessRateDelete() throws JNCException {
        markLeafDelete("umtsSessActSuccessRate");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
