/* 
 * @(#)UpmLoadStatus.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.status;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/status/upm-load-status"
 * <p>
 * See line 562 in
 * upmCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class UpmLoadStatus extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty UpmLoadStatus object.
     */
    public UpmLoadStatus() {
        super(Epc.NAMESPACE, "upm-load-status");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public UpmLoadStatus clone() {
        return (UpmLoadStatus)cloneContent(new UpmLoadStatus());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public UpmLoadStatus cloneShallow() {
        return (UpmLoadStatus)cloneShallowContent(new UpmLoadStatus());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "location",
            "service",
            "unit-id",
            "paths",
            "weight",
            "tps",
            "pending-trans",
        };
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "unit-id". */

    /**
     * Gets the value for child leaf "unit-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getUnitIdValue() throws JNCException {
        return (YangUInt16)getValue("unit-id");
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using instance of generated typedef class.
     * @param unitIdValue The value to set.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(YangUInt16 unitIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-id",
            unitIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using Java primitive values.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(int unitIdValue) throws JNCException {
        setUnitIdValue(new YangUInt16(unitIdValue));
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using a String value.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(String unitIdValue) throws JNCException {
        setUnitIdValue(new YangUInt16(unitIdValue));
    }

    /**
     * Unsets the value for child leaf "unit-id".
     */
    public void unsetUnitIdValue() throws JNCException {
        delete("unit-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-id" leaf will not have a value.
     */
    public void addUnitId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unit-id" with operation "replace".
     */
    public void markUnitIdReplace() throws JNCException {
        markLeafReplace("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "merge".
     */
    public void markUnitIdMerge() throws JNCException {
        markLeafMerge("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "create".
     */
    public void markUnitIdCreate() throws JNCException {
        markLeafCreate("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "delete".
     */
    public void markUnitIdDelete() throws JNCException {
        markLeafDelete("unitId");
    }

    /* Access methods for optional leaf child: "paths". */

    /**
     * Gets the value for child leaf "paths".
     * @return The value of the leaf.
     */
    public YangUInt32 getPathsValue() throws JNCException {
        return (YangUInt32)getValue("paths");
    }

    /**
     * Sets the value for child leaf "paths",
     * using instance of generated typedef class.
     * @param pathsValue The value to set.
     * @param pathsValue used during instantiation.
     */
    public void setPathsValue(YangUInt32 pathsValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paths",
            pathsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "paths",
     * using Java primitive values.
     * @param pathsValue used during instantiation.
     */
    public void setPathsValue(long pathsValue) throws JNCException {
        setPathsValue(new YangUInt32(pathsValue));
    }

    /**
     * Sets the value for child leaf "paths",
     * using a String value.
     * @param pathsValue used during instantiation.
     */
    public void setPathsValue(String pathsValue) throws JNCException {
        setPathsValue(new YangUInt32(pathsValue));
    }

    /**
     * Unsets the value for child leaf "paths".
     */
    public void unsetPathsValue() throws JNCException {
        delete("paths");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "paths" leaf will not have a value.
     */
    public void addPaths() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paths",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "paths" with operation "replace".
     */
    public void markPathsReplace() throws JNCException {
        markLeafReplace("paths");
    }

    /**
     * Marks the leaf "paths" with operation "merge".
     */
    public void markPathsMerge() throws JNCException {
        markLeafMerge("paths");
    }

    /**
     * Marks the leaf "paths" with operation "create".
     */
    public void markPathsCreate() throws JNCException {
        markLeafCreate("paths");
    }

    /**
     * Marks the leaf "paths" with operation "delete".
     */
    public void markPathsDelete() throws JNCException {
        markLeafDelete("paths");
    }

    /* Access methods for optional leaf child: "weight". */

    /**
     * Gets the value for child leaf "weight".
     * @return The value of the leaf.
     */
    public YangUInt32 getWeightValue() throws JNCException {
        return (YangUInt32)getValue("weight");
    }

    /**
     * Sets the value for child leaf "weight",
     * using instance of generated typedef class.
     * @param weightValue The value to set.
     * @param weightValue used during instantiation.
     */
    public void setWeightValue(YangUInt32 weightValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "weight",
            weightValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "weight",
     * using Java primitive values.
     * @param weightValue used during instantiation.
     */
    public void setWeightValue(long weightValue) throws JNCException {
        setWeightValue(new YangUInt32(weightValue));
    }

    /**
     * Sets the value for child leaf "weight",
     * using a String value.
     * @param weightValue used during instantiation.
     */
    public void setWeightValue(String weightValue) throws JNCException {
        setWeightValue(new YangUInt32(weightValue));
    }

    /**
     * Unsets the value for child leaf "weight".
     */
    public void unsetWeightValue() throws JNCException {
        delete("weight");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "weight" leaf will not have a value.
     */
    public void addWeight() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "weight",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "weight" with operation "replace".
     */
    public void markWeightReplace() throws JNCException {
        markLeafReplace("weight");
    }

    /**
     * Marks the leaf "weight" with operation "merge".
     */
    public void markWeightMerge() throws JNCException {
        markLeafMerge("weight");
    }

    /**
     * Marks the leaf "weight" with operation "create".
     */
    public void markWeightCreate() throws JNCException {
        markLeafCreate("weight");
    }

    /**
     * Marks the leaf "weight" with operation "delete".
     */
    public void markWeightDelete() throws JNCException {
        markLeafDelete("weight");
    }

    /* Access methods for optional leaf child: "tps". */

    /**
     * Gets the value for child leaf "tps".
     * @return The value of the leaf.
     */
    public YangUInt32 getTpsValue() throws JNCException {
        return (YangUInt32)getValue("tps");
    }

    /**
     * Sets the value for child leaf "tps",
     * using instance of generated typedef class.
     * @param tpsValue The value to set.
     * @param tpsValue used during instantiation.
     */
    public void setTpsValue(YangUInt32 tpsValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tps",
            tpsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tps",
     * using Java primitive values.
     * @param tpsValue used during instantiation.
     */
    public void setTpsValue(long tpsValue) throws JNCException {
        setTpsValue(new YangUInt32(tpsValue));
    }

    /**
     * Sets the value for child leaf "tps",
     * using a String value.
     * @param tpsValue used during instantiation.
     */
    public void setTpsValue(String tpsValue) throws JNCException {
        setTpsValue(new YangUInt32(tpsValue));
    }

    /**
     * Unsets the value for child leaf "tps".
     */
    public void unsetTpsValue() throws JNCException {
        delete("tps");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tps" leaf will not have a value.
     */
    public void addTps() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tps",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tps" with operation "replace".
     */
    public void markTpsReplace() throws JNCException {
        markLeafReplace("tps");
    }

    /**
     * Marks the leaf "tps" with operation "merge".
     */
    public void markTpsMerge() throws JNCException {
        markLeafMerge("tps");
    }

    /**
     * Marks the leaf "tps" with operation "create".
     */
    public void markTpsCreate() throws JNCException {
        markLeafCreate("tps");
    }

    /**
     * Marks the leaf "tps" with operation "delete".
     */
    public void markTpsDelete() throws JNCException {
        markLeafDelete("tps");
    }

    /* Access methods for optional leaf child: "pending-trans". */

    /**
     * Gets the value for child leaf "pending-trans".
     * @return The value of the leaf.
     */
    public YangUInt32 getPendingTransValue() throws JNCException {
        return (YangUInt32)getValue("pending-trans");
    }

    /**
     * Sets the value for child leaf "pending-trans",
     * using instance of generated typedef class.
     * @param pendingTransValue The value to set.
     * @param pendingTransValue used during instantiation.
     */
    public void setPendingTransValue(YangUInt32 pendingTransValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pending-trans",
            pendingTransValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pending-trans",
     * using Java primitive values.
     * @param pendingTransValue used during instantiation.
     */
    public void setPendingTransValue(long pendingTransValue)
            throws JNCException {
        setPendingTransValue(new YangUInt32(pendingTransValue));
    }

    /**
     * Sets the value for child leaf "pending-trans",
     * using a String value.
     * @param pendingTransValue used during instantiation.
     */
    public void setPendingTransValue(String pendingTransValue)
            throws JNCException {
        setPendingTransValue(new YangUInt32(pendingTransValue));
    }

    /**
     * Unsets the value for child leaf "pending-trans".
     */
    public void unsetPendingTransValue() throws JNCException {
        delete("pending-trans");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pending-trans" leaf will not have a value.
     */
    public void addPendingTrans() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pending-trans",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pending-trans" with operation "replace".
     */
    public void markPendingTransReplace() throws JNCException {
        markLeafReplace("pendingTrans");
    }

    /**
     * Marks the leaf "pending-trans" with operation "merge".
     */
    public void markPendingTransMerge() throws JNCException {
        markLeafMerge("pendingTrans");
    }

    /**
     * Marks the leaf "pending-trans" with operation "create".
     */
    public void markPendingTransCreate() throws JNCException {
        markLeafCreate("pendingTrans");
    }

    /**
     * Marks the leaf "pending-trans" with operation "delete".
     */
    public void markPendingTransDelete() throws JNCException {
        markLeafDelete("pendingTrans");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
