/* 
 * @(#)MmeHealthProfile.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.status;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/status/mme-health-profile"
 * <p>
 * See line 675 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeHealthProfile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeHealthProfile object.
     */
    public MmeHealthProfile() {
        super(Epc.NAMESPACE, "mme-health-profile");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeHealthProfile clone() {
        return (MmeHealthProfile)cloneContent(new MmeHealthProfile());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeHealthProfile cloneShallow() {
        return (MmeHealthProfile)cloneShallowContent(new MmeHealthProfile());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "update-period",
            "window",
            "min-data-threshold",
            "attach-major-threshold",
            "attach-minor-threshold",
            "attach-clear-threshold",
            "act-major-threshold",
            "act-minor-threshold",
            "act-clear-threshold",
        };
    }

    /* Access methods for optional leaf child: "update-period". */

    /**
     * Gets the value for child leaf "update-period".
     * @return The value of the leaf.
     */
    public YangEnumeration getUpdatePeriodValue() throws JNCException {
        YangEnumeration updatePeriod = (YangEnumeration)getValue("update-period");
        if (updatePeriod == null) {
            updatePeriod = new YangEnumeration("3", new String[] {  // default
                "1",
                "3",
                "5",
                "15",
            });
        }
        return updatePeriod;
    }

    /**
     * Sets the value for child leaf "update-period",
     * using instance of generated typedef class.
     * @param updatePeriodValue The value to set.
     * @param updatePeriodValue used during instantiation.
     */
    public void setUpdatePeriodValue(YangEnumeration updatePeriodValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "update-period",
            updatePeriodValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "update-period",
     * using a String value.
     * @param updatePeriodValue used during instantiation.
     */
    public void setUpdatePeriodValue(String updatePeriodValue)
            throws JNCException {
        setUpdatePeriodValue(new YangEnumeration(updatePeriodValue, new String[] {
             "1",
             "3",
             "5",
             "15",
        }));
    }

    /**
     * Unsets the value for child leaf "update-period".
     */
    public void unsetUpdatePeriodValue() throws JNCException {
        delete("update-period");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "update-period" leaf will not have a value.
     */
    public void addUpdatePeriod() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "update-period",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "update-period" with operation "replace".
     */
    public void markUpdatePeriodReplace() throws JNCException {
        markLeafReplace("updatePeriod");
    }

    /**
     * Marks the leaf "update-period" with operation "merge".
     */
    public void markUpdatePeriodMerge() throws JNCException {
        markLeafMerge("updatePeriod");
    }

    /**
     * Marks the leaf "update-period" with operation "create".
     */
    public void markUpdatePeriodCreate() throws JNCException {
        markLeafCreate("updatePeriod");
    }

    /**
     * Marks the leaf "update-period" with operation "delete".
     */
    public void markUpdatePeriodDelete() throws JNCException {
        markLeafDelete("updatePeriod");
    }

    /* Access methods for optional leaf child: "window". */

    /**
     * Gets the value for child leaf "window".
     * @return The value of the leaf.
     */
    public YangEnumeration getWindowValue() throws JNCException {
        YangEnumeration window = (YangEnumeration)getValue("window");
        if (window == null) {
            window = new YangEnumeration("15", new String[] {  // default
                "15",
                "30",
            });
        }
        return window;
    }

    /**
     * Sets the value for child leaf "window",
     * using instance of generated typedef class.
     * @param windowValue The value to set.
     * @param windowValue used during instantiation.
     */
    public void setWindowValue(YangEnumeration windowValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "window",
            windowValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "window",
     * using a String value.
     * @param windowValue used during instantiation.
     */
    public void setWindowValue(String windowValue) throws JNCException {
        setWindowValue(new YangEnumeration(windowValue, new String[] {
             "15",
             "30",
        }));
    }

    /**
     * Unsets the value for child leaf "window".
     */
    public void unsetWindowValue() throws JNCException {
        delete("window");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "window" leaf will not have a value.
     */
    public void addWindow() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "window",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "window" with operation "replace".
     */
    public void markWindowReplace() throws JNCException {
        markLeafReplace("window");
    }

    /**
     * Marks the leaf "window" with operation "merge".
     */
    public void markWindowMerge() throws JNCException {
        markLeafMerge("window");
    }

    /**
     * Marks the leaf "window" with operation "create".
     */
    public void markWindowCreate() throws JNCException {
        markLeafCreate("window");
    }

    /**
     * Marks the leaf "window" with operation "delete".
     */
    public void markWindowDelete() throws JNCException {
        markLeafDelete("window");
    }

    /* Access methods for optional leaf child: "min-data-threshold". */

    /**
     * Gets the value for child leaf "min-data-threshold".
     * @return The value of the leaf.
     */
    public YangUInt16 getMinDataThresholdValue() throws JNCException {
        YangUInt16 minDataThreshold = (YangUInt16)getValue("min-data-threshold");
        if (minDataThreshold == null) {
            minDataThreshold = new YangUInt16("100");  // default
        }
        return minDataThreshold;
    }

    /**
     * Sets the value for child leaf "min-data-threshold",
     * using instance of generated typedef class.
     * @param minDataThresholdValue The value to set.
     * @param minDataThresholdValue used during instantiation.
     */
    public void setMinDataThresholdValue(YangUInt16 minDataThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "min-data-threshold",
            minDataThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "min-data-threshold",
     * using Java primitive values.
     * @param minDataThresholdValue used during instantiation.
     */
    public void setMinDataThresholdValue(int minDataThresholdValue)
            throws JNCException {
        setMinDataThresholdValue(new YangUInt16(minDataThresholdValue));
    }

    /**
     * Sets the value for child leaf "min-data-threshold",
     * using a String value.
     * @param minDataThresholdValue used during instantiation.
     */
    public void setMinDataThresholdValue(String minDataThresholdValue)
            throws JNCException {
        setMinDataThresholdValue(new YangUInt16(minDataThresholdValue));
    }

    /**
     * Unsets the value for child leaf "min-data-threshold".
     */
    public void unsetMinDataThresholdValue() throws JNCException {
        delete("min-data-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "min-data-threshold" leaf will not have a value.
     */
    public void addMinDataThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "min-data-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "min-data-threshold" with operation "replace".
     */
    public void markMinDataThresholdReplace() throws JNCException {
        markLeafReplace("minDataThreshold");
    }

    /**
     * Marks the leaf "min-data-threshold" with operation "merge".
     */
    public void markMinDataThresholdMerge() throws JNCException {
        markLeafMerge("minDataThreshold");
    }

    /**
     * Marks the leaf "min-data-threshold" with operation "create".
     */
    public void markMinDataThresholdCreate() throws JNCException {
        markLeafCreate("minDataThreshold");
    }

    /**
     * Marks the leaf "min-data-threshold" with operation "delete".
     */
    public void markMinDataThresholdDelete() throws JNCException {
        markLeafDelete("minDataThreshold");
    }

    /* Access methods for optional leaf child: "attach-major-threshold". */

    /**
     * Gets the value for child leaf "attach-major-threshold".
     * @return The value of the leaf.
     */
    public YangUInt8 getAttachMajorThresholdValue() throws JNCException {
        YangUInt8 attachMajorThreshold = (YangUInt8)getValue("attach-major-threshold");
        if (attachMajorThreshold == null) {
            attachMajorThreshold = new YangUInt8("90");  // default
        }
        return attachMajorThreshold;
    }

    /**
     * Sets the value for child leaf "attach-major-threshold",
     * using instance of generated typedef class.
     * @param attachMajorThresholdValue The value to set.
     * @param attachMajorThresholdValue used during instantiation.
     */
    public void setAttachMajorThresholdValue(YangUInt8 attachMajorThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attach-major-threshold",
            attachMajorThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "attach-major-threshold",
     * using Java primitive values.
     * @param attachMajorThresholdValue used during instantiation.
     */
    public void setAttachMajorThresholdValue(short attachMajorThresholdValue)
            throws JNCException {
        setAttachMajorThresholdValue(new YangUInt8(attachMajorThresholdValue));
    }

    /**
     * Sets the value for child leaf "attach-major-threshold",
     * using a String value.
     * @param attachMajorThresholdValue used during instantiation.
     */
    public void setAttachMajorThresholdValue(String attachMajorThresholdValue)
            throws JNCException {
        setAttachMajorThresholdValue(new YangUInt8(attachMajorThresholdValue));
    }

    /**
     * Unsets the value for child leaf "attach-major-threshold".
     */
    public void unsetAttachMajorThresholdValue() throws JNCException {
        delete("attach-major-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "attach-major-threshold" leaf will not have a value.
     */
    public void addAttachMajorThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attach-major-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "attach-major-threshold" with operation "replace".
     */
    public void markAttachMajorThresholdReplace() throws JNCException {
        markLeafReplace("attachMajorThreshold");
    }

    /**
     * Marks the leaf "attach-major-threshold" with operation "merge".
     */
    public void markAttachMajorThresholdMerge() throws JNCException {
        markLeafMerge("attachMajorThreshold");
    }

    /**
     * Marks the leaf "attach-major-threshold" with operation "create".
     */
    public void markAttachMajorThresholdCreate() throws JNCException {
        markLeafCreate("attachMajorThreshold");
    }

    /**
     * Marks the leaf "attach-major-threshold" with operation "delete".
     */
    public void markAttachMajorThresholdDelete() throws JNCException {
        markLeafDelete("attachMajorThreshold");
    }

    /* Access methods for optional leaf child: "attach-minor-threshold". */

    /**
     * Gets the value for child leaf "attach-minor-threshold".
     * @return The value of the leaf.
     */
    public YangUInt8 getAttachMinorThresholdValue() throws JNCException {
        YangUInt8 attachMinorThreshold = (YangUInt8)getValue("attach-minor-threshold");
        if (attachMinorThreshold == null) {
            attachMinorThreshold = new YangUInt8("95");  // default
        }
        return attachMinorThreshold;
    }

    /**
     * Sets the value for child leaf "attach-minor-threshold",
     * using instance of generated typedef class.
     * @param attachMinorThresholdValue The value to set.
     * @param attachMinorThresholdValue used during instantiation.
     */
    public void setAttachMinorThresholdValue(YangUInt8 attachMinorThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attach-minor-threshold",
            attachMinorThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "attach-minor-threshold",
     * using Java primitive values.
     * @param attachMinorThresholdValue used during instantiation.
     */
    public void setAttachMinorThresholdValue(short attachMinorThresholdValue)
            throws JNCException {
        setAttachMinorThresholdValue(new YangUInt8(attachMinorThresholdValue));
    }

    /**
     * Sets the value for child leaf "attach-minor-threshold",
     * using a String value.
     * @param attachMinorThresholdValue used during instantiation.
     */
    public void setAttachMinorThresholdValue(String attachMinorThresholdValue)
            throws JNCException {
        setAttachMinorThresholdValue(new YangUInt8(attachMinorThresholdValue));
    }

    /**
     * Unsets the value for child leaf "attach-minor-threshold".
     */
    public void unsetAttachMinorThresholdValue() throws JNCException {
        delete("attach-minor-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "attach-minor-threshold" leaf will not have a value.
     */
    public void addAttachMinorThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attach-minor-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "attach-minor-threshold" with operation "replace".
     */
    public void markAttachMinorThresholdReplace() throws JNCException {
        markLeafReplace("attachMinorThreshold");
    }

    /**
     * Marks the leaf "attach-minor-threshold" with operation "merge".
     */
    public void markAttachMinorThresholdMerge() throws JNCException {
        markLeafMerge("attachMinorThreshold");
    }

    /**
     * Marks the leaf "attach-minor-threshold" with operation "create".
     */
    public void markAttachMinorThresholdCreate() throws JNCException {
        markLeafCreate("attachMinorThreshold");
    }

    /**
     * Marks the leaf "attach-minor-threshold" with operation "delete".
     */
    public void markAttachMinorThresholdDelete() throws JNCException {
        markLeafDelete("attachMinorThreshold");
    }

    /* Access methods for optional leaf child: "attach-clear-threshold". */

    /**
     * Gets the value for child leaf "attach-clear-threshold".
     * @return The value of the leaf.
     */
    public YangUInt8 getAttachClearThresholdValue() throws JNCException {
        YangUInt8 attachClearThreshold = (YangUInt8)getValue("attach-clear-threshold");
        if (attachClearThreshold == null) {
            attachClearThreshold = new YangUInt8("98");  // default
        }
        return attachClearThreshold;
    }

    /**
     * Sets the value for child leaf "attach-clear-threshold",
     * using instance of generated typedef class.
     * @param attachClearThresholdValue The value to set.
     * @param attachClearThresholdValue used during instantiation.
     */
    public void setAttachClearThresholdValue(YangUInt8 attachClearThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attach-clear-threshold",
            attachClearThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "attach-clear-threshold",
     * using Java primitive values.
     * @param attachClearThresholdValue used during instantiation.
     */
    public void setAttachClearThresholdValue(short attachClearThresholdValue)
            throws JNCException {
        setAttachClearThresholdValue(new YangUInt8(attachClearThresholdValue));
    }

    /**
     * Sets the value for child leaf "attach-clear-threshold",
     * using a String value.
     * @param attachClearThresholdValue used during instantiation.
     */
    public void setAttachClearThresholdValue(String attachClearThresholdValue)
            throws JNCException {
        setAttachClearThresholdValue(new YangUInt8(attachClearThresholdValue));
    }

    /**
     * Unsets the value for child leaf "attach-clear-threshold".
     */
    public void unsetAttachClearThresholdValue() throws JNCException {
        delete("attach-clear-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "attach-clear-threshold" leaf will not have a value.
     */
    public void addAttachClearThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attach-clear-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "attach-clear-threshold" with operation "replace".
     */
    public void markAttachClearThresholdReplace() throws JNCException {
        markLeafReplace("attachClearThreshold");
    }

    /**
     * Marks the leaf "attach-clear-threshold" with operation "merge".
     */
    public void markAttachClearThresholdMerge() throws JNCException {
        markLeafMerge("attachClearThreshold");
    }

    /**
     * Marks the leaf "attach-clear-threshold" with operation "create".
     */
    public void markAttachClearThresholdCreate() throws JNCException {
        markLeafCreate("attachClearThreshold");
    }

    /**
     * Marks the leaf "attach-clear-threshold" with operation "delete".
     */
    public void markAttachClearThresholdDelete() throws JNCException {
        markLeafDelete("attachClearThreshold");
    }

    /* Access methods for optional leaf child: "act-major-threshold". */

    /**
     * Gets the value for child leaf "act-major-threshold".
     * @return The value of the leaf.
     */
    public YangUInt8 getActMajorThresholdValue() throws JNCException {
        YangUInt8 actMajorThreshold = (YangUInt8)getValue("act-major-threshold");
        if (actMajorThreshold == null) {
            actMajorThreshold = new YangUInt8("90");  // default
        }
        return actMajorThreshold;
    }

    /**
     * Sets the value for child leaf "act-major-threshold",
     * using instance of generated typedef class.
     * @param actMajorThresholdValue The value to set.
     * @param actMajorThresholdValue used during instantiation.
     */
    public void setActMajorThresholdValue(YangUInt8 actMajorThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "act-major-threshold",
            actMajorThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "act-major-threshold",
     * using Java primitive values.
     * @param actMajorThresholdValue used during instantiation.
     */
    public void setActMajorThresholdValue(short actMajorThresholdValue)
            throws JNCException {
        setActMajorThresholdValue(new YangUInt8(actMajorThresholdValue));
    }

    /**
     * Sets the value for child leaf "act-major-threshold",
     * using a String value.
     * @param actMajorThresholdValue used during instantiation.
     */
    public void setActMajorThresholdValue(String actMajorThresholdValue)
            throws JNCException {
        setActMajorThresholdValue(new YangUInt8(actMajorThresholdValue));
    }

    /**
     * Unsets the value for child leaf "act-major-threshold".
     */
    public void unsetActMajorThresholdValue() throws JNCException {
        delete("act-major-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "act-major-threshold" leaf will not have a value.
     */
    public void addActMajorThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "act-major-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "act-major-threshold" with operation "replace".
     */
    public void markActMajorThresholdReplace() throws JNCException {
        markLeafReplace("actMajorThreshold");
    }

    /**
     * Marks the leaf "act-major-threshold" with operation "merge".
     */
    public void markActMajorThresholdMerge() throws JNCException {
        markLeafMerge("actMajorThreshold");
    }

    /**
     * Marks the leaf "act-major-threshold" with operation "create".
     */
    public void markActMajorThresholdCreate() throws JNCException {
        markLeafCreate("actMajorThreshold");
    }

    /**
     * Marks the leaf "act-major-threshold" with operation "delete".
     */
    public void markActMajorThresholdDelete() throws JNCException {
        markLeafDelete("actMajorThreshold");
    }

    /* Access methods for optional leaf child: "act-minor-threshold". */

    /**
     * Gets the value for child leaf "act-minor-threshold".
     * @return The value of the leaf.
     */
    public YangUInt8 getActMinorThresholdValue() throws JNCException {
        YangUInt8 actMinorThreshold = (YangUInt8)getValue("act-minor-threshold");
        if (actMinorThreshold == null) {
            actMinorThreshold = new YangUInt8("95");  // default
        }
        return actMinorThreshold;
    }

    /**
     * Sets the value for child leaf "act-minor-threshold",
     * using instance of generated typedef class.
     * @param actMinorThresholdValue The value to set.
     * @param actMinorThresholdValue used during instantiation.
     */
    public void setActMinorThresholdValue(YangUInt8 actMinorThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "act-minor-threshold",
            actMinorThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "act-minor-threshold",
     * using Java primitive values.
     * @param actMinorThresholdValue used during instantiation.
     */
    public void setActMinorThresholdValue(short actMinorThresholdValue)
            throws JNCException {
        setActMinorThresholdValue(new YangUInt8(actMinorThresholdValue));
    }

    /**
     * Sets the value for child leaf "act-minor-threshold",
     * using a String value.
     * @param actMinorThresholdValue used during instantiation.
     */
    public void setActMinorThresholdValue(String actMinorThresholdValue)
            throws JNCException {
        setActMinorThresholdValue(new YangUInt8(actMinorThresholdValue));
    }

    /**
     * Unsets the value for child leaf "act-minor-threshold".
     */
    public void unsetActMinorThresholdValue() throws JNCException {
        delete("act-minor-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "act-minor-threshold" leaf will not have a value.
     */
    public void addActMinorThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "act-minor-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "act-minor-threshold" with operation "replace".
     */
    public void markActMinorThresholdReplace() throws JNCException {
        markLeafReplace("actMinorThreshold");
    }

    /**
     * Marks the leaf "act-minor-threshold" with operation "merge".
     */
    public void markActMinorThresholdMerge() throws JNCException {
        markLeafMerge("actMinorThreshold");
    }

    /**
     * Marks the leaf "act-minor-threshold" with operation "create".
     */
    public void markActMinorThresholdCreate() throws JNCException {
        markLeafCreate("actMinorThreshold");
    }

    /**
     * Marks the leaf "act-minor-threshold" with operation "delete".
     */
    public void markActMinorThresholdDelete() throws JNCException {
        markLeafDelete("actMinorThreshold");
    }

    /* Access methods for optional leaf child: "act-clear-threshold". */

    /**
     * Gets the value for child leaf "act-clear-threshold".
     * @return The value of the leaf.
     */
    public YangUInt8 getActClearThresholdValue() throws JNCException {
        YangUInt8 actClearThreshold = (YangUInt8)getValue("act-clear-threshold");
        if (actClearThreshold == null) {
            actClearThreshold = new YangUInt8("98");  // default
        }
        return actClearThreshold;
    }

    /**
     * Sets the value for child leaf "act-clear-threshold",
     * using instance of generated typedef class.
     * @param actClearThresholdValue The value to set.
     * @param actClearThresholdValue used during instantiation.
     */
    public void setActClearThresholdValue(YangUInt8 actClearThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "act-clear-threshold",
            actClearThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "act-clear-threshold",
     * using Java primitive values.
     * @param actClearThresholdValue used during instantiation.
     */
    public void setActClearThresholdValue(short actClearThresholdValue)
            throws JNCException {
        setActClearThresholdValue(new YangUInt8(actClearThresholdValue));
    }

    /**
     * Sets the value for child leaf "act-clear-threshold",
     * using a String value.
     * @param actClearThresholdValue used during instantiation.
     */
    public void setActClearThresholdValue(String actClearThresholdValue)
            throws JNCException {
        setActClearThresholdValue(new YangUInt8(actClearThresholdValue));
    }

    /**
     * Unsets the value for child leaf "act-clear-threshold".
     */
    public void unsetActClearThresholdValue() throws JNCException {
        delete("act-clear-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "act-clear-threshold" leaf will not have a value.
     */
    public void addActClearThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "act-clear-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "act-clear-threshold" with operation "replace".
     */
    public void markActClearThresholdReplace() throws JNCException {
        markLeafReplace("actClearThreshold");
    }

    /**
     * Marks the leaf "act-clear-threshold" with operation "merge".
     */
    public void markActClearThresholdMerge() throws JNCException {
        markLeafMerge("actClearThreshold");
    }

    /**
     * Marks the leaf "act-clear-threshold" with operation "create".
     */
    public void markActClearThresholdCreate() throws JNCException {
        markLeafCreate("actClearThreshold");
    }

    /**
     * Marks the leaf "act-clear-threshold" with operation "delete".
     */
    public void markActClearThresholdDelete() throws JNCException {
        markLeafDelete("actClearThreshold");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
