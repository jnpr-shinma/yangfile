/* 
 * @(#)Lte.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.status;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/status/lte"
 * <p>
 * See line 1935 in
 * scCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Lte extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Lte object.
     */
    public Lte() {
        super(Epc.NAMESPACE, "lte");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Lte clone() {
        return (Lte)cloneContent(new Lte());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Lte cloneShallow() {
        return (Lte)cloneShallowContent(new Lte());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "service",
            "location",
            "current-subscribers",
            "current-sessions",
            "current-bearers",
            "attach-success-rate-nwk",
            "attach-success-rate-nodal",
            "session-act-success-rate-nwk",
            "session-act-success-rate-nodal",
            "bearer-act-success-rate-nwk",
            "bearer-act-success-rate-nodal",
            "tau-success-rate-nwk",
            "itau-success-rate-nwk",
            "paging-success-rate-nwk",
        };
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "current-subscribers". */

    /**
     * Gets the value for child leaf "current-subscribers".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentSubscribersValue() throws JNCException {
        return (YangUInt32)getValue("current-subscribers");
    }

    /**
     * Sets the value for child leaf "current-subscribers",
     * using instance of generated typedef class.
     * @param currentSubscribersValue The value to set.
     * @param currentSubscribersValue used during instantiation.
     */
    public void setCurrentSubscribersValue(YangUInt32 currentSubscribersValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-subscribers",
            currentSubscribersValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-subscribers",
     * using Java primitive values.
     * @param currentSubscribersValue used during instantiation.
     */
    public void setCurrentSubscribersValue(long currentSubscribersValue)
            throws JNCException {
        setCurrentSubscribersValue(new YangUInt32(currentSubscribersValue));
    }

    /**
     * Sets the value for child leaf "current-subscribers",
     * using a String value.
     * @param currentSubscribersValue used during instantiation.
     */
    public void setCurrentSubscribersValue(String currentSubscribersValue)
            throws JNCException {
        setCurrentSubscribersValue(new YangUInt32(currentSubscribersValue));
    }

    /**
     * Unsets the value for child leaf "current-subscribers".
     */
    public void unsetCurrentSubscribersValue() throws JNCException {
        delete("current-subscribers");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-subscribers" leaf will not have a value.
     */
    public void addCurrentSubscribers() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-subscribers",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-subscribers" with operation "replace".
     */
    public void markCurrentSubscribersReplace() throws JNCException {
        markLeafReplace("currentSubscribers");
    }

    /**
     * Marks the leaf "current-subscribers" with operation "merge".
     */
    public void markCurrentSubscribersMerge() throws JNCException {
        markLeafMerge("currentSubscribers");
    }

    /**
     * Marks the leaf "current-subscribers" with operation "create".
     */
    public void markCurrentSubscribersCreate() throws JNCException {
        markLeafCreate("currentSubscribers");
    }

    /**
     * Marks the leaf "current-subscribers" with operation "delete".
     */
    public void markCurrentSubscribersDelete() throws JNCException {
        markLeafDelete("currentSubscribers");
    }

    /* Access methods for optional leaf child: "current-sessions". */

    /**
     * Gets the value for child leaf "current-sessions".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentSessionsValue() throws JNCException {
        return (YangUInt32)getValue("current-sessions");
    }

    /**
     * Sets the value for child leaf "current-sessions",
     * using instance of generated typedef class.
     * @param currentSessionsValue The value to set.
     * @param currentSessionsValue used during instantiation.
     */
    public void setCurrentSessionsValue(YangUInt32 currentSessionsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-sessions",
            currentSessionsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-sessions",
     * using Java primitive values.
     * @param currentSessionsValue used during instantiation.
     */
    public void setCurrentSessionsValue(long currentSessionsValue)
            throws JNCException {
        setCurrentSessionsValue(new YangUInt32(currentSessionsValue));
    }

    /**
     * Sets the value for child leaf "current-sessions",
     * using a String value.
     * @param currentSessionsValue used during instantiation.
     */
    public void setCurrentSessionsValue(String currentSessionsValue)
            throws JNCException {
        setCurrentSessionsValue(new YangUInt32(currentSessionsValue));
    }

    /**
     * Unsets the value for child leaf "current-sessions".
     */
    public void unsetCurrentSessionsValue() throws JNCException {
        delete("current-sessions");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-sessions" leaf will not have a value.
     */
    public void addCurrentSessions() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-sessions",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-sessions" with operation "replace".
     */
    public void markCurrentSessionsReplace() throws JNCException {
        markLeafReplace("currentSessions");
    }

    /**
     * Marks the leaf "current-sessions" with operation "merge".
     */
    public void markCurrentSessionsMerge() throws JNCException {
        markLeafMerge("currentSessions");
    }

    /**
     * Marks the leaf "current-sessions" with operation "create".
     */
    public void markCurrentSessionsCreate() throws JNCException {
        markLeafCreate("currentSessions");
    }

    /**
     * Marks the leaf "current-sessions" with operation "delete".
     */
    public void markCurrentSessionsDelete() throws JNCException {
        markLeafDelete("currentSessions");
    }

    /* Access methods for optional leaf child: "current-bearers". */

    /**
     * Gets the value for child leaf "current-bearers".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentBearersValue() throws JNCException {
        return (YangUInt32)getValue("current-bearers");
    }

    /**
     * Sets the value for child leaf "current-bearers",
     * using instance of generated typedef class.
     * @param currentBearersValue The value to set.
     * @param currentBearersValue used during instantiation.
     */
    public void setCurrentBearersValue(YangUInt32 currentBearersValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-bearers",
            currentBearersValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-bearers",
     * using Java primitive values.
     * @param currentBearersValue used during instantiation.
     */
    public void setCurrentBearersValue(long currentBearersValue)
            throws JNCException {
        setCurrentBearersValue(new YangUInt32(currentBearersValue));
    }

    /**
     * Sets the value for child leaf "current-bearers",
     * using a String value.
     * @param currentBearersValue used during instantiation.
     */
    public void setCurrentBearersValue(String currentBearersValue)
            throws JNCException {
        setCurrentBearersValue(new YangUInt32(currentBearersValue));
    }

    /**
     * Unsets the value for child leaf "current-bearers".
     */
    public void unsetCurrentBearersValue() throws JNCException {
        delete("current-bearers");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-bearers" leaf will not have a value.
     */
    public void addCurrentBearers() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-bearers",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-bearers" with operation "replace".
     */
    public void markCurrentBearersReplace() throws JNCException {
        markLeafReplace("currentBearers");
    }

    /**
     * Marks the leaf "current-bearers" with operation "merge".
     */
    public void markCurrentBearersMerge() throws JNCException {
        markLeafMerge("currentBearers");
    }

    /**
     * Marks the leaf "current-bearers" with operation "create".
     */
    public void markCurrentBearersCreate() throws JNCException {
        markLeafCreate("currentBearers");
    }

    /**
     * Marks the leaf "current-bearers" with operation "delete".
     */
    public void markCurrentBearersDelete() throws JNCException {
        markLeafDelete("currentBearers");
    }

    /* Access methods for optional leaf child: "attach-success-rate-nwk". */

    /**
     * Gets the value for child leaf "attach-success-rate-nwk".
     * @return The value of the leaf.
     */
    public YangUInt32 getAttachSuccessRateNwkValue() throws JNCException {
        return (YangUInt32)getValue("attach-success-rate-nwk");
    }

    /**
     * Sets the value for child leaf "attach-success-rate-nwk",
     * using instance of generated typedef class.
     * @param attachSuccessRateNwkValue The value to set.
     * @param attachSuccessRateNwkValue used during instantiation.
     */
    public void setAttachSuccessRateNwkValue(YangUInt32 attachSuccessRateNwkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attach-success-rate-nwk",
            attachSuccessRateNwkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "attach-success-rate-nwk",
     * using Java primitive values.
     * @param attachSuccessRateNwkValue used during instantiation.
     */
    public void setAttachSuccessRateNwkValue(long attachSuccessRateNwkValue)
            throws JNCException {
        setAttachSuccessRateNwkValue(new YangUInt32(attachSuccessRateNwkValue));
    }

    /**
     * Sets the value for child leaf "attach-success-rate-nwk",
     * using a String value.
     * @param attachSuccessRateNwkValue used during instantiation.
     */
    public void setAttachSuccessRateNwkValue(String attachSuccessRateNwkValue)
            throws JNCException {
        setAttachSuccessRateNwkValue(new YangUInt32(attachSuccessRateNwkValue));
    }

    /**
     * Unsets the value for child leaf "attach-success-rate-nwk".
     */
    public void unsetAttachSuccessRateNwkValue() throws JNCException {
        delete("attach-success-rate-nwk");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "attach-success-rate-nwk" leaf will not have a value.
     */
    public void addAttachSuccessRateNwk() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attach-success-rate-nwk",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "attach-success-rate-nwk" with operation "replace".
     */
    public void markAttachSuccessRateNwkReplace() throws JNCException {
        markLeafReplace("attachSuccessRateNwk");
    }

    /**
     * Marks the leaf "attach-success-rate-nwk" with operation "merge".
     */
    public void markAttachSuccessRateNwkMerge() throws JNCException {
        markLeafMerge("attachSuccessRateNwk");
    }

    /**
     * Marks the leaf "attach-success-rate-nwk" with operation "create".
     */
    public void markAttachSuccessRateNwkCreate() throws JNCException {
        markLeafCreate("attachSuccessRateNwk");
    }

    /**
     * Marks the leaf "attach-success-rate-nwk" with operation "delete".
     */
    public void markAttachSuccessRateNwkDelete() throws JNCException {
        markLeafDelete("attachSuccessRateNwk");
    }

    /* Access methods for optional leaf child: "attach-success-rate-nodal". */

    /**
     * Gets the value for child leaf "attach-success-rate-nodal".
     * @return The value of the leaf.
     */
    public YangUInt32 getAttachSuccessRateNodalValue() throws JNCException {
        return (YangUInt32)getValue("attach-success-rate-nodal");
    }

    /**
     * Sets the value for child leaf "attach-success-rate-nodal",
     * using instance of generated typedef class.
     * @param attachSuccessRateNodalValue The value to set.
     * @param attachSuccessRateNodalValue used during instantiation.
     */
    public void setAttachSuccessRateNodalValue(YangUInt32 attachSuccessRateNodalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attach-success-rate-nodal",
            attachSuccessRateNodalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "attach-success-rate-nodal",
     * using Java primitive values.
     * @param attachSuccessRateNodalValue used during instantiation.
     */
    public void setAttachSuccessRateNodalValue(long attachSuccessRateNodalValue)
            throws JNCException {
        setAttachSuccessRateNodalValue(new YangUInt32(attachSuccessRateNodalValue));
    }

    /**
     * Sets the value for child leaf "attach-success-rate-nodal",
     * using a String value.
     * @param attachSuccessRateNodalValue used during instantiation.
     */
    public void setAttachSuccessRateNodalValue(String attachSuccessRateNodalValue)
            throws JNCException {
        setAttachSuccessRateNodalValue(new YangUInt32(attachSuccessRateNodalValue));
    }

    /**
     * Unsets the value for child leaf "attach-success-rate-nodal".
     */
    public void unsetAttachSuccessRateNodalValue() throws JNCException {
        delete("attach-success-rate-nodal");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "attach-success-rate-nodal" leaf will not have a value.
     */
    public void addAttachSuccessRateNodal() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attach-success-rate-nodal",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "attach-success-rate-nodal" with operation "replace".
     */
    public void markAttachSuccessRateNodalReplace() throws JNCException {
        markLeafReplace("attachSuccessRateNodal");
    }

    /**
     * Marks the leaf "attach-success-rate-nodal" with operation "merge".
     */
    public void markAttachSuccessRateNodalMerge() throws JNCException {
        markLeafMerge("attachSuccessRateNodal");
    }

    /**
     * Marks the leaf "attach-success-rate-nodal" with operation "create".
     */
    public void markAttachSuccessRateNodalCreate() throws JNCException {
        markLeafCreate("attachSuccessRateNodal");
    }

    /**
     * Marks the leaf "attach-success-rate-nodal" with operation "delete".
     */
    public void markAttachSuccessRateNodalDelete() throws JNCException {
        markLeafDelete("attachSuccessRateNodal");
    }

    /* Access methods for optional leaf child: "session-act-success-rate-nwk". */

    /**
     * Gets the value for child leaf "session-act-success-rate-nwk".
     * @return The value of the leaf.
     */
    public YangUInt32 getSessionActSuccessRateNwkValue() throws JNCException {
        return (YangUInt32)getValue("session-act-success-rate-nwk");
    }

    /**
     * Sets the value for child leaf "session-act-success-rate-nwk",
     * using instance of generated typedef class.
     * @param sessionActSuccessRateNwkValue The value to set.
     * @param sessionActSuccessRateNwkValue used during instantiation.
     */
    public void setSessionActSuccessRateNwkValue(YangUInt32 sessionActSuccessRateNwkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-act-success-rate-nwk",
            sessionActSuccessRateNwkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "session-act-success-rate-nwk",
     * using Java primitive values.
     * @param sessionActSuccessRateNwkValue used during instantiation.
     */
    public void setSessionActSuccessRateNwkValue(long sessionActSuccessRateNwkValue)
            throws JNCException {
        setSessionActSuccessRateNwkValue(new YangUInt32(sessionActSuccessRateNwkValue));
    }

    /**
     * Sets the value for child leaf "session-act-success-rate-nwk",
     * using a String value.
     * @param sessionActSuccessRateNwkValue used during instantiation.
     */
    public void setSessionActSuccessRateNwkValue(String sessionActSuccessRateNwkValue)
            throws JNCException {
        setSessionActSuccessRateNwkValue(new YangUInt32(sessionActSuccessRateNwkValue));
    }

    /**
     * Unsets the value for child leaf "session-act-success-rate-nwk".
     */
    public void unsetSessionActSuccessRateNwkValue() throws JNCException {
        delete("session-act-success-rate-nwk");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "session-act-success-rate-nwk" leaf will not have a value.
     */
    public void addSessionActSuccessRateNwk() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-act-success-rate-nwk",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "session-act-success-rate-nwk" with operation "replace".
     */
    public void markSessionActSuccessRateNwkReplace() throws JNCException {
        markLeafReplace("sessionActSuccessRateNwk");
    }

    /**
     * Marks the leaf "session-act-success-rate-nwk" with operation "merge".
     */
    public void markSessionActSuccessRateNwkMerge() throws JNCException {
        markLeafMerge("sessionActSuccessRateNwk");
    }

    /**
     * Marks the leaf "session-act-success-rate-nwk" with operation "create".
     */
    public void markSessionActSuccessRateNwkCreate() throws JNCException {
        markLeafCreate("sessionActSuccessRateNwk");
    }

    /**
     * Marks the leaf "session-act-success-rate-nwk" with operation "delete".
     */
    public void markSessionActSuccessRateNwkDelete() throws JNCException {
        markLeafDelete("sessionActSuccessRateNwk");
    }

    /* Access methods for optional leaf child: "session-act-success-rate-nodal". */

    /**
     * Gets the value for child leaf "session-act-success-rate-nodal".
     * @return The value of the leaf.
     */
    public YangUInt32 getSessionActSuccessRateNodalValue() throws JNCException {
        return (YangUInt32)getValue("session-act-success-rate-nodal");
    }

    /**
     * Sets the value for child leaf "session-act-success-rate-nodal",
     * using instance of generated typedef class.
     * @param sessionActSuccessRateNodalValue The value to set.
     * @param sessionActSuccessRateNodalValue used during instantiation.
     */
    public void setSessionActSuccessRateNodalValue(YangUInt32 sessionActSuccessRateNodalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-act-success-rate-nodal",
            sessionActSuccessRateNodalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "session-act-success-rate-nodal",
     * using Java primitive values.
     * @param sessionActSuccessRateNodalValue used during instantiation.
     */
    public void setSessionActSuccessRateNodalValue(long sessionActSuccessRateNodalValue)
            throws JNCException {
        setSessionActSuccessRateNodalValue(new YangUInt32(sessionActSuccessRateNodalValue));
    }

    /**
     * Sets the value for child leaf "session-act-success-rate-nodal",
     * using a String value.
     * @param sessionActSuccessRateNodalValue used during instantiation.
     */
    public void setSessionActSuccessRateNodalValue(String sessionActSuccessRateNodalValue)
            throws JNCException {
        setSessionActSuccessRateNodalValue(new YangUInt32(sessionActSuccessRateNodalValue));
    }

    /**
     * Unsets the value for child leaf "session-act-success-rate-nodal".
     */
    public void unsetSessionActSuccessRateNodalValue() throws JNCException {
        delete("session-act-success-rate-nodal");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "session-act-success-rate-nodal" leaf will not have a value.
     */
    public void addSessionActSuccessRateNodal() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "session-act-success-rate-nodal",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "session-act-success-rate-nodal" with operation "replace".
     */
    public void markSessionActSuccessRateNodalReplace() throws JNCException {
        markLeafReplace("sessionActSuccessRateNodal");
    }

    /**
     * Marks the leaf "session-act-success-rate-nodal" with operation "merge".
     */
    public void markSessionActSuccessRateNodalMerge() throws JNCException {
        markLeafMerge("sessionActSuccessRateNodal");
    }

    /**
     * Marks the leaf "session-act-success-rate-nodal" with operation "create".
     */
    public void markSessionActSuccessRateNodalCreate() throws JNCException {
        markLeafCreate("sessionActSuccessRateNodal");
    }

    /**
     * Marks the leaf "session-act-success-rate-nodal" with operation "delete".
     */
    public void markSessionActSuccessRateNodalDelete() throws JNCException {
        markLeafDelete("sessionActSuccessRateNodal");
    }

    /* Access methods for optional leaf child: "bearer-act-success-rate-nwk". */

    /**
     * Gets the value for child leaf "bearer-act-success-rate-nwk".
     * @return The value of the leaf.
     */
    public YangUInt32 getBearerActSuccessRateNwkValue() throws JNCException {
        return (YangUInt32)getValue("bearer-act-success-rate-nwk");
    }

    /**
     * Sets the value for child leaf "bearer-act-success-rate-nwk",
     * using instance of generated typedef class.
     * @param bearerActSuccessRateNwkValue The value to set.
     * @param bearerActSuccessRateNwkValue used during instantiation.
     */
    public void setBearerActSuccessRateNwkValue(YangUInt32 bearerActSuccessRateNwkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bearer-act-success-rate-nwk",
            bearerActSuccessRateNwkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bearer-act-success-rate-nwk",
     * using Java primitive values.
     * @param bearerActSuccessRateNwkValue used during instantiation.
     */
    public void setBearerActSuccessRateNwkValue(long bearerActSuccessRateNwkValue)
            throws JNCException {
        setBearerActSuccessRateNwkValue(new YangUInt32(bearerActSuccessRateNwkValue));
    }

    /**
     * Sets the value for child leaf "bearer-act-success-rate-nwk",
     * using a String value.
     * @param bearerActSuccessRateNwkValue used during instantiation.
     */
    public void setBearerActSuccessRateNwkValue(String bearerActSuccessRateNwkValue)
            throws JNCException {
        setBearerActSuccessRateNwkValue(new YangUInt32(bearerActSuccessRateNwkValue));
    }

    /**
     * Unsets the value for child leaf "bearer-act-success-rate-nwk".
     */
    public void unsetBearerActSuccessRateNwkValue() throws JNCException {
        delete("bearer-act-success-rate-nwk");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bearer-act-success-rate-nwk" leaf will not have a value.
     */
    public void addBearerActSuccessRateNwk() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bearer-act-success-rate-nwk",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bearer-act-success-rate-nwk" with operation "replace".
     */
    public void markBearerActSuccessRateNwkReplace() throws JNCException {
        markLeafReplace("bearerActSuccessRateNwk");
    }

    /**
     * Marks the leaf "bearer-act-success-rate-nwk" with operation "merge".
     */
    public void markBearerActSuccessRateNwkMerge() throws JNCException {
        markLeafMerge("bearerActSuccessRateNwk");
    }

    /**
     * Marks the leaf "bearer-act-success-rate-nwk" with operation "create".
     */
    public void markBearerActSuccessRateNwkCreate() throws JNCException {
        markLeafCreate("bearerActSuccessRateNwk");
    }

    /**
     * Marks the leaf "bearer-act-success-rate-nwk" with operation "delete".
     */
    public void markBearerActSuccessRateNwkDelete() throws JNCException {
        markLeafDelete("bearerActSuccessRateNwk");
    }

    /* Access methods for optional leaf child: "bearer-act-success-rate-nodal". */

    /**
     * Gets the value for child leaf "bearer-act-success-rate-nodal".
     * @return The value of the leaf.
     */
    public YangUInt32 getBearerActSuccessRateNodalValue() throws JNCException {
        return (YangUInt32)getValue("bearer-act-success-rate-nodal");
    }

    /**
     * Sets the value for child leaf "bearer-act-success-rate-nodal",
     * using instance of generated typedef class.
     * @param bearerActSuccessRateNodalValue The value to set.
     * @param bearerActSuccessRateNodalValue used during instantiation.
     */
    public void setBearerActSuccessRateNodalValue(YangUInt32 bearerActSuccessRateNodalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bearer-act-success-rate-nodal",
            bearerActSuccessRateNodalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bearer-act-success-rate-nodal",
     * using Java primitive values.
     * @param bearerActSuccessRateNodalValue used during instantiation.
     */
    public void setBearerActSuccessRateNodalValue(long bearerActSuccessRateNodalValue)
            throws JNCException {
        setBearerActSuccessRateNodalValue(new YangUInt32(bearerActSuccessRateNodalValue));
    }

    /**
     * Sets the value for child leaf "bearer-act-success-rate-nodal",
     * using a String value.
     * @param bearerActSuccessRateNodalValue used during instantiation.
     */
    public void setBearerActSuccessRateNodalValue(String bearerActSuccessRateNodalValue)
            throws JNCException {
        setBearerActSuccessRateNodalValue(new YangUInt32(bearerActSuccessRateNodalValue));
    }

    /**
     * Unsets the value for child leaf "bearer-act-success-rate-nodal".
     */
    public void unsetBearerActSuccessRateNodalValue() throws JNCException {
        delete("bearer-act-success-rate-nodal");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bearer-act-success-rate-nodal" leaf will not have a value.
     */
    public void addBearerActSuccessRateNodal() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bearer-act-success-rate-nodal",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bearer-act-success-rate-nodal" with operation "replace".
     */
    public void markBearerActSuccessRateNodalReplace() throws JNCException {
        markLeafReplace("bearerActSuccessRateNodal");
    }

    /**
     * Marks the leaf "bearer-act-success-rate-nodal" with operation "merge".
     */
    public void markBearerActSuccessRateNodalMerge() throws JNCException {
        markLeafMerge("bearerActSuccessRateNodal");
    }

    /**
     * Marks the leaf "bearer-act-success-rate-nodal" with operation "create".
     */
    public void markBearerActSuccessRateNodalCreate() throws JNCException {
        markLeafCreate("bearerActSuccessRateNodal");
    }

    /**
     * Marks the leaf "bearer-act-success-rate-nodal" with operation "delete".
     */
    public void markBearerActSuccessRateNodalDelete() throws JNCException {
        markLeafDelete("bearerActSuccessRateNodal");
    }

    /* Access methods for optional leaf child: "tau-success-rate-nwk". */

    /**
     * Gets the value for child leaf "tau-success-rate-nwk".
     * @return The value of the leaf.
     */
    public YangUInt32 getTauSuccessRateNwkValue() throws JNCException {
        return (YangUInt32)getValue("tau-success-rate-nwk");
    }

    /**
     * Sets the value for child leaf "tau-success-rate-nwk",
     * using instance of generated typedef class.
     * @param tauSuccessRateNwkValue The value to set.
     * @param tauSuccessRateNwkValue used during instantiation.
     */
    public void setTauSuccessRateNwkValue(YangUInt32 tauSuccessRateNwkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tau-success-rate-nwk",
            tauSuccessRateNwkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tau-success-rate-nwk",
     * using Java primitive values.
     * @param tauSuccessRateNwkValue used during instantiation.
     */
    public void setTauSuccessRateNwkValue(long tauSuccessRateNwkValue)
            throws JNCException {
        setTauSuccessRateNwkValue(new YangUInt32(tauSuccessRateNwkValue));
    }

    /**
     * Sets the value for child leaf "tau-success-rate-nwk",
     * using a String value.
     * @param tauSuccessRateNwkValue used during instantiation.
     */
    public void setTauSuccessRateNwkValue(String tauSuccessRateNwkValue)
            throws JNCException {
        setTauSuccessRateNwkValue(new YangUInt32(tauSuccessRateNwkValue));
    }

    /**
     * Unsets the value for child leaf "tau-success-rate-nwk".
     */
    public void unsetTauSuccessRateNwkValue() throws JNCException {
        delete("tau-success-rate-nwk");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tau-success-rate-nwk" leaf will not have a value.
     */
    public void addTauSuccessRateNwk() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tau-success-rate-nwk",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tau-success-rate-nwk" with operation "replace".
     */
    public void markTauSuccessRateNwkReplace() throws JNCException {
        markLeafReplace("tauSuccessRateNwk");
    }

    /**
     * Marks the leaf "tau-success-rate-nwk" with operation "merge".
     */
    public void markTauSuccessRateNwkMerge() throws JNCException {
        markLeafMerge("tauSuccessRateNwk");
    }

    /**
     * Marks the leaf "tau-success-rate-nwk" with operation "create".
     */
    public void markTauSuccessRateNwkCreate() throws JNCException {
        markLeafCreate("tauSuccessRateNwk");
    }

    /**
     * Marks the leaf "tau-success-rate-nwk" with operation "delete".
     */
    public void markTauSuccessRateNwkDelete() throws JNCException {
        markLeafDelete("tauSuccessRateNwk");
    }

    /* Access methods for optional leaf child: "itau-success-rate-nwk". */

    /**
     * Gets the value for child leaf "itau-success-rate-nwk".
     * @return The value of the leaf.
     */
    public YangUInt32 getItauSuccessRateNwkValue() throws JNCException {
        return (YangUInt32)getValue("itau-success-rate-nwk");
    }

    /**
     * Sets the value for child leaf "itau-success-rate-nwk",
     * using instance of generated typedef class.
     * @param itauSuccessRateNwkValue The value to set.
     * @param itauSuccessRateNwkValue used during instantiation.
     */
    public void setItauSuccessRateNwkValue(YangUInt32 itauSuccessRateNwkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "itau-success-rate-nwk",
            itauSuccessRateNwkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "itau-success-rate-nwk",
     * using Java primitive values.
     * @param itauSuccessRateNwkValue used during instantiation.
     */
    public void setItauSuccessRateNwkValue(long itauSuccessRateNwkValue)
            throws JNCException {
        setItauSuccessRateNwkValue(new YangUInt32(itauSuccessRateNwkValue));
    }

    /**
     * Sets the value for child leaf "itau-success-rate-nwk",
     * using a String value.
     * @param itauSuccessRateNwkValue used during instantiation.
     */
    public void setItauSuccessRateNwkValue(String itauSuccessRateNwkValue)
            throws JNCException {
        setItauSuccessRateNwkValue(new YangUInt32(itauSuccessRateNwkValue));
    }

    /**
     * Unsets the value for child leaf "itau-success-rate-nwk".
     */
    public void unsetItauSuccessRateNwkValue() throws JNCException {
        delete("itau-success-rate-nwk");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "itau-success-rate-nwk" leaf will not have a value.
     */
    public void addItauSuccessRateNwk() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "itau-success-rate-nwk",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "itau-success-rate-nwk" with operation "replace".
     */
    public void markItauSuccessRateNwkReplace() throws JNCException {
        markLeafReplace("itauSuccessRateNwk");
    }

    /**
     * Marks the leaf "itau-success-rate-nwk" with operation "merge".
     */
    public void markItauSuccessRateNwkMerge() throws JNCException {
        markLeafMerge("itauSuccessRateNwk");
    }

    /**
     * Marks the leaf "itau-success-rate-nwk" with operation "create".
     */
    public void markItauSuccessRateNwkCreate() throws JNCException {
        markLeafCreate("itauSuccessRateNwk");
    }

    /**
     * Marks the leaf "itau-success-rate-nwk" with operation "delete".
     */
    public void markItauSuccessRateNwkDelete() throws JNCException {
        markLeafDelete("itauSuccessRateNwk");
    }

    /* Access methods for optional leaf child: "paging-success-rate-nwk". */

    /**
     * Gets the value for child leaf "paging-success-rate-nwk".
     * @return The value of the leaf.
     */
    public YangUInt32 getPagingSuccessRateNwkValue() throws JNCException {
        return (YangUInt32)getValue("paging-success-rate-nwk");
    }

    /**
     * Sets the value for child leaf "paging-success-rate-nwk",
     * using instance of generated typedef class.
     * @param pagingSuccessRateNwkValue The value to set.
     * @param pagingSuccessRateNwkValue used during instantiation.
     */
    public void setPagingSuccessRateNwkValue(YangUInt32 pagingSuccessRateNwkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-success-rate-nwk",
            pagingSuccessRateNwkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "paging-success-rate-nwk",
     * using Java primitive values.
     * @param pagingSuccessRateNwkValue used during instantiation.
     */
    public void setPagingSuccessRateNwkValue(long pagingSuccessRateNwkValue)
            throws JNCException {
        setPagingSuccessRateNwkValue(new YangUInt32(pagingSuccessRateNwkValue));
    }

    /**
     * Sets the value for child leaf "paging-success-rate-nwk",
     * using a String value.
     * @param pagingSuccessRateNwkValue used during instantiation.
     */
    public void setPagingSuccessRateNwkValue(String pagingSuccessRateNwkValue)
            throws JNCException {
        setPagingSuccessRateNwkValue(new YangUInt32(pagingSuccessRateNwkValue));
    }

    /**
     * Unsets the value for child leaf "paging-success-rate-nwk".
     */
    public void unsetPagingSuccessRateNwkValue() throws JNCException {
        delete("paging-success-rate-nwk");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "paging-success-rate-nwk" leaf will not have a value.
     */
    public void addPagingSuccessRateNwk() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-success-rate-nwk",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "paging-success-rate-nwk" with operation "replace".
     */
    public void markPagingSuccessRateNwkReplace() throws JNCException {
        markLeafReplace("pagingSuccessRateNwk");
    }

    /**
     * Marks the leaf "paging-success-rate-nwk" with operation "merge".
     */
    public void markPagingSuccessRateNwkMerge() throws JNCException {
        markLeafMerge("pagingSuccessRateNwk");
    }

    /**
     * Marks the leaf "paging-success-rate-nwk" with operation "create".
     */
    public void markPagingSuccessRateNwkCreate() throws JNCException {
        markLeafCreate("pagingSuccessRateNwk");
    }

    /**
     * Marks the leaf "paging-success-rate-nwk" with operation "delete".
     */
    public void markPagingSuccessRateNwkDelete() throws JNCException {
        markLeafDelete("pagingSuccessRateNwk");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
