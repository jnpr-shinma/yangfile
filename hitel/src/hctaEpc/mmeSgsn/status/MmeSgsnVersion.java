/* 
 * @(#)MmeSgsnVersion.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.status;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/status/mme-sgsn-version"
 * <p>
 * See line 137 in
 * epcCmnResmonCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeSgsnVersion extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeSgsnVersion object.
     */
    public MmeSgsnVersion() {
        super(Epc.NAMESPACE, "mme-sgsn-version");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeSgsnVersion clone() {
        return (MmeSgsnVersion)cloneContent(new MmeSgsnVersion());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeSgsnVersion cloneShallow() {
        return (MmeSgsnVersion)cloneShallowContent(new MmeSgsnVersion());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "location",
            "service",
            "unit-id",
            "current-time",
            "uptime",
            "version",
        };
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "unit-id". */

    /**
     * Gets the value for child leaf "unit-id".
     * @return The value of the leaf.
     */
    public YangString getUnitIdValue() throws JNCException {
        return (YangString)getValue("unit-id");
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using instance of generated typedef class.
     * @param unitIdValue The value to set.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(YangString unitIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-id",
            unitIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using a String value.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(String unitIdValue) throws JNCException {
        setUnitIdValue(new YangString(unitIdValue));
    }

    /**
     * Unsets the value for child leaf "unit-id".
     */
    public void unsetUnitIdValue() throws JNCException {
        delete("unit-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-id" leaf will not have a value.
     */
    public void addUnitId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unit-id" with operation "replace".
     */
    public void markUnitIdReplace() throws JNCException {
        markLeafReplace("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "merge".
     */
    public void markUnitIdMerge() throws JNCException {
        markLeafMerge("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "create".
     */
    public void markUnitIdCreate() throws JNCException {
        markLeafCreate("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "delete".
     */
    public void markUnitIdDelete() throws JNCException {
        markLeafDelete("unitId");
    }

    /* Access methods for optional leaf child: "current-time". */

    /**
     * Gets the value for child leaf "current-time".
     * @return The value of the leaf.
     */
    public YangString getCurrentTimeValue() throws JNCException {
        return (YangString)getValue("current-time");
    }

    /**
     * Sets the value for child leaf "current-time",
     * using instance of generated typedef class.
     * @param currentTimeValue The value to set.
     * @param currentTimeValue used during instantiation.
     */
    public void setCurrentTimeValue(YangString currentTimeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-time",
            currentTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-time",
     * using a String value.
     * @param currentTimeValue used during instantiation.
     */
    public void setCurrentTimeValue(String currentTimeValue)
            throws JNCException {
        setCurrentTimeValue(new YangString(currentTimeValue));
    }

    /**
     * Unsets the value for child leaf "current-time".
     */
    public void unsetCurrentTimeValue() throws JNCException {
        delete("current-time");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-time" leaf will not have a value.
     */
    public void addCurrentTime() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-time",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-time" with operation "replace".
     */
    public void markCurrentTimeReplace() throws JNCException {
        markLeafReplace("currentTime");
    }

    /**
     * Marks the leaf "current-time" with operation "merge".
     */
    public void markCurrentTimeMerge() throws JNCException {
        markLeafMerge("currentTime");
    }

    /**
     * Marks the leaf "current-time" with operation "create".
     */
    public void markCurrentTimeCreate() throws JNCException {
        markLeafCreate("currentTime");
    }

    /**
     * Marks the leaf "current-time" with operation "delete".
     */
    public void markCurrentTimeDelete() throws JNCException {
        markLeafDelete("currentTime");
    }

    /* Access methods for optional leaf child: "uptime". */

    /**
     * Gets the value for child leaf "uptime".
     * @return The value of the leaf.
     */
    public YangString getUptimeValue() throws JNCException {
        return (YangString)getValue("uptime");
    }

    /**
     * Sets the value for child leaf "uptime",
     * using instance of generated typedef class.
     * @param uptimeValue The value to set.
     * @param uptimeValue used during instantiation.
     */
    public void setUptimeValue(YangString uptimeValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "uptime",
            uptimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uptime",
     * using a String value.
     * @param uptimeValue used during instantiation.
     */
    public void setUptimeValue(String uptimeValue) throws JNCException {
        setUptimeValue(new YangString(uptimeValue));
    }

    /**
     * Unsets the value for child leaf "uptime".
     */
    public void unsetUptimeValue() throws JNCException {
        delete("uptime");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uptime" leaf will not have a value.
     */
    public void addUptime() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "uptime",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "uptime" with operation "replace".
     */
    public void markUptimeReplace() throws JNCException {
        markLeafReplace("uptime");
    }

    /**
     * Marks the leaf "uptime" with operation "merge".
     */
    public void markUptimeMerge() throws JNCException {
        markLeafMerge("uptime");
    }

    /**
     * Marks the leaf "uptime" with operation "create".
     */
    public void markUptimeCreate() throws JNCException {
        markLeafCreate("uptime");
    }

    /**
     * Marks the leaf "uptime" with operation "delete".
     */
    public void markUptimeDelete() throws JNCException {
        markLeafDelete("uptime");
    }

    /* Access methods for optional leaf child: "version". */

    /**
     * Gets the value for child leaf "version".
     * @return The value of the leaf.
     */
    public YangString getVersionValue() throws JNCException {
        return (YangString)getValue("version");
    }

    /**
     * Sets the value for child leaf "version",
     * using instance of generated typedef class.
     * @param versionValue The value to set.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(YangString versionValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            versionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "version",
     * using a String value.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(String versionValue) throws JNCException {
        setVersionValue(new YangString(versionValue));
    }

    /**
     * Unsets the value for child leaf "version".
     */
    public void unsetVersionValue() throws JNCException {
        delete("version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "version" leaf will not have a value.
     */
    public void addVersion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "version" with operation "replace".
     */
    public void markVersionReplace() throws JNCException {
        markLeafReplace("version");
    }

    /**
     * Marks the leaf "version" with operation "merge".
     */
    public void markVersionMerge() throws JNCException {
        markLeafMerge("version");
    }

    /**
     * Marks the leaf "version" with operation "create".
     */
    public void markVersionCreate() throws JNCException {
        markLeafCreate("version");
    }

    /**
     * Marks the leaf "version" with operation "delete".
     */
    public void markVersionDelete() throws JNCException {
        markLeafDelete("version");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
