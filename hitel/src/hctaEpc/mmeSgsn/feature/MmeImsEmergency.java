/* 
 * @(#)MmeImsEmergency.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.feature;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/feature/mme-ims-emergency"
 * <p>
 * See line 463 in
 * featuresConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeImsEmergency extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeImsEmergency object.
     */
    public MmeImsEmergency() {
        super(Epc.NAMESPACE, "mme-ims-emergency");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeImsEmergency clone() {
        return (MmeImsEmergency)cloneContent(new MmeImsEmergency());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeImsEmergency cloneShallow() {
        return (MmeImsEmergency)cloneShallowContent(new MmeImsEmergency());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "emg-user-option",
            "apn-network-id",
            "apn-operator-id",
            "qci-default-bearer",
            "arp-priority-default-bearer",
            "apn-ul-ambr",
            "apn-dl-ambr",
            "pgw-hostname",
            "pdn-type",
            "pgw-ip-address1",
            "pgw-ip-address2",
            "pgw-protocol-type",
            "imei-check-during-emg-attach",
            "skip-authentication",
            "emg-mobile-reachable-timer",
            "deactivate-emg-pdn-after-srvcc",
        };
    }

    /* Access methods for optional leaf child: "emg-user-option". */

    /**
     * Gets the value for child leaf "emg-user-option".
     * @return The value of the leaf.
     */
    public YangEnumeration getEmgUserOptionValue() throws JNCException {
        YangEnumeration emgUserOption = (YangEnumeration)getValue("emg-user-option");
        if (emgUserOption == null) {
            emgUserOption = new YangEnumeration("all-ues", new String[] {  // default
                "valid-ues-only",
                "only-authenticated-ues",
                "imsi-only-ues",
                "all-ues",
            });
        }
        return emgUserOption;
    }

    /**
     * Sets the value for child leaf "emg-user-option",
     * using instance of generated typedef class.
     * @param emgUserOptionValue The value to set.
     * @param emgUserOptionValue used during instantiation.
     */
    public void setEmgUserOptionValue(YangEnumeration emgUserOptionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "emg-user-option",
            emgUserOptionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "emg-user-option",
     * using a String value.
     * @param emgUserOptionValue used during instantiation.
     */
    public void setEmgUserOptionValue(String emgUserOptionValue)
            throws JNCException {
        setEmgUserOptionValue(new YangEnumeration(emgUserOptionValue, new String[] {
             "valid-ues-only",
             "only-authenticated-ues",
             "imsi-only-ues",
             "all-ues",
        }));
    }

    /**
     * Unsets the value for child leaf "emg-user-option".
     */
    public void unsetEmgUserOptionValue() throws JNCException {
        delete("emg-user-option");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "emg-user-option" leaf will not have a value.
     */
    public void addEmgUserOption() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "emg-user-option",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "emg-user-option" with operation "replace".
     */
    public void markEmgUserOptionReplace() throws JNCException {
        markLeafReplace("emgUserOption");
    }

    /**
     * Marks the leaf "emg-user-option" with operation "merge".
     */
    public void markEmgUserOptionMerge() throws JNCException {
        markLeafMerge("emgUserOption");
    }

    /**
     * Marks the leaf "emg-user-option" with operation "create".
     */
    public void markEmgUserOptionCreate() throws JNCException {
        markLeafCreate("emgUserOption");
    }

    /**
     * Marks the leaf "emg-user-option" with operation "delete".
     */
    public void markEmgUserOptionDelete() throws JNCException {
        markLeafDelete("emgUserOption");
    }

    /* Access methods for optional leaf child: "apn-network-id". */

    /**
     * Gets the value for child leaf "apn-network-id".
     * @return The value of the leaf.
     */
    public YangString getApnNetworkIdValue() throws JNCException {
        YangString apnNetworkId = (YangString)getValue("apn-network-id");
        if (apnNetworkId == null) {
            apnNetworkId = new YangString("emergency");  // default
        }
        return apnNetworkId;
    }

    /**
     * Sets the value for child leaf "apn-network-id",
     * using instance of generated typedef class.
     * @param apnNetworkIdValue The value to set.
     * @param apnNetworkIdValue used during instantiation.
     */
    public void setApnNetworkIdValue(YangString apnNetworkIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-network-id",
            apnNetworkIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-network-id",
     * using a String value.
     * @param apnNetworkIdValue used during instantiation.
     */
    public void setApnNetworkIdValue(String apnNetworkIdValue)
            throws JNCException {
        setApnNetworkIdValue(new YangString(apnNetworkIdValue));
    }

    /**
     * Unsets the value for child leaf "apn-network-id".
     */
    public void unsetApnNetworkIdValue() throws JNCException {
        delete("apn-network-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-network-id" leaf will not have a value.
     */
    public void addApnNetworkId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-network-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-network-id" with operation "replace".
     */
    public void markApnNetworkIdReplace() throws JNCException {
        markLeafReplace("apnNetworkId");
    }

    /**
     * Marks the leaf "apn-network-id" with operation "merge".
     */
    public void markApnNetworkIdMerge() throws JNCException {
        markLeafMerge("apnNetworkId");
    }

    /**
     * Marks the leaf "apn-network-id" with operation "create".
     */
    public void markApnNetworkIdCreate() throws JNCException {
        markLeafCreate("apnNetworkId");
    }

    /**
     * Marks the leaf "apn-network-id" with operation "delete".
     */
    public void markApnNetworkIdDelete() throws JNCException {
        markLeafDelete("apnNetworkId");
    }

    /* Access methods for optional leaf child: "apn-operator-id". */

    /**
     * Gets the value for child leaf "apn-operator-id".
     * @return The value of the leaf.
     */
    public YangString getApnOperatorIdValue() throws JNCException {
        YangString apnOperatorId = (YangString)getValue("apn-operator-id");
        if (apnOperatorId == null) {
            apnOperatorId = new YangString("use-serving-plmn");  // default
        }
        return apnOperatorId;
    }

    /**
     * Sets the value for child leaf "apn-operator-id",
     * using instance of generated typedef class.
     * @param apnOperatorIdValue The value to set.
     * @param apnOperatorIdValue used during instantiation.
     */
    public void setApnOperatorIdValue(YangString apnOperatorIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-operator-id",
            apnOperatorIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-operator-id",
     * using a String value.
     * @param apnOperatorIdValue used during instantiation.
     */
    public void setApnOperatorIdValue(String apnOperatorIdValue)
            throws JNCException {
        setApnOperatorIdValue(new YangString(apnOperatorIdValue));
    }

    /**
     * Unsets the value for child leaf "apn-operator-id".
     */
    public void unsetApnOperatorIdValue() throws JNCException {
        delete("apn-operator-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-operator-id" leaf will not have a value.
     */
    public void addApnOperatorId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-operator-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-operator-id" with operation "replace".
     */
    public void markApnOperatorIdReplace() throws JNCException {
        markLeafReplace("apnOperatorId");
    }

    /**
     * Marks the leaf "apn-operator-id" with operation "merge".
     */
    public void markApnOperatorIdMerge() throws JNCException {
        markLeafMerge("apnOperatorId");
    }

    /**
     * Marks the leaf "apn-operator-id" with operation "create".
     */
    public void markApnOperatorIdCreate() throws JNCException {
        markLeafCreate("apnOperatorId");
    }

    /**
     * Marks the leaf "apn-operator-id" with operation "delete".
     */
    public void markApnOperatorIdDelete() throws JNCException {
        markLeafDelete("apnOperatorId");
    }

    /* Access methods for optional leaf child: "qci-default-bearer". */

    /**
     * Gets the value for child leaf "qci-default-bearer".
     * @return The value of the leaf.
     */
    public YangUInt8 getQciDefaultBearerValue() throws JNCException {
        YangUInt8 qciDefaultBearer = (YangUInt8)getValue("qci-default-bearer");
        if (qciDefaultBearer == null) {
            qciDefaultBearer = new YangUInt8("5");  // default
        }
        return qciDefaultBearer;
    }

    /**
     * Sets the value for child leaf "qci-default-bearer",
     * using instance of generated typedef class.
     * @param qciDefaultBearerValue The value to set.
     * @param qciDefaultBearerValue used during instantiation.
     */
    public void setQciDefaultBearerValue(YangUInt8 qciDefaultBearerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "qci-default-bearer",
            qciDefaultBearerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "qci-default-bearer",
     * using Java primitive values.
     * @param qciDefaultBearerValue used during instantiation.
     */
    public void setQciDefaultBearerValue(short qciDefaultBearerValue)
            throws JNCException {
        setQciDefaultBearerValue(new YangUInt8(qciDefaultBearerValue));
    }

    /**
     * Sets the value for child leaf "qci-default-bearer",
     * using a String value.
     * @param qciDefaultBearerValue used during instantiation.
     */
    public void setQciDefaultBearerValue(String qciDefaultBearerValue)
            throws JNCException {
        setQciDefaultBearerValue(new YangUInt8(qciDefaultBearerValue));
    }

    /**
     * Unsets the value for child leaf "qci-default-bearer".
     */
    public void unsetQciDefaultBearerValue() throws JNCException {
        delete("qci-default-bearer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "qci-default-bearer" leaf will not have a value.
     */
    public void addQciDefaultBearer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "qci-default-bearer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "qci-default-bearer" with operation "replace".
     */
    public void markQciDefaultBearerReplace() throws JNCException {
        markLeafReplace("qciDefaultBearer");
    }

    /**
     * Marks the leaf "qci-default-bearer" with operation "merge".
     */
    public void markQciDefaultBearerMerge() throws JNCException {
        markLeafMerge("qciDefaultBearer");
    }

    /**
     * Marks the leaf "qci-default-bearer" with operation "create".
     */
    public void markQciDefaultBearerCreate() throws JNCException {
        markLeafCreate("qciDefaultBearer");
    }

    /**
     * Marks the leaf "qci-default-bearer" with operation "delete".
     */
    public void markQciDefaultBearerDelete() throws JNCException {
        markLeafDelete("qciDefaultBearer");
    }

    /* Access methods for optional leaf child: "arp-priority-default-bearer". */

    /**
     * Gets the value for child leaf "arp-priority-default-bearer".
     * @return The value of the leaf.
     */
    public YangUInt8 getArpPriorityDefaultBearerValue() throws JNCException {
        YangUInt8 arpPriorityDefaultBearer = (YangUInt8)getValue("arp-priority-default-bearer");
        if (arpPriorityDefaultBearer == null) {
            arpPriorityDefaultBearer = new YangUInt8("1");  // default
        }
        return arpPriorityDefaultBearer;
    }

    /**
     * Sets the value for child leaf "arp-priority-default-bearer",
     * using instance of generated typedef class.
     * @param arpPriorityDefaultBearerValue The value to set.
     * @param arpPriorityDefaultBearerValue used during instantiation.
     */
    public void setArpPriorityDefaultBearerValue(YangUInt8 arpPriorityDefaultBearerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "arp-priority-default-bearer",
            arpPriorityDefaultBearerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "arp-priority-default-bearer",
     * using Java primitive values.
     * @param arpPriorityDefaultBearerValue used during instantiation.
     */
    public void setArpPriorityDefaultBearerValue(short arpPriorityDefaultBearerValue)
            throws JNCException {
        setArpPriorityDefaultBearerValue(new YangUInt8(arpPriorityDefaultBearerValue));
    }

    /**
     * Sets the value for child leaf "arp-priority-default-bearer",
     * using a String value.
     * @param arpPriorityDefaultBearerValue used during instantiation.
     */
    public void setArpPriorityDefaultBearerValue(String arpPriorityDefaultBearerValue)
            throws JNCException {
        setArpPriorityDefaultBearerValue(new YangUInt8(arpPriorityDefaultBearerValue));
    }

    /**
     * Unsets the value for child leaf "arp-priority-default-bearer".
     */
    public void unsetArpPriorityDefaultBearerValue() throws JNCException {
        delete("arp-priority-default-bearer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "arp-priority-default-bearer" leaf will not have a value.
     */
    public void addArpPriorityDefaultBearer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "arp-priority-default-bearer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "arp-priority-default-bearer" with operation "replace".
     */
    public void markArpPriorityDefaultBearerReplace() throws JNCException {
        markLeafReplace("arpPriorityDefaultBearer");
    }

    /**
     * Marks the leaf "arp-priority-default-bearer" with operation "merge".
     */
    public void markArpPriorityDefaultBearerMerge() throws JNCException {
        markLeafMerge("arpPriorityDefaultBearer");
    }

    /**
     * Marks the leaf "arp-priority-default-bearer" with operation "create".
     */
    public void markArpPriorityDefaultBearerCreate() throws JNCException {
        markLeafCreate("arpPriorityDefaultBearer");
    }

    /**
     * Marks the leaf "arp-priority-default-bearer" with operation "delete".
     */
    public void markArpPriorityDefaultBearerDelete() throws JNCException {
        markLeafDelete("arpPriorityDefaultBearer");
    }

    /* Access methods for optional leaf child: "apn-ul-ambr". */

    /**
     * Gets the value for child leaf "apn-ul-ambr".
     * @return The value of the leaf.
     */
    public YangUInt32 getApnUlAmbrValue() throws JNCException {
        YangUInt32 apnUlAmbr = (YangUInt32)getValue("apn-ul-ambr");
        if (apnUlAmbr == null) {
            apnUlAmbr = new YangUInt32("32");  // default
        }
        return apnUlAmbr;
    }

    /**
     * Sets the value for child leaf "apn-ul-ambr",
     * using instance of generated typedef class.
     * @param apnUlAmbrValue The value to set.
     * @param apnUlAmbrValue used during instantiation.
     */
    public void setApnUlAmbrValue(YangUInt32 apnUlAmbrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-ul-ambr",
            apnUlAmbrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-ul-ambr",
     * using Java primitive values.
     * @param apnUlAmbrValue used during instantiation.
     */
    public void setApnUlAmbrValue(long apnUlAmbrValue) throws JNCException {
        setApnUlAmbrValue(new YangUInt32(apnUlAmbrValue));
    }

    /**
     * Sets the value for child leaf "apn-ul-ambr",
     * using a String value.
     * @param apnUlAmbrValue used during instantiation.
     */
    public void setApnUlAmbrValue(String apnUlAmbrValue) throws JNCException {
        setApnUlAmbrValue(new YangUInt32(apnUlAmbrValue));
    }

    /**
     * Unsets the value for child leaf "apn-ul-ambr".
     */
    public void unsetApnUlAmbrValue() throws JNCException {
        delete("apn-ul-ambr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-ul-ambr" leaf will not have a value.
     */
    public void addApnUlAmbr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-ul-ambr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-ul-ambr" with operation "replace".
     */
    public void markApnUlAmbrReplace() throws JNCException {
        markLeafReplace("apnUlAmbr");
    }

    /**
     * Marks the leaf "apn-ul-ambr" with operation "merge".
     */
    public void markApnUlAmbrMerge() throws JNCException {
        markLeafMerge("apnUlAmbr");
    }

    /**
     * Marks the leaf "apn-ul-ambr" with operation "create".
     */
    public void markApnUlAmbrCreate() throws JNCException {
        markLeafCreate("apnUlAmbr");
    }

    /**
     * Marks the leaf "apn-ul-ambr" with operation "delete".
     */
    public void markApnUlAmbrDelete() throws JNCException {
        markLeafDelete("apnUlAmbr");
    }

    /* Access methods for optional leaf child: "apn-dl-ambr". */

    /**
     * Gets the value for child leaf "apn-dl-ambr".
     * @return The value of the leaf.
     */
    public YangUInt32 getApnDlAmbrValue() throws JNCException {
        YangUInt32 apnDlAmbr = (YangUInt32)getValue("apn-dl-ambr");
        if (apnDlAmbr == null) {
            apnDlAmbr = new YangUInt32("32");  // default
        }
        return apnDlAmbr;
    }

    /**
     * Sets the value for child leaf "apn-dl-ambr",
     * using instance of generated typedef class.
     * @param apnDlAmbrValue The value to set.
     * @param apnDlAmbrValue used during instantiation.
     */
    public void setApnDlAmbrValue(YangUInt32 apnDlAmbrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-dl-ambr",
            apnDlAmbrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "apn-dl-ambr",
     * using Java primitive values.
     * @param apnDlAmbrValue used during instantiation.
     */
    public void setApnDlAmbrValue(long apnDlAmbrValue) throws JNCException {
        setApnDlAmbrValue(new YangUInt32(apnDlAmbrValue));
    }

    /**
     * Sets the value for child leaf "apn-dl-ambr",
     * using a String value.
     * @param apnDlAmbrValue used during instantiation.
     */
    public void setApnDlAmbrValue(String apnDlAmbrValue) throws JNCException {
        setApnDlAmbrValue(new YangUInt32(apnDlAmbrValue));
    }

    /**
     * Unsets the value for child leaf "apn-dl-ambr".
     */
    public void unsetApnDlAmbrValue() throws JNCException {
        delete("apn-dl-ambr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "apn-dl-ambr" leaf will not have a value.
     */
    public void addApnDlAmbr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "apn-dl-ambr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "apn-dl-ambr" with operation "replace".
     */
    public void markApnDlAmbrReplace() throws JNCException {
        markLeafReplace("apnDlAmbr");
    }

    /**
     * Marks the leaf "apn-dl-ambr" with operation "merge".
     */
    public void markApnDlAmbrMerge() throws JNCException {
        markLeafMerge("apnDlAmbr");
    }

    /**
     * Marks the leaf "apn-dl-ambr" with operation "create".
     */
    public void markApnDlAmbrCreate() throws JNCException {
        markLeafCreate("apnDlAmbr");
    }

    /**
     * Marks the leaf "apn-dl-ambr" with operation "delete".
     */
    public void markApnDlAmbrDelete() throws JNCException {
        markLeafDelete("apnDlAmbr");
    }

    /* Access methods for optional leaf child: "pgw-hostname". */

    /**
     * Gets the value for child leaf "pgw-hostname".
     * @return The value of the leaf.
     */
    public YangString getPgwHostnameValue() throws JNCException {
        YangString pgwHostname = (YangString)getValue("pgw-hostname");
        if (pgwHostname == null) {
            pgwHostname = new YangString("none");  // default
        }
        return pgwHostname;
    }

    /**
     * Sets the value for child leaf "pgw-hostname",
     * using instance of generated typedef class.
     * @param pgwHostnameValue The value to set.
     * @param pgwHostnameValue used during instantiation.
     */
    public void setPgwHostnameValue(YangString pgwHostnameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-hostname",
            pgwHostnameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pgw-hostname",
     * using a String value.
     * @param pgwHostnameValue used during instantiation.
     */
    public void setPgwHostnameValue(String pgwHostnameValue)
            throws JNCException {
        setPgwHostnameValue(new YangString(pgwHostnameValue));
    }

    /**
     * Unsets the value for child leaf "pgw-hostname".
     */
    public void unsetPgwHostnameValue() throws JNCException {
        delete("pgw-hostname");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pgw-hostname" leaf will not have a value.
     */
    public void addPgwHostname() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-hostname",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pgw-hostname" with operation "replace".
     */
    public void markPgwHostnameReplace() throws JNCException {
        markLeafReplace("pgwHostname");
    }

    /**
     * Marks the leaf "pgw-hostname" with operation "merge".
     */
    public void markPgwHostnameMerge() throws JNCException {
        markLeafMerge("pgwHostname");
    }

    /**
     * Marks the leaf "pgw-hostname" with operation "create".
     */
    public void markPgwHostnameCreate() throws JNCException {
        markLeafCreate("pgwHostname");
    }

    /**
     * Marks the leaf "pgw-hostname" with operation "delete".
     */
    public void markPgwHostnameDelete() throws JNCException {
        markLeafDelete("pgwHostname");
    }

    /* Access methods for optional leaf child: "pdn-type". */

    /**
     * Gets the value for child leaf "pdn-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getPdnTypeValue() throws JNCException {
        YangEnumeration pdnType = (YangEnumeration)getValue("pdn-type");
        if (pdnType == null) {
            pdnType = new YangEnumeration("ipv4", new String[] {  // default
                "ipv4",
                "ipv6",
                "ipv4ipv6",
            });
        }
        return pdnType;
    }

    /**
     * Sets the value for child leaf "pdn-type",
     * using instance of generated typedef class.
     * @param pdnTypeValue The value to set.
     * @param pdnTypeValue used during instantiation.
     */
    public void setPdnTypeValue(YangEnumeration pdnTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdn-type",
            pdnTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pdn-type",
     * using a String value.
     * @param pdnTypeValue used during instantiation.
     */
    public void setPdnTypeValue(String pdnTypeValue) throws JNCException {
        setPdnTypeValue(new YangEnumeration(pdnTypeValue, new String[] {
             "ipv4",
             "ipv6",
             "ipv4ipv6",
        }));
    }

    /**
     * Unsets the value for child leaf "pdn-type".
     */
    public void unsetPdnTypeValue() throws JNCException {
        delete("pdn-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pdn-type" leaf will not have a value.
     */
    public void addPdnType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdn-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pdn-type" with operation "replace".
     */
    public void markPdnTypeReplace() throws JNCException {
        markLeafReplace("pdnType");
    }

    /**
     * Marks the leaf "pdn-type" with operation "merge".
     */
    public void markPdnTypeMerge() throws JNCException {
        markLeafMerge("pdnType");
    }

    /**
     * Marks the leaf "pdn-type" with operation "create".
     */
    public void markPdnTypeCreate() throws JNCException {
        markLeafCreate("pdnType");
    }

    /**
     * Marks the leaf "pdn-type" with operation "delete".
     */
    public void markPdnTypeDelete() throws JNCException {
        markLeafDelete("pdnType");
    }

    /* Access methods for optional leaf child: "pgw-ip-address1". */

    /**
     * Gets the value for child leaf "pgw-ip-address1".
     * @return The value of the leaf.
     */
    public IpAddress getPgwIpAddress1Value() throws JNCException {
        IpAddress pgwIpAddress1 = (IpAddress)getValue("pgw-ip-address1");
        if (pgwIpAddress1 == null) {
            pgwIpAddress1 = new IpAddress("0.0.0.0");  // default
        }
        return pgwIpAddress1;
    }

    /**
     * Sets the value for child leaf "pgw-ip-address1",
     * using a JNC type value.
     * @param pgwIpAddress1Value The value to set.
     * @param pgwIpAddress1Value used during instantiation.
     */
    public void setPgwIpAddress1Value(IpAddress pgwIpAddress1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-ip-address1",
            pgwIpAddress1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pgw-ip-address1",
     * using a String value.
     * @param pgwIpAddress1Value used during instantiation.
     */
    public void setPgwIpAddress1Value(String pgwIpAddress1Value)
            throws JNCException {
        setPgwIpAddress1Value(new IpAddress(pgwIpAddress1Value));
    }

    /**
     * Unsets the value for child leaf "pgw-ip-address1".
     */
    public void unsetPgwIpAddress1Value() throws JNCException {
        delete("pgw-ip-address1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pgw-ip-address1" leaf will not have a value.
     */
    public void addPgwIpAddress1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-ip-address1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pgw-ip-address1" with operation "replace".
     */
    public void markPgwIpAddress1Replace() throws JNCException {
        markLeafReplace("pgwIpAddress1");
    }

    /**
     * Marks the leaf "pgw-ip-address1" with operation "merge".
     */
    public void markPgwIpAddress1Merge() throws JNCException {
        markLeafMerge("pgwIpAddress1");
    }

    /**
     * Marks the leaf "pgw-ip-address1" with operation "create".
     */
    public void markPgwIpAddress1Create() throws JNCException {
        markLeafCreate("pgwIpAddress1");
    }

    /**
     * Marks the leaf "pgw-ip-address1" with operation "delete".
     */
    public void markPgwIpAddress1Delete() throws JNCException {
        markLeafDelete("pgwIpAddress1");
    }

    /* Access methods for optional leaf child: "pgw-ip-address2". */

    /**
     * Gets the value for child leaf "pgw-ip-address2".
     * @return The value of the leaf.
     */
    public IpAddress getPgwIpAddress2Value() throws JNCException {
        IpAddress pgwIpAddress2 = (IpAddress)getValue("pgw-ip-address2");
        if (pgwIpAddress2 == null) {
            pgwIpAddress2 = new IpAddress("0.0.0.0");  // default
        }
        return pgwIpAddress2;
    }

    /**
     * Sets the value for child leaf "pgw-ip-address2",
     * using a JNC type value.
     * @param pgwIpAddress2Value The value to set.
     * @param pgwIpAddress2Value used during instantiation.
     */
    public void setPgwIpAddress2Value(IpAddress pgwIpAddress2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-ip-address2",
            pgwIpAddress2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pgw-ip-address2",
     * using a String value.
     * @param pgwIpAddress2Value used during instantiation.
     */
    public void setPgwIpAddress2Value(String pgwIpAddress2Value)
            throws JNCException {
        setPgwIpAddress2Value(new IpAddress(pgwIpAddress2Value));
    }

    /**
     * Unsets the value for child leaf "pgw-ip-address2".
     */
    public void unsetPgwIpAddress2Value() throws JNCException {
        delete("pgw-ip-address2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pgw-ip-address2" leaf will not have a value.
     */
    public void addPgwIpAddress2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-ip-address2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pgw-ip-address2" with operation "replace".
     */
    public void markPgwIpAddress2Replace() throws JNCException {
        markLeafReplace("pgwIpAddress2");
    }

    /**
     * Marks the leaf "pgw-ip-address2" with operation "merge".
     */
    public void markPgwIpAddress2Merge() throws JNCException {
        markLeafMerge("pgwIpAddress2");
    }

    /**
     * Marks the leaf "pgw-ip-address2" with operation "create".
     */
    public void markPgwIpAddress2Create() throws JNCException {
        markLeafCreate("pgwIpAddress2");
    }

    /**
     * Marks the leaf "pgw-ip-address2" with operation "delete".
     */
    public void markPgwIpAddress2Delete() throws JNCException {
        markLeafDelete("pgwIpAddress2");
    }

    /* Access methods for optional leaf child: "pgw-protocol-type". */

    /**
     * Gets the value for child leaf "pgw-protocol-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getPgwProtocolTypeValue() throws JNCException {
        YangEnumeration pgwProtocolType = (YangEnumeration)getValue("pgw-protocol-type");
        if (pgwProtocolType == null) {
            pgwProtocolType = new YangEnumeration("gtp", new String[] {  // default
                "gtp",
                "pmip",
            });
        }
        return pgwProtocolType;
    }

    /**
     * Sets the value for child leaf "pgw-protocol-type",
     * using instance of generated typedef class.
     * @param pgwProtocolTypeValue The value to set.
     * @param pgwProtocolTypeValue used during instantiation.
     */
    public void setPgwProtocolTypeValue(YangEnumeration pgwProtocolTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-protocol-type",
            pgwProtocolTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pgw-protocol-type",
     * using a String value.
     * @param pgwProtocolTypeValue used during instantiation.
     */
    public void setPgwProtocolTypeValue(String pgwProtocolTypeValue)
            throws JNCException {
        setPgwProtocolTypeValue(new YangEnumeration(pgwProtocolTypeValue, new String[] {
             "gtp",
             "pmip",
        }));
    }

    /**
     * Unsets the value for child leaf "pgw-protocol-type".
     */
    public void unsetPgwProtocolTypeValue() throws JNCException {
        delete("pgw-protocol-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pgw-protocol-type" leaf will not have a value.
     */
    public void addPgwProtocolType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-protocol-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pgw-protocol-type" with operation "replace".
     */
    public void markPgwProtocolTypeReplace() throws JNCException {
        markLeafReplace("pgwProtocolType");
    }

    /**
     * Marks the leaf "pgw-protocol-type" with operation "merge".
     */
    public void markPgwProtocolTypeMerge() throws JNCException {
        markLeafMerge("pgwProtocolType");
    }

    /**
     * Marks the leaf "pgw-protocol-type" with operation "create".
     */
    public void markPgwProtocolTypeCreate() throws JNCException {
        markLeafCreate("pgwProtocolType");
    }

    /**
     * Marks the leaf "pgw-protocol-type" with operation "delete".
     */
    public void markPgwProtocolTypeDelete() throws JNCException {
        markLeafDelete("pgwProtocolType");
    }

    /* Access methods for optional leaf child: "imei-check-during-emg-attach". */

    /**
     * Gets the value for child leaf "imei-check-during-emg-attach".
     * @return The value of the leaf.
     */
    public YangEnumeration getImeiCheckDuringEmgAttachValue()
            throws JNCException {
        YangEnumeration imeiCheckDuringEmgAttach = (YangEnumeration)getValue("imei-check-during-emg-attach");
        if (imeiCheckDuringEmgAttach == null) {
            imeiCheckDuringEmgAttach = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return imeiCheckDuringEmgAttach;
    }

    /**
     * Sets the value for child leaf "imei-check-during-emg-attach",
     * using instance of generated typedef class.
     * @param imeiCheckDuringEmgAttachValue The value to set.
     * @param imeiCheckDuringEmgAttachValue used during instantiation.
     */
    public void setImeiCheckDuringEmgAttachValue(YangEnumeration imeiCheckDuringEmgAttachValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imei-check-during-emg-attach",
            imeiCheckDuringEmgAttachValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imei-check-during-emg-attach",
     * using a String value.
     * @param imeiCheckDuringEmgAttachValue used during instantiation.
     */
    public void setImeiCheckDuringEmgAttachValue(String imeiCheckDuringEmgAttachValue)
            throws JNCException {
        setImeiCheckDuringEmgAttachValue(new YangEnumeration(imeiCheckDuringEmgAttachValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "imei-check-during-emg-attach".
     */
    public void unsetImeiCheckDuringEmgAttachValue() throws JNCException {
        delete("imei-check-during-emg-attach");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imei-check-during-emg-attach" leaf will not have a value.
     */
    public void addImeiCheckDuringEmgAttach() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imei-check-during-emg-attach",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "imei-check-during-emg-attach" with operation "replace".
     */
    public void markImeiCheckDuringEmgAttachReplace() throws JNCException {
        markLeafReplace("imeiCheckDuringEmgAttach");
    }

    /**
     * Marks the leaf "imei-check-during-emg-attach" with operation "merge".
     */
    public void markImeiCheckDuringEmgAttachMerge() throws JNCException {
        markLeafMerge("imeiCheckDuringEmgAttach");
    }

    /**
     * Marks the leaf "imei-check-during-emg-attach" with operation "create".
     */
    public void markImeiCheckDuringEmgAttachCreate() throws JNCException {
        markLeafCreate("imeiCheckDuringEmgAttach");
    }

    /**
     * Marks the leaf "imei-check-during-emg-attach" with operation "delete".
     */
    public void markImeiCheckDuringEmgAttachDelete() throws JNCException {
        markLeafDelete("imeiCheckDuringEmgAttach");
    }

    /* Access methods for optional leaf child: "skip-authentication". */

    /**
     * Gets the value for child leaf "skip-authentication".
     * @return The value of the leaf.
     */
    public YangEnumeration getSkipAuthenticationValue() throws JNCException {
        YangEnumeration skipAuthentication = (YangEnumeration)getValue("skip-authentication");
        if (skipAuthentication == null) {
            skipAuthentication = new YangEnumeration("enable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return skipAuthentication;
    }

    /**
     * Sets the value for child leaf "skip-authentication",
     * using instance of generated typedef class.
     * @param skipAuthenticationValue The value to set.
     * @param skipAuthenticationValue used during instantiation.
     */
    public void setSkipAuthenticationValue(YangEnumeration skipAuthenticationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "skip-authentication",
            skipAuthenticationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "skip-authentication",
     * using a String value.
     * @param skipAuthenticationValue used during instantiation.
     */
    public void setSkipAuthenticationValue(String skipAuthenticationValue)
            throws JNCException {
        setSkipAuthenticationValue(new YangEnumeration(skipAuthenticationValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "skip-authentication".
     */
    public void unsetSkipAuthenticationValue() throws JNCException {
        delete("skip-authentication");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "skip-authentication" leaf will not have a value.
     */
    public void addSkipAuthentication() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "skip-authentication",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "skip-authentication" with operation "replace".
     */
    public void markSkipAuthenticationReplace() throws JNCException {
        markLeafReplace("skipAuthentication");
    }

    /**
     * Marks the leaf "skip-authentication" with operation "merge".
     */
    public void markSkipAuthenticationMerge() throws JNCException {
        markLeafMerge("skipAuthentication");
    }

    /**
     * Marks the leaf "skip-authentication" with operation "create".
     */
    public void markSkipAuthenticationCreate() throws JNCException {
        markLeafCreate("skipAuthentication");
    }

    /**
     * Marks the leaf "skip-authentication" with operation "delete".
     */
    public void markSkipAuthenticationDelete() throws JNCException {
        markLeafDelete("skipAuthentication");
    }

    /* Access methods for optional leaf child: "emg-mobile-reachable-timer". */

    /**
     * Gets the value for child leaf "emg-mobile-reachable-timer".
     * @return The value of the leaf.
     */
    public YangString getEmgMobileReachableTimerValue() throws JNCException {
        YangString emgMobileReachableTimer = (YangString)getValue("emg-mobile-reachable-timer");
        if (emgMobileReachableTimer == null) {
            emgMobileReachableTimer = new YangString("t3412plus1");  // default
        }
        return emgMobileReachableTimer;
    }

    /**
     * Sets the value for child leaf "emg-mobile-reachable-timer",
     * using instance of generated typedef class.
     * @param emgMobileReachableTimerValue The value to set.
     * @param emgMobileReachableTimerValue used during instantiation.
     */
    public void setEmgMobileReachableTimerValue(YangString emgMobileReachableTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "emg-mobile-reachable-timer",
            emgMobileReachableTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "emg-mobile-reachable-timer",
     * using a String value.
     * @param emgMobileReachableTimerValue used during instantiation.
     */
    public void setEmgMobileReachableTimerValue(String emgMobileReachableTimerValue)
            throws JNCException {
        setEmgMobileReachableTimerValue(new YangString(emgMobileReachableTimerValue));
    }

    /**
     * Unsets the value for child leaf "emg-mobile-reachable-timer".
     */
    public void unsetEmgMobileReachableTimerValue() throws JNCException {
        delete("emg-mobile-reachable-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "emg-mobile-reachable-timer" leaf will not have a value.
     */
    public void addEmgMobileReachableTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "emg-mobile-reachable-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "emg-mobile-reachable-timer" with operation "replace".
     */
    public void markEmgMobileReachableTimerReplace() throws JNCException {
        markLeafReplace("emgMobileReachableTimer");
    }

    /**
     * Marks the leaf "emg-mobile-reachable-timer" with operation "merge".
     */
    public void markEmgMobileReachableTimerMerge() throws JNCException {
        markLeafMerge("emgMobileReachableTimer");
    }

    /**
     * Marks the leaf "emg-mobile-reachable-timer" with operation "create".
     */
    public void markEmgMobileReachableTimerCreate() throws JNCException {
        markLeafCreate("emgMobileReachableTimer");
    }

    /**
     * Marks the leaf "emg-mobile-reachable-timer" with operation "delete".
     */
    public void markEmgMobileReachableTimerDelete() throws JNCException {
        markLeafDelete("emgMobileReachableTimer");
    }

    /* Access methods for optional leaf child: "deactivate-emg-pdn-after-srvcc". */

    /**
     * Gets the value for child leaf "deactivate-emg-pdn-after-srvcc".
     * @return The value of the leaf.
     */
    public YangEnumeration getDeactivateEmgPdnAfterSrvccValue()
            throws JNCException {
        YangEnumeration deactivateEmgPdnAfterSrvcc = (YangEnumeration)getValue("deactivate-emg-pdn-after-srvcc");
        if (deactivateEmgPdnAfterSrvcc == null) {
            deactivateEmgPdnAfterSrvcc = new YangEnumeration("enable", new String[] {  // default
                "disable",
                "enable",
            });
        }
        return deactivateEmgPdnAfterSrvcc;
    }

    /**
     * Sets the value for child leaf "deactivate-emg-pdn-after-srvcc",
     * using instance of generated typedef class.
     * @param deactivateEmgPdnAfterSrvccValue The value to set.
     * @param deactivateEmgPdnAfterSrvccValue used during instantiation.
     */
    public void setDeactivateEmgPdnAfterSrvccValue(YangEnumeration deactivateEmgPdnAfterSrvccValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "deactivate-emg-pdn-after-srvcc",
            deactivateEmgPdnAfterSrvccValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "deactivate-emg-pdn-after-srvcc",
     * using a String value.
     * @param deactivateEmgPdnAfterSrvccValue used during instantiation.
     */
    public void setDeactivateEmgPdnAfterSrvccValue(String deactivateEmgPdnAfterSrvccValue)
            throws JNCException {
        setDeactivateEmgPdnAfterSrvccValue(new YangEnumeration(deactivateEmgPdnAfterSrvccValue, new String[] {
             "disable",
             "enable",
        }));
    }

    /**
     * Unsets the value for child leaf "deactivate-emg-pdn-after-srvcc".
     */
    public void unsetDeactivateEmgPdnAfterSrvccValue() throws JNCException {
        delete("deactivate-emg-pdn-after-srvcc");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "deactivate-emg-pdn-after-srvcc" leaf will not have a value.
     */
    public void addDeactivateEmgPdnAfterSrvcc() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "deactivate-emg-pdn-after-srvcc",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "deactivate-emg-pdn-after-srvcc" with operation "replace".
     */
    public void markDeactivateEmgPdnAfterSrvccReplace() throws JNCException {
        markLeafReplace("deactivateEmgPdnAfterSrvcc");
    }

    /**
     * Marks the leaf "deactivate-emg-pdn-after-srvcc" with operation "merge".
     */
    public void markDeactivateEmgPdnAfterSrvccMerge() throws JNCException {
        markLeafMerge("deactivateEmgPdnAfterSrvcc");
    }

    /**
     * Marks the leaf "deactivate-emg-pdn-after-srvcc" with operation "create".
     */
    public void markDeactivateEmgPdnAfterSrvccCreate() throws JNCException {
        markLeafCreate("deactivateEmgPdnAfterSrvcc");
    }

    /**
     * Marks the leaf "deactivate-emg-pdn-after-srvcc" with operation "delete".
     */
    public void markDeactivateEmgPdnAfterSrvccDelete() throws JNCException {
        markLeafDelete("deactivateEmgPdnAfterSrvcc");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
