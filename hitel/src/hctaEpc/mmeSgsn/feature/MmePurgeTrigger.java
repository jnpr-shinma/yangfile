/* 
 * @(#)MmePurgeTrigger.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.feature;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangEnumeration;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/feature/mme-purge-trigger"
 * <p>
 * See line 221 in
 * featuresConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmePurgeTrigger extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmePurgeTrigger object.
     */
    public MmePurgeTrigger() {
        super(Epc.NAMESPACE, "mme-purge-trigger");
    }

    /**
     * Constructor for an initialized MmePurgeTrigger object,
     * 
     * @param detachTypeValue Key argument of child.
     * @param ueTypeValue Key argument of child.
     */
    public MmePurgeTrigger(YangEnumeration detachTypeValue, YangEnumeration ueTypeValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-purge-trigger");
        Leaf detachType = new Leaf(Epc.NAMESPACE, "detach-type");
        detachType.setValue(detachTypeValue);
        insertChild(detachType, childrenNames());
        Leaf ueType = new Leaf(Epc.NAMESPACE, "ue-type");
        ueType.setValue(ueTypeValue);
        insertChild(ueType, childrenNames());
    }

    /**
     * Constructor for an initialized MmePurgeTrigger object,
     * with String keys.
     * @param detachTypeValue Key argument of child.
     * @param ueTypeValue Key argument of child.
     */
    public MmePurgeTrigger(String detachTypeValue, String ueTypeValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-purge-trigger");
        Leaf detachType = new Leaf(Epc.NAMESPACE, "detach-type");
        detachType.setValue(new YangEnumeration(detachTypeValue, new String [] {"oam-forced", "explicit", "implicit", "all", }));
        insertChild(detachType, childrenNames());
        Leaf ueType = new Leaf(Epc.NAMESPACE, "ue-type");
        ueType.setValue(new YangEnumeration(ueTypeValue, new String [] {"homer", "roamer", "all", }));
        insertChild(ueType, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmePurgeTrigger clone() {
        MmePurgeTrigger copy;
        try {
            copy = new MmePurgeTrigger(getDetachTypeValue().toString(), getUeTypeValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmePurgeTrigger)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmePurgeTrigger cloneShallow() {
        MmePurgeTrigger copy;
        try {
            copy = new MmePurgeTrigger(getDetachTypeValue().toString(), getUeTypeValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmePurgeTrigger)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "detach-type",
            "ue-type",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "detach-type",
            "ue-type",
            "inactive-age",
        };
    }

    /* Access methods for leaf child: "detach-type". */

    /**
     * Gets the value for child leaf "detach-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getDetachTypeValue() throws JNCException {
        return (YangEnumeration)getValue("detach-type");
    }

    /**
     * Sets the value for child leaf "detach-type",
     * using instance of generated typedef class.
     * @param detachTypeValue The value to set.
     * @param detachTypeValue used during instantiation.
     */
    public void setDetachTypeValue(YangEnumeration detachTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "detach-type",
            detachTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "detach-type",
     * using a String value.
     * @param detachTypeValue used during instantiation.
     */
    public void setDetachTypeValue(String detachTypeValue) throws JNCException {
        setDetachTypeValue(new YangEnumeration(detachTypeValue, new String[] {
             "oam-forced",
             "explicit",
             "implicit",
             "all",
        }));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "detach-type" leaf will not have a value.
     */
    public void addDetachType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "detach-type",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "ue-type". */

    /**
     * Gets the value for child leaf "ue-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getUeTypeValue() throws JNCException {
        return (YangEnumeration)getValue("ue-type");
    }

    /**
     * Sets the value for child leaf "ue-type",
     * using instance of generated typedef class.
     * @param ueTypeValue The value to set.
     * @param ueTypeValue used during instantiation.
     */
    public void setUeTypeValue(YangEnumeration ueTypeValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-type",
            ueTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ue-type",
     * using a String value.
     * @param ueTypeValue used during instantiation.
     */
    public void setUeTypeValue(String ueTypeValue) throws JNCException {
        setUeTypeValue(new YangEnumeration(ueTypeValue, new String[] {
             "homer",
             "roamer",
             "all",
        }));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ue-type" leaf will not have a value.
     */
    public void addUeType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-type",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "inactive-age". */

    /**
     * Gets the value for child leaf "inactive-age".
     * @return The value of the leaf.
     */
    public YangString getInactiveAgeValue() throws JNCException {
        YangString inactiveAge = (YangString)getValue("inactive-age");
        if (inactiveAge == null) {
            inactiveAge = new YangString("immediate");  // default
        }
        return inactiveAge;
    }

    /**
     * Sets the value for child leaf "inactive-age",
     * using instance of generated typedef class.
     * @param inactiveAgeValue The value to set.
     * @param inactiveAgeValue used during instantiation.
     */
    public void setInactiveAgeValue(YangString inactiveAgeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "inactive-age",
            inactiveAgeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "inactive-age",
     * using a String value.
     * @param inactiveAgeValue used during instantiation.
     */
    public void setInactiveAgeValue(String inactiveAgeValue)
            throws JNCException {
        setInactiveAgeValue(new YangString(inactiveAgeValue));
    }

    /**
     * Unsets the value for child leaf "inactive-age".
     */
    public void unsetInactiveAgeValue() throws JNCException {
        delete("inactive-age");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "inactive-age" leaf will not have a value.
     */
    public void addInactiveAge() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "inactive-age",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "inactive-age" with operation "replace".
     */
    public void markInactiveAgeReplace() throws JNCException {
        markLeafReplace("inactiveAge");
    }

    /**
     * Marks the leaf "inactive-age" with operation "merge".
     */
    public void markInactiveAgeMerge() throws JNCException {
        markLeafMerge("inactiveAge");
    }

    /**
     * Marks the leaf "inactive-age" with operation "create".
     */
    public void markInactiveAgeCreate() throws JNCException {
        markLeafCreate("inactiveAge");
    }

    /**
     * Marks the leaf "inactive-age" with operation "delete".
     */
    public void markInactiveAgeDelete() throws JNCException {
        markLeafDelete("inactiveAge");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
