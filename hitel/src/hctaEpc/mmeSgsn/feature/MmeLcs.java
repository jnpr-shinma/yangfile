/* 
 * @(#)MmeLcs.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.feature;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/feature/mme-lcs"
 * <p>
 * See line 403 in
 * featuresConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeLcs extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeLcs object.
     */
    public MmeLcs() {
        super(Epc.NAMESPACE, "mme-lcs");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeLcs clone() {
        return (MmeLcs)cloneContent(new MmeLcs());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeLcs cloneShallow() {
        return (MmeLcs)cloneShallowContent(new MmeLcs());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "loc-notification-timer-tlcsn",
            "lcs-over-sgs",
        };
    }

    /* Access methods for optional leaf child: "loc-notification-timer-tlcsn". */

    /**
     * Gets the value for child leaf "loc-notification-timer-tlcsn".
     * @return The value of the leaf.
     */
    public YangUInt8 getLocNotificationTimerTlcsnValue() throws JNCException {
        YangUInt8 locNotificationTimerTlcsn = (YangUInt8)getValue("loc-notification-timer-tlcsn");
        if (locNotificationTimerTlcsn == null) {
            locNotificationTimerTlcsn = new YangUInt8("10");  // default
        }
        return locNotificationTimerTlcsn;
    }

    /**
     * Sets the value for child leaf "loc-notification-timer-tlcsn",
     * using instance of generated typedef class.
     * @param locNotificationTimerTlcsnValue The value to set.
     * @param locNotificationTimerTlcsnValue used during instantiation.
     */
    public void setLocNotificationTimerTlcsnValue(YangUInt8 locNotificationTimerTlcsnValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "loc-notification-timer-tlcsn",
            locNotificationTimerTlcsnValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "loc-notification-timer-tlcsn",
     * using Java primitive values.
     * @param locNotificationTimerTlcsnValue used during instantiation.
     */
    public void setLocNotificationTimerTlcsnValue(short locNotificationTimerTlcsnValue)
            throws JNCException {
        setLocNotificationTimerTlcsnValue(new YangUInt8(locNotificationTimerTlcsnValue));
    }

    /**
     * Sets the value for child leaf "loc-notification-timer-tlcsn",
     * using a String value.
     * @param locNotificationTimerTlcsnValue used during instantiation.
     */
    public void setLocNotificationTimerTlcsnValue(String locNotificationTimerTlcsnValue)
            throws JNCException {
        setLocNotificationTimerTlcsnValue(new YangUInt8(locNotificationTimerTlcsnValue));
    }

    /**
     * Unsets the value for child leaf "loc-notification-timer-tlcsn".
     */
    public void unsetLocNotificationTimerTlcsnValue() throws JNCException {
        delete("loc-notification-timer-tlcsn");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "loc-notification-timer-tlcsn" leaf will not have a value.
     */
    public void addLocNotificationTimerTlcsn() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "loc-notification-timer-tlcsn",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "loc-notification-timer-tlcsn" with operation "replace".
     */
    public void markLocNotificationTimerTlcsnReplace() throws JNCException {
        markLeafReplace("locNotificationTimerTlcsn");
    }

    /**
     * Marks the leaf "loc-notification-timer-tlcsn" with operation "merge".
     */
    public void markLocNotificationTimerTlcsnMerge() throws JNCException {
        markLeafMerge("locNotificationTimerTlcsn");
    }

    /**
     * Marks the leaf "loc-notification-timer-tlcsn" with operation "create".
     */
    public void markLocNotificationTimerTlcsnCreate() throws JNCException {
        markLeafCreate("locNotificationTimerTlcsn");
    }

    /**
     * Marks the leaf "loc-notification-timer-tlcsn" with operation "delete".
     */
    public void markLocNotificationTimerTlcsnDelete() throws JNCException {
        markLeafDelete("locNotificationTimerTlcsn");
    }

    /* Access methods for optional leaf child: "lcs-over-sgs". */

    /**
     * Gets the value for child leaf "lcs-over-sgs".
     * @return The value of the leaf.
     */
    public YangEnumeration getLcsOverSgsValue() throws JNCException {
        YangEnumeration lcsOverSgs = (YangEnumeration)getValue("lcs-over-sgs");
        if (lcsOverSgs == null) {
            lcsOverSgs = new YangEnumeration("disable", new String[] {  // default
                "disable",
            });
        }
        return lcsOverSgs;
    }

    /**
     * Sets the value for child leaf "lcs-over-sgs",
     * using instance of generated typedef class.
     * @param lcsOverSgsValue The value to set.
     * @param lcsOverSgsValue used during instantiation.
     */
    public void setLcsOverSgsValue(YangEnumeration lcsOverSgsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lcs-over-sgs",
            lcsOverSgsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lcs-over-sgs",
     * using a String value.
     * @param lcsOverSgsValue used during instantiation.
     */
    public void setLcsOverSgsValue(String lcsOverSgsValue) throws JNCException {
        setLcsOverSgsValue(new YangEnumeration(lcsOverSgsValue, new String[] {
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "lcs-over-sgs".
     */
    public void unsetLcsOverSgsValue() throws JNCException {
        delete("lcs-over-sgs");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lcs-over-sgs" leaf will not have a value.
     */
    public void addLcsOverSgs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lcs-over-sgs",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lcs-over-sgs" with operation "replace".
     */
    public void markLcsOverSgsReplace() throws JNCException {
        markLeafReplace("lcsOverSgs");
    }

    /**
     * Marks the leaf "lcs-over-sgs" with operation "merge".
     */
    public void markLcsOverSgsMerge() throws JNCException {
        markLeafMerge("lcsOverSgs");
    }

    /**
     * Marks the leaf "lcs-over-sgs" with operation "create".
     */
    public void markLcsOverSgsCreate() throws JNCException {
        markLeafCreate("lcsOverSgs");
    }

    /**
     * Marks the leaf "lcs-over-sgs" with operation "delete".
     */
    public void markLcsOverSgsDelete() throws JNCException {
        markLeafDelete("lcsOverSgs");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
