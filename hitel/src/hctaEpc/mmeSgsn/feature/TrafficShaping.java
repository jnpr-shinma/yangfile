/* 
 * @(#)TrafficShaping.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.feature;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeControlTrafficShaping;

import MmeProfileTrafficShaping;

import NodeSet;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/feature/traffic-shaping"
 * <p>
 * See line 315 in
 * featuresConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class TrafficShaping extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-control-traffic-shaping".
     */
    public MmeControlTrafficShaping mmeControlTrafficShaping = null;

    /**
     * Constructor for an empty TrafficShaping object.
     */
    public TrafficShaping() {
        super(Epc.NAMESPACE, "traffic-shaping");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public TrafficShaping clone() {
        return (TrafficShaping)cloneContent(new TrafficShaping());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public TrafficShaping cloneShallow() {
        return (TrafficShaping)cloneShallowContent(new TrafficShaping());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-profile-traffic-shaping",
            "mme-control-traffic-shaping",
        };
    }

    /* Access methods for list child: "mme-profile-traffic-shaping". */

    /**
     * Gets list entry "mmeProfileTrafficShaping", with specified keys.
     * @param priorityFieldValue Key argument of child.
     * @param trafficClassValue Key argument of child.
     */
    public MmeProfileTrafficShaping getMmeProfileTrafficShaping(YangUInt8 priorityFieldValue, YangEnumeration trafficClassValue)
            throws JNCException {
        String path = "mme-profile-traffic-shaping[priorityField='" + priorityFieldValue + "'][trafficClass='" + trafficClassValue + "']";
        return (MmeProfileTrafficShaping)searchOne(path);
    }

    /**
     * Gets list entry "mmeProfileTrafficShaping", with specified keys.
     * The keys are specified as strings.
     * @param priorityFieldValue Key argument of child.
     * @param trafficClassValue Key argument of child.
     */
    public MmeProfileTrafficShaping getMmeProfileTrafficShaping(String priorityFieldValue, String trafficClassValue)
            throws JNCException {
        String path = "mme-profile-traffic-shaping[priorityField='" + priorityFieldValue + "'][trafficClass='" + trafficClassValue + "']";
        return (MmeProfileTrafficShaping)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-profile-traffic-shaping".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeProfileTrafficShapingIterator() {
        return new ElementChildrenIterator(children, "mme-profile-traffic-shaping");
    }

    /**
     * Adds list entry "mmeProfileTrafficShaping", using an existing object.
     * @param mmeProfileTrafficShaping The object to add.
     * @return The added child.
     */
    public MmeProfileTrafficShaping addMmeProfileTrafficShaping(MmeProfileTrafficShaping mmeProfileTrafficShaping)
            throws JNCException {
        insertChild(mmeProfileTrafficShaping, childrenNames());
        return mmeProfileTrafficShaping;
    }

    /**
     * Adds list entry "mmeProfileTrafficShaping", with specified keys.
     * @param priorityFieldValue Key argument of child.
     * @param trafficClassValue Key argument of child.
     * @return The added child.
     */
    public MmeProfileTrafficShaping addMmeProfileTrafficShaping(YangUInt8 priorityFieldValue, YangEnumeration trafficClassValue)
            throws JNCException {
        MmeProfileTrafficShaping mmeProfileTrafficShaping = new MmeProfileTrafficShaping(priorityFieldValue, trafficClassValue);
        return addMmeProfileTrafficShaping(mmeProfileTrafficShaping);
    }

    /**
     * Adds list entry "mmeProfileTrafficShaping", with specified keys.
     * The keys are specified as strings.
     * @param priorityFieldValue Key argument of child.
     * @param trafficClassValue Key argument of child.
     * @return The added child.
     */
    public MmeProfileTrafficShaping addMmeProfileTrafficShaping(String priorityFieldValue, String trafficClassValue)
            throws JNCException {
        MmeProfileTrafficShaping mmeProfileTrafficShaping = new MmeProfileTrafficShaping(priorityFieldValue, trafficClassValue);
        return addMmeProfileTrafficShaping(mmeProfileTrafficShaping);
    }

    /**
     * Adds list entry "mmeProfileTrafficShaping".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeProfileTrafficShaping addMmeProfileTrafficShaping()
            throws JNCException {
        MmeProfileTrafficShaping mmeProfileTrafficShaping = new MmeProfileTrafficShaping();
        insertChild(mmeProfileTrafficShaping, childrenNames());
        return mmeProfileTrafficShaping;
    }

    /**
     * Deletes list entry "mmeProfileTrafficShaping", with specified keys.
     * @param priorityFieldValue Key argument of child.
     * @param trafficClassValue Key argument of child.
     */
    public void deleteMmeProfileTrafficShaping(YangUInt8 priorityFieldValue, YangEnumeration trafficClassValue)
            throws JNCException {
        String path = "mme-profile-traffic-shaping[priorityField='" + priorityFieldValue + "'][trafficClass='" + trafficClassValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeProfileTrafficShaping", with specified keys.
     * The keys are specified as strings.
     * @param priorityFieldValue Key argument of child.
     * @param trafficClassValue Key argument of child.
     */
    public void deleteMmeProfileTrafficShaping(String priorityFieldValue, String trafficClassValue)
            throws JNCException {
        String path = "mme-profile-traffic-shaping[priorityField='" + priorityFieldValue + "'][trafficClass='" + trafficClassValue + "']";
        delete(path);
    }

    /* Access methods for container child: "mme-control-traffic-shaping". */

    /**
     * Adds container entry "mmeControlTrafficShaping", using an existing object.
     * @param mmeControlTrafficShaping The object to add.
     * @return The added child.
     */
    public MmeControlTrafficShaping addMmeControlTrafficShaping(MmeControlTrafficShaping mmeControlTrafficShaping)
            throws JNCException {
        this.mmeControlTrafficShaping = mmeControlTrafficShaping;
        insertChild(mmeControlTrafficShaping, childrenNames());
        return mmeControlTrafficShaping;
    }

    /**
     * Adds container entry "mmeControlTrafficShaping".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeControlTrafficShaping addMmeControlTrafficShaping()
            throws JNCException {
        MmeControlTrafficShaping mmeControlTrafficShaping = new MmeControlTrafficShaping();
        this.mmeControlTrafficShaping = mmeControlTrafficShaping;
        insertChild(mmeControlTrafficShaping, childrenNames());
        return mmeControlTrafficShaping;
    }

    /**
     * Deletes container entry "mmeControlTrafficShaping".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeControlTrafficShaping() throws JNCException {
        this.mmeControlTrafficShaping = null;
        String path = "mme-control-traffic-shaping";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeControlTrafficShaping) mmeControlTrafficShaping = (MmeControlTrafficShaping)child;
    }

}
