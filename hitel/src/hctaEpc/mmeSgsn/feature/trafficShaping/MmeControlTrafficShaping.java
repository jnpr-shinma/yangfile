/* 
 * @(#)MmeControlTrafficShaping.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.feature.trafficShaping;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/feature/trafficShaping/mme-control-traffic-shaping"
 * <p>
 * See line 377 in
 * featuresConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeControlTrafficShaping extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeControlTrafficShaping object.
     */
    public MmeControlTrafficShaping() {
        super(Epc.NAMESPACE, "mme-control-traffic-shaping");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeControlTrafficShaping clone() {
        return (MmeControlTrafficShaping)cloneContent(new MmeControlTrafficShaping());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeControlTrafficShaping cloneShallow() {
        return (MmeControlTrafficShaping)cloneShallowContent(new MmeControlTrafficShaping());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "signaling-dscp-mark",
            "default-roamer-ar",
        };
    }

    /* Access methods for optional leaf child: "signaling-dscp-mark". */

    /**
     * Gets the value for child leaf "signaling-dscp-mark".
     * @return The value of the leaf.
     */
    public YangString getSignalingDscpMarkValue() throws JNCException {
        YangString signalingDscpMark = (YangString)getValue("signaling-dscp-mark");
        if (signalingDscpMark == null) {
            signalingDscpMark = new YangString("de");  // default
        }
        return signalingDscpMark;
    }

    /**
     * Sets the value for child leaf "signaling-dscp-mark",
     * using instance of generated typedef class.
     * @param signalingDscpMarkValue The value to set.
     * @param signalingDscpMarkValue used during instantiation.
     */
    public void setSignalingDscpMarkValue(YangString signalingDscpMarkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "signaling-dscp-mark",
            signalingDscpMarkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "signaling-dscp-mark",
     * using a String value.
     * @param signalingDscpMarkValue used during instantiation.
     */
    public void setSignalingDscpMarkValue(String signalingDscpMarkValue)
            throws JNCException {
        setSignalingDscpMarkValue(new YangString(signalingDscpMarkValue));
    }

    /**
     * Unsets the value for child leaf "signaling-dscp-mark".
     */
    public void unsetSignalingDscpMarkValue() throws JNCException {
        delete("signaling-dscp-mark");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "signaling-dscp-mark" leaf will not have a value.
     */
    public void addSignalingDscpMark() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "signaling-dscp-mark",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "signaling-dscp-mark" with operation "replace".
     */
    public void markSignalingDscpMarkReplace() throws JNCException {
        markLeafReplace("signalingDscpMark");
    }

    /**
     * Marks the leaf "signaling-dscp-mark" with operation "merge".
     */
    public void markSignalingDscpMarkMerge() throws JNCException {
        markLeafMerge("signalingDscpMark");
    }

    /**
     * Marks the leaf "signaling-dscp-mark" with operation "create".
     */
    public void markSignalingDscpMarkCreate() throws JNCException {
        markLeafCreate("signalingDscpMark");
    }

    /**
     * Marks the leaf "signaling-dscp-mark" with operation "delete".
     */
    public void markSignalingDscpMarkDelete() throws JNCException {
        markLeafDelete("signalingDscpMark");
    }

    /* Access methods for optional leaf child: "default-roamer-ar". */

    /**
     * Gets the value for child leaf "default-roamer-ar".
     * @return The value of the leaf.
     */
    public YangUInt8 getDefaultRoamerArValue() throws JNCException {
        YangUInt8 defaultRoamerAr = (YangUInt8)getValue("default-roamer-ar");
        if (defaultRoamerAr == null) {
            defaultRoamerAr = new YangUInt8("3");  // default
        }
        return defaultRoamerAr;
    }

    /**
     * Sets the value for child leaf "default-roamer-ar",
     * using instance of generated typedef class.
     * @param defaultRoamerArValue The value to set.
     * @param defaultRoamerArValue used during instantiation.
     */
    public void setDefaultRoamerArValue(YangUInt8 defaultRoamerArValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "default-roamer-ar",
            defaultRoamerArValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "default-roamer-ar",
     * using Java primitive values.
     * @param defaultRoamerArValue used during instantiation.
     */
    public void setDefaultRoamerArValue(short defaultRoamerArValue)
            throws JNCException {
        setDefaultRoamerArValue(new YangUInt8(defaultRoamerArValue));
    }

    /**
     * Sets the value for child leaf "default-roamer-ar",
     * using a String value.
     * @param defaultRoamerArValue used during instantiation.
     */
    public void setDefaultRoamerArValue(String defaultRoamerArValue)
            throws JNCException {
        setDefaultRoamerArValue(new YangUInt8(defaultRoamerArValue));
    }

    /**
     * Unsets the value for child leaf "default-roamer-ar".
     */
    public void unsetDefaultRoamerArValue() throws JNCException {
        delete("default-roamer-ar");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "default-roamer-ar" leaf will not have a value.
     */
    public void addDefaultRoamerAr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "default-roamer-ar",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "default-roamer-ar" with operation "replace".
     */
    public void markDefaultRoamerArReplace() throws JNCException {
        markLeafReplace("defaultRoamerAr");
    }

    /**
     * Marks the leaf "default-roamer-ar" with operation "merge".
     */
    public void markDefaultRoamerArMerge() throws JNCException {
        markLeafMerge("defaultRoamerAr");
    }

    /**
     * Marks the leaf "default-roamer-ar" with operation "create".
     */
    public void markDefaultRoamerArCreate() throws JNCException {
        markLeafCreate("defaultRoamerAr");
    }

    /**
     * Marks the leaf "default-roamer-ar" with operation "delete".
     */
    public void markDefaultRoamerArDelete() throws JNCException {
        markLeafDelete("defaultRoamerAr");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
