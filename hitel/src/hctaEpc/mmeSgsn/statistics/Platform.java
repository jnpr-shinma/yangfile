/* 
 * @(#)Platform.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.statistics;

import Element;

import ElementChildrenIterator;

import Epc;

import Filesystem;

import JNCException;

import Resource;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/statistics/platform"
 * <p>
 * See line 1403 in
 * oamPmServerCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Platform extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Platform object.
     */
    public Platform() {
        super(Epc.NAMESPACE, "platform");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Platform clone() {
        return (Platform)cloneContent(new Platform());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Platform cloneShallow() {
        return (Platform)cloneShallowContent(new Platform());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "filesystem",
            "resource",
        };
    }

    /* Access methods for list child: "filesystem". */

    /**
     * Gets list entry "filesystem", with specified keys.
     */
    public Filesystem getFilesystem() throws JNCException {
        String path = "filesystem";
        return (Filesystem)searchOne(path);
    }

    /**
     * Iterator method for the list "filesystem".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator filesystemIterator() {
        return new ElementChildrenIterator(children, "filesystem");
    }

    /**
     * Adds list entry "filesystem", using an existing object.
     * @param filesystem The object to add.
     * @return The added child.
     */
    public Filesystem addFilesystem(Filesystem filesystem) throws JNCException {
        insertChild(filesystem, childrenNames());
        return filesystem;
    }

    /**
     * Adds list entry "filesystem".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Filesystem addFilesystem() throws JNCException {
        Filesystem filesystem = new Filesystem();
        insertChild(filesystem, childrenNames());
        return filesystem;
    }

    /**
     * Deletes list entry "filesystem", with specified keys.
     */
    public void deleteFilesystem() throws JNCException {
        String path = "filesystem";
        delete(path);
    }

    /* Access methods for list child: "resource". */

    /**
     * Gets list entry "resource", with specified keys.
     */
    public Resource getResource() throws JNCException {
        String path = "resource";
        return (Resource)searchOne(path);
    }

    /**
     * Iterator method for the list "resource".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator resourceIterator() {
        return new ElementChildrenIterator(children, "resource");
    }

    /**
     * Adds list entry "resource", using an existing object.
     * @param resource The object to add.
     * @return The added child.
     */
    public Resource addResource(Resource resource) throws JNCException {
        insertChild(resource, childrenNames());
        return resource;
    }

    /**
     * Adds list entry "resource".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Resource addResource() throws JNCException {
        Resource resource = new Resource();
        insertChild(resource, childrenNames());
        return resource;
    }

    /**
     * Deletes list entry "resource", with specified keys.
     */
    public void deleteResource() throws JNCException {
        String path = "resource";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
