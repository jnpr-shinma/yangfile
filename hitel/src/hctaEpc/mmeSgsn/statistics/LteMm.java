/* 
 * @(#)LteMm.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.statistics;

import Attach;

import AttachFail;

import DetachGroup;

import Element;

import ElementChildrenIterator;

import Epc;

import General;

import Itau;

import ItauFail;

import JNCException;

import Paging;

import Procedure;

import Security;

import ServiceRequest;

import Snr;

import Tau;

import TauFail;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/statistics/lteMm"
 * <p>
 * See line 1072 in
 * oamPmServerCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class LteMm extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty LteMm object.
     */
    public LteMm() {
        super(Epc.NAMESPACE, "lteMm");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public LteMm clone() {
        return (LteMm)cloneContent(new LteMm());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public LteMm cloneShallow() {
        return (LteMm)cloneShallowContent(new LteMm());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "attach",
            "attachFail",
            "detach-group",
            "general",
            "itau",
            "itauFail",
            "paging",
            "procedure",
            "security",
            "serviceRequest",
            "snr",
            "tau",
            "tauFail",
        };
    }

    /* Access methods for list child: "attach". */

    /**
     * Gets list entry "attach", with specified keys.
     */
    public Attach getAttach() throws JNCException {
        String path = "attach";
        return (Attach)searchOne(path);
    }

    /**
     * Iterator method for the list "attach".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator attachIterator() {
        return new ElementChildrenIterator(children, "attach");
    }

    /**
     * Adds list entry "attach", using an existing object.
     * @param attach The object to add.
     * @return The added child.
     */
    public Attach addAttach(Attach attach) throws JNCException {
        insertChild(attach, childrenNames());
        return attach;
    }

    /**
     * Adds list entry "attach".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Attach addAttach() throws JNCException {
        Attach attach = new Attach();
        insertChild(attach, childrenNames());
        return attach;
    }

    /**
     * Deletes list entry "attach", with specified keys.
     */
    public void deleteAttach() throws JNCException {
        String path = "attach";
        delete(path);
    }

    /* Access methods for list child: "attachFail". */

    /**
     * Gets list entry "attachFail", with specified keys.
     */
    public AttachFail getAttachFail() throws JNCException {
        String path = "attachFail";
        return (AttachFail)searchOne(path);
    }

    /**
     * Iterator method for the list "attachFail".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator attachFailIterator() {
        return new ElementChildrenIterator(children, "attachFail");
    }

    /**
     * Adds list entry "attachFail", using an existing object.
     * @param attachFail The object to add.
     * @return The added child.
     */
    public AttachFail addAttachFail(AttachFail attachFail) throws JNCException {
        insertChild(attachFail, childrenNames());
        return attachFail;
    }

    /**
     * Adds list entry "attachFail".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AttachFail addAttachFail() throws JNCException {
        AttachFail attachFail = new AttachFail();
        insertChild(attachFail, childrenNames());
        return attachFail;
    }

    /**
     * Deletes list entry "attachFail", with specified keys.
     */
    public void deleteAttachFail() throws JNCException {
        String path = "attachFail";
        delete(path);
    }

    /* Access methods for list child: "detach-group". */

    /**
     * Gets list entry "detachGroup", with specified keys.
     */
    public DetachGroup getDetachGroup() throws JNCException {
        String path = "detach-group";
        return (DetachGroup)searchOne(path);
    }

    /**
     * Iterator method for the list "detach-group".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator detachGroupIterator() {
        return new ElementChildrenIterator(children, "detach-group");
    }

    /**
     * Adds list entry "detachGroup", using an existing object.
     * @param detachGroup The object to add.
     * @return The added child.
     */
    public DetachGroup addDetachGroup(DetachGroup detachGroup)
            throws JNCException {
        insertChild(detachGroup, childrenNames());
        return detachGroup;
    }

    /**
     * Adds list entry "detachGroup".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public DetachGroup addDetachGroup() throws JNCException {
        DetachGroup detachGroup = new DetachGroup();
        insertChild(detachGroup, childrenNames());
        return detachGroup;
    }

    /**
     * Deletes list entry "detachGroup", with specified keys.
     */
    public void deleteDetachGroup() throws JNCException {
        String path = "detach-group";
        delete(path);
    }

    /* Access methods for list child: "general". */

    /**
     * Gets list entry "general", with specified keys.
     */
    public General getGeneral() throws JNCException {
        String path = "general";
        return (General)searchOne(path);
    }

    /**
     * Iterator method for the list "general".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator generalIterator() {
        return new ElementChildrenIterator(children, "general");
    }

    /**
     * Adds list entry "general", using an existing object.
     * @param general The object to add.
     * @return The added child.
     */
    public General addGeneral(General general) throws JNCException {
        insertChild(general, childrenNames());
        return general;
    }

    /**
     * Adds list entry "general".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public General addGeneral() throws JNCException {
        General general = new General();
        insertChild(general, childrenNames());
        return general;
    }

    /**
     * Deletes list entry "general", with specified keys.
     */
    public void deleteGeneral() throws JNCException {
        String path = "general";
        delete(path);
    }

    /* Access methods for list child: "itau". */

    /**
     * Gets list entry "itau", with specified keys.
     */
    public Itau getItau() throws JNCException {
        String path = "itau";
        return (Itau)searchOne(path);
    }

    /**
     * Iterator method for the list "itau".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator itauIterator() {
        return new ElementChildrenIterator(children, "itau");
    }

    /**
     * Adds list entry "itau", using an existing object.
     * @param itau The object to add.
     * @return The added child.
     */
    public Itau addItau(Itau itau) throws JNCException {
        insertChild(itau, childrenNames());
        return itau;
    }

    /**
     * Adds list entry "itau".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Itau addItau() throws JNCException {
        Itau itau = new Itau();
        insertChild(itau, childrenNames());
        return itau;
    }

    /**
     * Deletes list entry "itau", with specified keys.
     */
    public void deleteItau() throws JNCException {
        String path = "itau";
        delete(path);
    }

    /* Access methods for list child: "itauFail". */

    /**
     * Gets list entry "itauFail", with specified keys.
     */
    public ItauFail getItauFail() throws JNCException {
        String path = "itauFail";
        return (ItauFail)searchOne(path);
    }

    /**
     * Iterator method for the list "itauFail".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator itauFailIterator() {
        return new ElementChildrenIterator(children, "itauFail");
    }

    /**
     * Adds list entry "itauFail", using an existing object.
     * @param itauFail The object to add.
     * @return The added child.
     */
    public ItauFail addItauFail(ItauFail itauFail) throws JNCException {
        insertChild(itauFail, childrenNames());
        return itauFail;
    }

    /**
     * Adds list entry "itauFail".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public ItauFail addItauFail() throws JNCException {
        ItauFail itauFail = new ItauFail();
        insertChild(itauFail, childrenNames());
        return itauFail;
    }

    /**
     * Deletes list entry "itauFail", with specified keys.
     */
    public void deleteItauFail() throws JNCException {
        String path = "itauFail";
        delete(path);
    }

    /* Access methods for list child: "paging". */

    /**
     * Gets list entry "paging", with specified keys.
     */
    public Paging getPaging() throws JNCException {
        String path = "paging";
        return (Paging)searchOne(path);
    }

    /**
     * Iterator method for the list "paging".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator pagingIterator() {
        return new ElementChildrenIterator(children, "paging");
    }

    /**
     * Adds list entry "paging", using an existing object.
     * @param paging The object to add.
     * @return The added child.
     */
    public Paging addPaging(Paging paging) throws JNCException {
        insertChild(paging, childrenNames());
        return paging;
    }

    /**
     * Adds list entry "paging".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Paging addPaging() throws JNCException {
        Paging paging = new Paging();
        insertChild(paging, childrenNames());
        return paging;
    }

    /**
     * Deletes list entry "paging", with specified keys.
     */
    public void deletePaging() throws JNCException {
        String path = "paging";
        delete(path);
    }

    /* Access methods for list child: "procedure". */

    /**
     * Gets list entry "procedure", with specified keys.
     */
    public Procedure getProcedure() throws JNCException {
        String path = "procedure";
        return (Procedure)searchOne(path);
    }

    /**
     * Iterator method for the list "procedure".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator procedureIterator() {
        return new ElementChildrenIterator(children, "procedure");
    }

    /**
     * Adds list entry "procedure", using an existing object.
     * @param procedure The object to add.
     * @return The added child.
     */
    public Procedure addProcedure(Procedure procedure) throws JNCException {
        insertChild(procedure, childrenNames());
        return procedure;
    }

    /**
     * Adds list entry "procedure".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Procedure addProcedure() throws JNCException {
        Procedure procedure = new Procedure();
        insertChild(procedure, childrenNames());
        return procedure;
    }

    /**
     * Deletes list entry "procedure", with specified keys.
     */
    public void deleteProcedure() throws JNCException {
        String path = "procedure";
        delete(path);
    }

    /* Access methods for list child: "security". */

    /**
     * Gets list entry "security", with specified keys.
     */
    public Security getSecurity() throws JNCException {
        String path = "security";
        return (Security)searchOne(path);
    }

    /**
     * Iterator method for the list "security".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator securityIterator() {
        return new ElementChildrenIterator(children, "security");
    }

    /**
     * Adds list entry "security", using an existing object.
     * @param security The object to add.
     * @return The added child.
     */
    public Security addSecurity(Security security) throws JNCException {
        insertChild(security, childrenNames());
        return security;
    }

    /**
     * Adds list entry "security".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Security addSecurity() throws JNCException {
        Security security = new Security();
        insertChild(security, childrenNames());
        return security;
    }

    /**
     * Deletes list entry "security", with specified keys.
     */
    public void deleteSecurity() throws JNCException {
        String path = "security";
        delete(path);
    }

    /* Access methods for list child: "serviceRequest". */

    /**
     * Gets list entry "serviceRequest", with specified keys.
     */
    public ServiceRequest getServiceRequest() throws JNCException {
        String path = "serviceRequest";
        return (ServiceRequest)searchOne(path);
    }

    /**
     * Iterator method for the list "serviceRequest".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator serviceRequestIterator() {
        return new ElementChildrenIterator(children, "serviceRequest");
    }

    /**
     * Adds list entry "serviceRequest", using an existing object.
     * @param serviceRequest The object to add.
     * @return The added child.
     */
    public ServiceRequest addServiceRequest(ServiceRequest serviceRequest)
            throws JNCException {
        insertChild(serviceRequest, childrenNames());
        return serviceRequest;
    }

    /**
     * Adds list entry "serviceRequest".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public ServiceRequest addServiceRequest() throws JNCException {
        ServiceRequest serviceRequest = new ServiceRequest();
        insertChild(serviceRequest, childrenNames());
        return serviceRequest;
    }

    /**
     * Deletes list entry "serviceRequest", with specified keys.
     */
    public void deleteServiceRequest() throws JNCException {
        String path = "serviceRequest";
        delete(path);
    }

    /* Access methods for list child: "snr". */

    /**
     * Gets list entry "snr", with specified keys.
     */
    public Snr getSnr() throws JNCException {
        String path = "snr";
        return (Snr)searchOne(path);
    }

    /**
     * Iterator method for the list "snr".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator snrIterator() {
        return new ElementChildrenIterator(children, "snr");
    }

    /**
     * Adds list entry "snr", using an existing object.
     * @param snr The object to add.
     * @return The added child.
     */
    public Snr addSnr(Snr snr) throws JNCException {
        insertChild(snr, childrenNames());
        return snr;
    }

    /**
     * Adds list entry "snr".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Snr addSnr() throws JNCException {
        Snr snr = new Snr();
        insertChild(snr, childrenNames());
        return snr;
    }

    /**
     * Deletes list entry "snr", with specified keys.
     */
    public void deleteSnr() throws JNCException {
        String path = "snr";
        delete(path);
    }

    /* Access methods for list child: "tau". */

    /**
     * Gets list entry "tau", with specified keys.
     */
    public Tau getTau() throws JNCException {
        String path = "tau";
        return (Tau)searchOne(path);
    }

    /**
     * Iterator method for the list "tau".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator tauIterator() {
        return new ElementChildrenIterator(children, "tau");
    }

    /**
     * Adds list entry "tau", using an existing object.
     * @param tau The object to add.
     * @return The added child.
     */
    public Tau addTau(Tau tau) throws JNCException {
        insertChild(tau, childrenNames());
        return tau;
    }

    /**
     * Adds list entry "tau".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Tau addTau() throws JNCException {
        Tau tau = new Tau();
        insertChild(tau, childrenNames());
        return tau;
    }

    /**
     * Deletes list entry "tau", with specified keys.
     */
    public void deleteTau() throws JNCException {
        String path = "tau";
        delete(path);
    }

    /* Access methods for list child: "tauFail". */

    /**
     * Gets list entry "tauFail", with specified keys.
     */
    public TauFail getTauFail() throws JNCException {
        String path = "tauFail";
        return (TauFail)searchOne(path);
    }

    /**
     * Iterator method for the list "tauFail".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator tauFailIterator() {
        return new ElementChildrenIterator(children, "tauFail");
    }

    /**
     * Adds list entry "tauFail", using an existing object.
     * @param tauFail The object to add.
     * @return The added child.
     */
    public TauFail addTauFail(TauFail tauFail) throws JNCException {
        insertChild(tauFail, childrenNames());
        return tauFail;
    }

    /**
     * Adds list entry "tauFail".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public TauFail addTauFail() throws JNCException {
        TauFail tauFail = new TauFail();
        insertChild(tauFail, childrenNames());
        return tauFail;
    }

    /**
     * Deletes list entry "tauFail", with specified keys.
     */
    public void deleteTauFail() throws JNCException {
        String path = "tauFail";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
