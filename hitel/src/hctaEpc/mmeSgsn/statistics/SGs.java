/* 
 * @(#)SGs.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.statistics;

import DetachGroup;

import Element;

import ElementChildrenIterator;

import Epc;

import Failure;

import General;

import JNCException;

import Procedure;

import VlrSelection;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/statistics/sGs"
 * <p>
 * See line 1749 in
 * oamPmServerCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class SGs extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty SGs object.
     */
    public SGs() {
        super(Epc.NAMESPACE, "sGs");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public SGs clone() {
        return (SGs)cloneContent(new SGs());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public SGs cloneShallow() {
        return (SGs)cloneShallowContent(new SGs());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "detach-group",
            "failure",
            "general",
            "procedure",
            "vlrSelection",
        };
    }

    /* Access methods for list child: "detach-group". */

    /**
     * Gets list entry "detachGroup", with specified keys.
     */
    public DetachGroup getDetachGroup() throws JNCException {
        String path = "detach-group";
        return (DetachGroup)searchOne(path);
    }

    /**
     * Iterator method for the list "detach-group".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator detachGroupIterator() {
        return new ElementChildrenIterator(children, "detach-group");
    }

    /**
     * Adds list entry "detachGroup", using an existing object.
     * @param detachGroup The object to add.
     * @return The added child.
     */
    public DetachGroup addDetachGroup(DetachGroup detachGroup)
            throws JNCException {
        insertChild(detachGroup, childrenNames());
        return detachGroup;
    }

    /**
     * Adds list entry "detachGroup".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public DetachGroup addDetachGroup() throws JNCException {
        DetachGroup detachGroup = new DetachGroup();
        insertChild(detachGroup, childrenNames());
        return detachGroup;
    }

    /**
     * Deletes list entry "detachGroup", with specified keys.
     */
    public void deleteDetachGroup() throws JNCException {
        String path = "detach-group";
        delete(path);
    }

    /* Access methods for list child: "failure". */

    /**
     * Gets list entry "failure", with specified keys.
     */
    public Failure getFailure() throws JNCException {
        String path = "failure";
        return (Failure)searchOne(path);
    }

    /**
     * Iterator method for the list "failure".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator failureIterator() {
        return new ElementChildrenIterator(children, "failure");
    }

    /**
     * Adds list entry "failure", using an existing object.
     * @param failure The object to add.
     * @return The added child.
     */
    public Failure addFailure(Failure failure) throws JNCException {
        insertChild(failure, childrenNames());
        return failure;
    }

    /**
     * Adds list entry "failure".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Failure addFailure() throws JNCException {
        Failure failure = new Failure();
        insertChild(failure, childrenNames());
        return failure;
    }

    /**
     * Deletes list entry "failure", with specified keys.
     */
    public void deleteFailure() throws JNCException {
        String path = "failure";
        delete(path);
    }

    /* Access methods for list child: "general". */

    /**
     * Gets list entry "general", with specified keys.
     */
    public General getGeneral() throws JNCException {
        String path = "general";
        return (General)searchOne(path);
    }

    /**
     * Iterator method for the list "general".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator generalIterator() {
        return new ElementChildrenIterator(children, "general");
    }

    /**
     * Adds list entry "general", using an existing object.
     * @param general The object to add.
     * @return The added child.
     */
    public General addGeneral(General general) throws JNCException {
        insertChild(general, childrenNames());
        return general;
    }

    /**
     * Adds list entry "general".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public General addGeneral() throws JNCException {
        General general = new General();
        insertChild(general, childrenNames());
        return general;
    }

    /**
     * Deletes list entry "general", with specified keys.
     */
    public void deleteGeneral() throws JNCException {
        String path = "general";
        delete(path);
    }

    /* Access methods for list child: "procedure". */

    /**
     * Gets list entry "procedure", with specified keys.
     */
    public Procedure getProcedure() throws JNCException {
        String path = "procedure";
        return (Procedure)searchOne(path);
    }

    /**
     * Iterator method for the list "procedure".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator procedureIterator() {
        return new ElementChildrenIterator(children, "procedure");
    }

    /**
     * Adds list entry "procedure", using an existing object.
     * @param procedure The object to add.
     * @return The added child.
     */
    public Procedure addProcedure(Procedure procedure) throws JNCException {
        insertChild(procedure, childrenNames());
        return procedure;
    }

    /**
     * Adds list entry "procedure".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Procedure addProcedure() throws JNCException {
        Procedure procedure = new Procedure();
        insertChild(procedure, childrenNames());
        return procedure;
    }

    /**
     * Deletes list entry "procedure", with specified keys.
     */
    public void deleteProcedure() throws JNCException {
        String path = "procedure";
        delete(path);
    }

    /* Access methods for list child: "vlrSelection". */

    /**
     * Gets list entry "vlrSelection", with specified keys.
     */
    public VlrSelection getVlrSelection() throws JNCException {
        String path = "vlrSelection";
        return (VlrSelection)searchOne(path);
    }

    /**
     * Iterator method for the list "vlrSelection".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator vlrSelectionIterator() {
        return new ElementChildrenIterator(children, "vlrSelection");
    }

    /**
     * Adds list entry "vlrSelection", using an existing object.
     * @param vlrSelection The object to add.
     * @return The added child.
     */
    public VlrSelection addVlrSelection(VlrSelection vlrSelection)
            throws JNCException {
        insertChild(vlrSelection, childrenNames());
        return vlrSelection;
    }

    /**
     * Adds list entry "vlrSelection".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public VlrSelection addVlrSelection() throws JNCException {
        VlrSelection vlrSelection = new VlrSelection();
        insertChild(vlrSelection, childrenNames());
        return vlrSelection;
    }

    /**
     * Deletes list entry "vlrSelection", with specified keys.
     */
    public void deleteVlrSelection() throws JNCException {
        String path = "vlrSelection";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
