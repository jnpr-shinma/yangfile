/* 
 * @(#)S6.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.statistics;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import Sc;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/statistics/s6"
 * <p>
 * See line 1595 in
 * oamPmServerCli.yang
 * <p>
 * Children with the same name as this class are fully qualified.
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class S6 extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty S6 object.
     */
    public S6() {
        super(Epc.NAMESPACE, "s6");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public S6 clone() {
        return (S6)cloneContent(new S6());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public S6 cloneShallow() {
        return (S6)cloneShallowContent(new S6());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "s6",
            "sc",
        };
    }

    /* Access methods for list child: "s6". */

    /**
     * Gets list entry "s6", with specified keys.
     */
    public hctaEpc.mmeSgsn.statistics.s6.S6 getS6() throws JNCException {
        String path = "s6";
        return (hctaEpc.mmeSgsn.statistics.s6.S6)searchOne(path);
    }

    /**
     * Iterator method for the list "s6".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator s6Iterator() {
        return new ElementChildrenIterator(children, "s6");
    }

    /**
     * Adds list entry "s6", using an existing object.
     * @param s6 The object to add.
     * @return The added child.
     */
    public hctaEpc.mmeSgsn.statistics.s6.S6 addS6(hctaEpc.mmeSgsn.statistics.s6.S6 s6)
            throws JNCException {
        insertChild(s6, childrenNames());
        return s6;
    }

    /**
     * Adds list entry "s6".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public hctaEpc.mmeSgsn.statistics.s6.S6 addS6() throws JNCException {
        hctaEpc.mmeSgsn.statistics.s6.S6 s6 = new hctaEpc.mmeSgsn.statistics.s6.S6();
        insertChild(s6, childrenNames());
        return s6;
    }

    /**
     * Deletes list entry "s6", with specified keys.
     */
    public void deleteS6() throws JNCException {
        String path = "s6";
        delete(path);
    }

    /* Access methods for list child: "sc". */

    /**
     * Gets list entry "sc", with specified keys.
     */
    public Sc getSc() throws JNCException {
        String path = "sc";
        return (Sc)searchOne(path);
    }

    /**
     * Iterator method for the list "sc".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator scIterator() {
        return new ElementChildrenIterator(children, "sc");
    }

    /**
     * Adds list entry "sc", using an existing object.
     * @param sc The object to add.
     * @return The added child.
     */
    public Sc addSc(Sc sc) throws JNCException {
        insertChild(sc, childrenNames());
        return sc;
    }

    /**
     * Adds list entry "sc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Sc addSc() throws JNCException {
        Sc sc = new Sc();
        insertChild(sc, childrenNames());
        return sc;
    }

    /**
     * Deletes list entry "sc", with specified keys.
     */
    public void deleteSc() throws JNCException {
        String path = "sc";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
