/* 
 * @(#)LteLcs.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.statistics;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MolrFail;

import MtlrFail;

import NilrFail;

import PpnFail;

import Procedure;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/statistics/lteLcs"
 * <p>
 * See line 956 in
 * oamPmServerCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class LteLcs extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty LteLcs object.
     */
    public LteLcs() {
        super(Epc.NAMESPACE, "lteLcs");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public LteLcs clone() {
        return (LteLcs)cloneContent(new LteLcs());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public LteLcs cloneShallow() {
        return (LteLcs)cloneShallowContent(new LteLcs());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "procedure",
            "mtlrFail",
            "molrFail",
            "nilrFail",
            "ppnFail",
        };
    }

    /* Access methods for list child: "procedure". */

    /**
     * Gets list entry "procedure", with specified keys.
     */
    public Procedure getProcedure() throws JNCException {
        String path = "procedure";
        return (Procedure)searchOne(path);
    }

    /**
     * Iterator method for the list "procedure".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator procedureIterator() {
        return new ElementChildrenIterator(children, "procedure");
    }

    /**
     * Adds list entry "procedure", using an existing object.
     * @param procedure The object to add.
     * @return The added child.
     */
    public Procedure addProcedure(Procedure procedure) throws JNCException {
        insertChild(procedure, childrenNames());
        return procedure;
    }

    /**
     * Adds list entry "procedure".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Procedure addProcedure() throws JNCException {
        Procedure procedure = new Procedure();
        insertChild(procedure, childrenNames());
        return procedure;
    }

    /**
     * Deletes list entry "procedure", with specified keys.
     */
    public void deleteProcedure() throws JNCException {
        String path = "procedure";
        delete(path);
    }

    /* Access methods for list child: "mtlrFail". */

    /**
     * Gets list entry "mtlrFail", with specified keys.
     */
    public MtlrFail getMtlrFail() throws JNCException {
        String path = "mtlrFail";
        return (MtlrFail)searchOne(path);
    }

    /**
     * Iterator method for the list "mtlrFail".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mtlrFailIterator() {
        return new ElementChildrenIterator(children, "mtlrFail");
    }

    /**
     * Adds list entry "mtlrFail", using an existing object.
     * @param mtlrFail The object to add.
     * @return The added child.
     */
    public MtlrFail addMtlrFail(MtlrFail mtlrFail) throws JNCException {
        insertChild(mtlrFail, childrenNames());
        return mtlrFail;
    }

    /**
     * Adds list entry "mtlrFail".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MtlrFail addMtlrFail() throws JNCException {
        MtlrFail mtlrFail = new MtlrFail();
        insertChild(mtlrFail, childrenNames());
        return mtlrFail;
    }

    /**
     * Deletes list entry "mtlrFail", with specified keys.
     */
    public void deleteMtlrFail() throws JNCException {
        String path = "mtlrFail";
        delete(path);
    }

    /* Access methods for list child: "molrFail". */

    /**
     * Gets list entry "molrFail", with specified keys.
     */
    public MolrFail getMolrFail() throws JNCException {
        String path = "molrFail";
        return (MolrFail)searchOne(path);
    }

    /**
     * Iterator method for the list "molrFail".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator molrFailIterator() {
        return new ElementChildrenIterator(children, "molrFail");
    }

    /**
     * Adds list entry "molrFail", using an existing object.
     * @param molrFail The object to add.
     * @return The added child.
     */
    public MolrFail addMolrFail(MolrFail molrFail) throws JNCException {
        insertChild(molrFail, childrenNames());
        return molrFail;
    }

    /**
     * Adds list entry "molrFail".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MolrFail addMolrFail() throws JNCException {
        MolrFail molrFail = new MolrFail();
        insertChild(molrFail, childrenNames());
        return molrFail;
    }

    /**
     * Deletes list entry "molrFail", with specified keys.
     */
    public void deleteMolrFail() throws JNCException {
        String path = "molrFail";
        delete(path);
    }

    /* Access methods for list child: "nilrFail". */

    /**
     * Gets list entry "nilrFail", with specified keys.
     */
    public NilrFail getNilrFail() throws JNCException {
        String path = "nilrFail";
        return (NilrFail)searchOne(path);
    }

    /**
     * Iterator method for the list "nilrFail".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator nilrFailIterator() {
        return new ElementChildrenIterator(children, "nilrFail");
    }

    /**
     * Adds list entry "nilrFail", using an existing object.
     * @param nilrFail The object to add.
     * @return The added child.
     */
    public NilrFail addNilrFail(NilrFail nilrFail) throws JNCException {
        insertChild(nilrFail, childrenNames());
        return nilrFail;
    }

    /**
     * Adds list entry "nilrFail".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public NilrFail addNilrFail() throws JNCException {
        NilrFail nilrFail = new NilrFail();
        insertChild(nilrFail, childrenNames());
        return nilrFail;
    }

    /**
     * Deletes list entry "nilrFail", with specified keys.
     */
    public void deleteNilrFail() throws JNCException {
        String path = "nilrFail";
        delete(path);
    }

    /* Access methods for list child: "ppnFail". */

    /**
     * Gets list entry "ppnFail", with specified keys.
     */
    public PpnFail getPpnFail() throws JNCException {
        String path = "ppnFail";
        return (PpnFail)searchOne(path);
    }

    /**
     * Iterator method for the list "ppnFail".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator ppnFailIterator() {
        return new ElementChildrenIterator(children, "ppnFail");
    }

    /**
     * Adds list entry "ppnFail", using an existing object.
     * @param ppnFail The object to add.
     * @return The added child.
     */
    public PpnFail addPpnFail(PpnFail ppnFail) throws JNCException {
        insertChild(ppnFail, childrenNames());
        return ppnFail;
    }

    /**
     * Adds list entry "ppnFail".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public PpnFail addPpnFail() throws JNCException {
        PpnFail ppnFail = new PpnFail();
        insertChild(ppnFail, childrenNames());
        return ppnFail;
    }

    /**
     * Deletes list entry "ppnFail", with specified keys.
     */
    public void deletePpnFail() throws JNCException {
        String path = "ppnFail";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
