/* 
 * @(#)Gb.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.statistics;

import Bssgp;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import Llc;

import Nsfr;

import Nsip;

import Sndcp;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/statistics/gb"
 * <p>
 * See line 244 in
 * oamPmServerCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Gb extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Gb object.
     */
    public Gb() {
        super(Epc.NAMESPACE, "gb");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Gb clone() {
        return (Gb)cloneContent(new Gb());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Gb cloneShallow() {
        return (Gb)cloneShallowContent(new Gb());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "bssgp",
            "llc",
            "nsfr",
            "nsip",
            "sndcp",
        };
    }

    /* Access methods for list child: "bssgp". */

    /**
     * Gets list entry "bssgp", with specified keys.
     */
    public Bssgp getBssgp() throws JNCException {
        String path = "bssgp";
        return (Bssgp)searchOne(path);
    }

    /**
     * Iterator method for the list "bssgp".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator bssgpIterator() {
        return new ElementChildrenIterator(children, "bssgp");
    }

    /**
     * Adds list entry "bssgp", using an existing object.
     * @param bssgp The object to add.
     * @return The added child.
     */
    public Bssgp addBssgp(Bssgp bssgp) throws JNCException {
        insertChild(bssgp, childrenNames());
        return bssgp;
    }

    /**
     * Adds list entry "bssgp".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Bssgp addBssgp() throws JNCException {
        Bssgp bssgp = new Bssgp();
        insertChild(bssgp, childrenNames());
        return bssgp;
    }

    /**
     * Deletes list entry "bssgp", with specified keys.
     */
    public void deleteBssgp() throws JNCException {
        String path = "bssgp";
        delete(path);
    }

    /* Access methods for list child: "llc". */

    /**
     * Gets list entry "llc", with specified keys.
     */
    public Llc getLlc() throws JNCException {
        String path = "llc";
        return (Llc)searchOne(path);
    }

    /**
     * Iterator method for the list "llc".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator llcIterator() {
        return new ElementChildrenIterator(children, "llc");
    }

    /**
     * Adds list entry "llc", using an existing object.
     * @param llc The object to add.
     * @return The added child.
     */
    public Llc addLlc(Llc llc) throws JNCException {
        insertChild(llc, childrenNames());
        return llc;
    }

    /**
     * Adds list entry "llc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Llc addLlc() throws JNCException {
        Llc llc = new Llc();
        insertChild(llc, childrenNames());
        return llc;
    }

    /**
     * Deletes list entry "llc", with specified keys.
     */
    public void deleteLlc() throws JNCException {
        String path = "llc";
        delete(path);
    }

    /* Access methods for list child: "nsfr". */

    /**
     * Gets list entry "nsfr", with specified keys.
     */
    public Nsfr getNsfr() throws JNCException {
        String path = "nsfr";
        return (Nsfr)searchOne(path);
    }

    /**
     * Iterator method for the list "nsfr".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator nsfrIterator() {
        return new ElementChildrenIterator(children, "nsfr");
    }

    /**
     * Adds list entry "nsfr", using an existing object.
     * @param nsfr The object to add.
     * @return The added child.
     */
    public Nsfr addNsfr(Nsfr nsfr) throws JNCException {
        insertChild(nsfr, childrenNames());
        return nsfr;
    }

    /**
     * Adds list entry "nsfr".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Nsfr addNsfr() throws JNCException {
        Nsfr nsfr = new Nsfr();
        insertChild(nsfr, childrenNames());
        return nsfr;
    }

    /**
     * Deletes list entry "nsfr", with specified keys.
     */
    public void deleteNsfr() throws JNCException {
        String path = "nsfr";
        delete(path);
    }

    /* Access methods for list child: "nsip". */

    /**
     * Gets list entry "nsip", with specified keys.
     */
    public Nsip getNsip() throws JNCException {
        String path = "nsip";
        return (Nsip)searchOne(path);
    }

    /**
     * Iterator method for the list "nsip".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator nsipIterator() {
        return new ElementChildrenIterator(children, "nsip");
    }

    /**
     * Adds list entry "nsip", using an existing object.
     * @param nsip The object to add.
     * @return The added child.
     */
    public Nsip addNsip(Nsip nsip) throws JNCException {
        insertChild(nsip, childrenNames());
        return nsip;
    }

    /**
     * Adds list entry "nsip".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Nsip addNsip() throws JNCException {
        Nsip nsip = new Nsip();
        insertChild(nsip, childrenNames());
        return nsip;
    }

    /**
     * Deletes list entry "nsip", with specified keys.
     */
    public void deleteNsip() throws JNCException {
        String path = "nsip";
        delete(path);
    }

    /* Access methods for list child: "sndcp". */

    /**
     * Gets list entry "sndcp", with specified keys.
     */
    public Sndcp getSndcp() throws JNCException {
        String path = "sndcp";
        return (Sndcp)searchOne(path);
    }

    /**
     * Iterator method for the list "sndcp".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator sndcpIterator() {
        return new ElementChildrenIterator(children, "sndcp");
    }

    /**
     * Adds list entry "sndcp", using an existing object.
     * @param sndcp The object to add.
     * @return The added child.
     */
    public Sndcp addSndcp(Sndcp sndcp) throws JNCException {
        insertChild(sndcp, childrenNames());
        return sndcp;
    }

    /**
     * Adds list entry "sndcp".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Sndcp addSndcp() throws JNCException {
        Sndcp sndcp = new Sndcp();
        insertChild(sndcp, childrenNames());
        return sndcp;
    }

    /**
     * Deletes list entry "sndcp", with specified keys.
     */
    public void deleteSndcp() throws JNCException {
        String path = "sndcp";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
