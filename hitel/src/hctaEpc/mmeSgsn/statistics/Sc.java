/* 
 * @(#)Sc.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.statistics;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import LoadControl;

import Npli;

import Rim;

import Sms;

import UePurge;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/statistics/sc"
 * <p>
 * See line 1646 in
 * oamPmServerCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Sc extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Sc object.
     */
    public Sc() {
        super(Epc.NAMESPACE, "sc");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Sc clone() {
        return (Sc)cloneContent(new Sc());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Sc cloneShallow() {
        return (Sc)cloneShallowContent(new Sc());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "loadControl",
            "npli",
            "rim",
            "sms",
            "uePurge",
        };
    }

    /* Access methods for list child: "loadControl". */

    /**
     * Gets list entry "loadControl", with specified keys.
     */
    public LoadControl getLoadControl() throws JNCException {
        String path = "loadControl";
        return (LoadControl)searchOne(path);
    }

    /**
     * Iterator method for the list "loadControl".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator loadControlIterator() {
        return new ElementChildrenIterator(children, "loadControl");
    }

    /**
     * Adds list entry "loadControl", using an existing object.
     * @param loadControl The object to add.
     * @return The added child.
     */
    public LoadControl addLoadControl(LoadControl loadControl)
            throws JNCException {
        insertChild(loadControl, childrenNames());
        return loadControl;
    }

    /**
     * Adds list entry "loadControl".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LoadControl addLoadControl() throws JNCException {
        LoadControl loadControl = new LoadControl();
        insertChild(loadControl, childrenNames());
        return loadControl;
    }

    /**
     * Deletes list entry "loadControl", with specified keys.
     */
    public void deleteLoadControl() throws JNCException {
        String path = "loadControl";
        delete(path);
    }

    /* Access methods for list child: "npli". */

    /**
     * Gets list entry "npli", with specified keys.
     */
    public Npli getNpli() throws JNCException {
        String path = "npli";
        return (Npli)searchOne(path);
    }

    /**
     * Iterator method for the list "npli".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator npliIterator() {
        return new ElementChildrenIterator(children, "npli");
    }

    /**
     * Adds list entry "npli", using an existing object.
     * @param npli The object to add.
     * @return The added child.
     */
    public Npli addNpli(Npli npli) throws JNCException {
        insertChild(npli, childrenNames());
        return npli;
    }

    /**
     * Adds list entry "npli".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Npli addNpli() throws JNCException {
        Npli npli = new Npli();
        insertChild(npli, childrenNames());
        return npli;
    }

    /**
     * Deletes list entry "npli", with specified keys.
     */
    public void deleteNpli() throws JNCException {
        String path = "npli";
        delete(path);
    }

    /* Access methods for list child: "rim". */

    /**
     * Gets list entry "rim", with specified keys.
     */
    public Rim getRim() throws JNCException {
        String path = "rim";
        return (Rim)searchOne(path);
    }

    /**
     * Iterator method for the list "rim".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator rimIterator() {
        return new ElementChildrenIterator(children, "rim");
    }

    /**
     * Adds list entry "rim", using an existing object.
     * @param rim The object to add.
     * @return The added child.
     */
    public Rim addRim(Rim rim) throws JNCException {
        insertChild(rim, childrenNames());
        return rim;
    }

    /**
     * Adds list entry "rim".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Rim addRim() throws JNCException {
        Rim rim = new Rim();
        insertChild(rim, childrenNames());
        return rim;
    }

    /**
     * Deletes list entry "rim", with specified keys.
     */
    public void deleteRim() throws JNCException {
        String path = "rim";
        delete(path);
    }

    /* Access methods for list child: "sms". */

    /**
     * Gets list entry "sms", with specified keys.
     */
    public Sms getSms() throws JNCException {
        String path = "sms";
        return (Sms)searchOne(path);
    }

    /**
     * Iterator method for the list "sms".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator smsIterator() {
        return new ElementChildrenIterator(children, "sms");
    }

    /**
     * Adds list entry "sms", using an existing object.
     * @param sms The object to add.
     * @return The added child.
     */
    public Sms addSms(Sms sms) throws JNCException {
        insertChild(sms, childrenNames());
        return sms;
    }

    /**
     * Adds list entry "sms".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Sms addSms() throws JNCException {
        Sms sms = new Sms();
        insertChild(sms, childrenNames());
        return sms;
    }

    /**
     * Deletes list entry "sms", with specified keys.
     */
    public void deleteSms() throws JNCException {
        String path = "sms";
        delete(path);
    }

    /* Access methods for list child: "uePurge". */

    /**
     * Gets list entry "uePurge", with specified keys.
     */
    public UePurge getUePurge() throws JNCException {
        String path = "uePurge";
        return (UePurge)searchOne(path);
    }

    /**
     * Iterator method for the list "uePurge".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator uePurgeIterator() {
        return new ElementChildrenIterator(children, "uePurge");
    }

    /**
     * Adds list entry "uePurge", using an existing object.
     * @param uePurge The object to add.
     * @return The added child.
     */
    public UePurge addUePurge(UePurge uePurge) throws JNCException {
        insertChild(uePurge, childrenNames());
        return uePurge;
    }

    /**
     * Adds list entry "uePurge".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public UePurge addUePurge() throws JNCException {
        UePurge uePurge = new UePurge();
        insertChild(uePurge, childrenNames());
        return uePurge;
    }

    /**
     * Deletes list entry "uePurge", with specified keys.
     */
    public void deleteUePurge() throws JNCException {
        String path = "uePurge";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
