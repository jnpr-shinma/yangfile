/* 
 * @(#)LteSm.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.statistics;

import BearerActFail;

import Deact;

import ERab;

import Element;

import ElementChildrenIterator;

import Epc;

import General;

import JNCException;

import PgwReloc;

import Procedure;

import SessionAct;

import SessionActFail;

import SgwReloc;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/statistics/lteSm"
 * <p>
 * See line 1248 in
 * oamPmServerCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class LteSm extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty LteSm object.
     */
    public LteSm() {
        super(Epc.NAMESPACE, "lteSm");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public LteSm clone() {
        return (LteSm)cloneContent(new LteSm());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public LteSm cloneShallow() {
        return (LteSm)cloneShallowContent(new LteSm());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "bearerActFail",
            "deact",
            "eRab",
            "general",
            "pgwReloc",
            "procedure",
            "sessionAct",
            "sessionActFail",
            "sgwReloc",
        };
    }

    /* Access methods for list child: "bearerActFail". */

    /**
     * Gets list entry "bearerActFail", with specified keys.
     */
    public BearerActFail getBearerActFail() throws JNCException {
        String path = "bearerActFail";
        return (BearerActFail)searchOne(path);
    }

    /**
     * Iterator method for the list "bearerActFail".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator bearerActFailIterator() {
        return new ElementChildrenIterator(children, "bearerActFail");
    }

    /**
     * Adds list entry "bearerActFail", using an existing object.
     * @param bearerActFail The object to add.
     * @return The added child.
     */
    public BearerActFail addBearerActFail(BearerActFail bearerActFail)
            throws JNCException {
        insertChild(bearerActFail, childrenNames());
        return bearerActFail;
    }

    /**
     * Adds list entry "bearerActFail".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public BearerActFail addBearerActFail() throws JNCException {
        BearerActFail bearerActFail = new BearerActFail();
        insertChild(bearerActFail, childrenNames());
        return bearerActFail;
    }

    /**
     * Deletes list entry "bearerActFail", with specified keys.
     */
    public void deleteBearerActFail() throws JNCException {
        String path = "bearerActFail";
        delete(path);
    }

    /* Access methods for list child: "deact". */

    /**
     * Gets list entry "deact", with specified keys.
     */
    public Deact getDeact() throws JNCException {
        String path = "deact";
        return (Deact)searchOne(path);
    }

    /**
     * Iterator method for the list "deact".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator deactIterator() {
        return new ElementChildrenIterator(children, "deact");
    }

    /**
     * Adds list entry "deact", using an existing object.
     * @param deact The object to add.
     * @return The added child.
     */
    public Deact addDeact(Deact deact) throws JNCException {
        insertChild(deact, childrenNames());
        return deact;
    }

    /**
     * Adds list entry "deact".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Deact addDeact() throws JNCException {
        Deact deact = new Deact();
        insertChild(deact, childrenNames());
        return deact;
    }

    /**
     * Deletes list entry "deact", with specified keys.
     */
    public void deleteDeact() throws JNCException {
        String path = "deact";
        delete(path);
    }

    /* Access methods for list child: "eRab". */

    /**
     * Gets list entry "eRab", with specified keys.
     */
    public ERab getERab() throws JNCException {
        String path = "eRab";
        return (ERab)searchOne(path);
    }

    /**
     * Iterator method for the list "eRab".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator eRabIterator() {
        return new ElementChildrenIterator(children, "eRab");
    }

    /**
     * Adds list entry "eRab", using an existing object.
     * @param eRab The object to add.
     * @return The added child.
     */
    public ERab addERab(ERab eRab) throws JNCException {
        insertChild(eRab, childrenNames());
        return eRab;
    }

    /**
     * Adds list entry "eRab".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public ERab addERab() throws JNCException {
        ERab eRab = new ERab();
        insertChild(eRab, childrenNames());
        return eRab;
    }

    /**
     * Deletes list entry "eRab", with specified keys.
     */
    public void deleteERab() throws JNCException {
        String path = "eRab";
        delete(path);
    }

    /* Access methods for list child: "general". */

    /**
     * Gets list entry "general", with specified keys.
     */
    public General getGeneral() throws JNCException {
        String path = "general";
        return (General)searchOne(path);
    }

    /**
     * Iterator method for the list "general".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator generalIterator() {
        return new ElementChildrenIterator(children, "general");
    }

    /**
     * Adds list entry "general", using an existing object.
     * @param general The object to add.
     * @return The added child.
     */
    public General addGeneral(General general) throws JNCException {
        insertChild(general, childrenNames());
        return general;
    }

    /**
     * Adds list entry "general".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public General addGeneral() throws JNCException {
        General general = new General();
        insertChild(general, childrenNames());
        return general;
    }

    /**
     * Deletes list entry "general", with specified keys.
     */
    public void deleteGeneral() throws JNCException {
        String path = "general";
        delete(path);
    }

    /* Access methods for list child: "pgwReloc". */

    /**
     * Gets list entry "pgwReloc", with specified keys.
     */
    public PgwReloc getPgwReloc() throws JNCException {
        String path = "pgwReloc";
        return (PgwReloc)searchOne(path);
    }

    /**
     * Iterator method for the list "pgwReloc".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator pgwRelocIterator() {
        return new ElementChildrenIterator(children, "pgwReloc");
    }

    /**
     * Adds list entry "pgwReloc", using an existing object.
     * @param pgwReloc The object to add.
     * @return The added child.
     */
    public PgwReloc addPgwReloc(PgwReloc pgwReloc) throws JNCException {
        insertChild(pgwReloc, childrenNames());
        return pgwReloc;
    }

    /**
     * Adds list entry "pgwReloc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public PgwReloc addPgwReloc() throws JNCException {
        PgwReloc pgwReloc = new PgwReloc();
        insertChild(pgwReloc, childrenNames());
        return pgwReloc;
    }

    /**
     * Deletes list entry "pgwReloc", with specified keys.
     */
    public void deletePgwReloc() throws JNCException {
        String path = "pgwReloc";
        delete(path);
    }

    /* Access methods for list child: "procedure". */

    /**
     * Gets list entry "procedure", with specified keys.
     */
    public Procedure getProcedure() throws JNCException {
        String path = "procedure";
        return (Procedure)searchOne(path);
    }

    /**
     * Iterator method for the list "procedure".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator procedureIterator() {
        return new ElementChildrenIterator(children, "procedure");
    }

    /**
     * Adds list entry "procedure", using an existing object.
     * @param procedure The object to add.
     * @return The added child.
     */
    public Procedure addProcedure(Procedure procedure) throws JNCException {
        insertChild(procedure, childrenNames());
        return procedure;
    }

    /**
     * Adds list entry "procedure".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Procedure addProcedure() throws JNCException {
        Procedure procedure = new Procedure();
        insertChild(procedure, childrenNames());
        return procedure;
    }

    /**
     * Deletes list entry "procedure", with specified keys.
     */
    public void deleteProcedure() throws JNCException {
        String path = "procedure";
        delete(path);
    }

    /* Access methods for list child: "sessionAct". */

    /**
     * Gets list entry "sessionAct", with specified keys.
     */
    public SessionAct getSessionAct() throws JNCException {
        String path = "sessionAct";
        return (SessionAct)searchOne(path);
    }

    /**
     * Iterator method for the list "sessionAct".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator sessionActIterator() {
        return new ElementChildrenIterator(children, "sessionAct");
    }

    /**
     * Adds list entry "sessionAct", using an existing object.
     * @param sessionAct The object to add.
     * @return The added child.
     */
    public SessionAct addSessionAct(SessionAct sessionAct) throws JNCException {
        insertChild(sessionAct, childrenNames());
        return sessionAct;
    }

    /**
     * Adds list entry "sessionAct".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SessionAct addSessionAct() throws JNCException {
        SessionAct sessionAct = new SessionAct();
        insertChild(sessionAct, childrenNames());
        return sessionAct;
    }

    /**
     * Deletes list entry "sessionAct", with specified keys.
     */
    public void deleteSessionAct() throws JNCException {
        String path = "sessionAct";
        delete(path);
    }

    /* Access methods for list child: "sessionActFail". */

    /**
     * Gets list entry "sessionActFail", with specified keys.
     */
    public SessionActFail getSessionActFail() throws JNCException {
        String path = "sessionActFail";
        return (SessionActFail)searchOne(path);
    }

    /**
     * Iterator method for the list "sessionActFail".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator sessionActFailIterator() {
        return new ElementChildrenIterator(children, "sessionActFail");
    }

    /**
     * Adds list entry "sessionActFail", using an existing object.
     * @param sessionActFail The object to add.
     * @return The added child.
     */
    public SessionActFail addSessionActFail(SessionActFail sessionActFail)
            throws JNCException {
        insertChild(sessionActFail, childrenNames());
        return sessionActFail;
    }

    /**
     * Adds list entry "sessionActFail".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SessionActFail addSessionActFail() throws JNCException {
        SessionActFail sessionActFail = new SessionActFail();
        insertChild(sessionActFail, childrenNames());
        return sessionActFail;
    }

    /**
     * Deletes list entry "sessionActFail", with specified keys.
     */
    public void deleteSessionActFail() throws JNCException {
        String path = "sessionActFail";
        delete(path);
    }

    /* Access methods for list child: "sgwReloc". */

    /**
     * Gets list entry "sgwReloc", with specified keys.
     */
    public SgwReloc getSgwReloc() throws JNCException {
        String path = "sgwReloc";
        return (SgwReloc)searchOne(path);
    }

    /**
     * Iterator method for the list "sgwReloc".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator sgwRelocIterator() {
        return new ElementChildrenIterator(children, "sgwReloc");
    }

    /**
     * Adds list entry "sgwReloc", using an existing object.
     * @param sgwReloc The object to add.
     * @return The added child.
     */
    public SgwReloc addSgwReloc(SgwReloc sgwReloc) throws JNCException {
        insertChild(sgwReloc, childrenNames());
        return sgwReloc;
    }

    /**
     * Adds list entry "sgwReloc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SgwReloc addSgwReloc() throws JNCException {
        SgwReloc sgwReloc = new SgwReloc();
        insertChild(sgwReloc, childrenNames());
        return sgwReloc;
    }

    /**
     * Deletes list entry "sgwReloc", with specified keys.
     */
    public void deleteSgwReloc() throws JNCException {
        String path = "sgwReloc";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
