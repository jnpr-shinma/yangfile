/* 
 * @(#)SgsnAcct.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.statistics;

import AbnormalClosure;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import Mcdr;

import Scdr;

import SmsCdr;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/statistics/sgsnAcct"
 * <p>
 * See line 1821 in
 * oamPmServerCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class SgsnAcct extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty SgsnAcct object.
     */
    public SgsnAcct() {
        super(Epc.NAMESPACE, "sgsnAcct");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public SgsnAcct clone() {
        return (SgsnAcct)cloneContent(new SgsnAcct());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public SgsnAcct cloneShallow() {
        return (SgsnAcct)cloneShallowContent(new SgsnAcct());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "abnormalClosure",
            "mcdr",
            "scdr",
            "smsCdr",
        };
    }

    /* Access methods for list child: "abnormalClosure". */

    /**
     * Gets list entry "abnormalClosure", with specified keys.
     */
    public AbnormalClosure getAbnormalClosure() throws JNCException {
        String path = "abnormalClosure";
        return (AbnormalClosure)searchOne(path);
    }

    /**
     * Iterator method for the list "abnormalClosure".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator abnormalClosureIterator() {
        return new ElementChildrenIterator(children, "abnormalClosure");
    }

    /**
     * Adds list entry "abnormalClosure", using an existing object.
     * @param abnormalClosure The object to add.
     * @return The added child.
     */
    public AbnormalClosure addAbnormalClosure(AbnormalClosure abnormalClosure)
            throws JNCException {
        insertChild(abnormalClosure, childrenNames());
        return abnormalClosure;
    }

    /**
     * Adds list entry "abnormalClosure".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AbnormalClosure addAbnormalClosure() throws JNCException {
        AbnormalClosure abnormalClosure = new AbnormalClosure();
        insertChild(abnormalClosure, childrenNames());
        return abnormalClosure;
    }

    /**
     * Deletes list entry "abnormalClosure", with specified keys.
     */
    public void deleteAbnormalClosure() throws JNCException {
        String path = "abnormalClosure";
        delete(path);
    }

    /* Access methods for list child: "mcdr". */

    /**
     * Gets list entry "mcdr", with specified keys.
     */
    public Mcdr getMcdr() throws JNCException {
        String path = "mcdr";
        return (Mcdr)searchOne(path);
    }

    /**
     * Iterator method for the list "mcdr".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mcdrIterator() {
        return new ElementChildrenIterator(children, "mcdr");
    }

    /**
     * Adds list entry "mcdr", using an existing object.
     * @param mcdr The object to add.
     * @return The added child.
     */
    public Mcdr addMcdr(Mcdr mcdr) throws JNCException {
        insertChild(mcdr, childrenNames());
        return mcdr;
    }

    /**
     * Adds list entry "mcdr".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Mcdr addMcdr() throws JNCException {
        Mcdr mcdr = new Mcdr();
        insertChild(mcdr, childrenNames());
        return mcdr;
    }

    /**
     * Deletes list entry "mcdr", with specified keys.
     */
    public void deleteMcdr() throws JNCException {
        String path = "mcdr";
        delete(path);
    }

    /* Access methods for list child: "scdr". */

    /**
     * Gets list entry "scdr", with specified keys.
     */
    public Scdr getScdr() throws JNCException {
        String path = "scdr";
        return (Scdr)searchOne(path);
    }

    /**
     * Iterator method for the list "scdr".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator scdrIterator() {
        return new ElementChildrenIterator(children, "scdr");
    }

    /**
     * Adds list entry "scdr", using an existing object.
     * @param scdr The object to add.
     * @return The added child.
     */
    public Scdr addScdr(Scdr scdr) throws JNCException {
        insertChild(scdr, childrenNames());
        return scdr;
    }

    /**
     * Adds list entry "scdr".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Scdr addScdr() throws JNCException {
        Scdr scdr = new Scdr();
        insertChild(scdr, childrenNames());
        return scdr;
    }

    /**
     * Deletes list entry "scdr", with specified keys.
     */
    public void deleteScdr() throws JNCException {
        String path = "scdr";
        delete(path);
    }

    /* Access methods for list child: "smsCdr". */

    /**
     * Gets list entry "smsCdr", with specified keys.
     */
    public SmsCdr getSmsCdr() throws JNCException {
        String path = "smsCdr";
        return (SmsCdr)searchOne(path);
    }

    /**
     * Iterator method for the list "smsCdr".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator smsCdrIterator() {
        return new ElementChildrenIterator(children, "smsCdr");
    }

    /**
     * Adds list entry "smsCdr", using an existing object.
     * @param smsCdr The object to add.
     * @return The added child.
     */
    public SmsCdr addSmsCdr(SmsCdr smsCdr) throws JNCException {
        insertChild(smsCdr, childrenNames());
        return smsCdr;
    }

    /**
     * Adds list entry "smsCdr".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SmsCdr addSmsCdr() throws JNCException {
        SmsCdr smsCdr = new SmsCdr();
        insertChild(smsCdr, childrenNames());
        return smsCdr;
    }

    /**
     * Deletes list entry "smsCdr", with specified keys.
     */
    public void deleteSmsCdr() throws JNCException {
        String path = "smsCdr";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
