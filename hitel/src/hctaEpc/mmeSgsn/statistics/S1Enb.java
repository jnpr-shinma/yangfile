/* 
 * @(#)S1Enb.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.statistics;

import Element;

import ElementChildrenIterator;

import Enb;

import Epc;

import JNCException;

import Msg;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/statistics/s1Enb"
 * <p>
 * See line 1563 in
 * oamPmServerCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class S1Enb extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty S1Enb object.
     */
    public S1Enb() {
        super(Epc.NAMESPACE, "s1Enb");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public S1Enb clone() {
        return (S1Enb)cloneContent(new S1Enb());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public S1Enb cloneShallow() {
        return (S1Enb)cloneShallowContent(new S1Enb());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "enb",
            "msg",
        };
    }

    /* Access methods for list child: "enb". */

    /**
     * Gets list entry "enb", with specified keys.
     */
    public Enb getEnb() throws JNCException {
        String path = "enb";
        return (Enb)searchOne(path);
    }

    /**
     * Iterator method for the list "enb".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator enbIterator() {
        return new ElementChildrenIterator(children, "enb");
    }

    /**
     * Adds list entry "enb", using an existing object.
     * @param enb The object to add.
     * @return The added child.
     */
    public Enb addEnb(Enb enb) throws JNCException {
        insertChild(enb, childrenNames());
        return enb;
    }

    /**
     * Adds list entry "enb".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Enb addEnb() throws JNCException {
        Enb enb = new Enb();
        insertChild(enb, childrenNames());
        return enb;
    }

    /**
     * Deletes list entry "enb", with specified keys.
     */
    public void deleteEnb() throws JNCException {
        String path = "enb";
        delete(path);
    }

    /* Access methods for list child: "msg". */

    /**
     * Gets list entry "msg", with specified keys.
     */
    public Msg getMsg() throws JNCException {
        String path = "msg";
        return (Msg)searchOne(path);
    }

    /**
     * Iterator method for the list "msg".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator msgIterator() {
        return new ElementChildrenIterator(children, "msg");
    }

    /**
     * Adds list entry "msg", using an existing object.
     * @param msg The object to add.
     * @return The added child.
     */
    public Msg addMsg(Msg msg) throws JNCException {
        insertChild(msg, childrenNames());
        return msg;
    }

    /**
     * Adds list entry "msg".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Msg addMsg() throws JNCException {
        Msg msg = new Msg();
        insertChild(msg, childrenNames());
        return msg;
    }

    /**
     * Deletes list entry "msg", with specified keys.
     */
    public void deleteMsg() throws JNCException {
        String path = "msg";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
