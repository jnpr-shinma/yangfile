/* 
 * @(#)Nodal.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.statistics;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import S1;

import Upsm;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/statistics/nodal"
 * <p>
 * See line 1371 in
 * oamPmServerCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Nodal extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Nodal object.
     */
    public Nodal() {
        super(Epc.NAMESPACE, "nodal");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Nodal clone() {
        return (Nodal)cloneContent(new Nodal());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Nodal cloneShallow() {
        return (Nodal)cloneShallowContent(new Nodal());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "s1",
            "upsm",
        };
    }

    /* Access methods for list child: "s1". */

    /**
     * Gets list entry "s1", with specified keys.
     */
    public S1 getS1() throws JNCException {
        String path = "s1";
        return (S1)searchOne(path);
    }

    /**
     * Iterator method for the list "s1".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator s1Iterator() {
        return new ElementChildrenIterator(children, "s1");
    }

    /**
     * Adds list entry "s1", using an existing object.
     * @param s1 The object to add.
     * @return The added child.
     */
    public S1 addS1(S1 s1) throws JNCException {
        insertChild(s1, childrenNames());
        return s1;
    }

    /**
     * Adds list entry "s1".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S1 addS1() throws JNCException {
        S1 s1 = new S1();
        insertChild(s1, childrenNames());
        return s1;
    }

    /**
     * Deletes list entry "s1", with specified keys.
     */
    public void deleteS1() throws JNCException {
        String path = "s1";
        delete(path);
    }

    /* Access methods for list child: "upsm". */

    /**
     * Gets list entry "upsm", with specified keys.
     */
    public Upsm getUpsm() throws JNCException {
        String path = "upsm";
        return (Upsm)searchOne(path);
    }

    /**
     * Iterator method for the list "upsm".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator upsmIterator() {
        return new ElementChildrenIterator(children, "upsm");
    }

    /**
     * Adds list entry "upsm", using an existing object.
     * @param upsm The object to add.
     * @return The added child.
     */
    public Upsm addUpsm(Upsm upsm) throws JNCException {
        insertChild(upsm, childrenNames());
        return upsm;
    }

    /**
     * Adds list entry "upsm".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Upsm addUpsm() throws JNCException {
        Upsm upsm = new Upsm();
        insertChild(upsm, childrenNames());
        return upsm;
    }

    /**
     * Deletes list entry "upsm", with specified keys.
     */
    public void deleteUpsm() throws JNCException {
        String path = "upsm";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
