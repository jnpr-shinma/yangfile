/* 
 * @(#)StreamingCslOper.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.csl;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/csl/streaming-csl-oper"
 * <p>
 * See line 113 in
 * cslCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class StreamingCslOper extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty StreamingCslOper object.
     */
    public StreamingCslOper() {
        super(Epc.NAMESPACE, "streaming-csl-oper");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public StreamingCslOper clone() {
        return (StreamingCslOper)cloneContent(new StreamingCslOper());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public StreamingCslOper cloneShallow() {
        return (StreamingCslOper)cloneShallowContent(new StreamingCslOper());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "sctp-profile",
            "routing-instance",
            "local-ip-address",
            "remote-ip-address1",
            "remote-port1",
            "remote-ip-address2",
            "remote-port2",
            "dscp-mark",
            "streaming-fallback",
            "service-id",
            "location",
            "local-port",
            "remote-server-1",
            "remote-server-2",
            "tx-pkt",
            "rx-pkt",
            "tx-rec",
            "drop-rec",
        };
    }

    /* Access methods for optional leaf child: "sctp-profile". */

    /**
     * Gets the value for child leaf "sctp-profile".
     * @return The value of the leaf.
     */
    public YangString getSctpProfileValue() throws JNCException {
        return (YangString)getValue("sctp-profile");
    }

    /**
     * Sets the value for child leaf "sctp-profile",
     * using instance of generated typedef class.
     * @param sctpProfileValue The value to set.
     * @param sctpProfileValue used during instantiation.
     */
    public void setSctpProfileValue(YangString sctpProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-profile",
            sctpProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sctp-profile",
     * using a String value.
     * @param sctpProfileValue used during instantiation.
     */
    public void setSctpProfileValue(String sctpProfileValue)
            throws JNCException {
        setSctpProfileValue(new YangString(sctpProfileValue));
    }

    /**
     * Unsets the value for child leaf "sctp-profile".
     */
    public void unsetSctpProfileValue() throws JNCException {
        delete("sctp-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sctp-profile" leaf will not have a value.
     */
    public void addSctpProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sctp-profile" with operation "replace".
     */
    public void markSctpProfileReplace() throws JNCException {
        markLeafReplace("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "merge".
     */
    public void markSctpProfileMerge() throws JNCException {
        markLeafMerge("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "create".
     */
    public void markSctpProfileCreate() throws JNCException {
        markLeafCreate("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "delete".
     */
    public void markSctpProfileDelete() throws JNCException {
        markLeafDelete("sctpProfile");
    }

    /* Access methods for optional leaf child: "routing-instance". */

    /**
     * Gets the value for child leaf "routing-instance".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstanceValue() throws JNCException {
        return (YangString)getValue("routing-instance");
    }

    /**
     * Sets the value for child leaf "routing-instance",
     * using instance of generated typedef class.
     * @param routingInstanceValue The value to set.
     * @param routingInstanceValue used during instantiation.
     */
    public void setRoutingInstanceValue(YangString routingInstanceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance",
            routingInstanceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance",
     * using a String value.
     * @param routingInstanceValue used during instantiation.
     */
    public void setRoutingInstanceValue(String routingInstanceValue)
            throws JNCException {
        setRoutingInstanceValue(new YangString(routingInstanceValue));
    }

    /**
     * Unsets the value for child leaf "routing-instance".
     */
    public void unsetRoutingInstanceValue() throws JNCException {
        delete("routing-instance");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance" leaf will not have a value.
     */
    public void addRoutingInstance() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance" with operation "replace".
     */
    public void markRoutingInstanceReplace() throws JNCException {
        markLeafReplace("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "merge".
     */
    public void markRoutingInstanceMerge() throws JNCException {
        markLeafMerge("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "create".
     */
    public void markRoutingInstanceCreate() throws JNCException {
        markLeafCreate("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "delete".
     */
    public void markRoutingInstanceDelete() throws JNCException {
        markLeafDelete("routingInstance");
    }

    /* Access methods for optional leaf child: "local-ip-address". */

    /**
     * Gets the value for child leaf "local-ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getLocalIpAddressValue() throws JNCException {
        return (IpAddress)getValue("local-ip-address");
    }

    /**
     * Sets the value for child leaf "local-ip-address",
     * using a JNC type value.
     * @param localIpAddressValue The value to set.
     * @param localIpAddressValue used during instantiation.
     */
    public void setLocalIpAddressValue(IpAddress localIpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-ip-address",
            localIpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-ip-address",
     * using a String value.
     * @param localIpAddressValue used during instantiation.
     */
    public void setLocalIpAddressValue(String localIpAddressValue)
            throws JNCException {
        setLocalIpAddressValue(new IpAddress(localIpAddressValue));
    }

    /**
     * Unsets the value for child leaf "local-ip-address".
     */
    public void unsetLocalIpAddressValue() throws JNCException {
        delete("local-ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-ip-address" leaf will not have a value.
     */
    public void addLocalIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-ip-address" with operation "replace".
     */
    public void markLocalIpAddressReplace() throws JNCException {
        markLeafReplace("localIpAddress");
    }

    /**
     * Marks the leaf "local-ip-address" with operation "merge".
     */
    public void markLocalIpAddressMerge() throws JNCException {
        markLeafMerge("localIpAddress");
    }

    /**
     * Marks the leaf "local-ip-address" with operation "create".
     */
    public void markLocalIpAddressCreate() throws JNCException {
        markLeafCreate("localIpAddress");
    }

    /**
     * Marks the leaf "local-ip-address" with operation "delete".
     */
    public void markLocalIpAddressDelete() throws JNCException {
        markLeafDelete("localIpAddress");
    }

    /* Access methods for optional leaf child: "remote-ip-address1". */

    /**
     * Gets the value for child leaf "remote-ip-address1".
     * @return The value of the leaf.
     */
    public IpAddress getRemoteIpAddress1Value() throws JNCException {
        return (IpAddress)getValue("remote-ip-address1");
    }

    /**
     * Sets the value for child leaf "remote-ip-address1",
     * using a JNC type value.
     * @param remoteIpAddress1Value The value to set.
     * @param remoteIpAddress1Value used during instantiation.
     */
    public void setRemoteIpAddress1Value(IpAddress remoteIpAddress1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-ip-address1",
            remoteIpAddress1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "remote-ip-address1",
     * using a String value.
     * @param remoteIpAddress1Value used during instantiation.
     */
    public void setRemoteIpAddress1Value(String remoteIpAddress1Value)
            throws JNCException {
        setRemoteIpAddress1Value(new IpAddress(remoteIpAddress1Value));
    }

    /**
     * Unsets the value for child leaf "remote-ip-address1".
     */
    public void unsetRemoteIpAddress1Value() throws JNCException {
        delete("remote-ip-address1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "remote-ip-address1" leaf will not have a value.
     */
    public void addRemoteIpAddress1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-ip-address1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "remote-ip-address1" with operation "replace".
     */
    public void markRemoteIpAddress1Replace() throws JNCException {
        markLeafReplace("remoteIpAddress1");
    }

    /**
     * Marks the leaf "remote-ip-address1" with operation "merge".
     */
    public void markRemoteIpAddress1Merge() throws JNCException {
        markLeafMerge("remoteIpAddress1");
    }

    /**
     * Marks the leaf "remote-ip-address1" with operation "create".
     */
    public void markRemoteIpAddress1Create() throws JNCException {
        markLeafCreate("remoteIpAddress1");
    }

    /**
     * Marks the leaf "remote-ip-address1" with operation "delete".
     */
    public void markRemoteIpAddress1Delete() throws JNCException {
        markLeafDelete("remoteIpAddress1");
    }

    /* Access methods for optional leaf child: "remote-port1". */

    /**
     * Gets the value for child leaf "remote-port1".
     * @return The value of the leaf.
     */
    public YangUInt16 getRemotePort1Value() throws JNCException {
        return (YangUInt16)getValue("remote-port1");
    }

    /**
     * Sets the value for child leaf "remote-port1",
     * using instance of generated typedef class.
     * @param remotePort1Value The value to set.
     * @param remotePort1Value used during instantiation.
     */
    public void setRemotePort1Value(YangUInt16 remotePort1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-port1",
            remotePort1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "remote-port1",
     * using Java primitive values.
     * @param remotePort1Value used during instantiation.
     */
    public void setRemotePort1Value(int remotePort1Value) throws JNCException {
        setRemotePort1Value(new YangUInt16(remotePort1Value));
    }

    /**
     * Sets the value for child leaf "remote-port1",
     * using a String value.
     * @param remotePort1Value used during instantiation.
     */
    public void setRemotePort1Value(String remotePort1Value)
            throws JNCException {
        setRemotePort1Value(new YangUInt16(remotePort1Value));
    }

    /**
     * Unsets the value for child leaf "remote-port1".
     */
    public void unsetRemotePort1Value() throws JNCException {
        delete("remote-port1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "remote-port1" leaf will not have a value.
     */
    public void addRemotePort1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-port1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "remote-port1" with operation "replace".
     */
    public void markRemotePort1Replace() throws JNCException {
        markLeafReplace("remotePort1");
    }

    /**
     * Marks the leaf "remote-port1" with operation "merge".
     */
    public void markRemotePort1Merge() throws JNCException {
        markLeafMerge("remotePort1");
    }

    /**
     * Marks the leaf "remote-port1" with operation "create".
     */
    public void markRemotePort1Create() throws JNCException {
        markLeafCreate("remotePort1");
    }

    /**
     * Marks the leaf "remote-port1" with operation "delete".
     */
    public void markRemotePort1Delete() throws JNCException {
        markLeafDelete("remotePort1");
    }

    /* Access methods for optional leaf child: "remote-ip-address2". */

    /**
     * Gets the value for child leaf "remote-ip-address2".
     * @return The value of the leaf.
     */
    public IpAddress getRemoteIpAddress2Value() throws JNCException {
        return (IpAddress)getValue("remote-ip-address2");
    }

    /**
     * Sets the value for child leaf "remote-ip-address2",
     * using a JNC type value.
     * @param remoteIpAddress2Value The value to set.
     * @param remoteIpAddress2Value used during instantiation.
     */
    public void setRemoteIpAddress2Value(IpAddress remoteIpAddress2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-ip-address2",
            remoteIpAddress2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "remote-ip-address2",
     * using a String value.
     * @param remoteIpAddress2Value used during instantiation.
     */
    public void setRemoteIpAddress2Value(String remoteIpAddress2Value)
            throws JNCException {
        setRemoteIpAddress2Value(new IpAddress(remoteIpAddress2Value));
    }

    /**
     * Unsets the value for child leaf "remote-ip-address2".
     */
    public void unsetRemoteIpAddress2Value() throws JNCException {
        delete("remote-ip-address2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "remote-ip-address2" leaf will not have a value.
     */
    public void addRemoteIpAddress2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-ip-address2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "remote-ip-address2" with operation "replace".
     */
    public void markRemoteIpAddress2Replace() throws JNCException {
        markLeafReplace("remoteIpAddress2");
    }

    /**
     * Marks the leaf "remote-ip-address2" with operation "merge".
     */
    public void markRemoteIpAddress2Merge() throws JNCException {
        markLeafMerge("remoteIpAddress2");
    }

    /**
     * Marks the leaf "remote-ip-address2" with operation "create".
     */
    public void markRemoteIpAddress2Create() throws JNCException {
        markLeafCreate("remoteIpAddress2");
    }

    /**
     * Marks the leaf "remote-ip-address2" with operation "delete".
     */
    public void markRemoteIpAddress2Delete() throws JNCException {
        markLeafDelete("remoteIpAddress2");
    }

    /* Access methods for optional leaf child: "remote-port2". */

    /**
     * Gets the value for child leaf "remote-port2".
     * @return The value of the leaf.
     */
    public YangUInt16 getRemotePort2Value() throws JNCException {
        return (YangUInt16)getValue("remote-port2");
    }

    /**
     * Sets the value for child leaf "remote-port2",
     * using instance of generated typedef class.
     * @param remotePort2Value The value to set.
     * @param remotePort2Value used during instantiation.
     */
    public void setRemotePort2Value(YangUInt16 remotePort2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-port2",
            remotePort2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "remote-port2",
     * using Java primitive values.
     * @param remotePort2Value used during instantiation.
     */
    public void setRemotePort2Value(int remotePort2Value) throws JNCException {
        setRemotePort2Value(new YangUInt16(remotePort2Value));
    }

    /**
     * Sets the value for child leaf "remote-port2",
     * using a String value.
     * @param remotePort2Value used during instantiation.
     */
    public void setRemotePort2Value(String remotePort2Value)
            throws JNCException {
        setRemotePort2Value(new YangUInt16(remotePort2Value));
    }

    /**
     * Unsets the value for child leaf "remote-port2".
     */
    public void unsetRemotePort2Value() throws JNCException {
        delete("remote-port2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "remote-port2" leaf will not have a value.
     */
    public void addRemotePort2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-port2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "remote-port2" with operation "replace".
     */
    public void markRemotePort2Replace() throws JNCException {
        markLeafReplace("remotePort2");
    }

    /**
     * Marks the leaf "remote-port2" with operation "merge".
     */
    public void markRemotePort2Merge() throws JNCException {
        markLeafMerge("remotePort2");
    }

    /**
     * Marks the leaf "remote-port2" with operation "create".
     */
    public void markRemotePort2Create() throws JNCException {
        markLeafCreate("remotePort2");
    }

    /**
     * Marks the leaf "remote-port2" with operation "delete".
     */
    public void markRemotePort2Delete() throws JNCException {
        markLeafDelete("remotePort2");
    }

    /* Access methods for optional leaf child: "dscp-mark". */

    /**
     * Gets the value for child leaf "dscp-mark".
     * @return The value of the leaf.
     */
    public YangString getDscpMarkValue() throws JNCException {
        return (YangString)getValue("dscp-mark");
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using instance of generated typedef class.
     * @param dscpMarkValue The value to set.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(YangString dscpMarkValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            dscpMarkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using a String value.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(String dscpMarkValue) throws JNCException {
        setDscpMarkValue(new YangString(dscpMarkValue));
    }

    /**
     * Unsets the value for child leaf "dscp-mark".
     */
    public void unsetDscpMarkValue() throws JNCException {
        delete("dscp-mark");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dscp-mark" leaf will not have a value.
     */
    public void addDscpMark() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dscp-mark" with operation "replace".
     */
    public void markDscpMarkReplace() throws JNCException {
        markLeafReplace("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "merge".
     */
    public void markDscpMarkMerge() throws JNCException {
        markLeafMerge("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "create".
     */
    public void markDscpMarkCreate() throws JNCException {
        markLeafCreate("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "delete".
     */
    public void markDscpMarkDelete() throws JNCException {
        markLeafDelete("dscpMark");
    }

    /* Access methods for optional leaf child: "streaming-fallback". */

    /**
     * Gets the value for child leaf "streaming-fallback".
     * @return The value of the leaf.
     */
    public YangString getStreamingFallbackValue() throws JNCException {
        return (YangString)getValue("streaming-fallback");
    }

    /**
     * Sets the value for child leaf "streaming-fallback",
     * using instance of generated typedef class.
     * @param streamingFallbackValue The value to set.
     * @param streamingFallbackValue used during instantiation.
     */
    public void setStreamingFallbackValue(YangString streamingFallbackValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "streaming-fallback",
            streamingFallbackValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "streaming-fallback",
     * using a String value.
     * @param streamingFallbackValue used during instantiation.
     */
    public void setStreamingFallbackValue(String streamingFallbackValue)
            throws JNCException {
        setStreamingFallbackValue(new YangString(streamingFallbackValue));
    }

    /**
     * Unsets the value for child leaf "streaming-fallback".
     */
    public void unsetStreamingFallbackValue() throws JNCException {
        delete("streaming-fallback");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "streaming-fallback" leaf will not have a value.
     */
    public void addStreamingFallback() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "streaming-fallback",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "streaming-fallback" with operation "replace".
     */
    public void markStreamingFallbackReplace() throws JNCException {
        markLeafReplace("streamingFallback");
    }

    /**
     * Marks the leaf "streaming-fallback" with operation "merge".
     */
    public void markStreamingFallbackMerge() throws JNCException {
        markLeafMerge("streamingFallback");
    }

    /**
     * Marks the leaf "streaming-fallback" with operation "create".
     */
    public void markStreamingFallbackCreate() throws JNCException {
        markLeafCreate("streamingFallback");
    }

    /**
     * Marks the leaf "streaming-fallback" with operation "delete".
     */
    public void markStreamingFallbackDelete() throws JNCException {
        markLeafDelete("streamingFallback");
    }

    /* Access methods for optional leaf child: "service-id". */

    /**
     * Gets the value for child leaf "service-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getServiceIdValue() throws JNCException {
        return (YangUInt16)getValue("service-id");
    }

    /**
     * Sets the value for child leaf "service-id",
     * using instance of generated typedef class.
     * @param serviceIdValue The value to set.
     * @param serviceIdValue used during instantiation.
     */
    public void setServiceIdValue(YangUInt16 serviceIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service-id",
            serviceIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service-id",
     * using Java primitive values.
     * @param serviceIdValue used during instantiation.
     */
    public void setServiceIdValue(int serviceIdValue) throws JNCException {
        setServiceIdValue(new YangUInt16(serviceIdValue));
    }

    /**
     * Sets the value for child leaf "service-id",
     * using a String value.
     * @param serviceIdValue used during instantiation.
     */
    public void setServiceIdValue(String serviceIdValue) throws JNCException {
        setServiceIdValue(new YangUInt16(serviceIdValue));
    }

    /**
     * Unsets the value for child leaf "service-id".
     */
    public void unsetServiceIdValue() throws JNCException {
        delete("service-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service-id" leaf will not have a value.
     */
    public void addServiceId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service-id" with operation "replace".
     */
    public void markServiceIdReplace() throws JNCException {
        markLeafReplace("serviceId");
    }

    /**
     * Marks the leaf "service-id" with operation "merge".
     */
    public void markServiceIdMerge() throws JNCException {
        markLeafMerge("serviceId");
    }

    /**
     * Marks the leaf "service-id" with operation "create".
     */
    public void markServiceIdCreate() throws JNCException {
        markLeafCreate("serviceId");
    }

    /**
     * Marks the leaf "service-id" with operation "delete".
     */
    public void markServiceIdDelete() throws JNCException {
        markLeafDelete("serviceId");
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "local-port". */

    /**
     * Gets the value for child leaf "local-port".
     * @return The value of the leaf.
     */
    public YangUInt16 getLocalPortValue() throws JNCException {
        return (YangUInt16)getValue("local-port");
    }

    /**
     * Sets the value for child leaf "local-port",
     * using instance of generated typedef class.
     * @param localPortValue The value to set.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(YangUInt16 localPortValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-port",
            localPortValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-port",
     * using Java primitive values.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(int localPortValue) throws JNCException {
        setLocalPortValue(new YangUInt16(localPortValue));
    }

    /**
     * Sets the value for child leaf "local-port",
     * using a String value.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(String localPortValue) throws JNCException {
        setLocalPortValue(new YangUInt16(localPortValue));
    }

    /**
     * Unsets the value for child leaf "local-port".
     */
    public void unsetLocalPortValue() throws JNCException {
        delete("local-port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-port" leaf will not have a value.
     */
    public void addLocalPort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-port" with operation "replace".
     */
    public void markLocalPortReplace() throws JNCException {
        markLeafReplace("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "merge".
     */
    public void markLocalPortMerge() throws JNCException {
        markLeafMerge("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "create".
     */
    public void markLocalPortCreate() throws JNCException {
        markLeafCreate("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "delete".
     */
    public void markLocalPortDelete() throws JNCException {
        markLeafDelete("localPort");
    }

    /* Access methods for optional leaf child: "remote-server-1". */

    /**
     * Gets the value for child leaf "remote-server-1".
     * @return The value of the leaf.
     */
    public YangString getRemoteServer1Value() throws JNCException {
        return (YangString)getValue("remote-server-1");
    }

    /**
     * Sets the value for child leaf "remote-server-1",
     * using instance of generated typedef class.
     * @param remoteServer1Value The value to set.
     * @param remoteServer1Value used during instantiation.
     */
    public void setRemoteServer1Value(YangString remoteServer1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-server-1",
            remoteServer1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "remote-server-1",
     * using a String value.
     * @param remoteServer1Value used during instantiation.
     */
    public void setRemoteServer1Value(String remoteServer1Value)
            throws JNCException {
        setRemoteServer1Value(new YangString(remoteServer1Value));
    }

    /**
     * Unsets the value for child leaf "remote-server-1".
     */
    public void unsetRemoteServer1Value() throws JNCException {
        delete("remote-server-1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "remote-server-1" leaf will not have a value.
     */
    public void addRemoteServer1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-server-1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "remote-server-1" with operation "replace".
     */
    public void markRemoteServer1Replace() throws JNCException {
        markLeafReplace("remoteServer1");
    }

    /**
     * Marks the leaf "remote-server-1" with operation "merge".
     */
    public void markRemoteServer1Merge() throws JNCException {
        markLeafMerge("remoteServer1");
    }

    /**
     * Marks the leaf "remote-server-1" with operation "create".
     */
    public void markRemoteServer1Create() throws JNCException {
        markLeafCreate("remoteServer1");
    }

    /**
     * Marks the leaf "remote-server-1" with operation "delete".
     */
    public void markRemoteServer1Delete() throws JNCException {
        markLeafDelete("remoteServer1");
    }

    /* Access methods for optional leaf child: "remote-server-2". */

    /**
     * Gets the value for child leaf "remote-server-2".
     * @return The value of the leaf.
     */
    public YangString getRemoteServer2Value() throws JNCException {
        return (YangString)getValue("remote-server-2");
    }

    /**
     * Sets the value for child leaf "remote-server-2",
     * using instance of generated typedef class.
     * @param remoteServer2Value The value to set.
     * @param remoteServer2Value used during instantiation.
     */
    public void setRemoteServer2Value(YangString remoteServer2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-server-2",
            remoteServer2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "remote-server-2",
     * using a String value.
     * @param remoteServer2Value used during instantiation.
     */
    public void setRemoteServer2Value(String remoteServer2Value)
            throws JNCException {
        setRemoteServer2Value(new YangString(remoteServer2Value));
    }

    /**
     * Unsets the value for child leaf "remote-server-2".
     */
    public void unsetRemoteServer2Value() throws JNCException {
        delete("remote-server-2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "remote-server-2" leaf will not have a value.
     */
    public void addRemoteServer2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-server-2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "remote-server-2" with operation "replace".
     */
    public void markRemoteServer2Replace() throws JNCException {
        markLeafReplace("remoteServer2");
    }

    /**
     * Marks the leaf "remote-server-2" with operation "merge".
     */
    public void markRemoteServer2Merge() throws JNCException {
        markLeafMerge("remoteServer2");
    }

    /**
     * Marks the leaf "remote-server-2" with operation "create".
     */
    public void markRemoteServer2Create() throws JNCException {
        markLeafCreate("remoteServer2");
    }

    /**
     * Marks the leaf "remote-server-2" with operation "delete".
     */
    public void markRemoteServer2Delete() throws JNCException {
        markLeafDelete("remoteServer2");
    }

    /* Access methods for optional leaf child: "tx-pkt". */

    /**
     * Gets the value for child leaf "tx-pkt".
     * @return The value of the leaf.
     */
    public YangString getTxPktValue() throws JNCException {
        return (YangString)getValue("tx-pkt");
    }

    /**
     * Sets the value for child leaf "tx-pkt",
     * using instance of generated typedef class.
     * @param txPktValue The value to set.
     * @param txPktValue used during instantiation.
     */
    public void setTxPktValue(YangString txPktValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tx-pkt",
            txPktValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tx-pkt",
     * using a String value.
     * @param txPktValue used during instantiation.
     */
    public void setTxPktValue(String txPktValue) throws JNCException {
        setTxPktValue(new YangString(txPktValue));
    }

    /**
     * Unsets the value for child leaf "tx-pkt".
     */
    public void unsetTxPktValue() throws JNCException {
        delete("tx-pkt");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tx-pkt" leaf will not have a value.
     */
    public void addTxPkt() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tx-pkt",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tx-pkt" with operation "replace".
     */
    public void markTxPktReplace() throws JNCException {
        markLeafReplace("txPkt");
    }

    /**
     * Marks the leaf "tx-pkt" with operation "merge".
     */
    public void markTxPktMerge() throws JNCException {
        markLeafMerge("txPkt");
    }

    /**
     * Marks the leaf "tx-pkt" with operation "create".
     */
    public void markTxPktCreate() throws JNCException {
        markLeafCreate("txPkt");
    }

    /**
     * Marks the leaf "tx-pkt" with operation "delete".
     */
    public void markTxPktDelete() throws JNCException {
        markLeafDelete("txPkt");
    }

    /* Access methods for optional leaf child: "rx-pkt". */

    /**
     * Gets the value for child leaf "rx-pkt".
     * @return The value of the leaf.
     */
    public YangString getRxPktValue() throws JNCException {
        return (YangString)getValue("rx-pkt");
    }

    /**
     * Sets the value for child leaf "rx-pkt",
     * using instance of generated typedef class.
     * @param rxPktValue The value to set.
     * @param rxPktValue used during instantiation.
     */
    public void setRxPktValue(YangString rxPktValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rx-pkt",
            rxPktValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rx-pkt",
     * using a String value.
     * @param rxPktValue used during instantiation.
     */
    public void setRxPktValue(String rxPktValue) throws JNCException {
        setRxPktValue(new YangString(rxPktValue));
    }

    /**
     * Unsets the value for child leaf "rx-pkt".
     */
    public void unsetRxPktValue() throws JNCException {
        delete("rx-pkt");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rx-pkt" leaf will not have a value.
     */
    public void addRxPkt() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rx-pkt",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rx-pkt" with operation "replace".
     */
    public void markRxPktReplace() throws JNCException {
        markLeafReplace("rxPkt");
    }

    /**
     * Marks the leaf "rx-pkt" with operation "merge".
     */
    public void markRxPktMerge() throws JNCException {
        markLeafMerge("rxPkt");
    }

    /**
     * Marks the leaf "rx-pkt" with operation "create".
     */
    public void markRxPktCreate() throws JNCException {
        markLeafCreate("rxPkt");
    }

    /**
     * Marks the leaf "rx-pkt" with operation "delete".
     */
    public void markRxPktDelete() throws JNCException {
        markLeafDelete("rxPkt");
    }

    /* Access methods for optional leaf child: "tx-rec". */

    /**
     * Gets the value for child leaf "tx-rec".
     * @return The value of the leaf.
     */
    public YangString getTxRecValue() throws JNCException {
        return (YangString)getValue("tx-rec");
    }

    /**
     * Sets the value for child leaf "tx-rec",
     * using instance of generated typedef class.
     * @param txRecValue The value to set.
     * @param txRecValue used during instantiation.
     */
    public void setTxRecValue(YangString txRecValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tx-rec",
            txRecValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tx-rec",
     * using a String value.
     * @param txRecValue used during instantiation.
     */
    public void setTxRecValue(String txRecValue) throws JNCException {
        setTxRecValue(new YangString(txRecValue));
    }

    /**
     * Unsets the value for child leaf "tx-rec".
     */
    public void unsetTxRecValue() throws JNCException {
        delete("tx-rec");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tx-rec" leaf will not have a value.
     */
    public void addTxRec() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tx-rec",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tx-rec" with operation "replace".
     */
    public void markTxRecReplace() throws JNCException {
        markLeafReplace("txRec");
    }

    /**
     * Marks the leaf "tx-rec" with operation "merge".
     */
    public void markTxRecMerge() throws JNCException {
        markLeafMerge("txRec");
    }

    /**
     * Marks the leaf "tx-rec" with operation "create".
     */
    public void markTxRecCreate() throws JNCException {
        markLeafCreate("txRec");
    }

    /**
     * Marks the leaf "tx-rec" with operation "delete".
     */
    public void markTxRecDelete() throws JNCException {
        markLeafDelete("txRec");
    }

    /* Access methods for optional leaf child: "drop-rec". */

    /**
     * Gets the value for child leaf "drop-rec".
     * @return The value of the leaf.
     */
    public YangString getDropRecValue() throws JNCException {
        return (YangString)getValue("drop-rec");
    }

    /**
     * Sets the value for child leaf "drop-rec",
     * using instance of generated typedef class.
     * @param dropRecValue The value to set.
     * @param dropRecValue used during instantiation.
     */
    public void setDropRecValue(YangString dropRecValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "drop-rec",
            dropRecValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "drop-rec",
     * using a String value.
     * @param dropRecValue used during instantiation.
     */
    public void setDropRecValue(String dropRecValue) throws JNCException {
        setDropRecValue(new YangString(dropRecValue));
    }

    /**
     * Unsets the value for child leaf "drop-rec".
     */
    public void unsetDropRecValue() throws JNCException {
        delete("drop-rec");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "drop-rec" leaf will not have a value.
     */
    public void addDropRec() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "drop-rec",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "drop-rec" with operation "replace".
     */
    public void markDropRecReplace() throws JNCException {
        markLeafReplace("dropRec");
    }

    /**
     * Marks the leaf "drop-rec" with operation "merge".
     */
    public void markDropRecMerge() throws JNCException {
        markLeafMerge("dropRec");
    }

    /**
     * Marks the leaf "drop-rec" with operation "create".
     */
    public void markDropRecCreate() throws JNCException {
        markLeafCreate("dropRec");
    }

    /**
     * Marks the leaf "drop-rec" with operation "delete".
     */
    public void markDropRecDelete() throws JNCException {
        markLeafDelete("dropRec");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
