/* 
 * @(#)AgwCsl.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.csl;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/csl/agw-csl"
 * <p>
 * See line 26 in
 * cslConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class AgwCsl extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty AgwCsl object.
     */
    public AgwCsl() {
        super(Epc.NAMESPACE, "agw-csl");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public AgwCsl clone() {
        return (AgwCsl)cloneContent(new AgwCsl());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public AgwCsl cloneShallow() {
        return (AgwCsl)cloneShallowContent(new AgwCsl());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "pdnconn-events-mme",
            "bearer-events-mme",
            "mobility-events-mme",
            "radiobearer-events-mme",
            "file-creation-period",
            "file-retention-period",
            "max-records-per-file",
            "triggers-mme",
            "max-records-per-period",
        };
    }

    /* Access methods for optional leaf child: "pdnconn-events-mme". */

    /**
     * Gets the value for child leaf "pdnconn-events-mme".
     * @return The value of the leaf.
     */
    public YangBoolean getPdnconnEventsMmeValue() throws JNCException {
        YangBoolean pdnconnEventsMme = (YangBoolean)getValue("pdnconn-events-mme");
        if (pdnconnEventsMme == null) {
            pdnconnEventsMme = new YangBoolean("true");  // default
        }
        return pdnconnEventsMme;
    }

    /**
     * Sets the value for child leaf "pdnconn-events-mme",
     * using instance of generated typedef class.
     * @param pdnconnEventsMmeValue The value to set.
     * @param pdnconnEventsMmeValue used during instantiation.
     */
    public void setPdnconnEventsMmeValue(YangBoolean pdnconnEventsMmeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdnconn-events-mme",
            pdnconnEventsMmeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pdnconn-events-mme",
     * using Java primitive values.
     * @param pdnconnEventsMmeValue used during instantiation.
     */
    public void setPdnconnEventsMmeValue(Boolean pdnconnEventsMmeValue)
            throws JNCException {
        setPdnconnEventsMmeValue(new YangBoolean(pdnconnEventsMmeValue));
    }

    /**
     * Sets the value for child leaf "pdnconn-events-mme",
     * using a String value.
     * @param pdnconnEventsMmeValue used during instantiation.
     */
    public void setPdnconnEventsMmeValue(String pdnconnEventsMmeValue)
            throws JNCException {
        setPdnconnEventsMmeValue(new YangBoolean(pdnconnEventsMmeValue));
    }

    /**
     * Unsets the value for child leaf "pdnconn-events-mme".
     */
    public void unsetPdnconnEventsMmeValue() throws JNCException {
        delete("pdnconn-events-mme");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pdnconn-events-mme" leaf will not have a value.
     */
    public void addPdnconnEventsMme() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdnconn-events-mme",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pdnconn-events-mme" with operation "replace".
     */
    public void markPdnconnEventsMmeReplace() throws JNCException {
        markLeafReplace("pdnconnEventsMme");
    }

    /**
     * Marks the leaf "pdnconn-events-mme" with operation "merge".
     */
    public void markPdnconnEventsMmeMerge() throws JNCException {
        markLeafMerge("pdnconnEventsMme");
    }

    /**
     * Marks the leaf "pdnconn-events-mme" with operation "create".
     */
    public void markPdnconnEventsMmeCreate() throws JNCException {
        markLeafCreate("pdnconnEventsMme");
    }

    /**
     * Marks the leaf "pdnconn-events-mme" with operation "delete".
     */
    public void markPdnconnEventsMmeDelete() throws JNCException {
        markLeafDelete("pdnconnEventsMme");
    }

    /* Access methods for optional leaf child: "bearer-events-mme". */

    /**
     * Gets the value for child leaf "bearer-events-mme".
     * @return The value of the leaf.
     */
    public YangBoolean getBearerEventsMmeValue() throws JNCException {
        YangBoolean bearerEventsMme = (YangBoolean)getValue("bearer-events-mme");
        if (bearerEventsMme == null) {
            bearerEventsMme = new YangBoolean("true");  // default
        }
        return bearerEventsMme;
    }

    /**
     * Sets the value for child leaf "bearer-events-mme",
     * using instance of generated typedef class.
     * @param bearerEventsMmeValue The value to set.
     * @param bearerEventsMmeValue used during instantiation.
     */
    public void setBearerEventsMmeValue(YangBoolean bearerEventsMmeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bearer-events-mme",
            bearerEventsMmeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bearer-events-mme",
     * using Java primitive values.
     * @param bearerEventsMmeValue used during instantiation.
     */
    public void setBearerEventsMmeValue(Boolean bearerEventsMmeValue)
            throws JNCException {
        setBearerEventsMmeValue(new YangBoolean(bearerEventsMmeValue));
    }

    /**
     * Sets the value for child leaf "bearer-events-mme",
     * using a String value.
     * @param bearerEventsMmeValue used during instantiation.
     */
    public void setBearerEventsMmeValue(String bearerEventsMmeValue)
            throws JNCException {
        setBearerEventsMmeValue(new YangBoolean(bearerEventsMmeValue));
    }

    /**
     * Unsets the value for child leaf "bearer-events-mme".
     */
    public void unsetBearerEventsMmeValue() throws JNCException {
        delete("bearer-events-mme");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bearer-events-mme" leaf will not have a value.
     */
    public void addBearerEventsMme() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bearer-events-mme",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bearer-events-mme" with operation "replace".
     */
    public void markBearerEventsMmeReplace() throws JNCException {
        markLeafReplace("bearerEventsMme");
    }

    /**
     * Marks the leaf "bearer-events-mme" with operation "merge".
     */
    public void markBearerEventsMmeMerge() throws JNCException {
        markLeafMerge("bearerEventsMme");
    }

    /**
     * Marks the leaf "bearer-events-mme" with operation "create".
     */
    public void markBearerEventsMmeCreate() throws JNCException {
        markLeafCreate("bearerEventsMme");
    }

    /**
     * Marks the leaf "bearer-events-mme" with operation "delete".
     */
    public void markBearerEventsMmeDelete() throws JNCException {
        markLeafDelete("bearerEventsMme");
    }

    /* Access methods for optional leaf child: "mobility-events-mme". */

    /**
     * Gets the value for child leaf "mobility-events-mme".
     * @return The value of the leaf.
     */
    public YangBoolean getMobilityEventsMmeValue() throws JNCException {
        YangBoolean mobilityEventsMme = (YangBoolean)getValue("mobility-events-mme");
        if (mobilityEventsMme == null) {
            mobilityEventsMme = new YangBoolean("true");  // default
        }
        return mobilityEventsMme;
    }

    /**
     * Sets the value for child leaf "mobility-events-mme",
     * using instance of generated typedef class.
     * @param mobilityEventsMmeValue The value to set.
     * @param mobilityEventsMmeValue used during instantiation.
     */
    public void setMobilityEventsMmeValue(YangBoolean mobilityEventsMmeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mobility-events-mme",
            mobilityEventsMmeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mobility-events-mme",
     * using Java primitive values.
     * @param mobilityEventsMmeValue used during instantiation.
     */
    public void setMobilityEventsMmeValue(Boolean mobilityEventsMmeValue)
            throws JNCException {
        setMobilityEventsMmeValue(new YangBoolean(mobilityEventsMmeValue));
    }

    /**
     * Sets the value for child leaf "mobility-events-mme",
     * using a String value.
     * @param mobilityEventsMmeValue used during instantiation.
     */
    public void setMobilityEventsMmeValue(String mobilityEventsMmeValue)
            throws JNCException {
        setMobilityEventsMmeValue(new YangBoolean(mobilityEventsMmeValue));
    }

    /**
     * Unsets the value for child leaf "mobility-events-mme".
     */
    public void unsetMobilityEventsMmeValue() throws JNCException {
        delete("mobility-events-mme");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mobility-events-mme" leaf will not have a value.
     */
    public void addMobilityEventsMme() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mobility-events-mme",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mobility-events-mme" with operation "replace".
     */
    public void markMobilityEventsMmeReplace() throws JNCException {
        markLeafReplace("mobilityEventsMme");
    }

    /**
     * Marks the leaf "mobility-events-mme" with operation "merge".
     */
    public void markMobilityEventsMmeMerge() throws JNCException {
        markLeafMerge("mobilityEventsMme");
    }

    /**
     * Marks the leaf "mobility-events-mme" with operation "create".
     */
    public void markMobilityEventsMmeCreate() throws JNCException {
        markLeafCreate("mobilityEventsMme");
    }

    /**
     * Marks the leaf "mobility-events-mme" with operation "delete".
     */
    public void markMobilityEventsMmeDelete() throws JNCException {
        markLeafDelete("mobilityEventsMme");
    }

    /* Access methods for optional leaf child: "radiobearer-events-mme". */

    /**
     * Gets the value for child leaf "radiobearer-events-mme".
     * @return The value of the leaf.
     */
    public YangBoolean getRadiobearerEventsMmeValue() throws JNCException {
        YangBoolean radiobearerEventsMme = (YangBoolean)getValue("radiobearer-events-mme");
        if (radiobearerEventsMme == null) {
            radiobearerEventsMme = new YangBoolean("true");  // default
        }
        return radiobearerEventsMme;
    }

    /**
     * Sets the value for child leaf "radiobearer-events-mme",
     * using instance of generated typedef class.
     * @param radiobearerEventsMmeValue The value to set.
     * @param radiobearerEventsMmeValue used during instantiation.
     */
    public void setRadiobearerEventsMmeValue(YangBoolean radiobearerEventsMmeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "radiobearer-events-mme",
            radiobearerEventsMmeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "radiobearer-events-mme",
     * using Java primitive values.
     * @param radiobearerEventsMmeValue used during instantiation.
     */
    public void setRadiobearerEventsMmeValue(Boolean radiobearerEventsMmeValue)
            throws JNCException {
        setRadiobearerEventsMmeValue(new YangBoolean(radiobearerEventsMmeValue));
    }

    /**
     * Sets the value for child leaf "radiobearer-events-mme",
     * using a String value.
     * @param radiobearerEventsMmeValue used during instantiation.
     */
    public void setRadiobearerEventsMmeValue(String radiobearerEventsMmeValue)
            throws JNCException {
        setRadiobearerEventsMmeValue(new YangBoolean(radiobearerEventsMmeValue));
    }

    /**
     * Unsets the value for child leaf "radiobearer-events-mme".
     */
    public void unsetRadiobearerEventsMmeValue() throws JNCException {
        delete("radiobearer-events-mme");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "radiobearer-events-mme" leaf will not have a value.
     */
    public void addRadiobearerEventsMme() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "radiobearer-events-mme",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "radiobearer-events-mme" with operation "replace".
     */
    public void markRadiobearerEventsMmeReplace() throws JNCException {
        markLeafReplace("radiobearerEventsMme");
    }

    /**
     * Marks the leaf "radiobearer-events-mme" with operation "merge".
     */
    public void markRadiobearerEventsMmeMerge() throws JNCException {
        markLeafMerge("radiobearerEventsMme");
    }

    /**
     * Marks the leaf "radiobearer-events-mme" with operation "create".
     */
    public void markRadiobearerEventsMmeCreate() throws JNCException {
        markLeafCreate("radiobearerEventsMme");
    }

    /**
     * Marks the leaf "radiobearer-events-mme" with operation "delete".
     */
    public void markRadiobearerEventsMmeDelete() throws JNCException {
        markLeafDelete("radiobearerEventsMme");
    }

    /* Access methods for optional leaf child: "file-creation-period". */

    /**
     * Gets the value for child leaf "file-creation-period".
     * @return The value of the leaf.
     */
    public YangUInt16 getFileCreationPeriodValue() throws JNCException {
        YangUInt16 fileCreationPeriod = (YangUInt16)getValue("file-creation-period");
        if (fileCreationPeriod == null) {
            fileCreationPeriod = new YangUInt16("30");  // default
        }
        return fileCreationPeriod;
    }

    /**
     * Sets the value for child leaf "file-creation-period",
     * using instance of generated typedef class.
     * @param fileCreationPeriodValue The value to set.
     * @param fileCreationPeriodValue used during instantiation.
     */
    public void setFileCreationPeriodValue(YangUInt16 fileCreationPeriodValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "file-creation-period",
            fileCreationPeriodValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "file-creation-period",
     * using Java primitive values.
     * @param fileCreationPeriodValue used during instantiation.
     */
    public void setFileCreationPeriodValue(int fileCreationPeriodValue)
            throws JNCException {
        setFileCreationPeriodValue(new YangUInt16(fileCreationPeriodValue));
    }

    /**
     * Sets the value for child leaf "file-creation-period",
     * using a String value.
     * @param fileCreationPeriodValue used during instantiation.
     */
    public void setFileCreationPeriodValue(String fileCreationPeriodValue)
            throws JNCException {
        setFileCreationPeriodValue(new YangUInt16(fileCreationPeriodValue));
    }

    /**
     * Unsets the value for child leaf "file-creation-period".
     */
    public void unsetFileCreationPeriodValue() throws JNCException {
        delete("file-creation-period");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "file-creation-period" leaf will not have a value.
     */
    public void addFileCreationPeriod() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "file-creation-period",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "file-creation-period" with operation "replace".
     */
    public void markFileCreationPeriodReplace() throws JNCException {
        markLeafReplace("fileCreationPeriod");
    }

    /**
     * Marks the leaf "file-creation-period" with operation "merge".
     */
    public void markFileCreationPeriodMerge() throws JNCException {
        markLeafMerge("fileCreationPeriod");
    }

    /**
     * Marks the leaf "file-creation-period" with operation "create".
     */
    public void markFileCreationPeriodCreate() throws JNCException {
        markLeafCreate("fileCreationPeriod");
    }

    /**
     * Marks the leaf "file-creation-period" with operation "delete".
     */
    public void markFileCreationPeriodDelete() throws JNCException {
        markLeafDelete("fileCreationPeriod");
    }

    /* Access methods for optional leaf child: "file-retention-period". */

    /**
     * Gets the value for child leaf "file-retention-period".
     * @return The value of the leaf.
     */
    public YangUInt8 getFileRetentionPeriodValue() throws JNCException {
        YangUInt8 fileRetentionPeriod = (YangUInt8)getValue("file-retention-period");
        if (fileRetentionPeriod == null) {
            fileRetentionPeriod = new YangUInt8("60");  // default
        }
        return fileRetentionPeriod;
    }

    /**
     * Sets the value for child leaf "file-retention-period",
     * using instance of generated typedef class.
     * @param fileRetentionPeriodValue The value to set.
     * @param fileRetentionPeriodValue used during instantiation.
     */
    public void setFileRetentionPeriodValue(YangUInt8 fileRetentionPeriodValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "file-retention-period",
            fileRetentionPeriodValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "file-retention-period",
     * using Java primitive values.
     * @param fileRetentionPeriodValue used during instantiation.
     */
    public void setFileRetentionPeriodValue(short fileRetentionPeriodValue)
            throws JNCException {
        setFileRetentionPeriodValue(new YangUInt8(fileRetentionPeriodValue));
    }

    /**
     * Sets the value for child leaf "file-retention-period",
     * using a String value.
     * @param fileRetentionPeriodValue used during instantiation.
     */
    public void setFileRetentionPeriodValue(String fileRetentionPeriodValue)
            throws JNCException {
        setFileRetentionPeriodValue(new YangUInt8(fileRetentionPeriodValue));
    }

    /**
     * Unsets the value for child leaf "file-retention-period".
     */
    public void unsetFileRetentionPeriodValue() throws JNCException {
        delete("file-retention-period");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "file-retention-period" leaf will not have a value.
     */
    public void addFileRetentionPeriod() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "file-retention-period",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "file-retention-period" with operation "replace".
     */
    public void markFileRetentionPeriodReplace() throws JNCException {
        markLeafReplace("fileRetentionPeriod");
    }

    /**
     * Marks the leaf "file-retention-period" with operation "merge".
     */
    public void markFileRetentionPeriodMerge() throws JNCException {
        markLeafMerge("fileRetentionPeriod");
    }

    /**
     * Marks the leaf "file-retention-period" with operation "create".
     */
    public void markFileRetentionPeriodCreate() throws JNCException {
        markLeafCreate("fileRetentionPeriod");
    }

    /**
     * Marks the leaf "file-retention-period" with operation "delete".
     */
    public void markFileRetentionPeriodDelete() throws JNCException {
        markLeafDelete("fileRetentionPeriod");
    }

    /* Access methods for optional leaf child: "max-records-per-file". */

    /**
     * Gets the value for child leaf "max-records-per-file".
     * @return The value of the leaf.
     */
    public YangUInt32 getMaxRecordsPerFileValue() throws JNCException {
        YangUInt32 maxRecordsPerFile = (YangUInt32)getValue("max-records-per-file");
        if (maxRecordsPerFile == null) {
            maxRecordsPerFile = new YangUInt32("780000");  // default
        }
        return maxRecordsPerFile;
    }

    /**
     * Sets the value for child leaf "max-records-per-file",
     * using instance of generated typedef class.
     * @param maxRecordsPerFileValue The value to set.
     * @param maxRecordsPerFileValue used during instantiation.
     */
    public void setMaxRecordsPerFileValue(YangUInt32 maxRecordsPerFileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-records-per-file",
            maxRecordsPerFileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-records-per-file",
     * using Java primitive values.
     * @param maxRecordsPerFileValue used during instantiation.
     */
    public void setMaxRecordsPerFileValue(long maxRecordsPerFileValue)
            throws JNCException {
        setMaxRecordsPerFileValue(new YangUInt32(maxRecordsPerFileValue));
    }

    /**
     * Sets the value for child leaf "max-records-per-file",
     * using a String value.
     * @param maxRecordsPerFileValue used during instantiation.
     */
    public void setMaxRecordsPerFileValue(String maxRecordsPerFileValue)
            throws JNCException {
        setMaxRecordsPerFileValue(new YangUInt32(maxRecordsPerFileValue));
    }

    /**
     * Unsets the value for child leaf "max-records-per-file".
     */
    public void unsetMaxRecordsPerFileValue() throws JNCException {
        delete("max-records-per-file");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-records-per-file" leaf will not have a value.
     */
    public void addMaxRecordsPerFile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-records-per-file",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-records-per-file" with operation "replace".
     */
    public void markMaxRecordsPerFileReplace() throws JNCException {
        markLeafReplace("maxRecordsPerFile");
    }

    /**
     * Marks the leaf "max-records-per-file" with operation "merge".
     */
    public void markMaxRecordsPerFileMerge() throws JNCException {
        markLeafMerge("maxRecordsPerFile");
    }

    /**
     * Marks the leaf "max-records-per-file" with operation "create".
     */
    public void markMaxRecordsPerFileCreate() throws JNCException {
        markLeafCreate("maxRecordsPerFile");
    }

    /**
     * Marks the leaf "max-records-per-file" with operation "delete".
     */
    public void markMaxRecordsPerFileDelete() throws JNCException {
        markLeafDelete("maxRecordsPerFile");
    }

    /* Access methods for optional leaf child: "triggers-mme". */

    /**
     * Gets the value for child leaf "triggers-mme".
     * @return The value of the leaf.
     */
    public YangString getTriggersMmeValue() throws JNCException {
        return (YangString)getValue("triggers-mme");
    }

    /**
     * Sets the value for child leaf "triggers-mme",
     * using instance of generated typedef class.
     * @param triggersMmeValue The value to set.
     * @param triggersMmeValue used during instantiation.
     */
    public void setTriggersMmeValue(YangString triggersMmeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "triggers-mme",
            triggersMmeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "triggers-mme",
     * using a String value.
     * @param triggersMmeValue used during instantiation.
     */
    public void setTriggersMmeValue(String triggersMmeValue)
            throws JNCException {
        setTriggersMmeValue(new YangString(triggersMmeValue));
    }

    /**
     * Unsets the value for child leaf "triggers-mme".
     */
    public void unsetTriggersMmeValue() throws JNCException {
        delete("triggers-mme");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "triggers-mme" leaf will not have a value.
     */
    public void addTriggersMme() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "triggers-mme",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "triggers-mme" with operation "replace".
     */
    public void markTriggersMmeReplace() throws JNCException {
        markLeafReplace("triggersMme");
    }

    /**
     * Marks the leaf "triggers-mme" with operation "merge".
     */
    public void markTriggersMmeMerge() throws JNCException {
        markLeafMerge("triggersMme");
    }

    /**
     * Marks the leaf "triggers-mme" with operation "create".
     */
    public void markTriggersMmeCreate() throws JNCException {
        markLeafCreate("triggersMme");
    }

    /**
     * Marks the leaf "triggers-mme" with operation "delete".
     */
    public void markTriggersMmeDelete() throws JNCException {
        markLeafDelete("triggersMme");
    }

    /* Access methods for optional leaf child: "max-records-per-period". */

    /**
     * Gets the value for child leaf "max-records-per-period".
     * @return The value of the leaf.
     */
    public YangString getMaxRecordsPerPeriodValue() throws JNCException {
        YangString maxRecordsPerPeriod = (YangString)getValue("max-records-per-period");
        if (maxRecordsPerPeriod == null) {
            maxRecordsPerPeriod = new YangString("no-limit");  // default
        }
        return maxRecordsPerPeriod;
    }

    /**
     * Sets the value for child leaf "max-records-per-period",
     * using instance of generated typedef class.
     * @param maxRecordsPerPeriodValue The value to set.
     * @param maxRecordsPerPeriodValue used during instantiation.
     */
    public void setMaxRecordsPerPeriodValue(YangString maxRecordsPerPeriodValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-records-per-period",
            maxRecordsPerPeriodValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-records-per-period",
     * using a String value.
     * @param maxRecordsPerPeriodValue used during instantiation.
     */
    public void setMaxRecordsPerPeriodValue(String maxRecordsPerPeriodValue)
            throws JNCException {
        setMaxRecordsPerPeriodValue(new YangString(maxRecordsPerPeriodValue));
    }

    /**
     * Unsets the value for child leaf "max-records-per-period".
     */
    public void unsetMaxRecordsPerPeriodValue() throws JNCException {
        delete("max-records-per-period");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-records-per-period" leaf will not have a value.
     */
    public void addMaxRecordsPerPeriod() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-records-per-period",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-records-per-period" with operation "replace".
     */
    public void markMaxRecordsPerPeriodReplace() throws JNCException {
        markLeafReplace("maxRecordsPerPeriod");
    }

    /**
     * Marks the leaf "max-records-per-period" with operation "merge".
     */
    public void markMaxRecordsPerPeriodMerge() throws JNCException {
        markLeafMerge("maxRecordsPerPeriod");
    }

    /**
     * Marks the leaf "max-records-per-period" with operation "create".
     */
    public void markMaxRecordsPerPeriodCreate() throws JNCException {
        markLeafCreate("maxRecordsPerPeriod");
    }

    /**
     * Marks the leaf "max-records-per-period" with operation "delete".
     */
    public void markMaxRecordsPerPeriodDelete() throws JNCException {
        markLeafDelete("maxRecordsPerPeriod");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
