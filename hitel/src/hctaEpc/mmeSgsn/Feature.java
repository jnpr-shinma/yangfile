/* 
 * @(#)Feature.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeAdvancedTaMgmt;

import MmeEquipIdentityCheck;

import MmeFeatureControl;

import MmeImsEmergency;

import MmeLcs;

import MmePurgeTrigger;

import MmeS4Sgsn;

import NodeSet;

import SgsnSessionlessSubDetach;

import TrafficShaping;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/feature"
 * <p>
 * See line 45 in
 * featuresConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Feature extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-equip-identity-check".
     */
    public MmeEquipIdentityCheck mmeEquipIdentityCheck = null;

    /**
     * Field for child container "mme-advanced-ta-mgmt".
     */
    public MmeAdvancedTaMgmt mmeAdvancedTaMgmt = null;

    /**
     * Field for child container "traffic-shaping".
     */
    public TrafficShaping trafficShaping = null;

    /**
     * Field for child container "mme-lcs".
     */
    public MmeLcs mmeLcs = null;

    /**
     * Field for child container "sgsn-sessionless-sub-detach".
     */
    public SgsnSessionlessSubDetach sgsnSessionlessSubDetach = null;

    /**
     * Field for child container "mme-ims-emergency".
     */
    public MmeImsEmergency mmeImsEmergency = null;

    /**
     * Field for child container "mme-s4-sgsn".
     */
    public MmeS4Sgsn mmeS4Sgsn = null;

    /**
     * Constructor for an empty Feature object.
     */
    public Feature() {
        super(Epc.NAMESPACE, "feature");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Feature clone() {
        return (Feature)cloneContent(new Feature());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Feature cloneShallow() {
        return (Feature)cloneShallowContent(new Feature());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-feature-control",
            "mme-purge-trigger",
            "mme-equip-identity-check",
            "mme-advanced-ta-mgmt",
            "traffic-shaping",
            "mme-lcs",
            "sgsn-sessionless-sub-detach",
            "mme-ims-emergency",
            "mme-s4-sgsn",
        };
    }

    /* Access methods for list child: "mme-feature-control". */

    /**
     * Gets list entry "mmeFeatureControl", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeFeatureControl getMmeFeatureControl(YangEnumeration nameValue)
            throws JNCException {
        String path = "mme-feature-control[name='" + nameValue + "']";
        return (MmeFeatureControl)searchOne(path);
    }

    /**
     * Gets list entry "mmeFeatureControl", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeFeatureControl getMmeFeatureControl(String nameValue)
            throws JNCException {
        String path = "mme-feature-control[name='" + nameValue + "']";
        return (MmeFeatureControl)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-feature-control".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeFeatureControlIterator() {
        return new ElementChildrenIterator(children, "mme-feature-control");
    }

    /**
     * Adds list entry "mmeFeatureControl", using an existing object.
     * @param mmeFeatureControl The object to add.
     * @return The added child.
     */
    public MmeFeatureControl addMmeFeatureControl(MmeFeatureControl mmeFeatureControl)
            throws JNCException {
        insertChild(mmeFeatureControl, childrenNames());
        return mmeFeatureControl;
    }

    /**
     * Adds list entry "mmeFeatureControl", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeFeatureControl addMmeFeatureControl(YangEnumeration nameValue)
            throws JNCException {
        MmeFeatureControl mmeFeatureControl = new MmeFeatureControl(nameValue);
        return addMmeFeatureControl(mmeFeatureControl);
    }

    /**
     * Adds list entry "mmeFeatureControl", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeFeatureControl addMmeFeatureControl(String nameValue)
            throws JNCException {
        MmeFeatureControl mmeFeatureControl = new MmeFeatureControl(nameValue);
        return addMmeFeatureControl(mmeFeatureControl);
    }

    /**
     * Adds list entry "mmeFeatureControl".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeFeatureControl addMmeFeatureControl() throws JNCException {
        MmeFeatureControl mmeFeatureControl = new MmeFeatureControl();
        insertChild(mmeFeatureControl, childrenNames());
        return mmeFeatureControl;
    }

    /**
     * Deletes list entry "mmeFeatureControl", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeFeatureControl(YangEnumeration nameValue)
            throws JNCException {
        String path = "mme-feature-control[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeFeatureControl", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeFeatureControl(String nameValue) throws JNCException {
        String path = "mme-feature-control[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-purge-trigger". */

    /**
     * Gets list entry "mmePurgeTrigger", with specified keys.
     * @param detachTypeValue Key argument of child.
     * @param ueTypeValue Key argument of child.
     */
    public MmePurgeTrigger getMmePurgeTrigger(YangEnumeration detachTypeValue, YangEnumeration ueTypeValue)
            throws JNCException {
        String path = "mme-purge-trigger[detachType='" + detachTypeValue + "'][ueType='" + ueTypeValue + "']";
        return (MmePurgeTrigger)searchOne(path);
    }

    /**
     * Gets list entry "mmePurgeTrigger", with specified keys.
     * The keys are specified as strings.
     * @param detachTypeValue Key argument of child.
     * @param ueTypeValue Key argument of child.
     */
    public MmePurgeTrigger getMmePurgeTrigger(String detachTypeValue, String ueTypeValue)
            throws JNCException {
        String path = "mme-purge-trigger[detachType='" + detachTypeValue + "'][ueType='" + ueTypeValue + "']";
        return (MmePurgeTrigger)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-purge-trigger".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmePurgeTriggerIterator() {
        return new ElementChildrenIterator(children, "mme-purge-trigger");
    }

    /**
     * Adds list entry "mmePurgeTrigger", using an existing object.
     * @param mmePurgeTrigger The object to add.
     * @return The added child.
     */
    public MmePurgeTrigger addMmePurgeTrigger(MmePurgeTrigger mmePurgeTrigger)
            throws JNCException {
        insertChild(mmePurgeTrigger, childrenNames());
        return mmePurgeTrigger;
    }

    /**
     * Adds list entry "mmePurgeTrigger", with specified keys.
     * @param detachTypeValue Key argument of child.
     * @param ueTypeValue Key argument of child.
     * @return The added child.
     */
    public MmePurgeTrigger addMmePurgeTrigger(YangEnumeration detachTypeValue, YangEnumeration ueTypeValue)
            throws JNCException {
        MmePurgeTrigger mmePurgeTrigger = new MmePurgeTrigger(detachTypeValue, ueTypeValue);
        return addMmePurgeTrigger(mmePurgeTrigger);
    }

    /**
     * Adds list entry "mmePurgeTrigger", with specified keys.
     * The keys are specified as strings.
     * @param detachTypeValue Key argument of child.
     * @param ueTypeValue Key argument of child.
     * @return The added child.
     */
    public MmePurgeTrigger addMmePurgeTrigger(String detachTypeValue, String ueTypeValue)
            throws JNCException {
        MmePurgeTrigger mmePurgeTrigger = new MmePurgeTrigger(detachTypeValue, ueTypeValue);
        return addMmePurgeTrigger(mmePurgeTrigger);
    }

    /**
     * Adds list entry "mmePurgeTrigger".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmePurgeTrigger addMmePurgeTrigger() throws JNCException {
        MmePurgeTrigger mmePurgeTrigger = new MmePurgeTrigger();
        insertChild(mmePurgeTrigger, childrenNames());
        return mmePurgeTrigger;
    }

    /**
     * Deletes list entry "mmePurgeTrigger", with specified keys.
     * @param detachTypeValue Key argument of child.
     * @param ueTypeValue Key argument of child.
     */
    public void deleteMmePurgeTrigger(YangEnumeration detachTypeValue, YangEnumeration ueTypeValue)
            throws JNCException {
        String path = "mme-purge-trigger[detachType='" + detachTypeValue + "'][ueType='" + ueTypeValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmePurgeTrigger", with specified keys.
     * The keys are specified as strings.
     * @param detachTypeValue Key argument of child.
     * @param ueTypeValue Key argument of child.
     */
    public void deleteMmePurgeTrigger(String detachTypeValue, String ueTypeValue)
            throws JNCException {
        String path = "mme-purge-trigger[detachType='" + detachTypeValue + "'][ueType='" + ueTypeValue + "']";
        delete(path);
    }

    /* Access methods for container child: "mme-equip-identity-check". */

    /**
     * Adds container entry "mmeEquipIdentityCheck", using an existing object.
     * @param mmeEquipIdentityCheck The object to add.
     * @return The added child.
     */
    public MmeEquipIdentityCheck addMmeEquipIdentityCheck(MmeEquipIdentityCheck mmeEquipIdentityCheck)
            throws JNCException {
        this.mmeEquipIdentityCheck = mmeEquipIdentityCheck;
        insertChild(mmeEquipIdentityCheck, childrenNames());
        return mmeEquipIdentityCheck;
    }

    /**
     * Adds container entry "mmeEquipIdentityCheck".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeEquipIdentityCheck addMmeEquipIdentityCheck() throws JNCException {
        MmeEquipIdentityCheck mmeEquipIdentityCheck = new MmeEquipIdentityCheck();
        this.mmeEquipIdentityCheck = mmeEquipIdentityCheck;
        insertChild(mmeEquipIdentityCheck, childrenNames());
        return mmeEquipIdentityCheck;
    }

    /**
     * Deletes container entry "mmeEquipIdentityCheck".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeEquipIdentityCheck() throws JNCException {
        this.mmeEquipIdentityCheck = null;
        String path = "mme-equip-identity-check";
        return delete(path);
    }

    /* Access methods for container child: "mme-advanced-ta-mgmt". */

    /**
     * Adds container entry "mmeAdvancedTaMgmt", using an existing object.
     * @param mmeAdvancedTaMgmt The object to add.
     * @return The added child.
     */
    public MmeAdvancedTaMgmt addMmeAdvancedTaMgmt(MmeAdvancedTaMgmt mmeAdvancedTaMgmt)
            throws JNCException {
        this.mmeAdvancedTaMgmt = mmeAdvancedTaMgmt;
        insertChild(mmeAdvancedTaMgmt, childrenNames());
        return mmeAdvancedTaMgmt;
    }

    /**
     * Adds container entry "mmeAdvancedTaMgmt".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeAdvancedTaMgmt addMmeAdvancedTaMgmt() throws JNCException {
        MmeAdvancedTaMgmt mmeAdvancedTaMgmt = new MmeAdvancedTaMgmt();
        this.mmeAdvancedTaMgmt = mmeAdvancedTaMgmt;
        insertChild(mmeAdvancedTaMgmt, childrenNames());
        return mmeAdvancedTaMgmt;
    }

    /**
     * Deletes container entry "mmeAdvancedTaMgmt".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeAdvancedTaMgmt() throws JNCException {
        this.mmeAdvancedTaMgmt = null;
        String path = "mme-advanced-ta-mgmt";
        return delete(path);
    }

    /* Access methods for container child: "traffic-shaping". */

    /**
     * Adds container entry "trafficShaping", using an existing object.
     * @param trafficShaping The object to add.
     * @return The added child.
     */
    public TrafficShaping addTrafficShaping(TrafficShaping trafficShaping)
            throws JNCException {
        this.trafficShaping = trafficShaping;
        insertChild(trafficShaping, childrenNames());
        return trafficShaping;
    }

    /**
     * Adds container entry "trafficShaping".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public TrafficShaping addTrafficShaping() throws JNCException {
        TrafficShaping trafficShaping = new TrafficShaping();
        this.trafficShaping = trafficShaping;
        insertChild(trafficShaping, childrenNames());
        return trafficShaping;
    }

    /**
     * Deletes container entry "trafficShaping".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteTrafficShaping() throws JNCException {
        this.trafficShaping = null;
        String path = "traffic-shaping";
        return delete(path);
    }

    /* Access methods for container child: "mme-lcs". */

    /**
     * Adds container entry "mmeLcs", using an existing object.
     * @param mmeLcs The object to add.
     * @return The added child.
     */
    public MmeLcs addMmeLcs(MmeLcs mmeLcs) throws JNCException {
        this.mmeLcs = mmeLcs;
        insertChild(mmeLcs, childrenNames());
        return mmeLcs;
    }

    /**
     * Adds container entry "mmeLcs".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeLcs addMmeLcs() throws JNCException {
        MmeLcs mmeLcs = new MmeLcs();
        this.mmeLcs = mmeLcs;
        insertChild(mmeLcs, childrenNames());
        return mmeLcs;
    }

    /**
     * Deletes container entry "mmeLcs".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeLcs() throws JNCException {
        this.mmeLcs = null;
        String path = "mme-lcs";
        return delete(path);
    }

    /* Access methods for container child: "sgsn-sessionless-sub-detach". */

    /**
     * Adds container entry "sgsnSessionlessSubDetach", using an existing object.
     * @param sgsnSessionlessSubDetach The object to add.
     * @return The added child.
     */
    public SgsnSessionlessSubDetach addSgsnSessionlessSubDetach(SgsnSessionlessSubDetach sgsnSessionlessSubDetach)
            throws JNCException {
        this.sgsnSessionlessSubDetach = sgsnSessionlessSubDetach;
        insertChild(sgsnSessionlessSubDetach, childrenNames());
        return sgsnSessionlessSubDetach;
    }

    /**
     * Adds container entry "sgsnSessionlessSubDetach".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SgsnSessionlessSubDetach addSgsnSessionlessSubDetach()
            throws JNCException {
        SgsnSessionlessSubDetach sgsnSessionlessSubDetach = new SgsnSessionlessSubDetach();
        this.sgsnSessionlessSubDetach = sgsnSessionlessSubDetach;
        insertChild(sgsnSessionlessSubDetach, childrenNames());
        return sgsnSessionlessSubDetach;
    }

    /**
     * Deletes container entry "sgsnSessionlessSubDetach".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSgsnSessionlessSubDetach() throws JNCException {
        this.sgsnSessionlessSubDetach = null;
        String path = "sgsn-sessionless-sub-detach";
        return delete(path);
    }

    /* Access methods for container child: "mme-ims-emergency". */

    /**
     * Adds container entry "mmeImsEmergency", using an existing object.
     * @param mmeImsEmergency The object to add.
     * @return The added child.
     */
    public MmeImsEmergency addMmeImsEmergency(MmeImsEmergency mmeImsEmergency)
            throws JNCException {
        this.mmeImsEmergency = mmeImsEmergency;
        insertChild(mmeImsEmergency, childrenNames());
        return mmeImsEmergency;
    }

    /**
     * Adds container entry "mmeImsEmergency".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeImsEmergency addMmeImsEmergency() throws JNCException {
        MmeImsEmergency mmeImsEmergency = new MmeImsEmergency();
        this.mmeImsEmergency = mmeImsEmergency;
        insertChild(mmeImsEmergency, childrenNames());
        return mmeImsEmergency;
    }

    /**
     * Deletes container entry "mmeImsEmergency".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeImsEmergency() throws JNCException {
        this.mmeImsEmergency = null;
        String path = "mme-ims-emergency";
        return delete(path);
    }

    /* Access methods for container child: "mme-s4-sgsn". */

    /**
     * Adds container entry "mmeS4Sgsn", using an existing object.
     * @param mmeS4Sgsn The object to add.
     * @return The added child.
     */
    public MmeS4Sgsn addMmeS4Sgsn(MmeS4Sgsn mmeS4Sgsn) throws JNCException {
        this.mmeS4Sgsn = mmeS4Sgsn;
        insertChild(mmeS4Sgsn, childrenNames());
        return mmeS4Sgsn;
    }

    /**
     * Adds container entry "mmeS4Sgsn".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeS4Sgsn addMmeS4Sgsn() throws JNCException {
        MmeS4Sgsn mmeS4Sgsn = new MmeS4Sgsn();
        this.mmeS4Sgsn = mmeS4Sgsn;
        insertChild(mmeS4Sgsn, childrenNames());
        return mmeS4Sgsn;
    }

    /**
     * Deletes container entry "mmeS4Sgsn".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeS4Sgsn() throws JNCException {
        this.mmeS4Sgsn = null;
        String path = "mme-s4-sgsn";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeEquipIdentityCheck) mmeEquipIdentityCheck = (MmeEquipIdentityCheck)child;
        else if (child instanceof MmeAdvancedTaMgmt) mmeAdvancedTaMgmt = (MmeAdvancedTaMgmt)child;
        else if (child instanceof TrafficShaping) trafficShaping = (TrafficShaping)child;
        else if (child instanceof MmeLcs) mmeLcs = (MmeLcs)child;
        else if (child instanceof SgsnSessionlessSubDetach) sgsnSessionlessSubDetach = (SgsnSessionlessSubDetach)child;
        else if (child instanceof MmeImsEmergency) mmeImsEmergency = (MmeImsEmergency)child;
        else if (child instanceof MmeS4Sgsn) mmeS4Sgsn = (MmeS4Sgsn)child;
    }

}
