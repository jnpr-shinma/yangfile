/* 
 * @(#)SystemMtu.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.system;
import .hctaEpc.MtuType;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/system/system-mtu"
 * <p>
 * See line 48 in
 * mtuConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class SystemMtu extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty SystemMtu object.
     */
    public SystemMtu() {
        super(Epc.NAMESPACE, "system-mtu");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public SystemMtu clone() {
        return (SystemMtu)cloneContent(new SystemMtu());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public SystemMtu cloneShallow() {
        return (SystemMtu)cloneShallowContent(new SystemMtu());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mgmt-mtu",
            "inter-vm-mtu",
            "data-mtu",
            "external-if1-mtu",
            "external-if2-mtu",
        };
    }

    /* Access methods for optional leaf child: "mgmt-mtu". */

    /**
     * Gets the value for child leaf "mgmt-mtu".
     * @return The value of the leaf.
     */
    public MtuType getMgmtMtuValue() throws JNCException {
        MtuType mgmtMtu = (MtuType)getValue("mgmt-mtu");
        if (mgmtMtu == null) {
            mgmtMtu = new MtuType("1500");  // default
        }
        return mgmtMtu;
    }

    /**
     * Sets the value for child leaf "mgmt-mtu",
     * using a JNC type value.
     * @param mgmtMtuValue The value to set.
     * @param mgmtMtuValue used during instantiation.
     */
    public void setMgmtMtuValue(MtuType mgmtMtuValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mgmt-mtu",
            mgmtMtuValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mgmt-mtu",
     * using Java primitive values.
     * @param mgmtMtuValue used during instantiation.
     */
    public void setMgmtMtuValue(int mgmtMtuValue) throws JNCException {
        setMgmtMtuValue(new MtuType(mgmtMtuValue));
    }

    /**
     * Sets the value for child leaf "mgmt-mtu",
     * using a String value.
     * @param mgmtMtuValue used during instantiation.
     */
    public void setMgmtMtuValue(String mgmtMtuValue) throws JNCException {
        setMgmtMtuValue(new MtuType(mgmtMtuValue));
    }

    /**
     * Unsets the value for child leaf "mgmt-mtu".
     */
    public void unsetMgmtMtuValue() throws JNCException {
        delete("mgmt-mtu");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mgmt-mtu" leaf will not have a value.
     */
    public void addMgmtMtu() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mgmt-mtu",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mgmt-mtu" with operation "replace".
     */
    public void markMgmtMtuReplace() throws JNCException {
        markLeafReplace("mgmtMtu");
    }

    /**
     * Marks the leaf "mgmt-mtu" with operation "merge".
     */
    public void markMgmtMtuMerge() throws JNCException {
        markLeafMerge("mgmtMtu");
    }

    /**
     * Marks the leaf "mgmt-mtu" with operation "create".
     */
    public void markMgmtMtuCreate() throws JNCException {
        markLeafCreate("mgmtMtu");
    }

    /**
     * Marks the leaf "mgmt-mtu" with operation "delete".
     */
    public void markMgmtMtuDelete() throws JNCException {
        markLeafDelete("mgmtMtu");
    }

    /* Access methods for optional leaf child: "inter-vm-mtu". */

    /**
     * Gets the value for child leaf "inter-vm-mtu".
     * @return The value of the leaf.
     */
    public MtuType getInterVmMtuValue() throws JNCException {
        MtuType interVmMtu = (MtuType)getValue("inter-vm-mtu");
        if (interVmMtu == null) {
            interVmMtu = new MtuType("1500");  // default
        }
        return interVmMtu;
    }

    /**
     * Sets the value for child leaf "inter-vm-mtu",
     * using a JNC type value.
     * @param interVmMtuValue The value to set.
     * @param interVmMtuValue used during instantiation.
     */
    public void setInterVmMtuValue(MtuType interVmMtuValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "inter-vm-mtu",
            interVmMtuValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "inter-vm-mtu",
     * using Java primitive values.
     * @param interVmMtuValue used during instantiation.
     */
    public void setInterVmMtuValue(int interVmMtuValue) throws JNCException {
        setInterVmMtuValue(new MtuType(interVmMtuValue));
    }

    /**
     * Sets the value for child leaf "inter-vm-mtu",
     * using a String value.
     * @param interVmMtuValue used during instantiation.
     */
    public void setInterVmMtuValue(String interVmMtuValue) throws JNCException {
        setInterVmMtuValue(new MtuType(interVmMtuValue));
    }

    /**
     * Unsets the value for child leaf "inter-vm-mtu".
     */
    public void unsetInterVmMtuValue() throws JNCException {
        delete("inter-vm-mtu");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "inter-vm-mtu" leaf will not have a value.
     */
    public void addInterVmMtu() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "inter-vm-mtu",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "inter-vm-mtu" with operation "replace".
     */
    public void markInterVmMtuReplace() throws JNCException {
        markLeafReplace("interVmMtu");
    }

    /**
     * Marks the leaf "inter-vm-mtu" with operation "merge".
     */
    public void markInterVmMtuMerge() throws JNCException {
        markLeafMerge("interVmMtu");
    }

    /**
     * Marks the leaf "inter-vm-mtu" with operation "create".
     */
    public void markInterVmMtuCreate() throws JNCException {
        markLeafCreate("interVmMtu");
    }

    /**
     * Marks the leaf "inter-vm-mtu" with operation "delete".
     */
    public void markInterVmMtuDelete() throws JNCException {
        markLeafDelete("interVmMtu");
    }

    /* Access methods for optional leaf child: "data-mtu". */

    /**
     * Gets the value for child leaf "data-mtu".
     * @return The value of the leaf.
     */
    public MtuType getDataMtuValue() throws JNCException {
        MtuType dataMtu = (MtuType)getValue("data-mtu");
        if (dataMtu == null) {
            dataMtu = new MtuType("1500");  // default
        }
        return dataMtu;
    }

    /**
     * Sets the value for child leaf "data-mtu",
     * using a JNC type value.
     * @param dataMtuValue The value to set.
     * @param dataMtuValue used during instantiation.
     */
    public void setDataMtuValue(MtuType dataMtuValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "data-mtu",
            dataMtuValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "data-mtu",
     * using Java primitive values.
     * @param dataMtuValue used during instantiation.
     */
    public void setDataMtuValue(int dataMtuValue) throws JNCException {
        setDataMtuValue(new MtuType(dataMtuValue));
    }

    /**
     * Sets the value for child leaf "data-mtu",
     * using a String value.
     * @param dataMtuValue used during instantiation.
     */
    public void setDataMtuValue(String dataMtuValue) throws JNCException {
        setDataMtuValue(new MtuType(dataMtuValue));
    }

    /**
     * Unsets the value for child leaf "data-mtu".
     */
    public void unsetDataMtuValue() throws JNCException {
        delete("data-mtu");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "data-mtu" leaf will not have a value.
     */
    public void addDataMtu() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "data-mtu",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "data-mtu" with operation "replace".
     */
    public void markDataMtuReplace() throws JNCException {
        markLeafReplace("dataMtu");
    }

    /**
     * Marks the leaf "data-mtu" with operation "merge".
     */
    public void markDataMtuMerge() throws JNCException {
        markLeafMerge("dataMtu");
    }

    /**
     * Marks the leaf "data-mtu" with operation "create".
     */
    public void markDataMtuCreate() throws JNCException {
        markLeafCreate("dataMtu");
    }

    /**
     * Marks the leaf "data-mtu" with operation "delete".
     */
    public void markDataMtuDelete() throws JNCException {
        markLeafDelete("dataMtu");
    }

    /* Access methods for optional leaf child: "external-if1-mtu". */

    /**
     * Gets the value for child leaf "external-if1-mtu".
     * @return The value of the leaf.
     */
    public MtuType getExternalIf1MtuValue() throws JNCException {
        MtuType externalIf1Mtu = (MtuType)getValue("external-if1-mtu");
        if (externalIf1Mtu == null) {
            externalIf1Mtu = new MtuType("1500");  // default
        }
        return externalIf1Mtu;
    }

    /**
     * Sets the value for child leaf "external-if1-mtu",
     * using a JNC type value.
     * @param externalIf1MtuValue The value to set.
     * @param externalIf1MtuValue used during instantiation.
     */
    public void setExternalIf1MtuValue(MtuType externalIf1MtuValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "external-if1-mtu",
            externalIf1MtuValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "external-if1-mtu",
     * using Java primitive values.
     * @param externalIf1MtuValue used during instantiation.
     */
    public void setExternalIf1MtuValue(int externalIf1MtuValue)
            throws JNCException {
        setExternalIf1MtuValue(new MtuType(externalIf1MtuValue));
    }

    /**
     * Sets the value for child leaf "external-if1-mtu",
     * using a String value.
     * @param externalIf1MtuValue used during instantiation.
     */
    public void setExternalIf1MtuValue(String externalIf1MtuValue)
            throws JNCException {
        setExternalIf1MtuValue(new MtuType(externalIf1MtuValue));
    }

    /**
     * Unsets the value for child leaf "external-if1-mtu".
     */
    public void unsetExternalIf1MtuValue() throws JNCException {
        delete("external-if1-mtu");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "external-if1-mtu" leaf will not have a value.
     */
    public void addExternalIf1Mtu() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "external-if1-mtu",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "external-if1-mtu" with operation "replace".
     */
    public void markExternalIf1MtuReplace() throws JNCException {
        markLeafReplace("externalIf1Mtu");
    }

    /**
     * Marks the leaf "external-if1-mtu" with operation "merge".
     */
    public void markExternalIf1MtuMerge() throws JNCException {
        markLeafMerge("externalIf1Mtu");
    }

    /**
     * Marks the leaf "external-if1-mtu" with operation "create".
     */
    public void markExternalIf1MtuCreate() throws JNCException {
        markLeafCreate("externalIf1Mtu");
    }

    /**
     * Marks the leaf "external-if1-mtu" with operation "delete".
     */
    public void markExternalIf1MtuDelete() throws JNCException {
        markLeafDelete("externalIf1Mtu");
    }

    /* Access methods for optional leaf child: "external-if2-mtu". */

    /**
     * Gets the value for child leaf "external-if2-mtu".
     * @return The value of the leaf.
     */
    public MtuType getExternalIf2MtuValue() throws JNCException {
        MtuType externalIf2Mtu = (MtuType)getValue("external-if2-mtu");
        if (externalIf2Mtu == null) {
            externalIf2Mtu = new MtuType("1500");  // default
        }
        return externalIf2Mtu;
    }

    /**
     * Sets the value for child leaf "external-if2-mtu",
     * using a JNC type value.
     * @param externalIf2MtuValue The value to set.
     * @param externalIf2MtuValue used during instantiation.
     */
    public void setExternalIf2MtuValue(MtuType externalIf2MtuValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "external-if2-mtu",
            externalIf2MtuValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "external-if2-mtu",
     * using Java primitive values.
     * @param externalIf2MtuValue used during instantiation.
     */
    public void setExternalIf2MtuValue(int externalIf2MtuValue)
            throws JNCException {
        setExternalIf2MtuValue(new MtuType(externalIf2MtuValue));
    }

    /**
     * Sets the value for child leaf "external-if2-mtu",
     * using a String value.
     * @param externalIf2MtuValue used during instantiation.
     */
    public void setExternalIf2MtuValue(String externalIf2MtuValue)
            throws JNCException {
        setExternalIf2MtuValue(new MtuType(externalIf2MtuValue));
    }

    /**
     * Unsets the value for child leaf "external-if2-mtu".
     */
    public void unsetExternalIf2MtuValue() throws JNCException {
        delete("external-if2-mtu");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "external-if2-mtu" leaf will not have a value.
     */
    public void addExternalIf2Mtu() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "external-if2-mtu",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "external-if2-mtu" with operation "replace".
     */
    public void markExternalIf2MtuReplace() throws JNCException {
        markLeafReplace("externalIf2Mtu");
    }

    /**
     * Marks the leaf "external-if2-mtu" with operation "merge".
     */
    public void markExternalIf2MtuMerge() throws JNCException {
        markLeafMerge("externalIf2Mtu");
    }

    /**
     * Marks the leaf "external-if2-mtu" with operation "create".
     */
    public void markExternalIf2MtuCreate() throws JNCException {
        markLeafCreate("externalIf2Mtu");
    }

    /**
     * Marks the leaf "external-if2-mtu" with operation "delete".
     */
    public void markExternalIf2MtuDelete() throws JNCException {
        markLeafDelete("externalIf2Mtu");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
