/* 
 * @(#)ServiceArea.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeForbiddenTaList;

import MmeLocationArea;

import MmeMmePool;

import MmePlmn;

import MmeRoutingArea;

import MmeSgsnNri;

import MmeSgsnPool;

import MmeTrackingArea;

import MmeVlr;

import MmeVlrPool;

import RoutingAreaUnknown;

import TaiEnodebMap;

import TrackingAreaOper;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/service-area"
 * <p>
 * See line 488 in
 * mmeSgsnConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class ServiceArea extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty ServiceArea object.
     */
    public ServiceArea() {
        super(Epc.NAMESPACE, "service-area");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public ServiceArea clone() {
        return (ServiceArea)cloneContent(new ServiceArea());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public ServiceArea cloneShallow() {
        return (ServiceArea)cloneShallowContent(new ServiceArea());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-plmn",
            "mme-mme-pool",
            "mme-forbidden-ta-list",
            "mme-vlr",
            "mme-vlr-pool",
            "mme-tracking-area",
            "mme-location-area",
            "mme-routing-area",
            "mme-sgsn-nri",
            "mme-sgsn-pool",
            "tracking-area-oper",
            "tai-enodeb-map",
            "routing-area-unknown",
        };
    }

    /* Access methods for list child: "mme-plmn". */

    /**
     * Gets list entry "mmePlmn", with specified keys.
     * @param plmnIdValue Key argument of child.
     */
    public MmePlmn getMmePlmn(YangString plmnIdValue) throws JNCException {
        String path = "mme-plmn[plmnId='" + plmnIdValue + "']";
        return (MmePlmn)searchOne(path);
    }

    /**
     * Gets list entry "mmePlmn", with specified keys.
     * The keys are specified as strings.
     * @param plmnIdValue Key argument of child.
     */
    public MmePlmn getMmePlmn(String plmnIdValue) throws JNCException {
        String path = "mme-plmn[plmnId='" + plmnIdValue + "']";
        return (MmePlmn)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-plmn".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmePlmnIterator() {
        return new ElementChildrenIterator(children, "mme-plmn");
    }

    /**
     * Adds list entry "mmePlmn", using an existing object.
     * @param mmePlmn The object to add.
     * @return The added child.
     */
    public MmePlmn addMmePlmn(MmePlmn mmePlmn) throws JNCException {
        insertChild(mmePlmn, childrenNames());
        return mmePlmn;
    }

    /**
     * Adds list entry "mmePlmn", with specified keys.
     * @param plmnIdValue Key argument of child.
     * @return The added child.
     */
    public MmePlmn addMmePlmn(YangString plmnIdValue) throws JNCException {
        MmePlmn mmePlmn = new MmePlmn(plmnIdValue);
        return addMmePlmn(mmePlmn);
    }

    /**
     * Adds list entry "mmePlmn", with specified keys.
     * The keys are specified as strings.
     * @param plmnIdValue Key argument of child.
     * @return The added child.
     */
    public MmePlmn addMmePlmn(String plmnIdValue) throws JNCException {
        MmePlmn mmePlmn = new MmePlmn(plmnIdValue);
        return addMmePlmn(mmePlmn);
    }

    /**
     * Adds list entry "mmePlmn".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmePlmn addMmePlmn() throws JNCException {
        MmePlmn mmePlmn = new MmePlmn();
        insertChild(mmePlmn, childrenNames());
        return mmePlmn;
    }

    /**
     * Deletes list entry "mmePlmn", with specified keys.
     * @param plmnIdValue Key argument of child.
     */
    public void deleteMmePlmn(YangString plmnIdValue) throws JNCException {
        String path = "mme-plmn[plmnId='" + plmnIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmePlmn", with specified keys.
     * The keys are specified as strings.
     * @param plmnIdValue Key argument of child.
     */
    public void deleteMmePlmn(String plmnIdValue) throws JNCException {
        String path = "mme-plmn[plmnId='" + plmnIdValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-mme-pool". */

    /**
     * Gets list entry "mmeMmePool", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeMmePool getMmeMmePool(YangString nameValue) throws JNCException {
        String path = "mme-mme-pool[name='" + nameValue + "']";
        return (MmeMmePool)searchOne(path);
    }

    /**
     * Gets list entry "mmeMmePool", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeMmePool getMmeMmePool(String nameValue) throws JNCException {
        String path = "mme-mme-pool[name='" + nameValue + "']";
        return (MmeMmePool)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-mme-pool".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeMmePoolIterator() {
        return new ElementChildrenIterator(children, "mme-mme-pool");
    }

    /**
     * Adds list entry "mmeMmePool", using an existing object.
     * @param mmeMmePool The object to add.
     * @return The added child.
     */
    public MmeMmePool addMmeMmePool(MmeMmePool mmeMmePool) throws JNCException {
        insertChild(mmeMmePool, childrenNames());
        return mmeMmePool;
    }

    /**
     * Adds list entry "mmeMmePool", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeMmePool addMmeMmePool(YangString nameValue) throws JNCException {
        MmeMmePool mmeMmePool = new MmeMmePool(nameValue);
        return addMmeMmePool(mmeMmePool);
    }

    /**
     * Adds list entry "mmeMmePool", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeMmePool addMmeMmePool(String nameValue) throws JNCException {
        MmeMmePool mmeMmePool = new MmeMmePool(nameValue);
        return addMmeMmePool(mmeMmePool);
    }

    /**
     * Adds list entry "mmeMmePool".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeMmePool addMmeMmePool() throws JNCException {
        MmeMmePool mmeMmePool = new MmeMmePool();
        insertChild(mmeMmePool, childrenNames());
        return mmeMmePool;
    }

    /**
     * Deletes list entry "mmeMmePool", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeMmePool(YangString nameValue) throws JNCException {
        String path = "mme-mme-pool[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeMmePool", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeMmePool(String nameValue) throws JNCException {
        String path = "mme-mme-pool[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-forbidden-ta-list". */

    /**
     * Gets list entry "mmeForbiddenTaList", with specified keys.
     * @param plmnValue Key argument of child.
     * @param tacListValue Key argument of child.
     */
    public MmeForbiddenTaList getMmeForbiddenTaList(YangString plmnValue, YangString tacListValue)
            throws JNCException {
        String path = "mme-forbidden-ta-list[plmn='" + plmnValue + "'][tacList='" + tacListValue + "']";
        return (MmeForbiddenTaList)searchOne(path);
    }

    /**
     * Gets list entry "mmeForbiddenTaList", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     * @param tacListValue Key argument of child.
     */
    public MmeForbiddenTaList getMmeForbiddenTaList(String plmnValue, String tacListValue)
            throws JNCException {
        String path = "mme-forbidden-ta-list[plmn='" + plmnValue + "'][tacList='" + tacListValue + "']";
        return (MmeForbiddenTaList)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-forbidden-ta-list".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeForbiddenTaListIterator() {
        return new ElementChildrenIterator(children, "mme-forbidden-ta-list");
    }

    /**
     * Adds list entry "mmeForbiddenTaList", using an existing object.
     * @param mmeForbiddenTaList The object to add.
     * @return The added child.
     */
    public MmeForbiddenTaList addMmeForbiddenTaList(MmeForbiddenTaList mmeForbiddenTaList)
            throws JNCException {
        insertChild(mmeForbiddenTaList, childrenNames());
        return mmeForbiddenTaList;
    }

    /**
     * Adds list entry "mmeForbiddenTaList", with specified keys.
     * @param plmnValue Key argument of child.
     * @param tacListValue Key argument of child.
     * @return The added child.
     */
    public MmeForbiddenTaList addMmeForbiddenTaList(YangString plmnValue, YangString tacListValue)
            throws JNCException {
        MmeForbiddenTaList mmeForbiddenTaList = new MmeForbiddenTaList(plmnValue, tacListValue);
        return addMmeForbiddenTaList(mmeForbiddenTaList);
    }

    /**
     * Adds list entry "mmeForbiddenTaList", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     * @param tacListValue Key argument of child.
     * @return The added child.
     */
    public MmeForbiddenTaList addMmeForbiddenTaList(String plmnValue, String tacListValue)
            throws JNCException {
        MmeForbiddenTaList mmeForbiddenTaList = new MmeForbiddenTaList(plmnValue, tacListValue);
        return addMmeForbiddenTaList(mmeForbiddenTaList);
    }

    /**
     * Adds list entry "mmeForbiddenTaList".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeForbiddenTaList addMmeForbiddenTaList() throws JNCException {
        MmeForbiddenTaList mmeForbiddenTaList = new MmeForbiddenTaList();
        insertChild(mmeForbiddenTaList, childrenNames());
        return mmeForbiddenTaList;
    }

    /**
     * Deletes list entry "mmeForbiddenTaList", with specified keys.
     * @param plmnValue Key argument of child.
     * @param tacListValue Key argument of child.
     */
    public void deleteMmeForbiddenTaList(YangString plmnValue, YangString tacListValue)
            throws JNCException {
        String path = "mme-forbidden-ta-list[plmn='" + plmnValue + "'][tacList='" + tacListValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeForbiddenTaList", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     * @param tacListValue Key argument of child.
     */
    public void deleteMmeForbiddenTaList(String plmnValue, String tacListValue)
            throws JNCException {
        String path = "mme-forbidden-ta-list[plmn='" + plmnValue + "'][tacList='" + tacListValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-vlr". */

    /**
     * Gets list entry "mmeVlr", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeVlr getMmeVlr(YangString nameValue) throws JNCException {
        String path = "mme-vlr[name='" + nameValue + "']";
        return (MmeVlr)searchOne(path);
    }

    /**
     * Gets list entry "mmeVlr", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeVlr getMmeVlr(String nameValue) throws JNCException {
        String path = "mme-vlr[name='" + nameValue + "']";
        return (MmeVlr)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-vlr".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeVlrIterator() {
        return new ElementChildrenIterator(children, "mme-vlr");
    }

    /**
     * Adds list entry "mmeVlr", using an existing object.
     * @param mmeVlr The object to add.
     * @return The added child.
     */
    public MmeVlr addMmeVlr(MmeVlr mmeVlr) throws JNCException {
        insertChild(mmeVlr, childrenNames());
        return mmeVlr;
    }

    /**
     * Adds list entry "mmeVlr", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeVlr addMmeVlr(YangString nameValue) throws JNCException {
        MmeVlr mmeVlr = new MmeVlr(nameValue);
        return addMmeVlr(mmeVlr);
    }

    /**
     * Adds list entry "mmeVlr", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeVlr addMmeVlr(String nameValue) throws JNCException {
        MmeVlr mmeVlr = new MmeVlr(nameValue);
        return addMmeVlr(mmeVlr);
    }

    /**
     * Adds list entry "mmeVlr".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeVlr addMmeVlr() throws JNCException {
        MmeVlr mmeVlr = new MmeVlr();
        insertChild(mmeVlr, childrenNames());
        return mmeVlr;
    }

    /**
     * Deletes list entry "mmeVlr", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeVlr(YangString nameValue) throws JNCException {
        String path = "mme-vlr[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeVlr", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeVlr(String nameValue) throws JNCException {
        String path = "mme-vlr[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-vlr-pool". */

    /**
     * Gets list entry "mmeVlrPool", with specified keys.
     * @param vlrPoolNameValue Key argument of child.
     * @param vlrSelectionDigitsValue Key argument of child.
     */
    public MmeVlrPool getMmeVlrPool(YangString vlrPoolNameValue, YangString vlrSelectionDigitsValue)
            throws JNCException {
        String path = "mme-vlr-pool[vlrPoolName='" + vlrPoolNameValue + "'][vlrSelectionDigits='" + vlrSelectionDigitsValue + "']";
        return (MmeVlrPool)searchOne(path);
    }

    /**
     * Gets list entry "mmeVlrPool", with specified keys.
     * The keys are specified as strings.
     * @param vlrPoolNameValue Key argument of child.
     * @param vlrSelectionDigitsValue Key argument of child.
     */
    public MmeVlrPool getMmeVlrPool(String vlrPoolNameValue, String vlrSelectionDigitsValue)
            throws JNCException {
        String path = "mme-vlr-pool[vlrPoolName='" + vlrPoolNameValue + "'][vlrSelectionDigits='" + vlrSelectionDigitsValue + "']";
        return (MmeVlrPool)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-vlr-pool".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeVlrPoolIterator() {
        return new ElementChildrenIterator(children, "mme-vlr-pool");
    }

    /**
     * Adds list entry "mmeVlrPool", using an existing object.
     * @param mmeVlrPool The object to add.
     * @return The added child.
     */
    public MmeVlrPool addMmeVlrPool(MmeVlrPool mmeVlrPool) throws JNCException {
        insertChild(mmeVlrPool, childrenNames());
        return mmeVlrPool;
    }

    /**
     * Adds list entry "mmeVlrPool", with specified keys.
     * @param vlrPoolNameValue Key argument of child.
     * @param vlrSelectionDigitsValue Key argument of child.
     * @return The added child.
     */
    public MmeVlrPool addMmeVlrPool(YangString vlrPoolNameValue, YangString vlrSelectionDigitsValue)
            throws JNCException {
        MmeVlrPool mmeVlrPool = new MmeVlrPool(vlrPoolNameValue, vlrSelectionDigitsValue);
        return addMmeVlrPool(mmeVlrPool);
    }

    /**
     * Adds list entry "mmeVlrPool", with specified keys.
     * The keys are specified as strings.
     * @param vlrPoolNameValue Key argument of child.
     * @param vlrSelectionDigitsValue Key argument of child.
     * @return The added child.
     */
    public MmeVlrPool addMmeVlrPool(String vlrPoolNameValue, String vlrSelectionDigitsValue)
            throws JNCException {
        MmeVlrPool mmeVlrPool = new MmeVlrPool(vlrPoolNameValue, vlrSelectionDigitsValue);
        return addMmeVlrPool(mmeVlrPool);
    }

    /**
     * Adds list entry "mmeVlrPool".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeVlrPool addMmeVlrPool() throws JNCException {
        MmeVlrPool mmeVlrPool = new MmeVlrPool();
        insertChild(mmeVlrPool, childrenNames());
        return mmeVlrPool;
    }

    /**
     * Deletes list entry "mmeVlrPool", with specified keys.
     * @param vlrPoolNameValue Key argument of child.
     * @param vlrSelectionDigitsValue Key argument of child.
     */
    public void deleteMmeVlrPool(YangString vlrPoolNameValue, YangString vlrSelectionDigitsValue)
            throws JNCException {
        String path = "mme-vlr-pool[vlrPoolName='" + vlrPoolNameValue + "'][vlrSelectionDigits='" + vlrSelectionDigitsValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeVlrPool", with specified keys.
     * The keys are specified as strings.
     * @param vlrPoolNameValue Key argument of child.
     * @param vlrSelectionDigitsValue Key argument of child.
     */
    public void deleteMmeVlrPool(String vlrPoolNameValue, String vlrSelectionDigitsValue)
            throws JNCException {
        String path = "mme-vlr-pool[vlrPoolName='" + vlrPoolNameValue + "'][vlrSelectionDigits='" + vlrSelectionDigitsValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-tracking-area". */

    /**
     * Gets list entry "mmeTrackingArea", with specified keys.
     * @param plmnIdValue Key argument of child.
     * @param tacValue Key argument of child.
     */
    public MmeTrackingArea getMmeTrackingArea(YangString plmnIdValue, YangString tacValue)
            throws JNCException {
        String path = "mme-tracking-area[plmnId='" + plmnIdValue + "'][tac='" + tacValue + "']";
        return (MmeTrackingArea)searchOne(path);
    }

    /**
     * Gets list entry "mmeTrackingArea", with specified keys.
     * The keys are specified as strings.
     * @param plmnIdValue Key argument of child.
     * @param tacValue Key argument of child.
     */
    public MmeTrackingArea getMmeTrackingArea(String plmnIdValue, String tacValue)
            throws JNCException {
        String path = "mme-tracking-area[plmnId='" + plmnIdValue + "'][tac='" + tacValue + "']";
        return (MmeTrackingArea)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-tracking-area".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeTrackingAreaIterator() {
        return new ElementChildrenIterator(children, "mme-tracking-area");
    }

    /**
     * Adds list entry "mmeTrackingArea", using an existing object.
     * @param mmeTrackingArea The object to add.
     * @return The added child.
     */
    public MmeTrackingArea addMmeTrackingArea(MmeTrackingArea mmeTrackingArea)
            throws JNCException {
        insertChild(mmeTrackingArea, childrenNames());
        return mmeTrackingArea;
    }

    /**
     * Adds list entry "mmeTrackingArea", with specified keys.
     * @param plmnIdValue Key argument of child.
     * @param tacValue Key argument of child.
     * @return The added child.
     */
    public MmeTrackingArea addMmeTrackingArea(YangString plmnIdValue, YangString tacValue)
            throws JNCException {
        MmeTrackingArea mmeTrackingArea = new MmeTrackingArea(plmnIdValue, tacValue);
        return addMmeTrackingArea(mmeTrackingArea);
    }

    /**
     * Adds list entry "mmeTrackingArea", with specified keys.
     * The keys are specified as strings.
     * @param plmnIdValue Key argument of child.
     * @param tacValue Key argument of child.
     * @return The added child.
     */
    public MmeTrackingArea addMmeTrackingArea(String plmnIdValue, String tacValue)
            throws JNCException {
        MmeTrackingArea mmeTrackingArea = new MmeTrackingArea(plmnIdValue, tacValue);
        return addMmeTrackingArea(mmeTrackingArea);
    }

    /**
     * Adds list entry "mmeTrackingArea".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeTrackingArea addMmeTrackingArea() throws JNCException {
        MmeTrackingArea mmeTrackingArea = new MmeTrackingArea();
        insertChild(mmeTrackingArea, childrenNames());
        return mmeTrackingArea;
    }

    /**
     * Deletes list entry "mmeTrackingArea", with specified keys.
     * @param plmnIdValue Key argument of child.
     * @param tacValue Key argument of child.
     */
    public void deleteMmeTrackingArea(YangString plmnIdValue, YangString tacValue)
            throws JNCException {
        String path = "mme-tracking-area[plmnId='" + plmnIdValue + "'][tac='" + tacValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeTrackingArea", with specified keys.
     * The keys are specified as strings.
     * @param plmnIdValue Key argument of child.
     * @param tacValue Key argument of child.
     */
    public void deleteMmeTrackingArea(String plmnIdValue, String tacValue)
            throws JNCException {
        String path = "mme-tracking-area[plmnId='" + plmnIdValue + "'][tac='" + tacValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-location-area". */

    /**
     * Gets list entry "mmeLocationArea", with specified keys.
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     */
    public MmeLocationArea getMmeLocationArea(YangString plmnValue, YangString lacValue)
            throws JNCException {
        String path = "mme-location-area[plmn='" + plmnValue + "'][lac='" + lacValue + "']";
        return (MmeLocationArea)searchOne(path);
    }

    /**
     * Gets list entry "mmeLocationArea", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     */
    public MmeLocationArea getMmeLocationArea(String plmnValue, String lacValue)
            throws JNCException {
        String path = "mme-location-area[plmn='" + plmnValue + "'][lac='" + lacValue + "']";
        return (MmeLocationArea)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-location-area".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeLocationAreaIterator() {
        return new ElementChildrenIterator(children, "mme-location-area");
    }

    /**
     * Adds list entry "mmeLocationArea", using an existing object.
     * @param mmeLocationArea The object to add.
     * @return The added child.
     */
    public MmeLocationArea addMmeLocationArea(MmeLocationArea mmeLocationArea)
            throws JNCException {
        insertChild(mmeLocationArea, childrenNames());
        return mmeLocationArea;
    }

    /**
     * Adds list entry "mmeLocationArea", with specified keys.
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     * @return The added child.
     */
    public MmeLocationArea addMmeLocationArea(YangString plmnValue, YangString lacValue)
            throws JNCException {
        MmeLocationArea mmeLocationArea = new MmeLocationArea(plmnValue, lacValue);
        return addMmeLocationArea(mmeLocationArea);
    }

    /**
     * Adds list entry "mmeLocationArea", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     * @return The added child.
     */
    public MmeLocationArea addMmeLocationArea(String plmnValue, String lacValue)
            throws JNCException {
        MmeLocationArea mmeLocationArea = new MmeLocationArea(plmnValue, lacValue);
        return addMmeLocationArea(mmeLocationArea);
    }

    /**
     * Adds list entry "mmeLocationArea".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeLocationArea addMmeLocationArea() throws JNCException {
        MmeLocationArea mmeLocationArea = new MmeLocationArea();
        insertChild(mmeLocationArea, childrenNames());
        return mmeLocationArea;
    }

    /**
     * Deletes list entry "mmeLocationArea", with specified keys.
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     */
    public void deleteMmeLocationArea(YangString plmnValue, YangString lacValue)
            throws JNCException {
        String path = "mme-location-area[plmn='" + plmnValue + "'][lac='" + lacValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeLocationArea", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     */
    public void deleteMmeLocationArea(String plmnValue, String lacValue)
            throws JNCException {
        String path = "mme-location-area[plmn='" + plmnValue + "'][lac='" + lacValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-routing-area". */

    /**
     * Gets list entry "mmeRoutingArea", with specified keys.
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     * @param racValue Key argument of child.
     */
    public MmeRoutingArea getMmeRoutingArea(YangString plmnValue, YangString lacValue, YangString racValue)
            throws JNCException {
        String path = "mme-routing-area[plmn='" + plmnValue + "'][lac='" + lacValue + "'][rac='" + racValue + "']";
        return (MmeRoutingArea)searchOne(path);
    }

    /**
     * Gets list entry "mmeRoutingArea", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     * @param racValue Key argument of child.
     */
    public MmeRoutingArea getMmeRoutingArea(String plmnValue, String lacValue, String racValue)
            throws JNCException {
        String path = "mme-routing-area[plmn='" + plmnValue + "'][lac='" + lacValue + "'][rac='" + racValue + "']";
        return (MmeRoutingArea)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-routing-area".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeRoutingAreaIterator() {
        return new ElementChildrenIterator(children, "mme-routing-area");
    }

    /**
     * Adds list entry "mmeRoutingArea", using an existing object.
     * @param mmeRoutingArea The object to add.
     * @return The added child.
     */
    public MmeRoutingArea addMmeRoutingArea(MmeRoutingArea mmeRoutingArea)
            throws JNCException {
        insertChild(mmeRoutingArea, childrenNames());
        return mmeRoutingArea;
    }

    /**
     * Adds list entry "mmeRoutingArea", with specified keys.
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     * @param racValue Key argument of child.
     * @return The added child.
     */
    public MmeRoutingArea addMmeRoutingArea(YangString plmnValue, YangString lacValue, YangString racValue)
            throws JNCException {
        MmeRoutingArea mmeRoutingArea = new MmeRoutingArea(plmnValue, lacValue, racValue);
        return addMmeRoutingArea(mmeRoutingArea);
    }

    /**
     * Adds list entry "mmeRoutingArea", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     * @param racValue Key argument of child.
     * @return The added child.
     */
    public MmeRoutingArea addMmeRoutingArea(String plmnValue, String lacValue, String racValue)
            throws JNCException {
        MmeRoutingArea mmeRoutingArea = new MmeRoutingArea(plmnValue, lacValue, racValue);
        return addMmeRoutingArea(mmeRoutingArea);
    }

    /**
     * Adds list entry "mmeRoutingArea".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeRoutingArea addMmeRoutingArea() throws JNCException {
        MmeRoutingArea mmeRoutingArea = new MmeRoutingArea();
        insertChild(mmeRoutingArea, childrenNames());
        return mmeRoutingArea;
    }

    /**
     * Deletes list entry "mmeRoutingArea", with specified keys.
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     * @param racValue Key argument of child.
     */
    public void deleteMmeRoutingArea(YangString plmnValue, YangString lacValue, YangString racValue)
            throws JNCException {
        String path = "mme-routing-area[plmn='" + plmnValue + "'][lac='" + lacValue + "'][rac='" + racValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeRoutingArea", with specified keys.
     * The keys are specified as strings.
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     * @param racValue Key argument of child.
     */
    public void deleteMmeRoutingArea(String plmnValue, String lacValue, String racValue)
            throws JNCException {
        String path = "mme-routing-area[plmn='" + plmnValue + "'][lac='" + lacValue + "'][rac='" + racValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-sgsn-nri". */

    /**
     * Gets list entry "mmeSgsnNri", with specified keys.
     * @param nriNumberValue Key argument of child.
     * @param poolNameValue Key argument of child.
     */
    public MmeSgsnNri getMmeSgsnNri(YangUInt8 nriNumberValue, YangString poolNameValue)
            throws JNCException {
        String path = "mme-sgsn-nri[nriNumber='" + nriNumberValue + "'][poolName='" + poolNameValue + "']";
        return (MmeSgsnNri)searchOne(path);
    }

    /**
     * Gets list entry "mmeSgsnNri", with specified keys.
     * The keys are specified as strings.
     * @param nriNumberValue Key argument of child.
     * @param poolNameValue Key argument of child.
     */
    public MmeSgsnNri getMmeSgsnNri(String nriNumberValue, String poolNameValue)
            throws JNCException {
        String path = "mme-sgsn-nri[nriNumber='" + nriNumberValue + "'][poolName='" + poolNameValue + "']";
        return (MmeSgsnNri)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-sgsn-nri".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeSgsnNriIterator() {
        return new ElementChildrenIterator(children, "mme-sgsn-nri");
    }

    /**
     * Adds list entry "mmeSgsnNri", using an existing object.
     * @param mmeSgsnNri The object to add.
     * @return The added child.
     */
    public MmeSgsnNri addMmeSgsnNri(MmeSgsnNri mmeSgsnNri) throws JNCException {
        insertChild(mmeSgsnNri, childrenNames());
        return mmeSgsnNri;
    }

    /**
     * Adds list entry "mmeSgsnNri", with specified keys.
     * @param nriNumberValue Key argument of child.
     * @param poolNameValue Key argument of child.
     * @return The added child.
     */
    public MmeSgsnNri addMmeSgsnNri(YangUInt8 nriNumberValue, YangString poolNameValue)
            throws JNCException {
        MmeSgsnNri mmeSgsnNri = new MmeSgsnNri(nriNumberValue, poolNameValue);
        return addMmeSgsnNri(mmeSgsnNri);
    }

    /**
     * Adds list entry "mmeSgsnNri", with specified keys.
     * The keys are specified as strings.
     * @param nriNumberValue Key argument of child.
     * @param poolNameValue Key argument of child.
     * @return The added child.
     */
    public MmeSgsnNri addMmeSgsnNri(String nriNumberValue, String poolNameValue)
            throws JNCException {
        MmeSgsnNri mmeSgsnNri = new MmeSgsnNri(nriNumberValue, poolNameValue);
        return addMmeSgsnNri(mmeSgsnNri);
    }

    /**
     * Adds list entry "mmeSgsnNri".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSgsnNri addMmeSgsnNri() throws JNCException {
        MmeSgsnNri mmeSgsnNri = new MmeSgsnNri();
        insertChild(mmeSgsnNri, childrenNames());
        return mmeSgsnNri;
    }

    /**
     * Deletes list entry "mmeSgsnNri", with specified keys.
     * @param nriNumberValue Key argument of child.
     * @param poolNameValue Key argument of child.
     */
    public void deleteMmeSgsnNri(YangUInt8 nriNumberValue, YangString poolNameValue)
            throws JNCException {
        String path = "mme-sgsn-nri[nriNumber='" + nriNumberValue + "'][poolName='" + poolNameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeSgsnNri", with specified keys.
     * The keys are specified as strings.
     * @param nriNumberValue Key argument of child.
     * @param poolNameValue Key argument of child.
     */
    public void deleteMmeSgsnNri(String nriNumberValue, String poolNameValue)
            throws JNCException {
        String path = "mme-sgsn-nri[nriNumber='" + nriNumberValue + "'][poolName='" + poolNameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-sgsn-pool". */

    /**
     * Gets list entry "mmeSgsnPool", with specified keys.
     * @param poolNameValue Key argument of child.
     */
    public MmeSgsnPool getMmeSgsnPool(YangString poolNameValue)
            throws JNCException {
        String path = "mme-sgsn-pool[poolName='" + poolNameValue + "']";
        return (MmeSgsnPool)searchOne(path);
    }

    /**
     * Gets list entry "mmeSgsnPool", with specified keys.
     * The keys are specified as strings.
     * @param poolNameValue Key argument of child.
     */
    public MmeSgsnPool getMmeSgsnPool(String poolNameValue) throws JNCException {
        String path = "mme-sgsn-pool[poolName='" + poolNameValue + "']";
        return (MmeSgsnPool)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-sgsn-pool".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeSgsnPoolIterator() {
        return new ElementChildrenIterator(children, "mme-sgsn-pool");
    }

    /**
     * Adds list entry "mmeSgsnPool", using an existing object.
     * @param mmeSgsnPool The object to add.
     * @return The added child.
     */
    public MmeSgsnPool addMmeSgsnPool(MmeSgsnPool mmeSgsnPool)
            throws JNCException {
        insertChild(mmeSgsnPool, childrenNames());
        return mmeSgsnPool;
    }

    /**
     * Adds list entry "mmeSgsnPool", with specified keys.
     * @param poolNameValue Key argument of child.
     * @return The added child.
     */
    public MmeSgsnPool addMmeSgsnPool(YangString poolNameValue)
            throws JNCException {
        MmeSgsnPool mmeSgsnPool = new MmeSgsnPool(poolNameValue);
        return addMmeSgsnPool(mmeSgsnPool);
    }

    /**
     * Adds list entry "mmeSgsnPool", with specified keys.
     * The keys are specified as strings.
     * @param poolNameValue Key argument of child.
     * @return The added child.
     */
    public MmeSgsnPool addMmeSgsnPool(String poolNameValue) throws JNCException {
        MmeSgsnPool mmeSgsnPool = new MmeSgsnPool(poolNameValue);
        return addMmeSgsnPool(mmeSgsnPool);
    }

    /**
     * Adds list entry "mmeSgsnPool".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSgsnPool addMmeSgsnPool() throws JNCException {
        MmeSgsnPool mmeSgsnPool = new MmeSgsnPool();
        insertChild(mmeSgsnPool, childrenNames());
        return mmeSgsnPool;
    }

    /**
     * Deletes list entry "mmeSgsnPool", with specified keys.
     * @param poolNameValue Key argument of child.
     */
    public void deleteMmeSgsnPool(YangString poolNameValue) throws JNCException {
        String path = "mme-sgsn-pool[poolName='" + poolNameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeSgsnPool", with specified keys.
     * The keys are specified as strings.
     * @param poolNameValue Key argument of child.
     */
    public void deleteMmeSgsnPool(String poolNameValue) throws JNCException {
        String path = "mme-sgsn-pool[poolName='" + poolNameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "tracking-area-oper". */

    /**
     * Gets list entry "trackingAreaOper", with specified keys.
     */
    public TrackingAreaOper getTrackingAreaOper() throws JNCException {
        String path = "tracking-area-oper";
        return (TrackingAreaOper)searchOne(path);
    }

    /**
     * Iterator method for the list "tracking-area-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator trackingAreaOperIterator() {
        return new ElementChildrenIterator(children, "tracking-area-oper");
    }

    /**
     * Adds list entry "trackingAreaOper", using an existing object.
     * @param trackingAreaOper The object to add.
     * @return The added child.
     */
    public TrackingAreaOper addTrackingAreaOper(TrackingAreaOper trackingAreaOper)
            throws JNCException {
        insertChild(trackingAreaOper, childrenNames());
        return trackingAreaOper;
    }

    /**
     * Adds list entry "trackingAreaOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public TrackingAreaOper addTrackingAreaOper() throws JNCException {
        TrackingAreaOper trackingAreaOper = new TrackingAreaOper();
        insertChild(trackingAreaOper, childrenNames());
        return trackingAreaOper;
    }

    /**
     * Deletes list entry "trackingAreaOper", with specified keys.
     */
    public void deleteTrackingAreaOper() throws JNCException {
        String path = "tracking-area-oper";
        delete(path);
    }

    /* Access methods for list child: "tai-enodeb-map". */

    /**
     * Gets list entry "taiEnodebMap", with specified keys.
     */
    public TaiEnodebMap getTaiEnodebMap() throws JNCException {
        String path = "tai-enodeb-map";
        return (TaiEnodebMap)searchOne(path);
    }

    /**
     * Iterator method for the list "tai-enodeb-map".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator taiEnodebMapIterator() {
        return new ElementChildrenIterator(children, "tai-enodeb-map");
    }

    /**
     * Adds list entry "taiEnodebMap", using an existing object.
     * @param taiEnodebMap The object to add.
     * @return The added child.
     */
    public TaiEnodebMap addTaiEnodebMap(TaiEnodebMap taiEnodebMap)
            throws JNCException {
        insertChild(taiEnodebMap, childrenNames());
        return taiEnodebMap;
    }

    /**
     * Adds list entry "taiEnodebMap".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public TaiEnodebMap addTaiEnodebMap() throws JNCException {
        TaiEnodebMap taiEnodebMap = new TaiEnodebMap();
        insertChild(taiEnodebMap, childrenNames());
        return taiEnodebMap;
    }

    /**
     * Deletes list entry "taiEnodebMap", with specified keys.
     */
    public void deleteTaiEnodebMap() throws JNCException {
        String path = "tai-enodeb-map";
        delete(path);
    }

    /* Access methods for list child: "routing-area-unknown". */

    /**
     * Gets list entry "routingAreaUnknown", with specified keys.
     */
    public RoutingAreaUnknown getRoutingAreaUnknown() throws JNCException {
        String path = "routing-area-unknown";
        return (RoutingAreaUnknown)searchOne(path);
    }

    /**
     * Iterator method for the list "routing-area-unknown".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator routingAreaUnknownIterator() {
        return new ElementChildrenIterator(children, "routing-area-unknown");
    }

    /**
     * Adds list entry "routingAreaUnknown", using an existing object.
     * @param routingAreaUnknown The object to add.
     * @return The added child.
     */
    public RoutingAreaUnknown addRoutingAreaUnknown(RoutingAreaUnknown routingAreaUnknown)
            throws JNCException {
        insertChild(routingAreaUnknown, childrenNames());
        return routingAreaUnknown;
    }

    /**
     * Adds list entry "routingAreaUnknown".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public RoutingAreaUnknown addRoutingAreaUnknown() throws JNCException {
        RoutingAreaUnknown routingAreaUnknown = new RoutingAreaUnknown();
        insertChild(routingAreaUnknown, childrenNames());
        return routingAreaUnknown;
    }

    /**
     * Deletes list entry "routingAreaUnknown", with specified keys.
     */
    public void deleteRoutingAreaUnknown() throws JNCException {
        String path = "routing-area-unknown";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
