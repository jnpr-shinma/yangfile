/* 
 * @(#)ServerOper.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.dns;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/dns/server-oper"
 * <p>
 * See line 295 in
 * agwCmnDnsCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class ServerOper extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty ServerOper object.
     */
    public ServerOper() {
        super(Epc.NAMESPACE, "server-oper");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public ServerOper clone() {
        return (ServerOper)cloneContent(new ServerOper());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public ServerOper cloneShallow() {
        return (ServerOper)cloneShallowContent(new ServerOper());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "service",
            "server-name",
            "server-ip-address",
            "weight",
            "status-str",
        };
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "server-name". */

    /**
     * Gets the value for child leaf "server-name".
     * @return The value of the leaf.
     */
    public YangString getServerNameValue() throws JNCException {
        return (YangString)getValue("server-name");
    }

    /**
     * Sets the value for child leaf "server-name",
     * using instance of generated typedef class.
     * @param serverNameValue The value to set.
     * @param serverNameValue used during instantiation.
     */
    public void setServerNameValue(YangString serverNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "server-name",
            serverNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "server-name",
     * using a String value.
     * @param serverNameValue used during instantiation.
     */
    public void setServerNameValue(String serverNameValue) throws JNCException {
        setServerNameValue(new YangString(serverNameValue));
    }

    /**
     * Unsets the value for child leaf "server-name".
     */
    public void unsetServerNameValue() throws JNCException {
        delete("server-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "server-name" leaf will not have a value.
     */
    public void addServerName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "server-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "server-name" with operation "replace".
     */
    public void markServerNameReplace() throws JNCException {
        markLeafReplace("serverName");
    }

    /**
     * Marks the leaf "server-name" with operation "merge".
     */
    public void markServerNameMerge() throws JNCException {
        markLeafMerge("serverName");
    }

    /**
     * Marks the leaf "server-name" with operation "create".
     */
    public void markServerNameCreate() throws JNCException {
        markLeafCreate("serverName");
    }

    /**
     * Marks the leaf "server-name" with operation "delete".
     */
    public void markServerNameDelete() throws JNCException {
        markLeafDelete("serverName");
    }

    /* Access methods for optional leaf child: "server-ip-address". */

    /**
     * Gets the value for child leaf "server-ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getServerIpAddressValue() throws JNCException {
        return (IpAddress)getValue("server-ip-address");
    }

    /**
     * Sets the value for child leaf "server-ip-address",
     * using a JNC type value.
     * @param serverIpAddressValue The value to set.
     * @param serverIpAddressValue used during instantiation.
     */
    public void setServerIpAddressValue(IpAddress serverIpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "server-ip-address",
            serverIpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "server-ip-address",
     * using a String value.
     * @param serverIpAddressValue used during instantiation.
     */
    public void setServerIpAddressValue(String serverIpAddressValue)
            throws JNCException {
        setServerIpAddressValue(new IpAddress(serverIpAddressValue));
    }

    /**
     * Unsets the value for child leaf "server-ip-address".
     */
    public void unsetServerIpAddressValue() throws JNCException {
        delete("server-ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "server-ip-address" leaf will not have a value.
     */
    public void addServerIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "server-ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "server-ip-address" with operation "replace".
     */
    public void markServerIpAddressReplace() throws JNCException {
        markLeafReplace("serverIpAddress");
    }

    /**
     * Marks the leaf "server-ip-address" with operation "merge".
     */
    public void markServerIpAddressMerge() throws JNCException {
        markLeafMerge("serverIpAddress");
    }

    /**
     * Marks the leaf "server-ip-address" with operation "create".
     */
    public void markServerIpAddressCreate() throws JNCException {
        markLeafCreate("serverIpAddress");
    }

    /**
     * Marks the leaf "server-ip-address" with operation "delete".
     */
    public void markServerIpAddressDelete() throws JNCException {
        markLeafDelete("serverIpAddress");
    }

    /* Access methods for optional leaf child: "weight". */

    /**
     * Gets the value for child leaf "weight".
     * @return The value of the leaf.
     */
    public YangUInt16 getWeightValue() throws JNCException {
        return (YangUInt16)getValue("weight");
    }

    /**
     * Sets the value for child leaf "weight",
     * using instance of generated typedef class.
     * @param weightValue The value to set.
     * @param weightValue used during instantiation.
     */
    public void setWeightValue(YangUInt16 weightValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "weight",
            weightValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "weight",
     * using Java primitive values.
     * @param weightValue used during instantiation.
     */
    public void setWeightValue(int weightValue) throws JNCException {
        setWeightValue(new YangUInt16(weightValue));
    }

    /**
     * Sets the value for child leaf "weight",
     * using a String value.
     * @param weightValue used during instantiation.
     */
    public void setWeightValue(String weightValue) throws JNCException {
        setWeightValue(new YangUInt16(weightValue));
    }

    /**
     * Unsets the value for child leaf "weight".
     */
    public void unsetWeightValue() throws JNCException {
        delete("weight");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "weight" leaf will not have a value.
     */
    public void addWeight() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "weight",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "weight" with operation "replace".
     */
    public void markWeightReplace() throws JNCException {
        markLeafReplace("weight");
    }

    /**
     * Marks the leaf "weight" with operation "merge".
     */
    public void markWeightMerge() throws JNCException {
        markLeafMerge("weight");
    }

    /**
     * Marks the leaf "weight" with operation "create".
     */
    public void markWeightCreate() throws JNCException {
        markLeafCreate("weight");
    }

    /**
     * Marks the leaf "weight" with operation "delete".
     */
    public void markWeightDelete() throws JNCException {
        markLeafDelete("weight");
    }

    /* Access methods for optional leaf child: "status-str". */

    /**
     * Gets the value for child leaf "status-str".
     * @return The value of the leaf.
     */
    public YangString getStatusStrValue() throws JNCException {
        return (YangString)getValue("status-str");
    }

    /**
     * Sets the value for child leaf "status-str",
     * using instance of generated typedef class.
     * @param statusStrValue The value to set.
     * @param statusStrValue used during instantiation.
     */
    public void setStatusStrValue(YangString statusStrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-str",
            statusStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-str",
     * using a String value.
     * @param statusStrValue used during instantiation.
     */
    public void setStatusStrValue(String statusStrValue) throws JNCException {
        setStatusStrValue(new YangString(statusStrValue));
    }

    /**
     * Unsets the value for child leaf "status-str".
     */
    public void unsetStatusStrValue() throws JNCException {
        delete("status-str");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-str" leaf will not have a value.
     */
    public void addStatusStr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-str",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-str" with operation "replace".
     */
    public void markStatusStrReplace() throws JNCException {
        markLeafReplace("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "merge".
     */
    public void markStatusStrMerge() throws JNCException {
        markLeafMerge("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "create".
     */
    public void markStatusStrCreate() throws JNCException {
        markLeafCreate("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "delete".
     */
    public void markStatusStrDelete() throws JNCException {
        markLeafDelete("statusStr");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
