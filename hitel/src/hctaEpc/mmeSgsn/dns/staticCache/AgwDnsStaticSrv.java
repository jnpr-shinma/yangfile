/* 
 * @(#)AgwDnsStaticSrv.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.dns.staticCache;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt16;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/dns/staticCache/agw-dns-static-srv"
 * <p>
 * See line 107 in
 * agwCmnDnsConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class AgwDnsStaticSrv extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty AgwDnsStaticSrv object.
     */
    public AgwDnsStaticSrv() {
        super(Epc.NAMESPACE, "agw-dns-static-srv");
    }

    /**
     * Constructor for an initialized AgwDnsStaticSrv object,
     * 
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticSrv(YangUInt16 entryIndexValue) throws JNCException {
        super(Epc.NAMESPACE, "agw-dns-static-srv");
        Leaf entryIndex = new Leaf(Epc.NAMESPACE, "entry-index");
        entryIndex.setValue(entryIndexValue);
        insertChild(entryIndex, childrenNames());
    }

    /**
     * Constructor for an initialized AgwDnsStaticSrv object,
     * with String keys.
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticSrv(String entryIndexValue) throws JNCException {
        super(Epc.NAMESPACE, "agw-dns-static-srv");
        Leaf entryIndex = new Leaf(Epc.NAMESPACE, "entry-index");
        entryIndex.setValue(new YangUInt16(entryIndexValue));
        insertChild(entryIndex, childrenNames());
    }

    /**
     * Constructor for an initialized AgwDnsStaticSrv object,
     * with keys of built in Java types.
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticSrv(int entryIndexValue) throws JNCException {
        super(Epc.NAMESPACE, "agw-dns-static-srv");
        Leaf entryIndex = new Leaf(Epc.NAMESPACE, "entry-index");
        entryIndex.setValue(new YangUInt16(entryIndexValue));
        insertChild(entryIndex, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public AgwDnsStaticSrv clone() {
        AgwDnsStaticSrv copy;
        try {
            copy = new AgwDnsStaticSrv(getEntryIndexValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (AgwDnsStaticSrv)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public AgwDnsStaticSrv cloneShallow() {
        AgwDnsStaticSrv copy;
        try {
            copy = new AgwDnsStaticSrv(getEntryIndexValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (AgwDnsStaticSrv)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "entry-index",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "entry-index",
            "node-name",
            "target-name",
            "port",
            "priority-field",
            "weight",
        };
    }

    /* Access methods for leaf child: "entry-index". */

    /**
     * Gets the value for child leaf "entry-index".
     * @return The value of the leaf.
     */
    public YangUInt16 getEntryIndexValue() throws JNCException {
        return (YangUInt16)getValue("entry-index");
    }

    /**
     * Sets the value for child leaf "entry-index",
     * using instance of generated typedef class.
     * @param entryIndexValue The value to set.
     * @param entryIndexValue used during instantiation.
     */
    public void setEntryIndexValue(YangUInt16 entryIndexValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "entry-index",
            entryIndexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "entry-index",
     * using Java primitive values.
     * @param entryIndexValue used during instantiation.
     */
    public void setEntryIndexValue(int entryIndexValue) throws JNCException {
        setEntryIndexValue(new YangUInt16(entryIndexValue));
    }

    /**
     * Sets the value for child leaf "entry-index",
     * using a String value.
     * @param entryIndexValue used during instantiation.
     */
    public void setEntryIndexValue(String entryIndexValue) throws JNCException {
        setEntryIndexValue(new YangUInt16(entryIndexValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "entry-index" leaf will not have a value.
     */
    public void addEntryIndex() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "entry-index",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "node-name". */

    /**
     * Gets the value for child leaf "node-name".
     * @return The value of the leaf.
     */
    public YangString getNodeNameValue() throws JNCException {
        return (YangString)getValue("node-name");
    }

    /**
     * Sets the value for child leaf "node-name",
     * using instance of generated typedef class.
     * @param nodeNameValue The value to set.
     * @param nodeNameValue used during instantiation.
     */
    public void setNodeNameValue(YangString nodeNameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "node-name",
            nodeNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "node-name",
     * using a String value.
     * @param nodeNameValue used during instantiation.
     */
    public void setNodeNameValue(String nodeNameValue) throws JNCException {
        setNodeNameValue(new YangString(nodeNameValue));
    }

    /**
     * Unsets the value for child leaf "node-name".
     */
    public void unsetNodeNameValue() throws JNCException {
        delete("node-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "node-name" leaf will not have a value.
     */
    public void addNodeName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "node-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "node-name" with operation "replace".
     */
    public void markNodeNameReplace() throws JNCException {
        markLeafReplace("nodeName");
    }

    /**
     * Marks the leaf "node-name" with operation "merge".
     */
    public void markNodeNameMerge() throws JNCException {
        markLeafMerge("nodeName");
    }

    /**
     * Marks the leaf "node-name" with operation "create".
     */
    public void markNodeNameCreate() throws JNCException {
        markLeafCreate("nodeName");
    }

    /**
     * Marks the leaf "node-name" with operation "delete".
     */
    public void markNodeNameDelete() throws JNCException {
        markLeafDelete("nodeName");
    }

    /* Access methods for optional leaf child: "target-name". */

    /**
     * Gets the value for child leaf "target-name".
     * @return The value of the leaf.
     */
    public YangString getTargetNameValue() throws JNCException {
        return (YangString)getValue("target-name");
    }

    /**
     * Sets the value for child leaf "target-name",
     * using instance of generated typedef class.
     * @param targetNameValue The value to set.
     * @param targetNameValue used during instantiation.
     */
    public void setTargetNameValue(YangString targetNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "target-name",
            targetNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "target-name",
     * using a String value.
     * @param targetNameValue used during instantiation.
     */
    public void setTargetNameValue(String targetNameValue) throws JNCException {
        setTargetNameValue(new YangString(targetNameValue));
    }

    /**
     * Unsets the value for child leaf "target-name".
     */
    public void unsetTargetNameValue() throws JNCException {
        delete("target-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "target-name" leaf will not have a value.
     */
    public void addTargetName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "target-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "target-name" with operation "replace".
     */
    public void markTargetNameReplace() throws JNCException {
        markLeafReplace("targetName");
    }

    /**
     * Marks the leaf "target-name" with operation "merge".
     */
    public void markTargetNameMerge() throws JNCException {
        markLeafMerge("targetName");
    }

    /**
     * Marks the leaf "target-name" with operation "create".
     */
    public void markTargetNameCreate() throws JNCException {
        markLeafCreate("targetName");
    }

    /**
     * Marks the leaf "target-name" with operation "delete".
     */
    public void markTargetNameDelete() throws JNCException {
        markLeafDelete("targetName");
    }

    /* Access methods for optional leaf child: "port". */

    /**
     * Gets the value for child leaf "port".
     * @return The value of the leaf.
     */
    public YangUInt16 getPortValue() throws JNCException {
        return (YangUInt16)getValue("port");
    }

    /**
     * Sets the value for child leaf "port",
     * using instance of generated typedef class.
     * @param portValue The value to set.
     * @param portValue used during instantiation.
     */
    public void setPortValue(YangUInt16 portValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port",
            portValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "port",
     * using Java primitive values.
     * @param portValue used during instantiation.
     */
    public void setPortValue(int portValue) throws JNCException {
        setPortValue(new YangUInt16(portValue));
    }

    /**
     * Sets the value for child leaf "port",
     * using a String value.
     * @param portValue used during instantiation.
     */
    public void setPortValue(String portValue) throws JNCException {
        setPortValue(new YangUInt16(portValue));
    }

    /**
     * Unsets the value for child leaf "port".
     */
    public void unsetPortValue() throws JNCException {
        delete("port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "port" leaf will not have a value.
     */
    public void addPort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "port" with operation "replace".
     */
    public void markPortReplace() throws JNCException {
        markLeafReplace("port");
    }

    /**
     * Marks the leaf "port" with operation "merge".
     */
    public void markPortMerge() throws JNCException {
        markLeafMerge("port");
    }

    /**
     * Marks the leaf "port" with operation "create".
     */
    public void markPortCreate() throws JNCException {
        markLeafCreate("port");
    }

    /**
     * Marks the leaf "port" with operation "delete".
     */
    public void markPortDelete() throws JNCException {
        markLeafDelete("port");
    }

    /* Access methods for optional leaf child: "priority-field". */

    /**
     * Gets the value for child leaf "priority-field".
     * @return The value of the leaf.
     */
    public YangUInt16 getPriorityFieldValue() throws JNCException {
        YangUInt16 priorityField = (YangUInt16)getValue("priority-field");
        if (priorityField == null) {
            priorityField = new YangUInt16("0");  // default
        }
        return priorityField;
    }

    /**
     * Sets the value for child leaf "priority-field",
     * using instance of generated typedef class.
     * @param priorityFieldValue The value to set.
     * @param priorityFieldValue used during instantiation.
     */
    public void setPriorityFieldValue(YangUInt16 priorityFieldValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "priority-field",
            priorityFieldValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "priority-field",
     * using Java primitive values.
     * @param priorityFieldValue used during instantiation.
     */
    public void setPriorityFieldValue(int priorityFieldValue)
            throws JNCException {
        setPriorityFieldValue(new YangUInt16(priorityFieldValue));
    }

    /**
     * Sets the value for child leaf "priority-field",
     * using a String value.
     * @param priorityFieldValue used during instantiation.
     */
    public void setPriorityFieldValue(String priorityFieldValue)
            throws JNCException {
        setPriorityFieldValue(new YangUInt16(priorityFieldValue));
    }

    /**
     * Unsets the value for child leaf "priority-field".
     */
    public void unsetPriorityFieldValue() throws JNCException {
        delete("priority-field");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "priority-field" leaf will not have a value.
     */
    public void addPriorityField() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "priority-field",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "priority-field" with operation "replace".
     */
    public void markPriorityFieldReplace() throws JNCException {
        markLeafReplace("priorityField");
    }

    /**
     * Marks the leaf "priority-field" with operation "merge".
     */
    public void markPriorityFieldMerge() throws JNCException {
        markLeafMerge("priorityField");
    }

    /**
     * Marks the leaf "priority-field" with operation "create".
     */
    public void markPriorityFieldCreate() throws JNCException {
        markLeafCreate("priorityField");
    }

    /**
     * Marks the leaf "priority-field" with operation "delete".
     */
    public void markPriorityFieldDelete() throws JNCException {
        markLeafDelete("priorityField");
    }

    /* Access methods for optional leaf child: "weight". */

    /**
     * Gets the value for child leaf "weight".
     * @return The value of the leaf.
     */
    public YangUInt16 getWeightValue() throws JNCException {
        YangUInt16 weight = (YangUInt16)getValue("weight");
        if (weight == null) {
            weight = new YangUInt16("0");  // default
        }
        return weight;
    }

    /**
     * Sets the value for child leaf "weight",
     * using instance of generated typedef class.
     * @param weightValue The value to set.
     * @param weightValue used during instantiation.
     */
    public void setWeightValue(YangUInt16 weightValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "weight",
            weightValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "weight",
     * using Java primitive values.
     * @param weightValue used during instantiation.
     */
    public void setWeightValue(int weightValue) throws JNCException {
        setWeightValue(new YangUInt16(weightValue));
    }

    /**
     * Sets the value for child leaf "weight",
     * using a String value.
     * @param weightValue used during instantiation.
     */
    public void setWeightValue(String weightValue) throws JNCException {
        setWeightValue(new YangUInt16(weightValue));
    }

    /**
     * Unsets the value for child leaf "weight".
     */
    public void unsetWeightValue() throws JNCException {
        delete("weight");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "weight" leaf will not have a value.
     */
    public void addWeight() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "weight",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "weight" with operation "replace".
     */
    public void markWeightReplace() throws JNCException {
        markLeafReplace("weight");
    }

    /**
     * Marks the leaf "weight" with operation "merge".
     */
    public void markWeightMerge() throws JNCException {
        markLeafMerge("weight");
    }

    /**
     * Marks the leaf "weight" with operation "create".
     */
    public void markWeightCreate() throws JNCException {
        markLeafCreate("weight");
    }

    /**
     * Marks the leaf "weight" with operation "delete".
     */
    public void markWeightDelete() throws JNCException {
        markLeafDelete("weight");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
