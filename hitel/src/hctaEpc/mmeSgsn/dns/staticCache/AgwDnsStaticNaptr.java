/* 
 * @(#)AgwDnsStaticNaptr.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.dns.staticCache;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt16;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/dns/staticCache/agw-dns-static-naptr"
 * <p>
 * See line 150 in
 * agwCmnDnsConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class AgwDnsStaticNaptr extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty AgwDnsStaticNaptr object.
     */
    public AgwDnsStaticNaptr() {
        super(Epc.NAMESPACE, "agw-dns-static-naptr");
    }

    /**
     * Constructor for an initialized AgwDnsStaticNaptr object,
     * 
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticNaptr(YangUInt16 entryIndexValue) throws JNCException {
        super(Epc.NAMESPACE, "agw-dns-static-naptr");
        Leaf entryIndex = new Leaf(Epc.NAMESPACE, "entry-index");
        entryIndex.setValue(entryIndexValue);
        insertChild(entryIndex, childrenNames());
    }

    /**
     * Constructor for an initialized AgwDnsStaticNaptr object,
     * with String keys.
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticNaptr(String entryIndexValue) throws JNCException {
        super(Epc.NAMESPACE, "agw-dns-static-naptr");
        Leaf entryIndex = new Leaf(Epc.NAMESPACE, "entry-index");
        entryIndex.setValue(new YangUInt16(entryIndexValue));
        insertChild(entryIndex, childrenNames());
    }

    /**
     * Constructor for an initialized AgwDnsStaticNaptr object,
     * with keys of built in Java types.
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticNaptr(int entryIndexValue) throws JNCException {
        super(Epc.NAMESPACE, "agw-dns-static-naptr");
        Leaf entryIndex = new Leaf(Epc.NAMESPACE, "entry-index");
        entryIndex.setValue(new YangUInt16(entryIndexValue));
        insertChild(entryIndex, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public AgwDnsStaticNaptr clone() {
        AgwDnsStaticNaptr copy;
        try {
            copy = new AgwDnsStaticNaptr(getEntryIndexValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (AgwDnsStaticNaptr)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public AgwDnsStaticNaptr cloneShallow() {
        AgwDnsStaticNaptr copy;
        try {
            copy = new AgwDnsStaticNaptr(getEntryIndexValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (AgwDnsStaticNaptr)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "entry-index",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "entry-index",
            "domain-name",
            "services",
            "replacement",
            "order",
            "preference",
            "flags",
        };
    }

    /* Access methods for leaf child: "entry-index". */

    /**
     * Gets the value for child leaf "entry-index".
     * @return The value of the leaf.
     */
    public YangUInt16 getEntryIndexValue() throws JNCException {
        return (YangUInt16)getValue("entry-index");
    }

    /**
     * Sets the value for child leaf "entry-index",
     * using instance of generated typedef class.
     * @param entryIndexValue The value to set.
     * @param entryIndexValue used during instantiation.
     */
    public void setEntryIndexValue(YangUInt16 entryIndexValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "entry-index",
            entryIndexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "entry-index",
     * using Java primitive values.
     * @param entryIndexValue used during instantiation.
     */
    public void setEntryIndexValue(int entryIndexValue) throws JNCException {
        setEntryIndexValue(new YangUInt16(entryIndexValue));
    }

    /**
     * Sets the value for child leaf "entry-index",
     * using a String value.
     * @param entryIndexValue used during instantiation.
     */
    public void setEntryIndexValue(String entryIndexValue) throws JNCException {
        setEntryIndexValue(new YangUInt16(entryIndexValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "entry-index" leaf will not have a value.
     */
    public void addEntryIndex() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "entry-index",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "domain-name". */

    /**
     * Gets the value for child leaf "domain-name".
     * @return The value of the leaf.
     */
    public YangString getDomainNameValue() throws JNCException {
        return (YangString)getValue("domain-name");
    }

    /**
     * Sets the value for child leaf "domain-name",
     * using instance of generated typedef class.
     * @param domainNameValue The value to set.
     * @param domainNameValue used during instantiation.
     */
    public void setDomainNameValue(YangString domainNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "domain-name",
            domainNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "domain-name",
     * using a String value.
     * @param domainNameValue used during instantiation.
     */
    public void setDomainNameValue(String domainNameValue) throws JNCException {
        setDomainNameValue(new YangString(domainNameValue));
    }

    /**
     * Unsets the value for child leaf "domain-name".
     */
    public void unsetDomainNameValue() throws JNCException {
        delete("domain-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "domain-name" leaf will not have a value.
     */
    public void addDomainName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "domain-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "domain-name" with operation "replace".
     */
    public void markDomainNameReplace() throws JNCException {
        markLeafReplace("domainName");
    }

    /**
     * Marks the leaf "domain-name" with operation "merge".
     */
    public void markDomainNameMerge() throws JNCException {
        markLeafMerge("domainName");
    }

    /**
     * Marks the leaf "domain-name" with operation "create".
     */
    public void markDomainNameCreate() throws JNCException {
        markLeafCreate("domainName");
    }

    /**
     * Marks the leaf "domain-name" with operation "delete".
     */
    public void markDomainNameDelete() throws JNCException {
        markLeafDelete("domainName");
    }

    /* Access methods for optional leaf child: "services". */

    /**
     * Gets the value for child leaf "services".
     * @return The value of the leaf.
     */
    public YangString getServicesValue() throws JNCException {
        return (YangString)getValue("services");
    }

    /**
     * Sets the value for child leaf "services",
     * using instance of generated typedef class.
     * @param servicesValue The value to set.
     * @param servicesValue used during instantiation.
     */
    public void setServicesValue(YangString servicesValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "services",
            servicesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "services",
     * using a String value.
     * @param servicesValue used during instantiation.
     */
    public void setServicesValue(String servicesValue) throws JNCException {
        setServicesValue(new YangString(servicesValue));
    }

    /**
     * Unsets the value for child leaf "services".
     */
    public void unsetServicesValue() throws JNCException {
        delete("services");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "services" leaf will not have a value.
     */
    public void addServices() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "services",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "services" with operation "replace".
     */
    public void markServicesReplace() throws JNCException {
        markLeafReplace("services");
    }

    /**
     * Marks the leaf "services" with operation "merge".
     */
    public void markServicesMerge() throws JNCException {
        markLeafMerge("services");
    }

    /**
     * Marks the leaf "services" with operation "create".
     */
    public void markServicesCreate() throws JNCException {
        markLeafCreate("services");
    }

    /**
     * Marks the leaf "services" with operation "delete".
     */
    public void markServicesDelete() throws JNCException {
        markLeafDelete("services");
    }

    /* Access methods for optional leaf child: "replacement". */

    /**
     * Gets the value for child leaf "replacement".
     * @return The value of the leaf.
     */
    public YangString getReplacementValue() throws JNCException {
        return (YangString)getValue("replacement");
    }

    /**
     * Sets the value for child leaf "replacement",
     * using instance of generated typedef class.
     * @param replacementValue The value to set.
     * @param replacementValue used during instantiation.
     */
    public void setReplacementValue(YangString replacementValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "replacement",
            replacementValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "replacement",
     * using a String value.
     * @param replacementValue used during instantiation.
     */
    public void setReplacementValue(String replacementValue)
            throws JNCException {
        setReplacementValue(new YangString(replacementValue));
    }

    /**
     * Unsets the value for child leaf "replacement".
     */
    public void unsetReplacementValue() throws JNCException {
        delete("replacement");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "replacement" leaf will not have a value.
     */
    public void addReplacement() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "replacement",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "replacement" with operation "replace".
     */
    public void markReplacementReplace() throws JNCException {
        markLeafReplace("replacement");
    }

    /**
     * Marks the leaf "replacement" with operation "merge".
     */
    public void markReplacementMerge() throws JNCException {
        markLeafMerge("replacement");
    }

    /**
     * Marks the leaf "replacement" with operation "create".
     */
    public void markReplacementCreate() throws JNCException {
        markLeafCreate("replacement");
    }

    /**
     * Marks the leaf "replacement" with operation "delete".
     */
    public void markReplacementDelete() throws JNCException {
        markLeafDelete("replacement");
    }

    /* Access methods for optional leaf child: "order". */

    /**
     * Gets the value for child leaf "order".
     * @return The value of the leaf.
     */
    public YangUInt16 getOrderValue() throws JNCException {
        YangUInt16 order = (YangUInt16)getValue("order");
        if (order == null) {
            order = new YangUInt16("1");  // default
        }
        return order;
    }

    /**
     * Sets the value for child leaf "order",
     * using instance of generated typedef class.
     * @param orderValue The value to set.
     * @param orderValue used during instantiation.
     */
    public void setOrderValue(YangUInt16 orderValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "order",
            orderValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "order",
     * using Java primitive values.
     * @param orderValue used during instantiation.
     */
    public void setOrderValue(int orderValue) throws JNCException {
        setOrderValue(new YangUInt16(orderValue));
    }

    /**
     * Sets the value for child leaf "order",
     * using a String value.
     * @param orderValue used during instantiation.
     */
    public void setOrderValue(String orderValue) throws JNCException {
        setOrderValue(new YangUInt16(orderValue));
    }

    /**
     * Unsets the value for child leaf "order".
     */
    public void unsetOrderValue() throws JNCException {
        delete("order");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "order" leaf will not have a value.
     */
    public void addOrder() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "order",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "order" with operation "replace".
     */
    public void markOrderReplace() throws JNCException {
        markLeafReplace("order");
    }

    /**
     * Marks the leaf "order" with operation "merge".
     */
    public void markOrderMerge() throws JNCException {
        markLeafMerge("order");
    }

    /**
     * Marks the leaf "order" with operation "create".
     */
    public void markOrderCreate() throws JNCException {
        markLeafCreate("order");
    }

    /**
     * Marks the leaf "order" with operation "delete".
     */
    public void markOrderDelete() throws JNCException {
        markLeafDelete("order");
    }

    /* Access methods for optional leaf child: "preference". */

    /**
     * Gets the value for child leaf "preference".
     * @return The value of the leaf.
     */
    public YangUInt16 getPreferenceValue() throws JNCException {
        YangUInt16 preference = (YangUInt16)getValue("preference");
        if (preference == null) {
            preference = new YangUInt16("1");  // default
        }
        return preference;
    }

    /**
     * Sets the value for child leaf "preference",
     * using instance of generated typedef class.
     * @param preferenceValue The value to set.
     * @param preferenceValue used during instantiation.
     */
    public void setPreferenceValue(YangUInt16 preferenceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "preference",
            preferenceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "preference",
     * using Java primitive values.
     * @param preferenceValue used during instantiation.
     */
    public void setPreferenceValue(int preferenceValue) throws JNCException {
        setPreferenceValue(new YangUInt16(preferenceValue));
    }

    /**
     * Sets the value for child leaf "preference",
     * using a String value.
     * @param preferenceValue used during instantiation.
     */
    public void setPreferenceValue(String preferenceValue) throws JNCException {
        setPreferenceValue(new YangUInt16(preferenceValue));
    }

    /**
     * Unsets the value for child leaf "preference".
     */
    public void unsetPreferenceValue() throws JNCException {
        delete("preference");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "preference" leaf will not have a value.
     */
    public void addPreference() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "preference",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "preference" with operation "replace".
     */
    public void markPreferenceReplace() throws JNCException {
        markLeafReplace("preference");
    }

    /**
     * Marks the leaf "preference" with operation "merge".
     */
    public void markPreferenceMerge() throws JNCException {
        markLeafMerge("preference");
    }

    /**
     * Marks the leaf "preference" with operation "create".
     */
    public void markPreferenceCreate() throws JNCException {
        markLeafCreate("preference");
    }

    /**
     * Marks the leaf "preference" with operation "delete".
     */
    public void markPreferenceDelete() throws JNCException {
        markLeafDelete("preference");
    }

    /* Access methods for optional leaf child: "flags". */

    /**
     * Gets the value for child leaf "flags".
     * @return The value of the leaf.
     */
    public YangEnumeration getFlagsValue() throws JNCException {
        return (YangEnumeration)getValue("flags");
    }

    /**
     * Sets the value for child leaf "flags",
     * using instance of generated typedef class.
     * @param flagsValue The value to set.
     * @param flagsValue used during instantiation.
     */
    public void setFlagsValue(YangEnumeration flagsValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "flags",
            flagsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "flags",
     * using a String value.
     * @param flagsValue used during instantiation.
     */
    public void setFlagsValue(String flagsValue) throws JNCException {
        setFlagsValue(new YangEnumeration(flagsValue, new String[] {
             "''",
             "'s'",
             "'a'",
        }));
    }

    /**
     * Unsets the value for child leaf "flags".
     */
    public void unsetFlagsValue() throws JNCException {
        delete("flags");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "flags" leaf will not have a value.
     */
    public void addFlags() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "flags",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "flags" with operation "replace".
     */
    public void markFlagsReplace() throws JNCException {
        markLeafReplace("flags");
    }

    /**
     * Marks the leaf "flags" with operation "merge".
     */
    public void markFlagsMerge() throws JNCException {
        markLeafMerge("flags");
    }

    /**
     * Marks the leaf "flags" with operation "create".
     */
    public void markFlagsCreate() throws JNCException {
        markLeafCreate("flags");
    }

    /**
     * Marks the leaf "flags" with operation "delete".
     */
    public void markFlagsDelete() throws JNCException {
        markLeafDelete("flags");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
