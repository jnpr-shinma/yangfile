/* 
 * @(#)AgwDnsStaticA.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.dns.staticCache;
import .ietfInetTypes.Ipv4Address;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt16;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/dns/staticCache/agw-dns-static-a"
 * <p>
 * See line 57 in
 * agwCmnDnsConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class AgwDnsStaticA extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty AgwDnsStaticA object.
     */
    public AgwDnsStaticA() {
        super(Epc.NAMESPACE, "agw-dns-static-a");
    }

    /**
     * Constructor for an initialized AgwDnsStaticA object,
     * 
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticA(YangUInt16 entryIndexValue) throws JNCException {
        super(Epc.NAMESPACE, "agw-dns-static-a");
        Leaf entryIndex = new Leaf(Epc.NAMESPACE, "entry-index");
        entryIndex.setValue(entryIndexValue);
        insertChild(entryIndex, childrenNames());
    }

    /**
     * Constructor for an initialized AgwDnsStaticA object,
     * with String keys.
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticA(String entryIndexValue) throws JNCException {
        super(Epc.NAMESPACE, "agw-dns-static-a");
        Leaf entryIndex = new Leaf(Epc.NAMESPACE, "entry-index");
        entryIndex.setValue(new YangUInt16(entryIndexValue));
        insertChild(entryIndex, childrenNames());
    }

    /**
     * Constructor for an initialized AgwDnsStaticA object,
     * with keys of built in Java types.
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticA(int entryIndexValue) throws JNCException {
        super(Epc.NAMESPACE, "agw-dns-static-a");
        Leaf entryIndex = new Leaf(Epc.NAMESPACE, "entry-index");
        entryIndex.setValue(new YangUInt16(entryIndexValue));
        insertChild(entryIndex, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public AgwDnsStaticA clone() {
        AgwDnsStaticA copy;
        try {
            copy = new AgwDnsStaticA(getEntryIndexValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (AgwDnsStaticA)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public AgwDnsStaticA cloneShallow() {
        AgwDnsStaticA copy;
        try {
            copy = new AgwDnsStaticA(getEntryIndexValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (AgwDnsStaticA)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "entry-index",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "entry-index",
            "node-name",
            "node-ip-address",
        };
    }

    /* Access methods for leaf child: "entry-index". */

    /**
     * Gets the value for child leaf "entry-index".
     * @return The value of the leaf.
     */
    public YangUInt16 getEntryIndexValue() throws JNCException {
        return (YangUInt16)getValue("entry-index");
    }

    /**
     * Sets the value for child leaf "entry-index",
     * using instance of generated typedef class.
     * @param entryIndexValue The value to set.
     * @param entryIndexValue used during instantiation.
     */
    public void setEntryIndexValue(YangUInt16 entryIndexValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "entry-index",
            entryIndexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "entry-index",
     * using Java primitive values.
     * @param entryIndexValue used during instantiation.
     */
    public void setEntryIndexValue(int entryIndexValue) throws JNCException {
        setEntryIndexValue(new YangUInt16(entryIndexValue));
    }

    /**
     * Sets the value for child leaf "entry-index",
     * using a String value.
     * @param entryIndexValue used during instantiation.
     */
    public void setEntryIndexValue(String entryIndexValue) throws JNCException {
        setEntryIndexValue(new YangUInt16(entryIndexValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "entry-index" leaf will not have a value.
     */
    public void addEntryIndex() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "entry-index",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "node-name". */

    /**
     * Gets the value for child leaf "node-name".
     * @return The value of the leaf.
     */
    public YangString getNodeNameValue() throws JNCException {
        return (YangString)getValue("node-name");
    }

    /**
     * Sets the value for child leaf "node-name",
     * using instance of generated typedef class.
     * @param nodeNameValue The value to set.
     * @param nodeNameValue used during instantiation.
     */
    public void setNodeNameValue(YangString nodeNameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "node-name",
            nodeNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "node-name",
     * using a String value.
     * @param nodeNameValue used during instantiation.
     */
    public void setNodeNameValue(String nodeNameValue) throws JNCException {
        setNodeNameValue(new YangString(nodeNameValue));
    }

    /**
     * Unsets the value for child leaf "node-name".
     */
    public void unsetNodeNameValue() throws JNCException {
        delete("node-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "node-name" leaf will not have a value.
     */
    public void addNodeName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "node-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "node-name" with operation "replace".
     */
    public void markNodeNameReplace() throws JNCException {
        markLeafReplace("nodeName");
    }

    /**
     * Marks the leaf "node-name" with operation "merge".
     */
    public void markNodeNameMerge() throws JNCException {
        markLeafMerge("nodeName");
    }

    /**
     * Marks the leaf "node-name" with operation "create".
     */
    public void markNodeNameCreate() throws JNCException {
        markLeafCreate("nodeName");
    }

    /**
     * Marks the leaf "node-name" with operation "delete".
     */
    public void markNodeNameDelete() throws JNCException {
        markLeafDelete("nodeName");
    }

    /* Access methods for optional leaf child: "node-ip-address". */

    /**
     * Gets the value for child leaf "node-ip-address".
     * @return The value of the leaf.
     */
    public Ipv4Address getNodeIpAddressValue() throws JNCException {
        return (Ipv4Address)getValue("node-ip-address");
    }

    /**
     * Sets the value for child leaf "node-ip-address",
     * using a JNC type value.
     * @param nodeIpAddressValue The value to set.
     * @param nodeIpAddressValue used during instantiation.
     */
    public void setNodeIpAddressValue(Ipv4Address nodeIpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "node-ip-address",
            nodeIpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "node-ip-address",
     * using a String value.
     * @param nodeIpAddressValue used during instantiation.
     */
    public void setNodeIpAddressValue(String nodeIpAddressValue)
            throws JNCException {
        setNodeIpAddressValue(new Ipv4Address(nodeIpAddressValue));
    }

    /**
     * Unsets the value for child leaf "node-ip-address".
     */
    public void unsetNodeIpAddressValue() throws JNCException {
        delete("node-ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "node-ip-address" leaf will not have a value.
     */
    public void addNodeIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "node-ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "node-ip-address" with operation "replace".
     */
    public void markNodeIpAddressReplace() throws JNCException {
        markLeafReplace("nodeIpAddress");
    }

    /**
     * Marks the leaf "node-ip-address" with operation "merge".
     */
    public void markNodeIpAddressMerge() throws JNCException {
        markLeafMerge("nodeIpAddress");
    }

    /**
     * Marks the leaf "node-ip-address" with operation "create".
     */
    public void markNodeIpAddressCreate() throws JNCException {
        markLeafCreate("nodeIpAddress");
    }

    /**
     * Marks the leaf "node-ip-address" with operation "delete".
     */
    public void markNodeIpAddressDelete() throws JNCException {
        markLeafDelete("nodeIpAddress");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
