/* 
 * @(#)DynamicCacheOper.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.dns;
import A;

import Aaaa;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import Naptr;

import Srv;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/dns/dynamic-cache-oper"
 * <p>
 * See line 79 in
 * agwCmnDnsCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class DynamicCacheOper extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty DynamicCacheOper object.
     */
    public DynamicCacheOper() {
        super(Epc.NAMESPACE, "dynamic-cache-oper");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public DynamicCacheOper clone() {
        return (DynamicCacheOper)cloneContent(new DynamicCacheOper());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public DynamicCacheOper cloneShallow() {
        return (DynamicCacheOper)cloneShallowContent(new DynamicCacheOper());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "a",
            "aaaa",
            "srv",
            "naptr",
        };
    }

    /* Access methods for list child: "a". */

    /**
     * Gets list entry "a", with specified keys.
     */
    public A getA() throws JNCException {
        String path = "a";
        return (A)searchOne(path);
    }

    /**
     * Iterator method for the list "a".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator aIterator() {
        return new ElementChildrenIterator(children, "a");
    }

    /**
     * Adds list entry "a", using an existing object.
     * @param a The object to add.
     * @return The added child.
     */
    public A addA(A a) throws JNCException {
        insertChild(a, childrenNames());
        return a;
    }

    /**
     * Adds list entry "a".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public A addA() throws JNCException {
        A a = new A();
        insertChild(a, childrenNames());
        return a;
    }

    /**
     * Deletes list entry "a", with specified keys.
     */
    public void deleteA() throws JNCException {
        String path = "a";
        delete(path);
    }

    /* Access methods for list child: "aaaa". */

    /**
     * Gets list entry "aaaa", with specified keys.
     */
    public Aaaa getAaaa() throws JNCException {
        String path = "aaaa";
        return (Aaaa)searchOne(path);
    }

    /**
     * Iterator method for the list "aaaa".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator aaaaIterator() {
        return new ElementChildrenIterator(children, "aaaa");
    }

    /**
     * Adds list entry "aaaa", using an existing object.
     * @param aaaa The object to add.
     * @return The added child.
     */
    public Aaaa addAaaa(Aaaa aaaa) throws JNCException {
        insertChild(aaaa, childrenNames());
        return aaaa;
    }

    /**
     * Adds list entry "aaaa".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Aaaa addAaaa() throws JNCException {
        Aaaa aaaa = new Aaaa();
        insertChild(aaaa, childrenNames());
        return aaaa;
    }

    /**
     * Deletes list entry "aaaa", with specified keys.
     */
    public void deleteAaaa() throws JNCException {
        String path = "aaaa";
        delete(path);
    }

    /* Access methods for list child: "srv". */

    /**
     * Gets list entry "srv", with specified keys.
     */
    public Srv getSrv() throws JNCException {
        String path = "srv";
        return (Srv)searchOne(path);
    }

    /**
     * Iterator method for the list "srv".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator srvIterator() {
        return new ElementChildrenIterator(children, "srv");
    }

    /**
     * Adds list entry "srv", using an existing object.
     * @param srv The object to add.
     * @return The added child.
     */
    public Srv addSrv(Srv srv) throws JNCException {
        insertChild(srv, childrenNames());
        return srv;
    }

    /**
     * Adds list entry "srv".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Srv addSrv() throws JNCException {
        Srv srv = new Srv();
        insertChild(srv, childrenNames());
        return srv;
    }

    /**
     * Deletes list entry "srv", with specified keys.
     */
    public void deleteSrv() throws JNCException {
        String path = "srv";
        delete(path);
    }

    /* Access methods for list child: "naptr". */

    /**
     * Gets list entry "naptr", with specified keys.
     */
    public Naptr getNaptr() throws JNCException {
        String path = "naptr";
        return (Naptr)searchOne(path);
    }

    /**
     * Iterator method for the list "naptr".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator naptrIterator() {
        return new ElementChildrenIterator(children, "naptr");
    }

    /**
     * Adds list entry "naptr", using an existing object.
     * @param naptr The object to add.
     * @return The added child.
     */
    public Naptr addNaptr(Naptr naptr) throws JNCException {
        insertChild(naptr, childrenNames());
        return naptr;
    }

    /**
     * Adds list entry "naptr".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Naptr addNaptr() throws JNCException {
        Naptr naptr = new Naptr();
        insertChild(naptr, childrenNames());
        return naptr;
    }

    /**
     * Deletes list entry "naptr", with specified keys.
     */
    public void deleteNaptr() throws JNCException {
        String path = "naptr";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
