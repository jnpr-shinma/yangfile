/* 
 * @(#)StaticCache.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.dns;

import AgwDnsStaticA;

import AgwDnsStaticAaaa;

import AgwDnsStaticNaptr;

import AgwDnsStaticSrv;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/dns/static-cache"
 * <p>
 * See line 53 in
 * agwCmnDnsConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class StaticCache extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty StaticCache object.
     */
    public StaticCache() {
        super(Epc.NAMESPACE, "static-cache");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public StaticCache clone() {
        return (StaticCache)cloneContent(new StaticCache());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public StaticCache cloneShallow() {
        return (StaticCache)cloneShallowContent(new StaticCache());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "agw-dns-static-a",
            "agw-dns-static-aaaa",
            "agw-dns-static-srv",
            "agw-dns-static-naptr",
        };
    }

    /* Access methods for list child: "agw-dns-static-a". */

    /**
     * Gets list entry "agwDnsStaticA", with specified keys.
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticA getAgwDnsStaticA(YangUInt16 entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-a[entryIndex='" + entryIndexValue + "']";
        return (AgwDnsStaticA)searchOne(path);
    }

    /**
     * Gets list entry "agwDnsStaticA", with specified keys.
     * The keys are specified as strings.
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticA getAgwDnsStaticA(String entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-a[entryIndex='" + entryIndexValue + "']";
        return (AgwDnsStaticA)searchOne(path);
    }

    /**
     * Iterator method for the list "agw-dns-static-a".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator agwDnsStaticAIterator() {
        return new ElementChildrenIterator(children, "agw-dns-static-a");
    }

    /**
     * Adds list entry "agwDnsStaticA", using an existing object.
     * @param agwDnsStaticA The object to add.
     * @return The added child.
     */
    public AgwDnsStaticA addAgwDnsStaticA(AgwDnsStaticA agwDnsStaticA)
            throws JNCException {
        insertChild(agwDnsStaticA, childrenNames());
        return agwDnsStaticA;
    }

    /**
     * Adds list entry "agwDnsStaticA", with specified keys.
     * @param entryIndexValue Key argument of child.
     * @return The added child.
     */
    public AgwDnsStaticA addAgwDnsStaticA(YangUInt16 entryIndexValue)
            throws JNCException {
        AgwDnsStaticA agwDnsStaticA = new AgwDnsStaticA(entryIndexValue);
        return addAgwDnsStaticA(agwDnsStaticA);
    }

    /**
     * Adds list entry "agwDnsStaticA", with specified keys.
     * The keys are specified as strings.
     * @param entryIndexValue Key argument of child.
     * @return The added child.
     */
    public AgwDnsStaticA addAgwDnsStaticA(String entryIndexValue)
            throws JNCException {
        AgwDnsStaticA agwDnsStaticA = new AgwDnsStaticA(entryIndexValue);
        return addAgwDnsStaticA(agwDnsStaticA);
    }

    /**
     * Adds list entry "agwDnsStaticA".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AgwDnsStaticA addAgwDnsStaticA() throws JNCException {
        AgwDnsStaticA agwDnsStaticA = new AgwDnsStaticA();
        insertChild(agwDnsStaticA, childrenNames());
        return agwDnsStaticA;
    }

    /**
     * Deletes list entry "agwDnsStaticA", with specified keys.
     * @param entryIndexValue Key argument of child.
     */
    public void deleteAgwDnsStaticA(YangUInt16 entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-a[entryIndex='" + entryIndexValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "agwDnsStaticA", with specified keys.
     * The keys are specified as strings.
     * @param entryIndexValue Key argument of child.
     */
    public void deleteAgwDnsStaticA(String entryIndexValue) throws JNCException {
        String path = "agw-dns-static-a[entryIndex='" + entryIndexValue + "']";
        delete(path);
    }

    /* Access methods for list child: "agw-dns-static-aaaa". */

    /**
     * Gets list entry "agwDnsStaticAaaa", with specified keys.
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticAaaa getAgwDnsStaticAaaa(YangUInt16 entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-aaaa[entryIndex='" + entryIndexValue + "']";
        return (AgwDnsStaticAaaa)searchOne(path);
    }

    /**
     * Gets list entry "agwDnsStaticAaaa", with specified keys.
     * The keys are specified as strings.
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticAaaa getAgwDnsStaticAaaa(String entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-aaaa[entryIndex='" + entryIndexValue + "']";
        return (AgwDnsStaticAaaa)searchOne(path);
    }

    /**
     * Iterator method for the list "agw-dns-static-aaaa".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator agwDnsStaticAaaaIterator() {
        return new ElementChildrenIterator(children, "agw-dns-static-aaaa");
    }

    /**
     * Adds list entry "agwDnsStaticAaaa", using an existing object.
     * @param agwDnsStaticAaaa The object to add.
     * @return The added child.
     */
    public AgwDnsStaticAaaa addAgwDnsStaticAaaa(AgwDnsStaticAaaa agwDnsStaticAaaa)
            throws JNCException {
        insertChild(agwDnsStaticAaaa, childrenNames());
        return agwDnsStaticAaaa;
    }

    /**
     * Adds list entry "agwDnsStaticAaaa", with specified keys.
     * @param entryIndexValue Key argument of child.
     * @return The added child.
     */
    public AgwDnsStaticAaaa addAgwDnsStaticAaaa(YangUInt16 entryIndexValue)
            throws JNCException {
        AgwDnsStaticAaaa agwDnsStaticAaaa = new AgwDnsStaticAaaa(entryIndexValue);
        return addAgwDnsStaticAaaa(agwDnsStaticAaaa);
    }

    /**
     * Adds list entry "agwDnsStaticAaaa", with specified keys.
     * The keys are specified as strings.
     * @param entryIndexValue Key argument of child.
     * @return The added child.
     */
    public AgwDnsStaticAaaa addAgwDnsStaticAaaa(String entryIndexValue)
            throws JNCException {
        AgwDnsStaticAaaa agwDnsStaticAaaa = new AgwDnsStaticAaaa(entryIndexValue);
        return addAgwDnsStaticAaaa(agwDnsStaticAaaa);
    }

    /**
     * Adds list entry "agwDnsStaticAaaa".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AgwDnsStaticAaaa addAgwDnsStaticAaaa() throws JNCException {
        AgwDnsStaticAaaa agwDnsStaticAaaa = new AgwDnsStaticAaaa();
        insertChild(agwDnsStaticAaaa, childrenNames());
        return agwDnsStaticAaaa;
    }

    /**
     * Deletes list entry "agwDnsStaticAaaa", with specified keys.
     * @param entryIndexValue Key argument of child.
     */
    public void deleteAgwDnsStaticAaaa(YangUInt16 entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-aaaa[entryIndex='" + entryIndexValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "agwDnsStaticAaaa", with specified keys.
     * The keys are specified as strings.
     * @param entryIndexValue Key argument of child.
     */
    public void deleteAgwDnsStaticAaaa(String entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-aaaa[entryIndex='" + entryIndexValue + "']";
        delete(path);
    }

    /* Access methods for list child: "agw-dns-static-srv". */

    /**
     * Gets list entry "agwDnsStaticSrv", with specified keys.
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticSrv getAgwDnsStaticSrv(YangUInt16 entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-srv[entryIndex='" + entryIndexValue + "']";
        return (AgwDnsStaticSrv)searchOne(path);
    }

    /**
     * Gets list entry "agwDnsStaticSrv", with specified keys.
     * The keys are specified as strings.
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticSrv getAgwDnsStaticSrv(String entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-srv[entryIndex='" + entryIndexValue + "']";
        return (AgwDnsStaticSrv)searchOne(path);
    }

    /**
     * Iterator method for the list "agw-dns-static-srv".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator agwDnsStaticSrvIterator() {
        return new ElementChildrenIterator(children, "agw-dns-static-srv");
    }

    /**
     * Adds list entry "agwDnsStaticSrv", using an existing object.
     * @param agwDnsStaticSrv The object to add.
     * @return The added child.
     */
    public AgwDnsStaticSrv addAgwDnsStaticSrv(AgwDnsStaticSrv agwDnsStaticSrv)
            throws JNCException {
        insertChild(agwDnsStaticSrv, childrenNames());
        return agwDnsStaticSrv;
    }

    /**
     * Adds list entry "agwDnsStaticSrv", with specified keys.
     * @param entryIndexValue Key argument of child.
     * @return The added child.
     */
    public AgwDnsStaticSrv addAgwDnsStaticSrv(YangUInt16 entryIndexValue)
            throws JNCException {
        AgwDnsStaticSrv agwDnsStaticSrv = new AgwDnsStaticSrv(entryIndexValue);
        return addAgwDnsStaticSrv(agwDnsStaticSrv);
    }

    /**
     * Adds list entry "agwDnsStaticSrv", with specified keys.
     * The keys are specified as strings.
     * @param entryIndexValue Key argument of child.
     * @return The added child.
     */
    public AgwDnsStaticSrv addAgwDnsStaticSrv(String entryIndexValue)
            throws JNCException {
        AgwDnsStaticSrv agwDnsStaticSrv = new AgwDnsStaticSrv(entryIndexValue);
        return addAgwDnsStaticSrv(agwDnsStaticSrv);
    }

    /**
     * Adds list entry "agwDnsStaticSrv".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AgwDnsStaticSrv addAgwDnsStaticSrv() throws JNCException {
        AgwDnsStaticSrv agwDnsStaticSrv = new AgwDnsStaticSrv();
        insertChild(agwDnsStaticSrv, childrenNames());
        return agwDnsStaticSrv;
    }

    /**
     * Deletes list entry "agwDnsStaticSrv", with specified keys.
     * @param entryIndexValue Key argument of child.
     */
    public void deleteAgwDnsStaticSrv(YangUInt16 entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-srv[entryIndex='" + entryIndexValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "agwDnsStaticSrv", with specified keys.
     * The keys are specified as strings.
     * @param entryIndexValue Key argument of child.
     */
    public void deleteAgwDnsStaticSrv(String entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-srv[entryIndex='" + entryIndexValue + "']";
        delete(path);
    }

    /* Access methods for list child: "agw-dns-static-naptr". */

    /**
     * Gets list entry "agwDnsStaticNaptr", with specified keys.
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticNaptr getAgwDnsStaticNaptr(YangUInt16 entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-naptr[entryIndex='" + entryIndexValue + "']";
        return (AgwDnsStaticNaptr)searchOne(path);
    }

    /**
     * Gets list entry "agwDnsStaticNaptr", with specified keys.
     * The keys are specified as strings.
     * @param entryIndexValue Key argument of child.
     */
    public AgwDnsStaticNaptr getAgwDnsStaticNaptr(String entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-naptr[entryIndex='" + entryIndexValue + "']";
        return (AgwDnsStaticNaptr)searchOne(path);
    }

    /**
     * Iterator method for the list "agw-dns-static-naptr".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator agwDnsStaticNaptrIterator() {
        return new ElementChildrenIterator(children, "agw-dns-static-naptr");
    }

    /**
     * Adds list entry "agwDnsStaticNaptr", using an existing object.
     * @param agwDnsStaticNaptr The object to add.
     * @return The added child.
     */
    public AgwDnsStaticNaptr addAgwDnsStaticNaptr(AgwDnsStaticNaptr agwDnsStaticNaptr)
            throws JNCException {
        insertChild(agwDnsStaticNaptr, childrenNames());
        return agwDnsStaticNaptr;
    }

    /**
     * Adds list entry "agwDnsStaticNaptr", with specified keys.
     * @param entryIndexValue Key argument of child.
     * @return The added child.
     */
    public AgwDnsStaticNaptr addAgwDnsStaticNaptr(YangUInt16 entryIndexValue)
            throws JNCException {
        AgwDnsStaticNaptr agwDnsStaticNaptr = new AgwDnsStaticNaptr(entryIndexValue);
        return addAgwDnsStaticNaptr(agwDnsStaticNaptr);
    }

    /**
     * Adds list entry "agwDnsStaticNaptr", with specified keys.
     * The keys are specified as strings.
     * @param entryIndexValue Key argument of child.
     * @return The added child.
     */
    public AgwDnsStaticNaptr addAgwDnsStaticNaptr(String entryIndexValue)
            throws JNCException {
        AgwDnsStaticNaptr agwDnsStaticNaptr = new AgwDnsStaticNaptr(entryIndexValue);
        return addAgwDnsStaticNaptr(agwDnsStaticNaptr);
    }

    /**
     * Adds list entry "agwDnsStaticNaptr".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AgwDnsStaticNaptr addAgwDnsStaticNaptr() throws JNCException {
        AgwDnsStaticNaptr agwDnsStaticNaptr = new AgwDnsStaticNaptr();
        insertChild(agwDnsStaticNaptr, childrenNames());
        return agwDnsStaticNaptr;
    }

    /**
     * Deletes list entry "agwDnsStaticNaptr", with specified keys.
     * @param entryIndexValue Key argument of child.
     */
    public void deleteAgwDnsStaticNaptr(YangUInt16 entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-naptr[entryIndex='" + entryIndexValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "agwDnsStaticNaptr", with specified keys.
     * The keys are specified as strings.
     * @param entryIndexValue Key argument of child.
     */
    public void deleteAgwDnsStaticNaptr(String entryIndexValue)
            throws JNCException {
        String path = "agw-dns-static-naptr[entryIndex='" + entryIndexValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
