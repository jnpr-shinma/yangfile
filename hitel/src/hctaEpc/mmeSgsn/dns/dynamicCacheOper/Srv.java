/* 
 * @(#)Srv.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.dns.dynamicCacheOper;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/dns/dynamicCacheOper/srv"
 * <p>
 * See line 171 in
 * agwCmnDnsCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Srv extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Srv object.
     */
    public Srv() {
        super(Epc.NAMESPACE, "srv");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Srv clone() {
        return (Srv)cloneContent(new Srv());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Srv cloneShallow() {
        return (Srv)cloneShallowContent(new Srv());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "service",
            "domain-name",
            "index",
            "full-domain-name",
            "srv-priority",
            "srv-weight",
            "srv-port",
            "srv-target-name",
        };
    }

    /* Access methods for leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "domain-name". */

    /**
     * Gets the value for child leaf "domain-name".
     * @return The value of the leaf.
     */
    public YangString getDomainNameValue() throws JNCException {
        return (YangString)getValue("domain-name");
    }

    /**
     * Sets the value for child leaf "domain-name",
     * using instance of generated typedef class.
     * @param domainNameValue The value to set.
     * @param domainNameValue used during instantiation.
     */
    public void setDomainNameValue(YangString domainNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "domain-name",
            domainNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "domain-name",
     * using a String value.
     * @param domainNameValue used during instantiation.
     */
    public void setDomainNameValue(String domainNameValue) throws JNCException {
        setDomainNameValue(new YangString(domainNameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "domain-name" leaf will not have a value.
     */
    public void addDomainName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "domain-name",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "index". */

    /**
     * Gets the value for child leaf "index".
     * @return The value of the leaf.
     */
    public YangUInt16 getIndexValue() throws JNCException {
        return (YangUInt16)getValue("index");
    }

    /**
     * Sets the value for child leaf "index",
     * using instance of generated typedef class.
     * @param indexValue The value to set.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(YangUInt16 indexValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "index",
            indexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "index",
     * using Java primitive values.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(int indexValue) throws JNCException {
        setIndexValue(new YangUInt16(indexValue));
    }

    /**
     * Sets the value for child leaf "index",
     * using a String value.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(String indexValue) throws JNCException {
        setIndexValue(new YangUInt16(indexValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "index" leaf will not have a value.
     */
    public void addIndex() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "index",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "full-domain-name". */

    /**
     * Gets the value for child leaf "full-domain-name".
     * @return The value of the leaf.
     */
    public YangString getFullDomainNameValue() throws JNCException {
        return (YangString)getValue("full-domain-name");
    }

    /**
     * Sets the value for child leaf "full-domain-name",
     * using instance of generated typedef class.
     * @param fullDomainNameValue The value to set.
     * @param fullDomainNameValue used during instantiation.
     */
    public void setFullDomainNameValue(YangString fullDomainNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "full-domain-name",
            fullDomainNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "full-domain-name",
     * using a String value.
     * @param fullDomainNameValue used during instantiation.
     */
    public void setFullDomainNameValue(String fullDomainNameValue)
            throws JNCException {
        setFullDomainNameValue(new YangString(fullDomainNameValue));
    }

    /**
     * Unsets the value for child leaf "full-domain-name".
     */
    public void unsetFullDomainNameValue() throws JNCException {
        delete("full-domain-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "full-domain-name" leaf will not have a value.
     */
    public void addFullDomainName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "full-domain-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "full-domain-name" with operation "replace".
     */
    public void markFullDomainNameReplace() throws JNCException {
        markLeafReplace("fullDomainName");
    }

    /**
     * Marks the leaf "full-domain-name" with operation "merge".
     */
    public void markFullDomainNameMerge() throws JNCException {
        markLeafMerge("fullDomainName");
    }

    /**
     * Marks the leaf "full-domain-name" with operation "create".
     */
    public void markFullDomainNameCreate() throws JNCException {
        markLeafCreate("fullDomainName");
    }

    /**
     * Marks the leaf "full-domain-name" with operation "delete".
     */
    public void markFullDomainNameDelete() throws JNCException {
        markLeafDelete("fullDomainName");
    }

    /* Access methods for optional leaf child: "srv-priority". */

    /**
     * Gets the value for child leaf "srv-priority".
     * @return The value of the leaf.
     */
    public YangUInt32 getSrvPriorityValue() throws JNCException {
        return (YangUInt32)getValue("srv-priority");
    }

    /**
     * Sets the value for child leaf "srv-priority",
     * using instance of generated typedef class.
     * @param srvPriorityValue The value to set.
     * @param srvPriorityValue used during instantiation.
     */
    public void setSrvPriorityValue(YangUInt32 srvPriorityValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "srv-priority",
            srvPriorityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "srv-priority",
     * using Java primitive values.
     * @param srvPriorityValue used during instantiation.
     */
    public void setSrvPriorityValue(long srvPriorityValue) throws JNCException {
        setSrvPriorityValue(new YangUInt32(srvPriorityValue));
    }

    /**
     * Sets the value for child leaf "srv-priority",
     * using a String value.
     * @param srvPriorityValue used during instantiation.
     */
    public void setSrvPriorityValue(String srvPriorityValue)
            throws JNCException {
        setSrvPriorityValue(new YangUInt32(srvPriorityValue));
    }

    /**
     * Unsets the value for child leaf "srv-priority".
     */
    public void unsetSrvPriorityValue() throws JNCException {
        delete("srv-priority");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "srv-priority" leaf will not have a value.
     */
    public void addSrvPriority() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "srv-priority",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "srv-priority" with operation "replace".
     */
    public void markSrvPriorityReplace() throws JNCException {
        markLeafReplace("srvPriority");
    }

    /**
     * Marks the leaf "srv-priority" with operation "merge".
     */
    public void markSrvPriorityMerge() throws JNCException {
        markLeafMerge("srvPriority");
    }

    /**
     * Marks the leaf "srv-priority" with operation "create".
     */
    public void markSrvPriorityCreate() throws JNCException {
        markLeafCreate("srvPriority");
    }

    /**
     * Marks the leaf "srv-priority" with operation "delete".
     */
    public void markSrvPriorityDelete() throws JNCException {
        markLeafDelete("srvPriority");
    }

    /* Access methods for optional leaf child: "srv-weight". */

    /**
     * Gets the value for child leaf "srv-weight".
     * @return The value of the leaf.
     */
    public YangUInt32 getSrvWeightValue() throws JNCException {
        return (YangUInt32)getValue("srv-weight");
    }

    /**
     * Sets the value for child leaf "srv-weight",
     * using instance of generated typedef class.
     * @param srvWeightValue The value to set.
     * @param srvWeightValue used during instantiation.
     */
    public void setSrvWeightValue(YangUInt32 srvWeightValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "srv-weight",
            srvWeightValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "srv-weight",
     * using Java primitive values.
     * @param srvWeightValue used during instantiation.
     */
    public void setSrvWeightValue(long srvWeightValue) throws JNCException {
        setSrvWeightValue(new YangUInt32(srvWeightValue));
    }

    /**
     * Sets the value for child leaf "srv-weight",
     * using a String value.
     * @param srvWeightValue used during instantiation.
     */
    public void setSrvWeightValue(String srvWeightValue) throws JNCException {
        setSrvWeightValue(new YangUInt32(srvWeightValue));
    }

    /**
     * Unsets the value for child leaf "srv-weight".
     */
    public void unsetSrvWeightValue() throws JNCException {
        delete("srv-weight");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "srv-weight" leaf will not have a value.
     */
    public void addSrvWeight() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "srv-weight",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "srv-weight" with operation "replace".
     */
    public void markSrvWeightReplace() throws JNCException {
        markLeafReplace("srvWeight");
    }

    /**
     * Marks the leaf "srv-weight" with operation "merge".
     */
    public void markSrvWeightMerge() throws JNCException {
        markLeafMerge("srvWeight");
    }

    /**
     * Marks the leaf "srv-weight" with operation "create".
     */
    public void markSrvWeightCreate() throws JNCException {
        markLeafCreate("srvWeight");
    }

    /**
     * Marks the leaf "srv-weight" with operation "delete".
     */
    public void markSrvWeightDelete() throws JNCException {
        markLeafDelete("srvWeight");
    }

    /* Access methods for optional leaf child: "srv-port". */

    /**
     * Gets the value for child leaf "srv-port".
     * @return The value of the leaf.
     */
    public YangUInt32 getSrvPortValue() throws JNCException {
        return (YangUInt32)getValue("srv-port");
    }

    /**
     * Sets the value for child leaf "srv-port",
     * using instance of generated typedef class.
     * @param srvPortValue The value to set.
     * @param srvPortValue used during instantiation.
     */
    public void setSrvPortValue(YangUInt32 srvPortValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "srv-port",
            srvPortValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "srv-port",
     * using Java primitive values.
     * @param srvPortValue used during instantiation.
     */
    public void setSrvPortValue(long srvPortValue) throws JNCException {
        setSrvPortValue(new YangUInt32(srvPortValue));
    }

    /**
     * Sets the value for child leaf "srv-port",
     * using a String value.
     * @param srvPortValue used during instantiation.
     */
    public void setSrvPortValue(String srvPortValue) throws JNCException {
        setSrvPortValue(new YangUInt32(srvPortValue));
    }

    /**
     * Unsets the value for child leaf "srv-port".
     */
    public void unsetSrvPortValue() throws JNCException {
        delete("srv-port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "srv-port" leaf will not have a value.
     */
    public void addSrvPort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "srv-port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "srv-port" with operation "replace".
     */
    public void markSrvPortReplace() throws JNCException {
        markLeafReplace("srvPort");
    }

    /**
     * Marks the leaf "srv-port" with operation "merge".
     */
    public void markSrvPortMerge() throws JNCException {
        markLeafMerge("srvPort");
    }

    /**
     * Marks the leaf "srv-port" with operation "create".
     */
    public void markSrvPortCreate() throws JNCException {
        markLeafCreate("srvPort");
    }

    /**
     * Marks the leaf "srv-port" with operation "delete".
     */
    public void markSrvPortDelete() throws JNCException {
        markLeafDelete("srvPort");
    }

    /* Access methods for optional leaf child: "srv-target-name". */

    /**
     * Gets the value for child leaf "srv-target-name".
     * @return The value of the leaf.
     */
    public YangString getSrvTargetNameValue() throws JNCException {
        return (YangString)getValue("srv-target-name");
    }

    /**
     * Sets the value for child leaf "srv-target-name",
     * using instance of generated typedef class.
     * @param srvTargetNameValue The value to set.
     * @param srvTargetNameValue used during instantiation.
     */
    public void setSrvTargetNameValue(YangString srvTargetNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "srv-target-name",
            srvTargetNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "srv-target-name",
     * using a String value.
     * @param srvTargetNameValue used during instantiation.
     */
    public void setSrvTargetNameValue(String srvTargetNameValue)
            throws JNCException {
        setSrvTargetNameValue(new YangString(srvTargetNameValue));
    }

    /**
     * Unsets the value for child leaf "srv-target-name".
     */
    public void unsetSrvTargetNameValue() throws JNCException {
        delete("srv-target-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "srv-target-name" leaf will not have a value.
     */
    public void addSrvTargetName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "srv-target-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "srv-target-name" with operation "replace".
     */
    public void markSrvTargetNameReplace() throws JNCException {
        markLeafReplace("srvTargetName");
    }

    /**
     * Marks the leaf "srv-target-name" with operation "merge".
     */
    public void markSrvTargetNameMerge() throws JNCException {
        markLeafMerge("srvTargetName");
    }

    /**
     * Marks the leaf "srv-target-name" with operation "create".
     */
    public void markSrvTargetNameCreate() throws JNCException {
        markLeafCreate("srvTargetName");
    }

    /**
     * Marks the leaf "srv-target-name" with operation "delete".
     */
    public void markSrvTargetNameDelete() throws JNCException {
        markLeafDelete("srvTargetName");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
