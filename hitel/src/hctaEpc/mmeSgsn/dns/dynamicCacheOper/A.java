/* 
 * @(#)A.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.dns.dynamicCacheOper;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/dns/dynamicCacheOper/a"
 * <p>
 * See line 83 in
 * agwCmnDnsCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class A extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty A object.
     */
    public A() {
        super(Epc.NAMESPACE, "a");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public A clone() {
        return (A)cloneContent(new A());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public A cloneShallow() {
        return (A)cloneShallowContent(new A());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "service",
            "domain-name",
            "index",
            "full-domain-name",
            "node-ip-address",
        };
    }

    /* Access methods for leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "domain-name". */

    /**
     * Gets the value for child leaf "domain-name".
     * @return The value of the leaf.
     */
    public YangString getDomainNameValue() throws JNCException {
        return (YangString)getValue("domain-name");
    }

    /**
     * Sets the value for child leaf "domain-name",
     * using instance of generated typedef class.
     * @param domainNameValue The value to set.
     * @param domainNameValue used during instantiation.
     */
    public void setDomainNameValue(YangString domainNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "domain-name",
            domainNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "domain-name",
     * using a String value.
     * @param domainNameValue used during instantiation.
     */
    public void setDomainNameValue(String domainNameValue) throws JNCException {
        setDomainNameValue(new YangString(domainNameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "domain-name" leaf will not have a value.
     */
    public void addDomainName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "domain-name",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "index". */

    /**
     * Gets the value for child leaf "index".
     * @return The value of the leaf.
     */
    public YangUInt16 getIndexValue() throws JNCException {
        return (YangUInt16)getValue("index");
    }

    /**
     * Sets the value for child leaf "index",
     * using instance of generated typedef class.
     * @param indexValue The value to set.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(YangUInt16 indexValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "index",
            indexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "index",
     * using Java primitive values.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(int indexValue) throws JNCException {
        setIndexValue(new YangUInt16(indexValue));
    }

    /**
     * Sets the value for child leaf "index",
     * using a String value.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(String indexValue) throws JNCException {
        setIndexValue(new YangUInt16(indexValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "index" leaf will not have a value.
     */
    public void addIndex() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "index",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "full-domain-name". */

    /**
     * Gets the value for child leaf "full-domain-name".
     * @return The value of the leaf.
     */
    public YangString getFullDomainNameValue() throws JNCException {
        return (YangString)getValue("full-domain-name");
    }

    /**
     * Sets the value for child leaf "full-domain-name",
     * using instance of generated typedef class.
     * @param fullDomainNameValue The value to set.
     * @param fullDomainNameValue used during instantiation.
     */
    public void setFullDomainNameValue(YangString fullDomainNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "full-domain-name",
            fullDomainNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "full-domain-name",
     * using a String value.
     * @param fullDomainNameValue used during instantiation.
     */
    public void setFullDomainNameValue(String fullDomainNameValue)
            throws JNCException {
        setFullDomainNameValue(new YangString(fullDomainNameValue));
    }

    /**
     * Unsets the value for child leaf "full-domain-name".
     */
    public void unsetFullDomainNameValue() throws JNCException {
        delete("full-domain-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "full-domain-name" leaf will not have a value.
     */
    public void addFullDomainName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "full-domain-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "full-domain-name" with operation "replace".
     */
    public void markFullDomainNameReplace() throws JNCException {
        markLeafReplace("fullDomainName");
    }

    /**
     * Marks the leaf "full-domain-name" with operation "merge".
     */
    public void markFullDomainNameMerge() throws JNCException {
        markLeafMerge("fullDomainName");
    }

    /**
     * Marks the leaf "full-domain-name" with operation "create".
     */
    public void markFullDomainNameCreate() throws JNCException {
        markLeafCreate("fullDomainName");
    }

    /**
     * Marks the leaf "full-domain-name" with operation "delete".
     */
    public void markFullDomainNameDelete() throws JNCException {
        markLeafDelete("fullDomainName");
    }

    /* Access methods for optional leaf child: "node-ip-address". */

    /**
     * Gets the value for child leaf "node-ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getNodeIpAddressValue() throws JNCException {
        return (IpAddress)getValue("node-ip-address");
    }

    /**
     * Sets the value for child leaf "node-ip-address",
     * using a JNC type value.
     * @param nodeIpAddressValue The value to set.
     * @param nodeIpAddressValue used during instantiation.
     */
    public void setNodeIpAddressValue(IpAddress nodeIpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "node-ip-address",
            nodeIpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "node-ip-address",
     * using a String value.
     * @param nodeIpAddressValue used during instantiation.
     */
    public void setNodeIpAddressValue(String nodeIpAddressValue)
            throws JNCException {
        setNodeIpAddressValue(new IpAddress(nodeIpAddressValue));
    }

    /**
     * Unsets the value for child leaf "node-ip-address".
     */
    public void unsetNodeIpAddressValue() throws JNCException {
        delete("node-ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "node-ip-address" leaf will not have a value.
     */
    public void addNodeIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "node-ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "node-ip-address" with operation "replace".
     */
    public void markNodeIpAddressReplace() throws JNCException {
        markLeafReplace("nodeIpAddress");
    }

    /**
     * Marks the leaf "node-ip-address" with operation "merge".
     */
    public void markNodeIpAddressMerge() throws JNCException {
        markLeafMerge("nodeIpAddress");
    }

    /**
     * Marks the leaf "node-ip-address" with operation "create".
     */
    public void markNodeIpAddressCreate() throws JNCException {
        markLeafCreate("nodeIpAddress");
    }

    /**
     * Marks the leaf "node-ip-address" with operation "delete".
     */
    public void markNodeIpAddressDelete() throws JNCException {
        markLeafDelete("nodeIpAddress");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
