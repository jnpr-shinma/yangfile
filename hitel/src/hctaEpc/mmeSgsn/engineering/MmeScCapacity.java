/* 
 * @(#)MmeScCapacity.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.engineering;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt16;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/engineering/mme-sc-capacity"
 * <p>
 * See line 2476 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeScCapacity extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeScCapacity object.
     */
    public MmeScCapacity() {
        super(Epc.NAMESPACE, "mme-sc-capacity");
    }

    /**
     * Constructor for an initialized MmeScCapacity object,
     * 
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeScCapacity(YangUInt16 callpServiceIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-sc-capacity");
        Leaf callpServiceId = new Leaf(Epc.NAMESPACE, "callp-service-id");
        callpServiceId.setValue(callpServiceIdValue);
        insertChild(callpServiceId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeScCapacity object,
     * with String keys.
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeScCapacity(String callpServiceIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-sc-capacity");
        Leaf callpServiceId = new Leaf(Epc.NAMESPACE, "callp-service-id");
        callpServiceId.setValue(new YangUInt16(callpServiceIdValue));
        insertChild(callpServiceId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeScCapacity object,
     * with keys of built in Java types.
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeScCapacity(int callpServiceIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-sc-capacity");
        Leaf callpServiceId = new Leaf(Epc.NAMESPACE, "callp-service-id");
        callpServiceId.setValue(new YangUInt16(callpServiceIdValue));
        insertChild(callpServiceId, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeScCapacity clone() {
        MmeScCapacity copy;
        try {
            copy = new MmeScCapacity(getCallpServiceIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeScCapacity)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeScCapacity cloneShallow() {
        MmeScCapacity copy;
        try {
            copy = new MmeScCapacity(getCallpServiceIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeScCapacity)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "callp-service-id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "callp-service-id",
            "subs-per-su",
        };
    }

    /* Access methods for leaf child: "callp-service-id". */

    /**
     * Gets the value for child leaf "callp-service-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getCallpServiceIdValue() throws JNCException {
        return (YangUInt16)getValue("callp-service-id");
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using instance of generated typedef class.
     * @param callpServiceIdValue The value to set.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(YangUInt16 callpServiceIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "callp-service-id",
            callpServiceIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using Java primitive values.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(int callpServiceIdValue)
            throws JNCException {
        setCallpServiceIdValue(new YangUInt16(callpServiceIdValue));
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using a String value.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(String callpServiceIdValue)
            throws JNCException {
        setCallpServiceIdValue(new YangUInt16(callpServiceIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "callp-service-id" leaf will not have a value.
     */
    public void addCallpServiceId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "callp-service-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "subs-per-su". */

    /**
     * Gets the value for child leaf "subs-per-su".
     * @return The value of the leaf.
     */
    public YangUInt16 getSubsPerSuValue() throws JNCException {
        return (YangUInt16)getValue("subs-per-su");
    }

    /**
     * Sets the value for child leaf "subs-per-su",
     * using instance of generated typedef class.
     * @param subsPerSuValue The value to set.
     * @param subsPerSuValue used during instantiation.
     */
    public void setSubsPerSuValue(YangUInt16 subsPerSuValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "subs-per-su",
            subsPerSuValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "subs-per-su",
     * using Java primitive values.
     * @param subsPerSuValue used during instantiation.
     */
    public void setSubsPerSuValue(int subsPerSuValue) throws JNCException {
        setSubsPerSuValue(new YangUInt16(subsPerSuValue));
    }

    /**
     * Sets the value for child leaf "subs-per-su",
     * using a String value.
     * @param subsPerSuValue used during instantiation.
     */
    public void setSubsPerSuValue(String subsPerSuValue) throws JNCException {
        setSubsPerSuValue(new YangUInt16(subsPerSuValue));
    }

    /**
     * Unsets the value for child leaf "subs-per-su".
     */
    public void unsetSubsPerSuValue() throws JNCException {
        delete("subs-per-su");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "subs-per-su" leaf will not have a value.
     */
    public void addSubsPerSu() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "subs-per-su",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "subs-per-su" with operation "replace".
     */
    public void markSubsPerSuReplace() throws JNCException {
        markLeafReplace("subsPerSu");
    }

    /**
     * Marks the leaf "subs-per-su" with operation "merge".
     */
    public void markSubsPerSuMerge() throws JNCException {
        markLeafMerge("subsPerSu");
    }

    /**
     * Marks the leaf "subs-per-su" with operation "create".
     */
    public void markSubsPerSuCreate() throws JNCException {
        markLeafCreate("subsPerSu");
    }

    /**
     * Marks the leaf "subs-per-su" with operation "delete".
     */
    public void markSubsPerSuDelete() throws JNCException {
        markLeafDelete("subsPerSu");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
