/* 
 * @(#)MmeSdEngineering.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.engineering;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/engineering/mme-sd-engineering"
 * <p>
 * See line 23 in
 * sdConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeSdEngineering extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeSdEngineering object.
     */
    public MmeSdEngineering() {
        super(Epc.NAMESPACE, "mme-sd-engineering");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeSdEngineering clone() {
        return (MmeSdEngineering)cloneContent(new MmeSdEngineering());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeSdEngineering cloneShallow() {
        return (MmeSdEngineering)cloneShallowContent(new MmeSdEngineering());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "dl-percent-buffered-sessions",
            "dl-buff-max-pdu-per-session",
            "dl-buff-max-bytes-per-session",
            "dl-buff-total-bytes-reserved",
            "irau-percent-buffered-sessions",
            "irau-buff-max-pdu-per-session",
            "irau-buff-max-bytes-per-session",
            "irau-buff-total-bytes-reserved",
            "buff-check-interval",
            "pdu-lifetime-in-buff",
            "percent-umts-buff",
            "lle-to-mobile-ratio",
        };
    }

    /* Access methods for optional leaf child: "dl-percent-buffered-sessions". */

    /**
     * Gets the value for child leaf "dl-percent-buffered-sessions".
     * @return The value of the leaf.
     */
    public YangUInt8 getDlPercentBufferedSessionsValue() throws JNCException {
        YangUInt8 dlPercentBufferedSessions = (YangUInt8)getValue("dl-percent-buffered-sessions");
        if (dlPercentBufferedSessions == null) {
            dlPercentBufferedSessions = new YangUInt8("10");  // default
        }
        return dlPercentBufferedSessions;
    }

    /**
     * Sets the value for child leaf "dl-percent-buffered-sessions",
     * using instance of generated typedef class.
     * @param dlPercentBufferedSessionsValue The value to set.
     * @param dlPercentBufferedSessionsValue used during instantiation.
     */
    public void setDlPercentBufferedSessionsValue(YangUInt8 dlPercentBufferedSessionsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dl-percent-buffered-sessions",
            dlPercentBufferedSessionsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dl-percent-buffered-sessions",
     * using Java primitive values.
     * @param dlPercentBufferedSessionsValue used during instantiation.
     */
    public void setDlPercentBufferedSessionsValue(short dlPercentBufferedSessionsValue)
            throws JNCException {
        setDlPercentBufferedSessionsValue(new YangUInt8(dlPercentBufferedSessionsValue));
    }

    /**
     * Sets the value for child leaf "dl-percent-buffered-sessions",
     * using a String value.
     * @param dlPercentBufferedSessionsValue used during instantiation.
     */
    public void setDlPercentBufferedSessionsValue(String dlPercentBufferedSessionsValue)
            throws JNCException {
        setDlPercentBufferedSessionsValue(new YangUInt8(dlPercentBufferedSessionsValue));
    }

    /**
     * Unsets the value for child leaf "dl-percent-buffered-sessions".
     */
    public void unsetDlPercentBufferedSessionsValue() throws JNCException {
        delete("dl-percent-buffered-sessions");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dl-percent-buffered-sessions" leaf will not have a value.
     */
    public void addDlPercentBufferedSessions() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dl-percent-buffered-sessions",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dl-percent-buffered-sessions" with operation "replace".
     */
    public void markDlPercentBufferedSessionsReplace() throws JNCException {
        markLeafReplace("dlPercentBufferedSessions");
    }

    /**
     * Marks the leaf "dl-percent-buffered-sessions" with operation "merge".
     */
    public void markDlPercentBufferedSessionsMerge() throws JNCException {
        markLeafMerge("dlPercentBufferedSessions");
    }

    /**
     * Marks the leaf "dl-percent-buffered-sessions" with operation "create".
     */
    public void markDlPercentBufferedSessionsCreate() throws JNCException {
        markLeafCreate("dlPercentBufferedSessions");
    }

    /**
     * Marks the leaf "dl-percent-buffered-sessions" with operation "delete".
     */
    public void markDlPercentBufferedSessionsDelete() throws JNCException {
        markLeafDelete("dlPercentBufferedSessions");
    }

    /* Access methods for optional leaf child: "dl-buff-max-pdu-per-session". */

    /**
     * Gets the value for child leaf "dl-buff-max-pdu-per-session".
     * @return The value of the leaf.
     */
    public YangUInt8 getDlBuffMaxPduPerSessionValue() throws JNCException {
        YangUInt8 dlBuffMaxPduPerSession = (YangUInt8)getValue("dl-buff-max-pdu-per-session");
        if (dlBuffMaxPduPerSession == null) {
            dlBuffMaxPduPerSession = new YangUInt8("12");  // default
        }
        return dlBuffMaxPduPerSession;
    }

    /**
     * Sets the value for child leaf "dl-buff-max-pdu-per-session",
     * using instance of generated typedef class.
     * @param dlBuffMaxPduPerSessionValue The value to set.
     * @param dlBuffMaxPduPerSessionValue used during instantiation.
     */
    public void setDlBuffMaxPduPerSessionValue(YangUInt8 dlBuffMaxPduPerSessionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dl-buff-max-pdu-per-session",
            dlBuffMaxPduPerSessionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dl-buff-max-pdu-per-session",
     * using Java primitive values.
     * @param dlBuffMaxPduPerSessionValue used during instantiation.
     */
    public void setDlBuffMaxPduPerSessionValue(short dlBuffMaxPduPerSessionValue)
            throws JNCException {
        setDlBuffMaxPduPerSessionValue(new YangUInt8(dlBuffMaxPduPerSessionValue));
    }

    /**
     * Sets the value for child leaf "dl-buff-max-pdu-per-session",
     * using a String value.
     * @param dlBuffMaxPduPerSessionValue used during instantiation.
     */
    public void setDlBuffMaxPduPerSessionValue(String dlBuffMaxPduPerSessionValue)
            throws JNCException {
        setDlBuffMaxPduPerSessionValue(new YangUInt8(dlBuffMaxPduPerSessionValue));
    }

    /**
     * Unsets the value for child leaf "dl-buff-max-pdu-per-session".
     */
    public void unsetDlBuffMaxPduPerSessionValue() throws JNCException {
        delete("dl-buff-max-pdu-per-session");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dl-buff-max-pdu-per-session" leaf will not have a value.
     */
    public void addDlBuffMaxPduPerSession() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dl-buff-max-pdu-per-session",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dl-buff-max-pdu-per-session" with operation "replace".
     */
    public void markDlBuffMaxPduPerSessionReplace() throws JNCException {
        markLeafReplace("dlBuffMaxPduPerSession");
    }

    /**
     * Marks the leaf "dl-buff-max-pdu-per-session" with operation "merge".
     */
    public void markDlBuffMaxPduPerSessionMerge() throws JNCException {
        markLeafMerge("dlBuffMaxPduPerSession");
    }

    /**
     * Marks the leaf "dl-buff-max-pdu-per-session" with operation "create".
     */
    public void markDlBuffMaxPduPerSessionCreate() throws JNCException {
        markLeafCreate("dlBuffMaxPduPerSession");
    }

    /**
     * Marks the leaf "dl-buff-max-pdu-per-session" with operation "delete".
     */
    public void markDlBuffMaxPduPerSessionDelete() throws JNCException {
        markLeafDelete("dlBuffMaxPduPerSession");
    }

    /* Access methods for optional leaf child: "dl-buff-max-bytes-per-session". */

    /**
     * Gets the value for child leaf "dl-buff-max-bytes-per-session".
     * @return The value of the leaf.
     */
    public YangUInt32 getDlBuffMaxBytesPerSessionValue() throws JNCException {
        YangUInt32 dlBuffMaxBytesPerSession = (YangUInt32)getValue("dl-buff-max-bytes-per-session");
        if (dlBuffMaxBytesPerSession == null) {
            dlBuffMaxBytesPerSession = new YangUInt32("10240");  // default
        }
        return dlBuffMaxBytesPerSession;
    }

    /**
     * Sets the value for child leaf "dl-buff-max-bytes-per-session",
     * using instance of generated typedef class.
     * @param dlBuffMaxBytesPerSessionValue The value to set.
     * @param dlBuffMaxBytesPerSessionValue used during instantiation.
     */
    public void setDlBuffMaxBytesPerSessionValue(YangUInt32 dlBuffMaxBytesPerSessionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dl-buff-max-bytes-per-session",
            dlBuffMaxBytesPerSessionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dl-buff-max-bytes-per-session",
     * using Java primitive values.
     * @param dlBuffMaxBytesPerSessionValue used during instantiation.
     */
    public void setDlBuffMaxBytesPerSessionValue(long dlBuffMaxBytesPerSessionValue)
            throws JNCException {
        setDlBuffMaxBytesPerSessionValue(new YangUInt32(dlBuffMaxBytesPerSessionValue));
    }

    /**
     * Sets the value for child leaf "dl-buff-max-bytes-per-session",
     * using a String value.
     * @param dlBuffMaxBytesPerSessionValue used during instantiation.
     */
    public void setDlBuffMaxBytesPerSessionValue(String dlBuffMaxBytesPerSessionValue)
            throws JNCException {
        setDlBuffMaxBytesPerSessionValue(new YangUInt32(dlBuffMaxBytesPerSessionValue));
    }

    /**
     * Unsets the value for child leaf "dl-buff-max-bytes-per-session".
     */
    public void unsetDlBuffMaxBytesPerSessionValue() throws JNCException {
        delete("dl-buff-max-bytes-per-session");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dl-buff-max-bytes-per-session" leaf will not have a value.
     */
    public void addDlBuffMaxBytesPerSession() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dl-buff-max-bytes-per-session",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dl-buff-max-bytes-per-session" with operation "replace".
     */
    public void markDlBuffMaxBytesPerSessionReplace() throws JNCException {
        markLeafReplace("dlBuffMaxBytesPerSession");
    }

    /**
     * Marks the leaf "dl-buff-max-bytes-per-session" with operation "merge".
     */
    public void markDlBuffMaxBytesPerSessionMerge() throws JNCException {
        markLeafMerge("dlBuffMaxBytesPerSession");
    }

    /**
     * Marks the leaf "dl-buff-max-bytes-per-session" with operation "create".
     */
    public void markDlBuffMaxBytesPerSessionCreate() throws JNCException {
        markLeafCreate("dlBuffMaxBytesPerSession");
    }

    /**
     * Marks the leaf "dl-buff-max-bytes-per-session" with operation "delete".
     */
    public void markDlBuffMaxBytesPerSessionDelete() throws JNCException {
        markLeafDelete("dlBuffMaxBytesPerSession");
    }

    /* Access methods for optional leaf child: "dl-buff-total-bytes-reserved". */

    /**
     * Gets the value for child leaf "dl-buff-total-bytes-reserved".
     * @return The value of the leaf.
     */
    public YangUInt32 getDlBuffTotalBytesReservedValue() throws JNCException {
        YangUInt32 dlBuffTotalBytesReserved = (YangUInt32)getValue("dl-buff-total-bytes-reserved");
        if (dlBuffTotalBytesReserved == null) {
            dlBuffTotalBytesReserved = new YangUInt32("545259520");  // default
        }
        return dlBuffTotalBytesReserved;
    }

    /**
     * Sets the value for child leaf "dl-buff-total-bytes-reserved",
     * using instance of generated typedef class.
     * @param dlBuffTotalBytesReservedValue The value to set.
     * @param dlBuffTotalBytesReservedValue used during instantiation.
     */
    public void setDlBuffTotalBytesReservedValue(YangUInt32 dlBuffTotalBytesReservedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dl-buff-total-bytes-reserved",
            dlBuffTotalBytesReservedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dl-buff-total-bytes-reserved",
     * using Java primitive values.
     * @param dlBuffTotalBytesReservedValue used during instantiation.
     */
    public void setDlBuffTotalBytesReservedValue(long dlBuffTotalBytesReservedValue)
            throws JNCException {
        setDlBuffTotalBytesReservedValue(new YangUInt32(dlBuffTotalBytesReservedValue));
    }

    /**
     * Sets the value for child leaf "dl-buff-total-bytes-reserved",
     * using a String value.
     * @param dlBuffTotalBytesReservedValue used during instantiation.
     */
    public void setDlBuffTotalBytesReservedValue(String dlBuffTotalBytesReservedValue)
            throws JNCException {
        setDlBuffTotalBytesReservedValue(new YangUInt32(dlBuffTotalBytesReservedValue));
    }

    /**
     * Unsets the value for child leaf "dl-buff-total-bytes-reserved".
     */
    public void unsetDlBuffTotalBytesReservedValue() throws JNCException {
        delete("dl-buff-total-bytes-reserved");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dl-buff-total-bytes-reserved" leaf will not have a value.
     */
    public void addDlBuffTotalBytesReserved() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dl-buff-total-bytes-reserved",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dl-buff-total-bytes-reserved" with operation "replace".
     */
    public void markDlBuffTotalBytesReservedReplace() throws JNCException {
        markLeafReplace("dlBuffTotalBytesReserved");
    }

    /**
     * Marks the leaf "dl-buff-total-bytes-reserved" with operation "merge".
     */
    public void markDlBuffTotalBytesReservedMerge() throws JNCException {
        markLeafMerge("dlBuffTotalBytesReserved");
    }

    /**
     * Marks the leaf "dl-buff-total-bytes-reserved" with operation "create".
     */
    public void markDlBuffTotalBytesReservedCreate() throws JNCException {
        markLeafCreate("dlBuffTotalBytesReserved");
    }

    /**
     * Marks the leaf "dl-buff-total-bytes-reserved" with operation "delete".
     */
    public void markDlBuffTotalBytesReservedDelete() throws JNCException {
        markLeafDelete("dlBuffTotalBytesReserved");
    }

    /* Access methods for optional leaf child: "irau-percent-buffered-sessions". */

    /**
     * Gets the value for child leaf "irau-percent-buffered-sessions".
     * @return The value of the leaf.
     */
    public YangUInt8 getIrauPercentBufferedSessionsValue() throws JNCException {
        YangUInt8 irauPercentBufferedSessions = (YangUInt8)getValue("irau-percent-buffered-sessions");
        if (irauPercentBufferedSessions == null) {
            irauPercentBufferedSessions = new YangUInt8("5");  // default
        }
        return irauPercentBufferedSessions;
    }

    /**
     * Sets the value for child leaf "irau-percent-buffered-sessions",
     * using instance of generated typedef class.
     * @param irauPercentBufferedSessionsValue The value to set.
     * @param irauPercentBufferedSessionsValue used during instantiation.
     */
    public void setIrauPercentBufferedSessionsValue(YangUInt8 irauPercentBufferedSessionsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "irau-percent-buffered-sessions",
            irauPercentBufferedSessionsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "irau-percent-buffered-sessions",
     * using Java primitive values.
     * @param irauPercentBufferedSessionsValue used during instantiation.
     */
    public void setIrauPercentBufferedSessionsValue(short irauPercentBufferedSessionsValue)
            throws JNCException {
        setIrauPercentBufferedSessionsValue(new YangUInt8(irauPercentBufferedSessionsValue));
    }

    /**
     * Sets the value for child leaf "irau-percent-buffered-sessions",
     * using a String value.
     * @param irauPercentBufferedSessionsValue used during instantiation.
     */
    public void setIrauPercentBufferedSessionsValue(String irauPercentBufferedSessionsValue)
            throws JNCException {
        setIrauPercentBufferedSessionsValue(new YangUInt8(irauPercentBufferedSessionsValue));
    }

    /**
     * Unsets the value for child leaf "irau-percent-buffered-sessions".
     */
    public void unsetIrauPercentBufferedSessionsValue() throws JNCException {
        delete("irau-percent-buffered-sessions");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "irau-percent-buffered-sessions" leaf will not have a value.
     */
    public void addIrauPercentBufferedSessions() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "irau-percent-buffered-sessions",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "irau-percent-buffered-sessions" with operation "replace".
     */
    public void markIrauPercentBufferedSessionsReplace() throws JNCException {
        markLeafReplace("irauPercentBufferedSessions");
    }

    /**
     * Marks the leaf "irau-percent-buffered-sessions" with operation "merge".
     */
    public void markIrauPercentBufferedSessionsMerge() throws JNCException {
        markLeafMerge("irauPercentBufferedSessions");
    }

    /**
     * Marks the leaf "irau-percent-buffered-sessions" with operation "create".
     */
    public void markIrauPercentBufferedSessionsCreate() throws JNCException {
        markLeafCreate("irauPercentBufferedSessions");
    }

    /**
     * Marks the leaf "irau-percent-buffered-sessions" with operation "delete".
     */
    public void markIrauPercentBufferedSessionsDelete() throws JNCException {
        markLeafDelete("irauPercentBufferedSessions");
    }

    /* Access methods for optional leaf child: "irau-buff-max-pdu-per-session". */

    /**
     * Gets the value for child leaf "irau-buff-max-pdu-per-session".
     * @return The value of the leaf.
     */
    public YangUInt8 getIrauBuffMaxPduPerSessionValue() throws JNCException {
        YangUInt8 irauBuffMaxPduPerSession = (YangUInt8)getValue("irau-buff-max-pdu-per-session");
        if (irauBuffMaxPduPerSession == null) {
            irauBuffMaxPduPerSession = new YangUInt8("12");  // default
        }
        return irauBuffMaxPduPerSession;
    }

    /**
     * Sets the value for child leaf "irau-buff-max-pdu-per-session",
     * using instance of generated typedef class.
     * @param irauBuffMaxPduPerSessionValue The value to set.
     * @param irauBuffMaxPduPerSessionValue used during instantiation.
     */
    public void setIrauBuffMaxPduPerSessionValue(YangUInt8 irauBuffMaxPduPerSessionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "irau-buff-max-pdu-per-session",
            irauBuffMaxPduPerSessionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "irau-buff-max-pdu-per-session",
     * using Java primitive values.
     * @param irauBuffMaxPduPerSessionValue used during instantiation.
     */
    public void setIrauBuffMaxPduPerSessionValue(short irauBuffMaxPduPerSessionValue)
            throws JNCException {
        setIrauBuffMaxPduPerSessionValue(new YangUInt8(irauBuffMaxPduPerSessionValue));
    }

    /**
     * Sets the value for child leaf "irau-buff-max-pdu-per-session",
     * using a String value.
     * @param irauBuffMaxPduPerSessionValue used during instantiation.
     */
    public void setIrauBuffMaxPduPerSessionValue(String irauBuffMaxPduPerSessionValue)
            throws JNCException {
        setIrauBuffMaxPduPerSessionValue(new YangUInt8(irauBuffMaxPduPerSessionValue));
    }

    /**
     * Unsets the value for child leaf "irau-buff-max-pdu-per-session".
     */
    public void unsetIrauBuffMaxPduPerSessionValue() throws JNCException {
        delete("irau-buff-max-pdu-per-session");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "irau-buff-max-pdu-per-session" leaf will not have a value.
     */
    public void addIrauBuffMaxPduPerSession() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "irau-buff-max-pdu-per-session",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "irau-buff-max-pdu-per-session" with operation "replace".
     */
    public void markIrauBuffMaxPduPerSessionReplace() throws JNCException {
        markLeafReplace("irauBuffMaxPduPerSession");
    }

    /**
     * Marks the leaf "irau-buff-max-pdu-per-session" with operation "merge".
     */
    public void markIrauBuffMaxPduPerSessionMerge() throws JNCException {
        markLeafMerge("irauBuffMaxPduPerSession");
    }

    /**
     * Marks the leaf "irau-buff-max-pdu-per-session" with operation "create".
     */
    public void markIrauBuffMaxPduPerSessionCreate() throws JNCException {
        markLeafCreate("irauBuffMaxPduPerSession");
    }

    /**
     * Marks the leaf "irau-buff-max-pdu-per-session" with operation "delete".
     */
    public void markIrauBuffMaxPduPerSessionDelete() throws JNCException {
        markLeafDelete("irauBuffMaxPduPerSession");
    }

    /* Access methods for optional leaf child: "irau-buff-max-bytes-per-session". */

    /**
     * Gets the value for child leaf "irau-buff-max-bytes-per-session".
     * @return The value of the leaf.
     */
    public YangUInt32 getIrauBuffMaxBytesPerSessionValue() throws JNCException {
        YangUInt32 irauBuffMaxBytesPerSession = (YangUInt32)getValue("irau-buff-max-bytes-per-session");
        if (irauBuffMaxBytesPerSession == null) {
            irauBuffMaxBytesPerSession = new YangUInt32("10240");  // default
        }
        return irauBuffMaxBytesPerSession;
    }

    /**
     * Sets the value for child leaf "irau-buff-max-bytes-per-session",
     * using instance of generated typedef class.
     * @param irauBuffMaxBytesPerSessionValue The value to set.
     * @param irauBuffMaxBytesPerSessionValue used during instantiation.
     */
    public void setIrauBuffMaxBytesPerSessionValue(YangUInt32 irauBuffMaxBytesPerSessionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "irau-buff-max-bytes-per-session",
            irauBuffMaxBytesPerSessionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "irau-buff-max-bytes-per-session",
     * using Java primitive values.
     * @param irauBuffMaxBytesPerSessionValue used during instantiation.
     */
    public void setIrauBuffMaxBytesPerSessionValue(long irauBuffMaxBytesPerSessionValue)
            throws JNCException {
        setIrauBuffMaxBytesPerSessionValue(new YangUInt32(irauBuffMaxBytesPerSessionValue));
    }

    /**
     * Sets the value for child leaf "irau-buff-max-bytes-per-session",
     * using a String value.
     * @param irauBuffMaxBytesPerSessionValue used during instantiation.
     */
    public void setIrauBuffMaxBytesPerSessionValue(String irauBuffMaxBytesPerSessionValue)
            throws JNCException {
        setIrauBuffMaxBytesPerSessionValue(new YangUInt32(irauBuffMaxBytesPerSessionValue));
    }

    /**
     * Unsets the value for child leaf "irau-buff-max-bytes-per-session".
     */
    public void unsetIrauBuffMaxBytesPerSessionValue() throws JNCException {
        delete("irau-buff-max-bytes-per-session");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "irau-buff-max-bytes-per-session" leaf will not have a value.
     */
    public void addIrauBuffMaxBytesPerSession() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "irau-buff-max-bytes-per-session",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "irau-buff-max-bytes-per-session" with operation "replace".
     */
    public void markIrauBuffMaxBytesPerSessionReplace() throws JNCException {
        markLeafReplace("irauBuffMaxBytesPerSession");
    }

    /**
     * Marks the leaf "irau-buff-max-bytes-per-session" with operation "merge".
     */
    public void markIrauBuffMaxBytesPerSessionMerge() throws JNCException {
        markLeafMerge("irauBuffMaxBytesPerSession");
    }

    /**
     * Marks the leaf "irau-buff-max-bytes-per-session" with operation "create".
     */
    public void markIrauBuffMaxBytesPerSessionCreate() throws JNCException {
        markLeafCreate("irauBuffMaxBytesPerSession");
    }

    /**
     * Marks the leaf "irau-buff-max-bytes-per-session" with operation "delete".
     */
    public void markIrauBuffMaxBytesPerSessionDelete() throws JNCException {
        markLeafDelete("irauBuffMaxBytesPerSession");
    }

    /* Access methods for optional leaf child: "irau-buff-total-bytes-reserved". */

    /**
     * Gets the value for child leaf "irau-buff-total-bytes-reserved".
     * @return The value of the leaf.
     */
    public YangUInt32 getIrauBuffTotalBytesReservedValue() throws JNCException {
        YangUInt32 irauBuffTotalBytesReserved = (YangUInt32)getValue("irau-buff-total-bytes-reserved");
        if (irauBuffTotalBytesReserved == null) {
            irauBuffTotalBytesReserved = new YangUInt32("54525952");  // default
        }
        return irauBuffTotalBytesReserved;
    }

    /**
     * Sets the value for child leaf "irau-buff-total-bytes-reserved",
     * using instance of generated typedef class.
     * @param irauBuffTotalBytesReservedValue The value to set.
     * @param irauBuffTotalBytesReservedValue used during instantiation.
     */
    public void setIrauBuffTotalBytesReservedValue(YangUInt32 irauBuffTotalBytesReservedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "irau-buff-total-bytes-reserved",
            irauBuffTotalBytesReservedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "irau-buff-total-bytes-reserved",
     * using Java primitive values.
     * @param irauBuffTotalBytesReservedValue used during instantiation.
     */
    public void setIrauBuffTotalBytesReservedValue(long irauBuffTotalBytesReservedValue)
            throws JNCException {
        setIrauBuffTotalBytesReservedValue(new YangUInt32(irauBuffTotalBytesReservedValue));
    }

    /**
     * Sets the value for child leaf "irau-buff-total-bytes-reserved",
     * using a String value.
     * @param irauBuffTotalBytesReservedValue used during instantiation.
     */
    public void setIrauBuffTotalBytesReservedValue(String irauBuffTotalBytesReservedValue)
            throws JNCException {
        setIrauBuffTotalBytesReservedValue(new YangUInt32(irauBuffTotalBytesReservedValue));
    }

    /**
     * Unsets the value for child leaf "irau-buff-total-bytes-reserved".
     */
    public void unsetIrauBuffTotalBytesReservedValue() throws JNCException {
        delete("irau-buff-total-bytes-reserved");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "irau-buff-total-bytes-reserved" leaf will not have a value.
     */
    public void addIrauBuffTotalBytesReserved() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "irau-buff-total-bytes-reserved",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "irau-buff-total-bytes-reserved" with operation "replace".
     */
    public void markIrauBuffTotalBytesReservedReplace() throws JNCException {
        markLeafReplace("irauBuffTotalBytesReserved");
    }

    /**
     * Marks the leaf "irau-buff-total-bytes-reserved" with operation "merge".
     */
    public void markIrauBuffTotalBytesReservedMerge() throws JNCException {
        markLeafMerge("irauBuffTotalBytesReserved");
    }

    /**
     * Marks the leaf "irau-buff-total-bytes-reserved" with operation "create".
     */
    public void markIrauBuffTotalBytesReservedCreate() throws JNCException {
        markLeafCreate("irauBuffTotalBytesReserved");
    }

    /**
     * Marks the leaf "irau-buff-total-bytes-reserved" with operation "delete".
     */
    public void markIrauBuffTotalBytesReservedDelete() throws JNCException {
        markLeafDelete("irauBuffTotalBytesReserved");
    }

    /* Access methods for optional leaf child: "buff-check-interval". */

    /**
     * Gets the value for child leaf "buff-check-interval".
     * @return The value of the leaf.
     */
    public YangUInt16 getBuffCheckIntervalValue() throws JNCException {
        YangUInt16 buffCheckInterval = (YangUInt16)getValue("buff-check-interval");
        if (buffCheckInterval == null) {
            buffCheckInterval = new YangUInt16("10");  // default
        }
        return buffCheckInterval;
    }

    /**
     * Sets the value for child leaf "buff-check-interval",
     * using instance of generated typedef class.
     * @param buffCheckIntervalValue The value to set.
     * @param buffCheckIntervalValue used during instantiation.
     */
    public void setBuffCheckIntervalValue(YangUInt16 buffCheckIntervalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "buff-check-interval",
            buffCheckIntervalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "buff-check-interval",
     * using Java primitive values.
     * @param buffCheckIntervalValue used during instantiation.
     */
    public void setBuffCheckIntervalValue(int buffCheckIntervalValue)
            throws JNCException {
        setBuffCheckIntervalValue(new YangUInt16(buffCheckIntervalValue));
    }

    /**
     * Sets the value for child leaf "buff-check-interval",
     * using a String value.
     * @param buffCheckIntervalValue used during instantiation.
     */
    public void setBuffCheckIntervalValue(String buffCheckIntervalValue)
            throws JNCException {
        setBuffCheckIntervalValue(new YangUInt16(buffCheckIntervalValue));
    }

    /**
     * Unsets the value for child leaf "buff-check-interval".
     */
    public void unsetBuffCheckIntervalValue() throws JNCException {
        delete("buff-check-interval");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "buff-check-interval" leaf will not have a value.
     */
    public void addBuffCheckInterval() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "buff-check-interval",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "buff-check-interval" with operation "replace".
     */
    public void markBuffCheckIntervalReplace() throws JNCException {
        markLeafReplace("buffCheckInterval");
    }

    /**
     * Marks the leaf "buff-check-interval" with operation "merge".
     */
    public void markBuffCheckIntervalMerge() throws JNCException {
        markLeafMerge("buffCheckInterval");
    }

    /**
     * Marks the leaf "buff-check-interval" with operation "create".
     */
    public void markBuffCheckIntervalCreate() throws JNCException {
        markLeafCreate("buffCheckInterval");
    }

    /**
     * Marks the leaf "buff-check-interval" with operation "delete".
     */
    public void markBuffCheckIntervalDelete() throws JNCException {
        markLeafDelete("buffCheckInterval");
    }

    /* Access methods for optional leaf child: "pdu-lifetime-in-buff". */

    /**
     * Gets the value for child leaf "pdu-lifetime-in-buff".
     * @return The value of the leaf.
     */
    public YangUInt16 getPduLifetimeInBuffValue() throws JNCException {
        YangUInt16 pduLifetimeInBuff = (YangUInt16)getValue("pdu-lifetime-in-buff");
        if (pduLifetimeInBuff == null) {
            pduLifetimeInBuff = new YangUInt16("5");  // default
        }
        return pduLifetimeInBuff;
    }

    /**
     * Sets the value for child leaf "pdu-lifetime-in-buff",
     * using instance of generated typedef class.
     * @param pduLifetimeInBuffValue The value to set.
     * @param pduLifetimeInBuffValue used during instantiation.
     */
    public void setPduLifetimeInBuffValue(YangUInt16 pduLifetimeInBuffValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdu-lifetime-in-buff",
            pduLifetimeInBuffValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pdu-lifetime-in-buff",
     * using Java primitive values.
     * @param pduLifetimeInBuffValue used during instantiation.
     */
    public void setPduLifetimeInBuffValue(int pduLifetimeInBuffValue)
            throws JNCException {
        setPduLifetimeInBuffValue(new YangUInt16(pduLifetimeInBuffValue));
    }

    /**
     * Sets the value for child leaf "pdu-lifetime-in-buff",
     * using a String value.
     * @param pduLifetimeInBuffValue used during instantiation.
     */
    public void setPduLifetimeInBuffValue(String pduLifetimeInBuffValue)
            throws JNCException {
        setPduLifetimeInBuffValue(new YangUInt16(pduLifetimeInBuffValue));
    }

    /**
     * Unsets the value for child leaf "pdu-lifetime-in-buff".
     */
    public void unsetPduLifetimeInBuffValue() throws JNCException {
        delete("pdu-lifetime-in-buff");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pdu-lifetime-in-buff" leaf will not have a value.
     */
    public void addPduLifetimeInBuff() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdu-lifetime-in-buff",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pdu-lifetime-in-buff" with operation "replace".
     */
    public void markPduLifetimeInBuffReplace() throws JNCException {
        markLeafReplace("pduLifetimeInBuff");
    }

    /**
     * Marks the leaf "pdu-lifetime-in-buff" with operation "merge".
     */
    public void markPduLifetimeInBuffMerge() throws JNCException {
        markLeafMerge("pduLifetimeInBuff");
    }

    /**
     * Marks the leaf "pdu-lifetime-in-buff" with operation "create".
     */
    public void markPduLifetimeInBuffCreate() throws JNCException {
        markLeafCreate("pduLifetimeInBuff");
    }

    /**
     * Marks the leaf "pdu-lifetime-in-buff" with operation "delete".
     */
    public void markPduLifetimeInBuffDelete() throws JNCException {
        markLeafDelete("pduLifetimeInBuff");
    }

    /* Access methods for optional leaf child: "percent-umts-buff". */

    /**
     * Gets the value for child leaf "percent-umts-buff".
     * @return The value of the leaf.
     */
    public YangUInt8 getPercentUmtsBuffValue() throws JNCException {
        YangUInt8 percentUmtsBuff = (YangUInt8)getValue("percent-umts-buff");
        if (percentUmtsBuff == null) {
            percentUmtsBuff = new YangUInt8("80");  // default
        }
        return percentUmtsBuff;
    }

    /**
     * Sets the value for child leaf "percent-umts-buff",
     * using instance of generated typedef class.
     * @param percentUmtsBuffValue The value to set.
     * @param percentUmtsBuffValue used during instantiation.
     */
    public void setPercentUmtsBuffValue(YangUInt8 percentUmtsBuffValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "percent-umts-buff",
            percentUmtsBuffValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "percent-umts-buff",
     * using Java primitive values.
     * @param percentUmtsBuffValue used during instantiation.
     */
    public void setPercentUmtsBuffValue(short percentUmtsBuffValue)
            throws JNCException {
        setPercentUmtsBuffValue(new YangUInt8(percentUmtsBuffValue));
    }

    /**
     * Sets the value for child leaf "percent-umts-buff",
     * using a String value.
     * @param percentUmtsBuffValue used during instantiation.
     */
    public void setPercentUmtsBuffValue(String percentUmtsBuffValue)
            throws JNCException {
        setPercentUmtsBuffValue(new YangUInt8(percentUmtsBuffValue));
    }

    /**
     * Unsets the value for child leaf "percent-umts-buff".
     */
    public void unsetPercentUmtsBuffValue() throws JNCException {
        delete("percent-umts-buff");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "percent-umts-buff" leaf will not have a value.
     */
    public void addPercentUmtsBuff() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "percent-umts-buff",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "percent-umts-buff" with operation "replace".
     */
    public void markPercentUmtsBuffReplace() throws JNCException {
        markLeafReplace("percentUmtsBuff");
    }

    /**
     * Marks the leaf "percent-umts-buff" with operation "merge".
     */
    public void markPercentUmtsBuffMerge() throws JNCException {
        markLeafMerge("percentUmtsBuff");
    }

    /**
     * Marks the leaf "percent-umts-buff" with operation "create".
     */
    public void markPercentUmtsBuffCreate() throws JNCException {
        markLeafCreate("percentUmtsBuff");
    }

    /**
     * Marks the leaf "percent-umts-buff" with operation "delete".
     */
    public void markPercentUmtsBuffDelete() throws JNCException {
        markLeafDelete("percentUmtsBuff");
    }

    /* Access methods for optional leaf child: "lle-to-mobile-ratio". */

    /**
     * Gets the value for child leaf "lle-to-mobile-ratio".
     * @return The value of the leaf.
     */
    public YangUInt16 getLleToMobileRatioValue() throws JNCException {
        YangUInt16 lleToMobileRatio = (YangUInt16)getValue("lle-to-mobile-ratio");
        if (lleToMobileRatio == null) {
            lleToMobileRatio = new YangUInt16("15");  // default
        }
        return lleToMobileRatio;
    }

    /**
     * Sets the value for child leaf "lle-to-mobile-ratio",
     * using instance of generated typedef class.
     * @param lleToMobileRatioValue The value to set.
     * @param lleToMobileRatioValue used during instantiation.
     */
    public void setLleToMobileRatioValue(YangUInt16 lleToMobileRatioValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lle-to-mobile-ratio",
            lleToMobileRatioValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lle-to-mobile-ratio",
     * using Java primitive values.
     * @param lleToMobileRatioValue used during instantiation.
     */
    public void setLleToMobileRatioValue(int lleToMobileRatioValue)
            throws JNCException {
        setLleToMobileRatioValue(new YangUInt16(lleToMobileRatioValue));
    }

    /**
     * Sets the value for child leaf "lle-to-mobile-ratio",
     * using a String value.
     * @param lleToMobileRatioValue used during instantiation.
     */
    public void setLleToMobileRatioValue(String lleToMobileRatioValue)
            throws JNCException {
        setLleToMobileRatioValue(new YangUInt16(lleToMobileRatioValue));
    }

    /**
     * Unsets the value for child leaf "lle-to-mobile-ratio".
     */
    public void unsetLleToMobileRatioValue() throws JNCException {
        delete("lle-to-mobile-ratio");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lle-to-mobile-ratio" leaf will not have a value.
     */
    public void addLleToMobileRatio() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lle-to-mobile-ratio",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lle-to-mobile-ratio" with operation "replace".
     */
    public void markLleToMobileRatioReplace() throws JNCException {
        markLeafReplace("lleToMobileRatio");
    }

    /**
     * Marks the leaf "lle-to-mobile-ratio" with operation "merge".
     */
    public void markLleToMobileRatioMerge() throws JNCException {
        markLeafMerge("lleToMobileRatio");
    }

    /**
     * Marks the leaf "lle-to-mobile-ratio" with operation "create".
     */
    public void markLleToMobileRatioCreate() throws JNCException {
        markLeafCreate("lleToMobileRatio");
    }

    /**
     * Marks the leaf "lle-to-mobile-ratio" with operation "delete".
     */
    public void markLleToMobileRatioDelete() throws JNCException {
        markLeafDelete("lleToMobileRatio");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
