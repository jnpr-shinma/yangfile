/* 
 * @(#)MmeUpmEngineering.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.engineering;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/engineering/mme-upm-engineering"
 * <p>
 * See line 555 in
 * upmConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeUpmEngineering extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeUpmEngineering object.
     */
    public MmeUpmEngineering() {
        super(Epc.NAMESPACE, "mme-upm-engineering");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeUpmEngineering clone() {
        return (MmeUpmEngineering)cloneContent(new MmeUpmEngineering());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeUpmEngineering cloneShallow() {
        return (MmeUpmEngineering)cloneShallowContent(new MmeUpmEngineering());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "recovery-window-time",
            "mobility-path-weight",
            "tunnel-path-weight",
            "s101-path-weight",
            "s102-path-weight",
            "fxa-path-weight",
        };
    }

    /* Access methods for optional leaf child: "recovery-window-time". */

    /**
     * Gets the value for child leaf "recovery-window-time".
     * @return The value of the leaf.
     */
    public YangUInt32 getRecoveryWindowTimeValue() throws JNCException {
        YangUInt32 recoveryWindowTime = (YangUInt32)getValue("recovery-window-time");
        if (recoveryWindowTime == null) {
            recoveryWindowTime = new YangUInt32("180");  // default
        }
        return recoveryWindowTime;
    }

    /**
     * Sets the value for child leaf "recovery-window-time",
     * using instance of generated typedef class.
     * @param recoveryWindowTimeValue The value to set.
     * @param recoveryWindowTimeValue used during instantiation.
     */
    public void setRecoveryWindowTimeValue(YangUInt32 recoveryWindowTimeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "recovery-window-time",
            recoveryWindowTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "recovery-window-time",
     * using Java primitive values.
     * @param recoveryWindowTimeValue used during instantiation.
     */
    public void setRecoveryWindowTimeValue(long recoveryWindowTimeValue)
            throws JNCException {
        setRecoveryWindowTimeValue(new YangUInt32(recoveryWindowTimeValue));
    }

    /**
     * Sets the value for child leaf "recovery-window-time",
     * using a String value.
     * @param recoveryWindowTimeValue used during instantiation.
     */
    public void setRecoveryWindowTimeValue(String recoveryWindowTimeValue)
            throws JNCException {
        setRecoveryWindowTimeValue(new YangUInt32(recoveryWindowTimeValue));
    }

    /**
     * Unsets the value for child leaf "recovery-window-time".
     */
    public void unsetRecoveryWindowTimeValue() throws JNCException {
        delete("recovery-window-time");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "recovery-window-time" leaf will not have a value.
     */
    public void addRecoveryWindowTime() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "recovery-window-time",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "recovery-window-time" with operation "replace".
     */
    public void markRecoveryWindowTimeReplace() throws JNCException {
        markLeafReplace("recoveryWindowTime");
    }

    /**
     * Marks the leaf "recovery-window-time" with operation "merge".
     */
    public void markRecoveryWindowTimeMerge() throws JNCException {
        markLeafMerge("recoveryWindowTime");
    }

    /**
     * Marks the leaf "recovery-window-time" with operation "create".
     */
    public void markRecoveryWindowTimeCreate() throws JNCException {
        markLeafCreate("recoveryWindowTime");
    }

    /**
     * Marks the leaf "recovery-window-time" with operation "delete".
     */
    public void markRecoveryWindowTimeDelete() throws JNCException {
        markLeafDelete("recoveryWindowTime");
    }

    /* Access methods for optional leaf child: "mobility-path-weight". */

    /**
     * Gets the value for child leaf "mobility-path-weight".
     * @return The value of the leaf.
     */
    public YangUInt16 getMobilityPathWeightValue() throws JNCException {
        YangUInt16 mobilityPathWeight = (YangUInt16)getValue("mobility-path-weight");
        if (mobilityPathWeight == null) {
            mobilityPathWeight = new YangUInt16("20");  // default
        }
        return mobilityPathWeight;
    }

    /**
     * Sets the value for child leaf "mobility-path-weight",
     * using instance of generated typedef class.
     * @param mobilityPathWeightValue The value to set.
     * @param mobilityPathWeightValue used during instantiation.
     */
    public void setMobilityPathWeightValue(YangUInt16 mobilityPathWeightValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mobility-path-weight",
            mobilityPathWeightValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mobility-path-weight",
     * using Java primitive values.
     * @param mobilityPathWeightValue used during instantiation.
     */
    public void setMobilityPathWeightValue(int mobilityPathWeightValue)
            throws JNCException {
        setMobilityPathWeightValue(new YangUInt16(mobilityPathWeightValue));
    }

    /**
     * Sets the value for child leaf "mobility-path-weight",
     * using a String value.
     * @param mobilityPathWeightValue used during instantiation.
     */
    public void setMobilityPathWeightValue(String mobilityPathWeightValue)
            throws JNCException {
        setMobilityPathWeightValue(new YangUInt16(mobilityPathWeightValue));
    }

    /**
     * Unsets the value for child leaf "mobility-path-weight".
     */
    public void unsetMobilityPathWeightValue() throws JNCException {
        delete("mobility-path-weight");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mobility-path-weight" leaf will not have a value.
     */
    public void addMobilityPathWeight() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mobility-path-weight",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mobility-path-weight" with operation "replace".
     */
    public void markMobilityPathWeightReplace() throws JNCException {
        markLeafReplace("mobilityPathWeight");
    }

    /**
     * Marks the leaf "mobility-path-weight" with operation "merge".
     */
    public void markMobilityPathWeightMerge() throws JNCException {
        markLeafMerge("mobilityPathWeight");
    }

    /**
     * Marks the leaf "mobility-path-weight" with operation "create".
     */
    public void markMobilityPathWeightCreate() throws JNCException {
        markLeafCreate("mobilityPathWeight");
    }

    /**
     * Marks the leaf "mobility-path-weight" with operation "delete".
     */
    public void markMobilityPathWeightDelete() throws JNCException {
        markLeafDelete("mobilityPathWeight");
    }

    /* Access methods for optional leaf child: "tunnel-path-weight". */

    /**
     * Gets the value for child leaf "tunnel-path-weight".
     * @return The value of the leaf.
     */
    public YangUInt16 getTunnelPathWeightValue() throws JNCException {
        YangUInt16 tunnelPathWeight = (YangUInt16)getValue("tunnel-path-weight");
        if (tunnelPathWeight == null) {
            tunnelPathWeight = new YangUInt16("1000");  // default
        }
        return tunnelPathWeight;
    }

    /**
     * Sets the value for child leaf "tunnel-path-weight",
     * using instance of generated typedef class.
     * @param tunnelPathWeightValue The value to set.
     * @param tunnelPathWeightValue used during instantiation.
     */
    public void setTunnelPathWeightValue(YangUInt16 tunnelPathWeightValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tunnel-path-weight",
            tunnelPathWeightValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tunnel-path-weight",
     * using Java primitive values.
     * @param tunnelPathWeightValue used during instantiation.
     */
    public void setTunnelPathWeightValue(int tunnelPathWeightValue)
            throws JNCException {
        setTunnelPathWeightValue(new YangUInt16(tunnelPathWeightValue));
    }

    /**
     * Sets the value for child leaf "tunnel-path-weight",
     * using a String value.
     * @param tunnelPathWeightValue used during instantiation.
     */
    public void setTunnelPathWeightValue(String tunnelPathWeightValue)
            throws JNCException {
        setTunnelPathWeightValue(new YangUInt16(tunnelPathWeightValue));
    }

    /**
     * Unsets the value for child leaf "tunnel-path-weight".
     */
    public void unsetTunnelPathWeightValue() throws JNCException {
        delete("tunnel-path-weight");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tunnel-path-weight" leaf will not have a value.
     */
    public void addTunnelPathWeight() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tunnel-path-weight",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tunnel-path-weight" with operation "replace".
     */
    public void markTunnelPathWeightReplace() throws JNCException {
        markLeafReplace("tunnelPathWeight");
    }

    /**
     * Marks the leaf "tunnel-path-weight" with operation "merge".
     */
    public void markTunnelPathWeightMerge() throws JNCException {
        markLeafMerge("tunnelPathWeight");
    }

    /**
     * Marks the leaf "tunnel-path-weight" with operation "create".
     */
    public void markTunnelPathWeightCreate() throws JNCException {
        markLeafCreate("tunnelPathWeight");
    }

    /**
     * Marks the leaf "tunnel-path-weight" with operation "delete".
     */
    public void markTunnelPathWeightDelete() throws JNCException {
        markLeafDelete("tunnelPathWeight");
    }

    /* Access methods for optional leaf child: "s101-path-weight". */

    /**
     * Gets the value for child leaf "s101-path-weight".
     * @return The value of the leaf.
     */
    public YangUInt16 getS101PathWeightValue() throws JNCException {
        YangUInt16 s101PathWeight = (YangUInt16)getValue("s101-path-weight");
        if (s101PathWeight == null) {
            s101PathWeight = new YangUInt16("3");  // default
        }
        return s101PathWeight;
    }

    /**
     * Sets the value for child leaf "s101-path-weight",
     * using instance of generated typedef class.
     * @param s101PathWeightValue The value to set.
     * @param s101PathWeightValue used during instantiation.
     */
    public void setS101PathWeightValue(YangUInt16 s101PathWeightValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s101-path-weight",
            s101PathWeightValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "s101-path-weight",
     * using Java primitive values.
     * @param s101PathWeightValue used during instantiation.
     */
    public void setS101PathWeightValue(int s101PathWeightValue)
            throws JNCException {
        setS101PathWeightValue(new YangUInt16(s101PathWeightValue));
    }

    /**
     * Sets the value for child leaf "s101-path-weight",
     * using a String value.
     * @param s101PathWeightValue used during instantiation.
     */
    public void setS101PathWeightValue(String s101PathWeightValue)
            throws JNCException {
        setS101PathWeightValue(new YangUInt16(s101PathWeightValue));
    }

    /**
     * Unsets the value for child leaf "s101-path-weight".
     */
    public void unsetS101PathWeightValue() throws JNCException {
        delete("s101-path-weight");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "s101-path-weight" leaf will not have a value.
     */
    public void addS101PathWeight() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s101-path-weight",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "s101-path-weight" with operation "replace".
     */
    public void markS101PathWeightReplace() throws JNCException {
        markLeafReplace("s101PathWeight");
    }

    /**
     * Marks the leaf "s101-path-weight" with operation "merge".
     */
    public void markS101PathWeightMerge() throws JNCException {
        markLeafMerge("s101PathWeight");
    }

    /**
     * Marks the leaf "s101-path-weight" with operation "create".
     */
    public void markS101PathWeightCreate() throws JNCException {
        markLeafCreate("s101PathWeight");
    }

    /**
     * Marks the leaf "s101-path-weight" with operation "delete".
     */
    public void markS101PathWeightDelete() throws JNCException {
        markLeafDelete("s101PathWeight");
    }

    /* Access methods for optional leaf child: "s102-path-weight". */

    /**
     * Gets the value for child leaf "s102-path-weight".
     * @return The value of the leaf.
     */
    public YangUInt16 getS102PathWeightValue() throws JNCException {
        YangUInt16 s102PathWeight = (YangUInt16)getValue("s102-path-weight");
        if (s102PathWeight == null) {
            s102PathWeight = new YangUInt16("25");  // default
        }
        return s102PathWeight;
    }

    /**
     * Sets the value for child leaf "s102-path-weight",
     * using instance of generated typedef class.
     * @param s102PathWeightValue The value to set.
     * @param s102PathWeightValue used during instantiation.
     */
    public void setS102PathWeightValue(YangUInt16 s102PathWeightValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s102-path-weight",
            s102PathWeightValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "s102-path-weight",
     * using Java primitive values.
     * @param s102PathWeightValue used during instantiation.
     */
    public void setS102PathWeightValue(int s102PathWeightValue)
            throws JNCException {
        setS102PathWeightValue(new YangUInt16(s102PathWeightValue));
    }

    /**
     * Sets the value for child leaf "s102-path-weight",
     * using a String value.
     * @param s102PathWeightValue used during instantiation.
     */
    public void setS102PathWeightValue(String s102PathWeightValue)
            throws JNCException {
        setS102PathWeightValue(new YangUInt16(s102PathWeightValue));
    }

    /**
     * Unsets the value for child leaf "s102-path-weight".
     */
    public void unsetS102PathWeightValue() throws JNCException {
        delete("s102-path-weight");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "s102-path-weight" leaf will not have a value.
     */
    public void addS102PathWeight() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s102-path-weight",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "s102-path-weight" with operation "replace".
     */
    public void markS102PathWeightReplace() throws JNCException {
        markLeafReplace("s102PathWeight");
    }

    /**
     * Marks the leaf "s102-path-weight" with operation "merge".
     */
    public void markS102PathWeightMerge() throws JNCException {
        markLeafMerge("s102PathWeight");
    }

    /**
     * Marks the leaf "s102-path-weight" with operation "create".
     */
    public void markS102PathWeightCreate() throws JNCException {
        markLeafCreate("s102PathWeight");
    }

    /**
     * Marks the leaf "s102-path-weight" with operation "delete".
     */
    public void markS102PathWeightDelete() throws JNCException {
        markLeafDelete("s102PathWeight");
    }

    /* Access methods for optional leaf child: "fxa-path-weight". */

    /**
     * Gets the value for child leaf "fxa-path-weight".
     * @return The value of the leaf.
     */
    public YangUInt16 getFxaPathWeightValue() throws JNCException {
        YangUInt16 fxaPathWeight = (YangUInt16)getValue("fxa-path-weight");
        if (fxaPathWeight == null) {
            fxaPathWeight = new YangUInt16("2");  // default
        }
        return fxaPathWeight;
    }

    /**
     * Sets the value for child leaf "fxa-path-weight",
     * using instance of generated typedef class.
     * @param fxaPathWeightValue The value to set.
     * @param fxaPathWeightValue used during instantiation.
     */
    public void setFxaPathWeightValue(YangUInt16 fxaPathWeightValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "fxa-path-weight",
            fxaPathWeightValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "fxa-path-weight",
     * using Java primitive values.
     * @param fxaPathWeightValue used during instantiation.
     */
    public void setFxaPathWeightValue(int fxaPathWeightValue)
            throws JNCException {
        setFxaPathWeightValue(new YangUInt16(fxaPathWeightValue));
    }

    /**
     * Sets the value for child leaf "fxa-path-weight",
     * using a String value.
     * @param fxaPathWeightValue used during instantiation.
     */
    public void setFxaPathWeightValue(String fxaPathWeightValue)
            throws JNCException {
        setFxaPathWeightValue(new YangUInt16(fxaPathWeightValue));
    }

    /**
     * Unsets the value for child leaf "fxa-path-weight".
     */
    public void unsetFxaPathWeightValue() throws JNCException {
        delete("fxa-path-weight");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fxa-path-weight" leaf will not have a value.
     */
    public void addFxaPathWeight() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "fxa-path-weight",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "fxa-path-weight" with operation "replace".
     */
    public void markFxaPathWeightReplace() throws JNCException {
        markLeafReplace("fxaPathWeight");
    }

    /**
     * Marks the leaf "fxa-path-weight" with operation "merge".
     */
    public void markFxaPathWeightMerge() throws JNCException {
        markLeafMerge("fxaPathWeight");
    }

    /**
     * Marks the leaf "fxa-path-weight" with operation "create".
     */
    public void markFxaPathWeightCreate() throws JNCException {
        markLeafCreate("fxaPathWeight");
    }

    /**
     * Marks the leaf "fxa-path-weight" with operation "delete".
     */
    public void markFxaPathWeightDelete() throws JNCException {
        markLeafDelete("fxaPathWeight");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
