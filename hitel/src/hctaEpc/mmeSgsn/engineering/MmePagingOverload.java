/* 
 * @(#)MmePagingOverload.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.engineering;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/engineering/mme-paging-overload"
 * <p>
 * See line 588 in
 * s1MasterConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmePagingOverload extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmePagingOverload object.
     */
    public MmePagingOverload() {
        super(Epc.NAMESPACE, "mme-paging-overload");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmePagingOverload clone() {
        return (MmePagingOverload)cloneContent(new MmePagingOverload());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmePagingOverload cloneShallow() {
        return (MmePagingOverload)cloneShallowContent(new MmePagingOverload());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "minor-ovld",
            "minor-onset",
            "minor-abate",
            "paging-delay-minor",
            "paging-reject-minor",
            "major-ovld",
            "major-onset",
            "major-abate",
            "paging-delay-major",
            "paging-reject-major",
            "critical-ovld",
            "critical-onset",
            "critical-abate",
            "paging-delay-critical",
            "paging-reject-critical",
        };
    }

    /* Access methods for optional leaf child: "minor-ovld". */

    /**
     * Gets the value for child leaf "minor-ovld".
     * @return The value of the leaf.
     */
    public YangEnumeration getMinorOvldValue() throws JNCException {
        YangEnumeration minorOvld = (YangEnumeration)getValue("minor-ovld");
        if (minorOvld == null) {
            minorOvld = new YangEnumeration("enable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return minorOvld;
    }

    /**
     * Sets the value for child leaf "minor-ovld",
     * using instance of generated typedef class.
     * @param minorOvldValue The value to set.
     * @param minorOvldValue used during instantiation.
     */
    public void setMinorOvldValue(YangEnumeration minorOvldValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "minor-ovld",
            minorOvldValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "minor-ovld",
     * using a String value.
     * @param minorOvldValue used during instantiation.
     */
    public void setMinorOvldValue(String minorOvldValue) throws JNCException {
        setMinorOvldValue(new YangEnumeration(minorOvldValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "minor-ovld".
     */
    public void unsetMinorOvldValue() throws JNCException {
        delete("minor-ovld");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "minor-ovld" leaf will not have a value.
     */
    public void addMinorOvld() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "minor-ovld",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "minor-ovld" with operation "replace".
     */
    public void markMinorOvldReplace() throws JNCException {
        markLeafReplace("minorOvld");
    }

    /**
     * Marks the leaf "minor-ovld" with operation "merge".
     */
    public void markMinorOvldMerge() throws JNCException {
        markLeafMerge("minorOvld");
    }

    /**
     * Marks the leaf "minor-ovld" with operation "create".
     */
    public void markMinorOvldCreate() throws JNCException {
        markLeafCreate("minorOvld");
    }

    /**
     * Marks the leaf "minor-ovld" with operation "delete".
     */
    public void markMinorOvldDelete() throws JNCException {
        markLeafDelete("minorOvld");
    }

    /* Access methods for optional leaf child: "minor-onset". */

    /**
     * Gets the value for child leaf "minor-onset".
     * @return The value of the leaf.
     */
    public YangUInt16 getMinorOnsetValue() throws JNCException {
        YangUInt16 minorOnset = (YangUInt16)getValue("minor-onset");
        if (minorOnset == null) {
            minorOnset = new YangUInt16("325");  // default
        }
        return minorOnset;
    }

    /**
     * Sets the value for child leaf "minor-onset",
     * using instance of generated typedef class.
     * @param minorOnsetValue The value to set.
     * @param minorOnsetValue used during instantiation.
     */
    public void setMinorOnsetValue(YangUInt16 minorOnsetValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "minor-onset",
            minorOnsetValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "minor-onset",
     * using Java primitive values.
     * @param minorOnsetValue used during instantiation.
     */
    public void setMinorOnsetValue(int minorOnsetValue) throws JNCException {
        setMinorOnsetValue(new YangUInt16(minorOnsetValue));
    }

    /**
     * Sets the value for child leaf "minor-onset",
     * using a String value.
     * @param minorOnsetValue used during instantiation.
     */
    public void setMinorOnsetValue(String minorOnsetValue) throws JNCException {
        setMinorOnsetValue(new YangUInt16(minorOnsetValue));
    }

    /**
     * Unsets the value for child leaf "minor-onset".
     */
    public void unsetMinorOnsetValue() throws JNCException {
        delete("minor-onset");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "minor-onset" leaf will not have a value.
     */
    public void addMinorOnset() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "minor-onset",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "minor-onset" with operation "replace".
     */
    public void markMinorOnsetReplace() throws JNCException {
        markLeafReplace("minorOnset");
    }

    /**
     * Marks the leaf "minor-onset" with operation "merge".
     */
    public void markMinorOnsetMerge() throws JNCException {
        markLeafMerge("minorOnset");
    }

    /**
     * Marks the leaf "minor-onset" with operation "create".
     */
    public void markMinorOnsetCreate() throws JNCException {
        markLeafCreate("minorOnset");
    }

    /**
     * Marks the leaf "minor-onset" with operation "delete".
     */
    public void markMinorOnsetDelete() throws JNCException {
        markLeafDelete("minorOnset");
    }

    /* Access methods for optional leaf child: "minor-abate". */

    /**
     * Gets the value for child leaf "minor-abate".
     * @return The value of the leaf.
     */
    public YangUInt16 getMinorAbateValue() throws JNCException {
        YangUInt16 minorAbate = (YangUInt16)getValue("minor-abate");
        if (minorAbate == null) {
            minorAbate = new YangUInt16("300");  // default
        }
        return minorAbate;
    }

    /**
     * Sets the value for child leaf "minor-abate",
     * using instance of generated typedef class.
     * @param minorAbateValue The value to set.
     * @param minorAbateValue used during instantiation.
     */
    public void setMinorAbateValue(YangUInt16 minorAbateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "minor-abate",
            minorAbateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "minor-abate",
     * using Java primitive values.
     * @param minorAbateValue used during instantiation.
     */
    public void setMinorAbateValue(int minorAbateValue) throws JNCException {
        setMinorAbateValue(new YangUInt16(minorAbateValue));
    }

    /**
     * Sets the value for child leaf "minor-abate",
     * using a String value.
     * @param minorAbateValue used during instantiation.
     */
    public void setMinorAbateValue(String minorAbateValue) throws JNCException {
        setMinorAbateValue(new YangUInt16(minorAbateValue));
    }

    /**
     * Unsets the value for child leaf "minor-abate".
     */
    public void unsetMinorAbateValue() throws JNCException {
        delete("minor-abate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "minor-abate" leaf will not have a value.
     */
    public void addMinorAbate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "minor-abate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "minor-abate" with operation "replace".
     */
    public void markMinorAbateReplace() throws JNCException {
        markLeafReplace("minorAbate");
    }

    /**
     * Marks the leaf "minor-abate" with operation "merge".
     */
    public void markMinorAbateMerge() throws JNCException {
        markLeafMerge("minorAbate");
    }

    /**
     * Marks the leaf "minor-abate" with operation "create".
     */
    public void markMinorAbateCreate() throws JNCException {
        markLeafCreate("minorAbate");
    }

    /**
     * Marks the leaf "minor-abate" with operation "delete".
     */
    public void markMinorAbateDelete() throws JNCException {
        markLeafDelete("minorAbate");
    }

    /* Access methods for optional leaf child: "paging-delay-minor". */

    /**
     * Gets the value for child leaf "paging-delay-minor".
     * @return The value of the leaf.
     */
    public YangUInt16 getPagingDelayMinorValue() throws JNCException {
        YangUInt16 pagingDelayMinor = (YangUInt16)getValue("paging-delay-minor");
        if (pagingDelayMinor == null) {
            pagingDelayMinor = new YangUInt16("10");  // default
        }
        return pagingDelayMinor;
    }

    /**
     * Sets the value for child leaf "paging-delay-minor",
     * using instance of generated typedef class.
     * @param pagingDelayMinorValue The value to set.
     * @param pagingDelayMinorValue used during instantiation.
     */
    public void setPagingDelayMinorValue(YangUInt16 pagingDelayMinorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-delay-minor",
            pagingDelayMinorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "paging-delay-minor",
     * using Java primitive values.
     * @param pagingDelayMinorValue used during instantiation.
     */
    public void setPagingDelayMinorValue(int pagingDelayMinorValue)
            throws JNCException {
        setPagingDelayMinorValue(new YangUInt16(pagingDelayMinorValue));
    }

    /**
     * Sets the value for child leaf "paging-delay-minor",
     * using a String value.
     * @param pagingDelayMinorValue used during instantiation.
     */
    public void setPagingDelayMinorValue(String pagingDelayMinorValue)
            throws JNCException {
        setPagingDelayMinorValue(new YangUInt16(pagingDelayMinorValue));
    }

    /**
     * Unsets the value for child leaf "paging-delay-minor".
     */
    public void unsetPagingDelayMinorValue() throws JNCException {
        delete("paging-delay-minor");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "paging-delay-minor" leaf will not have a value.
     */
    public void addPagingDelayMinor() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-delay-minor",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "paging-delay-minor" with operation "replace".
     */
    public void markPagingDelayMinorReplace() throws JNCException {
        markLeafReplace("pagingDelayMinor");
    }

    /**
     * Marks the leaf "paging-delay-minor" with operation "merge".
     */
    public void markPagingDelayMinorMerge() throws JNCException {
        markLeafMerge("pagingDelayMinor");
    }

    /**
     * Marks the leaf "paging-delay-minor" with operation "create".
     */
    public void markPagingDelayMinorCreate() throws JNCException {
        markLeafCreate("pagingDelayMinor");
    }

    /**
     * Marks the leaf "paging-delay-minor" with operation "delete".
     */
    public void markPagingDelayMinorDelete() throws JNCException {
        markLeafDelete("pagingDelayMinor");
    }

    /* Access methods for optional leaf child: "paging-reject-minor". */

    /**
     * Gets the value for child leaf "paging-reject-minor".
     * @return The value of the leaf.
     */
    public YangUInt8 getPagingRejectMinorValue() throws JNCException {
        YangUInt8 pagingRejectMinor = (YangUInt8)getValue("paging-reject-minor");
        if (pagingRejectMinor == null) {
            pagingRejectMinor = new YangUInt8("0");  // default
        }
        return pagingRejectMinor;
    }

    /**
     * Sets the value for child leaf "paging-reject-minor",
     * using instance of generated typedef class.
     * @param pagingRejectMinorValue The value to set.
     * @param pagingRejectMinorValue used during instantiation.
     */
    public void setPagingRejectMinorValue(YangUInt8 pagingRejectMinorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-reject-minor",
            pagingRejectMinorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "paging-reject-minor",
     * using Java primitive values.
     * @param pagingRejectMinorValue used during instantiation.
     */
    public void setPagingRejectMinorValue(short pagingRejectMinorValue)
            throws JNCException {
        setPagingRejectMinorValue(new YangUInt8(pagingRejectMinorValue));
    }

    /**
     * Sets the value for child leaf "paging-reject-minor",
     * using a String value.
     * @param pagingRejectMinorValue used during instantiation.
     */
    public void setPagingRejectMinorValue(String pagingRejectMinorValue)
            throws JNCException {
        setPagingRejectMinorValue(new YangUInt8(pagingRejectMinorValue));
    }

    /**
     * Unsets the value for child leaf "paging-reject-minor".
     */
    public void unsetPagingRejectMinorValue() throws JNCException {
        delete("paging-reject-minor");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "paging-reject-minor" leaf will not have a value.
     */
    public void addPagingRejectMinor() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-reject-minor",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "paging-reject-minor" with operation "replace".
     */
    public void markPagingRejectMinorReplace() throws JNCException {
        markLeafReplace("pagingRejectMinor");
    }

    /**
     * Marks the leaf "paging-reject-minor" with operation "merge".
     */
    public void markPagingRejectMinorMerge() throws JNCException {
        markLeafMerge("pagingRejectMinor");
    }

    /**
     * Marks the leaf "paging-reject-minor" with operation "create".
     */
    public void markPagingRejectMinorCreate() throws JNCException {
        markLeafCreate("pagingRejectMinor");
    }

    /**
     * Marks the leaf "paging-reject-minor" with operation "delete".
     */
    public void markPagingRejectMinorDelete() throws JNCException {
        markLeafDelete("pagingRejectMinor");
    }

    /* Access methods for optional leaf child: "major-ovld". */

    /**
     * Gets the value for child leaf "major-ovld".
     * @return The value of the leaf.
     */
    public YangEnumeration getMajorOvldValue() throws JNCException {
        YangEnumeration majorOvld = (YangEnumeration)getValue("major-ovld");
        if (majorOvld == null) {
            majorOvld = new YangEnumeration("enable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return majorOvld;
    }

    /**
     * Sets the value for child leaf "major-ovld",
     * using instance of generated typedef class.
     * @param majorOvldValue The value to set.
     * @param majorOvldValue used during instantiation.
     */
    public void setMajorOvldValue(YangEnumeration majorOvldValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "major-ovld",
            majorOvldValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "major-ovld",
     * using a String value.
     * @param majorOvldValue used during instantiation.
     */
    public void setMajorOvldValue(String majorOvldValue) throws JNCException {
        setMajorOvldValue(new YangEnumeration(majorOvldValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "major-ovld".
     */
    public void unsetMajorOvldValue() throws JNCException {
        delete("major-ovld");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "major-ovld" leaf will not have a value.
     */
    public void addMajorOvld() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "major-ovld",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "major-ovld" with operation "replace".
     */
    public void markMajorOvldReplace() throws JNCException {
        markLeafReplace("majorOvld");
    }

    /**
     * Marks the leaf "major-ovld" with operation "merge".
     */
    public void markMajorOvldMerge() throws JNCException {
        markLeafMerge("majorOvld");
    }

    /**
     * Marks the leaf "major-ovld" with operation "create".
     */
    public void markMajorOvldCreate() throws JNCException {
        markLeafCreate("majorOvld");
    }

    /**
     * Marks the leaf "major-ovld" with operation "delete".
     */
    public void markMajorOvldDelete() throws JNCException {
        markLeafDelete("majorOvld");
    }

    /* Access methods for optional leaf child: "major-onset". */

    /**
     * Gets the value for child leaf "major-onset".
     * @return The value of the leaf.
     */
    public YangUInt16 getMajorOnsetValue() throws JNCException {
        YangUInt16 majorOnset = (YangUInt16)getValue("major-onset");
        if (majorOnset == null) {
            majorOnset = new YangUInt16("375");  // default
        }
        return majorOnset;
    }

    /**
     * Sets the value for child leaf "major-onset",
     * using instance of generated typedef class.
     * @param majorOnsetValue The value to set.
     * @param majorOnsetValue used during instantiation.
     */
    public void setMajorOnsetValue(YangUInt16 majorOnsetValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "major-onset",
            majorOnsetValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "major-onset",
     * using Java primitive values.
     * @param majorOnsetValue used during instantiation.
     */
    public void setMajorOnsetValue(int majorOnsetValue) throws JNCException {
        setMajorOnsetValue(new YangUInt16(majorOnsetValue));
    }

    /**
     * Sets the value for child leaf "major-onset",
     * using a String value.
     * @param majorOnsetValue used during instantiation.
     */
    public void setMajorOnsetValue(String majorOnsetValue) throws JNCException {
        setMajorOnsetValue(new YangUInt16(majorOnsetValue));
    }

    /**
     * Unsets the value for child leaf "major-onset".
     */
    public void unsetMajorOnsetValue() throws JNCException {
        delete("major-onset");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "major-onset" leaf will not have a value.
     */
    public void addMajorOnset() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "major-onset",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "major-onset" with operation "replace".
     */
    public void markMajorOnsetReplace() throws JNCException {
        markLeafReplace("majorOnset");
    }

    /**
     * Marks the leaf "major-onset" with operation "merge".
     */
    public void markMajorOnsetMerge() throws JNCException {
        markLeafMerge("majorOnset");
    }

    /**
     * Marks the leaf "major-onset" with operation "create".
     */
    public void markMajorOnsetCreate() throws JNCException {
        markLeafCreate("majorOnset");
    }

    /**
     * Marks the leaf "major-onset" with operation "delete".
     */
    public void markMajorOnsetDelete() throws JNCException {
        markLeafDelete("majorOnset");
    }

    /* Access methods for optional leaf child: "major-abate". */

    /**
     * Gets the value for child leaf "major-abate".
     * @return The value of the leaf.
     */
    public YangUInt16 getMajorAbateValue() throws JNCException {
        YangUInt16 majorAbate = (YangUInt16)getValue("major-abate");
        if (majorAbate == null) {
            majorAbate = new YangUInt16("350");  // default
        }
        return majorAbate;
    }

    /**
     * Sets the value for child leaf "major-abate",
     * using instance of generated typedef class.
     * @param majorAbateValue The value to set.
     * @param majorAbateValue used during instantiation.
     */
    public void setMajorAbateValue(YangUInt16 majorAbateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "major-abate",
            majorAbateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "major-abate",
     * using Java primitive values.
     * @param majorAbateValue used during instantiation.
     */
    public void setMajorAbateValue(int majorAbateValue) throws JNCException {
        setMajorAbateValue(new YangUInt16(majorAbateValue));
    }

    /**
     * Sets the value for child leaf "major-abate",
     * using a String value.
     * @param majorAbateValue used during instantiation.
     */
    public void setMajorAbateValue(String majorAbateValue) throws JNCException {
        setMajorAbateValue(new YangUInt16(majorAbateValue));
    }

    /**
     * Unsets the value for child leaf "major-abate".
     */
    public void unsetMajorAbateValue() throws JNCException {
        delete("major-abate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "major-abate" leaf will not have a value.
     */
    public void addMajorAbate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "major-abate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "major-abate" with operation "replace".
     */
    public void markMajorAbateReplace() throws JNCException {
        markLeafReplace("majorAbate");
    }

    /**
     * Marks the leaf "major-abate" with operation "merge".
     */
    public void markMajorAbateMerge() throws JNCException {
        markLeafMerge("majorAbate");
    }

    /**
     * Marks the leaf "major-abate" with operation "create".
     */
    public void markMajorAbateCreate() throws JNCException {
        markLeafCreate("majorAbate");
    }

    /**
     * Marks the leaf "major-abate" with operation "delete".
     */
    public void markMajorAbateDelete() throws JNCException {
        markLeafDelete("majorAbate");
    }

    /* Access methods for optional leaf child: "paging-delay-major". */

    /**
     * Gets the value for child leaf "paging-delay-major".
     * @return The value of the leaf.
     */
    public YangUInt16 getPagingDelayMajorValue() throws JNCException {
        YangUInt16 pagingDelayMajor = (YangUInt16)getValue("paging-delay-major");
        if (pagingDelayMajor == null) {
            pagingDelayMajor = new YangUInt16("20");  // default
        }
        return pagingDelayMajor;
    }

    /**
     * Sets the value for child leaf "paging-delay-major",
     * using instance of generated typedef class.
     * @param pagingDelayMajorValue The value to set.
     * @param pagingDelayMajorValue used during instantiation.
     */
    public void setPagingDelayMajorValue(YangUInt16 pagingDelayMajorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-delay-major",
            pagingDelayMajorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "paging-delay-major",
     * using Java primitive values.
     * @param pagingDelayMajorValue used during instantiation.
     */
    public void setPagingDelayMajorValue(int pagingDelayMajorValue)
            throws JNCException {
        setPagingDelayMajorValue(new YangUInt16(pagingDelayMajorValue));
    }

    /**
     * Sets the value for child leaf "paging-delay-major",
     * using a String value.
     * @param pagingDelayMajorValue used during instantiation.
     */
    public void setPagingDelayMajorValue(String pagingDelayMajorValue)
            throws JNCException {
        setPagingDelayMajorValue(new YangUInt16(pagingDelayMajorValue));
    }

    /**
     * Unsets the value for child leaf "paging-delay-major".
     */
    public void unsetPagingDelayMajorValue() throws JNCException {
        delete("paging-delay-major");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "paging-delay-major" leaf will not have a value.
     */
    public void addPagingDelayMajor() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-delay-major",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "paging-delay-major" with operation "replace".
     */
    public void markPagingDelayMajorReplace() throws JNCException {
        markLeafReplace("pagingDelayMajor");
    }

    /**
     * Marks the leaf "paging-delay-major" with operation "merge".
     */
    public void markPagingDelayMajorMerge() throws JNCException {
        markLeafMerge("pagingDelayMajor");
    }

    /**
     * Marks the leaf "paging-delay-major" with operation "create".
     */
    public void markPagingDelayMajorCreate() throws JNCException {
        markLeafCreate("pagingDelayMajor");
    }

    /**
     * Marks the leaf "paging-delay-major" with operation "delete".
     */
    public void markPagingDelayMajorDelete() throws JNCException {
        markLeafDelete("pagingDelayMajor");
    }

    /* Access methods for optional leaf child: "paging-reject-major". */

    /**
     * Gets the value for child leaf "paging-reject-major".
     * @return The value of the leaf.
     */
    public YangUInt8 getPagingRejectMajorValue() throws JNCException {
        YangUInt8 pagingRejectMajor = (YangUInt8)getValue("paging-reject-major");
        if (pagingRejectMajor == null) {
            pagingRejectMajor = new YangUInt8("0");  // default
        }
        return pagingRejectMajor;
    }

    /**
     * Sets the value for child leaf "paging-reject-major",
     * using instance of generated typedef class.
     * @param pagingRejectMajorValue The value to set.
     * @param pagingRejectMajorValue used during instantiation.
     */
    public void setPagingRejectMajorValue(YangUInt8 pagingRejectMajorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-reject-major",
            pagingRejectMajorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "paging-reject-major",
     * using Java primitive values.
     * @param pagingRejectMajorValue used during instantiation.
     */
    public void setPagingRejectMajorValue(short pagingRejectMajorValue)
            throws JNCException {
        setPagingRejectMajorValue(new YangUInt8(pagingRejectMajorValue));
    }

    /**
     * Sets the value for child leaf "paging-reject-major",
     * using a String value.
     * @param pagingRejectMajorValue used during instantiation.
     */
    public void setPagingRejectMajorValue(String pagingRejectMajorValue)
            throws JNCException {
        setPagingRejectMajorValue(new YangUInt8(pagingRejectMajorValue));
    }

    /**
     * Unsets the value for child leaf "paging-reject-major".
     */
    public void unsetPagingRejectMajorValue() throws JNCException {
        delete("paging-reject-major");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "paging-reject-major" leaf will not have a value.
     */
    public void addPagingRejectMajor() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-reject-major",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "paging-reject-major" with operation "replace".
     */
    public void markPagingRejectMajorReplace() throws JNCException {
        markLeafReplace("pagingRejectMajor");
    }

    /**
     * Marks the leaf "paging-reject-major" with operation "merge".
     */
    public void markPagingRejectMajorMerge() throws JNCException {
        markLeafMerge("pagingRejectMajor");
    }

    /**
     * Marks the leaf "paging-reject-major" with operation "create".
     */
    public void markPagingRejectMajorCreate() throws JNCException {
        markLeafCreate("pagingRejectMajor");
    }

    /**
     * Marks the leaf "paging-reject-major" with operation "delete".
     */
    public void markPagingRejectMajorDelete() throws JNCException {
        markLeafDelete("pagingRejectMajor");
    }

    /* Access methods for optional leaf child: "critical-ovld". */

    /**
     * Gets the value for child leaf "critical-ovld".
     * @return The value of the leaf.
     */
    public YangEnumeration getCriticalOvldValue() throws JNCException {
        YangEnumeration criticalOvld = (YangEnumeration)getValue("critical-ovld");
        if (criticalOvld == null) {
            criticalOvld = new YangEnumeration("enable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return criticalOvld;
    }

    /**
     * Sets the value for child leaf "critical-ovld",
     * using instance of generated typedef class.
     * @param criticalOvldValue The value to set.
     * @param criticalOvldValue used during instantiation.
     */
    public void setCriticalOvldValue(YangEnumeration criticalOvldValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "critical-ovld",
            criticalOvldValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "critical-ovld",
     * using a String value.
     * @param criticalOvldValue used during instantiation.
     */
    public void setCriticalOvldValue(String criticalOvldValue)
            throws JNCException {
        setCriticalOvldValue(new YangEnumeration(criticalOvldValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "critical-ovld".
     */
    public void unsetCriticalOvldValue() throws JNCException {
        delete("critical-ovld");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "critical-ovld" leaf will not have a value.
     */
    public void addCriticalOvld() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "critical-ovld",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "critical-ovld" with operation "replace".
     */
    public void markCriticalOvldReplace() throws JNCException {
        markLeafReplace("criticalOvld");
    }

    /**
     * Marks the leaf "critical-ovld" with operation "merge".
     */
    public void markCriticalOvldMerge() throws JNCException {
        markLeafMerge("criticalOvld");
    }

    /**
     * Marks the leaf "critical-ovld" with operation "create".
     */
    public void markCriticalOvldCreate() throws JNCException {
        markLeafCreate("criticalOvld");
    }

    /**
     * Marks the leaf "critical-ovld" with operation "delete".
     */
    public void markCriticalOvldDelete() throws JNCException {
        markLeafDelete("criticalOvld");
    }

    /* Access methods for optional leaf child: "critical-onset". */

    /**
     * Gets the value for child leaf "critical-onset".
     * @return The value of the leaf.
     */
    public YangUInt16 getCriticalOnsetValue() throws JNCException {
        YangUInt16 criticalOnset = (YangUInt16)getValue("critical-onset");
        if (criticalOnset == null) {
            criticalOnset = new YangUInt16("425");  // default
        }
        return criticalOnset;
    }

    /**
     * Sets the value for child leaf "critical-onset",
     * using instance of generated typedef class.
     * @param criticalOnsetValue The value to set.
     * @param criticalOnsetValue used during instantiation.
     */
    public void setCriticalOnsetValue(YangUInt16 criticalOnsetValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "critical-onset",
            criticalOnsetValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "critical-onset",
     * using Java primitive values.
     * @param criticalOnsetValue used during instantiation.
     */
    public void setCriticalOnsetValue(int criticalOnsetValue)
            throws JNCException {
        setCriticalOnsetValue(new YangUInt16(criticalOnsetValue));
    }

    /**
     * Sets the value for child leaf "critical-onset",
     * using a String value.
     * @param criticalOnsetValue used during instantiation.
     */
    public void setCriticalOnsetValue(String criticalOnsetValue)
            throws JNCException {
        setCriticalOnsetValue(new YangUInt16(criticalOnsetValue));
    }

    /**
     * Unsets the value for child leaf "critical-onset".
     */
    public void unsetCriticalOnsetValue() throws JNCException {
        delete("critical-onset");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "critical-onset" leaf will not have a value.
     */
    public void addCriticalOnset() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "critical-onset",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "critical-onset" with operation "replace".
     */
    public void markCriticalOnsetReplace() throws JNCException {
        markLeafReplace("criticalOnset");
    }

    /**
     * Marks the leaf "critical-onset" with operation "merge".
     */
    public void markCriticalOnsetMerge() throws JNCException {
        markLeafMerge("criticalOnset");
    }

    /**
     * Marks the leaf "critical-onset" with operation "create".
     */
    public void markCriticalOnsetCreate() throws JNCException {
        markLeafCreate("criticalOnset");
    }

    /**
     * Marks the leaf "critical-onset" with operation "delete".
     */
    public void markCriticalOnsetDelete() throws JNCException {
        markLeafDelete("criticalOnset");
    }

    /* Access methods for optional leaf child: "critical-abate". */

    /**
     * Gets the value for child leaf "critical-abate".
     * @return The value of the leaf.
     */
    public YangUInt16 getCriticalAbateValue() throws JNCException {
        YangUInt16 criticalAbate = (YangUInt16)getValue("critical-abate");
        if (criticalAbate == null) {
            criticalAbate = new YangUInt16("400");  // default
        }
        return criticalAbate;
    }

    /**
     * Sets the value for child leaf "critical-abate",
     * using instance of generated typedef class.
     * @param criticalAbateValue The value to set.
     * @param criticalAbateValue used during instantiation.
     */
    public void setCriticalAbateValue(YangUInt16 criticalAbateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "critical-abate",
            criticalAbateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "critical-abate",
     * using Java primitive values.
     * @param criticalAbateValue used during instantiation.
     */
    public void setCriticalAbateValue(int criticalAbateValue)
            throws JNCException {
        setCriticalAbateValue(new YangUInt16(criticalAbateValue));
    }

    /**
     * Sets the value for child leaf "critical-abate",
     * using a String value.
     * @param criticalAbateValue used during instantiation.
     */
    public void setCriticalAbateValue(String criticalAbateValue)
            throws JNCException {
        setCriticalAbateValue(new YangUInt16(criticalAbateValue));
    }

    /**
     * Unsets the value for child leaf "critical-abate".
     */
    public void unsetCriticalAbateValue() throws JNCException {
        delete("critical-abate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "critical-abate" leaf will not have a value.
     */
    public void addCriticalAbate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "critical-abate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "critical-abate" with operation "replace".
     */
    public void markCriticalAbateReplace() throws JNCException {
        markLeafReplace("criticalAbate");
    }

    /**
     * Marks the leaf "critical-abate" with operation "merge".
     */
    public void markCriticalAbateMerge() throws JNCException {
        markLeafMerge("criticalAbate");
    }

    /**
     * Marks the leaf "critical-abate" with operation "create".
     */
    public void markCriticalAbateCreate() throws JNCException {
        markLeafCreate("criticalAbate");
    }

    /**
     * Marks the leaf "critical-abate" with operation "delete".
     */
    public void markCriticalAbateDelete() throws JNCException {
        markLeafDelete("criticalAbate");
    }

    /* Access methods for optional leaf child: "paging-delay-critical". */

    /**
     * Gets the value for child leaf "paging-delay-critical".
     * @return The value of the leaf.
     */
    public YangUInt16 getPagingDelayCriticalValue() throws JNCException {
        YangUInt16 pagingDelayCritical = (YangUInt16)getValue("paging-delay-critical");
        if (pagingDelayCritical == null) {
            pagingDelayCritical = new YangUInt16("40");  // default
        }
        return pagingDelayCritical;
    }

    /**
     * Sets the value for child leaf "paging-delay-critical",
     * using instance of generated typedef class.
     * @param pagingDelayCriticalValue The value to set.
     * @param pagingDelayCriticalValue used during instantiation.
     */
    public void setPagingDelayCriticalValue(YangUInt16 pagingDelayCriticalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-delay-critical",
            pagingDelayCriticalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "paging-delay-critical",
     * using Java primitive values.
     * @param pagingDelayCriticalValue used during instantiation.
     */
    public void setPagingDelayCriticalValue(int pagingDelayCriticalValue)
            throws JNCException {
        setPagingDelayCriticalValue(new YangUInt16(pagingDelayCriticalValue));
    }

    /**
     * Sets the value for child leaf "paging-delay-critical",
     * using a String value.
     * @param pagingDelayCriticalValue used during instantiation.
     */
    public void setPagingDelayCriticalValue(String pagingDelayCriticalValue)
            throws JNCException {
        setPagingDelayCriticalValue(new YangUInt16(pagingDelayCriticalValue));
    }

    /**
     * Unsets the value for child leaf "paging-delay-critical".
     */
    public void unsetPagingDelayCriticalValue() throws JNCException {
        delete("paging-delay-critical");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "paging-delay-critical" leaf will not have a value.
     */
    public void addPagingDelayCritical() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-delay-critical",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "paging-delay-critical" with operation "replace".
     */
    public void markPagingDelayCriticalReplace() throws JNCException {
        markLeafReplace("pagingDelayCritical");
    }

    /**
     * Marks the leaf "paging-delay-critical" with operation "merge".
     */
    public void markPagingDelayCriticalMerge() throws JNCException {
        markLeafMerge("pagingDelayCritical");
    }

    /**
     * Marks the leaf "paging-delay-critical" with operation "create".
     */
    public void markPagingDelayCriticalCreate() throws JNCException {
        markLeafCreate("pagingDelayCritical");
    }

    /**
     * Marks the leaf "paging-delay-critical" with operation "delete".
     */
    public void markPagingDelayCriticalDelete() throws JNCException {
        markLeafDelete("pagingDelayCritical");
    }

    /* Access methods for optional leaf child: "paging-reject-critical". */

    /**
     * Gets the value for child leaf "paging-reject-critical".
     * @return The value of the leaf.
     */
    public YangUInt8 getPagingRejectCriticalValue() throws JNCException {
        YangUInt8 pagingRejectCritical = (YangUInt8)getValue("paging-reject-critical");
        if (pagingRejectCritical == null) {
            pagingRejectCritical = new YangUInt8("0");  // default
        }
        return pagingRejectCritical;
    }

    /**
     * Sets the value for child leaf "paging-reject-critical",
     * using instance of generated typedef class.
     * @param pagingRejectCriticalValue The value to set.
     * @param pagingRejectCriticalValue used during instantiation.
     */
    public void setPagingRejectCriticalValue(YangUInt8 pagingRejectCriticalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-reject-critical",
            pagingRejectCriticalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "paging-reject-critical",
     * using Java primitive values.
     * @param pagingRejectCriticalValue used during instantiation.
     */
    public void setPagingRejectCriticalValue(short pagingRejectCriticalValue)
            throws JNCException {
        setPagingRejectCriticalValue(new YangUInt8(pagingRejectCriticalValue));
    }

    /**
     * Sets the value for child leaf "paging-reject-critical",
     * using a String value.
     * @param pagingRejectCriticalValue used during instantiation.
     */
    public void setPagingRejectCriticalValue(String pagingRejectCriticalValue)
            throws JNCException {
        setPagingRejectCriticalValue(new YangUInt8(pagingRejectCriticalValue));
    }

    /**
     * Unsets the value for child leaf "paging-reject-critical".
     */
    public void unsetPagingRejectCriticalValue() throws JNCException {
        delete("paging-reject-critical");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "paging-reject-critical" leaf will not have a value.
     */
    public void addPagingRejectCritical() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-reject-critical",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "paging-reject-critical" with operation "replace".
     */
    public void markPagingRejectCriticalReplace() throws JNCException {
        markLeafReplace("pagingRejectCritical");
    }

    /**
     * Marks the leaf "paging-reject-critical" with operation "merge".
     */
    public void markPagingRejectCriticalMerge() throws JNCException {
        markLeafMerge("pagingRejectCritical");
    }

    /**
     * Marks the leaf "paging-reject-critical" with operation "create".
     */
    public void markPagingRejectCriticalCreate() throws JNCException {
        markLeafCreate("pagingRejectCritical");
    }

    /**
     * Marks the leaf "paging-reject-critical" with operation "delete".
     */
    public void markPagingRejectCriticalDelete() throws JNCException {
        markLeafDelete("pagingRejectCritical");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
