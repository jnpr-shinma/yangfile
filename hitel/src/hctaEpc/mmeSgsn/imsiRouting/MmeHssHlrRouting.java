/* 
 * @(#)MmeHssHlrRouting.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.imsiRouting;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/imsiRouting/mme-hss-hlr-routing"
 * <p>
 * See line 46 in
 * dcConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeHssHlrRouting extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeHssHlrRouting object.
     */
    public MmeHssHlrRouting() {
        super(Epc.NAMESPACE, "mme-hss-hlr-routing");
    }

    /**
     * Constructor for an initialized MmeHssHlrRouting object,
     * 
     * @param imsiRangeValue Key argument of child.
     */
    public MmeHssHlrRouting(YangString imsiRangeValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-hss-hlr-routing");
        Leaf imsiRange = new Leaf(Epc.NAMESPACE, "imsi-range");
        imsiRange.setValue(imsiRangeValue);
        insertChild(imsiRange, childrenNames());
    }

    /**
     * Constructor for an initialized MmeHssHlrRouting object,
     * with String keys.
     * @param imsiRangeValue Key argument of child.
     */
    public MmeHssHlrRouting(String imsiRangeValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-hss-hlr-routing");
        Leaf imsiRange = new Leaf(Epc.NAMESPACE, "imsi-range");
        imsiRange.setValue(new YangString(imsiRangeValue));
        insertChild(imsiRange, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeHssHlrRouting clone() {
        MmeHssHlrRouting copy;
        try {
            copy = new MmeHssHlrRouting(getImsiRangeValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeHssHlrRouting)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeHssHlrRouting cloneShallow() {
        MmeHssHlrRouting copy;
        try {
            copy = new MmeHssHlrRouting(getImsiRangeValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeHssHlrRouting)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "imsi-range",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "imsi-range",
            "interface-type",
            "routing-option",
            "hss-realm",
        };
    }

    /* Access methods for leaf child: "imsi-range". */

    /**
     * Gets the value for child leaf "imsi-range".
     * @return The value of the leaf.
     */
    public YangString getImsiRangeValue() throws JNCException {
        return (YangString)getValue("imsi-range");
    }

    /**
     * Sets the value for child leaf "imsi-range",
     * using instance of generated typedef class.
     * @param imsiRangeValue The value to set.
     * @param imsiRangeValue used during instantiation.
     */
    public void setImsiRangeValue(YangString imsiRangeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi-range",
            imsiRangeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imsi-range",
     * using a String value.
     * @param imsiRangeValue used during instantiation.
     */
    public void setImsiRangeValue(String imsiRangeValue) throws JNCException {
        setImsiRangeValue(new YangString(imsiRangeValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imsi-range" leaf will not have a value.
     */
    public void addImsiRange() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imsi-range",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "interface-type". */

    /**
     * Gets the value for child leaf "interface-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getInterfaceTypeValue() throws JNCException {
        YangEnumeration interfaceType = (YangEnumeration)getValue("interface-type");
        if (interfaceType == null) {
            interfaceType = new YangEnumeration("s6", new String[] {  // default
                "s6",
                "gr",
            });
        }
        return interfaceType;
    }

    /**
     * Sets the value for child leaf "interface-type",
     * using instance of generated typedef class.
     * @param interfaceTypeValue The value to set.
     * @param interfaceTypeValue used during instantiation.
     */
    public void setInterfaceTypeValue(YangEnumeration interfaceTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "interface-type",
            interfaceTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "interface-type",
     * using a String value.
     * @param interfaceTypeValue used during instantiation.
     */
    public void setInterfaceTypeValue(String interfaceTypeValue)
            throws JNCException {
        setInterfaceTypeValue(new YangEnumeration(interfaceTypeValue, new String[] {
             "s6",
             "gr",
        }));
    }

    /**
     * Unsets the value for child leaf "interface-type".
     */
    public void unsetInterfaceTypeValue() throws JNCException {
        delete("interface-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "interface-type" leaf will not have a value.
     */
    public void addInterfaceType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "interface-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "interface-type" with operation "replace".
     */
    public void markInterfaceTypeReplace() throws JNCException {
        markLeafReplace("interfaceType");
    }

    /**
     * Marks the leaf "interface-type" with operation "merge".
     */
    public void markInterfaceTypeMerge() throws JNCException {
        markLeafMerge("interfaceType");
    }

    /**
     * Marks the leaf "interface-type" with operation "create".
     */
    public void markInterfaceTypeCreate() throws JNCException {
        markLeafCreate("interfaceType");
    }

    /**
     * Marks the leaf "interface-type" with operation "delete".
     */
    public void markInterfaceTypeDelete() throws JNCException {
        markLeafDelete("interfaceType");
    }

    /* Access methods for optional leaf child: "routing-option". */

    /**
     * Gets the value for child leaf "routing-option".
     * @return The value of the leaf.
     */
    public YangEnumeration getRoutingOptionValue() throws JNCException {
        YangEnumeration routingOption = (YangEnumeration)getValue("routing-option");
        if (routingOption == null) {
            routingOption = new YangEnumeration("standard", new String[] {  // default
                "standard",
                "s6d-override",
                "gr-fallback",
                "s6d-override-and-gr-fallback",
                "ue-epc-capability",
            });
        }
        return routingOption;
    }

    /**
     * Sets the value for child leaf "routing-option",
     * using instance of generated typedef class.
     * @param routingOptionValue The value to set.
     * @param routingOptionValue used during instantiation.
     */
    public void setRoutingOptionValue(YangEnumeration routingOptionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-option",
            routingOptionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-option",
     * using a String value.
     * @param routingOptionValue used during instantiation.
     */
    public void setRoutingOptionValue(String routingOptionValue)
            throws JNCException {
        setRoutingOptionValue(new YangEnumeration(routingOptionValue, new String[] {
             "standard",
             "s6d-override",
             "gr-fallback",
             "s6d-override-and-gr-fallback",
             "ue-epc-capability",
        }));
    }

    /**
     * Unsets the value for child leaf "routing-option".
     */
    public void unsetRoutingOptionValue() throws JNCException {
        delete("routing-option");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-option" leaf will not have a value.
     */
    public void addRoutingOption() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-option",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-option" with operation "replace".
     */
    public void markRoutingOptionReplace() throws JNCException {
        markLeafReplace("routingOption");
    }

    /**
     * Marks the leaf "routing-option" with operation "merge".
     */
    public void markRoutingOptionMerge() throws JNCException {
        markLeafMerge("routingOption");
    }

    /**
     * Marks the leaf "routing-option" with operation "create".
     */
    public void markRoutingOptionCreate() throws JNCException {
        markLeafCreate("routingOption");
    }

    /**
     * Marks the leaf "routing-option" with operation "delete".
     */
    public void markRoutingOptionDelete() throws JNCException {
        markLeafDelete("routingOption");
    }

    /* Access methods for optional leaf child: "hss-realm". */

    /**
     * Gets the value for child leaf "hss-realm".
     * @return The value of the leaf.
     */
    public YangString getHssRealmValue() throws JNCException {
        return (YangString)getValue("hss-realm");
    }

    /**
     * Sets the value for child leaf "hss-realm",
     * using instance of generated typedef class.
     * @param hssRealmValue The value to set.
     * @param hssRealmValue used during instantiation.
     */
    public void setHssRealmValue(YangString hssRealmValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "hss-realm",
            hssRealmValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "hss-realm",
     * using a String value.
     * @param hssRealmValue used during instantiation.
     */
    public void setHssRealmValue(String hssRealmValue) throws JNCException {
        setHssRealmValue(new YangString(hssRealmValue));
    }

    /**
     * Unsets the value for child leaf "hss-realm".
     */
    public void unsetHssRealmValue() throws JNCException {
        delete("hss-realm");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "hss-realm" leaf will not have a value.
     */
    public void addHssRealm() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "hss-realm",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "hss-realm" with operation "replace".
     */
    public void markHssRealmReplace() throws JNCException {
        markLeafReplace("hssRealm");
    }

    /**
     * Marks the leaf "hss-realm" with operation "merge".
     */
    public void markHssRealmMerge() throws JNCException {
        markLeafMerge("hssRealm");
    }

    /**
     * Marks the leaf "hss-realm" with operation "create".
     */
    public void markHssRealmCreate() throws JNCException {
        markLeafCreate("hssRealm");
    }

    /**
     * Marks the leaf "hss-realm" with operation "delete".
     */
    public void markHssRealmDelete() throws JNCException {
        markLeafDelete("hssRealm");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
