/* 
 * @(#)ESmlcOper.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.sls;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/sls/e-smlc-oper"
 * <p>
 * See line 41 in
 * slsCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class ESmlcOper extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty ESmlcOper object.
     */
    public ESmlcOper() {
        super(Epc.NAMESPACE, "e-smlc-oper");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public ESmlcOper clone() {
        return (ESmlcOper)cloneContent(new ESmlcOper());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public ESmlcOper cloneShallow() {
        return (ESmlcOper)cloneShallowContent(new ESmlcOper());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "e-smlc-id",
            "callp-service-id",
            "e-smlc-pool",
            "ip-address1",
            "ip-address2",
            "status-str",
        };
    }

    /* Access methods for optional leaf child: "e-smlc-id". */

    /**
     * Gets the value for child leaf "e-smlc-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getESmlcIdValue() throws JNCException {
        return (YangUInt16)getValue("e-smlc-id");
    }

    /**
     * Sets the value for child leaf "e-smlc-id",
     * using instance of generated typedef class.
     * @param eSmlcIdValue The value to set.
     * @param eSmlcIdValue used during instantiation.
     */
    public void setESmlcIdValue(YangUInt16 eSmlcIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "e-smlc-id",
            eSmlcIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "e-smlc-id",
     * using Java primitive values.
     * @param eSmlcIdValue used during instantiation.
     */
    public void setESmlcIdValue(int eSmlcIdValue) throws JNCException {
        setESmlcIdValue(new YangUInt16(eSmlcIdValue));
    }

    /**
     * Sets the value for child leaf "e-smlc-id",
     * using a String value.
     * @param eSmlcIdValue used during instantiation.
     */
    public void setESmlcIdValue(String eSmlcIdValue) throws JNCException {
        setESmlcIdValue(new YangUInt16(eSmlcIdValue));
    }

    /**
     * Unsets the value for child leaf "e-smlc-id".
     */
    public void unsetESmlcIdValue() throws JNCException {
        delete("e-smlc-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "e-smlc-id" leaf will not have a value.
     */
    public void addESmlcId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "e-smlc-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "e-smlc-id" with operation "replace".
     */
    public void markESmlcIdReplace() throws JNCException {
        markLeafReplace("eSmlcId");
    }

    /**
     * Marks the leaf "e-smlc-id" with operation "merge".
     */
    public void markESmlcIdMerge() throws JNCException {
        markLeafMerge("eSmlcId");
    }

    /**
     * Marks the leaf "e-smlc-id" with operation "create".
     */
    public void markESmlcIdCreate() throws JNCException {
        markLeafCreate("eSmlcId");
    }

    /**
     * Marks the leaf "e-smlc-id" with operation "delete".
     */
    public void markESmlcIdDelete() throws JNCException {
        markLeafDelete("eSmlcId");
    }

    /* Access methods for optional leaf child: "callp-service-id". */

    /**
     * Gets the value for child leaf "callp-service-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getCallpServiceIdValue() throws JNCException {
        return (YangUInt16)getValue("callp-service-id");
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using instance of generated typedef class.
     * @param callpServiceIdValue The value to set.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(YangUInt16 callpServiceIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "callp-service-id",
            callpServiceIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using Java primitive values.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(int callpServiceIdValue)
            throws JNCException {
        setCallpServiceIdValue(new YangUInt16(callpServiceIdValue));
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using a String value.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(String callpServiceIdValue)
            throws JNCException {
        setCallpServiceIdValue(new YangUInt16(callpServiceIdValue));
    }

    /**
     * Unsets the value for child leaf "callp-service-id".
     */
    public void unsetCallpServiceIdValue() throws JNCException {
        delete("callp-service-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "callp-service-id" leaf will not have a value.
     */
    public void addCallpServiceId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "callp-service-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "callp-service-id" with operation "replace".
     */
    public void markCallpServiceIdReplace() throws JNCException {
        markLeafReplace("callpServiceId");
    }

    /**
     * Marks the leaf "callp-service-id" with operation "merge".
     */
    public void markCallpServiceIdMerge() throws JNCException {
        markLeafMerge("callpServiceId");
    }

    /**
     * Marks the leaf "callp-service-id" with operation "create".
     */
    public void markCallpServiceIdCreate() throws JNCException {
        markLeafCreate("callpServiceId");
    }

    /**
     * Marks the leaf "callp-service-id" with operation "delete".
     */
    public void markCallpServiceIdDelete() throws JNCException {
        markLeafDelete("callpServiceId");
    }

    /* Access methods for optional leaf child: "e-smlc-pool". */

    /**
     * Gets the value for child leaf "e-smlc-pool".
     * @return The value of the leaf.
     */
    public YangString getESmlcPoolValue() throws JNCException {
        return (YangString)getValue("e-smlc-pool");
    }

    /**
     * Sets the value for child leaf "e-smlc-pool",
     * using instance of generated typedef class.
     * @param eSmlcPoolValue The value to set.
     * @param eSmlcPoolValue used during instantiation.
     */
    public void setESmlcPoolValue(YangString eSmlcPoolValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "e-smlc-pool",
            eSmlcPoolValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "e-smlc-pool",
     * using a String value.
     * @param eSmlcPoolValue used during instantiation.
     */
    public void setESmlcPoolValue(String eSmlcPoolValue) throws JNCException {
        setESmlcPoolValue(new YangString(eSmlcPoolValue));
    }

    /**
     * Unsets the value for child leaf "e-smlc-pool".
     */
    public void unsetESmlcPoolValue() throws JNCException {
        delete("e-smlc-pool");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "e-smlc-pool" leaf will not have a value.
     */
    public void addESmlcPool() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "e-smlc-pool",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "e-smlc-pool" with operation "replace".
     */
    public void markESmlcPoolReplace() throws JNCException {
        markLeafReplace("eSmlcPool");
    }

    /**
     * Marks the leaf "e-smlc-pool" with operation "merge".
     */
    public void markESmlcPoolMerge() throws JNCException {
        markLeafMerge("eSmlcPool");
    }

    /**
     * Marks the leaf "e-smlc-pool" with operation "create".
     */
    public void markESmlcPoolCreate() throws JNCException {
        markLeafCreate("eSmlcPool");
    }

    /**
     * Marks the leaf "e-smlc-pool" with operation "delete".
     */
    public void markESmlcPoolDelete() throws JNCException {
        markLeafDelete("eSmlcPool");
    }

    /* Access methods for optional leaf child: "ip-address1". */

    /**
     * Gets the value for child leaf "ip-address1".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddress1Value() throws JNCException {
        return (IpAddress)getValue("ip-address1");
    }

    /**
     * Sets the value for child leaf "ip-address1",
     * using a JNC type value.
     * @param ipAddress1Value The value to set.
     * @param ipAddress1Value used during instantiation.
     */
    public void setIpAddress1Value(IpAddress ipAddress1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address1",
            ipAddress1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address1",
     * using a String value.
     * @param ipAddress1Value used during instantiation.
     */
    public void setIpAddress1Value(String ipAddress1Value) throws JNCException {
        setIpAddress1Value(new IpAddress(ipAddress1Value));
    }

    /**
     * Unsets the value for child leaf "ip-address1".
     */
    public void unsetIpAddress1Value() throws JNCException {
        delete("ip-address1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address1" leaf will not have a value.
     */
    public void addIpAddress1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address1" with operation "replace".
     */
    public void markIpAddress1Replace() throws JNCException {
        markLeafReplace("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "merge".
     */
    public void markIpAddress1Merge() throws JNCException {
        markLeafMerge("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "create".
     */
    public void markIpAddress1Create() throws JNCException {
        markLeafCreate("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "delete".
     */
    public void markIpAddress1Delete() throws JNCException {
        markLeafDelete("ipAddress1");
    }

    /* Access methods for optional leaf child: "ip-address2". */

    /**
     * Gets the value for child leaf "ip-address2".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddress2Value() throws JNCException {
        return (IpAddress)getValue("ip-address2");
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a JNC type value.
     * @param ipAddress2Value The value to set.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(IpAddress ipAddress2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            ipAddress2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a String value.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(String ipAddress2Value) throws JNCException {
        setIpAddress2Value(new IpAddress(ipAddress2Value));
    }

    /**
     * Unsets the value for child leaf "ip-address2".
     */
    public void unsetIpAddress2Value() throws JNCException {
        delete("ip-address2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address2" leaf will not have a value.
     */
    public void addIpAddress2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address2" with operation "replace".
     */
    public void markIpAddress2Replace() throws JNCException {
        markLeafReplace("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "merge".
     */
    public void markIpAddress2Merge() throws JNCException {
        markLeafMerge("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "create".
     */
    public void markIpAddress2Create() throws JNCException {
        markLeafCreate("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "delete".
     */
    public void markIpAddress2Delete() throws JNCException {
        markLeafDelete("ipAddress2");
    }

    /* Access methods for optional leaf child: "status-str". */

    /**
     * Gets the value for child leaf "status-str".
     * @return The value of the leaf.
     */
    public YangString getStatusStrValue() throws JNCException {
        return (YangString)getValue("status-str");
    }

    /**
     * Sets the value for child leaf "status-str",
     * using instance of generated typedef class.
     * @param statusStrValue The value to set.
     * @param statusStrValue used during instantiation.
     */
    public void setStatusStrValue(YangString statusStrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-str",
            statusStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-str",
     * using a String value.
     * @param statusStrValue used during instantiation.
     */
    public void setStatusStrValue(String statusStrValue) throws JNCException {
        setStatusStrValue(new YangString(statusStrValue));
    }

    /**
     * Unsets the value for child leaf "status-str".
     */
    public void unsetStatusStrValue() throws JNCException {
        delete("status-str");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-str" leaf will not have a value.
     */
    public void addStatusStr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-str",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-str" with operation "replace".
     */
    public void markStatusStrReplace() throws JNCException {
        markLeafReplace("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "merge".
     */
    public void markStatusStrMerge() throws JNCException {
        markLeafMerge("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "create".
     */
    public void markStatusStrCreate() throws JNCException {
        markLeafCreate("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "delete".
     */
    public void markStatusStrDelete() throws JNCException {
        markLeafDelete("statusStr");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
