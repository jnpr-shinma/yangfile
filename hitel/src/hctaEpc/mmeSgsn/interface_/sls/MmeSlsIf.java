/* 
 * @(#)MmeSlsIf.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.sls;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/sls/mme-sls-if"
 * <p>
 * See line 25 in
 * slsConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeSlsIf extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeSlsIf object.
     */
    public MmeSlsIf() {
        super(Epc.NAMESPACE, "mme-sls-if");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeSlsIf clone() {
        return (MmeSlsIf)cloneContent(new MmeSlsIf());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeSlsIf cloneShallow() {
        return (MmeSlsIf)cloneShallowContent(new MmeSlsIf());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "routing-instance1",
            "routing-instance2",
            "sctp-profile",
            "local-ip-address1",
            "local-ip-address2",
            "port",
            "location-request-t3x01",
            "reset-request-t3x02",
            "reset-request-retry",
            "version",
            "dscp-mark",
            "max-transactions-per-peer",
        };
    }

    /* Access methods for optional leaf child: "routing-instance1". */

    /**
     * Gets the value for child leaf "routing-instance1".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstance1Value() throws JNCException {
        return (YangString)getValue("routing-instance1");
    }

    /**
     * Sets the value for child leaf "routing-instance1",
     * using instance of generated typedef class.
     * @param routingInstance1Value The value to set.
     * @param routingInstance1Value used during instantiation.
     */
    public void setRoutingInstance1Value(YangString routingInstance1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance1",
            routingInstance1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance1",
     * using a String value.
     * @param routingInstance1Value used during instantiation.
     */
    public void setRoutingInstance1Value(String routingInstance1Value)
            throws JNCException {
        setRoutingInstance1Value(new YangString(routingInstance1Value));
    }

    /**
     * Unsets the value for child leaf "routing-instance1".
     */
    public void unsetRoutingInstance1Value() throws JNCException {
        delete("routing-instance1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance1" leaf will not have a value.
     */
    public void addRoutingInstance1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance1" with operation "replace".
     */
    public void markRoutingInstance1Replace() throws JNCException {
        markLeafReplace("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "merge".
     */
    public void markRoutingInstance1Merge() throws JNCException {
        markLeafMerge("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "create".
     */
    public void markRoutingInstance1Create() throws JNCException {
        markLeafCreate("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "delete".
     */
    public void markRoutingInstance1Delete() throws JNCException {
        markLeafDelete("routingInstance1");
    }

    /* Access methods for optional leaf child: "routing-instance2". */

    /**
     * Gets the value for child leaf "routing-instance2".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstance2Value() throws JNCException {
        return (YangString)getValue("routing-instance2");
    }

    /**
     * Sets the value for child leaf "routing-instance2",
     * using instance of generated typedef class.
     * @param routingInstance2Value The value to set.
     * @param routingInstance2Value used during instantiation.
     */
    public void setRoutingInstance2Value(YangString routingInstance2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance2",
            routingInstance2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance2",
     * using a String value.
     * @param routingInstance2Value used during instantiation.
     */
    public void setRoutingInstance2Value(String routingInstance2Value)
            throws JNCException {
        setRoutingInstance2Value(new YangString(routingInstance2Value));
    }

    /**
     * Unsets the value for child leaf "routing-instance2".
     */
    public void unsetRoutingInstance2Value() throws JNCException {
        delete("routing-instance2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance2" leaf will not have a value.
     */
    public void addRoutingInstance2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance2" with operation "replace".
     */
    public void markRoutingInstance2Replace() throws JNCException {
        markLeafReplace("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "merge".
     */
    public void markRoutingInstance2Merge() throws JNCException {
        markLeafMerge("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "create".
     */
    public void markRoutingInstance2Create() throws JNCException {
        markLeafCreate("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "delete".
     */
    public void markRoutingInstance2Delete() throws JNCException {
        markLeafDelete("routingInstance2");
    }

    /* Access methods for optional leaf child: "sctp-profile". */

    /**
     * Gets the value for child leaf "sctp-profile".
     * @return The value of the leaf.
     */
    public YangString getSctpProfileValue() throws JNCException {
        return (YangString)getValue("sctp-profile");
    }

    /**
     * Sets the value for child leaf "sctp-profile",
     * using instance of generated typedef class.
     * @param sctpProfileValue The value to set.
     * @param sctpProfileValue used during instantiation.
     */
    public void setSctpProfileValue(YangString sctpProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-profile",
            sctpProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sctp-profile",
     * using a String value.
     * @param sctpProfileValue used during instantiation.
     */
    public void setSctpProfileValue(String sctpProfileValue)
            throws JNCException {
        setSctpProfileValue(new YangString(sctpProfileValue));
    }

    /**
     * Unsets the value for child leaf "sctp-profile".
     */
    public void unsetSctpProfileValue() throws JNCException {
        delete("sctp-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sctp-profile" leaf will not have a value.
     */
    public void addSctpProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sctp-profile" with operation "replace".
     */
    public void markSctpProfileReplace() throws JNCException {
        markLeafReplace("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "merge".
     */
    public void markSctpProfileMerge() throws JNCException {
        markLeafMerge("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "create".
     */
    public void markSctpProfileCreate() throws JNCException {
        markLeafCreate("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "delete".
     */
    public void markSctpProfileDelete() throws JNCException {
        markLeafDelete("sctpProfile");
    }

    /* Access methods for optional leaf child: "local-ip-address1". */

    /**
     * Gets the value for child leaf "local-ip-address1".
     * @return The value of the leaf.
     */
    public IpAddress getLocalIpAddress1Value() throws JNCException {
        return (IpAddress)getValue("local-ip-address1");
    }

    /**
     * Sets the value for child leaf "local-ip-address1",
     * using a JNC type value.
     * @param localIpAddress1Value The value to set.
     * @param localIpAddress1Value used during instantiation.
     */
    public void setLocalIpAddress1Value(IpAddress localIpAddress1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-ip-address1",
            localIpAddress1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-ip-address1",
     * using a String value.
     * @param localIpAddress1Value used during instantiation.
     */
    public void setLocalIpAddress1Value(String localIpAddress1Value)
            throws JNCException {
        setLocalIpAddress1Value(new IpAddress(localIpAddress1Value));
    }

    /**
     * Unsets the value for child leaf "local-ip-address1".
     */
    public void unsetLocalIpAddress1Value() throws JNCException {
        delete("local-ip-address1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-ip-address1" leaf will not have a value.
     */
    public void addLocalIpAddress1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-ip-address1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-ip-address1" with operation "replace".
     */
    public void markLocalIpAddress1Replace() throws JNCException {
        markLeafReplace("localIpAddress1");
    }

    /**
     * Marks the leaf "local-ip-address1" with operation "merge".
     */
    public void markLocalIpAddress1Merge() throws JNCException {
        markLeafMerge("localIpAddress1");
    }

    /**
     * Marks the leaf "local-ip-address1" with operation "create".
     */
    public void markLocalIpAddress1Create() throws JNCException {
        markLeafCreate("localIpAddress1");
    }

    /**
     * Marks the leaf "local-ip-address1" with operation "delete".
     */
    public void markLocalIpAddress1Delete() throws JNCException {
        markLeafDelete("localIpAddress1");
    }

    /* Access methods for optional leaf child: "local-ip-address2". */

    /**
     * Gets the value for child leaf "local-ip-address2".
     * @return The value of the leaf.
     */
    public IpAddress getLocalIpAddress2Value() throws JNCException {
        IpAddress localIpAddress2 = (IpAddress)getValue("local-ip-address2");
        if (localIpAddress2 == null) {
            localIpAddress2 = new IpAddress("0.0.0.0");  // default
        }
        return localIpAddress2;
    }

    /**
     * Sets the value for child leaf "local-ip-address2",
     * using a JNC type value.
     * @param localIpAddress2Value The value to set.
     * @param localIpAddress2Value used during instantiation.
     */
    public void setLocalIpAddress2Value(IpAddress localIpAddress2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-ip-address2",
            localIpAddress2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-ip-address2",
     * using a String value.
     * @param localIpAddress2Value used during instantiation.
     */
    public void setLocalIpAddress2Value(String localIpAddress2Value)
            throws JNCException {
        setLocalIpAddress2Value(new IpAddress(localIpAddress2Value));
    }

    /**
     * Unsets the value for child leaf "local-ip-address2".
     */
    public void unsetLocalIpAddress2Value() throws JNCException {
        delete("local-ip-address2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-ip-address2" leaf will not have a value.
     */
    public void addLocalIpAddress2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-ip-address2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-ip-address2" with operation "replace".
     */
    public void markLocalIpAddress2Replace() throws JNCException {
        markLeafReplace("localIpAddress2");
    }

    /**
     * Marks the leaf "local-ip-address2" with operation "merge".
     */
    public void markLocalIpAddress2Merge() throws JNCException {
        markLeafMerge("localIpAddress2");
    }

    /**
     * Marks the leaf "local-ip-address2" with operation "create".
     */
    public void markLocalIpAddress2Create() throws JNCException {
        markLeafCreate("localIpAddress2");
    }

    /**
     * Marks the leaf "local-ip-address2" with operation "delete".
     */
    public void markLocalIpAddress2Delete() throws JNCException {
        markLeafDelete("localIpAddress2");
    }

    /* Access methods for optional leaf child: "port". */

    /**
     * Gets the value for child leaf "port".
     * @return The value of the leaf.
     */
    public YangUInt16 getPortValue() throws JNCException {
        YangUInt16 port = (YangUInt16)getValue("port");
        if (port == null) {
            port = new YangUInt16("9082");  // default
        }
        return port;
    }

    /**
     * Sets the value for child leaf "port",
     * using instance of generated typedef class.
     * @param portValue The value to set.
     * @param portValue used during instantiation.
     */
    public void setPortValue(YangUInt16 portValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port",
            portValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "port",
     * using Java primitive values.
     * @param portValue used during instantiation.
     */
    public void setPortValue(int portValue) throws JNCException {
        setPortValue(new YangUInt16(portValue));
    }

    /**
     * Sets the value for child leaf "port",
     * using a String value.
     * @param portValue used during instantiation.
     */
    public void setPortValue(String portValue) throws JNCException {
        setPortValue(new YangUInt16(portValue));
    }

    /**
     * Unsets the value for child leaf "port".
     */
    public void unsetPortValue() throws JNCException {
        delete("port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "port" leaf will not have a value.
     */
    public void addPort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "port" with operation "replace".
     */
    public void markPortReplace() throws JNCException {
        markLeafReplace("port");
    }

    /**
     * Marks the leaf "port" with operation "merge".
     */
    public void markPortMerge() throws JNCException {
        markLeafMerge("port");
    }

    /**
     * Marks the leaf "port" with operation "create".
     */
    public void markPortCreate() throws JNCException {
        markLeafCreate("port");
    }

    /**
     * Marks the leaf "port" with operation "delete".
     */
    public void markPortDelete() throws JNCException {
        markLeafDelete("port");
    }

    /* Access methods for optional leaf child: "location-request-t3x01". */

    /**
     * Gets the value for child leaf "location-request-t3x01".
     * @return The value of the leaf.
     */
    public YangUInt16 getLocationRequestT3x01Value() throws JNCException {
        YangUInt16 locationRequestT3x01 = (YangUInt16)getValue("location-request-t3x01");
        if (locationRequestT3x01 == null) {
            locationRequestT3x01 = new YangUInt16("8");  // default
        }
        return locationRequestT3x01;
    }

    /**
     * Sets the value for child leaf "location-request-t3x01",
     * using instance of generated typedef class.
     * @param locationRequestT3x01Value The value to set.
     * @param locationRequestT3x01Value used during instantiation.
     */
    public void setLocationRequestT3x01Value(YangUInt16 locationRequestT3x01Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location-request-t3x01",
            locationRequestT3x01Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location-request-t3x01",
     * using Java primitive values.
     * @param locationRequestT3x01Value used during instantiation.
     */
    public void setLocationRequestT3x01Value(int locationRequestT3x01Value)
            throws JNCException {
        setLocationRequestT3x01Value(new YangUInt16(locationRequestT3x01Value));
    }

    /**
     * Sets the value for child leaf "location-request-t3x01",
     * using a String value.
     * @param locationRequestT3x01Value used during instantiation.
     */
    public void setLocationRequestT3x01Value(String locationRequestT3x01Value)
            throws JNCException {
        setLocationRequestT3x01Value(new YangUInt16(locationRequestT3x01Value));
    }

    /**
     * Unsets the value for child leaf "location-request-t3x01".
     */
    public void unsetLocationRequestT3x01Value() throws JNCException {
        delete("location-request-t3x01");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location-request-t3x01" leaf will not have a value.
     */
    public void addLocationRequestT3x01() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location-request-t3x01",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location-request-t3x01" with operation "replace".
     */
    public void markLocationRequestT3x01Replace() throws JNCException {
        markLeafReplace("locationRequestT3x01");
    }

    /**
     * Marks the leaf "location-request-t3x01" with operation "merge".
     */
    public void markLocationRequestT3x01Merge() throws JNCException {
        markLeafMerge("locationRequestT3x01");
    }

    /**
     * Marks the leaf "location-request-t3x01" with operation "create".
     */
    public void markLocationRequestT3x01Create() throws JNCException {
        markLeafCreate("locationRequestT3x01");
    }

    /**
     * Marks the leaf "location-request-t3x01" with operation "delete".
     */
    public void markLocationRequestT3x01Delete() throws JNCException {
        markLeafDelete("locationRequestT3x01");
    }

    /* Access methods for optional leaf child: "reset-request-t3x02". */

    /**
     * Gets the value for child leaf "reset-request-t3x02".
     * @return The value of the leaf.
     */
    public YangUInt8 getResetRequestT3x02Value() throws JNCException {
        YangUInt8 resetRequestT3x02 = (YangUInt8)getValue("reset-request-t3x02");
        if (resetRequestT3x02 == null) {
            resetRequestT3x02 = new YangUInt8("3");  // default
        }
        return resetRequestT3x02;
    }

    /**
     * Sets the value for child leaf "reset-request-t3x02",
     * using instance of generated typedef class.
     * @param resetRequestT3x02Value The value to set.
     * @param resetRequestT3x02Value used during instantiation.
     */
    public void setResetRequestT3x02Value(YangUInt8 resetRequestT3x02Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-request-t3x02",
            resetRequestT3x02Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "reset-request-t3x02",
     * using Java primitive values.
     * @param resetRequestT3x02Value used during instantiation.
     */
    public void setResetRequestT3x02Value(short resetRequestT3x02Value)
            throws JNCException {
        setResetRequestT3x02Value(new YangUInt8(resetRequestT3x02Value));
    }

    /**
     * Sets the value for child leaf "reset-request-t3x02",
     * using a String value.
     * @param resetRequestT3x02Value used during instantiation.
     */
    public void setResetRequestT3x02Value(String resetRequestT3x02Value)
            throws JNCException {
        setResetRequestT3x02Value(new YangUInt8(resetRequestT3x02Value));
    }

    /**
     * Unsets the value for child leaf "reset-request-t3x02".
     */
    public void unsetResetRequestT3x02Value() throws JNCException {
        delete("reset-request-t3x02");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "reset-request-t3x02" leaf will not have a value.
     */
    public void addResetRequestT3x02() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-request-t3x02",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "reset-request-t3x02" with operation "replace".
     */
    public void markResetRequestT3x02Replace() throws JNCException {
        markLeafReplace("resetRequestT3x02");
    }

    /**
     * Marks the leaf "reset-request-t3x02" with operation "merge".
     */
    public void markResetRequestT3x02Merge() throws JNCException {
        markLeafMerge("resetRequestT3x02");
    }

    /**
     * Marks the leaf "reset-request-t3x02" with operation "create".
     */
    public void markResetRequestT3x02Create() throws JNCException {
        markLeafCreate("resetRequestT3x02");
    }

    /**
     * Marks the leaf "reset-request-t3x02" with operation "delete".
     */
    public void markResetRequestT3x02Delete() throws JNCException {
        markLeafDelete("resetRequestT3x02");
    }

    /* Access methods for optional leaf child: "reset-request-retry". */

    /**
     * Gets the value for child leaf "reset-request-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getResetRequestRetryValue() throws JNCException {
        YangUInt8 resetRequestRetry = (YangUInt8)getValue("reset-request-retry");
        if (resetRequestRetry == null) {
            resetRequestRetry = new YangUInt8("0");  // default
        }
        return resetRequestRetry;
    }

    /**
     * Sets the value for child leaf "reset-request-retry",
     * using instance of generated typedef class.
     * @param resetRequestRetryValue The value to set.
     * @param resetRequestRetryValue used during instantiation.
     */
    public void setResetRequestRetryValue(YangUInt8 resetRequestRetryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-request-retry",
            resetRequestRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "reset-request-retry",
     * using Java primitive values.
     * @param resetRequestRetryValue used during instantiation.
     */
    public void setResetRequestRetryValue(short resetRequestRetryValue)
            throws JNCException {
        setResetRequestRetryValue(new YangUInt8(resetRequestRetryValue));
    }

    /**
     * Sets the value for child leaf "reset-request-retry",
     * using a String value.
     * @param resetRequestRetryValue used during instantiation.
     */
    public void setResetRequestRetryValue(String resetRequestRetryValue)
            throws JNCException {
        setResetRequestRetryValue(new YangUInt8(resetRequestRetryValue));
    }

    /**
     * Unsets the value for child leaf "reset-request-retry".
     */
    public void unsetResetRequestRetryValue() throws JNCException {
        delete("reset-request-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "reset-request-retry" leaf will not have a value.
     */
    public void addResetRequestRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-request-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "reset-request-retry" with operation "replace".
     */
    public void markResetRequestRetryReplace() throws JNCException {
        markLeafReplace("resetRequestRetry");
    }

    /**
     * Marks the leaf "reset-request-retry" with operation "merge".
     */
    public void markResetRequestRetryMerge() throws JNCException {
        markLeafMerge("resetRequestRetry");
    }

    /**
     * Marks the leaf "reset-request-retry" with operation "create".
     */
    public void markResetRequestRetryCreate() throws JNCException {
        markLeafCreate("resetRequestRetry");
    }

    /**
     * Marks the leaf "reset-request-retry" with operation "delete".
     */
    public void markResetRequestRetryDelete() throws JNCException {
        markLeafDelete("resetRequestRetry");
    }

    /* Access methods for optional leaf child: "version". */

    /**
     * Gets the value for child leaf "version".
     * @return The value of the leaf.
     */
    public YangEnumeration getVersionValue() throws JNCException {
        YangEnumeration version = (YangEnumeration)getValue("version");
        if (version == null) {
            version = new YangEnumeration("10.4.0", new String[] {  // default
                "10.4.0",
            });
        }
        return version;
    }

    /**
     * Sets the value for child leaf "version",
     * using instance of generated typedef class.
     * @param versionValue The value to set.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(YangEnumeration versionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            versionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "version",
     * using a String value.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(String versionValue) throws JNCException {
        setVersionValue(new YangEnumeration(versionValue, new String[] {
             "10.4.0",
        }));
    }

    /**
     * Unsets the value for child leaf "version".
     */
    public void unsetVersionValue() throws JNCException {
        delete("version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "version" leaf will not have a value.
     */
    public void addVersion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "version" with operation "replace".
     */
    public void markVersionReplace() throws JNCException {
        markLeafReplace("version");
    }

    /**
     * Marks the leaf "version" with operation "merge".
     */
    public void markVersionMerge() throws JNCException {
        markLeafMerge("version");
    }

    /**
     * Marks the leaf "version" with operation "create".
     */
    public void markVersionCreate() throws JNCException {
        markLeafCreate("version");
    }

    /**
     * Marks the leaf "version" with operation "delete".
     */
    public void markVersionDelete() throws JNCException {
        markLeafDelete("version");
    }

    /* Access methods for optional leaf child: "dscp-mark". */

    /**
     * Gets the value for child leaf "dscp-mark".
     * @return The value of the leaf.
     */
    public YangString getDscpMarkValue() throws JNCException {
        YangString dscpMark = (YangString)getValue("dscp-mark");
        if (dscpMark == null) {
            dscpMark = new YangString("de");  // default
        }
        return dscpMark;
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using instance of generated typedef class.
     * @param dscpMarkValue The value to set.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(YangString dscpMarkValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            dscpMarkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using a String value.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(String dscpMarkValue) throws JNCException {
        setDscpMarkValue(new YangString(dscpMarkValue));
    }

    /**
     * Unsets the value for child leaf "dscp-mark".
     */
    public void unsetDscpMarkValue() throws JNCException {
        delete("dscp-mark");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dscp-mark" leaf will not have a value.
     */
    public void addDscpMark() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dscp-mark" with operation "replace".
     */
    public void markDscpMarkReplace() throws JNCException {
        markLeafReplace("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "merge".
     */
    public void markDscpMarkMerge() throws JNCException {
        markLeafMerge("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "create".
     */
    public void markDscpMarkCreate() throws JNCException {
        markLeafCreate("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "delete".
     */
    public void markDscpMarkDelete() throws JNCException {
        markLeafDelete("dscpMark");
    }

    /* Access methods for optional leaf child: "max-transactions-per-peer". */

    /**
     * Gets the value for child leaf "max-transactions-per-peer".
     * @return The value of the leaf.
     */
    public YangUInt16 getMaxTransactionsPerPeerValue() throws JNCException {
        YangUInt16 maxTransactionsPerPeer = (YangUInt16)getValue("max-transactions-per-peer");
        if (maxTransactionsPerPeer == null) {
            maxTransactionsPerPeer = new YangUInt16("5000");  // default
        }
        return maxTransactionsPerPeer;
    }

    /**
     * Sets the value for child leaf "max-transactions-per-peer",
     * using instance of generated typedef class.
     * @param maxTransactionsPerPeerValue The value to set.
     * @param maxTransactionsPerPeerValue used during instantiation.
     */
    public void setMaxTransactionsPerPeerValue(YangUInt16 maxTransactionsPerPeerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-transactions-per-peer",
            maxTransactionsPerPeerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-transactions-per-peer",
     * using Java primitive values.
     * @param maxTransactionsPerPeerValue used during instantiation.
     */
    public void setMaxTransactionsPerPeerValue(int maxTransactionsPerPeerValue)
            throws JNCException {
        setMaxTransactionsPerPeerValue(new YangUInt16(maxTransactionsPerPeerValue));
    }

    /**
     * Sets the value for child leaf "max-transactions-per-peer",
     * using a String value.
     * @param maxTransactionsPerPeerValue used during instantiation.
     */
    public void setMaxTransactionsPerPeerValue(String maxTransactionsPerPeerValue)
            throws JNCException {
        setMaxTransactionsPerPeerValue(new YangUInt16(maxTransactionsPerPeerValue));
    }

    /**
     * Unsets the value for child leaf "max-transactions-per-peer".
     */
    public void unsetMaxTransactionsPerPeerValue() throws JNCException {
        delete("max-transactions-per-peer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-transactions-per-peer" leaf will not have a value.
     */
    public void addMaxTransactionsPerPeer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-transactions-per-peer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-transactions-per-peer" with operation "replace".
     */
    public void markMaxTransactionsPerPeerReplace() throws JNCException {
        markLeafReplace("maxTransactionsPerPeer");
    }

    /**
     * Marks the leaf "max-transactions-per-peer" with operation "merge".
     */
    public void markMaxTransactionsPerPeerMerge() throws JNCException {
        markLeafMerge("maxTransactionsPerPeer");
    }

    /**
     * Marks the leaf "max-transactions-per-peer" with operation "create".
     */
    public void markMaxTransactionsPerPeerCreate() throws JNCException {
        markLeafCreate("maxTransactionsPerPeer");
    }

    /**
     * Marks the leaf "max-transactions-per-peer" with operation "delete".
     */
    public void markMaxTransactionsPerPeerDelete() throws JNCException {
        markLeafDelete("maxTransactionsPerPeer");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
