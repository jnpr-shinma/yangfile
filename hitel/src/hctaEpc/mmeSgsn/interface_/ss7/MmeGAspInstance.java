/* 
 * @(#)MmeGAspInstance.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.ss7;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt16;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/ss7/mme-g-asp-instance"
 * <p>
 * See line 510 in
 * sigtranConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeGAspInstance extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeGAspInstance object.
     */
    public MmeGAspInstance() {
        super(Epc.NAMESPACE, "mme-g-asp-instance");
    }

    /**
     * Constructor for an initialized MmeGAspInstance object,
     * 
     * @param unitIdValue Key argument of child.
     */
    public MmeGAspInstance(YangUInt16 unitIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-g-asp-instance");
        Leaf unitId = new Leaf(Epc.NAMESPACE, "unit-id");
        unitId.setValue(unitIdValue);
        insertChild(unitId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeGAspInstance object,
     * with String keys.
     * @param unitIdValue Key argument of child.
     */
    public MmeGAspInstance(String unitIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-g-asp-instance");
        Leaf unitId = new Leaf(Epc.NAMESPACE, "unit-id");
        unitId.setValue(new YangUInt16(unitIdValue));
        insertChild(unitId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeGAspInstance object,
     * with keys of built in Java types.
     * @param unitIdValue Key argument of child.
     */
    public MmeGAspInstance(int unitIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-g-asp-instance");
        Leaf unitId = new Leaf(Epc.NAMESPACE, "unit-id");
        unitId.setValue(new YangUInt16(unitIdValue));
        insertChild(unitId, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeGAspInstance clone() {
        MmeGAspInstance copy;
        try {
            copy = new MmeGAspInstance(getUnitIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeGAspInstance)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeGAspInstance cloneShallow() {
        MmeGAspInstance copy;
        try {
            copy = new MmeGAspInstance(getUnitIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeGAspInstance)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "unit-id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "unit-id",
            "routing-instance",
            "ip-address",
            "app-server-name",
            "port",
        };
    }

    /* Access methods for leaf child: "unit-id". */

    /**
     * Gets the value for child leaf "unit-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getUnitIdValue() throws JNCException {
        return (YangUInt16)getValue("unit-id");
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using instance of generated typedef class.
     * @param unitIdValue The value to set.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(YangUInt16 unitIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-id",
            unitIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using Java primitive values.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(int unitIdValue) throws JNCException {
        setUnitIdValue(new YangUInt16(unitIdValue));
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using a String value.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(String unitIdValue) throws JNCException {
        setUnitIdValue(new YangUInt16(unitIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-id" leaf will not have a value.
     */
    public void addUnitId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "routing-instance". */

    /**
     * Gets the value for child leaf "routing-instance".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstanceValue() throws JNCException {
        return (YangString)getValue("routing-instance");
    }

    /**
     * Sets the value for child leaf "routing-instance",
     * using instance of generated typedef class.
     * @param routingInstanceValue The value to set.
     * @param routingInstanceValue used during instantiation.
     */
    public void setRoutingInstanceValue(YangString routingInstanceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance",
            routingInstanceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance",
     * using a String value.
     * @param routingInstanceValue used during instantiation.
     */
    public void setRoutingInstanceValue(String routingInstanceValue)
            throws JNCException {
        setRoutingInstanceValue(new YangString(routingInstanceValue));
    }

    /**
     * Unsets the value for child leaf "routing-instance".
     */
    public void unsetRoutingInstanceValue() throws JNCException {
        delete("routing-instance");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance" leaf will not have a value.
     */
    public void addRoutingInstance() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance" with operation "replace".
     */
    public void markRoutingInstanceReplace() throws JNCException {
        markLeafReplace("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "merge".
     */
    public void markRoutingInstanceMerge() throws JNCException {
        markLeafMerge("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "create".
     */
    public void markRoutingInstanceCreate() throws JNCException {
        markLeafCreate("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "delete".
     */
    public void markRoutingInstanceDelete() throws JNCException {
        markLeafDelete("routingInstance");
    }

    /* Access methods for optional leaf child: "ip-address". */

    /**
     * Gets the value for child leaf "ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddressValue() throws JNCException {
        return (IpAddress)getValue("ip-address");
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a JNC type value.
     * @param ipAddressValue The value to set.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(IpAddress ipAddressValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            ipAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a String value.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(String ipAddressValue) throws JNCException {
        setIpAddressValue(new IpAddress(ipAddressValue));
    }

    /**
     * Unsets the value for child leaf "ip-address".
     */
    public void unsetIpAddressValue() throws JNCException {
        delete("ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address" leaf will not have a value.
     */
    public void addIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address" with operation "replace".
     */
    public void markIpAddressReplace() throws JNCException {
        markLeafReplace("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "merge".
     */
    public void markIpAddressMerge() throws JNCException {
        markLeafMerge("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "create".
     */
    public void markIpAddressCreate() throws JNCException {
        markLeafCreate("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "delete".
     */
    public void markIpAddressDelete() throws JNCException {
        markLeafDelete("ipAddress");
    }

    /* Access methods for optional leaf child: "app-server-name". */

    /**
     * Gets the value for child leaf "app-server-name".
     * @return The value of the leaf.
     */
    public YangString getAppServerNameValue() throws JNCException {
        return (YangString)getValue("app-server-name");
    }

    /**
     * Sets the value for child leaf "app-server-name",
     * using instance of generated typedef class.
     * @param appServerNameValue The value to set.
     * @param appServerNameValue used during instantiation.
     */
    public void setAppServerNameValue(YangString appServerNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "app-server-name",
            appServerNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "app-server-name",
     * using a String value.
     * @param appServerNameValue used during instantiation.
     */
    public void setAppServerNameValue(String appServerNameValue)
            throws JNCException {
        setAppServerNameValue(new YangString(appServerNameValue));
    }

    /**
     * Unsets the value for child leaf "app-server-name".
     */
    public void unsetAppServerNameValue() throws JNCException {
        delete("app-server-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "app-server-name" leaf will not have a value.
     */
    public void addAppServerName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "app-server-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "app-server-name" with operation "replace".
     */
    public void markAppServerNameReplace() throws JNCException {
        markLeafReplace("appServerName");
    }

    /**
     * Marks the leaf "app-server-name" with operation "merge".
     */
    public void markAppServerNameMerge() throws JNCException {
        markLeafMerge("appServerName");
    }

    /**
     * Marks the leaf "app-server-name" with operation "create".
     */
    public void markAppServerNameCreate() throws JNCException {
        markLeafCreate("appServerName");
    }

    /**
     * Marks the leaf "app-server-name" with operation "delete".
     */
    public void markAppServerNameDelete() throws JNCException {
        markLeafDelete("appServerName");
    }

    /* Access methods for optional leaf child: "port". */

    /**
     * Gets the value for child leaf "port".
     * @return The value of the leaf.
     */
    public YangUInt16 getPortValue() throws JNCException {
        return (YangUInt16)getValue("port");
    }

    /**
     * Sets the value for child leaf "port",
     * using instance of generated typedef class.
     * @param portValue The value to set.
     * @param portValue used during instantiation.
     */
    public void setPortValue(YangUInt16 portValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port",
            portValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "port",
     * using Java primitive values.
     * @param portValue used during instantiation.
     */
    public void setPortValue(int portValue) throws JNCException {
        setPortValue(new YangUInt16(portValue));
    }

    /**
     * Sets the value for child leaf "port",
     * using a String value.
     * @param portValue used during instantiation.
     */
    public void setPortValue(String portValue) throws JNCException {
        setPortValue(new YangUInt16(portValue));
    }

    /**
     * Unsets the value for child leaf "port".
     */
    public void unsetPortValue() throws JNCException {
        delete("port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "port" leaf will not have a value.
     */
    public void addPort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "port" with operation "replace".
     */
    public void markPortReplace() throws JNCException {
        markLeafReplace("port");
    }

    /**
     * Marks the leaf "port" with operation "merge".
     */
    public void markPortMerge() throws JNCException {
        markLeafMerge("port");
    }

    /**
     * Marks the leaf "port" with operation "create".
     */
    public void markPortCreate() throws JNCException {
        markLeafCreate("port");
    }

    /**
     * Marks the leaf "port" with operation "delete".
     */
    public void markPortDelete() throws JNCException {
        markLeafDelete("port");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
