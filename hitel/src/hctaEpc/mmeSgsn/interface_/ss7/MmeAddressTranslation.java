/* 
 * @(#)MmeAddressTranslation.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.ss7;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/ss7/mme-address-translation"
 * <p>
 * See line 1733 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeAddressTranslation extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeAddressTranslation object.
     */
    public MmeAddressTranslation() {
        super(Epc.NAMESPACE, "mme-address-translation");
    }

    /**
     * Constructor for an initialized MmeAddressTranslation object,
     * 
     * @param plmnIdValue Key argument of child.
     */
    public MmeAddressTranslation(YangString plmnIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-address-translation");
        Leaf plmnId = new Leaf(Epc.NAMESPACE, "plmn-id");
        plmnId.setValue(plmnIdValue);
        insertChild(plmnId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeAddressTranslation object,
     * with String keys.
     * @param plmnIdValue Key argument of child.
     */
    public MmeAddressTranslation(String plmnIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-address-translation");
        Leaf plmnId = new Leaf(Epc.NAMESPACE, "plmn-id");
        plmnId.setValue(new YangString(plmnIdValue));
        insertChild(plmnId, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeAddressTranslation clone() {
        MmeAddressTranslation copy;
        try {
            copy = new MmeAddressTranslation(getPlmnIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeAddressTranslation)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeAddressTranslation cloneShallow() {
        MmeAddressTranslation copy;
        try {
            copy = new MmeAddressTranslation(getPlmnIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeAddressTranslation)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "plmn-id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "plmn-id",
            "country-code",
            "network-code",
        };
    }

    /* Access methods for leaf child: "plmn-id". */

    /**
     * Gets the value for child leaf "plmn-id".
     * @return The value of the leaf.
     */
    public YangString getPlmnIdValue() throws JNCException {
        return (YangString)getValue("plmn-id");
    }

    /**
     * Sets the value for child leaf "plmn-id",
     * using instance of generated typedef class.
     * @param plmnIdValue The value to set.
     * @param plmnIdValue used during instantiation.
     */
    public void setPlmnIdValue(YangString plmnIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-id",
            plmnIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "plmn-id",
     * using a String value.
     * @param plmnIdValue used during instantiation.
     */
    public void setPlmnIdValue(String plmnIdValue) throws JNCException {
        setPlmnIdValue(new YangString(plmnIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "plmn-id" leaf will not have a value.
     */
    public void addPlmnId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "country-code". */

    /**
     * Gets the value for child leaf "country-code".
     * @return The value of the leaf.
     */
    public YangString getCountryCodeValue() throws JNCException {
        return (YangString)getValue("country-code");
    }

    /**
     * Sets the value for child leaf "country-code",
     * using instance of generated typedef class.
     * @param countryCodeValue The value to set.
     * @param countryCodeValue used during instantiation.
     */
    public void setCountryCodeValue(YangString countryCodeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "country-code",
            countryCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "country-code",
     * using a String value.
     * @param countryCodeValue used during instantiation.
     */
    public void setCountryCodeValue(String countryCodeValue)
            throws JNCException {
        setCountryCodeValue(new YangString(countryCodeValue));
    }

    /**
     * Unsets the value for child leaf "country-code".
     */
    public void unsetCountryCodeValue() throws JNCException {
        delete("country-code");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "country-code" leaf will not have a value.
     */
    public void addCountryCode() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "country-code",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "country-code" with operation "replace".
     */
    public void markCountryCodeReplace() throws JNCException {
        markLeafReplace("countryCode");
    }

    /**
     * Marks the leaf "country-code" with operation "merge".
     */
    public void markCountryCodeMerge() throws JNCException {
        markLeafMerge("countryCode");
    }

    /**
     * Marks the leaf "country-code" with operation "create".
     */
    public void markCountryCodeCreate() throws JNCException {
        markLeafCreate("countryCode");
    }

    /**
     * Marks the leaf "country-code" with operation "delete".
     */
    public void markCountryCodeDelete() throws JNCException {
        markLeafDelete("countryCode");
    }

    /* Access methods for optional leaf child: "network-code". */

    /**
     * Gets the value for child leaf "network-code".
     * @return The value of the leaf.
     */
    public YangString getNetworkCodeValue() throws JNCException {
        return (YangString)getValue("network-code");
    }

    /**
     * Sets the value for child leaf "network-code",
     * using instance of generated typedef class.
     * @param networkCodeValue The value to set.
     * @param networkCodeValue used during instantiation.
     */
    public void setNetworkCodeValue(YangString networkCodeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "network-code",
            networkCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "network-code",
     * using a String value.
     * @param networkCodeValue used during instantiation.
     */
    public void setNetworkCodeValue(String networkCodeValue)
            throws JNCException {
        setNetworkCodeValue(new YangString(networkCodeValue));
    }

    /**
     * Unsets the value for child leaf "network-code".
     */
    public void unsetNetworkCodeValue() throws JNCException {
        delete("network-code");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "network-code" leaf will not have a value.
     */
    public void addNetworkCode() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "network-code",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "network-code" with operation "replace".
     */
    public void markNetworkCodeReplace() throws JNCException {
        markLeafReplace("networkCode");
    }

    /**
     * Marks the leaf "network-code" with operation "merge".
     */
    public void markNetworkCodeMerge() throws JNCException {
        markLeafMerge("networkCode");
    }

    /**
     * Marks the leaf "network-code" with operation "create".
     */
    public void markNetworkCodeCreate() throws JNCException {
        markLeafCreate("networkCode");
    }

    /**
     * Marks the leaf "network-code" with operation "delete".
     */
    public void markNetworkCodeDelete() throws JNCException {
        markLeafDelete("networkCode");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
