/* 
 * @(#)RemoteSubsystem.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.ss7;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/ss7/remote-subsystem"
 * <p>
 * See line 395 in
 * sigtranCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class RemoteSubsystem extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty RemoteSubsystem object.
     */
    public RemoteSubsystem() {
        super(Epc.NAMESPACE, "remote-subsystem");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public RemoteSubsystem clone() {
        return (RemoteSubsystem)cloneContent(new RemoteSubsystem());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public RemoteSubsystem cloneShallow() {
        return (RemoteSubsystem)cloneShallowContent(new RemoteSubsystem());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "destination-point-code",
            "remote-subsystem-num",
            "location",
            "service",
            "state",
            "ludt-rx",
            "xudt-rx",
            "udts-rx",
            "udt-rx",
            "xudts-tx",
            "xudts-rx",
            "ludts-tx",
            "ludts-rx",
            "udt-tx",
            "udts-tx",
            "xudt-tx",
            "ludt-tx",
            "routing-failures",
            "trans-from-allowed-to-prohib",
        };
    }

    /* Access methods for optional leaf child: "destination-point-code". */

    /**
     * Gets the value for child leaf "destination-point-code".
     * @return The value of the leaf.
     */
    public YangString getDestinationPointCodeValue() throws JNCException {
        return (YangString)getValue("destination-point-code");
    }

    /**
     * Sets the value for child leaf "destination-point-code",
     * using instance of generated typedef class.
     * @param destinationPointCodeValue The value to set.
     * @param destinationPointCodeValue used during instantiation.
     */
    public void setDestinationPointCodeValue(YangString destinationPointCodeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "destination-point-code",
            destinationPointCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "destination-point-code",
     * using a String value.
     * @param destinationPointCodeValue used during instantiation.
     */
    public void setDestinationPointCodeValue(String destinationPointCodeValue)
            throws JNCException {
        setDestinationPointCodeValue(new YangString(destinationPointCodeValue));
    }

    /**
     * Unsets the value for child leaf "destination-point-code".
     */
    public void unsetDestinationPointCodeValue() throws JNCException {
        delete("destination-point-code");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "destination-point-code" leaf will not have a value.
     */
    public void addDestinationPointCode() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "destination-point-code",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "destination-point-code" with operation "replace".
     */
    public void markDestinationPointCodeReplace() throws JNCException {
        markLeafReplace("destinationPointCode");
    }

    /**
     * Marks the leaf "destination-point-code" with operation "merge".
     */
    public void markDestinationPointCodeMerge() throws JNCException {
        markLeafMerge("destinationPointCode");
    }

    /**
     * Marks the leaf "destination-point-code" with operation "create".
     */
    public void markDestinationPointCodeCreate() throws JNCException {
        markLeafCreate("destinationPointCode");
    }

    /**
     * Marks the leaf "destination-point-code" with operation "delete".
     */
    public void markDestinationPointCodeDelete() throws JNCException {
        markLeafDelete("destinationPointCode");
    }

    /* Access methods for optional leaf child: "remote-subsystem-num". */

    /**
     * Gets the value for child leaf "remote-subsystem-num".
     * @return The value of the leaf.
     */
    public YangUInt8 getRemoteSubsystemNumValue() throws JNCException {
        return (YangUInt8)getValue("remote-subsystem-num");
    }

    /**
     * Sets the value for child leaf "remote-subsystem-num",
     * using instance of generated typedef class.
     * @param remoteSubsystemNumValue The value to set.
     * @param remoteSubsystemNumValue used during instantiation.
     */
    public void setRemoteSubsystemNumValue(YangUInt8 remoteSubsystemNumValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-subsystem-num",
            remoteSubsystemNumValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "remote-subsystem-num",
     * using Java primitive values.
     * @param remoteSubsystemNumValue used during instantiation.
     */
    public void setRemoteSubsystemNumValue(short remoteSubsystemNumValue)
            throws JNCException {
        setRemoteSubsystemNumValue(new YangUInt8(remoteSubsystemNumValue));
    }

    /**
     * Sets the value for child leaf "remote-subsystem-num",
     * using a String value.
     * @param remoteSubsystemNumValue used during instantiation.
     */
    public void setRemoteSubsystemNumValue(String remoteSubsystemNumValue)
            throws JNCException {
        setRemoteSubsystemNumValue(new YangUInt8(remoteSubsystemNumValue));
    }

    /**
     * Unsets the value for child leaf "remote-subsystem-num".
     */
    public void unsetRemoteSubsystemNumValue() throws JNCException {
        delete("remote-subsystem-num");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "remote-subsystem-num" leaf will not have a value.
     */
    public void addRemoteSubsystemNum() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-subsystem-num",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "remote-subsystem-num" with operation "replace".
     */
    public void markRemoteSubsystemNumReplace() throws JNCException {
        markLeafReplace("remoteSubsystemNum");
    }

    /**
     * Marks the leaf "remote-subsystem-num" with operation "merge".
     */
    public void markRemoteSubsystemNumMerge() throws JNCException {
        markLeafMerge("remoteSubsystemNum");
    }

    /**
     * Marks the leaf "remote-subsystem-num" with operation "create".
     */
    public void markRemoteSubsystemNumCreate() throws JNCException {
        markLeafCreate("remoteSubsystemNum");
    }

    /**
     * Marks the leaf "remote-subsystem-num" with operation "delete".
     */
    public void markRemoteSubsystemNumDelete() throws JNCException {
        markLeafDelete("remoteSubsystemNum");
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "state". */

    /**
     * Gets the value for child leaf "state".
     * @return The value of the leaf.
     */
    public YangString getStateValue() throws JNCException {
        return (YangString)getValue("state");
    }

    /**
     * Sets the value for child leaf "state",
     * using instance of generated typedef class.
     * @param stateValue The value to set.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(YangString stateValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "state",
            stateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "state",
     * using a String value.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(String stateValue) throws JNCException {
        setStateValue(new YangString(stateValue));
    }

    /**
     * Unsets the value for child leaf "state".
     */
    public void unsetStateValue() throws JNCException {
        delete("state");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "state" leaf will not have a value.
     */
    public void addState() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "state",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "state" with operation "replace".
     */
    public void markStateReplace() throws JNCException {
        markLeafReplace("state");
    }

    /**
     * Marks the leaf "state" with operation "merge".
     */
    public void markStateMerge() throws JNCException {
        markLeafMerge("state");
    }

    /**
     * Marks the leaf "state" with operation "create".
     */
    public void markStateCreate() throws JNCException {
        markLeafCreate("state");
    }

    /**
     * Marks the leaf "state" with operation "delete".
     */
    public void markStateDelete() throws JNCException {
        markLeafDelete("state");
    }

    /* Access methods for optional leaf child: "ludt-rx". */

    /**
     * Gets the value for child leaf "ludt-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getLudtRxValue() throws JNCException {
        return (YangUInt32)getValue("ludt-rx");
    }

    /**
     * Sets the value for child leaf "ludt-rx",
     * using instance of generated typedef class.
     * @param ludtRxValue The value to set.
     * @param ludtRxValue used during instantiation.
     */
    public void setLudtRxValue(YangUInt32 ludtRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ludt-rx",
            ludtRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ludt-rx",
     * using Java primitive values.
     * @param ludtRxValue used during instantiation.
     */
    public void setLudtRxValue(long ludtRxValue) throws JNCException {
        setLudtRxValue(new YangUInt32(ludtRxValue));
    }

    /**
     * Sets the value for child leaf "ludt-rx",
     * using a String value.
     * @param ludtRxValue used during instantiation.
     */
    public void setLudtRxValue(String ludtRxValue) throws JNCException {
        setLudtRxValue(new YangUInt32(ludtRxValue));
    }

    /**
     * Unsets the value for child leaf "ludt-rx".
     */
    public void unsetLudtRxValue() throws JNCException {
        delete("ludt-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ludt-rx" leaf will not have a value.
     */
    public void addLudtRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ludt-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ludt-rx" with operation "replace".
     */
    public void markLudtRxReplace() throws JNCException {
        markLeafReplace("ludtRx");
    }

    /**
     * Marks the leaf "ludt-rx" with operation "merge".
     */
    public void markLudtRxMerge() throws JNCException {
        markLeafMerge("ludtRx");
    }

    /**
     * Marks the leaf "ludt-rx" with operation "create".
     */
    public void markLudtRxCreate() throws JNCException {
        markLeafCreate("ludtRx");
    }

    /**
     * Marks the leaf "ludt-rx" with operation "delete".
     */
    public void markLudtRxDelete() throws JNCException {
        markLeafDelete("ludtRx");
    }

    /* Access methods for optional leaf child: "xudt-rx". */

    /**
     * Gets the value for child leaf "xudt-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getXudtRxValue() throws JNCException {
        return (YangUInt32)getValue("xudt-rx");
    }

    /**
     * Sets the value for child leaf "xudt-rx",
     * using instance of generated typedef class.
     * @param xudtRxValue The value to set.
     * @param xudtRxValue used during instantiation.
     */
    public void setXudtRxValue(YangUInt32 xudtRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "xudt-rx",
            xudtRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "xudt-rx",
     * using Java primitive values.
     * @param xudtRxValue used during instantiation.
     */
    public void setXudtRxValue(long xudtRxValue) throws JNCException {
        setXudtRxValue(new YangUInt32(xudtRxValue));
    }

    /**
     * Sets the value for child leaf "xudt-rx",
     * using a String value.
     * @param xudtRxValue used during instantiation.
     */
    public void setXudtRxValue(String xudtRxValue) throws JNCException {
        setXudtRxValue(new YangUInt32(xudtRxValue));
    }

    /**
     * Unsets the value for child leaf "xudt-rx".
     */
    public void unsetXudtRxValue() throws JNCException {
        delete("xudt-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "xudt-rx" leaf will not have a value.
     */
    public void addXudtRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "xudt-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "xudt-rx" with operation "replace".
     */
    public void markXudtRxReplace() throws JNCException {
        markLeafReplace("xudtRx");
    }

    /**
     * Marks the leaf "xudt-rx" with operation "merge".
     */
    public void markXudtRxMerge() throws JNCException {
        markLeafMerge("xudtRx");
    }

    /**
     * Marks the leaf "xudt-rx" with operation "create".
     */
    public void markXudtRxCreate() throws JNCException {
        markLeafCreate("xudtRx");
    }

    /**
     * Marks the leaf "xudt-rx" with operation "delete".
     */
    public void markXudtRxDelete() throws JNCException {
        markLeafDelete("xudtRx");
    }

    /* Access methods for optional leaf child: "udts-rx". */

    /**
     * Gets the value for child leaf "udts-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUdtsRxValue() throws JNCException {
        return (YangUInt32)getValue("udts-rx");
    }

    /**
     * Sets the value for child leaf "udts-rx",
     * using instance of generated typedef class.
     * @param udtsRxValue The value to set.
     * @param udtsRxValue used during instantiation.
     */
    public void setUdtsRxValue(YangUInt32 udtsRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "udts-rx",
            udtsRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "udts-rx",
     * using Java primitive values.
     * @param udtsRxValue used during instantiation.
     */
    public void setUdtsRxValue(long udtsRxValue) throws JNCException {
        setUdtsRxValue(new YangUInt32(udtsRxValue));
    }

    /**
     * Sets the value for child leaf "udts-rx",
     * using a String value.
     * @param udtsRxValue used during instantiation.
     */
    public void setUdtsRxValue(String udtsRxValue) throws JNCException {
        setUdtsRxValue(new YangUInt32(udtsRxValue));
    }

    /**
     * Unsets the value for child leaf "udts-rx".
     */
    public void unsetUdtsRxValue() throws JNCException {
        delete("udts-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "udts-rx" leaf will not have a value.
     */
    public void addUdtsRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "udts-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "udts-rx" with operation "replace".
     */
    public void markUdtsRxReplace() throws JNCException {
        markLeafReplace("udtsRx");
    }

    /**
     * Marks the leaf "udts-rx" with operation "merge".
     */
    public void markUdtsRxMerge() throws JNCException {
        markLeafMerge("udtsRx");
    }

    /**
     * Marks the leaf "udts-rx" with operation "create".
     */
    public void markUdtsRxCreate() throws JNCException {
        markLeafCreate("udtsRx");
    }

    /**
     * Marks the leaf "udts-rx" with operation "delete".
     */
    public void markUdtsRxDelete() throws JNCException {
        markLeafDelete("udtsRx");
    }

    /* Access methods for optional leaf child: "udt-rx". */

    /**
     * Gets the value for child leaf "udt-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUdtRxValue() throws JNCException {
        return (YangUInt32)getValue("udt-rx");
    }

    /**
     * Sets the value for child leaf "udt-rx",
     * using instance of generated typedef class.
     * @param udtRxValue The value to set.
     * @param udtRxValue used during instantiation.
     */
    public void setUdtRxValue(YangUInt32 udtRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "udt-rx",
            udtRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "udt-rx",
     * using Java primitive values.
     * @param udtRxValue used during instantiation.
     */
    public void setUdtRxValue(long udtRxValue) throws JNCException {
        setUdtRxValue(new YangUInt32(udtRxValue));
    }

    /**
     * Sets the value for child leaf "udt-rx",
     * using a String value.
     * @param udtRxValue used during instantiation.
     */
    public void setUdtRxValue(String udtRxValue) throws JNCException {
        setUdtRxValue(new YangUInt32(udtRxValue));
    }

    /**
     * Unsets the value for child leaf "udt-rx".
     */
    public void unsetUdtRxValue() throws JNCException {
        delete("udt-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "udt-rx" leaf will not have a value.
     */
    public void addUdtRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "udt-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "udt-rx" with operation "replace".
     */
    public void markUdtRxReplace() throws JNCException {
        markLeafReplace("udtRx");
    }

    /**
     * Marks the leaf "udt-rx" with operation "merge".
     */
    public void markUdtRxMerge() throws JNCException {
        markLeafMerge("udtRx");
    }

    /**
     * Marks the leaf "udt-rx" with operation "create".
     */
    public void markUdtRxCreate() throws JNCException {
        markLeafCreate("udtRx");
    }

    /**
     * Marks the leaf "udt-rx" with operation "delete".
     */
    public void markUdtRxDelete() throws JNCException {
        markLeafDelete("udtRx");
    }

    /* Access methods for optional leaf child: "xudts-tx". */

    /**
     * Gets the value for child leaf "xudts-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getXudtsTxValue() throws JNCException {
        return (YangUInt32)getValue("xudts-tx");
    }

    /**
     * Sets the value for child leaf "xudts-tx",
     * using instance of generated typedef class.
     * @param xudtsTxValue The value to set.
     * @param xudtsTxValue used during instantiation.
     */
    public void setXudtsTxValue(YangUInt32 xudtsTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "xudts-tx",
            xudtsTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "xudts-tx",
     * using Java primitive values.
     * @param xudtsTxValue used during instantiation.
     */
    public void setXudtsTxValue(long xudtsTxValue) throws JNCException {
        setXudtsTxValue(new YangUInt32(xudtsTxValue));
    }

    /**
     * Sets the value for child leaf "xudts-tx",
     * using a String value.
     * @param xudtsTxValue used during instantiation.
     */
    public void setXudtsTxValue(String xudtsTxValue) throws JNCException {
        setXudtsTxValue(new YangUInt32(xudtsTxValue));
    }

    /**
     * Unsets the value for child leaf "xudts-tx".
     */
    public void unsetXudtsTxValue() throws JNCException {
        delete("xudts-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "xudts-tx" leaf will not have a value.
     */
    public void addXudtsTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "xudts-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "xudts-tx" with operation "replace".
     */
    public void markXudtsTxReplace() throws JNCException {
        markLeafReplace("xudtsTx");
    }

    /**
     * Marks the leaf "xudts-tx" with operation "merge".
     */
    public void markXudtsTxMerge() throws JNCException {
        markLeafMerge("xudtsTx");
    }

    /**
     * Marks the leaf "xudts-tx" with operation "create".
     */
    public void markXudtsTxCreate() throws JNCException {
        markLeafCreate("xudtsTx");
    }

    /**
     * Marks the leaf "xudts-tx" with operation "delete".
     */
    public void markXudtsTxDelete() throws JNCException {
        markLeafDelete("xudtsTx");
    }

    /* Access methods for optional leaf child: "xudts-rx". */

    /**
     * Gets the value for child leaf "xudts-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getXudtsRxValue() throws JNCException {
        return (YangUInt32)getValue("xudts-rx");
    }

    /**
     * Sets the value for child leaf "xudts-rx",
     * using instance of generated typedef class.
     * @param xudtsRxValue The value to set.
     * @param xudtsRxValue used during instantiation.
     */
    public void setXudtsRxValue(YangUInt32 xudtsRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "xudts-rx",
            xudtsRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "xudts-rx",
     * using Java primitive values.
     * @param xudtsRxValue used during instantiation.
     */
    public void setXudtsRxValue(long xudtsRxValue) throws JNCException {
        setXudtsRxValue(new YangUInt32(xudtsRxValue));
    }

    /**
     * Sets the value for child leaf "xudts-rx",
     * using a String value.
     * @param xudtsRxValue used during instantiation.
     */
    public void setXudtsRxValue(String xudtsRxValue) throws JNCException {
        setXudtsRxValue(new YangUInt32(xudtsRxValue));
    }

    /**
     * Unsets the value for child leaf "xudts-rx".
     */
    public void unsetXudtsRxValue() throws JNCException {
        delete("xudts-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "xudts-rx" leaf will not have a value.
     */
    public void addXudtsRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "xudts-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "xudts-rx" with operation "replace".
     */
    public void markXudtsRxReplace() throws JNCException {
        markLeafReplace("xudtsRx");
    }

    /**
     * Marks the leaf "xudts-rx" with operation "merge".
     */
    public void markXudtsRxMerge() throws JNCException {
        markLeafMerge("xudtsRx");
    }

    /**
     * Marks the leaf "xudts-rx" with operation "create".
     */
    public void markXudtsRxCreate() throws JNCException {
        markLeafCreate("xudtsRx");
    }

    /**
     * Marks the leaf "xudts-rx" with operation "delete".
     */
    public void markXudtsRxDelete() throws JNCException {
        markLeafDelete("xudtsRx");
    }

    /* Access methods for optional leaf child: "ludts-tx". */

    /**
     * Gets the value for child leaf "ludts-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getLudtsTxValue() throws JNCException {
        return (YangUInt32)getValue("ludts-tx");
    }

    /**
     * Sets the value for child leaf "ludts-tx",
     * using instance of generated typedef class.
     * @param ludtsTxValue The value to set.
     * @param ludtsTxValue used during instantiation.
     */
    public void setLudtsTxValue(YangUInt32 ludtsTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ludts-tx",
            ludtsTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ludts-tx",
     * using Java primitive values.
     * @param ludtsTxValue used during instantiation.
     */
    public void setLudtsTxValue(long ludtsTxValue) throws JNCException {
        setLudtsTxValue(new YangUInt32(ludtsTxValue));
    }

    /**
     * Sets the value for child leaf "ludts-tx",
     * using a String value.
     * @param ludtsTxValue used during instantiation.
     */
    public void setLudtsTxValue(String ludtsTxValue) throws JNCException {
        setLudtsTxValue(new YangUInt32(ludtsTxValue));
    }

    /**
     * Unsets the value for child leaf "ludts-tx".
     */
    public void unsetLudtsTxValue() throws JNCException {
        delete("ludts-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ludts-tx" leaf will not have a value.
     */
    public void addLudtsTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ludts-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ludts-tx" with operation "replace".
     */
    public void markLudtsTxReplace() throws JNCException {
        markLeafReplace("ludtsTx");
    }

    /**
     * Marks the leaf "ludts-tx" with operation "merge".
     */
    public void markLudtsTxMerge() throws JNCException {
        markLeafMerge("ludtsTx");
    }

    /**
     * Marks the leaf "ludts-tx" with operation "create".
     */
    public void markLudtsTxCreate() throws JNCException {
        markLeafCreate("ludtsTx");
    }

    /**
     * Marks the leaf "ludts-tx" with operation "delete".
     */
    public void markLudtsTxDelete() throws JNCException {
        markLeafDelete("ludtsTx");
    }

    /* Access methods for optional leaf child: "ludts-rx". */

    /**
     * Gets the value for child leaf "ludts-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getLudtsRxValue() throws JNCException {
        return (YangUInt32)getValue("ludts-rx");
    }

    /**
     * Sets the value for child leaf "ludts-rx",
     * using instance of generated typedef class.
     * @param ludtsRxValue The value to set.
     * @param ludtsRxValue used during instantiation.
     */
    public void setLudtsRxValue(YangUInt32 ludtsRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ludts-rx",
            ludtsRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ludts-rx",
     * using Java primitive values.
     * @param ludtsRxValue used during instantiation.
     */
    public void setLudtsRxValue(long ludtsRxValue) throws JNCException {
        setLudtsRxValue(new YangUInt32(ludtsRxValue));
    }

    /**
     * Sets the value for child leaf "ludts-rx",
     * using a String value.
     * @param ludtsRxValue used during instantiation.
     */
    public void setLudtsRxValue(String ludtsRxValue) throws JNCException {
        setLudtsRxValue(new YangUInt32(ludtsRxValue));
    }

    /**
     * Unsets the value for child leaf "ludts-rx".
     */
    public void unsetLudtsRxValue() throws JNCException {
        delete("ludts-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ludts-rx" leaf will not have a value.
     */
    public void addLudtsRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ludts-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ludts-rx" with operation "replace".
     */
    public void markLudtsRxReplace() throws JNCException {
        markLeafReplace("ludtsRx");
    }

    /**
     * Marks the leaf "ludts-rx" with operation "merge".
     */
    public void markLudtsRxMerge() throws JNCException {
        markLeafMerge("ludtsRx");
    }

    /**
     * Marks the leaf "ludts-rx" with operation "create".
     */
    public void markLudtsRxCreate() throws JNCException {
        markLeafCreate("ludtsRx");
    }

    /**
     * Marks the leaf "ludts-rx" with operation "delete".
     */
    public void markLudtsRxDelete() throws JNCException {
        markLeafDelete("ludtsRx");
    }

    /* Access methods for optional leaf child: "udt-tx". */

    /**
     * Gets the value for child leaf "udt-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUdtTxValue() throws JNCException {
        return (YangUInt32)getValue("udt-tx");
    }

    /**
     * Sets the value for child leaf "udt-tx",
     * using instance of generated typedef class.
     * @param udtTxValue The value to set.
     * @param udtTxValue used during instantiation.
     */
    public void setUdtTxValue(YangUInt32 udtTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "udt-tx",
            udtTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "udt-tx",
     * using Java primitive values.
     * @param udtTxValue used during instantiation.
     */
    public void setUdtTxValue(long udtTxValue) throws JNCException {
        setUdtTxValue(new YangUInt32(udtTxValue));
    }

    /**
     * Sets the value for child leaf "udt-tx",
     * using a String value.
     * @param udtTxValue used during instantiation.
     */
    public void setUdtTxValue(String udtTxValue) throws JNCException {
        setUdtTxValue(new YangUInt32(udtTxValue));
    }

    /**
     * Unsets the value for child leaf "udt-tx".
     */
    public void unsetUdtTxValue() throws JNCException {
        delete("udt-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "udt-tx" leaf will not have a value.
     */
    public void addUdtTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "udt-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "udt-tx" with operation "replace".
     */
    public void markUdtTxReplace() throws JNCException {
        markLeafReplace("udtTx");
    }

    /**
     * Marks the leaf "udt-tx" with operation "merge".
     */
    public void markUdtTxMerge() throws JNCException {
        markLeafMerge("udtTx");
    }

    /**
     * Marks the leaf "udt-tx" with operation "create".
     */
    public void markUdtTxCreate() throws JNCException {
        markLeafCreate("udtTx");
    }

    /**
     * Marks the leaf "udt-tx" with operation "delete".
     */
    public void markUdtTxDelete() throws JNCException {
        markLeafDelete("udtTx");
    }

    /* Access methods for optional leaf child: "udts-tx". */

    /**
     * Gets the value for child leaf "udts-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUdtsTxValue() throws JNCException {
        return (YangUInt32)getValue("udts-tx");
    }

    /**
     * Sets the value for child leaf "udts-tx",
     * using instance of generated typedef class.
     * @param udtsTxValue The value to set.
     * @param udtsTxValue used during instantiation.
     */
    public void setUdtsTxValue(YangUInt32 udtsTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "udts-tx",
            udtsTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "udts-tx",
     * using Java primitive values.
     * @param udtsTxValue used during instantiation.
     */
    public void setUdtsTxValue(long udtsTxValue) throws JNCException {
        setUdtsTxValue(new YangUInt32(udtsTxValue));
    }

    /**
     * Sets the value for child leaf "udts-tx",
     * using a String value.
     * @param udtsTxValue used during instantiation.
     */
    public void setUdtsTxValue(String udtsTxValue) throws JNCException {
        setUdtsTxValue(new YangUInt32(udtsTxValue));
    }

    /**
     * Unsets the value for child leaf "udts-tx".
     */
    public void unsetUdtsTxValue() throws JNCException {
        delete("udts-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "udts-tx" leaf will not have a value.
     */
    public void addUdtsTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "udts-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "udts-tx" with operation "replace".
     */
    public void markUdtsTxReplace() throws JNCException {
        markLeafReplace("udtsTx");
    }

    /**
     * Marks the leaf "udts-tx" with operation "merge".
     */
    public void markUdtsTxMerge() throws JNCException {
        markLeafMerge("udtsTx");
    }

    /**
     * Marks the leaf "udts-tx" with operation "create".
     */
    public void markUdtsTxCreate() throws JNCException {
        markLeafCreate("udtsTx");
    }

    /**
     * Marks the leaf "udts-tx" with operation "delete".
     */
    public void markUdtsTxDelete() throws JNCException {
        markLeafDelete("udtsTx");
    }

    /* Access methods for optional leaf child: "xudt-tx". */

    /**
     * Gets the value for child leaf "xudt-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getXudtTxValue() throws JNCException {
        return (YangUInt32)getValue("xudt-tx");
    }

    /**
     * Sets the value for child leaf "xudt-tx",
     * using instance of generated typedef class.
     * @param xudtTxValue The value to set.
     * @param xudtTxValue used during instantiation.
     */
    public void setXudtTxValue(YangUInt32 xudtTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "xudt-tx",
            xudtTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "xudt-tx",
     * using Java primitive values.
     * @param xudtTxValue used during instantiation.
     */
    public void setXudtTxValue(long xudtTxValue) throws JNCException {
        setXudtTxValue(new YangUInt32(xudtTxValue));
    }

    /**
     * Sets the value for child leaf "xudt-tx",
     * using a String value.
     * @param xudtTxValue used during instantiation.
     */
    public void setXudtTxValue(String xudtTxValue) throws JNCException {
        setXudtTxValue(new YangUInt32(xudtTxValue));
    }

    /**
     * Unsets the value for child leaf "xudt-tx".
     */
    public void unsetXudtTxValue() throws JNCException {
        delete("xudt-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "xudt-tx" leaf will not have a value.
     */
    public void addXudtTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "xudt-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "xudt-tx" with operation "replace".
     */
    public void markXudtTxReplace() throws JNCException {
        markLeafReplace("xudtTx");
    }

    /**
     * Marks the leaf "xudt-tx" with operation "merge".
     */
    public void markXudtTxMerge() throws JNCException {
        markLeafMerge("xudtTx");
    }

    /**
     * Marks the leaf "xudt-tx" with operation "create".
     */
    public void markXudtTxCreate() throws JNCException {
        markLeafCreate("xudtTx");
    }

    /**
     * Marks the leaf "xudt-tx" with operation "delete".
     */
    public void markXudtTxDelete() throws JNCException {
        markLeafDelete("xudtTx");
    }

    /* Access methods for optional leaf child: "ludt-tx". */

    /**
     * Gets the value for child leaf "ludt-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getLudtTxValue() throws JNCException {
        return (YangUInt32)getValue("ludt-tx");
    }

    /**
     * Sets the value for child leaf "ludt-tx",
     * using instance of generated typedef class.
     * @param ludtTxValue The value to set.
     * @param ludtTxValue used during instantiation.
     */
    public void setLudtTxValue(YangUInt32 ludtTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ludt-tx",
            ludtTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ludt-tx",
     * using Java primitive values.
     * @param ludtTxValue used during instantiation.
     */
    public void setLudtTxValue(long ludtTxValue) throws JNCException {
        setLudtTxValue(new YangUInt32(ludtTxValue));
    }

    /**
     * Sets the value for child leaf "ludt-tx",
     * using a String value.
     * @param ludtTxValue used during instantiation.
     */
    public void setLudtTxValue(String ludtTxValue) throws JNCException {
        setLudtTxValue(new YangUInt32(ludtTxValue));
    }

    /**
     * Unsets the value for child leaf "ludt-tx".
     */
    public void unsetLudtTxValue() throws JNCException {
        delete("ludt-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ludt-tx" leaf will not have a value.
     */
    public void addLudtTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ludt-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ludt-tx" with operation "replace".
     */
    public void markLudtTxReplace() throws JNCException {
        markLeafReplace("ludtTx");
    }

    /**
     * Marks the leaf "ludt-tx" with operation "merge".
     */
    public void markLudtTxMerge() throws JNCException {
        markLeafMerge("ludtTx");
    }

    /**
     * Marks the leaf "ludt-tx" with operation "create".
     */
    public void markLudtTxCreate() throws JNCException {
        markLeafCreate("ludtTx");
    }

    /**
     * Marks the leaf "ludt-tx" with operation "delete".
     */
    public void markLudtTxDelete() throws JNCException {
        markLeafDelete("ludtTx");
    }

    /* Access methods for optional leaf child: "routing-failures". */

    /**
     * Gets the value for child leaf "routing-failures".
     * @return The value of the leaf.
     */
    public YangUInt32 getRoutingFailuresValue() throws JNCException {
        return (YangUInt32)getValue("routing-failures");
    }

    /**
     * Sets the value for child leaf "routing-failures",
     * using instance of generated typedef class.
     * @param routingFailuresValue The value to set.
     * @param routingFailuresValue used during instantiation.
     */
    public void setRoutingFailuresValue(YangUInt32 routingFailuresValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-failures",
            routingFailuresValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-failures",
     * using Java primitive values.
     * @param routingFailuresValue used during instantiation.
     */
    public void setRoutingFailuresValue(long routingFailuresValue)
            throws JNCException {
        setRoutingFailuresValue(new YangUInt32(routingFailuresValue));
    }

    /**
     * Sets the value for child leaf "routing-failures",
     * using a String value.
     * @param routingFailuresValue used during instantiation.
     */
    public void setRoutingFailuresValue(String routingFailuresValue)
            throws JNCException {
        setRoutingFailuresValue(new YangUInt32(routingFailuresValue));
    }

    /**
     * Unsets the value for child leaf "routing-failures".
     */
    public void unsetRoutingFailuresValue() throws JNCException {
        delete("routing-failures");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-failures" leaf will not have a value.
     */
    public void addRoutingFailures() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-failures",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-failures" with operation "replace".
     */
    public void markRoutingFailuresReplace() throws JNCException {
        markLeafReplace("routingFailures");
    }

    /**
     * Marks the leaf "routing-failures" with operation "merge".
     */
    public void markRoutingFailuresMerge() throws JNCException {
        markLeafMerge("routingFailures");
    }

    /**
     * Marks the leaf "routing-failures" with operation "create".
     */
    public void markRoutingFailuresCreate() throws JNCException {
        markLeafCreate("routingFailures");
    }

    /**
     * Marks the leaf "routing-failures" with operation "delete".
     */
    public void markRoutingFailuresDelete() throws JNCException {
        markLeafDelete("routingFailures");
    }

    /* Access methods for optional leaf child: "trans-from-allowed-to-prohib". */

    /**
     * Gets the value for child leaf "trans-from-allowed-to-prohib".
     * @return The value of the leaf.
     */
    public YangUInt32 getTransFromAllowedToProhibValue() throws JNCException {
        return (YangUInt32)getValue("trans-from-allowed-to-prohib");
    }

    /**
     * Sets the value for child leaf "trans-from-allowed-to-prohib",
     * using instance of generated typedef class.
     * @param transFromAllowedToProhibValue The value to set.
     * @param transFromAllowedToProhibValue used during instantiation.
     */
    public void setTransFromAllowedToProhibValue(YangUInt32 transFromAllowedToProhibValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "trans-from-allowed-to-prohib",
            transFromAllowedToProhibValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "trans-from-allowed-to-prohib",
     * using Java primitive values.
     * @param transFromAllowedToProhibValue used during instantiation.
     */
    public void setTransFromAllowedToProhibValue(long transFromAllowedToProhibValue)
            throws JNCException {
        setTransFromAllowedToProhibValue(new YangUInt32(transFromAllowedToProhibValue));
    }

    /**
     * Sets the value for child leaf "trans-from-allowed-to-prohib",
     * using a String value.
     * @param transFromAllowedToProhibValue used during instantiation.
     */
    public void setTransFromAllowedToProhibValue(String transFromAllowedToProhibValue)
            throws JNCException {
        setTransFromAllowedToProhibValue(new YangUInt32(transFromAllowedToProhibValue));
    }

    /**
     * Unsets the value for child leaf "trans-from-allowed-to-prohib".
     */
    public void unsetTransFromAllowedToProhibValue() throws JNCException {
        delete("trans-from-allowed-to-prohib");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "trans-from-allowed-to-prohib" leaf will not have a value.
     */
    public void addTransFromAllowedToProhib() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "trans-from-allowed-to-prohib",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "trans-from-allowed-to-prohib" with operation "replace".
     */
    public void markTransFromAllowedToProhibReplace() throws JNCException {
        markLeafReplace("transFromAllowedToProhib");
    }

    /**
     * Marks the leaf "trans-from-allowed-to-prohib" with operation "merge".
     */
    public void markTransFromAllowedToProhibMerge() throws JNCException {
        markLeafMerge("transFromAllowedToProhib");
    }

    /**
     * Marks the leaf "trans-from-allowed-to-prohib" with operation "create".
     */
    public void markTransFromAllowedToProhibCreate() throws JNCException {
        markLeafCreate("transFromAllowedToProhib");
    }

    /**
     * Marks the leaf "trans-from-allowed-to-prohib" with operation "delete".
     */
    public void markTransFromAllowedToProhibDelete() throws JNCException {
        markLeafDelete("transFromAllowedToProhib");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
