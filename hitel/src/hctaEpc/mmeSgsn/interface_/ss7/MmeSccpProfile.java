/* 
 * @(#)MmeSccpProfile.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.ss7;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/ss7/mme-sccp-profile"
 * <p>
 * See line 49 in
 * sigtranConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeSccpProfile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeSccpProfile object.
     */
    public MmeSccpProfile() {
        super(Epc.NAMESPACE, "mme-sccp-profile");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeSccpProfile clone() {
        return (MmeSccpProfile)cloneContent(new MmeSccpProfile());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeSccpProfile cloneShallow() {
        return (MmeSccpProfile)cloneShallowContent(new MmeSccpProfile());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "stat-info-timer",
            "congestion-timer",
            "attack-timer",
            "decay-timer",
            "unknown-destination-alarm",
            "reassembly-timer",
        };
    }

    /* Access methods for optional leaf child: "stat-info-timer". */

    /**
     * Gets the value for child leaf "stat-info-timer".
     * @return The value of the leaf.
     */
    public YangUInt16 getStatInfoTimerValue() throws JNCException {
        YangUInt16 statInfoTimer = (YangUInt16)getValue("stat-info-timer");
        if (statInfoTimer == null) {
            statInfoTimer = new YangUInt16("30");  // default
        }
        return statInfoTimer;
    }

    /**
     * Sets the value for child leaf "stat-info-timer",
     * using instance of generated typedef class.
     * @param statInfoTimerValue The value to set.
     * @param statInfoTimerValue used during instantiation.
     */
    public void setStatInfoTimerValue(YangUInt16 statInfoTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "stat-info-timer",
            statInfoTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "stat-info-timer",
     * using Java primitive values.
     * @param statInfoTimerValue used during instantiation.
     */
    public void setStatInfoTimerValue(int statInfoTimerValue)
            throws JNCException {
        setStatInfoTimerValue(new YangUInt16(statInfoTimerValue));
    }

    /**
     * Sets the value for child leaf "stat-info-timer",
     * using a String value.
     * @param statInfoTimerValue used during instantiation.
     */
    public void setStatInfoTimerValue(String statInfoTimerValue)
            throws JNCException {
        setStatInfoTimerValue(new YangUInt16(statInfoTimerValue));
    }

    /**
     * Unsets the value for child leaf "stat-info-timer".
     */
    public void unsetStatInfoTimerValue() throws JNCException {
        delete("stat-info-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "stat-info-timer" leaf will not have a value.
     */
    public void addStatInfoTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "stat-info-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "stat-info-timer" with operation "replace".
     */
    public void markStatInfoTimerReplace() throws JNCException {
        markLeafReplace("statInfoTimer");
    }

    /**
     * Marks the leaf "stat-info-timer" with operation "merge".
     */
    public void markStatInfoTimerMerge() throws JNCException {
        markLeafMerge("statInfoTimer");
    }

    /**
     * Marks the leaf "stat-info-timer" with operation "create".
     */
    public void markStatInfoTimerCreate() throws JNCException {
        markLeafCreate("statInfoTimer");
    }

    /**
     * Marks the leaf "stat-info-timer" with operation "delete".
     */
    public void markStatInfoTimerDelete() throws JNCException {
        markLeafDelete("statInfoTimer");
    }

    /* Access methods for optional leaf child: "congestion-timer". */

    /**
     * Gets the value for child leaf "congestion-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getCongestionTimerValue() throws JNCException {
        YangUInt8 congestionTimer = (YangUInt8)getValue("congestion-timer");
        if (congestionTimer == null) {
            congestionTimer = new YangUInt8("1");  // default
        }
        return congestionTimer;
    }

    /**
     * Sets the value for child leaf "congestion-timer",
     * using instance of generated typedef class.
     * @param congestionTimerValue The value to set.
     * @param congestionTimerValue used during instantiation.
     */
    public void setCongestionTimerValue(YangUInt8 congestionTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "congestion-timer",
            congestionTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "congestion-timer",
     * using Java primitive values.
     * @param congestionTimerValue used during instantiation.
     */
    public void setCongestionTimerValue(short congestionTimerValue)
            throws JNCException {
        setCongestionTimerValue(new YangUInt8(congestionTimerValue));
    }

    /**
     * Sets the value for child leaf "congestion-timer",
     * using a String value.
     * @param congestionTimerValue used during instantiation.
     */
    public void setCongestionTimerValue(String congestionTimerValue)
            throws JNCException {
        setCongestionTimerValue(new YangUInt8(congestionTimerValue));
    }

    /**
     * Unsets the value for child leaf "congestion-timer".
     */
    public void unsetCongestionTimerValue() throws JNCException {
        delete("congestion-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "congestion-timer" leaf will not have a value.
     */
    public void addCongestionTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "congestion-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "congestion-timer" with operation "replace".
     */
    public void markCongestionTimerReplace() throws JNCException {
        markLeafReplace("congestionTimer");
    }

    /**
     * Marks the leaf "congestion-timer" with operation "merge".
     */
    public void markCongestionTimerMerge() throws JNCException {
        markLeafMerge("congestionTimer");
    }

    /**
     * Marks the leaf "congestion-timer" with operation "create".
     */
    public void markCongestionTimerCreate() throws JNCException {
        markLeafCreate("congestionTimer");
    }

    /**
     * Marks the leaf "congestion-timer" with operation "delete".
     */
    public void markCongestionTimerDelete() throws JNCException {
        markLeafDelete("congestionTimer");
    }

    /* Access methods for optional leaf child: "attack-timer". */

    /**
     * Gets the value for child leaf "attack-timer".
     * @return The value of the leaf.
     */
    public YangUInt16 getAttackTimerValue() throws JNCException {
        YangUInt16 attackTimer = (YangUInt16)getValue("attack-timer");
        if (attackTimer == null) {
            attackTimer = new YangUInt16("60");  // default
        }
        return attackTimer;
    }

    /**
     * Sets the value for child leaf "attack-timer",
     * using instance of generated typedef class.
     * @param attackTimerValue The value to set.
     * @param attackTimerValue used during instantiation.
     */
    public void setAttackTimerValue(YangUInt16 attackTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attack-timer",
            attackTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "attack-timer",
     * using Java primitive values.
     * @param attackTimerValue used during instantiation.
     */
    public void setAttackTimerValue(int attackTimerValue) throws JNCException {
        setAttackTimerValue(new YangUInt16(attackTimerValue));
    }

    /**
     * Sets the value for child leaf "attack-timer",
     * using a String value.
     * @param attackTimerValue used during instantiation.
     */
    public void setAttackTimerValue(String attackTimerValue)
            throws JNCException {
        setAttackTimerValue(new YangUInt16(attackTimerValue));
    }

    /**
     * Unsets the value for child leaf "attack-timer".
     */
    public void unsetAttackTimerValue() throws JNCException {
        delete("attack-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "attack-timer" leaf will not have a value.
     */
    public void addAttackTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attack-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "attack-timer" with operation "replace".
     */
    public void markAttackTimerReplace() throws JNCException {
        markLeafReplace("attackTimer");
    }

    /**
     * Marks the leaf "attack-timer" with operation "merge".
     */
    public void markAttackTimerMerge() throws JNCException {
        markLeafMerge("attackTimer");
    }

    /**
     * Marks the leaf "attack-timer" with operation "create".
     */
    public void markAttackTimerCreate() throws JNCException {
        markLeafCreate("attackTimer");
    }

    /**
     * Marks the leaf "attack-timer" with operation "delete".
     */
    public void markAttackTimerDelete() throws JNCException {
        markLeafDelete("attackTimer");
    }

    /* Access methods for optional leaf child: "decay-timer". */

    /**
     * Gets the value for child leaf "decay-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getDecayTimerValue() throws JNCException {
        YangUInt8 decayTimer = (YangUInt8)getValue("decay-timer");
        if (decayTimer == null) {
            decayTimer = new YangUInt8("1");  // default
        }
        return decayTimer;
    }

    /**
     * Sets the value for child leaf "decay-timer",
     * using instance of generated typedef class.
     * @param decayTimerValue The value to set.
     * @param decayTimerValue used during instantiation.
     */
    public void setDecayTimerValue(YangUInt8 decayTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "decay-timer",
            decayTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "decay-timer",
     * using Java primitive values.
     * @param decayTimerValue used during instantiation.
     */
    public void setDecayTimerValue(short decayTimerValue) throws JNCException {
        setDecayTimerValue(new YangUInt8(decayTimerValue));
    }

    /**
     * Sets the value for child leaf "decay-timer",
     * using a String value.
     * @param decayTimerValue used during instantiation.
     */
    public void setDecayTimerValue(String decayTimerValue) throws JNCException {
        setDecayTimerValue(new YangUInt8(decayTimerValue));
    }

    /**
     * Unsets the value for child leaf "decay-timer".
     */
    public void unsetDecayTimerValue() throws JNCException {
        delete("decay-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "decay-timer" leaf will not have a value.
     */
    public void addDecayTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "decay-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "decay-timer" with operation "replace".
     */
    public void markDecayTimerReplace() throws JNCException {
        markLeafReplace("decayTimer");
    }

    /**
     * Marks the leaf "decay-timer" with operation "merge".
     */
    public void markDecayTimerMerge() throws JNCException {
        markLeafMerge("decayTimer");
    }

    /**
     * Marks the leaf "decay-timer" with operation "create".
     */
    public void markDecayTimerCreate() throws JNCException {
        markLeafCreate("decayTimer");
    }

    /**
     * Marks the leaf "decay-timer" with operation "delete".
     */
    public void markDecayTimerDelete() throws JNCException {
        markLeafDelete("decayTimer");
    }

    /* Access methods for optional leaf child: "unknown-destination-alarm". */

    /**
     * Gets the value for child leaf "unknown-destination-alarm".
     * @return The value of the leaf.
     */
    public YangEnumeration getUnknownDestinationAlarmValue()
            throws JNCException {
        YangEnumeration unknownDestinationAlarm = (YangEnumeration)getValue("unknown-destination-alarm");
        if (unknownDestinationAlarm == null) {
            unknownDestinationAlarm = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return unknownDestinationAlarm;
    }

    /**
     * Sets the value for child leaf "unknown-destination-alarm",
     * using instance of generated typedef class.
     * @param unknownDestinationAlarmValue The value to set.
     * @param unknownDestinationAlarmValue used during instantiation.
     */
    public void setUnknownDestinationAlarmValue(YangEnumeration unknownDestinationAlarmValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unknown-destination-alarm",
            unknownDestinationAlarmValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unknown-destination-alarm",
     * using a String value.
     * @param unknownDestinationAlarmValue used during instantiation.
     */
    public void setUnknownDestinationAlarmValue(String unknownDestinationAlarmValue)
            throws JNCException {
        setUnknownDestinationAlarmValue(new YangEnumeration(unknownDestinationAlarmValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "unknown-destination-alarm".
     */
    public void unsetUnknownDestinationAlarmValue() throws JNCException {
        delete("unknown-destination-alarm");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unknown-destination-alarm" leaf will not have a value.
     */
    public void addUnknownDestinationAlarm() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unknown-destination-alarm",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unknown-destination-alarm" with operation "replace".
     */
    public void markUnknownDestinationAlarmReplace() throws JNCException {
        markLeafReplace("unknownDestinationAlarm");
    }

    /**
     * Marks the leaf "unknown-destination-alarm" with operation "merge".
     */
    public void markUnknownDestinationAlarmMerge() throws JNCException {
        markLeafMerge("unknownDestinationAlarm");
    }

    /**
     * Marks the leaf "unknown-destination-alarm" with operation "create".
     */
    public void markUnknownDestinationAlarmCreate() throws JNCException {
        markLeafCreate("unknownDestinationAlarm");
    }

    /**
     * Marks the leaf "unknown-destination-alarm" with operation "delete".
     */
    public void markUnknownDestinationAlarmDelete() throws JNCException {
        markLeafDelete("unknownDestinationAlarm");
    }

    /* Access methods for optional leaf child: "reassembly-timer". */

    /**
     * Gets the value for child leaf "reassembly-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getReassemblyTimerValue() throws JNCException {
        YangUInt8 reassemblyTimer = (YangUInt8)getValue("reassembly-timer");
        if (reassemblyTimer == null) {
            reassemblyTimer = new YangUInt8("10");  // default
        }
        return reassemblyTimer;
    }

    /**
     * Sets the value for child leaf "reassembly-timer",
     * using instance of generated typedef class.
     * @param reassemblyTimerValue The value to set.
     * @param reassemblyTimerValue used during instantiation.
     */
    public void setReassemblyTimerValue(YangUInt8 reassemblyTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reassembly-timer",
            reassemblyTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "reassembly-timer",
     * using Java primitive values.
     * @param reassemblyTimerValue used during instantiation.
     */
    public void setReassemblyTimerValue(short reassemblyTimerValue)
            throws JNCException {
        setReassemblyTimerValue(new YangUInt8(reassemblyTimerValue));
    }

    /**
     * Sets the value for child leaf "reassembly-timer",
     * using a String value.
     * @param reassemblyTimerValue used during instantiation.
     */
    public void setReassemblyTimerValue(String reassemblyTimerValue)
            throws JNCException {
        setReassemblyTimerValue(new YangUInt8(reassemblyTimerValue));
    }

    /**
     * Unsets the value for child leaf "reassembly-timer".
     */
    public void unsetReassemblyTimerValue() throws JNCException {
        delete("reassembly-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "reassembly-timer" leaf will not have a value.
     */
    public void addReassemblyTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reassembly-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "reassembly-timer" with operation "replace".
     */
    public void markReassemblyTimerReplace() throws JNCException {
        markLeafReplace("reassemblyTimer");
    }

    /**
     * Marks the leaf "reassembly-timer" with operation "merge".
     */
    public void markReassemblyTimerMerge() throws JNCException {
        markLeafMerge("reassemblyTimer");
    }

    /**
     * Marks the leaf "reassembly-timer" with operation "create".
     */
    public void markReassemblyTimerCreate() throws JNCException {
        markLeafCreate("reassemblyTimer");
    }

    /**
     * Marks the leaf "reassembly-timer" with operation "delete".
     */
    public void markReassemblyTimerDelete() throws JNCException {
        markLeafDelete("reassemblyTimer");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
