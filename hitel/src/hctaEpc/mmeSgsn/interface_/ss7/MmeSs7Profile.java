/* 
 * @(#)MmeSs7Profile.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.ss7;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/ss7/mme-ss7-profile"
 * <p>
 * See line 661 in
 * sigtranConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeSs7Profile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeSs7Profile object.
     */
    public MmeSs7Profile() {
        super(Epc.NAMESPACE, "mme-ss7-profile");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeSs7Profile clone() {
        return (MmeSs7Profile)cloneContent(new MmeSs7Profile());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeSs7Profile cloneShallow() {
        return (MmeSs7Profile)cloneShallowContent(new MmeSs7Profile());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "sgsn-number",
            "signaling-variant",
            "map-cgpa-routing-indicator",
            "version",
            "dscp-mark",
            "map-importance-level",
            "bssap-importance-level",
            "cap-importance-level",
            "map-subsystem-number",
            "bssap-subsystem-number",
            "cap-subsystem-number",
            "cap-cgpa-routing-indicator",
        };
    }

    /* Access methods for optional leaf child: "sgsn-number". */

    /**
     * Gets the value for child leaf "sgsn-number".
     * @return The value of the leaf.
     */
    public YangString getSgsnNumberValue() throws JNCException {
        return (YangString)getValue("sgsn-number");
    }

    /**
     * Sets the value for child leaf "sgsn-number",
     * using instance of generated typedef class.
     * @param sgsnNumberValue The value to set.
     * @param sgsnNumberValue used during instantiation.
     */
    public void setSgsnNumberValue(YangString sgsnNumberValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgsn-number",
            sgsnNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sgsn-number",
     * using a String value.
     * @param sgsnNumberValue used during instantiation.
     */
    public void setSgsnNumberValue(String sgsnNumberValue) throws JNCException {
        setSgsnNumberValue(new YangString(sgsnNumberValue));
    }

    /**
     * Unsets the value for child leaf "sgsn-number".
     */
    public void unsetSgsnNumberValue() throws JNCException {
        delete("sgsn-number");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sgsn-number" leaf will not have a value.
     */
    public void addSgsnNumber() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sgsn-number",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sgsn-number" with operation "replace".
     */
    public void markSgsnNumberReplace() throws JNCException {
        markLeafReplace("sgsnNumber");
    }

    /**
     * Marks the leaf "sgsn-number" with operation "merge".
     */
    public void markSgsnNumberMerge() throws JNCException {
        markLeafMerge("sgsnNumber");
    }

    /**
     * Marks the leaf "sgsn-number" with operation "create".
     */
    public void markSgsnNumberCreate() throws JNCException {
        markLeafCreate("sgsnNumber");
    }

    /**
     * Marks the leaf "sgsn-number" with operation "delete".
     */
    public void markSgsnNumberDelete() throws JNCException {
        markLeafDelete("sgsnNumber");
    }

    /* Access methods for optional leaf child: "signaling-variant". */

    /**
     * Gets the value for child leaf "signaling-variant".
     * @return The value of the leaf.
     */
    public YangEnumeration getSignalingVariantValue() throws JNCException {
        YangEnumeration signalingVariant = (YangEnumeration)getValue("signaling-variant");
        if (signalingVariant == null) {
            signalingVariant = new YangEnumeration("itu", new String[] {  // default
                "itu",
                "ansi",
                "itu-chinese",
                "etsi",
            });
        }
        return signalingVariant;
    }

    /**
     * Sets the value for child leaf "signaling-variant",
     * using instance of generated typedef class.
     * @param signalingVariantValue The value to set.
     * @param signalingVariantValue used during instantiation.
     */
    public void setSignalingVariantValue(YangEnumeration signalingVariantValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "signaling-variant",
            signalingVariantValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "signaling-variant",
     * using a String value.
     * @param signalingVariantValue used during instantiation.
     */
    public void setSignalingVariantValue(String signalingVariantValue)
            throws JNCException {
        setSignalingVariantValue(new YangEnumeration(signalingVariantValue, new String[] {
             "itu",
             "ansi",
             "itu-chinese",
             "etsi",
        }));
    }

    /**
     * Unsets the value for child leaf "signaling-variant".
     */
    public void unsetSignalingVariantValue() throws JNCException {
        delete("signaling-variant");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "signaling-variant" leaf will not have a value.
     */
    public void addSignalingVariant() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "signaling-variant",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "signaling-variant" with operation "replace".
     */
    public void markSignalingVariantReplace() throws JNCException {
        markLeafReplace("signalingVariant");
    }

    /**
     * Marks the leaf "signaling-variant" with operation "merge".
     */
    public void markSignalingVariantMerge() throws JNCException {
        markLeafMerge("signalingVariant");
    }

    /**
     * Marks the leaf "signaling-variant" with operation "create".
     */
    public void markSignalingVariantCreate() throws JNCException {
        markLeafCreate("signalingVariant");
    }

    /**
     * Marks the leaf "signaling-variant" with operation "delete".
     */
    public void markSignalingVariantDelete() throws JNCException {
        markLeafDelete("signalingVariant");
    }

    /* Access methods for optional leaf child: "map-cgpa-routing-indicator". */

    /**
     * Gets the value for child leaf "map-cgpa-routing-indicator".
     * @return The value of the leaf.
     */
    public YangEnumeration getMapCgpaRoutingIndicatorValue()
            throws JNCException {
        YangEnumeration mapCgpaRoutingIndicator = (YangEnumeration)getValue("map-cgpa-routing-indicator");
        if (mapCgpaRoutingIndicator == null) {
            mapCgpaRoutingIndicator = new YangEnumeration("global-title", new String[] {  // default
                "global-title",
                "point-code",
            });
        }
        return mapCgpaRoutingIndicator;
    }

    /**
     * Sets the value for child leaf "map-cgpa-routing-indicator",
     * using instance of generated typedef class.
     * @param mapCgpaRoutingIndicatorValue The value to set.
     * @param mapCgpaRoutingIndicatorValue used during instantiation.
     */
    public void setMapCgpaRoutingIndicatorValue(YangEnumeration mapCgpaRoutingIndicatorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "map-cgpa-routing-indicator",
            mapCgpaRoutingIndicatorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "map-cgpa-routing-indicator",
     * using a String value.
     * @param mapCgpaRoutingIndicatorValue used during instantiation.
     */
    public void setMapCgpaRoutingIndicatorValue(String mapCgpaRoutingIndicatorValue)
            throws JNCException {
        setMapCgpaRoutingIndicatorValue(new YangEnumeration(mapCgpaRoutingIndicatorValue, new String[] {
             "global-title",
             "point-code",
        }));
    }

    /**
     * Unsets the value for child leaf "map-cgpa-routing-indicator".
     */
    public void unsetMapCgpaRoutingIndicatorValue() throws JNCException {
        delete("map-cgpa-routing-indicator");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "map-cgpa-routing-indicator" leaf will not have a value.
     */
    public void addMapCgpaRoutingIndicator() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "map-cgpa-routing-indicator",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "map-cgpa-routing-indicator" with operation "replace".
     */
    public void markMapCgpaRoutingIndicatorReplace() throws JNCException {
        markLeafReplace("mapCgpaRoutingIndicator");
    }

    /**
     * Marks the leaf "map-cgpa-routing-indicator" with operation "merge".
     */
    public void markMapCgpaRoutingIndicatorMerge() throws JNCException {
        markLeafMerge("mapCgpaRoutingIndicator");
    }

    /**
     * Marks the leaf "map-cgpa-routing-indicator" with operation "create".
     */
    public void markMapCgpaRoutingIndicatorCreate() throws JNCException {
        markLeafCreate("mapCgpaRoutingIndicator");
    }

    /**
     * Marks the leaf "map-cgpa-routing-indicator" with operation "delete".
     */
    public void markMapCgpaRoutingIndicatorDelete() throws JNCException {
        markLeafDelete("mapCgpaRoutingIndicator");
    }

    /* Access methods for optional leaf child: "version". */

    /**
     * Gets the value for child leaf "version".
     * @return The value of the leaf.
     */
    public YangEnumeration getVersionValue() throws JNCException {
        YangEnumeration version = (YangEnumeration)getValue("version");
        if (version == null) {
            version = new YangEnumeration("10.8.0", new String[] {  // default
                "9.4.0",
                "10.8.0",
            });
        }
        return version;
    }

    /**
     * Sets the value for child leaf "version",
     * using instance of generated typedef class.
     * @param versionValue The value to set.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(YangEnumeration versionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            versionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "version",
     * using a String value.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(String versionValue) throws JNCException {
        setVersionValue(new YangEnumeration(versionValue, new String[] {
             "9.4.0",
             "10.8.0",
        }));
    }

    /**
     * Unsets the value for child leaf "version".
     */
    public void unsetVersionValue() throws JNCException {
        delete("version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "version" leaf will not have a value.
     */
    public void addVersion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "version" with operation "replace".
     */
    public void markVersionReplace() throws JNCException {
        markLeafReplace("version");
    }

    /**
     * Marks the leaf "version" with operation "merge".
     */
    public void markVersionMerge() throws JNCException {
        markLeafMerge("version");
    }

    /**
     * Marks the leaf "version" with operation "create".
     */
    public void markVersionCreate() throws JNCException {
        markLeafCreate("version");
    }

    /**
     * Marks the leaf "version" with operation "delete".
     */
    public void markVersionDelete() throws JNCException {
        markLeafDelete("version");
    }

    /* Access methods for optional leaf child: "dscp-mark". */

    /**
     * Gets the value for child leaf "dscp-mark".
     * @return The value of the leaf.
     */
    public YangString getDscpMarkValue() throws JNCException {
        YangString dscpMark = (YangString)getValue("dscp-mark");
        if (dscpMark == null) {
            dscpMark = new YangString("de");  // default
        }
        return dscpMark;
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using instance of generated typedef class.
     * @param dscpMarkValue The value to set.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(YangString dscpMarkValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            dscpMarkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using a String value.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(String dscpMarkValue) throws JNCException {
        setDscpMarkValue(new YangString(dscpMarkValue));
    }

    /**
     * Unsets the value for child leaf "dscp-mark".
     */
    public void unsetDscpMarkValue() throws JNCException {
        delete("dscp-mark");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dscp-mark" leaf will not have a value.
     */
    public void addDscpMark() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dscp-mark" with operation "replace".
     */
    public void markDscpMarkReplace() throws JNCException {
        markLeafReplace("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "merge".
     */
    public void markDscpMarkMerge() throws JNCException {
        markLeafMerge("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "create".
     */
    public void markDscpMarkCreate() throws JNCException {
        markLeafCreate("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "delete".
     */
    public void markDscpMarkDelete() throws JNCException {
        markLeafDelete("dscpMark");
    }

    /* Access methods for optional leaf child: "map-importance-level". */

    /**
     * Gets the value for child leaf "map-importance-level".
     * @return The value of the leaf.
     */
    public YangEnumeration getMapImportanceLevelValue() throws JNCException {
        YangEnumeration mapImportanceLevel = (YangEnumeration)getValue("map-importance-level");
        if (mapImportanceLevel == null) {
            mapImportanceLevel = new YangEnumeration("auto-configure", new String[] {  // default
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "auto-configure",
            });
        }
        return mapImportanceLevel;
    }

    /**
     * Sets the value for child leaf "map-importance-level",
     * using instance of generated typedef class.
     * @param mapImportanceLevelValue The value to set.
     * @param mapImportanceLevelValue used during instantiation.
     */
    public void setMapImportanceLevelValue(YangEnumeration mapImportanceLevelValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "map-importance-level",
            mapImportanceLevelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "map-importance-level",
     * using a String value.
     * @param mapImportanceLevelValue used during instantiation.
     */
    public void setMapImportanceLevelValue(String mapImportanceLevelValue)
            throws JNCException {
        setMapImportanceLevelValue(new YangEnumeration(mapImportanceLevelValue, new String[] {
             "1",
             "2",
             "3",
             "4",
             "5",
             "6",
             "auto-configure",
        }));
    }

    /**
     * Unsets the value for child leaf "map-importance-level".
     */
    public void unsetMapImportanceLevelValue() throws JNCException {
        delete("map-importance-level");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "map-importance-level" leaf will not have a value.
     */
    public void addMapImportanceLevel() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "map-importance-level",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "map-importance-level" with operation "replace".
     */
    public void markMapImportanceLevelReplace() throws JNCException {
        markLeafReplace("mapImportanceLevel");
    }

    /**
     * Marks the leaf "map-importance-level" with operation "merge".
     */
    public void markMapImportanceLevelMerge() throws JNCException {
        markLeafMerge("mapImportanceLevel");
    }

    /**
     * Marks the leaf "map-importance-level" with operation "create".
     */
    public void markMapImportanceLevelCreate() throws JNCException {
        markLeafCreate("mapImportanceLevel");
    }

    /**
     * Marks the leaf "map-importance-level" with operation "delete".
     */
    public void markMapImportanceLevelDelete() throws JNCException {
        markLeafDelete("mapImportanceLevel");
    }

    /* Access methods for optional leaf child: "bssap-importance-level". */

    /**
     * Gets the value for child leaf "bssap-importance-level".
     * @return The value of the leaf.
     */
    public YangEnumeration getBssapImportanceLevelValue() throws JNCException {
        YangEnumeration bssapImportanceLevel = (YangEnumeration)getValue("bssap-importance-level");
        if (bssapImportanceLevel == null) {
            bssapImportanceLevel = new YangEnumeration("auto-configure", new String[] {  // default
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "auto-configure",
            });
        }
        return bssapImportanceLevel;
    }

    /**
     * Sets the value for child leaf "bssap-importance-level",
     * using instance of generated typedef class.
     * @param bssapImportanceLevelValue The value to set.
     * @param bssapImportanceLevelValue used during instantiation.
     */
    public void setBssapImportanceLevelValue(YangEnumeration bssapImportanceLevelValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bssap-importance-level",
            bssapImportanceLevelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bssap-importance-level",
     * using a String value.
     * @param bssapImportanceLevelValue used during instantiation.
     */
    public void setBssapImportanceLevelValue(String bssapImportanceLevelValue)
            throws JNCException {
        setBssapImportanceLevelValue(new YangEnumeration(bssapImportanceLevelValue, new String[] {
             "1",
             "2",
             "3",
             "4",
             "5",
             "6",
             "auto-configure",
        }));
    }

    /**
     * Unsets the value for child leaf "bssap-importance-level".
     */
    public void unsetBssapImportanceLevelValue() throws JNCException {
        delete("bssap-importance-level");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bssap-importance-level" leaf will not have a value.
     */
    public void addBssapImportanceLevel() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bssap-importance-level",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bssap-importance-level" with operation "replace".
     */
    public void markBssapImportanceLevelReplace() throws JNCException {
        markLeafReplace("bssapImportanceLevel");
    }

    /**
     * Marks the leaf "bssap-importance-level" with operation "merge".
     */
    public void markBssapImportanceLevelMerge() throws JNCException {
        markLeafMerge("bssapImportanceLevel");
    }

    /**
     * Marks the leaf "bssap-importance-level" with operation "create".
     */
    public void markBssapImportanceLevelCreate() throws JNCException {
        markLeafCreate("bssapImportanceLevel");
    }

    /**
     * Marks the leaf "bssap-importance-level" with operation "delete".
     */
    public void markBssapImportanceLevelDelete() throws JNCException {
        markLeafDelete("bssapImportanceLevel");
    }

    /* Access methods for optional leaf child: "cap-importance-level". */

    /**
     * Gets the value for child leaf "cap-importance-level".
     * @return The value of the leaf.
     */
    public YangEnumeration getCapImportanceLevelValue() throws JNCException {
        YangEnumeration capImportanceLevel = (YangEnumeration)getValue("cap-importance-level");
        if (capImportanceLevel == null) {
            capImportanceLevel = new YangEnumeration("auto-configure", new String[] {  // default
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "auto-configure",
            });
        }
        return capImportanceLevel;
    }

    /**
     * Sets the value for child leaf "cap-importance-level",
     * using instance of generated typedef class.
     * @param capImportanceLevelValue The value to set.
     * @param capImportanceLevelValue used during instantiation.
     */
    public void setCapImportanceLevelValue(YangEnumeration capImportanceLevelValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cap-importance-level",
            capImportanceLevelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cap-importance-level",
     * using a String value.
     * @param capImportanceLevelValue used during instantiation.
     */
    public void setCapImportanceLevelValue(String capImportanceLevelValue)
            throws JNCException {
        setCapImportanceLevelValue(new YangEnumeration(capImportanceLevelValue, new String[] {
             "1",
             "2",
             "3",
             "4",
             "5",
             "6",
             "auto-configure",
        }));
    }

    /**
     * Unsets the value for child leaf "cap-importance-level".
     */
    public void unsetCapImportanceLevelValue() throws JNCException {
        delete("cap-importance-level");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cap-importance-level" leaf will not have a value.
     */
    public void addCapImportanceLevel() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cap-importance-level",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cap-importance-level" with operation "replace".
     */
    public void markCapImportanceLevelReplace() throws JNCException {
        markLeafReplace("capImportanceLevel");
    }

    /**
     * Marks the leaf "cap-importance-level" with operation "merge".
     */
    public void markCapImportanceLevelMerge() throws JNCException {
        markLeafMerge("capImportanceLevel");
    }

    /**
     * Marks the leaf "cap-importance-level" with operation "create".
     */
    public void markCapImportanceLevelCreate() throws JNCException {
        markLeafCreate("capImportanceLevel");
    }

    /**
     * Marks the leaf "cap-importance-level" with operation "delete".
     */
    public void markCapImportanceLevelDelete() throws JNCException {
        markLeafDelete("capImportanceLevel");
    }

    /* Access methods for optional leaf child: "map-subsystem-number". */

    /**
     * Gets the value for child leaf "map-subsystem-number".
     * @return The value of the leaf.
     */
    public YangString getMapSubsystemNumberValue() throws JNCException {
        YangString mapSubsystemNumber = (YangString)getValue("map-subsystem-number");
        if (mapSubsystemNumber == null) {
            mapSubsystemNumber = new YangString("standard");  // default
        }
        return mapSubsystemNumber;
    }

    /**
     * Sets the value for child leaf "map-subsystem-number",
     * using instance of generated typedef class.
     * @param mapSubsystemNumberValue The value to set.
     * @param mapSubsystemNumberValue used during instantiation.
     */
    public void setMapSubsystemNumberValue(YangString mapSubsystemNumberValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "map-subsystem-number",
            mapSubsystemNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "map-subsystem-number",
     * using a String value.
     * @param mapSubsystemNumberValue used during instantiation.
     */
    public void setMapSubsystemNumberValue(String mapSubsystemNumberValue)
            throws JNCException {
        setMapSubsystemNumberValue(new YangString(mapSubsystemNumberValue));
    }

    /**
     * Unsets the value for child leaf "map-subsystem-number".
     */
    public void unsetMapSubsystemNumberValue() throws JNCException {
        delete("map-subsystem-number");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "map-subsystem-number" leaf will not have a value.
     */
    public void addMapSubsystemNumber() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "map-subsystem-number",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "map-subsystem-number" with operation "replace".
     */
    public void markMapSubsystemNumberReplace() throws JNCException {
        markLeafReplace("mapSubsystemNumber");
    }

    /**
     * Marks the leaf "map-subsystem-number" with operation "merge".
     */
    public void markMapSubsystemNumberMerge() throws JNCException {
        markLeafMerge("mapSubsystemNumber");
    }

    /**
     * Marks the leaf "map-subsystem-number" with operation "create".
     */
    public void markMapSubsystemNumberCreate() throws JNCException {
        markLeafCreate("mapSubsystemNumber");
    }

    /**
     * Marks the leaf "map-subsystem-number" with operation "delete".
     */
    public void markMapSubsystemNumberDelete() throws JNCException {
        markLeafDelete("mapSubsystemNumber");
    }

    /* Access methods for optional leaf child: "bssap-subsystem-number". */

    /**
     * Gets the value for child leaf "bssap-subsystem-number".
     * @return The value of the leaf.
     */
    public YangString getBssapSubsystemNumberValue() throws JNCException {
        YangString bssapSubsystemNumber = (YangString)getValue("bssap-subsystem-number");
        if (bssapSubsystemNumber == null) {
            bssapSubsystemNumber = new YangString("unused");  // default
        }
        return bssapSubsystemNumber;
    }

    /**
     * Sets the value for child leaf "bssap-subsystem-number",
     * using instance of generated typedef class.
     * @param bssapSubsystemNumberValue The value to set.
     * @param bssapSubsystemNumberValue used during instantiation.
     */
    public void setBssapSubsystemNumberValue(YangString bssapSubsystemNumberValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bssap-subsystem-number",
            bssapSubsystemNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bssap-subsystem-number",
     * using a String value.
     * @param bssapSubsystemNumberValue used during instantiation.
     */
    public void setBssapSubsystemNumberValue(String bssapSubsystemNumberValue)
            throws JNCException {
        setBssapSubsystemNumberValue(new YangString(bssapSubsystemNumberValue));
    }

    /**
     * Unsets the value for child leaf "bssap-subsystem-number".
     */
    public void unsetBssapSubsystemNumberValue() throws JNCException {
        delete("bssap-subsystem-number");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bssap-subsystem-number" leaf will not have a value.
     */
    public void addBssapSubsystemNumber() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bssap-subsystem-number",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bssap-subsystem-number" with operation "replace".
     */
    public void markBssapSubsystemNumberReplace() throws JNCException {
        markLeafReplace("bssapSubsystemNumber");
    }

    /**
     * Marks the leaf "bssap-subsystem-number" with operation "merge".
     */
    public void markBssapSubsystemNumberMerge() throws JNCException {
        markLeafMerge("bssapSubsystemNumber");
    }

    /**
     * Marks the leaf "bssap-subsystem-number" with operation "create".
     */
    public void markBssapSubsystemNumberCreate() throws JNCException {
        markLeafCreate("bssapSubsystemNumber");
    }

    /**
     * Marks the leaf "bssap-subsystem-number" with operation "delete".
     */
    public void markBssapSubsystemNumberDelete() throws JNCException {
        markLeafDelete("bssapSubsystemNumber");
    }

    /* Access methods for optional leaf child: "cap-subsystem-number". */

    /**
     * Gets the value for child leaf "cap-subsystem-number".
     * @return The value of the leaf.
     */
    public YangString getCapSubsystemNumberValue() throws JNCException {
        YangString capSubsystemNumber = (YangString)getValue("cap-subsystem-number");
        if (capSubsystemNumber == null) {
            capSubsystemNumber = new YangString("unused");  // default
        }
        return capSubsystemNumber;
    }

    /**
     * Sets the value for child leaf "cap-subsystem-number",
     * using instance of generated typedef class.
     * @param capSubsystemNumberValue The value to set.
     * @param capSubsystemNumberValue used during instantiation.
     */
    public void setCapSubsystemNumberValue(YangString capSubsystemNumberValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cap-subsystem-number",
            capSubsystemNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cap-subsystem-number",
     * using a String value.
     * @param capSubsystemNumberValue used during instantiation.
     */
    public void setCapSubsystemNumberValue(String capSubsystemNumberValue)
            throws JNCException {
        setCapSubsystemNumberValue(new YangString(capSubsystemNumberValue));
    }

    /**
     * Unsets the value for child leaf "cap-subsystem-number".
     */
    public void unsetCapSubsystemNumberValue() throws JNCException {
        delete("cap-subsystem-number");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cap-subsystem-number" leaf will not have a value.
     */
    public void addCapSubsystemNumber() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cap-subsystem-number",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cap-subsystem-number" with operation "replace".
     */
    public void markCapSubsystemNumberReplace() throws JNCException {
        markLeafReplace("capSubsystemNumber");
    }

    /**
     * Marks the leaf "cap-subsystem-number" with operation "merge".
     */
    public void markCapSubsystemNumberMerge() throws JNCException {
        markLeafMerge("capSubsystemNumber");
    }

    /**
     * Marks the leaf "cap-subsystem-number" with operation "create".
     */
    public void markCapSubsystemNumberCreate() throws JNCException {
        markLeafCreate("capSubsystemNumber");
    }

    /**
     * Marks the leaf "cap-subsystem-number" with operation "delete".
     */
    public void markCapSubsystemNumberDelete() throws JNCException {
        markLeafDelete("capSubsystemNumber");
    }

    /* Access methods for optional leaf child: "cap-cgpa-routing-indicator". */

    /**
     * Gets the value for child leaf "cap-cgpa-routing-indicator".
     * @return The value of the leaf.
     */
    public YangEnumeration getCapCgpaRoutingIndicatorValue()
            throws JNCException {
        YangEnumeration capCgpaRoutingIndicator = (YangEnumeration)getValue("cap-cgpa-routing-indicator");
        if (capCgpaRoutingIndicator == null) {
            capCgpaRoutingIndicator = new YangEnumeration("global-title", new String[] {  // default
                "global-title",
                "point-code",
            });
        }
        return capCgpaRoutingIndicator;
    }

    /**
     * Sets the value for child leaf "cap-cgpa-routing-indicator",
     * using instance of generated typedef class.
     * @param capCgpaRoutingIndicatorValue The value to set.
     * @param capCgpaRoutingIndicatorValue used during instantiation.
     */
    public void setCapCgpaRoutingIndicatorValue(YangEnumeration capCgpaRoutingIndicatorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cap-cgpa-routing-indicator",
            capCgpaRoutingIndicatorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cap-cgpa-routing-indicator",
     * using a String value.
     * @param capCgpaRoutingIndicatorValue used during instantiation.
     */
    public void setCapCgpaRoutingIndicatorValue(String capCgpaRoutingIndicatorValue)
            throws JNCException {
        setCapCgpaRoutingIndicatorValue(new YangEnumeration(capCgpaRoutingIndicatorValue, new String[] {
             "global-title",
             "point-code",
        }));
    }

    /**
     * Unsets the value for child leaf "cap-cgpa-routing-indicator".
     */
    public void unsetCapCgpaRoutingIndicatorValue() throws JNCException {
        delete("cap-cgpa-routing-indicator");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cap-cgpa-routing-indicator" leaf will not have a value.
     */
    public void addCapCgpaRoutingIndicator() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cap-cgpa-routing-indicator",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cap-cgpa-routing-indicator" with operation "replace".
     */
    public void markCapCgpaRoutingIndicatorReplace() throws JNCException {
        markLeafReplace("capCgpaRoutingIndicator");
    }

    /**
     * Marks the leaf "cap-cgpa-routing-indicator" with operation "merge".
     */
    public void markCapCgpaRoutingIndicatorMerge() throws JNCException {
        markLeafMerge("capCgpaRoutingIndicator");
    }

    /**
     * Marks the leaf "cap-cgpa-routing-indicator" with operation "create".
     */
    public void markCapCgpaRoutingIndicatorCreate() throws JNCException {
        markLeafCreate("capCgpaRoutingIndicator");
    }

    /**
     * Marks the leaf "cap-cgpa-routing-indicator" with operation "delete".
     */
    public void markCapCgpaRoutingIndicatorDelete() throws JNCException {
        markLeafDelete("capCgpaRoutingIndicator");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
