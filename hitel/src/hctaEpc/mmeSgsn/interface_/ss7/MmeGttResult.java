/* 
 * @(#)MmeGttResult.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.ss7;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt16;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/ss7/mme-gtt-result"
 * <p>
 * See line 228 in
 * sigtranConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeGttResult extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeGttResult object.
     */
    public MmeGttResult() {
        super(Epc.NAMESPACE, "mme-gtt-result");
    }

    /**
     * Constructor for an initialized MmeGttResult object,
     * 
     * @param instanceValue Key argument of child.
     */
    public MmeGttResult(YangUInt16 instanceValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-gtt-result");
        Leaf instance = new Leaf(Epc.NAMESPACE, "instance");
        instance.setValue(instanceValue);
        insertChild(instance, childrenNames());
    }

    /**
     * Constructor for an initialized MmeGttResult object,
     * with String keys.
     * @param instanceValue Key argument of child.
     */
    public MmeGttResult(String instanceValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-gtt-result");
        Leaf instance = new Leaf(Epc.NAMESPACE, "instance");
        instance.setValue(new YangUInt16(instanceValue));
        insertChild(instance, childrenNames());
    }

    /**
     * Constructor for an initialized MmeGttResult object,
     * with keys of built in Java types.
     * @param instanceValue Key argument of child.
     */
    public MmeGttResult(int instanceValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-gtt-result");
        Leaf instance = new Leaf(Epc.NAMESPACE, "instance");
        instance.setValue(new YangUInt16(instanceValue));
        insertChild(instance, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeGttResult clone() {
        MmeGttResult copy;
        try {
            copy = new MmeGttResult(getInstanceValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeGttResult)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeGttResult cloneShallow() {
        MmeGttResult copy;
        try {
            copy = new MmeGttResult(getInstanceValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeGttResult)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "instance",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "instance",
            "destination-point-code",
            "routing-indicator",
            "use-original-gtai",
            "subsystem",
            "global-title-indicator",
            "translation-type",
            "numbering-plan",
            "nature-of-addr-indicator",
            "global-title-addr-info",
        };
    }

    /* Access methods for leaf child: "instance". */

    /**
     * Gets the value for child leaf "instance".
     * @return The value of the leaf.
     */
    public YangUInt16 getInstanceValue() throws JNCException {
        return (YangUInt16)getValue("instance");
    }

    /**
     * Sets the value for child leaf "instance",
     * using instance of generated typedef class.
     * @param instanceValue The value to set.
     * @param instanceValue used during instantiation.
     */
    public void setInstanceValue(YangUInt16 instanceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "instance",
            instanceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "instance",
     * using Java primitive values.
     * @param instanceValue used during instantiation.
     */
    public void setInstanceValue(int instanceValue) throws JNCException {
        setInstanceValue(new YangUInt16(instanceValue));
    }

    /**
     * Sets the value for child leaf "instance",
     * using a String value.
     * @param instanceValue used during instantiation.
     */
    public void setInstanceValue(String instanceValue) throws JNCException {
        setInstanceValue(new YangUInt16(instanceValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "instance" leaf will not have a value.
     */
    public void addInstance() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "instance",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "destination-point-code". */

    /**
     * Gets the value for child leaf "destination-point-code".
     * @return The value of the leaf.
     */
    public YangString getDestinationPointCodeValue() throws JNCException {
        return (YangString)getValue("destination-point-code");
    }

    /**
     * Sets the value for child leaf "destination-point-code",
     * using instance of generated typedef class.
     * @param destinationPointCodeValue The value to set.
     * @param destinationPointCodeValue used during instantiation.
     */
    public void setDestinationPointCodeValue(YangString destinationPointCodeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "destination-point-code",
            destinationPointCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "destination-point-code",
     * using a String value.
     * @param destinationPointCodeValue used during instantiation.
     */
    public void setDestinationPointCodeValue(String destinationPointCodeValue)
            throws JNCException {
        setDestinationPointCodeValue(new YangString(destinationPointCodeValue));
    }

    /**
     * Unsets the value for child leaf "destination-point-code".
     */
    public void unsetDestinationPointCodeValue() throws JNCException {
        delete("destination-point-code");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "destination-point-code" leaf will not have a value.
     */
    public void addDestinationPointCode() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "destination-point-code",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "destination-point-code" with operation "replace".
     */
    public void markDestinationPointCodeReplace() throws JNCException {
        markLeafReplace("destinationPointCode");
    }

    /**
     * Marks the leaf "destination-point-code" with operation "merge".
     */
    public void markDestinationPointCodeMerge() throws JNCException {
        markLeafMerge("destinationPointCode");
    }

    /**
     * Marks the leaf "destination-point-code" with operation "create".
     */
    public void markDestinationPointCodeCreate() throws JNCException {
        markLeafCreate("destinationPointCode");
    }

    /**
     * Marks the leaf "destination-point-code" with operation "delete".
     */
    public void markDestinationPointCodeDelete() throws JNCException {
        markLeafDelete("destinationPointCode");
    }

    /* Access methods for optional leaf child: "routing-indicator". */

    /**
     * Gets the value for child leaf "routing-indicator".
     * @return The value of the leaf.
     */
    public YangEnumeration getRoutingIndicatorValue() throws JNCException {
        return (YangEnumeration)getValue("routing-indicator");
    }

    /**
     * Sets the value for child leaf "routing-indicator",
     * using instance of generated typedef class.
     * @param routingIndicatorValue The value to set.
     * @param routingIndicatorValue used during instantiation.
     */
    public void setRoutingIndicatorValue(YangEnumeration routingIndicatorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-indicator",
            routingIndicatorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-indicator",
     * using a String value.
     * @param routingIndicatorValue used during instantiation.
     */
    public void setRoutingIndicatorValue(String routingIndicatorValue)
            throws JNCException {
        setRoutingIndicatorValue(new YangEnumeration(routingIndicatorValue, new String[] {
             "route-on-ssn",
             "route-on-gt",
        }));
    }

    /**
     * Unsets the value for child leaf "routing-indicator".
     */
    public void unsetRoutingIndicatorValue() throws JNCException {
        delete("routing-indicator");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-indicator" leaf will not have a value.
     */
    public void addRoutingIndicator() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-indicator",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-indicator" with operation "replace".
     */
    public void markRoutingIndicatorReplace() throws JNCException {
        markLeafReplace("routingIndicator");
    }

    /**
     * Marks the leaf "routing-indicator" with operation "merge".
     */
    public void markRoutingIndicatorMerge() throws JNCException {
        markLeafMerge("routingIndicator");
    }

    /**
     * Marks the leaf "routing-indicator" with operation "create".
     */
    public void markRoutingIndicatorCreate() throws JNCException {
        markLeafCreate("routingIndicator");
    }

    /**
     * Marks the leaf "routing-indicator" with operation "delete".
     */
    public void markRoutingIndicatorDelete() throws JNCException {
        markLeafDelete("routingIndicator");
    }

    /* Access methods for optional leaf child: "use-original-gtai". */

    /**
     * Gets the value for child leaf "use-original-gtai".
     * @return The value of the leaf.
     */
    public YangEnumeration getUseOriginalGtaiValue() throws JNCException {
        return (YangEnumeration)getValue("use-original-gtai");
    }

    /**
     * Sets the value for child leaf "use-original-gtai",
     * using instance of generated typedef class.
     * @param useOriginalGtaiValue The value to set.
     * @param useOriginalGtaiValue used during instantiation.
     */
    public void setUseOriginalGtaiValue(YangEnumeration useOriginalGtaiValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "use-original-gtai",
            useOriginalGtaiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "use-original-gtai",
     * using a String value.
     * @param useOriginalGtaiValue used during instantiation.
     */
    public void setUseOriginalGtaiValue(String useOriginalGtaiValue)
            throws JNCException {
        setUseOriginalGtaiValue(new YangEnumeration(useOriginalGtaiValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "use-original-gtai".
     */
    public void unsetUseOriginalGtaiValue() throws JNCException {
        delete("use-original-gtai");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "use-original-gtai" leaf will not have a value.
     */
    public void addUseOriginalGtai() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "use-original-gtai",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "use-original-gtai" with operation "replace".
     */
    public void markUseOriginalGtaiReplace() throws JNCException {
        markLeafReplace("useOriginalGtai");
    }

    /**
     * Marks the leaf "use-original-gtai" with operation "merge".
     */
    public void markUseOriginalGtaiMerge() throws JNCException {
        markLeafMerge("useOriginalGtai");
    }

    /**
     * Marks the leaf "use-original-gtai" with operation "create".
     */
    public void markUseOriginalGtaiCreate() throws JNCException {
        markLeafCreate("useOriginalGtai");
    }

    /**
     * Marks the leaf "use-original-gtai" with operation "delete".
     */
    public void markUseOriginalGtaiDelete() throws JNCException {
        markLeafDelete("useOriginalGtai");
    }

    /* Access methods for optional leaf child: "subsystem". */

    /**
     * Gets the value for child leaf "subsystem".
     * @return The value of the leaf.
     */
    public YangString getSubsystemValue() throws JNCException {
        YangString subsystem = (YangString)getValue("subsystem");
        if (subsystem == null) {
            subsystem = new YangString("unused-or-default");  // default
        }
        return subsystem;
    }

    /**
     * Sets the value for child leaf "subsystem",
     * using instance of generated typedef class.
     * @param subsystemValue The value to set.
     * @param subsystemValue used during instantiation.
     */
    public void setSubsystemValue(YangString subsystemValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "subsystem",
            subsystemValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "subsystem",
     * using a String value.
     * @param subsystemValue used during instantiation.
     */
    public void setSubsystemValue(String subsystemValue) throws JNCException {
        setSubsystemValue(new YangString(subsystemValue));
    }

    /**
     * Unsets the value for child leaf "subsystem".
     */
    public void unsetSubsystemValue() throws JNCException {
        delete("subsystem");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "subsystem" leaf will not have a value.
     */
    public void addSubsystem() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "subsystem",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "subsystem" with operation "replace".
     */
    public void markSubsystemReplace() throws JNCException {
        markLeafReplace("subsystem");
    }

    /**
     * Marks the leaf "subsystem" with operation "merge".
     */
    public void markSubsystemMerge() throws JNCException {
        markLeafMerge("subsystem");
    }

    /**
     * Marks the leaf "subsystem" with operation "create".
     */
    public void markSubsystemCreate() throws JNCException {
        markLeafCreate("subsystem");
    }

    /**
     * Marks the leaf "subsystem" with operation "delete".
     */
    public void markSubsystemDelete() throws JNCException {
        markLeafDelete("subsystem");
    }

    /* Access methods for optional leaf child: "global-title-indicator". */

    /**
     * Gets the value for child leaf "global-title-indicator".
     * @return The value of the leaf.
     */
    public YangEnumeration getGlobalTitleIndicatorValue() throws JNCException {
        YangEnumeration globalTitleIndicator = (YangEnumeration)getValue("global-title-indicator");
        if (globalTitleIndicator == null) {
            globalTitleIndicator = new YangEnumeration("gti0", new String[] {  // default
                "gti0",
                "gti1",
                "gti2",
                "gti3",
                "gti4",
            });
        }
        return globalTitleIndicator;
    }

    /**
     * Sets the value for child leaf "global-title-indicator",
     * using instance of generated typedef class.
     * @param globalTitleIndicatorValue The value to set.
     * @param globalTitleIndicatorValue used during instantiation.
     */
    public void setGlobalTitleIndicatorValue(YangEnumeration globalTitleIndicatorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "global-title-indicator",
            globalTitleIndicatorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "global-title-indicator",
     * using a String value.
     * @param globalTitleIndicatorValue used during instantiation.
     */
    public void setGlobalTitleIndicatorValue(String globalTitleIndicatorValue)
            throws JNCException {
        setGlobalTitleIndicatorValue(new YangEnumeration(globalTitleIndicatorValue, new String[] {
             "gti0",
             "gti1",
             "gti2",
             "gti3",
             "gti4",
        }));
    }

    /**
     * Unsets the value for child leaf "global-title-indicator".
     */
    public void unsetGlobalTitleIndicatorValue() throws JNCException {
        delete("global-title-indicator");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "global-title-indicator" leaf will not have a value.
     */
    public void addGlobalTitleIndicator() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "global-title-indicator",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "global-title-indicator" with operation "replace".
     */
    public void markGlobalTitleIndicatorReplace() throws JNCException {
        markLeafReplace("globalTitleIndicator");
    }

    /**
     * Marks the leaf "global-title-indicator" with operation "merge".
     */
    public void markGlobalTitleIndicatorMerge() throws JNCException {
        markLeafMerge("globalTitleIndicator");
    }

    /**
     * Marks the leaf "global-title-indicator" with operation "create".
     */
    public void markGlobalTitleIndicatorCreate() throws JNCException {
        markLeafCreate("globalTitleIndicator");
    }

    /**
     * Marks the leaf "global-title-indicator" with operation "delete".
     */
    public void markGlobalTitleIndicatorDelete() throws JNCException {
        markLeafDelete("globalTitleIndicator");
    }

    /* Access methods for optional leaf child: "translation-type". */

    /**
     * Gets the value for child leaf "translation-type".
     * @return The value of the leaf.
     */
    public YangUInt8 getTranslationTypeValue() throws JNCException {
        YangUInt8 translationType = (YangUInt8)getValue("translation-type");
        if (translationType == null) {
            translationType = new YangUInt8("0");  // default
        }
        return translationType;
    }

    /**
     * Sets the value for child leaf "translation-type",
     * using instance of generated typedef class.
     * @param translationTypeValue The value to set.
     * @param translationTypeValue used during instantiation.
     */
    public void setTranslationTypeValue(YangUInt8 translationTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "translation-type",
            translationTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "translation-type",
     * using Java primitive values.
     * @param translationTypeValue used during instantiation.
     */
    public void setTranslationTypeValue(short translationTypeValue)
            throws JNCException {
        setTranslationTypeValue(new YangUInt8(translationTypeValue));
    }

    /**
     * Sets the value for child leaf "translation-type",
     * using a String value.
     * @param translationTypeValue used during instantiation.
     */
    public void setTranslationTypeValue(String translationTypeValue)
            throws JNCException {
        setTranslationTypeValue(new YangUInt8(translationTypeValue));
    }

    /**
     * Unsets the value for child leaf "translation-type".
     */
    public void unsetTranslationTypeValue() throws JNCException {
        delete("translation-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "translation-type" leaf will not have a value.
     */
    public void addTranslationType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "translation-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "translation-type" with operation "replace".
     */
    public void markTranslationTypeReplace() throws JNCException {
        markLeafReplace("translationType");
    }

    /**
     * Marks the leaf "translation-type" with operation "merge".
     */
    public void markTranslationTypeMerge() throws JNCException {
        markLeafMerge("translationType");
    }

    /**
     * Marks the leaf "translation-type" with operation "create".
     */
    public void markTranslationTypeCreate() throws JNCException {
        markLeafCreate("translationType");
    }

    /**
     * Marks the leaf "translation-type" with operation "delete".
     */
    public void markTranslationTypeDelete() throws JNCException {
        markLeafDelete("translationType");
    }

    /* Access methods for optional leaf child: "numbering-plan". */

    /**
     * Gets the value for child leaf "numbering-plan".
     * @return The value of the leaf.
     */
    public YangUInt8 getNumberingPlanValue() throws JNCException {
        YangUInt8 numberingPlan = (YangUInt8)getValue("numbering-plan");
        if (numberingPlan == null) {
            numberingPlan = new YangUInt8("0");  // default
        }
        return numberingPlan;
    }

    /**
     * Sets the value for child leaf "numbering-plan",
     * using instance of generated typedef class.
     * @param numberingPlanValue The value to set.
     * @param numberingPlanValue used during instantiation.
     */
    public void setNumberingPlanValue(YangUInt8 numberingPlanValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "numbering-plan",
            numberingPlanValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "numbering-plan",
     * using Java primitive values.
     * @param numberingPlanValue used during instantiation.
     */
    public void setNumberingPlanValue(short numberingPlanValue)
            throws JNCException {
        setNumberingPlanValue(new YangUInt8(numberingPlanValue));
    }

    /**
     * Sets the value for child leaf "numbering-plan",
     * using a String value.
     * @param numberingPlanValue used during instantiation.
     */
    public void setNumberingPlanValue(String numberingPlanValue)
            throws JNCException {
        setNumberingPlanValue(new YangUInt8(numberingPlanValue));
    }

    /**
     * Unsets the value for child leaf "numbering-plan".
     */
    public void unsetNumberingPlanValue() throws JNCException {
        delete("numbering-plan");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "numbering-plan" leaf will not have a value.
     */
    public void addNumberingPlan() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "numbering-plan",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "numbering-plan" with operation "replace".
     */
    public void markNumberingPlanReplace() throws JNCException {
        markLeafReplace("numberingPlan");
    }

    /**
     * Marks the leaf "numbering-plan" with operation "merge".
     */
    public void markNumberingPlanMerge() throws JNCException {
        markLeafMerge("numberingPlan");
    }

    /**
     * Marks the leaf "numbering-plan" with operation "create".
     */
    public void markNumberingPlanCreate() throws JNCException {
        markLeafCreate("numberingPlan");
    }

    /**
     * Marks the leaf "numbering-plan" with operation "delete".
     */
    public void markNumberingPlanDelete() throws JNCException {
        markLeafDelete("numberingPlan");
    }

    /* Access methods for optional leaf child: "nature-of-addr-indicator". */

    /**
     * Gets the value for child leaf "nature-of-addr-indicator".
     * @return The value of the leaf.
     */
    public YangUInt8 getNatureOfAddrIndicatorValue() throws JNCException {
        YangUInt8 natureOfAddrIndicator = (YangUInt8)getValue("nature-of-addr-indicator");
        if (natureOfAddrIndicator == null) {
            natureOfAddrIndicator = new YangUInt8("0");  // default
        }
        return natureOfAddrIndicator;
    }

    /**
     * Sets the value for child leaf "nature-of-addr-indicator",
     * using instance of generated typedef class.
     * @param natureOfAddrIndicatorValue The value to set.
     * @param natureOfAddrIndicatorValue used during instantiation.
     */
    public void setNatureOfAddrIndicatorValue(YangUInt8 natureOfAddrIndicatorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nature-of-addr-indicator",
            natureOfAddrIndicatorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nature-of-addr-indicator",
     * using Java primitive values.
     * @param natureOfAddrIndicatorValue used during instantiation.
     */
    public void setNatureOfAddrIndicatorValue(short natureOfAddrIndicatorValue)
            throws JNCException {
        setNatureOfAddrIndicatorValue(new YangUInt8(natureOfAddrIndicatorValue));
    }

    /**
     * Sets the value for child leaf "nature-of-addr-indicator",
     * using a String value.
     * @param natureOfAddrIndicatorValue used during instantiation.
     */
    public void setNatureOfAddrIndicatorValue(String natureOfAddrIndicatorValue)
            throws JNCException {
        setNatureOfAddrIndicatorValue(new YangUInt8(natureOfAddrIndicatorValue));
    }

    /**
     * Unsets the value for child leaf "nature-of-addr-indicator".
     */
    public void unsetNatureOfAddrIndicatorValue() throws JNCException {
        delete("nature-of-addr-indicator");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nature-of-addr-indicator" leaf will not have a value.
     */
    public void addNatureOfAddrIndicator() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nature-of-addr-indicator",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nature-of-addr-indicator" with operation "replace".
     */
    public void markNatureOfAddrIndicatorReplace() throws JNCException {
        markLeafReplace("natureOfAddrIndicator");
    }

    /**
     * Marks the leaf "nature-of-addr-indicator" with operation "merge".
     */
    public void markNatureOfAddrIndicatorMerge() throws JNCException {
        markLeafMerge("natureOfAddrIndicator");
    }

    /**
     * Marks the leaf "nature-of-addr-indicator" with operation "create".
     */
    public void markNatureOfAddrIndicatorCreate() throws JNCException {
        markLeafCreate("natureOfAddrIndicator");
    }

    /**
     * Marks the leaf "nature-of-addr-indicator" with operation "delete".
     */
    public void markNatureOfAddrIndicatorDelete() throws JNCException {
        markLeafDelete("natureOfAddrIndicator");
    }

    /* Access methods for optional leaf child: "global-title-addr-info". */

    /**
     * Gets the value for child leaf "global-title-addr-info".
     * @return The value of the leaf.
     */
    public YangString getGlobalTitleAddrInfoValue() throws JNCException {
        YangString globalTitleAddrInfo = (YangString)getValue("global-title-addr-info");
        if (globalTitleAddrInfo == null) {
            globalTitleAddrInfo = new YangString("none");  // default
        }
        return globalTitleAddrInfo;
    }

    /**
     * Sets the value for child leaf "global-title-addr-info",
     * using instance of generated typedef class.
     * @param globalTitleAddrInfoValue The value to set.
     * @param globalTitleAddrInfoValue used during instantiation.
     */
    public void setGlobalTitleAddrInfoValue(YangString globalTitleAddrInfoValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "global-title-addr-info",
            globalTitleAddrInfoValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "global-title-addr-info",
     * using a String value.
     * @param globalTitleAddrInfoValue used during instantiation.
     */
    public void setGlobalTitleAddrInfoValue(String globalTitleAddrInfoValue)
            throws JNCException {
        setGlobalTitleAddrInfoValue(new YangString(globalTitleAddrInfoValue));
    }

    /**
     * Unsets the value for child leaf "global-title-addr-info".
     */
    public void unsetGlobalTitleAddrInfoValue() throws JNCException {
        delete("global-title-addr-info");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "global-title-addr-info" leaf will not have a value.
     */
    public void addGlobalTitleAddrInfo() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "global-title-addr-info",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "global-title-addr-info" with operation "replace".
     */
    public void markGlobalTitleAddrInfoReplace() throws JNCException {
        markLeafReplace("globalTitleAddrInfo");
    }

    /**
     * Marks the leaf "global-title-addr-info" with operation "merge".
     */
    public void markGlobalTitleAddrInfoMerge() throws JNCException {
        markLeafMerge("globalTitleAddrInfo");
    }

    /**
     * Marks the leaf "global-title-addr-info" with operation "create".
     */
    public void markGlobalTitleAddrInfoCreate() throws JNCException {
        markLeafCreate("globalTitleAddrInfo");
    }

    /**
     * Marks the leaf "global-title-addr-info" with operation "delete".
     */
    public void markGlobalTitleAddrInfoDelete() throws JNCException {
        markLeafDelete("globalTitleAddrInfo");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
