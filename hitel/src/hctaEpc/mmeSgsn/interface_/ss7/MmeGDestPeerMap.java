/* 
 * @(#)MmeGDestPeerMap.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.ss7;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/ss7/mme-g-dest-peer-map"
 * <p>
 * See line 624 in
 * sigtranConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeGDestPeerMap extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeGDestPeerMap object.
     */
    public MmeGDestPeerMap() {
        super(Epc.NAMESPACE, "mme-g-dest-peer-map");
    }

    /**
     * Constructor for an initialized MmeGDestPeerMap object,
     * 
     * @param destinationPointCodeValue Key argument of child.
     * @param gPeerNameValue Key argument of child.
     */
    public MmeGDestPeerMap(YangString destinationPointCodeValue, YangString gPeerNameValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-g-dest-peer-map");
        Leaf destinationPointCode = new Leaf(Epc.NAMESPACE, "destination-point-code");
        destinationPointCode.setValue(destinationPointCodeValue);
        insertChild(destinationPointCode, childrenNames());
        Leaf gPeerName = new Leaf(Epc.NAMESPACE, "g-peer-name");
        gPeerName.setValue(gPeerNameValue);
        insertChild(gPeerName, childrenNames());
    }

    /**
     * Constructor for an initialized MmeGDestPeerMap object,
     * with String keys.
     * @param destinationPointCodeValue Key argument of child.
     * @param gPeerNameValue Key argument of child.
     */
    public MmeGDestPeerMap(String destinationPointCodeValue, String gPeerNameValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-g-dest-peer-map");
        Leaf destinationPointCode = new Leaf(Epc.NAMESPACE, "destination-point-code");
        destinationPointCode.setValue(new YangString(destinationPointCodeValue));
        insertChild(destinationPointCode, childrenNames());
        Leaf gPeerName = new Leaf(Epc.NAMESPACE, "g-peer-name");
        gPeerName.setValue(new YangString(gPeerNameValue));
        insertChild(gPeerName, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeGDestPeerMap clone() {
        MmeGDestPeerMap copy;
        try {
            copy = new MmeGDestPeerMap(getDestinationPointCodeValue().toString(), getGPeerNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeGDestPeerMap)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeGDestPeerMap cloneShallow() {
        MmeGDestPeerMap copy;
        try {
            copy = new MmeGDestPeerMap(getDestinationPointCodeValue().toString(), getGPeerNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeGDestPeerMap)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "destination-point-code",
            "g-peer-name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "destination-point-code",
            "g-peer-name",
        };
    }

    /* Access methods for leaf child: "destination-point-code". */

    /**
     * Gets the value for child leaf "destination-point-code".
     * @return The value of the leaf.
     */
    public YangString getDestinationPointCodeValue() throws JNCException {
        return (YangString)getValue("destination-point-code");
    }

    /**
     * Sets the value for child leaf "destination-point-code",
     * using instance of generated typedef class.
     * @param destinationPointCodeValue The value to set.
     * @param destinationPointCodeValue used during instantiation.
     */
    public void setDestinationPointCodeValue(YangString destinationPointCodeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "destination-point-code",
            destinationPointCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "destination-point-code",
     * using a String value.
     * @param destinationPointCodeValue used during instantiation.
     */
    public void setDestinationPointCodeValue(String destinationPointCodeValue)
            throws JNCException {
        setDestinationPointCodeValue(new YangString(destinationPointCodeValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "destination-point-code" leaf will not have a value.
     */
    public void addDestinationPointCode() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "destination-point-code",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "g-peer-name". */

    /**
     * Gets the value for child leaf "g-peer-name".
     * @return The value of the leaf.
     */
    public YangString getGPeerNameValue() throws JNCException {
        return (YangString)getValue("g-peer-name");
    }

    /**
     * Sets the value for child leaf "g-peer-name",
     * using instance of generated typedef class.
     * @param gPeerNameValue The value to set.
     * @param gPeerNameValue used during instantiation.
     */
    public void setGPeerNameValue(YangString gPeerNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "g-peer-name",
            gPeerNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "g-peer-name",
     * using a String value.
     * @param gPeerNameValue used during instantiation.
     */
    public void setGPeerNameValue(String gPeerNameValue) throws JNCException {
        setGPeerNameValue(new YangString(gPeerNameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "g-peer-name" leaf will not have a value.
     */
    public void addGPeerName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "g-peer-name",
            null,
            childrenNames());
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
