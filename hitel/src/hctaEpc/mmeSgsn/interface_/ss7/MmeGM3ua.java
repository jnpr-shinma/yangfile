/* 
 * @(#)MmeGM3ua.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.ss7;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/ss7/mme-g-m3ua"
 * <p>
 * See line 479 in
 * sigtranConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeGM3ua extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeGM3ua object.
     */
    public MmeGM3ua() {
        super(Epc.NAMESPACE, "mme-g-m3ua");
    }

    /**
     * Constructor for an initialized MmeGM3ua object,
     * 
     * @param localPointCodeValue Key argument of child.
     */
    public MmeGM3ua(YangString localPointCodeValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-g-m3ua");
        Leaf localPointCode = new Leaf(Epc.NAMESPACE, "local-point-code");
        localPointCode.setValue(localPointCodeValue);
        insertChild(localPointCode, childrenNames());
    }

    /**
     * Constructor for an initialized MmeGM3ua object,
     * with String keys.
     * @param localPointCodeValue Key argument of child.
     */
    public MmeGM3ua(String localPointCodeValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-g-m3ua");
        Leaf localPointCode = new Leaf(Epc.NAMESPACE, "local-point-code");
        localPointCode.setValue(new YangString(localPointCodeValue));
        insertChild(localPointCode, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeGM3ua clone() {
        MmeGM3ua copy;
        try {
            copy = new MmeGM3ua(getLocalPointCodeValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeGM3ua)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeGM3ua cloneShallow() {
        MmeGM3ua copy;
        try {
            copy = new MmeGM3ua(getLocalPointCodeValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeGM3ua)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "local-point-code",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "local-point-code",
            "m3ua-prof-name",
        };
    }

    /* Access methods for leaf child: "local-point-code". */

    /**
     * Gets the value for child leaf "local-point-code".
     * @return The value of the leaf.
     */
    public YangString getLocalPointCodeValue() throws JNCException {
        return (YangString)getValue("local-point-code");
    }

    /**
     * Sets the value for child leaf "local-point-code",
     * using instance of generated typedef class.
     * @param localPointCodeValue The value to set.
     * @param localPointCodeValue used during instantiation.
     */
    public void setLocalPointCodeValue(YangString localPointCodeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-point-code",
            localPointCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-point-code",
     * using a String value.
     * @param localPointCodeValue used during instantiation.
     */
    public void setLocalPointCodeValue(String localPointCodeValue)
            throws JNCException {
        setLocalPointCodeValue(new YangString(localPointCodeValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-point-code" leaf will not have a value.
     */
    public void addLocalPointCode() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-point-code",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "m3ua-prof-name". */

    /**
     * Gets the value for child leaf "m3ua-prof-name".
     * @return The value of the leaf.
     */
    public YangString getM3uaProfNameValue() throws JNCException {
        return (YangString)getValue("m3ua-prof-name");
    }

    /**
     * Sets the value for child leaf "m3ua-prof-name",
     * using instance of generated typedef class.
     * @param m3uaProfNameValue The value to set.
     * @param m3uaProfNameValue used during instantiation.
     */
    public void setM3uaProfNameValue(YangString m3uaProfNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "m3ua-prof-name",
            m3uaProfNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "m3ua-prof-name",
     * using a String value.
     * @param m3uaProfNameValue used during instantiation.
     */
    public void setM3uaProfNameValue(String m3uaProfNameValue)
            throws JNCException {
        setM3uaProfNameValue(new YangString(m3uaProfNameValue));
    }

    /**
     * Unsets the value for child leaf "m3ua-prof-name".
     */
    public void unsetM3uaProfNameValue() throws JNCException {
        delete("m3ua-prof-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "m3ua-prof-name" leaf will not have a value.
     */
    public void addM3uaProfName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "m3ua-prof-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "m3ua-prof-name" with operation "replace".
     */
    public void markM3uaProfNameReplace() throws JNCException {
        markLeafReplace("m3uaProfName");
    }

    /**
     * Marks the leaf "m3ua-prof-name" with operation "merge".
     */
    public void markM3uaProfNameMerge() throws JNCException {
        markLeafMerge("m3uaProfName");
    }

    /**
     * Marks the leaf "m3ua-prof-name" with operation "create".
     */
    public void markM3uaProfNameCreate() throws JNCException {
        markLeafCreate("m3uaProfName");
    }

    /**
     * Marks the leaf "m3ua-prof-name" with operation "delete".
     */
    public void markM3uaProfNameDelete() throws JNCException {
        markLeafDelete("m3uaProfName");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
