/* 
 * @(#)CgfOper.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.ga;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/ga/cgf-oper"
 * <p>
 * See line 107 in
 * agwGaBillingCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class CgfOper extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty CgfOper object.
     */
    public CgfOper() {
        super(Epc.NAMESPACE, "cgf-oper");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public CgfOper clone() {
        return (CgfOper)cloneContent(new CgfOper());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public CgfOper cloneShallow() {
        return (CgfOper)cloneShallowContent(new CgfOper());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "ip-address",
            "port",
            "configured-role",
            "admin-state",
            "oper-state",
            "operating-role",
        };
    }

    /* Access methods for optional leaf child: "ip-address". */

    /**
     * Gets the value for child leaf "ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddressValue() throws JNCException {
        return (IpAddress)getValue("ip-address");
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a JNC type value.
     * @param ipAddressValue The value to set.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(IpAddress ipAddressValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            ipAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a String value.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(String ipAddressValue) throws JNCException {
        setIpAddressValue(new IpAddress(ipAddressValue));
    }

    /**
     * Unsets the value for child leaf "ip-address".
     */
    public void unsetIpAddressValue() throws JNCException {
        delete("ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address" leaf will not have a value.
     */
    public void addIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address" with operation "replace".
     */
    public void markIpAddressReplace() throws JNCException {
        markLeafReplace("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "merge".
     */
    public void markIpAddressMerge() throws JNCException {
        markLeafMerge("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "create".
     */
    public void markIpAddressCreate() throws JNCException {
        markLeafCreate("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "delete".
     */
    public void markIpAddressDelete() throws JNCException {
        markLeafDelete("ipAddress");
    }

    /* Access methods for optional leaf child: "port". */

    /**
     * Gets the value for child leaf "port".
     * @return The value of the leaf.
     */
    public YangUInt16 getPortValue() throws JNCException {
        return (YangUInt16)getValue("port");
    }

    /**
     * Sets the value for child leaf "port",
     * using instance of generated typedef class.
     * @param portValue The value to set.
     * @param portValue used during instantiation.
     */
    public void setPortValue(YangUInt16 portValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port",
            portValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "port",
     * using Java primitive values.
     * @param portValue used during instantiation.
     */
    public void setPortValue(int portValue) throws JNCException {
        setPortValue(new YangUInt16(portValue));
    }

    /**
     * Sets the value for child leaf "port",
     * using a String value.
     * @param portValue used during instantiation.
     */
    public void setPortValue(String portValue) throws JNCException {
        setPortValue(new YangUInt16(portValue));
    }

    /**
     * Unsets the value for child leaf "port".
     */
    public void unsetPortValue() throws JNCException {
        delete("port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "port" leaf will not have a value.
     */
    public void addPort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "port" with operation "replace".
     */
    public void markPortReplace() throws JNCException {
        markLeafReplace("port");
    }

    /**
     * Marks the leaf "port" with operation "merge".
     */
    public void markPortMerge() throws JNCException {
        markLeafMerge("port");
    }

    /**
     * Marks the leaf "port" with operation "create".
     */
    public void markPortCreate() throws JNCException {
        markLeafCreate("port");
    }

    /**
     * Marks the leaf "port" with operation "delete".
     */
    public void markPortDelete() throws JNCException {
        markLeafDelete("port");
    }

    /* Access methods for optional leaf child: "configured-role". */

    /**
     * Gets the value for child leaf "configured-role".
     * @return The value of the leaf.
     */
    public YangString getConfiguredRoleValue() throws JNCException {
        return (YangString)getValue("configured-role");
    }

    /**
     * Sets the value for child leaf "configured-role",
     * using instance of generated typedef class.
     * @param configuredRoleValue The value to set.
     * @param configuredRoleValue used during instantiation.
     */
    public void setConfiguredRoleValue(YangString configuredRoleValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "configured-role",
            configuredRoleValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "configured-role",
     * using a String value.
     * @param configuredRoleValue used during instantiation.
     */
    public void setConfiguredRoleValue(String configuredRoleValue)
            throws JNCException {
        setConfiguredRoleValue(new YangString(configuredRoleValue));
    }

    /**
     * Unsets the value for child leaf "configured-role".
     */
    public void unsetConfiguredRoleValue() throws JNCException {
        delete("configured-role");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "configured-role" leaf will not have a value.
     */
    public void addConfiguredRole() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "configured-role",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "configured-role" with operation "replace".
     */
    public void markConfiguredRoleReplace() throws JNCException {
        markLeafReplace("configuredRole");
    }

    /**
     * Marks the leaf "configured-role" with operation "merge".
     */
    public void markConfiguredRoleMerge() throws JNCException {
        markLeafMerge("configuredRole");
    }

    /**
     * Marks the leaf "configured-role" with operation "create".
     */
    public void markConfiguredRoleCreate() throws JNCException {
        markLeafCreate("configuredRole");
    }

    /**
     * Marks the leaf "configured-role" with operation "delete".
     */
    public void markConfiguredRoleDelete() throws JNCException {
        markLeafDelete("configuredRole");
    }

    /* Access methods for optional leaf child: "admin-state". */

    /**
     * Gets the value for child leaf "admin-state".
     * @return The value of the leaf.
     */
    public YangString getAdminStateValue() throws JNCException {
        return (YangString)getValue("admin-state");
    }

    /**
     * Sets the value for child leaf "admin-state",
     * using instance of generated typedef class.
     * @param adminStateValue The value to set.
     * @param adminStateValue used during instantiation.
     */
    public void setAdminStateValue(YangString adminStateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "admin-state",
            adminStateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "admin-state",
     * using a String value.
     * @param adminStateValue used during instantiation.
     */
    public void setAdminStateValue(String adminStateValue) throws JNCException {
        setAdminStateValue(new YangString(adminStateValue));
    }

    /**
     * Unsets the value for child leaf "admin-state".
     */
    public void unsetAdminStateValue() throws JNCException {
        delete("admin-state");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "admin-state" leaf will not have a value.
     */
    public void addAdminState() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "admin-state",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "admin-state" with operation "replace".
     */
    public void markAdminStateReplace() throws JNCException {
        markLeafReplace("adminState");
    }

    /**
     * Marks the leaf "admin-state" with operation "merge".
     */
    public void markAdminStateMerge() throws JNCException {
        markLeafMerge("adminState");
    }

    /**
     * Marks the leaf "admin-state" with operation "create".
     */
    public void markAdminStateCreate() throws JNCException {
        markLeafCreate("adminState");
    }

    /**
     * Marks the leaf "admin-state" with operation "delete".
     */
    public void markAdminStateDelete() throws JNCException {
        markLeafDelete("adminState");
    }

    /* Access methods for optional leaf child: "oper-state". */

    /**
     * Gets the value for child leaf "oper-state".
     * @return The value of the leaf.
     */
    public YangString getOperStateValue() throws JNCException {
        return (YangString)getValue("oper-state");
    }

    /**
     * Sets the value for child leaf "oper-state",
     * using instance of generated typedef class.
     * @param operStateValue The value to set.
     * @param operStateValue used during instantiation.
     */
    public void setOperStateValue(YangString operStateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "oper-state",
            operStateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "oper-state",
     * using a String value.
     * @param operStateValue used during instantiation.
     */
    public void setOperStateValue(String operStateValue) throws JNCException {
        setOperStateValue(new YangString(operStateValue));
    }

    /**
     * Unsets the value for child leaf "oper-state".
     */
    public void unsetOperStateValue() throws JNCException {
        delete("oper-state");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "oper-state" leaf will not have a value.
     */
    public void addOperState() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "oper-state",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "oper-state" with operation "replace".
     */
    public void markOperStateReplace() throws JNCException {
        markLeafReplace("operState");
    }

    /**
     * Marks the leaf "oper-state" with operation "merge".
     */
    public void markOperStateMerge() throws JNCException {
        markLeafMerge("operState");
    }

    /**
     * Marks the leaf "oper-state" with operation "create".
     */
    public void markOperStateCreate() throws JNCException {
        markLeafCreate("operState");
    }

    /**
     * Marks the leaf "oper-state" with operation "delete".
     */
    public void markOperStateDelete() throws JNCException {
        markLeafDelete("operState");
    }

    /* Access methods for optional leaf child: "operating-role". */

    /**
     * Gets the value for child leaf "operating-role".
     * @return The value of the leaf.
     */
    public YangString getOperatingRoleValue() throws JNCException {
        return (YangString)getValue("operating-role");
    }

    /**
     * Sets the value for child leaf "operating-role",
     * using instance of generated typedef class.
     * @param operatingRoleValue The value to set.
     * @param operatingRoleValue used during instantiation.
     */
    public void setOperatingRoleValue(YangString operatingRoleValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "operating-role",
            operatingRoleValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "operating-role",
     * using a String value.
     * @param operatingRoleValue used during instantiation.
     */
    public void setOperatingRoleValue(String operatingRoleValue)
            throws JNCException {
        setOperatingRoleValue(new YangString(operatingRoleValue));
    }

    /**
     * Unsets the value for child leaf "operating-role".
     */
    public void unsetOperatingRoleValue() throws JNCException {
        delete("operating-role");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "operating-role" leaf will not have a value.
     */
    public void addOperatingRole() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "operating-role",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "operating-role" with operation "replace".
     */
    public void markOperatingRoleReplace() throws JNCException {
        markLeafReplace("operatingRole");
    }

    /**
     * Marks the leaf "operating-role" with operation "merge".
     */
    public void markOperatingRoleMerge() throws JNCException {
        markLeafMerge("operatingRole");
    }

    /**
     * Marks the leaf "operating-role" with operation "create".
     */
    public void markOperatingRoleCreate() throws JNCException {
        markLeafCreate("operatingRole");
    }

    /**
     * Marks the leaf "operating-role" with operation "delete".
     */
    public void markOperatingRoleDelete() throws JNCException {
        markLeafDelete("operatingRole");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
