/* 
 * @(#)AgwGaIf.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.ga;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/ga/agw-ga-if"
 * <p>
 * See line 25 in
 * agwGaBillingConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class AgwGaIf extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty AgwGaIf object.
     */
    public AgwGaIf() {
        super(Epc.NAMESPACE, "agw-ga-if");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public AgwGaIf clone() {
        return (AgwGaIf)cloneContent(new AgwGaIf());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public AgwGaIf cloneShallow() {
        return (AgwGaIf)cloneShallowContent(new AgwGaIf());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "routing-instance",
            "ip-address",
            "echo-request-interval",
            "drt-response-timer",
            "drt-retry",
        };
    }

    /* Access methods for optional leaf child: "routing-instance". */

    /**
     * Gets the value for child leaf "routing-instance".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstanceValue() throws JNCException {
        return (YangString)getValue("routing-instance");
    }

    /**
     * Sets the value for child leaf "routing-instance",
     * using instance of generated typedef class.
     * @param routingInstanceValue The value to set.
     * @param routingInstanceValue used during instantiation.
     */
    public void setRoutingInstanceValue(YangString routingInstanceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance",
            routingInstanceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance",
     * using a String value.
     * @param routingInstanceValue used during instantiation.
     */
    public void setRoutingInstanceValue(String routingInstanceValue)
            throws JNCException {
        setRoutingInstanceValue(new YangString(routingInstanceValue));
    }

    /**
     * Unsets the value for child leaf "routing-instance".
     */
    public void unsetRoutingInstanceValue() throws JNCException {
        delete("routing-instance");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance" leaf will not have a value.
     */
    public void addRoutingInstance() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance" with operation "replace".
     */
    public void markRoutingInstanceReplace() throws JNCException {
        markLeafReplace("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "merge".
     */
    public void markRoutingInstanceMerge() throws JNCException {
        markLeafMerge("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "create".
     */
    public void markRoutingInstanceCreate() throws JNCException {
        markLeafCreate("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "delete".
     */
    public void markRoutingInstanceDelete() throws JNCException {
        markLeafDelete("routingInstance");
    }

    /* Access methods for optional leaf child: "ip-address". */

    /**
     * Gets the value for child leaf "ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddressValue() throws JNCException {
        return (IpAddress)getValue("ip-address");
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a JNC type value.
     * @param ipAddressValue The value to set.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(IpAddress ipAddressValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            ipAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a String value.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(String ipAddressValue) throws JNCException {
        setIpAddressValue(new IpAddress(ipAddressValue));
    }

    /**
     * Unsets the value for child leaf "ip-address".
     */
    public void unsetIpAddressValue() throws JNCException {
        delete("ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address" leaf will not have a value.
     */
    public void addIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address" with operation "replace".
     */
    public void markIpAddressReplace() throws JNCException {
        markLeafReplace("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "merge".
     */
    public void markIpAddressMerge() throws JNCException {
        markLeafMerge("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "create".
     */
    public void markIpAddressCreate() throws JNCException {
        markLeafCreate("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "delete".
     */
    public void markIpAddressDelete() throws JNCException {
        markLeafDelete("ipAddress");
    }

    /* Access methods for optional leaf child: "echo-request-interval". */

    /**
     * Gets the value for child leaf "echo-request-interval".
     * @return The value of the leaf.
     */
    public YangUInt8 getEchoRequestIntervalValue() throws JNCException {
        YangUInt8 echoRequestInterval = (YangUInt8)getValue("echo-request-interval");
        if (echoRequestInterval == null) {
            echoRequestInterval = new YangUInt8("1");  // default
        }
        return echoRequestInterval;
    }

    /**
     * Sets the value for child leaf "echo-request-interval",
     * using instance of generated typedef class.
     * @param echoRequestIntervalValue The value to set.
     * @param echoRequestIntervalValue used during instantiation.
     */
    public void setEchoRequestIntervalValue(YangUInt8 echoRequestIntervalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "echo-request-interval",
            echoRequestIntervalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "echo-request-interval",
     * using Java primitive values.
     * @param echoRequestIntervalValue used during instantiation.
     */
    public void setEchoRequestIntervalValue(short echoRequestIntervalValue)
            throws JNCException {
        setEchoRequestIntervalValue(new YangUInt8(echoRequestIntervalValue));
    }

    /**
     * Sets the value for child leaf "echo-request-interval",
     * using a String value.
     * @param echoRequestIntervalValue used during instantiation.
     */
    public void setEchoRequestIntervalValue(String echoRequestIntervalValue)
            throws JNCException {
        setEchoRequestIntervalValue(new YangUInt8(echoRequestIntervalValue));
    }

    /**
     * Unsets the value for child leaf "echo-request-interval".
     */
    public void unsetEchoRequestIntervalValue() throws JNCException {
        delete("echo-request-interval");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "echo-request-interval" leaf will not have a value.
     */
    public void addEchoRequestInterval() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "echo-request-interval",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "echo-request-interval" with operation "replace".
     */
    public void markEchoRequestIntervalReplace() throws JNCException {
        markLeafReplace("echoRequestInterval");
    }

    /**
     * Marks the leaf "echo-request-interval" with operation "merge".
     */
    public void markEchoRequestIntervalMerge() throws JNCException {
        markLeafMerge("echoRequestInterval");
    }

    /**
     * Marks the leaf "echo-request-interval" with operation "create".
     */
    public void markEchoRequestIntervalCreate() throws JNCException {
        markLeafCreate("echoRequestInterval");
    }

    /**
     * Marks the leaf "echo-request-interval" with operation "delete".
     */
    public void markEchoRequestIntervalDelete() throws JNCException {
        markLeafDelete("echoRequestInterval");
    }

    /* Access methods for optional leaf child: "drt-response-timer". */

    /**
     * Gets the value for child leaf "drt-response-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getDrtResponseTimerValue() throws JNCException {
        YangUInt8 drtResponseTimer = (YangUInt8)getValue("drt-response-timer");
        if (drtResponseTimer == null) {
            drtResponseTimer = new YangUInt8("5");  // default
        }
        return drtResponseTimer;
    }

    /**
     * Sets the value for child leaf "drt-response-timer",
     * using instance of generated typedef class.
     * @param drtResponseTimerValue The value to set.
     * @param drtResponseTimerValue used during instantiation.
     */
    public void setDrtResponseTimerValue(YangUInt8 drtResponseTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "drt-response-timer",
            drtResponseTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "drt-response-timer",
     * using Java primitive values.
     * @param drtResponseTimerValue used during instantiation.
     */
    public void setDrtResponseTimerValue(short drtResponseTimerValue)
            throws JNCException {
        setDrtResponseTimerValue(new YangUInt8(drtResponseTimerValue));
    }

    /**
     * Sets the value for child leaf "drt-response-timer",
     * using a String value.
     * @param drtResponseTimerValue used during instantiation.
     */
    public void setDrtResponseTimerValue(String drtResponseTimerValue)
            throws JNCException {
        setDrtResponseTimerValue(new YangUInt8(drtResponseTimerValue));
    }

    /**
     * Unsets the value for child leaf "drt-response-timer".
     */
    public void unsetDrtResponseTimerValue() throws JNCException {
        delete("drt-response-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "drt-response-timer" leaf will not have a value.
     */
    public void addDrtResponseTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "drt-response-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "drt-response-timer" with operation "replace".
     */
    public void markDrtResponseTimerReplace() throws JNCException {
        markLeafReplace("drtResponseTimer");
    }

    /**
     * Marks the leaf "drt-response-timer" with operation "merge".
     */
    public void markDrtResponseTimerMerge() throws JNCException {
        markLeafMerge("drtResponseTimer");
    }

    /**
     * Marks the leaf "drt-response-timer" with operation "create".
     */
    public void markDrtResponseTimerCreate() throws JNCException {
        markLeafCreate("drtResponseTimer");
    }

    /**
     * Marks the leaf "drt-response-timer" with operation "delete".
     */
    public void markDrtResponseTimerDelete() throws JNCException {
        markLeafDelete("drtResponseTimer");
    }

    /* Access methods for optional leaf child: "drt-retry". */

    /**
     * Gets the value for child leaf "drt-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getDrtRetryValue() throws JNCException {
        YangUInt8 drtRetry = (YangUInt8)getValue("drt-retry");
        if (drtRetry == null) {
            drtRetry = new YangUInt8("1");  // default
        }
        return drtRetry;
    }

    /**
     * Sets the value for child leaf "drt-retry",
     * using instance of generated typedef class.
     * @param drtRetryValue The value to set.
     * @param drtRetryValue used during instantiation.
     */
    public void setDrtRetryValue(YangUInt8 drtRetryValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "drt-retry",
            drtRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "drt-retry",
     * using Java primitive values.
     * @param drtRetryValue used during instantiation.
     */
    public void setDrtRetryValue(short drtRetryValue) throws JNCException {
        setDrtRetryValue(new YangUInt8(drtRetryValue));
    }

    /**
     * Sets the value for child leaf "drt-retry",
     * using a String value.
     * @param drtRetryValue used during instantiation.
     */
    public void setDrtRetryValue(String drtRetryValue) throws JNCException {
        setDrtRetryValue(new YangUInt8(drtRetryValue));
    }

    /**
     * Unsets the value for child leaf "drt-retry".
     */
    public void unsetDrtRetryValue() throws JNCException {
        delete("drt-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "drt-retry" leaf will not have a value.
     */
    public void addDrtRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "drt-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "drt-retry" with operation "replace".
     */
    public void markDrtRetryReplace() throws JNCException {
        markLeafReplace("drtRetry");
    }

    /**
     * Marks the leaf "drt-retry" with operation "merge".
     */
    public void markDrtRetryMerge() throws JNCException {
        markLeafMerge("drtRetry");
    }

    /**
     * Marks the leaf "drt-retry" with operation "create".
     */
    public void markDrtRetryCreate() throws JNCException {
        markLeafCreate("drtRetry");
    }

    /**
     * Marks the leaf "drt-retry" with operation "delete".
     */
    public void markDrtRetryDelete() throws JNCException {
        markLeafDelete("drtRetry");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
