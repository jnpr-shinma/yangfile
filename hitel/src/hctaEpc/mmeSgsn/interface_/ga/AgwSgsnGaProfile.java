/* 
 * @(#)AgwSgsnGaProfile.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.ga;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/ga/agw-sgsn-ga-profile"
 * <p>
 * See line 92 in
 * agwGaBillingConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class AgwSgsnGaProfile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty AgwSgsnGaProfile object.
     */
    public AgwSgsnGaProfile() {
        super(Epc.NAMESPACE, "agw-sgsn-ga-profile");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public AgwSgsnGaProfile clone() {
        return (AgwSgsnGaProfile)cloneContent(new AgwSgsnGaProfile());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public AgwSgsnGaProfile cloneShallow() {
        return (AgwSgsnGaProfile)cloneShallowContent(new AgwSgsnGaProfile());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "cdr-capture",
            "collection-time",
            "encoding-scheme",
            "version",
            "partial-cdr-type",
            "roamer-capture",
            "tariff-time-change-trigger",
        };
    }

    /* Access methods for optional leaf child: "cdr-capture". */

    /**
     * Gets the value for child leaf "cdr-capture".
     * @return The value of the leaf.
     */
    public YangString getCdrCaptureValue() throws JNCException {
        return (YangString)getValue("cdr-capture");
    }

    /**
     * Sets the value for child leaf "cdr-capture",
     * using instance of generated typedef class.
     * @param cdrCaptureValue The value to set.
     * @param cdrCaptureValue used during instantiation.
     */
    public void setCdrCaptureValue(YangString cdrCaptureValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cdr-capture",
            cdrCaptureValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cdr-capture",
     * using a String value.
     * @param cdrCaptureValue used during instantiation.
     */
    public void setCdrCaptureValue(String cdrCaptureValue) throws JNCException {
        setCdrCaptureValue(new YangString(cdrCaptureValue));
    }

    /**
     * Unsets the value for child leaf "cdr-capture".
     */
    public void unsetCdrCaptureValue() throws JNCException {
        delete("cdr-capture");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cdr-capture" leaf will not have a value.
     */
    public void addCdrCapture() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cdr-capture",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cdr-capture" with operation "replace".
     */
    public void markCdrCaptureReplace() throws JNCException {
        markLeafReplace("cdrCapture");
    }

    /**
     * Marks the leaf "cdr-capture" with operation "merge".
     */
    public void markCdrCaptureMerge() throws JNCException {
        markLeafMerge("cdrCapture");
    }

    /**
     * Marks the leaf "cdr-capture" with operation "create".
     */
    public void markCdrCaptureCreate() throws JNCException {
        markLeafCreate("cdrCapture");
    }

    /**
     * Marks the leaf "cdr-capture" with operation "delete".
     */
    public void markCdrCaptureDelete() throws JNCException {
        markLeafDelete("cdrCapture");
    }

    /* Access methods for optional leaf child: "collection-time". */

    /**
     * Gets the value for child leaf "collection-time".
     * @return The value of the leaf.
     */
    public YangString getCollectionTimeValue() throws JNCException {
        YangString collectionTime = (YangString)getValue("collection-time");
        if (collectionTime == null) {
            collectionTime = new YangString("none");  // default
        }
        return collectionTime;
    }

    /**
     * Sets the value for child leaf "collection-time",
     * using instance of generated typedef class.
     * @param collectionTimeValue The value to set.
     * @param collectionTimeValue used during instantiation.
     */
    public void setCollectionTimeValue(YangString collectionTimeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "collection-time",
            collectionTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "collection-time",
     * using a String value.
     * @param collectionTimeValue used during instantiation.
     */
    public void setCollectionTimeValue(String collectionTimeValue)
            throws JNCException {
        setCollectionTimeValue(new YangString(collectionTimeValue));
    }

    /**
     * Unsets the value for child leaf "collection-time".
     */
    public void unsetCollectionTimeValue() throws JNCException {
        delete("collection-time");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "collection-time" leaf will not have a value.
     */
    public void addCollectionTime() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "collection-time",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "collection-time" with operation "replace".
     */
    public void markCollectionTimeReplace() throws JNCException {
        markLeafReplace("collectionTime");
    }

    /**
     * Marks the leaf "collection-time" with operation "merge".
     */
    public void markCollectionTimeMerge() throws JNCException {
        markLeafMerge("collectionTime");
    }

    /**
     * Marks the leaf "collection-time" with operation "create".
     */
    public void markCollectionTimeCreate() throws JNCException {
        markLeafCreate("collectionTime");
    }

    /**
     * Marks the leaf "collection-time" with operation "delete".
     */
    public void markCollectionTimeDelete() throws JNCException {
        markLeafDelete("collectionTime");
    }

    /* Access methods for optional leaf child: "encoding-scheme". */

    /**
     * Gets the value for child leaf "encoding-scheme".
     * @return The value of the leaf.
     */
    public YangEnumeration getEncodingSchemeValue() throws JNCException {
        YangEnumeration encodingScheme = (YangEnumeration)getValue("encoding-scheme");
        if (encodingScheme == null) {
            encodingScheme = new YangEnumeration("ber", new String[] {  // default
                "per",
                "ber",
            });
        }
        return encodingScheme;
    }

    /**
     * Sets the value for child leaf "encoding-scheme",
     * using instance of generated typedef class.
     * @param encodingSchemeValue The value to set.
     * @param encodingSchemeValue used during instantiation.
     */
    public void setEncodingSchemeValue(YangEnumeration encodingSchemeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "encoding-scheme",
            encodingSchemeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "encoding-scheme",
     * using a String value.
     * @param encodingSchemeValue used during instantiation.
     */
    public void setEncodingSchemeValue(String encodingSchemeValue)
            throws JNCException {
        setEncodingSchemeValue(new YangEnumeration(encodingSchemeValue, new String[] {
             "per",
             "ber",
        }));
    }

    /**
     * Unsets the value for child leaf "encoding-scheme".
     */
    public void unsetEncodingSchemeValue() throws JNCException {
        delete("encoding-scheme");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "encoding-scheme" leaf will not have a value.
     */
    public void addEncodingScheme() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "encoding-scheme",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "encoding-scheme" with operation "replace".
     */
    public void markEncodingSchemeReplace() throws JNCException {
        markLeafReplace("encodingScheme");
    }

    /**
     * Marks the leaf "encoding-scheme" with operation "merge".
     */
    public void markEncodingSchemeMerge() throws JNCException {
        markLeafMerge("encodingScheme");
    }

    /**
     * Marks the leaf "encoding-scheme" with operation "create".
     */
    public void markEncodingSchemeCreate() throws JNCException {
        markLeafCreate("encodingScheme");
    }

    /**
     * Marks the leaf "encoding-scheme" with operation "delete".
     */
    public void markEncodingSchemeDelete() throws JNCException {
        markLeafDelete("encodingScheme");
    }

    /* Access methods for optional leaf child: "version". */

    /**
     * Gets the value for child leaf "version".
     * @return The value of the leaf.
     */
    public YangEnumeration getVersionValue() throws JNCException {
        YangEnumeration version = (YangEnumeration)getValue("version");
        if (version == null) {
            version = new YangEnumeration("10.12.0", new String[] {  // default
                "9.6.1",
                "10.12.0",
            });
        }
        return version;
    }

    /**
     * Sets the value for child leaf "version",
     * using instance of generated typedef class.
     * @param versionValue The value to set.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(YangEnumeration versionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            versionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "version",
     * using a String value.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(String versionValue) throws JNCException {
        setVersionValue(new YangEnumeration(versionValue, new String[] {
             "9.6.1",
             "10.12.0",
        }));
    }

    /**
     * Unsets the value for child leaf "version".
     */
    public void unsetVersionValue() throws JNCException {
        delete("version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "version" leaf will not have a value.
     */
    public void addVersion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "version" with operation "replace".
     */
    public void markVersionReplace() throws JNCException {
        markLeafReplace("version");
    }

    /**
     * Marks the leaf "version" with operation "merge".
     */
    public void markVersionMerge() throws JNCException {
        markLeafMerge("version");
    }

    /**
     * Marks the leaf "version" with operation "create".
     */
    public void markVersionCreate() throws JNCException {
        markLeafCreate("version");
    }

    /**
     * Marks the leaf "version" with operation "delete".
     */
    public void markVersionDelete() throws JNCException {
        markLeafDelete("version");
    }

    /* Access methods for optional leaf child: "partial-cdr-type". */

    /**
     * Gets the value for child leaf "partial-cdr-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getPartialCdrTypeValue() throws JNCException {
        YangEnumeration partialCdrType = (YangEnumeration)getValue("partial-cdr-type");
        if (partialCdrType == null) {
            partialCdrType = new YangEnumeration("full", new String[] {  // default
                "full",
                "reduced",
            });
        }
        return partialCdrType;
    }

    /**
     * Sets the value for child leaf "partial-cdr-type",
     * using instance of generated typedef class.
     * @param partialCdrTypeValue The value to set.
     * @param partialCdrTypeValue used during instantiation.
     */
    public void setPartialCdrTypeValue(YangEnumeration partialCdrTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "partial-cdr-type",
            partialCdrTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "partial-cdr-type",
     * using a String value.
     * @param partialCdrTypeValue used during instantiation.
     */
    public void setPartialCdrTypeValue(String partialCdrTypeValue)
            throws JNCException {
        setPartialCdrTypeValue(new YangEnumeration(partialCdrTypeValue, new String[] {
             "full",
             "reduced",
        }));
    }

    /**
     * Unsets the value for child leaf "partial-cdr-type".
     */
    public void unsetPartialCdrTypeValue() throws JNCException {
        delete("partial-cdr-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "partial-cdr-type" leaf will not have a value.
     */
    public void addPartialCdrType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "partial-cdr-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "partial-cdr-type" with operation "replace".
     */
    public void markPartialCdrTypeReplace() throws JNCException {
        markLeafReplace("partialCdrType");
    }

    /**
     * Marks the leaf "partial-cdr-type" with operation "merge".
     */
    public void markPartialCdrTypeMerge() throws JNCException {
        markLeafMerge("partialCdrType");
    }

    /**
     * Marks the leaf "partial-cdr-type" with operation "create".
     */
    public void markPartialCdrTypeCreate() throws JNCException {
        markLeafCreate("partialCdrType");
    }

    /**
     * Marks the leaf "partial-cdr-type" with operation "delete".
     */
    public void markPartialCdrTypeDelete() throws JNCException {
        markLeafDelete("partialCdrType");
    }

    /* Access methods for optional leaf child: "roamer-capture". */

    /**
     * Gets the value for child leaf "roamer-capture".
     * @return The value of the leaf.
     */
    public YangEnumeration getRoamerCaptureValue() throws JNCException {
        YangEnumeration roamerCapture = (YangEnumeration)getValue("roamer-capture");
        if (roamerCapture == null) {
            roamerCapture = new YangEnumeration("all", new String[] {  // default
                "all",
                "roamer",
            });
        }
        return roamerCapture;
    }

    /**
     * Sets the value for child leaf "roamer-capture",
     * using instance of generated typedef class.
     * @param roamerCaptureValue The value to set.
     * @param roamerCaptureValue used during instantiation.
     */
    public void setRoamerCaptureValue(YangEnumeration roamerCaptureValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "roamer-capture",
            roamerCaptureValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "roamer-capture",
     * using a String value.
     * @param roamerCaptureValue used during instantiation.
     */
    public void setRoamerCaptureValue(String roamerCaptureValue)
            throws JNCException {
        setRoamerCaptureValue(new YangEnumeration(roamerCaptureValue, new String[] {
             "all",
             "roamer",
        }));
    }

    /**
     * Unsets the value for child leaf "roamer-capture".
     */
    public void unsetRoamerCaptureValue() throws JNCException {
        delete("roamer-capture");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "roamer-capture" leaf will not have a value.
     */
    public void addRoamerCapture() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "roamer-capture",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "roamer-capture" with operation "replace".
     */
    public void markRoamerCaptureReplace() throws JNCException {
        markLeafReplace("roamerCapture");
    }

    /**
     * Marks the leaf "roamer-capture" with operation "merge".
     */
    public void markRoamerCaptureMerge() throws JNCException {
        markLeafMerge("roamerCapture");
    }

    /**
     * Marks the leaf "roamer-capture" with operation "create".
     */
    public void markRoamerCaptureCreate() throws JNCException {
        markLeafCreate("roamerCapture");
    }

    /**
     * Marks the leaf "roamer-capture" with operation "delete".
     */
    public void markRoamerCaptureDelete() throws JNCException {
        markLeafDelete("roamerCapture");
    }

    /* Access methods for optional leaf child: "tariff-time-change-trigger". */

    /**
     * Gets the value for child leaf "tariff-time-change-trigger".
     * @return The value of the leaf.
     */
    public YangEnumeration getTariffTimeChangeTriggerValue()
            throws JNCException {
        YangEnumeration tariffTimeChangeTrigger = (YangEnumeration)getValue("tariff-time-change-trigger");
        if (tariffTimeChangeTrigger == null) {
            tariffTimeChangeTrigger = new YangEnumeration("disable", new String[] {  // default
                "disable",
                "enable",
            });
        }
        return tariffTimeChangeTrigger;
    }

    /**
     * Sets the value for child leaf "tariff-time-change-trigger",
     * using instance of generated typedef class.
     * @param tariffTimeChangeTriggerValue The value to set.
     * @param tariffTimeChangeTriggerValue used during instantiation.
     */
    public void setTariffTimeChangeTriggerValue(YangEnumeration tariffTimeChangeTriggerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tariff-time-change-trigger",
            tariffTimeChangeTriggerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tariff-time-change-trigger",
     * using a String value.
     * @param tariffTimeChangeTriggerValue used during instantiation.
     */
    public void setTariffTimeChangeTriggerValue(String tariffTimeChangeTriggerValue)
            throws JNCException {
        setTariffTimeChangeTriggerValue(new YangEnumeration(tariffTimeChangeTriggerValue, new String[] {
             "disable",
             "enable",
        }));
    }

    /**
     * Unsets the value for child leaf "tariff-time-change-trigger".
     */
    public void unsetTariffTimeChangeTriggerValue() throws JNCException {
        delete("tariff-time-change-trigger");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tariff-time-change-trigger" leaf will not have a value.
     */
    public void addTariffTimeChangeTrigger() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tariff-time-change-trigger",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tariff-time-change-trigger" with operation "replace".
     */
    public void markTariffTimeChangeTriggerReplace() throws JNCException {
        markLeafReplace("tariffTimeChangeTrigger");
    }

    /**
     * Marks the leaf "tariff-time-change-trigger" with operation "merge".
     */
    public void markTariffTimeChangeTriggerMerge() throws JNCException {
        markLeafMerge("tariffTimeChangeTrigger");
    }

    /**
     * Marks the leaf "tariff-time-change-trigger" with operation "create".
     */
    public void markTariffTimeChangeTriggerCreate() throws JNCException {
        markLeafCreate("tariffTimeChangeTrigger");
    }

    /**
     * Marks the leaf "tariff-time-change-trigger" with operation "delete".
     */
    public void markTariffTimeChangeTriggerDelete() throws JNCException {
        markLeafDelete("tariffTimeChangeTrigger");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
