/* 
 * @(#)AgwChargingCharacteristics.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.ga;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/ga/agw-charging-characteristics"
 * <p>
 * See line 156 in
 * agwGaBillingConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class AgwChargingCharacteristics extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty AgwChargingCharacteristics object.
     */
    public AgwChargingCharacteristics() {
        super(Epc.NAMESPACE, "agw-charging-characteristics");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public AgwChargingCharacteristics clone() {
        return (AgwChargingCharacteristics)cloneContent(new AgwChargingCharacteristics());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public AgwChargingCharacteristics cloneShallow() {
        return (AgwChargingCharacteristics)cloneShallowContent(new AgwChargingCharacteristics());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "scdr-partial-record-interval",
            "data-volume-limit",
            "scdr-max-containers",
            "mcdr-partial-record-interval",
            "mcdr-max-containers",
            "location-based-billing",
        };
    }

    /* Access methods for optional leaf child: "scdr-partial-record-interval". */

    /**
     * Gets the value for child leaf "scdr-partial-record-interval".
     * @return The value of the leaf.
     */
    public YangUInt16 getScdrPartialRecordIntervalValue() throws JNCException {
        YangUInt16 scdrPartialRecordInterval = (YangUInt16)getValue("scdr-partial-record-interval");
        if (scdrPartialRecordInterval == null) {
            scdrPartialRecordInterval = new YangUInt16("0");  // default
        }
        return scdrPartialRecordInterval;
    }

    /**
     * Sets the value for child leaf "scdr-partial-record-interval",
     * using instance of generated typedef class.
     * @param scdrPartialRecordIntervalValue The value to set.
     * @param scdrPartialRecordIntervalValue used during instantiation.
     */
    public void setScdrPartialRecordIntervalValue(YangUInt16 scdrPartialRecordIntervalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "scdr-partial-record-interval",
            scdrPartialRecordIntervalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scdr-partial-record-interval",
     * using Java primitive values.
     * @param scdrPartialRecordIntervalValue used during instantiation.
     */
    public void setScdrPartialRecordIntervalValue(int scdrPartialRecordIntervalValue)
            throws JNCException {
        setScdrPartialRecordIntervalValue(new YangUInt16(scdrPartialRecordIntervalValue));
    }

    /**
     * Sets the value for child leaf "scdr-partial-record-interval",
     * using a String value.
     * @param scdrPartialRecordIntervalValue used during instantiation.
     */
    public void setScdrPartialRecordIntervalValue(String scdrPartialRecordIntervalValue)
            throws JNCException {
        setScdrPartialRecordIntervalValue(new YangUInt16(scdrPartialRecordIntervalValue));
    }

    /**
     * Unsets the value for child leaf "scdr-partial-record-interval".
     */
    public void unsetScdrPartialRecordIntervalValue() throws JNCException {
        delete("scdr-partial-record-interval");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scdr-partial-record-interval" leaf will not have a value.
     */
    public void addScdrPartialRecordInterval() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "scdr-partial-record-interval",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scdr-partial-record-interval" with operation "replace".
     */
    public void markScdrPartialRecordIntervalReplace() throws JNCException {
        markLeafReplace("scdrPartialRecordInterval");
    }

    /**
     * Marks the leaf "scdr-partial-record-interval" with operation "merge".
     */
    public void markScdrPartialRecordIntervalMerge() throws JNCException {
        markLeafMerge("scdrPartialRecordInterval");
    }

    /**
     * Marks the leaf "scdr-partial-record-interval" with operation "create".
     */
    public void markScdrPartialRecordIntervalCreate() throws JNCException {
        markLeafCreate("scdrPartialRecordInterval");
    }

    /**
     * Marks the leaf "scdr-partial-record-interval" with operation "delete".
     */
    public void markScdrPartialRecordIntervalDelete() throws JNCException {
        markLeafDelete("scdrPartialRecordInterval");
    }

    /* Access methods for optional leaf child: "data-volume-limit". */

    /**
     * Gets the value for child leaf "data-volume-limit".
     * @return The value of the leaf.
     */
    public YangUInt32 getDataVolumeLimitValue() throws JNCException {
        YangUInt32 dataVolumeLimit = (YangUInt32)getValue("data-volume-limit");
        if (dataVolumeLimit == null) {
            dataVolumeLimit = new YangUInt32("128");  // default
        }
        return dataVolumeLimit;
    }

    /**
     * Sets the value for child leaf "data-volume-limit",
     * using instance of generated typedef class.
     * @param dataVolumeLimitValue The value to set.
     * @param dataVolumeLimitValue used during instantiation.
     */
    public void setDataVolumeLimitValue(YangUInt32 dataVolumeLimitValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "data-volume-limit",
            dataVolumeLimitValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "data-volume-limit",
     * using Java primitive values.
     * @param dataVolumeLimitValue used during instantiation.
     */
    public void setDataVolumeLimitValue(long dataVolumeLimitValue)
            throws JNCException {
        setDataVolumeLimitValue(new YangUInt32(dataVolumeLimitValue));
    }

    /**
     * Sets the value for child leaf "data-volume-limit",
     * using a String value.
     * @param dataVolumeLimitValue used during instantiation.
     */
    public void setDataVolumeLimitValue(String dataVolumeLimitValue)
            throws JNCException {
        setDataVolumeLimitValue(new YangUInt32(dataVolumeLimitValue));
    }

    /**
     * Unsets the value for child leaf "data-volume-limit".
     */
    public void unsetDataVolumeLimitValue() throws JNCException {
        delete("data-volume-limit");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "data-volume-limit" leaf will not have a value.
     */
    public void addDataVolumeLimit() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "data-volume-limit",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "data-volume-limit" with operation "replace".
     */
    public void markDataVolumeLimitReplace() throws JNCException {
        markLeafReplace("dataVolumeLimit");
    }

    /**
     * Marks the leaf "data-volume-limit" with operation "merge".
     */
    public void markDataVolumeLimitMerge() throws JNCException {
        markLeafMerge("dataVolumeLimit");
    }

    /**
     * Marks the leaf "data-volume-limit" with operation "create".
     */
    public void markDataVolumeLimitCreate() throws JNCException {
        markLeafCreate("dataVolumeLimit");
    }

    /**
     * Marks the leaf "data-volume-limit" with operation "delete".
     */
    public void markDataVolumeLimitDelete() throws JNCException {
        markLeafDelete("dataVolumeLimit");
    }

    /* Access methods for optional leaf child: "scdr-max-containers". */

    /**
     * Gets the value for child leaf "scdr-max-containers".
     * @return The value of the leaf.
     */
    public YangUInt8 getScdrMaxContainersValue() throws JNCException {
        YangUInt8 scdrMaxContainers = (YangUInt8)getValue("scdr-max-containers");
        if (scdrMaxContainers == null) {
            scdrMaxContainers = new YangUInt8("5");  // default
        }
        return scdrMaxContainers;
    }

    /**
     * Sets the value for child leaf "scdr-max-containers",
     * using instance of generated typedef class.
     * @param scdrMaxContainersValue The value to set.
     * @param scdrMaxContainersValue used during instantiation.
     */
    public void setScdrMaxContainersValue(YangUInt8 scdrMaxContainersValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "scdr-max-containers",
            scdrMaxContainersValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scdr-max-containers",
     * using Java primitive values.
     * @param scdrMaxContainersValue used during instantiation.
     */
    public void setScdrMaxContainersValue(short scdrMaxContainersValue)
            throws JNCException {
        setScdrMaxContainersValue(new YangUInt8(scdrMaxContainersValue));
    }

    /**
     * Sets the value for child leaf "scdr-max-containers",
     * using a String value.
     * @param scdrMaxContainersValue used during instantiation.
     */
    public void setScdrMaxContainersValue(String scdrMaxContainersValue)
            throws JNCException {
        setScdrMaxContainersValue(new YangUInt8(scdrMaxContainersValue));
    }

    /**
     * Unsets the value for child leaf "scdr-max-containers".
     */
    public void unsetScdrMaxContainersValue() throws JNCException {
        delete("scdr-max-containers");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scdr-max-containers" leaf will not have a value.
     */
    public void addScdrMaxContainers() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "scdr-max-containers",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scdr-max-containers" with operation "replace".
     */
    public void markScdrMaxContainersReplace() throws JNCException {
        markLeafReplace("scdrMaxContainers");
    }

    /**
     * Marks the leaf "scdr-max-containers" with operation "merge".
     */
    public void markScdrMaxContainersMerge() throws JNCException {
        markLeafMerge("scdrMaxContainers");
    }

    /**
     * Marks the leaf "scdr-max-containers" with operation "create".
     */
    public void markScdrMaxContainersCreate() throws JNCException {
        markLeafCreate("scdrMaxContainers");
    }

    /**
     * Marks the leaf "scdr-max-containers" with operation "delete".
     */
    public void markScdrMaxContainersDelete() throws JNCException {
        markLeafDelete("scdrMaxContainers");
    }

    /* Access methods for optional leaf child: "mcdr-partial-record-interval". */

    /**
     * Gets the value for child leaf "mcdr-partial-record-interval".
     * @return The value of the leaf.
     */
    public YangUInt16 getMcdrPartialRecordIntervalValue() throws JNCException {
        YangUInt16 mcdrPartialRecordInterval = (YangUInt16)getValue("mcdr-partial-record-interval");
        if (mcdrPartialRecordInterval == null) {
            mcdrPartialRecordInterval = new YangUInt16("0");  // default
        }
        return mcdrPartialRecordInterval;
    }

    /**
     * Sets the value for child leaf "mcdr-partial-record-interval",
     * using instance of generated typedef class.
     * @param mcdrPartialRecordIntervalValue The value to set.
     * @param mcdrPartialRecordIntervalValue used during instantiation.
     */
    public void setMcdrPartialRecordIntervalValue(YangUInt16 mcdrPartialRecordIntervalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mcdr-partial-record-interval",
            mcdrPartialRecordIntervalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mcdr-partial-record-interval",
     * using Java primitive values.
     * @param mcdrPartialRecordIntervalValue used during instantiation.
     */
    public void setMcdrPartialRecordIntervalValue(int mcdrPartialRecordIntervalValue)
            throws JNCException {
        setMcdrPartialRecordIntervalValue(new YangUInt16(mcdrPartialRecordIntervalValue));
    }

    /**
     * Sets the value for child leaf "mcdr-partial-record-interval",
     * using a String value.
     * @param mcdrPartialRecordIntervalValue used during instantiation.
     */
    public void setMcdrPartialRecordIntervalValue(String mcdrPartialRecordIntervalValue)
            throws JNCException {
        setMcdrPartialRecordIntervalValue(new YangUInt16(mcdrPartialRecordIntervalValue));
    }

    /**
     * Unsets the value for child leaf "mcdr-partial-record-interval".
     */
    public void unsetMcdrPartialRecordIntervalValue() throws JNCException {
        delete("mcdr-partial-record-interval");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mcdr-partial-record-interval" leaf will not have a value.
     */
    public void addMcdrPartialRecordInterval() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mcdr-partial-record-interval",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mcdr-partial-record-interval" with operation "replace".
     */
    public void markMcdrPartialRecordIntervalReplace() throws JNCException {
        markLeafReplace("mcdrPartialRecordInterval");
    }

    /**
     * Marks the leaf "mcdr-partial-record-interval" with operation "merge".
     */
    public void markMcdrPartialRecordIntervalMerge() throws JNCException {
        markLeafMerge("mcdrPartialRecordInterval");
    }

    /**
     * Marks the leaf "mcdr-partial-record-interval" with operation "create".
     */
    public void markMcdrPartialRecordIntervalCreate() throws JNCException {
        markLeafCreate("mcdrPartialRecordInterval");
    }

    /**
     * Marks the leaf "mcdr-partial-record-interval" with operation "delete".
     */
    public void markMcdrPartialRecordIntervalDelete() throws JNCException {
        markLeafDelete("mcdrPartialRecordInterval");
    }

    /* Access methods for optional leaf child: "mcdr-max-containers". */

    /**
     * Gets the value for child leaf "mcdr-max-containers".
     * @return The value of the leaf.
     */
    public YangUInt8 getMcdrMaxContainersValue() throws JNCException {
        YangUInt8 mcdrMaxContainers = (YangUInt8)getValue("mcdr-max-containers");
        if (mcdrMaxContainers == null) {
            mcdrMaxContainers = new YangUInt8("5");  // default
        }
        return mcdrMaxContainers;
    }

    /**
     * Sets the value for child leaf "mcdr-max-containers",
     * using instance of generated typedef class.
     * @param mcdrMaxContainersValue The value to set.
     * @param mcdrMaxContainersValue used during instantiation.
     */
    public void setMcdrMaxContainersValue(YangUInt8 mcdrMaxContainersValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mcdr-max-containers",
            mcdrMaxContainersValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mcdr-max-containers",
     * using Java primitive values.
     * @param mcdrMaxContainersValue used during instantiation.
     */
    public void setMcdrMaxContainersValue(short mcdrMaxContainersValue)
            throws JNCException {
        setMcdrMaxContainersValue(new YangUInt8(mcdrMaxContainersValue));
    }

    /**
     * Sets the value for child leaf "mcdr-max-containers",
     * using a String value.
     * @param mcdrMaxContainersValue used during instantiation.
     */
    public void setMcdrMaxContainersValue(String mcdrMaxContainersValue)
            throws JNCException {
        setMcdrMaxContainersValue(new YangUInt8(mcdrMaxContainersValue));
    }

    /**
     * Unsets the value for child leaf "mcdr-max-containers".
     */
    public void unsetMcdrMaxContainersValue() throws JNCException {
        delete("mcdr-max-containers");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mcdr-max-containers" leaf will not have a value.
     */
    public void addMcdrMaxContainers() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mcdr-max-containers",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mcdr-max-containers" with operation "replace".
     */
    public void markMcdrMaxContainersReplace() throws JNCException {
        markLeafReplace("mcdrMaxContainers");
    }

    /**
     * Marks the leaf "mcdr-max-containers" with operation "merge".
     */
    public void markMcdrMaxContainersMerge() throws JNCException {
        markLeafMerge("mcdrMaxContainers");
    }

    /**
     * Marks the leaf "mcdr-max-containers" with operation "create".
     */
    public void markMcdrMaxContainersCreate() throws JNCException {
        markLeafCreate("mcdrMaxContainers");
    }

    /**
     * Marks the leaf "mcdr-max-containers" with operation "delete".
     */
    public void markMcdrMaxContainersDelete() throws JNCException {
        markLeafDelete("mcdrMaxContainers");
    }

    /* Access methods for optional leaf child: "location-based-billing". */

    /**
     * Gets the value for child leaf "location-based-billing".
     * @return The value of the leaf.
     */
    public YangEnumeration getLocationBasedBillingValue() throws JNCException {
        YangEnumeration locationBasedBilling = (YangEnumeration)getValue("location-based-billing");
        if (locationBasedBilling == null) {
            locationBasedBilling = new YangEnumeration("disable", new String[] {  // default
                "disable",
                "enable",
            });
        }
        return locationBasedBilling;
    }

    /**
     * Sets the value for child leaf "location-based-billing",
     * using instance of generated typedef class.
     * @param locationBasedBillingValue The value to set.
     * @param locationBasedBillingValue used during instantiation.
     */
    public void setLocationBasedBillingValue(YangEnumeration locationBasedBillingValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location-based-billing",
            locationBasedBillingValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location-based-billing",
     * using a String value.
     * @param locationBasedBillingValue used during instantiation.
     */
    public void setLocationBasedBillingValue(String locationBasedBillingValue)
            throws JNCException {
        setLocationBasedBillingValue(new YangEnumeration(locationBasedBillingValue, new String[] {
             "disable",
             "enable",
        }));
    }

    /**
     * Unsets the value for child leaf "location-based-billing".
     */
    public void unsetLocationBasedBillingValue() throws JNCException {
        delete("location-based-billing");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location-based-billing" leaf will not have a value.
     */
    public void addLocationBasedBilling() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location-based-billing",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location-based-billing" with operation "replace".
     */
    public void markLocationBasedBillingReplace() throws JNCException {
        markLeafReplace("locationBasedBilling");
    }

    /**
     * Marks the leaf "location-based-billing" with operation "merge".
     */
    public void markLocationBasedBillingMerge() throws JNCException {
        markLeafMerge("locationBasedBilling");
    }

    /**
     * Marks the leaf "location-based-billing" with operation "create".
     */
    public void markLocationBasedBillingCreate() throws JNCException {
        markLeafCreate("locationBasedBilling");
    }

    /**
     * Marks the leaf "location-based-billing" with operation "delete".
     */
    public void markLocationBasedBillingDelete() throws JNCException {
        markLeafDelete("locationBasedBilling");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
