/* 
 * @(#)MmeSndcp.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gb;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gb/mme-sndcp"
 * <p>
 * See line 232 in
 * sdConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeSndcp extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeSndcp object.
     */
    public MmeSndcp() {
        super(Epc.NAMESPACE, "mme-sndcp");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeSndcp clone() {
        return (MmeSndcp)cloneContent(new MmeSndcp());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeSndcp cloneShallow() {
        return (MmeSndcp)cloneShallowContent(new MmeSndcp());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "max-header-compression-entities",
            "allowable-compression-alg",
            "compression-algorithms-in-irau",
            "max-v42bis-entities",
            "v42bis-compression-direction",
            "rfc1144-slots",
            "v42bis-dictionary",
            "v42bis-max-string-size",
            "sn-pdu-timer",
        };
    }

    /* Access methods for optional leaf child: "max-header-compression-entities". */

    /**
     * Gets the value for child leaf "max-header-compression-entities".
     * @return The value of the leaf.
     */
    public YangUInt16 getMaxHeaderCompressionEntitiesValue()
            throws JNCException {
        YangUInt16 maxHeaderCompressionEntities = (YangUInt16)getValue("max-header-compression-entities");
        if (maxHeaderCompressionEntities == null) {
            maxHeaderCompressionEntities = new YangUInt16("0");  // default
        }
        return maxHeaderCompressionEntities;
    }

    /**
     * Sets the value for child leaf "max-header-compression-entities",
     * using instance of generated typedef class.
     * @param maxHeaderCompressionEntitiesValue The value to set.
     * @param maxHeaderCompressionEntitiesValue used during instantiation.
     */
    public void setMaxHeaderCompressionEntitiesValue(YangUInt16 maxHeaderCompressionEntitiesValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-header-compression-entities",
            maxHeaderCompressionEntitiesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-header-compression-entities",
     * using Java primitive values.
     * @param maxHeaderCompressionEntitiesValue used during instantiation.
     */
    public void setMaxHeaderCompressionEntitiesValue(int maxHeaderCompressionEntitiesValue)
            throws JNCException {
        setMaxHeaderCompressionEntitiesValue(new YangUInt16(maxHeaderCompressionEntitiesValue));
    }

    /**
     * Sets the value for child leaf "max-header-compression-entities",
     * using a String value.
     * @param maxHeaderCompressionEntitiesValue used during instantiation.
     */
    public void setMaxHeaderCompressionEntitiesValue(String maxHeaderCompressionEntitiesValue)
            throws JNCException {
        setMaxHeaderCompressionEntitiesValue(new YangUInt16(maxHeaderCompressionEntitiesValue));
    }

    /**
     * Unsets the value for child leaf "max-header-compression-entities".
     */
    public void unsetMaxHeaderCompressionEntitiesValue() throws JNCException {
        delete("max-header-compression-entities");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-header-compression-entities" leaf will not have a value.
     */
    public void addMaxHeaderCompressionEntities() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-header-compression-entities",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-header-compression-entities" with operation "replace".
     */
    public void markMaxHeaderCompressionEntitiesReplace() throws JNCException {
        markLeafReplace("maxHeaderCompressionEntities");
    }

    /**
     * Marks the leaf "max-header-compression-entities" with operation "merge".
     */
    public void markMaxHeaderCompressionEntitiesMerge() throws JNCException {
        markLeafMerge("maxHeaderCompressionEntities");
    }

    /**
     * Marks the leaf "max-header-compression-entities" with operation "create".
     */
    public void markMaxHeaderCompressionEntitiesCreate() throws JNCException {
        markLeafCreate("maxHeaderCompressionEntities");
    }

    /**
     * Marks the leaf "max-header-compression-entities" with operation "delete".
     */
    public void markMaxHeaderCompressionEntitiesDelete() throws JNCException {
        markLeafDelete("maxHeaderCompressionEntities");
    }

    /* Access methods for optional leaf child: "allowable-compression-alg". */

    /**
     * Gets the value for child leaf "allowable-compression-alg".
     * @return The value of the leaf.
     */
    public YangEnumeration getAllowableCompressionAlgValue()
            throws JNCException {
        YangEnumeration allowableCompressionAlg = (YangEnumeration)getValue("allowable-compression-alg");
        if (allowableCompressionAlg == null) {
            allowableCompressionAlg = new YangEnumeration("none", new String[] {  // default
                "none",
                "rfc1144",
            });
        }
        return allowableCompressionAlg;
    }

    /**
     * Sets the value for child leaf "allowable-compression-alg",
     * using instance of generated typedef class.
     * @param allowableCompressionAlgValue The value to set.
     * @param allowableCompressionAlgValue used during instantiation.
     */
    public void setAllowableCompressionAlgValue(YangEnumeration allowableCompressionAlgValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "allowable-compression-alg",
            allowableCompressionAlgValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "allowable-compression-alg",
     * using a String value.
     * @param allowableCompressionAlgValue used during instantiation.
     */
    public void setAllowableCompressionAlgValue(String allowableCompressionAlgValue)
            throws JNCException {
        setAllowableCompressionAlgValue(new YangEnumeration(allowableCompressionAlgValue, new String[] {
             "none",
             "rfc1144",
        }));
    }

    /**
     * Unsets the value for child leaf "allowable-compression-alg".
     */
    public void unsetAllowableCompressionAlgValue() throws JNCException {
        delete("allowable-compression-alg");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "allowable-compression-alg" leaf will not have a value.
     */
    public void addAllowableCompressionAlg() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "allowable-compression-alg",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "allowable-compression-alg" with operation "replace".
     */
    public void markAllowableCompressionAlgReplace() throws JNCException {
        markLeafReplace("allowableCompressionAlg");
    }

    /**
     * Marks the leaf "allowable-compression-alg" with operation "merge".
     */
    public void markAllowableCompressionAlgMerge() throws JNCException {
        markLeafMerge("allowableCompressionAlg");
    }

    /**
     * Marks the leaf "allowable-compression-alg" with operation "create".
     */
    public void markAllowableCompressionAlgCreate() throws JNCException {
        markLeafCreate("allowableCompressionAlg");
    }

    /**
     * Marks the leaf "allowable-compression-alg" with operation "delete".
     */
    public void markAllowableCompressionAlgDelete() throws JNCException {
        markLeafDelete("allowableCompressionAlg");
    }

    /* Access methods for optional leaf child: "compression-algorithms-in-irau". */

    /**
     * Gets the value for child leaf "compression-algorithms-in-irau".
     * @return The value of the leaf.
     */
    public YangString getCompressionAlgorithmsInIrauValue() throws JNCException {
        YangString compressionAlgorithmsInIrau = (YangString)getValue("compression-algorithms-in-irau");
        if (compressionAlgorithmsInIrau == null) {
            compressionAlgorithmsInIrau = new YangString("none");  // default
        }
        return compressionAlgorithmsInIrau;
    }

    /**
     * Sets the value for child leaf "compression-algorithms-in-irau",
     * using instance of generated typedef class.
     * @param compressionAlgorithmsInIrauValue The value to set.
     * @param compressionAlgorithmsInIrauValue used during instantiation.
     */
    public void setCompressionAlgorithmsInIrauValue(YangString compressionAlgorithmsInIrauValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "compression-algorithms-in-irau",
            compressionAlgorithmsInIrauValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "compression-algorithms-in-irau",
     * using a String value.
     * @param compressionAlgorithmsInIrauValue used during instantiation.
     */
    public void setCompressionAlgorithmsInIrauValue(String compressionAlgorithmsInIrauValue)
            throws JNCException {
        setCompressionAlgorithmsInIrauValue(new YangString(compressionAlgorithmsInIrauValue));
    }

    /**
     * Unsets the value for child leaf "compression-algorithms-in-irau".
     */
    public void unsetCompressionAlgorithmsInIrauValue() throws JNCException {
        delete("compression-algorithms-in-irau");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "compression-algorithms-in-irau" leaf will not have a value.
     */
    public void addCompressionAlgorithmsInIrau() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "compression-algorithms-in-irau",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "compression-algorithms-in-irau" with operation "replace".
     */
    public void markCompressionAlgorithmsInIrauReplace() throws JNCException {
        markLeafReplace("compressionAlgorithmsInIrau");
    }

    /**
     * Marks the leaf "compression-algorithms-in-irau" with operation "merge".
     */
    public void markCompressionAlgorithmsInIrauMerge() throws JNCException {
        markLeafMerge("compressionAlgorithmsInIrau");
    }

    /**
     * Marks the leaf "compression-algorithms-in-irau" with operation "create".
     */
    public void markCompressionAlgorithmsInIrauCreate() throws JNCException {
        markLeafCreate("compressionAlgorithmsInIrau");
    }

    /**
     * Marks the leaf "compression-algorithms-in-irau" with operation "delete".
     */
    public void markCompressionAlgorithmsInIrauDelete() throws JNCException {
        markLeafDelete("compressionAlgorithmsInIrau");
    }

    /* Access methods for optional leaf child: "max-v42bis-entities". */

    /**
     * Gets the value for child leaf "max-v42bis-entities".
     * @return The value of the leaf.
     */
    public YangUInt16 getMaxV42bisEntitiesValue() throws JNCException {
        YangUInt16 maxV42bisEntities = (YangUInt16)getValue("max-v42bis-entities");
        if (maxV42bisEntities == null) {
            maxV42bisEntities = new YangUInt16("0");  // default
        }
        return maxV42bisEntities;
    }

    /**
     * Sets the value for child leaf "max-v42bis-entities",
     * using instance of generated typedef class.
     * @param maxV42bisEntitiesValue The value to set.
     * @param maxV42bisEntitiesValue used during instantiation.
     */
    public void setMaxV42bisEntitiesValue(YangUInt16 maxV42bisEntitiesValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-v42bis-entities",
            maxV42bisEntitiesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-v42bis-entities",
     * using Java primitive values.
     * @param maxV42bisEntitiesValue used during instantiation.
     */
    public void setMaxV42bisEntitiesValue(int maxV42bisEntitiesValue)
            throws JNCException {
        setMaxV42bisEntitiesValue(new YangUInt16(maxV42bisEntitiesValue));
    }

    /**
     * Sets the value for child leaf "max-v42bis-entities",
     * using a String value.
     * @param maxV42bisEntitiesValue used during instantiation.
     */
    public void setMaxV42bisEntitiesValue(String maxV42bisEntitiesValue)
            throws JNCException {
        setMaxV42bisEntitiesValue(new YangUInt16(maxV42bisEntitiesValue));
    }

    /**
     * Unsets the value for child leaf "max-v42bis-entities".
     */
    public void unsetMaxV42bisEntitiesValue() throws JNCException {
        delete("max-v42bis-entities");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-v42bis-entities" leaf will not have a value.
     */
    public void addMaxV42bisEntities() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-v42bis-entities",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-v42bis-entities" with operation "replace".
     */
    public void markMaxV42bisEntitiesReplace() throws JNCException {
        markLeafReplace("maxV42bisEntities");
    }

    /**
     * Marks the leaf "max-v42bis-entities" with operation "merge".
     */
    public void markMaxV42bisEntitiesMerge() throws JNCException {
        markLeafMerge("maxV42bisEntities");
    }

    /**
     * Marks the leaf "max-v42bis-entities" with operation "create".
     */
    public void markMaxV42bisEntitiesCreate() throws JNCException {
        markLeafCreate("maxV42bisEntities");
    }

    /**
     * Marks the leaf "max-v42bis-entities" with operation "delete".
     */
    public void markMaxV42bisEntitiesDelete() throws JNCException {
        markLeafDelete("maxV42bisEntities");
    }

    /* Access methods for optional leaf child: "v42bis-compression-direction". */

    /**
     * Gets the value for child leaf "v42bis-compression-direction".
     * @return The value of the leaf.
     */
    public YangEnumeration getV42bisCompressionDirectionValue()
            throws JNCException {
        YangEnumeration v42bisCompressionDirection = (YangEnumeration)getValue("v42bis-compression-direction");
        if (v42bisCompressionDirection == null) {
            v42bisCompressionDirection = new YangEnumeration("both", new String[] {  // default
                "none",
                "from-ms",
                "to-ms",
                "both",
            });
        }
        return v42bisCompressionDirection;
    }

    /**
     * Sets the value for child leaf "v42bis-compression-direction",
     * using instance of generated typedef class.
     * @param v42bisCompressionDirectionValue The value to set.
     * @param v42bisCompressionDirectionValue used during instantiation.
     */
    public void setV42bisCompressionDirectionValue(YangEnumeration v42bisCompressionDirectionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-compression-direction",
            v42bisCompressionDirectionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "v42bis-compression-direction",
     * using a String value.
     * @param v42bisCompressionDirectionValue used during instantiation.
     */
    public void setV42bisCompressionDirectionValue(String v42bisCompressionDirectionValue)
            throws JNCException {
        setV42bisCompressionDirectionValue(new YangEnumeration(v42bisCompressionDirectionValue, new String[] {
             "none",
             "from-ms",
             "to-ms",
             "both",
        }));
    }

    /**
     * Unsets the value for child leaf "v42bis-compression-direction".
     */
    public void unsetV42bisCompressionDirectionValue() throws JNCException {
        delete("v42bis-compression-direction");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "v42bis-compression-direction" leaf will not have a value.
     */
    public void addV42bisCompressionDirection() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-compression-direction",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "v42bis-compression-direction" with operation "replace".
     */
    public void markV42bisCompressionDirectionReplace() throws JNCException {
        markLeafReplace("v42bisCompressionDirection");
    }

    /**
     * Marks the leaf "v42bis-compression-direction" with operation "merge".
     */
    public void markV42bisCompressionDirectionMerge() throws JNCException {
        markLeafMerge("v42bisCompressionDirection");
    }

    /**
     * Marks the leaf "v42bis-compression-direction" with operation "create".
     */
    public void markV42bisCompressionDirectionCreate() throws JNCException {
        markLeafCreate("v42bisCompressionDirection");
    }

    /**
     * Marks the leaf "v42bis-compression-direction" with operation "delete".
     */
    public void markV42bisCompressionDirectionDelete() throws JNCException {
        markLeafDelete("v42bisCompressionDirection");
    }

    /* Access methods for optional leaf child: "rfc1144-slots". */

    /**
     * Gets the value for child leaf "rfc1144-slots".
     * @return The value of the leaf.
     */
    public YangUInt16 getRfc1144SlotsValue() throws JNCException {
        YangUInt16 rfc1144Slots = (YangUInt16)getValue("rfc1144-slots");
        if (rfc1144Slots == null) {
            rfc1144Slots = new YangUInt16("16");  // default
        }
        return rfc1144Slots;
    }

    /**
     * Sets the value for child leaf "rfc1144-slots",
     * using instance of generated typedef class.
     * @param rfc1144SlotsValue The value to set.
     * @param rfc1144SlotsValue used during instantiation.
     */
    public void setRfc1144SlotsValue(YangUInt16 rfc1144SlotsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-slots",
            rfc1144SlotsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rfc1144-slots",
     * using Java primitive values.
     * @param rfc1144SlotsValue used during instantiation.
     */
    public void setRfc1144SlotsValue(int rfc1144SlotsValue) throws JNCException {
        setRfc1144SlotsValue(new YangUInt16(rfc1144SlotsValue));
    }

    /**
     * Sets the value for child leaf "rfc1144-slots",
     * using a String value.
     * @param rfc1144SlotsValue used during instantiation.
     */
    public void setRfc1144SlotsValue(String rfc1144SlotsValue)
            throws JNCException {
        setRfc1144SlotsValue(new YangUInt16(rfc1144SlotsValue));
    }

    /**
     * Unsets the value for child leaf "rfc1144-slots".
     */
    public void unsetRfc1144SlotsValue() throws JNCException {
        delete("rfc1144-slots");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rfc1144-slots" leaf will not have a value.
     */
    public void addRfc1144Slots() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rfc1144-slots",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rfc1144-slots" with operation "replace".
     */
    public void markRfc1144SlotsReplace() throws JNCException {
        markLeafReplace("rfc1144Slots");
    }

    /**
     * Marks the leaf "rfc1144-slots" with operation "merge".
     */
    public void markRfc1144SlotsMerge() throws JNCException {
        markLeafMerge("rfc1144Slots");
    }

    /**
     * Marks the leaf "rfc1144-slots" with operation "create".
     */
    public void markRfc1144SlotsCreate() throws JNCException {
        markLeafCreate("rfc1144Slots");
    }

    /**
     * Marks the leaf "rfc1144-slots" with operation "delete".
     */
    public void markRfc1144SlotsDelete() throws JNCException {
        markLeafDelete("rfc1144Slots");
    }

    /* Access methods for optional leaf child: "v42bis-dictionary". */

    /**
     * Gets the value for child leaf "v42bis-dictionary".
     * @return The value of the leaf.
     */
    public YangEnumeration getV42bisDictionaryValue() throws JNCException {
        YangEnumeration v42bisDictionary = (YangEnumeration)getValue("v42bis-dictionary");
        if (v42bisDictionary == null) {
            v42bisDictionary = new YangEnumeration("512", new String[] {  // default
                "512",
                "1024",
                "2048",
                "4096",
            });
        }
        return v42bisDictionary;
    }

    /**
     * Sets the value for child leaf "v42bis-dictionary",
     * using instance of generated typedef class.
     * @param v42bisDictionaryValue The value to set.
     * @param v42bisDictionaryValue used during instantiation.
     */
    public void setV42bisDictionaryValue(YangEnumeration v42bisDictionaryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-dictionary",
            v42bisDictionaryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "v42bis-dictionary",
     * using a String value.
     * @param v42bisDictionaryValue used during instantiation.
     */
    public void setV42bisDictionaryValue(String v42bisDictionaryValue)
            throws JNCException {
        setV42bisDictionaryValue(new YangEnumeration(v42bisDictionaryValue, new String[] {
             "512",
             "1024",
             "2048",
             "4096",
        }));
    }

    /**
     * Unsets the value for child leaf "v42bis-dictionary".
     */
    public void unsetV42bisDictionaryValue() throws JNCException {
        delete("v42bis-dictionary");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "v42bis-dictionary" leaf will not have a value.
     */
    public void addV42bisDictionary() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-dictionary",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "v42bis-dictionary" with operation "replace".
     */
    public void markV42bisDictionaryReplace() throws JNCException {
        markLeafReplace("v42bisDictionary");
    }

    /**
     * Marks the leaf "v42bis-dictionary" with operation "merge".
     */
    public void markV42bisDictionaryMerge() throws JNCException {
        markLeafMerge("v42bisDictionary");
    }

    /**
     * Marks the leaf "v42bis-dictionary" with operation "create".
     */
    public void markV42bisDictionaryCreate() throws JNCException {
        markLeafCreate("v42bisDictionary");
    }

    /**
     * Marks the leaf "v42bis-dictionary" with operation "delete".
     */
    public void markV42bisDictionaryDelete() throws JNCException {
        markLeafDelete("v42bisDictionary");
    }

    /* Access methods for optional leaf child: "v42bis-max-string-size". */

    /**
     * Gets the value for child leaf "v42bis-max-string-size".
     * @return The value of the leaf.
     */
    public YangUInt8 getV42bisMaxStringSizeValue() throws JNCException {
        YangUInt8 v42bisMaxStringSize = (YangUInt8)getValue("v42bis-max-string-size");
        if (v42bisMaxStringSize == null) {
            v42bisMaxStringSize = new YangUInt8("20");  // default
        }
        return v42bisMaxStringSize;
    }

    /**
     * Sets the value for child leaf "v42bis-max-string-size",
     * using instance of generated typedef class.
     * @param v42bisMaxStringSizeValue The value to set.
     * @param v42bisMaxStringSizeValue used during instantiation.
     */
    public void setV42bisMaxStringSizeValue(YangUInt8 v42bisMaxStringSizeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-max-string-size",
            v42bisMaxStringSizeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "v42bis-max-string-size",
     * using Java primitive values.
     * @param v42bisMaxStringSizeValue used during instantiation.
     */
    public void setV42bisMaxStringSizeValue(short v42bisMaxStringSizeValue)
            throws JNCException {
        setV42bisMaxStringSizeValue(new YangUInt8(v42bisMaxStringSizeValue));
    }

    /**
     * Sets the value for child leaf "v42bis-max-string-size",
     * using a String value.
     * @param v42bisMaxStringSizeValue used during instantiation.
     */
    public void setV42bisMaxStringSizeValue(String v42bisMaxStringSizeValue)
            throws JNCException {
        setV42bisMaxStringSizeValue(new YangUInt8(v42bisMaxStringSizeValue));
    }

    /**
     * Unsets the value for child leaf "v42bis-max-string-size".
     */
    public void unsetV42bisMaxStringSizeValue() throws JNCException {
        delete("v42bis-max-string-size");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "v42bis-max-string-size" leaf will not have a value.
     */
    public void addV42bisMaxStringSize() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "v42bis-max-string-size",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "v42bis-max-string-size" with operation "replace".
     */
    public void markV42bisMaxStringSizeReplace() throws JNCException {
        markLeafReplace("v42bisMaxStringSize");
    }

    /**
     * Marks the leaf "v42bis-max-string-size" with operation "merge".
     */
    public void markV42bisMaxStringSizeMerge() throws JNCException {
        markLeafMerge("v42bisMaxStringSize");
    }

    /**
     * Marks the leaf "v42bis-max-string-size" with operation "create".
     */
    public void markV42bisMaxStringSizeCreate() throws JNCException {
        markLeafCreate("v42bisMaxStringSize");
    }

    /**
     * Marks the leaf "v42bis-max-string-size" with operation "delete".
     */
    public void markV42bisMaxStringSizeDelete() throws JNCException {
        markLeafDelete("v42bisMaxStringSize");
    }

    /* Access methods for optional leaf child: "sn-pdu-timer". */

    /**
     * Gets the value for child leaf "sn-pdu-timer".
     * @return The value of the leaf.
     */
    public YangUInt16 getSnPduTimerValue() throws JNCException {
        YangUInt16 snPduTimer = (YangUInt16)getValue("sn-pdu-timer");
        if (snPduTimer == null) {
            snPduTimer = new YangUInt16("60");  // default
        }
        return snPduTimer;
    }

    /**
     * Sets the value for child leaf "sn-pdu-timer",
     * using instance of generated typedef class.
     * @param snPduTimerValue The value to set.
     * @param snPduTimerValue used during instantiation.
     */
    public void setSnPduTimerValue(YangUInt16 snPduTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sn-pdu-timer",
            snPduTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sn-pdu-timer",
     * using Java primitive values.
     * @param snPduTimerValue used during instantiation.
     */
    public void setSnPduTimerValue(int snPduTimerValue) throws JNCException {
        setSnPduTimerValue(new YangUInt16(snPduTimerValue));
    }

    /**
     * Sets the value for child leaf "sn-pdu-timer",
     * using a String value.
     * @param snPduTimerValue used during instantiation.
     */
    public void setSnPduTimerValue(String snPduTimerValue) throws JNCException {
        setSnPduTimerValue(new YangUInt16(snPduTimerValue));
    }

    /**
     * Unsets the value for child leaf "sn-pdu-timer".
     */
    public void unsetSnPduTimerValue() throws JNCException {
        delete("sn-pdu-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sn-pdu-timer" leaf will not have a value.
     */
    public void addSnPduTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sn-pdu-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sn-pdu-timer" with operation "replace".
     */
    public void markSnPduTimerReplace() throws JNCException {
        markLeafReplace("snPduTimer");
    }

    /**
     * Marks the leaf "sn-pdu-timer" with operation "merge".
     */
    public void markSnPduTimerMerge() throws JNCException {
        markLeafMerge("snPduTimer");
    }

    /**
     * Marks the leaf "sn-pdu-timer" with operation "create".
     */
    public void markSnPduTimerCreate() throws JNCException {
        markLeafCreate("snPduTimer");
    }

    /**
     * Marks the leaf "sn-pdu-timer" with operation "delete".
     */
    public void markSnPduTimerDelete() throws JNCException {
        markLeafDelete("snPduTimer");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
