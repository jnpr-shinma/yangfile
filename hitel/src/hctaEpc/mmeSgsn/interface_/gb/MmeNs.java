/* 
 * @(#)MmeNs.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gb;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gb/mme-ns"
 * <p>
 * See line 181 in
 * gtlConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeNs extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeNs object.
     */
    public MmeNs() {
        super(Epc.NAMESPACE, "mme-ns");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeNs clone() {
        return (MmeNs)cloneContent(new MmeNs());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeNs cloneShallow() {
        return (MmeNs)cloneShallowContent(new MmeNs());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "sns-config-retry",
            "sns-delete-retry",
            "sns-guard-timer",
            "ns-test-timer",
            "ns-alive-timer",
            "ns-alive-retry",
        };
    }

    /* Access methods for optional leaf child: "sns-config-retry". */

    /**
     * Gets the value for child leaf "sns-config-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getSnsConfigRetryValue() throws JNCException {
        YangUInt8 snsConfigRetry = (YangUInt8)getValue("sns-config-retry");
        if (snsConfigRetry == null) {
            snsConfigRetry = new YangUInt8("3");  // default
        }
        return snsConfigRetry;
    }

    /**
     * Sets the value for child leaf "sns-config-retry",
     * using instance of generated typedef class.
     * @param snsConfigRetryValue The value to set.
     * @param snsConfigRetryValue used during instantiation.
     */
    public void setSnsConfigRetryValue(YangUInt8 snsConfigRetryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sns-config-retry",
            snsConfigRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sns-config-retry",
     * using Java primitive values.
     * @param snsConfigRetryValue used during instantiation.
     */
    public void setSnsConfigRetryValue(short snsConfigRetryValue)
            throws JNCException {
        setSnsConfigRetryValue(new YangUInt8(snsConfigRetryValue));
    }

    /**
     * Sets the value for child leaf "sns-config-retry",
     * using a String value.
     * @param snsConfigRetryValue used during instantiation.
     */
    public void setSnsConfigRetryValue(String snsConfigRetryValue)
            throws JNCException {
        setSnsConfigRetryValue(new YangUInt8(snsConfigRetryValue));
    }

    /**
     * Unsets the value for child leaf "sns-config-retry".
     */
    public void unsetSnsConfigRetryValue() throws JNCException {
        delete("sns-config-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sns-config-retry" leaf will not have a value.
     */
    public void addSnsConfigRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sns-config-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sns-config-retry" with operation "replace".
     */
    public void markSnsConfigRetryReplace() throws JNCException {
        markLeafReplace("snsConfigRetry");
    }

    /**
     * Marks the leaf "sns-config-retry" with operation "merge".
     */
    public void markSnsConfigRetryMerge() throws JNCException {
        markLeafMerge("snsConfigRetry");
    }

    /**
     * Marks the leaf "sns-config-retry" with operation "create".
     */
    public void markSnsConfigRetryCreate() throws JNCException {
        markLeafCreate("snsConfigRetry");
    }

    /**
     * Marks the leaf "sns-config-retry" with operation "delete".
     */
    public void markSnsConfigRetryDelete() throws JNCException {
        markLeafDelete("snsConfigRetry");
    }

    /* Access methods for optional leaf child: "sns-delete-retry". */

    /**
     * Gets the value for child leaf "sns-delete-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getSnsDeleteRetryValue() throws JNCException {
        YangUInt8 snsDeleteRetry = (YangUInt8)getValue("sns-delete-retry");
        if (snsDeleteRetry == null) {
            snsDeleteRetry = new YangUInt8("3");  // default
        }
        return snsDeleteRetry;
    }

    /**
     * Sets the value for child leaf "sns-delete-retry",
     * using instance of generated typedef class.
     * @param snsDeleteRetryValue The value to set.
     * @param snsDeleteRetryValue used during instantiation.
     */
    public void setSnsDeleteRetryValue(YangUInt8 snsDeleteRetryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sns-delete-retry",
            snsDeleteRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sns-delete-retry",
     * using Java primitive values.
     * @param snsDeleteRetryValue used during instantiation.
     */
    public void setSnsDeleteRetryValue(short snsDeleteRetryValue)
            throws JNCException {
        setSnsDeleteRetryValue(new YangUInt8(snsDeleteRetryValue));
    }

    /**
     * Sets the value for child leaf "sns-delete-retry",
     * using a String value.
     * @param snsDeleteRetryValue used during instantiation.
     */
    public void setSnsDeleteRetryValue(String snsDeleteRetryValue)
            throws JNCException {
        setSnsDeleteRetryValue(new YangUInt8(snsDeleteRetryValue));
    }

    /**
     * Unsets the value for child leaf "sns-delete-retry".
     */
    public void unsetSnsDeleteRetryValue() throws JNCException {
        delete("sns-delete-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sns-delete-retry" leaf will not have a value.
     */
    public void addSnsDeleteRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sns-delete-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sns-delete-retry" with operation "replace".
     */
    public void markSnsDeleteRetryReplace() throws JNCException {
        markLeafReplace("snsDeleteRetry");
    }

    /**
     * Marks the leaf "sns-delete-retry" with operation "merge".
     */
    public void markSnsDeleteRetryMerge() throws JNCException {
        markLeafMerge("snsDeleteRetry");
    }

    /**
     * Marks the leaf "sns-delete-retry" with operation "create".
     */
    public void markSnsDeleteRetryCreate() throws JNCException {
        markLeafCreate("snsDeleteRetry");
    }

    /**
     * Marks the leaf "sns-delete-retry" with operation "delete".
     */
    public void markSnsDeleteRetryDelete() throws JNCException {
        markLeafDelete("snsDeleteRetry");
    }

    /* Access methods for optional leaf child: "sns-guard-timer". */

    /**
     * Gets the value for child leaf "sns-guard-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getSnsGuardTimerValue() throws JNCException {
        YangUInt8 snsGuardTimer = (YangUInt8)getValue("sns-guard-timer");
        if (snsGuardTimer == null) {
            snsGuardTimer = new YangUInt8("3");  // default
        }
        return snsGuardTimer;
    }

    /**
     * Sets the value for child leaf "sns-guard-timer",
     * using instance of generated typedef class.
     * @param snsGuardTimerValue The value to set.
     * @param snsGuardTimerValue used during instantiation.
     */
    public void setSnsGuardTimerValue(YangUInt8 snsGuardTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sns-guard-timer",
            snsGuardTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sns-guard-timer",
     * using Java primitive values.
     * @param snsGuardTimerValue used during instantiation.
     */
    public void setSnsGuardTimerValue(short snsGuardTimerValue)
            throws JNCException {
        setSnsGuardTimerValue(new YangUInt8(snsGuardTimerValue));
    }

    /**
     * Sets the value for child leaf "sns-guard-timer",
     * using a String value.
     * @param snsGuardTimerValue used during instantiation.
     */
    public void setSnsGuardTimerValue(String snsGuardTimerValue)
            throws JNCException {
        setSnsGuardTimerValue(new YangUInt8(snsGuardTimerValue));
    }

    /**
     * Unsets the value for child leaf "sns-guard-timer".
     */
    public void unsetSnsGuardTimerValue() throws JNCException {
        delete("sns-guard-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sns-guard-timer" leaf will not have a value.
     */
    public void addSnsGuardTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sns-guard-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sns-guard-timer" with operation "replace".
     */
    public void markSnsGuardTimerReplace() throws JNCException {
        markLeafReplace("snsGuardTimer");
    }

    /**
     * Marks the leaf "sns-guard-timer" with operation "merge".
     */
    public void markSnsGuardTimerMerge() throws JNCException {
        markLeafMerge("snsGuardTimer");
    }

    /**
     * Marks the leaf "sns-guard-timer" with operation "create".
     */
    public void markSnsGuardTimerCreate() throws JNCException {
        markLeafCreate("snsGuardTimer");
    }

    /**
     * Marks the leaf "sns-guard-timer" with operation "delete".
     */
    public void markSnsGuardTimerDelete() throws JNCException {
        markLeafDelete("snsGuardTimer");
    }

    /* Access methods for optional leaf child: "ns-test-timer". */

    /**
     * Gets the value for child leaf "ns-test-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getNsTestTimerValue() throws JNCException {
        YangUInt8 nsTestTimer = (YangUInt8)getValue("ns-test-timer");
        if (nsTestTimer == null) {
            nsTestTimer = new YangUInt8("30");  // default
        }
        return nsTestTimer;
    }

    /**
     * Sets the value for child leaf "ns-test-timer",
     * using instance of generated typedef class.
     * @param nsTestTimerValue The value to set.
     * @param nsTestTimerValue used during instantiation.
     */
    public void setNsTestTimerValue(YangUInt8 nsTestTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ns-test-timer",
            nsTestTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ns-test-timer",
     * using Java primitive values.
     * @param nsTestTimerValue used during instantiation.
     */
    public void setNsTestTimerValue(short nsTestTimerValue) throws JNCException {
        setNsTestTimerValue(new YangUInt8(nsTestTimerValue));
    }

    /**
     * Sets the value for child leaf "ns-test-timer",
     * using a String value.
     * @param nsTestTimerValue used during instantiation.
     */
    public void setNsTestTimerValue(String nsTestTimerValue)
            throws JNCException {
        setNsTestTimerValue(new YangUInt8(nsTestTimerValue));
    }

    /**
     * Unsets the value for child leaf "ns-test-timer".
     */
    public void unsetNsTestTimerValue() throws JNCException {
        delete("ns-test-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ns-test-timer" leaf will not have a value.
     */
    public void addNsTestTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ns-test-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ns-test-timer" with operation "replace".
     */
    public void markNsTestTimerReplace() throws JNCException {
        markLeafReplace("nsTestTimer");
    }

    /**
     * Marks the leaf "ns-test-timer" with operation "merge".
     */
    public void markNsTestTimerMerge() throws JNCException {
        markLeafMerge("nsTestTimer");
    }

    /**
     * Marks the leaf "ns-test-timer" with operation "create".
     */
    public void markNsTestTimerCreate() throws JNCException {
        markLeafCreate("nsTestTimer");
    }

    /**
     * Marks the leaf "ns-test-timer" with operation "delete".
     */
    public void markNsTestTimerDelete() throws JNCException {
        markLeafDelete("nsTestTimer");
    }

    /* Access methods for optional leaf child: "ns-alive-timer". */

    /**
     * Gets the value for child leaf "ns-alive-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getNsAliveTimerValue() throws JNCException {
        YangUInt8 nsAliveTimer = (YangUInt8)getValue("ns-alive-timer");
        if (nsAliveTimer == null) {
            nsAliveTimer = new YangUInt8("3");  // default
        }
        return nsAliveTimer;
    }

    /**
     * Sets the value for child leaf "ns-alive-timer",
     * using instance of generated typedef class.
     * @param nsAliveTimerValue The value to set.
     * @param nsAliveTimerValue used during instantiation.
     */
    public void setNsAliveTimerValue(YangUInt8 nsAliveTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ns-alive-timer",
            nsAliveTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ns-alive-timer",
     * using Java primitive values.
     * @param nsAliveTimerValue used during instantiation.
     */
    public void setNsAliveTimerValue(short nsAliveTimerValue)
            throws JNCException {
        setNsAliveTimerValue(new YangUInt8(nsAliveTimerValue));
    }

    /**
     * Sets the value for child leaf "ns-alive-timer",
     * using a String value.
     * @param nsAliveTimerValue used during instantiation.
     */
    public void setNsAliveTimerValue(String nsAliveTimerValue)
            throws JNCException {
        setNsAliveTimerValue(new YangUInt8(nsAliveTimerValue));
    }

    /**
     * Unsets the value for child leaf "ns-alive-timer".
     */
    public void unsetNsAliveTimerValue() throws JNCException {
        delete("ns-alive-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ns-alive-timer" leaf will not have a value.
     */
    public void addNsAliveTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ns-alive-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ns-alive-timer" with operation "replace".
     */
    public void markNsAliveTimerReplace() throws JNCException {
        markLeafReplace("nsAliveTimer");
    }

    /**
     * Marks the leaf "ns-alive-timer" with operation "merge".
     */
    public void markNsAliveTimerMerge() throws JNCException {
        markLeafMerge("nsAliveTimer");
    }

    /**
     * Marks the leaf "ns-alive-timer" with operation "create".
     */
    public void markNsAliveTimerCreate() throws JNCException {
        markLeafCreate("nsAliveTimer");
    }

    /**
     * Marks the leaf "ns-alive-timer" with operation "delete".
     */
    public void markNsAliveTimerDelete() throws JNCException {
        markLeafDelete("nsAliveTimer");
    }

    /* Access methods for optional leaf child: "ns-alive-retry". */

    /**
     * Gets the value for child leaf "ns-alive-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getNsAliveRetryValue() throws JNCException {
        YangUInt8 nsAliveRetry = (YangUInt8)getValue("ns-alive-retry");
        if (nsAliveRetry == null) {
            nsAliveRetry = new YangUInt8("10");  // default
        }
        return nsAliveRetry;
    }

    /**
     * Sets the value for child leaf "ns-alive-retry",
     * using instance of generated typedef class.
     * @param nsAliveRetryValue The value to set.
     * @param nsAliveRetryValue used during instantiation.
     */
    public void setNsAliveRetryValue(YangUInt8 nsAliveRetryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ns-alive-retry",
            nsAliveRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ns-alive-retry",
     * using Java primitive values.
     * @param nsAliveRetryValue used during instantiation.
     */
    public void setNsAliveRetryValue(short nsAliveRetryValue)
            throws JNCException {
        setNsAliveRetryValue(new YangUInt8(nsAliveRetryValue));
    }

    /**
     * Sets the value for child leaf "ns-alive-retry",
     * using a String value.
     * @param nsAliveRetryValue used during instantiation.
     */
    public void setNsAliveRetryValue(String nsAliveRetryValue)
            throws JNCException {
        setNsAliveRetryValue(new YangUInt8(nsAliveRetryValue));
    }

    /**
     * Unsets the value for child leaf "ns-alive-retry".
     */
    public void unsetNsAliveRetryValue() throws JNCException {
        delete("ns-alive-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ns-alive-retry" leaf will not have a value.
     */
    public void addNsAliveRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ns-alive-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ns-alive-retry" with operation "replace".
     */
    public void markNsAliveRetryReplace() throws JNCException {
        markLeafReplace("nsAliveRetry");
    }

    /**
     * Marks the leaf "ns-alive-retry" with operation "merge".
     */
    public void markNsAliveRetryMerge() throws JNCException {
        markLeafMerge("nsAliveRetry");
    }

    /**
     * Marks the leaf "ns-alive-retry" with operation "create".
     */
    public void markNsAliveRetryCreate() throws JNCException {
        markLeafCreate("nsAliveRetry");
    }

    /**
     * Marks the leaf "ns-alive-retry" with operation "delete".
     */
    public void markNsAliveRetryDelete() throws JNCException {
        markLeafDelete("nsAliveRetry");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
