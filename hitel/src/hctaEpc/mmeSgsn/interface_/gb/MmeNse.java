/* 
 * @(#)MmeNse.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gb;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt16;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gb/mme-nse"
 * <p>
 * See line 305 in
 * gtlConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeNse extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeNse object.
     */
    public MmeNse() {
        super(Epc.NAMESPACE, "mme-nse");
    }

    /**
     * Constructor for an initialized MmeNse object,
     * 
     * @param nseIdValue Key argument of child.
     */
    public MmeNse(YangUInt16 nseIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-nse");
        Leaf nseId = new Leaf(Epc.NAMESPACE, "nse-id");
        nseId.setValue(nseIdValue);
        insertChild(nseId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeNse object,
     * with String keys.
     * @param nseIdValue Key argument of child.
     */
    public MmeNse(String nseIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-nse");
        Leaf nseId = new Leaf(Epc.NAMESPACE, "nse-id");
        nseId.setValue(new YangUInt16(nseIdValue));
        insertChild(nseId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeNse object,
     * with keys of built in Java types.
     * @param nseIdValue Key argument of child.
     */
    public MmeNse(int nseIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-nse");
        Leaf nseId = new Leaf(Epc.NAMESPACE, "nse-id");
        nseId.setValue(new YangUInt16(nseIdValue));
        insertChild(nseId, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeNse clone() {
        MmeNse copy;
        try {
            copy = new MmeNse(getNseIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeNse)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeNse cloneShallow() {
        MmeNse copy;
        try {
            copy = new MmeNse(getNseIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeNse)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "nse-id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "nse-id",
            "transport-type",
            "port",
            "nsvl-group-id",
        };
    }

    /* Access methods for leaf child: "nse-id". */

    /**
     * Gets the value for child leaf "nse-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getNseIdValue() throws JNCException {
        return (YangUInt16)getValue("nse-id");
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using instance of generated typedef class.
     * @param nseIdValue The value to set.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(YangUInt16 nseIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nse-id",
            nseIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using Java primitive values.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(int nseIdValue) throws JNCException {
        setNseIdValue(new YangUInt16(nseIdValue));
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using a String value.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(String nseIdValue) throws JNCException {
        setNseIdValue(new YangUInt16(nseIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nse-id" leaf will not have a value.
     */
    public void addNseId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nse-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "transport-type". */

    /**
     * Gets the value for child leaf "transport-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getTransportTypeValue() throws JNCException {
        return (YangEnumeration)getValue("transport-type");
    }

    /**
     * Sets the value for child leaf "transport-type",
     * using instance of generated typedef class.
     * @param transportTypeValue The value to set.
     * @param transportTypeValue used during instantiation.
     */
    public void setTransportTypeValue(YangEnumeration transportTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "transport-type",
            transportTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "transport-type",
     * using a String value.
     * @param transportTypeValue used during instantiation.
     */
    public void setTransportTypeValue(String transportTypeValue)
            throws JNCException {
        setTransportTypeValue(new YangEnumeration(transportTypeValue, new String[] {
             "fr",
             "ip",
        }));
    }

    /**
     * Unsets the value for child leaf "transport-type".
     */
    public void unsetTransportTypeValue() throws JNCException {
        delete("transport-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "transport-type" leaf will not have a value.
     */
    public void addTransportType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "transport-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "transport-type" with operation "replace".
     */
    public void markTransportTypeReplace() throws JNCException {
        markLeafReplace("transportType");
    }

    /**
     * Marks the leaf "transport-type" with operation "merge".
     */
    public void markTransportTypeMerge() throws JNCException {
        markLeafMerge("transportType");
    }

    /**
     * Marks the leaf "transport-type" with operation "create".
     */
    public void markTransportTypeCreate() throws JNCException {
        markLeafCreate("transportType");
    }

    /**
     * Marks the leaf "transport-type" with operation "delete".
     */
    public void markTransportTypeDelete() throws JNCException {
        markLeafDelete("transportType");
    }

    /* Access methods for optional leaf child: "port". */

    /**
     * Gets the value for child leaf "port".
     * @return The value of the leaf.
     */
    public YangUInt16 getPortValue() throws JNCException {
        return (YangUInt16)getValue("port");
    }

    /**
     * Sets the value for child leaf "port",
     * using instance of generated typedef class.
     * @param portValue The value to set.
     * @param portValue used during instantiation.
     */
    public void setPortValue(YangUInt16 portValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port",
            portValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "port",
     * using Java primitive values.
     * @param portValue used during instantiation.
     */
    public void setPortValue(int portValue) throws JNCException {
        setPortValue(new YangUInt16(portValue));
    }

    /**
     * Sets the value for child leaf "port",
     * using a String value.
     * @param portValue used during instantiation.
     */
    public void setPortValue(String portValue) throws JNCException {
        setPortValue(new YangUInt16(portValue));
    }

    /**
     * Unsets the value for child leaf "port".
     */
    public void unsetPortValue() throws JNCException {
        delete("port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "port" leaf will not have a value.
     */
    public void addPort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "port" with operation "replace".
     */
    public void markPortReplace() throws JNCException {
        markLeafReplace("port");
    }

    /**
     * Marks the leaf "port" with operation "merge".
     */
    public void markPortMerge() throws JNCException {
        markLeafMerge("port");
    }

    /**
     * Marks the leaf "port" with operation "create".
     */
    public void markPortCreate() throws JNCException {
        markLeafCreate("port");
    }

    /**
     * Marks the leaf "port" with operation "delete".
     */
    public void markPortDelete() throws JNCException {
        markLeafDelete("port");
    }

    /* Access methods for optional leaf child: "nsvl-group-id". */

    /**
     * Gets the value for child leaf "nsvl-group-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getNsvlGroupIdValue() throws JNCException {
        return (YangUInt16)getValue("nsvl-group-id");
    }

    /**
     * Sets the value for child leaf "nsvl-group-id",
     * using instance of generated typedef class.
     * @param nsvlGroupIdValue The value to set.
     * @param nsvlGroupIdValue used during instantiation.
     */
    public void setNsvlGroupIdValue(YangUInt16 nsvlGroupIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl-group-id",
            nsvlGroupIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsvl-group-id",
     * using Java primitive values.
     * @param nsvlGroupIdValue used during instantiation.
     */
    public void setNsvlGroupIdValue(int nsvlGroupIdValue) throws JNCException {
        setNsvlGroupIdValue(new YangUInt16(nsvlGroupIdValue));
    }

    /**
     * Sets the value for child leaf "nsvl-group-id",
     * using a String value.
     * @param nsvlGroupIdValue used during instantiation.
     */
    public void setNsvlGroupIdValue(String nsvlGroupIdValue)
            throws JNCException {
        setNsvlGroupIdValue(new YangUInt16(nsvlGroupIdValue));
    }

    /**
     * Unsets the value for child leaf "nsvl-group-id".
     */
    public void unsetNsvlGroupIdValue() throws JNCException {
        delete("nsvl-group-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsvl-group-id" leaf will not have a value.
     */
    public void addNsvlGroupId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl-group-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nsvl-group-id" with operation "replace".
     */
    public void markNsvlGroupIdReplace() throws JNCException {
        markLeafReplace("nsvlGroupId");
    }

    /**
     * Marks the leaf "nsvl-group-id" with operation "merge".
     */
    public void markNsvlGroupIdMerge() throws JNCException {
        markLeafMerge("nsvlGroupId");
    }

    /**
     * Marks the leaf "nsvl-group-id" with operation "create".
     */
    public void markNsvlGroupIdCreate() throws JNCException {
        markLeafCreate("nsvlGroupId");
    }

    /**
     * Marks the leaf "nsvl-group-id" with operation "delete".
     */
    public void markNsvlGroupIdDelete() throws JNCException {
        markLeafDelete("nsvlGroupId");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
