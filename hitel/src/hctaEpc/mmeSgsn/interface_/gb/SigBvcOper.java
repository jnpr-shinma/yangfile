/* 
 * @(#)SigBvcOper.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gb;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gb/sig-bvc-oper"
 * <p>
 * See line 675 in
 * gtlCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class SigBvcOper extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty SigBvcOper object.
     */
    public SigBvcOper() {
        super(Epc.NAMESPACE, "sig-bvc-oper");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public SigBvcOper clone() {
        return (SigBvcOper)cloneContent(new SigBvcOper());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public SigBvcOper cloneShallow() {
        return (SigBvcOper)cloneShallowContent(new SigBvcOper());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "nse-id",
            "cbl-negotiated",
            "gif-negotiated",
            "inr-negotiated",
            "pfc-negotiated",
            "pfc-fc-negotiated",
            "rim-negotiated",
            "resets-rx",
            "resets-tx",
            "blocks-rx",
            "unblocks-rx",
            "status-rx",
            "status-tx",
            "llc-discarded-pdus",
            "nsvl-group",
            "nsvl",
            "service",
            "location",
            "pid",
        };
    }

    /* Access methods for optional leaf child: "nse-id". */

    /**
     * Gets the value for child leaf "nse-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getNseIdValue() throws JNCException {
        return (YangUInt16)getValue("nse-id");
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using instance of generated typedef class.
     * @param nseIdValue The value to set.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(YangUInt16 nseIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nse-id",
            nseIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using Java primitive values.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(int nseIdValue) throws JNCException {
        setNseIdValue(new YangUInt16(nseIdValue));
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using a String value.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(String nseIdValue) throws JNCException {
        setNseIdValue(new YangUInt16(nseIdValue));
    }

    /**
     * Unsets the value for child leaf "nse-id".
     */
    public void unsetNseIdValue() throws JNCException {
        delete("nse-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nse-id" leaf will not have a value.
     */
    public void addNseId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nse-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nse-id" with operation "replace".
     */
    public void markNseIdReplace() throws JNCException {
        markLeafReplace("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "merge".
     */
    public void markNseIdMerge() throws JNCException {
        markLeafMerge("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "create".
     */
    public void markNseIdCreate() throws JNCException {
        markLeafCreate("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "delete".
     */
    public void markNseIdDelete() throws JNCException {
        markLeafDelete("nseId");
    }

    /* Access methods for optional leaf child: "cbl-negotiated". */

    /**
     * Gets the value for child leaf "cbl-negotiated".
     * @return The value of the leaf.
     */
    public YangString getCblNegotiatedValue() throws JNCException {
        return (YangString)getValue("cbl-negotiated");
    }

    /**
     * Sets the value for child leaf "cbl-negotiated",
     * using instance of generated typedef class.
     * @param cblNegotiatedValue The value to set.
     * @param cblNegotiatedValue used during instantiation.
     */
    public void setCblNegotiatedValue(YangString cblNegotiatedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cbl-negotiated",
            cblNegotiatedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cbl-negotiated",
     * using a String value.
     * @param cblNegotiatedValue used during instantiation.
     */
    public void setCblNegotiatedValue(String cblNegotiatedValue)
            throws JNCException {
        setCblNegotiatedValue(new YangString(cblNegotiatedValue));
    }

    /**
     * Unsets the value for child leaf "cbl-negotiated".
     */
    public void unsetCblNegotiatedValue() throws JNCException {
        delete("cbl-negotiated");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cbl-negotiated" leaf will not have a value.
     */
    public void addCblNegotiated() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cbl-negotiated",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cbl-negotiated" with operation "replace".
     */
    public void markCblNegotiatedReplace() throws JNCException {
        markLeafReplace("cblNegotiated");
    }

    /**
     * Marks the leaf "cbl-negotiated" with operation "merge".
     */
    public void markCblNegotiatedMerge() throws JNCException {
        markLeafMerge("cblNegotiated");
    }

    /**
     * Marks the leaf "cbl-negotiated" with operation "create".
     */
    public void markCblNegotiatedCreate() throws JNCException {
        markLeafCreate("cblNegotiated");
    }

    /**
     * Marks the leaf "cbl-negotiated" with operation "delete".
     */
    public void markCblNegotiatedDelete() throws JNCException {
        markLeafDelete("cblNegotiated");
    }

    /* Access methods for optional leaf child: "gif-negotiated". */

    /**
     * Gets the value for child leaf "gif-negotiated".
     * @return The value of the leaf.
     */
    public YangString getGifNegotiatedValue() throws JNCException {
        return (YangString)getValue("gif-negotiated");
    }

    /**
     * Sets the value for child leaf "gif-negotiated",
     * using instance of generated typedef class.
     * @param gifNegotiatedValue The value to set.
     * @param gifNegotiatedValue used during instantiation.
     */
    public void setGifNegotiatedValue(YangString gifNegotiatedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gif-negotiated",
            gifNegotiatedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gif-negotiated",
     * using a String value.
     * @param gifNegotiatedValue used during instantiation.
     */
    public void setGifNegotiatedValue(String gifNegotiatedValue)
            throws JNCException {
        setGifNegotiatedValue(new YangString(gifNegotiatedValue));
    }

    /**
     * Unsets the value for child leaf "gif-negotiated".
     */
    public void unsetGifNegotiatedValue() throws JNCException {
        delete("gif-negotiated");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gif-negotiated" leaf will not have a value.
     */
    public void addGifNegotiated() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gif-negotiated",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gif-negotiated" with operation "replace".
     */
    public void markGifNegotiatedReplace() throws JNCException {
        markLeafReplace("gifNegotiated");
    }

    /**
     * Marks the leaf "gif-negotiated" with operation "merge".
     */
    public void markGifNegotiatedMerge() throws JNCException {
        markLeafMerge("gifNegotiated");
    }

    /**
     * Marks the leaf "gif-negotiated" with operation "create".
     */
    public void markGifNegotiatedCreate() throws JNCException {
        markLeafCreate("gifNegotiated");
    }

    /**
     * Marks the leaf "gif-negotiated" with operation "delete".
     */
    public void markGifNegotiatedDelete() throws JNCException {
        markLeafDelete("gifNegotiated");
    }

    /* Access methods for optional leaf child: "inr-negotiated". */

    /**
     * Gets the value for child leaf "inr-negotiated".
     * @return The value of the leaf.
     */
    public YangString getInrNegotiatedValue() throws JNCException {
        return (YangString)getValue("inr-negotiated");
    }

    /**
     * Sets the value for child leaf "inr-negotiated",
     * using instance of generated typedef class.
     * @param inrNegotiatedValue The value to set.
     * @param inrNegotiatedValue used during instantiation.
     */
    public void setInrNegotiatedValue(YangString inrNegotiatedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "inr-negotiated",
            inrNegotiatedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "inr-negotiated",
     * using a String value.
     * @param inrNegotiatedValue used during instantiation.
     */
    public void setInrNegotiatedValue(String inrNegotiatedValue)
            throws JNCException {
        setInrNegotiatedValue(new YangString(inrNegotiatedValue));
    }

    /**
     * Unsets the value for child leaf "inr-negotiated".
     */
    public void unsetInrNegotiatedValue() throws JNCException {
        delete("inr-negotiated");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "inr-negotiated" leaf will not have a value.
     */
    public void addInrNegotiated() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "inr-negotiated",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "inr-negotiated" with operation "replace".
     */
    public void markInrNegotiatedReplace() throws JNCException {
        markLeafReplace("inrNegotiated");
    }

    /**
     * Marks the leaf "inr-negotiated" with operation "merge".
     */
    public void markInrNegotiatedMerge() throws JNCException {
        markLeafMerge("inrNegotiated");
    }

    /**
     * Marks the leaf "inr-negotiated" with operation "create".
     */
    public void markInrNegotiatedCreate() throws JNCException {
        markLeafCreate("inrNegotiated");
    }

    /**
     * Marks the leaf "inr-negotiated" with operation "delete".
     */
    public void markInrNegotiatedDelete() throws JNCException {
        markLeafDelete("inrNegotiated");
    }

    /* Access methods for optional leaf child: "pfc-negotiated". */

    /**
     * Gets the value for child leaf "pfc-negotiated".
     * @return The value of the leaf.
     */
    public YangString getPfcNegotiatedValue() throws JNCException {
        return (YangString)getValue("pfc-negotiated");
    }

    /**
     * Sets the value for child leaf "pfc-negotiated",
     * using instance of generated typedef class.
     * @param pfcNegotiatedValue The value to set.
     * @param pfcNegotiatedValue used during instantiation.
     */
    public void setPfcNegotiatedValue(YangString pfcNegotiatedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-negotiated",
            pfcNegotiatedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pfc-negotiated",
     * using a String value.
     * @param pfcNegotiatedValue used during instantiation.
     */
    public void setPfcNegotiatedValue(String pfcNegotiatedValue)
            throws JNCException {
        setPfcNegotiatedValue(new YangString(pfcNegotiatedValue));
    }

    /**
     * Unsets the value for child leaf "pfc-negotiated".
     */
    public void unsetPfcNegotiatedValue() throws JNCException {
        delete("pfc-negotiated");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pfc-negotiated" leaf will not have a value.
     */
    public void addPfcNegotiated() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-negotiated",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pfc-negotiated" with operation "replace".
     */
    public void markPfcNegotiatedReplace() throws JNCException {
        markLeafReplace("pfcNegotiated");
    }

    /**
     * Marks the leaf "pfc-negotiated" with operation "merge".
     */
    public void markPfcNegotiatedMerge() throws JNCException {
        markLeafMerge("pfcNegotiated");
    }

    /**
     * Marks the leaf "pfc-negotiated" with operation "create".
     */
    public void markPfcNegotiatedCreate() throws JNCException {
        markLeafCreate("pfcNegotiated");
    }

    /**
     * Marks the leaf "pfc-negotiated" with operation "delete".
     */
    public void markPfcNegotiatedDelete() throws JNCException {
        markLeafDelete("pfcNegotiated");
    }

    /* Access methods for optional leaf child: "pfc-fc-negotiated". */

    /**
     * Gets the value for child leaf "pfc-fc-negotiated".
     * @return The value of the leaf.
     */
    public YangString getPfcFcNegotiatedValue() throws JNCException {
        return (YangString)getValue("pfc-fc-negotiated");
    }

    /**
     * Sets the value for child leaf "pfc-fc-negotiated",
     * using instance of generated typedef class.
     * @param pfcFcNegotiatedValue The value to set.
     * @param pfcFcNegotiatedValue used during instantiation.
     */
    public void setPfcFcNegotiatedValue(YangString pfcFcNegotiatedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-fc-negotiated",
            pfcFcNegotiatedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pfc-fc-negotiated",
     * using a String value.
     * @param pfcFcNegotiatedValue used during instantiation.
     */
    public void setPfcFcNegotiatedValue(String pfcFcNegotiatedValue)
            throws JNCException {
        setPfcFcNegotiatedValue(new YangString(pfcFcNegotiatedValue));
    }

    /**
     * Unsets the value for child leaf "pfc-fc-negotiated".
     */
    public void unsetPfcFcNegotiatedValue() throws JNCException {
        delete("pfc-fc-negotiated");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pfc-fc-negotiated" leaf will not have a value.
     */
    public void addPfcFcNegotiated() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-fc-negotiated",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pfc-fc-negotiated" with operation "replace".
     */
    public void markPfcFcNegotiatedReplace() throws JNCException {
        markLeafReplace("pfcFcNegotiated");
    }

    /**
     * Marks the leaf "pfc-fc-negotiated" with operation "merge".
     */
    public void markPfcFcNegotiatedMerge() throws JNCException {
        markLeafMerge("pfcFcNegotiated");
    }

    /**
     * Marks the leaf "pfc-fc-negotiated" with operation "create".
     */
    public void markPfcFcNegotiatedCreate() throws JNCException {
        markLeafCreate("pfcFcNegotiated");
    }

    /**
     * Marks the leaf "pfc-fc-negotiated" with operation "delete".
     */
    public void markPfcFcNegotiatedDelete() throws JNCException {
        markLeafDelete("pfcFcNegotiated");
    }

    /* Access methods for optional leaf child: "rim-negotiated". */

    /**
     * Gets the value for child leaf "rim-negotiated".
     * @return The value of the leaf.
     */
    public YangString getRimNegotiatedValue() throws JNCException {
        return (YangString)getValue("rim-negotiated");
    }

    /**
     * Sets the value for child leaf "rim-negotiated",
     * using instance of generated typedef class.
     * @param rimNegotiatedValue The value to set.
     * @param rimNegotiatedValue used during instantiation.
     */
    public void setRimNegotiatedValue(YangString rimNegotiatedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rim-negotiated",
            rimNegotiatedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rim-negotiated",
     * using a String value.
     * @param rimNegotiatedValue used during instantiation.
     */
    public void setRimNegotiatedValue(String rimNegotiatedValue)
            throws JNCException {
        setRimNegotiatedValue(new YangString(rimNegotiatedValue));
    }

    /**
     * Unsets the value for child leaf "rim-negotiated".
     */
    public void unsetRimNegotiatedValue() throws JNCException {
        delete("rim-negotiated");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rim-negotiated" leaf will not have a value.
     */
    public void addRimNegotiated() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rim-negotiated",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rim-negotiated" with operation "replace".
     */
    public void markRimNegotiatedReplace() throws JNCException {
        markLeafReplace("rimNegotiated");
    }

    /**
     * Marks the leaf "rim-negotiated" with operation "merge".
     */
    public void markRimNegotiatedMerge() throws JNCException {
        markLeafMerge("rimNegotiated");
    }

    /**
     * Marks the leaf "rim-negotiated" with operation "create".
     */
    public void markRimNegotiatedCreate() throws JNCException {
        markLeafCreate("rimNegotiated");
    }

    /**
     * Marks the leaf "rim-negotiated" with operation "delete".
     */
    public void markRimNegotiatedDelete() throws JNCException {
        markLeafDelete("rimNegotiated");
    }

    /* Access methods for optional leaf child: "resets-rx". */

    /**
     * Gets the value for child leaf "resets-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getResetsRxValue() throws JNCException {
        return (YangUInt32)getValue("resets-rx");
    }

    /**
     * Sets the value for child leaf "resets-rx",
     * using instance of generated typedef class.
     * @param resetsRxValue The value to set.
     * @param resetsRxValue used during instantiation.
     */
    public void setResetsRxValue(YangUInt32 resetsRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "resets-rx",
            resetsRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "resets-rx",
     * using Java primitive values.
     * @param resetsRxValue used during instantiation.
     */
    public void setResetsRxValue(long resetsRxValue) throws JNCException {
        setResetsRxValue(new YangUInt32(resetsRxValue));
    }

    /**
     * Sets the value for child leaf "resets-rx",
     * using a String value.
     * @param resetsRxValue used during instantiation.
     */
    public void setResetsRxValue(String resetsRxValue) throws JNCException {
        setResetsRxValue(new YangUInt32(resetsRxValue));
    }

    /**
     * Unsets the value for child leaf "resets-rx".
     */
    public void unsetResetsRxValue() throws JNCException {
        delete("resets-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "resets-rx" leaf will not have a value.
     */
    public void addResetsRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "resets-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "resets-rx" with operation "replace".
     */
    public void markResetsRxReplace() throws JNCException {
        markLeafReplace("resetsRx");
    }

    /**
     * Marks the leaf "resets-rx" with operation "merge".
     */
    public void markResetsRxMerge() throws JNCException {
        markLeafMerge("resetsRx");
    }

    /**
     * Marks the leaf "resets-rx" with operation "create".
     */
    public void markResetsRxCreate() throws JNCException {
        markLeafCreate("resetsRx");
    }

    /**
     * Marks the leaf "resets-rx" with operation "delete".
     */
    public void markResetsRxDelete() throws JNCException {
        markLeafDelete("resetsRx");
    }

    /* Access methods for optional leaf child: "resets-tx". */

    /**
     * Gets the value for child leaf "resets-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getResetsTxValue() throws JNCException {
        return (YangUInt32)getValue("resets-tx");
    }

    /**
     * Sets the value for child leaf "resets-tx",
     * using instance of generated typedef class.
     * @param resetsTxValue The value to set.
     * @param resetsTxValue used during instantiation.
     */
    public void setResetsTxValue(YangUInt32 resetsTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "resets-tx",
            resetsTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "resets-tx",
     * using Java primitive values.
     * @param resetsTxValue used during instantiation.
     */
    public void setResetsTxValue(long resetsTxValue) throws JNCException {
        setResetsTxValue(new YangUInt32(resetsTxValue));
    }

    /**
     * Sets the value for child leaf "resets-tx",
     * using a String value.
     * @param resetsTxValue used during instantiation.
     */
    public void setResetsTxValue(String resetsTxValue) throws JNCException {
        setResetsTxValue(new YangUInt32(resetsTxValue));
    }

    /**
     * Unsets the value for child leaf "resets-tx".
     */
    public void unsetResetsTxValue() throws JNCException {
        delete("resets-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "resets-tx" leaf will not have a value.
     */
    public void addResetsTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "resets-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "resets-tx" with operation "replace".
     */
    public void markResetsTxReplace() throws JNCException {
        markLeafReplace("resetsTx");
    }

    /**
     * Marks the leaf "resets-tx" with operation "merge".
     */
    public void markResetsTxMerge() throws JNCException {
        markLeafMerge("resetsTx");
    }

    /**
     * Marks the leaf "resets-tx" with operation "create".
     */
    public void markResetsTxCreate() throws JNCException {
        markLeafCreate("resetsTx");
    }

    /**
     * Marks the leaf "resets-tx" with operation "delete".
     */
    public void markResetsTxDelete() throws JNCException {
        markLeafDelete("resetsTx");
    }

    /* Access methods for optional leaf child: "blocks-rx". */

    /**
     * Gets the value for child leaf "blocks-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getBlocksRxValue() throws JNCException {
        return (YangUInt32)getValue("blocks-rx");
    }

    /**
     * Sets the value for child leaf "blocks-rx",
     * using instance of generated typedef class.
     * @param blocksRxValue The value to set.
     * @param blocksRxValue used during instantiation.
     */
    public void setBlocksRxValue(YangUInt32 blocksRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "blocks-rx",
            blocksRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "blocks-rx",
     * using Java primitive values.
     * @param blocksRxValue used during instantiation.
     */
    public void setBlocksRxValue(long blocksRxValue) throws JNCException {
        setBlocksRxValue(new YangUInt32(blocksRxValue));
    }

    /**
     * Sets the value for child leaf "blocks-rx",
     * using a String value.
     * @param blocksRxValue used during instantiation.
     */
    public void setBlocksRxValue(String blocksRxValue) throws JNCException {
        setBlocksRxValue(new YangUInt32(blocksRxValue));
    }

    /**
     * Unsets the value for child leaf "blocks-rx".
     */
    public void unsetBlocksRxValue() throws JNCException {
        delete("blocks-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "blocks-rx" leaf will not have a value.
     */
    public void addBlocksRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "blocks-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "blocks-rx" with operation "replace".
     */
    public void markBlocksRxReplace() throws JNCException {
        markLeafReplace("blocksRx");
    }

    /**
     * Marks the leaf "blocks-rx" with operation "merge".
     */
    public void markBlocksRxMerge() throws JNCException {
        markLeafMerge("blocksRx");
    }

    /**
     * Marks the leaf "blocks-rx" with operation "create".
     */
    public void markBlocksRxCreate() throws JNCException {
        markLeafCreate("blocksRx");
    }

    /**
     * Marks the leaf "blocks-rx" with operation "delete".
     */
    public void markBlocksRxDelete() throws JNCException {
        markLeafDelete("blocksRx");
    }

    /* Access methods for optional leaf child: "unblocks-rx". */

    /**
     * Gets the value for child leaf "unblocks-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnblocksRxValue() throws JNCException {
        return (YangUInt32)getValue("unblocks-rx");
    }

    /**
     * Sets the value for child leaf "unblocks-rx",
     * using instance of generated typedef class.
     * @param unblocksRxValue The value to set.
     * @param unblocksRxValue used during instantiation.
     */
    public void setUnblocksRxValue(YangUInt32 unblocksRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unblocks-rx",
            unblocksRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unblocks-rx",
     * using Java primitive values.
     * @param unblocksRxValue used during instantiation.
     */
    public void setUnblocksRxValue(long unblocksRxValue) throws JNCException {
        setUnblocksRxValue(new YangUInt32(unblocksRxValue));
    }

    /**
     * Sets the value for child leaf "unblocks-rx",
     * using a String value.
     * @param unblocksRxValue used during instantiation.
     */
    public void setUnblocksRxValue(String unblocksRxValue) throws JNCException {
        setUnblocksRxValue(new YangUInt32(unblocksRxValue));
    }

    /**
     * Unsets the value for child leaf "unblocks-rx".
     */
    public void unsetUnblocksRxValue() throws JNCException {
        delete("unblocks-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unblocks-rx" leaf will not have a value.
     */
    public void addUnblocksRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unblocks-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unblocks-rx" with operation "replace".
     */
    public void markUnblocksRxReplace() throws JNCException {
        markLeafReplace("unblocksRx");
    }

    /**
     * Marks the leaf "unblocks-rx" with operation "merge".
     */
    public void markUnblocksRxMerge() throws JNCException {
        markLeafMerge("unblocksRx");
    }

    /**
     * Marks the leaf "unblocks-rx" with operation "create".
     */
    public void markUnblocksRxCreate() throws JNCException {
        markLeafCreate("unblocksRx");
    }

    /**
     * Marks the leaf "unblocks-rx" with operation "delete".
     */
    public void markUnblocksRxDelete() throws JNCException {
        markLeafDelete("unblocksRx");
    }

    /* Access methods for optional leaf child: "status-rx". */

    /**
     * Gets the value for child leaf "status-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getStatusRxValue() throws JNCException {
        return (YangUInt32)getValue("status-rx");
    }

    /**
     * Sets the value for child leaf "status-rx",
     * using instance of generated typedef class.
     * @param statusRxValue The value to set.
     * @param statusRxValue used during instantiation.
     */
    public void setStatusRxValue(YangUInt32 statusRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-rx",
            statusRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-rx",
     * using Java primitive values.
     * @param statusRxValue used during instantiation.
     */
    public void setStatusRxValue(long statusRxValue) throws JNCException {
        setStatusRxValue(new YangUInt32(statusRxValue));
    }

    /**
     * Sets the value for child leaf "status-rx",
     * using a String value.
     * @param statusRxValue used during instantiation.
     */
    public void setStatusRxValue(String statusRxValue) throws JNCException {
        setStatusRxValue(new YangUInt32(statusRxValue));
    }

    /**
     * Unsets the value for child leaf "status-rx".
     */
    public void unsetStatusRxValue() throws JNCException {
        delete("status-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-rx" leaf will not have a value.
     */
    public void addStatusRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-rx" with operation "replace".
     */
    public void markStatusRxReplace() throws JNCException {
        markLeafReplace("statusRx");
    }

    /**
     * Marks the leaf "status-rx" with operation "merge".
     */
    public void markStatusRxMerge() throws JNCException {
        markLeafMerge("statusRx");
    }

    /**
     * Marks the leaf "status-rx" with operation "create".
     */
    public void markStatusRxCreate() throws JNCException {
        markLeafCreate("statusRx");
    }

    /**
     * Marks the leaf "status-rx" with operation "delete".
     */
    public void markStatusRxDelete() throws JNCException {
        markLeafDelete("statusRx");
    }

    /* Access methods for optional leaf child: "status-tx". */

    /**
     * Gets the value for child leaf "status-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getStatusTxValue() throws JNCException {
        return (YangUInt32)getValue("status-tx");
    }

    /**
     * Sets the value for child leaf "status-tx",
     * using instance of generated typedef class.
     * @param statusTxValue The value to set.
     * @param statusTxValue used during instantiation.
     */
    public void setStatusTxValue(YangUInt32 statusTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-tx",
            statusTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-tx",
     * using Java primitive values.
     * @param statusTxValue used during instantiation.
     */
    public void setStatusTxValue(long statusTxValue) throws JNCException {
        setStatusTxValue(new YangUInt32(statusTxValue));
    }

    /**
     * Sets the value for child leaf "status-tx",
     * using a String value.
     * @param statusTxValue used during instantiation.
     */
    public void setStatusTxValue(String statusTxValue) throws JNCException {
        setStatusTxValue(new YangUInt32(statusTxValue));
    }

    /**
     * Unsets the value for child leaf "status-tx".
     */
    public void unsetStatusTxValue() throws JNCException {
        delete("status-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-tx" leaf will not have a value.
     */
    public void addStatusTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-tx" with operation "replace".
     */
    public void markStatusTxReplace() throws JNCException {
        markLeafReplace("statusTx");
    }

    /**
     * Marks the leaf "status-tx" with operation "merge".
     */
    public void markStatusTxMerge() throws JNCException {
        markLeafMerge("statusTx");
    }

    /**
     * Marks the leaf "status-tx" with operation "create".
     */
    public void markStatusTxCreate() throws JNCException {
        markLeafCreate("statusTx");
    }

    /**
     * Marks the leaf "status-tx" with operation "delete".
     */
    public void markStatusTxDelete() throws JNCException {
        markLeafDelete("statusTx");
    }

    /* Access methods for optional leaf child: "llc-discarded-pdus". */

    /**
     * Gets the value for child leaf "llc-discarded-pdus".
     * @return The value of the leaf.
     */
    public YangUInt32 getLlcDiscardedPdusValue() throws JNCException {
        return (YangUInt32)getValue("llc-discarded-pdus");
    }

    /**
     * Sets the value for child leaf "llc-discarded-pdus",
     * using instance of generated typedef class.
     * @param llcDiscardedPdusValue The value to set.
     * @param llcDiscardedPdusValue used during instantiation.
     */
    public void setLlcDiscardedPdusValue(YangUInt32 llcDiscardedPdusValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "llc-discarded-pdus",
            llcDiscardedPdusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "llc-discarded-pdus",
     * using Java primitive values.
     * @param llcDiscardedPdusValue used during instantiation.
     */
    public void setLlcDiscardedPdusValue(long llcDiscardedPdusValue)
            throws JNCException {
        setLlcDiscardedPdusValue(new YangUInt32(llcDiscardedPdusValue));
    }

    /**
     * Sets the value for child leaf "llc-discarded-pdus",
     * using a String value.
     * @param llcDiscardedPdusValue used during instantiation.
     */
    public void setLlcDiscardedPdusValue(String llcDiscardedPdusValue)
            throws JNCException {
        setLlcDiscardedPdusValue(new YangUInt32(llcDiscardedPdusValue));
    }

    /**
     * Unsets the value for child leaf "llc-discarded-pdus".
     */
    public void unsetLlcDiscardedPdusValue() throws JNCException {
        delete("llc-discarded-pdus");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "llc-discarded-pdus" leaf will not have a value.
     */
    public void addLlcDiscardedPdus() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "llc-discarded-pdus",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "llc-discarded-pdus" with operation "replace".
     */
    public void markLlcDiscardedPdusReplace() throws JNCException {
        markLeafReplace("llcDiscardedPdus");
    }

    /**
     * Marks the leaf "llc-discarded-pdus" with operation "merge".
     */
    public void markLlcDiscardedPdusMerge() throws JNCException {
        markLeafMerge("llcDiscardedPdus");
    }

    /**
     * Marks the leaf "llc-discarded-pdus" with operation "create".
     */
    public void markLlcDiscardedPdusCreate() throws JNCException {
        markLeafCreate("llcDiscardedPdus");
    }

    /**
     * Marks the leaf "llc-discarded-pdus" with operation "delete".
     */
    public void markLlcDiscardedPdusDelete() throws JNCException {
        markLeafDelete("llcDiscardedPdus");
    }

    /* Access methods for optional leaf child: "nsvl-group". */

    /**
     * Gets the value for child leaf "nsvl-group".
     * @return The value of the leaf.
     */
    public YangUInt8 getNsvlGroupValue() throws JNCException {
        return (YangUInt8)getValue("nsvl-group");
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using instance of generated typedef class.
     * @param nsvlGroupValue The value to set.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(YangUInt8 nsvlGroupValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl-group",
            nsvlGroupValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using Java primitive values.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(short nsvlGroupValue) throws JNCException {
        setNsvlGroupValue(new YangUInt8(nsvlGroupValue));
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using a String value.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(String nsvlGroupValue) throws JNCException {
        setNsvlGroupValue(new YangUInt8(nsvlGroupValue));
    }

    /**
     * Unsets the value for child leaf "nsvl-group".
     */
    public void unsetNsvlGroupValue() throws JNCException {
        delete("nsvl-group");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsvl-group" leaf will not have a value.
     */
    public void addNsvlGroup() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl-group",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nsvl-group" with operation "replace".
     */
    public void markNsvlGroupReplace() throws JNCException {
        markLeafReplace("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "merge".
     */
    public void markNsvlGroupMerge() throws JNCException {
        markLeafMerge("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "create".
     */
    public void markNsvlGroupCreate() throws JNCException {
        markLeafCreate("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "delete".
     */
    public void markNsvlGroupDelete() throws JNCException {
        markLeafDelete("nsvlGroup");
    }

    /* Access methods for optional leaf child: "nsvl". */

    /**
     * Gets the value for child leaf "nsvl".
     * @return The value of the leaf.
     */
    public YangUInt8 getNsvlValue() throws JNCException {
        return (YangUInt8)getValue("nsvl");
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using instance of generated typedef class.
     * @param nsvlValue The value to set.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(YangUInt8 nsvlValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl",
            nsvlValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using Java primitive values.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(short nsvlValue) throws JNCException {
        setNsvlValue(new YangUInt8(nsvlValue));
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using a String value.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(String nsvlValue) throws JNCException {
        setNsvlValue(new YangUInt8(nsvlValue));
    }

    /**
     * Unsets the value for child leaf "nsvl".
     */
    public void unsetNsvlValue() throws JNCException {
        delete("nsvl");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsvl" leaf will not have a value.
     */
    public void addNsvl() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nsvl" with operation "replace".
     */
    public void markNsvlReplace() throws JNCException {
        markLeafReplace("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "merge".
     */
    public void markNsvlMerge() throws JNCException {
        markLeafMerge("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "create".
     */
    public void markNsvlCreate() throws JNCException {
        markLeafCreate("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "delete".
     */
    public void markNsvlDelete() throws JNCException {
        markLeafDelete("nsvl");
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "pid". */

    /**
     * Gets the value for child leaf "pid".
     * @return The value of the leaf.
     */
    public YangUInt16 getPidValue() throws JNCException {
        return (YangUInt16)getValue("pid");
    }

    /**
     * Sets the value for child leaf "pid",
     * using instance of generated typedef class.
     * @param pidValue The value to set.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(YangUInt16 pidValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pid",
            pidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pid",
     * using Java primitive values.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(int pidValue) throws JNCException {
        setPidValue(new YangUInt16(pidValue));
    }

    /**
     * Sets the value for child leaf "pid",
     * using a String value.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(String pidValue) throws JNCException {
        setPidValue(new YangUInt16(pidValue));
    }

    /**
     * Unsets the value for child leaf "pid".
     */
    public void unsetPidValue() throws JNCException {
        delete("pid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pid" leaf will not have a value.
     */
    public void addPid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pid" with operation "replace".
     */
    public void markPidReplace() throws JNCException {
        markLeafReplace("pid");
    }

    /**
     * Marks the leaf "pid" with operation "merge".
     */
    public void markPidMerge() throws JNCException {
        markLeafMerge("pid");
    }

    /**
     * Marks the leaf "pid" with operation "create".
     */
    public void markPidCreate() throws JNCException {
        markLeafCreate("pid");
    }

    /**
     * Marks the leaf "pid" with operation "delete".
     */
    public void markPidDelete() throws JNCException {
        markLeafDelete("pid");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
