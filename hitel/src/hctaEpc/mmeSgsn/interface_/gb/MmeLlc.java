/* 
 * @(#)MmeLlc.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gb;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gb/mme-llc"
 * <p>
 * See line 126 in
 * sdConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeLlc extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeLlc object.
     */
    public MmeLlc() {
        super(Epc.NAMESPACE, "mme-llc");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeLlc clone() {
        return (MmeLlc)cloneContent(new MmeLlc());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeLlc cloneShallow() {
        return (MmeLlc)cloneShallowContent(new MmeLlc());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "abm-mode-lle-to-mobile-ratio",
            "flush-logical-link-timer",
            "xid-during-irau-adm-mode",
            "alternate-llc-xid-negotiation",
        };
    }

    /* Access methods for optional leaf child: "abm-mode-lle-to-mobile-ratio". */

    /**
     * Gets the value for child leaf "abm-mode-lle-to-mobile-ratio".
     * @return The value of the leaf.
     */
    public YangUInt8 getAbmModeLleToMobileRatioValue() throws JNCException {
        YangUInt8 abmModeLleToMobileRatio = (YangUInt8)getValue("abm-mode-lle-to-mobile-ratio");
        if (abmModeLleToMobileRatio == null) {
            abmModeLleToMobileRatio = new YangUInt8("15");  // default
        }
        return abmModeLleToMobileRatio;
    }

    /**
     * Sets the value for child leaf "abm-mode-lle-to-mobile-ratio",
     * using instance of generated typedef class.
     * @param abmModeLleToMobileRatioValue The value to set.
     * @param abmModeLleToMobileRatioValue used during instantiation.
     */
    public void setAbmModeLleToMobileRatioValue(YangUInt8 abmModeLleToMobileRatioValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "abm-mode-lle-to-mobile-ratio",
            abmModeLleToMobileRatioValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "abm-mode-lle-to-mobile-ratio",
     * using Java primitive values.
     * @param abmModeLleToMobileRatioValue used during instantiation.
     */
    public void setAbmModeLleToMobileRatioValue(short abmModeLleToMobileRatioValue)
            throws JNCException {
        setAbmModeLleToMobileRatioValue(new YangUInt8(abmModeLleToMobileRatioValue));
    }

    /**
     * Sets the value for child leaf "abm-mode-lle-to-mobile-ratio",
     * using a String value.
     * @param abmModeLleToMobileRatioValue used during instantiation.
     */
    public void setAbmModeLleToMobileRatioValue(String abmModeLleToMobileRatioValue)
            throws JNCException {
        setAbmModeLleToMobileRatioValue(new YangUInt8(abmModeLleToMobileRatioValue));
    }

    /**
     * Unsets the value for child leaf "abm-mode-lle-to-mobile-ratio".
     */
    public void unsetAbmModeLleToMobileRatioValue() throws JNCException {
        delete("abm-mode-lle-to-mobile-ratio");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "abm-mode-lle-to-mobile-ratio" leaf will not have a value.
     */
    public void addAbmModeLleToMobileRatio() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "abm-mode-lle-to-mobile-ratio",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "abm-mode-lle-to-mobile-ratio" with operation "replace".
     */
    public void markAbmModeLleToMobileRatioReplace() throws JNCException {
        markLeafReplace("abmModeLleToMobileRatio");
    }

    /**
     * Marks the leaf "abm-mode-lle-to-mobile-ratio" with operation "merge".
     */
    public void markAbmModeLleToMobileRatioMerge() throws JNCException {
        markLeafMerge("abmModeLleToMobileRatio");
    }

    /**
     * Marks the leaf "abm-mode-lle-to-mobile-ratio" with operation "create".
     */
    public void markAbmModeLleToMobileRatioCreate() throws JNCException {
        markLeafCreate("abmModeLleToMobileRatio");
    }

    /**
     * Marks the leaf "abm-mode-lle-to-mobile-ratio" with operation "delete".
     */
    public void markAbmModeLleToMobileRatioDelete() throws JNCException {
        markLeafDelete("abmModeLleToMobileRatio");
    }

    /* Access methods for optional leaf child: "flush-logical-link-timer". */

    /**
     * Gets the value for child leaf "flush-logical-link-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getFlushLogicalLinkTimerValue() throws JNCException {
        YangUInt8 flushLogicalLinkTimer = (YangUInt8)getValue("flush-logical-link-timer");
        if (flushLogicalLinkTimer == null) {
            flushLogicalLinkTimer = new YangUInt8("5");  // default
        }
        return flushLogicalLinkTimer;
    }

    /**
     * Sets the value for child leaf "flush-logical-link-timer",
     * using instance of generated typedef class.
     * @param flushLogicalLinkTimerValue The value to set.
     * @param flushLogicalLinkTimerValue used during instantiation.
     */
    public void setFlushLogicalLinkTimerValue(YangUInt8 flushLogicalLinkTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "flush-logical-link-timer",
            flushLogicalLinkTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "flush-logical-link-timer",
     * using Java primitive values.
     * @param flushLogicalLinkTimerValue used during instantiation.
     */
    public void setFlushLogicalLinkTimerValue(short flushLogicalLinkTimerValue)
            throws JNCException {
        setFlushLogicalLinkTimerValue(new YangUInt8(flushLogicalLinkTimerValue));
    }

    /**
     * Sets the value for child leaf "flush-logical-link-timer",
     * using a String value.
     * @param flushLogicalLinkTimerValue used during instantiation.
     */
    public void setFlushLogicalLinkTimerValue(String flushLogicalLinkTimerValue)
            throws JNCException {
        setFlushLogicalLinkTimerValue(new YangUInt8(flushLogicalLinkTimerValue));
    }

    /**
     * Unsets the value for child leaf "flush-logical-link-timer".
     */
    public void unsetFlushLogicalLinkTimerValue() throws JNCException {
        delete("flush-logical-link-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "flush-logical-link-timer" leaf will not have a value.
     */
    public void addFlushLogicalLinkTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "flush-logical-link-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "flush-logical-link-timer" with operation "replace".
     */
    public void markFlushLogicalLinkTimerReplace() throws JNCException {
        markLeafReplace("flushLogicalLinkTimer");
    }

    /**
     * Marks the leaf "flush-logical-link-timer" with operation "merge".
     */
    public void markFlushLogicalLinkTimerMerge() throws JNCException {
        markLeafMerge("flushLogicalLinkTimer");
    }

    /**
     * Marks the leaf "flush-logical-link-timer" with operation "create".
     */
    public void markFlushLogicalLinkTimerCreate() throws JNCException {
        markLeafCreate("flushLogicalLinkTimer");
    }

    /**
     * Marks the leaf "flush-logical-link-timer" with operation "delete".
     */
    public void markFlushLogicalLinkTimerDelete() throws JNCException {
        markLeafDelete("flushLogicalLinkTimer");
    }

    /* Access methods for optional leaf child: "xid-during-irau-adm-mode". */

    /**
     * Gets the value for child leaf "xid-during-irau-adm-mode".
     * @return The value of the leaf.
     */
    public YangEnumeration getXidDuringIrauAdmModeValue() throws JNCException {
        YangEnumeration xidDuringIrauAdmMode = (YangEnumeration)getValue("xid-during-irau-adm-mode");
        if (xidDuringIrauAdmMode == null) {
            xidDuringIrauAdmMode = new YangEnumeration("during-irau", new String[] {  // default
                "disable",
                "during-irau",
                "after-irau",
            });
        }
        return xidDuringIrauAdmMode;
    }

    /**
     * Sets the value for child leaf "xid-during-irau-adm-mode",
     * using instance of generated typedef class.
     * @param xidDuringIrauAdmModeValue The value to set.
     * @param xidDuringIrauAdmModeValue used during instantiation.
     */
    public void setXidDuringIrauAdmModeValue(YangEnumeration xidDuringIrauAdmModeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "xid-during-irau-adm-mode",
            xidDuringIrauAdmModeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "xid-during-irau-adm-mode",
     * using a String value.
     * @param xidDuringIrauAdmModeValue used during instantiation.
     */
    public void setXidDuringIrauAdmModeValue(String xidDuringIrauAdmModeValue)
            throws JNCException {
        setXidDuringIrauAdmModeValue(new YangEnumeration(xidDuringIrauAdmModeValue, new String[] {
             "disable",
             "during-irau",
             "after-irau",
        }));
    }

    /**
     * Unsets the value for child leaf "xid-during-irau-adm-mode".
     */
    public void unsetXidDuringIrauAdmModeValue() throws JNCException {
        delete("xid-during-irau-adm-mode");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "xid-during-irau-adm-mode" leaf will not have a value.
     */
    public void addXidDuringIrauAdmMode() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "xid-during-irau-adm-mode",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "xid-during-irau-adm-mode" with operation "replace".
     */
    public void markXidDuringIrauAdmModeReplace() throws JNCException {
        markLeafReplace("xidDuringIrauAdmMode");
    }

    /**
     * Marks the leaf "xid-during-irau-adm-mode" with operation "merge".
     */
    public void markXidDuringIrauAdmModeMerge() throws JNCException {
        markLeafMerge("xidDuringIrauAdmMode");
    }

    /**
     * Marks the leaf "xid-during-irau-adm-mode" with operation "create".
     */
    public void markXidDuringIrauAdmModeCreate() throws JNCException {
        markLeafCreate("xidDuringIrauAdmMode");
    }

    /**
     * Marks the leaf "xid-during-irau-adm-mode" with operation "delete".
     */
    public void markXidDuringIrauAdmModeDelete() throws JNCException {
        markLeafDelete("xidDuringIrauAdmMode");
    }

    /* Access methods for optional leaf child: "alternate-llc-xid-negotiation". */

    /**
     * Gets the value for child leaf "alternate-llc-xid-negotiation".
     * @return The value of the leaf.
     */
    public YangEnumeration getAlternateLlcXidNegotiationValue()
            throws JNCException {
        YangEnumeration alternateLlcXidNegotiation = (YangEnumeration)getValue("alternate-llc-xid-negotiation");
        if (alternateLlcXidNegotiation == null) {
            alternateLlcXidNegotiation = new YangEnumeration("disable", new String[] {  // default
                "disable",
                "enable",
            });
        }
        return alternateLlcXidNegotiation;
    }

    /**
     * Sets the value for child leaf "alternate-llc-xid-negotiation",
     * using instance of generated typedef class.
     * @param alternateLlcXidNegotiationValue The value to set.
     * @param alternateLlcXidNegotiationValue used during instantiation.
     */
    public void setAlternateLlcXidNegotiationValue(YangEnumeration alternateLlcXidNegotiationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alternate-llc-xid-negotiation",
            alternateLlcXidNegotiationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "alternate-llc-xid-negotiation",
     * using a String value.
     * @param alternateLlcXidNegotiationValue used during instantiation.
     */
    public void setAlternateLlcXidNegotiationValue(String alternateLlcXidNegotiationValue)
            throws JNCException {
        setAlternateLlcXidNegotiationValue(new YangEnumeration(alternateLlcXidNegotiationValue, new String[] {
             "disable",
             "enable",
        }));
    }

    /**
     * Unsets the value for child leaf "alternate-llc-xid-negotiation".
     */
    public void unsetAlternateLlcXidNegotiationValue() throws JNCException {
        delete("alternate-llc-xid-negotiation");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "alternate-llc-xid-negotiation" leaf will not have a value.
     */
    public void addAlternateLlcXidNegotiation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alternate-llc-xid-negotiation",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "alternate-llc-xid-negotiation" with operation "replace".
     */
    public void markAlternateLlcXidNegotiationReplace() throws JNCException {
        markLeafReplace("alternateLlcXidNegotiation");
    }

    /**
     * Marks the leaf "alternate-llc-xid-negotiation" with operation "merge".
     */
    public void markAlternateLlcXidNegotiationMerge() throws JNCException {
        markLeafMerge("alternateLlcXidNegotiation");
    }

    /**
     * Marks the leaf "alternate-llc-xid-negotiation" with operation "create".
     */
    public void markAlternateLlcXidNegotiationCreate() throws JNCException {
        markLeafCreate("alternateLlcXidNegotiation");
    }

    /**
     * Marks the leaf "alternate-llc-xid-negotiation" with operation "delete".
     */
    public void markAlternateLlcXidNegotiationDelete() throws JNCException {
        markLeafDelete("alternateLlcXidNegotiation");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
