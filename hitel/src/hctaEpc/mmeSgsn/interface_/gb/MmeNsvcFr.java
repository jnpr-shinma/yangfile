/* 
 * @(#)MmeNsvcFr.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gb;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt16;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gb/mme-nsvc-fr"
 * <p>
 * See line 391 in
 * gtlConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeNsvcFr extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeNsvcFr object.
     */
    public MmeNsvcFr() {
        super(Epc.NAMESPACE, "mme-nsvc-fr");
    }

    /**
     * Constructor for an initialized MmeNsvcFr object,
     * 
     * @param nseIdValue Key argument of child.
     * @param nsvcIdValue Key argument of child.
     */
    public MmeNsvcFr(YangUInt16 nseIdValue, YangUInt16 nsvcIdValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-nsvc-fr");
        Leaf nseId = new Leaf(Epc.NAMESPACE, "nse-id");
        nseId.setValue(nseIdValue);
        insertChild(nseId, childrenNames());
        Leaf nsvcId = new Leaf(Epc.NAMESPACE, "nsvc-id");
        nsvcId.setValue(nsvcIdValue);
        insertChild(nsvcId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeNsvcFr object,
     * with String keys.
     * @param nseIdValue Key argument of child.
     * @param nsvcIdValue Key argument of child.
     */
    public MmeNsvcFr(String nseIdValue, String nsvcIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-nsvc-fr");
        Leaf nseId = new Leaf(Epc.NAMESPACE, "nse-id");
        nseId.setValue(new YangUInt16(nseIdValue));
        insertChild(nseId, childrenNames());
        Leaf nsvcId = new Leaf(Epc.NAMESPACE, "nsvc-id");
        nsvcId.setValue(new YangUInt16(nsvcIdValue));
        insertChild(nsvcId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeNsvcFr object,
     * with keys of built in Java types.
     * @param nseIdValue Key argument of child.
     * @param nsvcIdValue Key argument of child.
     */
    public MmeNsvcFr(int nseIdValue, int nsvcIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-nsvc-fr");
        Leaf nseId = new Leaf(Epc.NAMESPACE, "nse-id");
        nseId.setValue(new YangUInt16(nseIdValue));
        insertChild(nseId, childrenNames());
        Leaf nsvcId = new Leaf(Epc.NAMESPACE, "nsvc-id");
        nsvcId.setValue(new YangUInt16(nsvcIdValue));
        insertChild(nsvcId, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeNsvcFr clone() {
        MmeNsvcFr copy;
        try {
            copy = new MmeNsvcFr(getNseIdValue().toString(), getNsvcIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeNsvcFr)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeNsvcFr cloneShallow() {
        MmeNsvcFr copy;
        try {
            copy = new MmeNsvcFr(getNseIdValue().toString(), getNsvcIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeNsvcFr)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "nse-id",
            "nsvc-id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "nse-id",
            "nsvc-id",
            "dlci",
            "fr-tunnel",
            "remote-port",
            "nsvl-group",
            "nsvl",
        };
    }

    /* Access methods for leaf child: "nse-id". */

    /**
     * Gets the value for child leaf "nse-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getNseIdValue() throws JNCException {
        return (YangUInt16)getValue("nse-id");
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using instance of generated typedef class.
     * @param nseIdValue The value to set.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(YangUInt16 nseIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nse-id",
            nseIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using Java primitive values.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(int nseIdValue) throws JNCException {
        setNseIdValue(new YangUInt16(nseIdValue));
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using a String value.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(String nseIdValue) throws JNCException {
        setNseIdValue(new YangUInt16(nseIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nse-id" leaf will not have a value.
     */
    public void addNseId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nse-id",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "nsvc-id". */

    /**
     * Gets the value for child leaf "nsvc-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getNsvcIdValue() throws JNCException {
        return (YangUInt16)getValue("nsvc-id");
    }

    /**
     * Sets the value for child leaf "nsvc-id",
     * using instance of generated typedef class.
     * @param nsvcIdValue The value to set.
     * @param nsvcIdValue used during instantiation.
     */
    public void setNsvcIdValue(YangUInt16 nsvcIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvc-id",
            nsvcIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsvc-id",
     * using Java primitive values.
     * @param nsvcIdValue used during instantiation.
     */
    public void setNsvcIdValue(int nsvcIdValue) throws JNCException {
        setNsvcIdValue(new YangUInt16(nsvcIdValue));
    }

    /**
     * Sets the value for child leaf "nsvc-id",
     * using a String value.
     * @param nsvcIdValue used during instantiation.
     */
    public void setNsvcIdValue(String nsvcIdValue) throws JNCException {
        setNsvcIdValue(new YangUInt16(nsvcIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsvc-id" leaf will not have a value.
     */
    public void addNsvcId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvc-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "dlci". */

    /**
     * Gets the value for child leaf "dlci".
     * @return The value of the leaf.
     */
    public YangUInt16 getDlciValue() throws JNCException {
        return (YangUInt16)getValue("dlci");
    }

    /**
     * Sets the value for child leaf "dlci",
     * using instance of generated typedef class.
     * @param dlciValue The value to set.
     * @param dlciValue used during instantiation.
     */
    public void setDlciValue(YangUInt16 dlciValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dlci",
            dlciValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dlci",
     * using Java primitive values.
     * @param dlciValue used during instantiation.
     */
    public void setDlciValue(int dlciValue) throws JNCException {
        setDlciValue(new YangUInt16(dlciValue));
    }

    /**
     * Sets the value for child leaf "dlci",
     * using a String value.
     * @param dlciValue used during instantiation.
     */
    public void setDlciValue(String dlciValue) throws JNCException {
        setDlciValue(new YangUInt16(dlciValue));
    }

    /**
     * Unsets the value for child leaf "dlci".
     */
    public void unsetDlciValue() throws JNCException {
        delete("dlci");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dlci" leaf will not have a value.
     */
    public void addDlci() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dlci",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dlci" with operation "replace".
     */
    public void markDlciReplace() throws JNCException {
        markLeafReplace("dlci");
    }

    /**
     * Marks the leaf "dlci" with operation "merge".
     */
    public void markDlciMerge() throws JNCException {
        markLeafMerge("dlci");
    }

    /**
     * Marks the leaf "dlci" with operation "create".
     */
    public void markDlciCreate() throws JNCException {
        markLeafCreate("dlci");
    }

    /**
     * Marks the leaf "dlci" with operation "delete".
     */
    public void markDlciDelete() throws JNCException {
        markLeafDelete("dlci");
    }

    /* Access methods for optional leaf child: "fr-tunnel". */

    /**
     * Gets the value for child leaf "fr-tunnel".
     * @return The value of the leaf.
     */
    public YangString getFrTunnelValue() throws JNCException {
        return (YangString)getValue("fr-tunnel");
    }

    /**
     * Sets the value for child leaf "fr-tunnel",
     * using instance of generated typedef class.
     * @param frTunnelValue The value to set.
     * @param frTunnelValue used during instantiation.
     */
    public void setFrTunnelValue(YangString frTunnelValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "fr-tunnel",
            frTunnelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "fr-tunnel",
     * using a String value.
     * @param frTunnelValue used during instantiation.
     */
    public void setFrTunnelValue(String frTunnelValue) throws JNCException {
        setFrTunnelValue(new YangString(frTunnelValue));
    }

    /**
     * Unsets the value for child leaf "fr-tunnel".
     */
    public void unsetFrTunnelValue() throws JNCException {
        delete("fr-tunnel");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fr-tunnel" leaf will not have a value.
     */
    public void addFrTunnel() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "fr-tunnel",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "fr-tunnel" with operation "replace".
     */
    public void markFrTunnelReplace() throws JNCException {
        markLeafReplace("frTunnel");
    }

    /**
     * Marks the leaf "fr-tunnel" with operation "merge".
     */
    public void markFrTunnelMerge() throws JNCException {
        markLeafMerge("frTunnel");
    }

    /**
     * Marks the leaf "fr-tunnel" with operation "create".
     */
    public void markFrTunnelCreate() throws JNCException {
        markLeafCreate("frTunnel");
    }

    /**
     * Marks the leaf "fr-tunnel" with operation "delete".
     */
    public void markFrTunnelDelete() throws JNCException {
        markLeafDelete("frTunnel");
    }

    /* Access methods for optional leaf child: "remote-port". */

    /**
     * Gets the value for child leaf "remote-port".
     * @return The value of the leaf.
     */
    public YangUInt16 getRemotePortValue() throws JNCException {
        return (YangUInt16)getValue("remote-port");
    }

    /**
     * Sets the value for child leaf "remote-port",
     * using instance of generated typedef class.
     * @param remotePortValue The value to set.
     * @param remotePortValue used during instantiation.
     */
    public void setRemotePortValue(YangUInt16 remotePortValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-port",
            remotePortValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "remote-port",
     * using Java primitive values.
     * @param remotePortValue used during instantiation.
     */
    public void setRemotePortValue(int remotePortValue) throws JNCException {
        setRemotePortValue(new YangUInt16(remotePortValue));
    }

    /**
     * Sets the value for child leaf "remote-port",
     * using a String value.
     * @param remotePortValue used during instantiation.
     */
    public void setRemotePortValue(String remotePortValue) throws JNCException {
        setRemotePortValue(new YangUInt16(remotePortValue));
    }

    /**
     * Unsets the value for child leaf "remote-port".
     */
    public void unsetRemotePortValue() throws JNCException {
        delete("remote-port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "remote-port" leaf will not have a value.
     */
    public void addRemotePort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "remote-port" with operation "replace".
     */
    public void markRemotePortReplace() throws JNCException {
        markLeafReplace("remotePort");
    }

    /**
     * Marks the leaf "remote-port" with operation "merge".
     */
    public void markRemotePortMerge() throws JNCException {
        markLeafMerge("remotePort");
    }

    /**
     * Marks the leaf "remote-port" with operation "create".
     */
    public void markRemotePortCreate() throws JNCException {
        markLeafCreate("remotePort");
    }

    /**
     * Marks the leaf "remote-port" with operation "delete".
     */
    public void markRemotePortDelete() throws JNCException {
        markLeafDelete("remotePort");
    }

    /* Access methods for optional leaf child: "nsvl-group". */

    /**
     * Gets the value for child leaf "nsvl-group".
     * @return The value of the leaf.
     */
    public YangUInt16 getNsvlGroupValue() throws JNCException {
        return (YangUInt16)getValue("nsvl-group");
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using instance of generated typedef class.
     * @param nsvlGroupValue The value to set.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(YangUInt16 nsvlGroupValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl-group",
            nsvlGroupValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using Java primitive values.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(int nsvlGroupValue) throws JNCException {
        setNsvlGroupValue(new YangUInt16(nsvlGroupValue));
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using a String value.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(String nsvlGroupValue) throws JNCException {
        setNsvlGroupValue(new YangUInt16(nsvlGroupValue));
    }

    /**
     * Unsets the value for child leaf "nsvl-group".
     */
    public void unsetNsvlGroupValue() throws JNCException {
        delete("nsvl-group");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsvl-group" leaf will not have a value.
     */
    public void addNsvlGroup() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl-group",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nsvl-group" with operation "replace".
     */
    public void markNsvlGroupReplace() throws JNCException {
        markLeafReplace("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "merge".
     */
    public void markNsvlGroupMerge() throws JNCException {
        markLeafMerge("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "create".
     */
    public void markNsvlGroupCreate() throws JNCException {
        markLeafCreate("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "delete".
     */
    public void markNsvlGroupDelete() throws JNCException {
        markLeafDelete("nsvlGroup");
    }

    /* Access methods for optional leaf child: "nsvl". */

    /**
     * Gets the value for child leaf "nsvl".
     * @return The value of the leaf.
     */
    public YangUInt16 getNsvlValue() throws JNCException {
        return (YangUInt16)getValue("nsvl");
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using instance of generated typedef class.
     * @param nsvlValue The value to set.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(YangUInt16 nsvlValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl",
            nsvlValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using Java primitive values.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(int nsvlValue) throws JNCException {
        setNsvlValue(new YangUInt16(nsvlValue));
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using a String value.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(String nsvlValue) throws JNCException {
        setNsvlValue(new YangUInt16(nsvlValue));
    }

    /**
     * Unsets the value for child leaf "nsvl".
     */
    public void unsetNsvlValue() throws JNCException {
        delete("nsvl");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsvl" leaf will not have a value.
     */
    public void addNsvl() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nsvl" with operation "replace".
     */
    public void markNsvlReplace() throws JNCException {
        markLeafReplace("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "merge".
     */
    public void markNsvlMerge() throws JNCException {
        markLeafMerge("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "create".
     */
    public void markNsvlCreate() throws JNCException {
        markLeafCreate("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "delete".
     */
    public void markNsvlDelete() throws JNCException {
        markLeafDelete("nsvl");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
