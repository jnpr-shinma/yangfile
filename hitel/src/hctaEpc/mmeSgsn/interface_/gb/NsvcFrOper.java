/* 
 * @(#)NsvcFrOper.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gb;
import .ietfInetTypes.Ipv4Address;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gb/nsvc-fr-oper"
 * <p>
 * See line 202 in
 * gtlCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class NsvcFrOper extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty NsvcFrOper object.
     */
    public NsvcFrOper() {
        super(Epc.NAMESPACE, "nsvc-fr-oper");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public NsvcFrOper clone() {
        return (NsvcFrOper)cloneContent(new NsvcFrOper());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public NsvcFrOper cloneShallow() {
        return (NsvcFrOper)cloneShallowContent(new NsvcFrOper());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "nse-id",
            "nsvc",
            "dlci",
            "local-ip",
            "local-port",
            "remote-ip",
            "remote-port",
            "state",
            "unit-data-rx",
            "unit-data-tx",
            "unit-data-octets-rx",
            "unit-data-octets-tx",
            "alives-rx",
            "alives-tx",
            "alive-acks-rx",
            "alive-acks-tx",
            "status-rx",
            "status-tx",
            "blocks-rx",
            "blocks-tx",
            "block-acks-rx",
            "block-acks-tx",
            "unblocks-rx",
            "unblocks-tx",
            "unblock-acks-rx",
            "unblock-acks-tx",
            "resets-rx",
            "resets-tx",
            "reset-acks-rx",
            "reset-acks-tx",
            "status-indications",
            "fecn-bit-set",
            "becn-bit-set",
            "diagnostic-reason",
            "cw-pdus-rx",
            "cw-pdus-rx-reassembled",
            "cw-pdus-rx-unfragmented",
            "cw-pdus-tx",
            "cw-octets-rx",
            "cw-octets-tx",
            "cw-pdus-lost-or-discarded",
            "cw-fragments-lost-or-discarded",
            "cw-protocol-errors",
            "nsvl-group",
            "nsvl",
            "service",
            "location",
            "pid",
        };
    }

    /* Access methods for optional leaf child: "nse-id". */

    /**
     * Gets the value for child leaf "nse-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getNseIdValue() throws JNCException {
        return (YangUInt16)getValue("nse-id");
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using instance of generated typedef class.
     * @param nseIdValue The value to set.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(YangUInt16 nseIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nse-id",
            nseIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using Java primitive values.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(int nseIdValue) throws JNCException {
        setNseIdValue(new YangUInt16(nseIdValue));
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using a String value.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(String nseIdValue) throws JNCException {
        setNseIdValue(new YangUInt16(nseIdValue));
    }

    /**
     * Unsets the value for child leaf "nse-id".
     */
    public void unsetNseIdValue() throws JNCException {
        delete("nse-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nse-id" leaf will not have a value.
     */
    public void addNseId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nse-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nse-id" with operation "replace".
     */
    public void markNseIdReplace() throws JNCException {
        markLeafReplace("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "merge".
     */
    public void markNseIdMerge() throws JNCException {
        markLeafMerge("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "create".
     */
    public void markNseIdCreate() throws JNCException {
        markLeafCreate("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "delete".
     */
    public void markNseIdDelete() throws JNCException {
        markLeafDelete("nseId");
    }

    /* Access methods for optional leaf child: "nsvc". */

    /**
     * Gets the value for child leaf "nsvc".
     * @return The value of the leaf.
     */
    public YangUInt16 getNsvcValue() throws JNCException {
        return (YangUInt16)getValue("nsvc");
    }

    /**
     * Sets the value for child leaf "nsvc",
     * using instance of generated typedef class.
     * @param nsvcValue The value to set.
     * @param nsvcValue used during instantiation.
     */
    public void setNsvcValue(YangUInt16 nsvcValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvc",
            nsvcValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsvc",
     * using Java primitive values.
     * @param nsvcValue used during instantiation.
     */
    public void setNsvcValue(int nsvcValue) throws JNCException {
        setNsvcValue(new YangUInt16(nsvcValue));
    }

    /**
     * Sets the value for child leaf "nsvc",
     * using a String value.
     * @param nsvcValue used during instantiation.
     */
    public void setNsvcValue(String nsvcValue) throws JNCException {
        setNsvcValue(new YangUInt16(nsvcValue));
    }

    /**
     * Unsets the value for child leaf "nsvc".
     */
    public void unsetNsvcValue() throws JNCException {
        delete("nsvc");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsvc" leaf will not have a value.
     */
    public void addNsvc() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvc",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nsvc" with operation "replace".
     */
    public void markNsvcReplace() throws JNCException {
        markLeafReplace("nsvc");
    }

    /**
     * Marks the leaf "nsvc" with operation "merge".
     */
    public void markNsvcMerge() throws JNCException {
        markLeafMerge("nsvc");
    }

    /**
     * Marks the leaf "nsvc" with operation "create".
     */
    public void markNsvcCreate() throws JNCException {
        markLeafCreate("nsvc");
    }

    /**
     * Marks the leaf "nsvc" with operation "delete".
     */
    public void markNsvcDelete() throws JNCException {
        markLeafDelete("nsvc");
    }

    /* Access methods for optional leaf child: "dlci". */

    /**
     * Gets the value for child leaf "dlci".
     * @return The value of the leaf.
     */
    public YangUInt16 getDlciValue() throws JNCException {
        return (YangUInt16)getValue("dlci");
    }

    /**
     * Sets the value for child leaf "dlci",
     * using instance of generated typedef class.
     * @param dlciValue The value to set.
     * @param dlciValue used during instantiation.
     */
    public void setDlciValue(YangUInt16 dlciValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dlci",
            dlciValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dlci",
     * using Java primitive values.
     * @param dlciValue used during instantiation.
     */
    public void setDlciValue(int dlciValue) throws JNCException {
        setDlciValue(new YangUInt16(dlciValue));
    }

    /**
     * Sets the value for child leaf "dlci",
     * using a String value.
     * @param dlciValue used during instantiation.
     */
    public void setDlciValue(String dlciValue) throws JNCException {
        setDlciValue(new YangUInt16(dlciValue));
    }

    /**
     * Unsets the value for child leaf "dlci".
     */
    public void unsetDlciValue() throws JNCException {
        delete("dlci");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dlci" leaf will not have a value.
     */
    public void addDlci() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dlci",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dlci" with operation "replace".
     */
    public void markDlciReplace() throws JNCException {
        markLeafReplace("dlci");
    }

    /**
     * Marks the leaf "dlci" with operation "merge".
     */
    public void markDlciMerge() throws JNCException {
        markLeafMerge("dlci");
    }

    /**
     * Marks the leaf "dlci" with operation "create".
     */
    public void markDlciCreate() throws JNCException {
        markLeafCreate("dlci");
    }

    /**
     * Marks the leaf "dlci" with operation "delete".
     */
    public void markDlciDelete() throws JNCException {
        markLeafDelete("dlci");
    }

    /* Access methods for optional leaf child: "local-ip". */

    /**
     * Gets the value for child leaf "local-ip".
     * @return The value of the leaf.
     */
    public Ipv4Address getLocalIpValue() throws JNCException {
        return (Ipv4Address)getValue("local-ip");
    }

    /**
     * Sets the value for child leaf "local-ip",
     * using a JNC type value.
     * @param localIpValue The value to set.
     * @param localIpValue used during instantiation.
     */
    public void setLocalIpValue(Ipv4Address localIpValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-ip",
            localIpValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-ip",
     * using a String value.
     * @param localIpValue used during instantiation.
     */
    public void setLocalIpValue(String localIpValue) throws JNCException {
        setLocalIpValue(new Ipv4Address(localIpValue));
    }

    /**
     * Unsets the value for child leaf "local-ip".
     */
    public void unsetLocalIpValue() throws JNCException {
        delete("local-ip");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-ip" leaf will not have a value.
     */
    public void addLocalIp() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-ip",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-ip" with operation "replace".
     */
    public void markLocalIpReplace() throws JNCException {
        markLeafReplace("localIp");
    }

    /**
     * Marks the leaf "local-ip" with operation "merge".
     */
    public void markLocalIpMerge() throws JNCException {
        markLeafMerge("localIp");
    }

    /**
     * Marks the leaf "local-ip" with operation "create".
     */
    public void markLocalIpCreate() throws JNCException {
        markLeafCreate("localIp");
    }

    /**
     * Marks the leaf "local-ip" with operation "delete".
     */
    public void markLocalIpDelete() throws JNCException {
        markLeafDelete("localIp");
    }

    /* Access methods for optional leaf child: "local-port". */

    /**
     * Gets the value for child leaf "local-port".
     * @return The value of the leaf.
     */
    public YangUInt16 getLocalPortValue() throws JNCException {
        return (YangUInt16)getValue("local-port");
    }

    /**
     * Sets the value for child leaf "local-port",
     * using instance of generated typedef class.
     * @param localPortValue The value to set.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(YangUInt16 localPortValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-port",
            localPortValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-port",
     * using Java primitive values.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(int localPortValue) throws JNCException {
        setLocalPortValue(new YangUInt16(localPortValue));
    }

    /**
     * Sets the value for child leaf "local-port",
     * using a String value.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(String localPortValue) throws JNCException {
        setLocalPortValue(new YangUInt16(localPortValue));
    }

    /**
     * Unsets the value for child leaf "local-port".
     */
    public void unsetLocalPortValue() throws JNCException {
        delete("local-port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-port" leaf will not have a value.
     */
    public void addLocalPort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-port" with operation "replace".
     */
    public void markLocalPortReplace() throws JNCException {
        markLeafReplace("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "merge".
     */
    public void markLocalPortMerge() throws JNCException {
        markLeafMerge("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "create".
     */
    public void markLocalPortCreate() throws JNCException {
        markLeafCreate("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "delete".
     */
    public void markLocalPortDelete() throws JNCException {
        markLeafDelete("localPort");
    }

    /* Access methods for optional leaf child: "remote-ip". */

    /**
     * Gets the value for child leaf "remote-ip".
     * @return The value of the leaf.
     */
    public Ipv4Address getRemoteIpValue() throws JNCException {
        return (Ipv4Address)getValue("remote-ip");
    }

    /**
     * Sets the value for child leaf "remote-ip",
     * using a JNC type value.
     * @param remoteIpValue The value to set.
     * @param remoteIpValue used during instantiation.
     */
    public void setRemoteIpValue(Ipv4Address remoteIpValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-ip",
            remoteIpValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "remote-ip",
     * using a String value.
     * @param remoteIpValue used during instantiation.
     */
    public void setRemoteIpValue(String remoteIpValue) throws JNCException {
        setRemoteIpValue(new Ipv4Address(remoteIpValue));
    }

    /**
     * Unsets the value for child leaf "remote-ip".
     */
    public void unsetRemoteIpValue() throws JNCException {
        delete("remote-ip");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "remote-ip" leaf will not have a value.
     */
    public void addRemoteIp() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-ip",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "remote-ip" with operation "replace".
     */
    public void markRemoteIpReplace() throws JNCException {
        markLeafReplace("remoteIp");
    }

    /**
     * Marks the leaf "remote-ip" with operation "merge".
     */
    public void markRemoteIpMerge() throws JNCException {
        markLeafMerge("remoteIp");
    }

    /**
     * Marks the leaf "remote-ip" with operation "create".
     */
    public void markRemoteIpCreate() throws JNCException {
        markLeafCreate("remoteIp");
    }

    /**
     * Marks the leaf "remote-ip" with operation "delete".
     */
    public void markRemoteIpDelete() throws JNCException {
        markLeafDelete("remoteIp");
    }

    /* Access methods for optional leaf child: "remote-port". */

    /**
     * Gets the value for child leaf "remote-port".
     * @return The value of the leaf.
     */
    public YangUInt16 getRemotePortValue() throws JNCException {
        return (YangUInt16)getValue("remote-port");
    }

    /**
     * Sets the value for child leaf "remote-port",
     * using instance of generated typedef class.
     * @param remotePortValue The value to set.
     * @param remotePortValue used during instantiation.
     */
    public void setRemotePortValue(YangUInt16 remotePortValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-port",
            remotePortValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "remote-port",
     * using Java primitive values.
     * @param remotePortValue used during instantiation.
     */
    public void setRemotePortValue(int remotePortValue) throws JNCException {
        setRemotePortValue(new YangUInt16(remotePortValue));
    }

    /**
     * Sets the value for child leaf "remote-port",
     * using a String value.
     * @param remotePortValue used during instantiation.
     */
    public void setRemotePortValue(String remotePortValue) throws JNCException {
        setRemotePortValue(new YangUInt16(remotePortValue));
    }

    /**
     * Unsets the value for child leaf "remote-port".
     */
    public void unsetRemotePortValue() throws JNCException {
        delete("remote-port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "remote-port" leaf will not have a value.
     */
    public void addRemotePort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "remote-port" with operation "replace".
     */
    public void markRemotePortReplace() throws JNCException {
        markLeafReplace("remotePort");
    }

    /**
     * Marks the leaf "remote-port" with operation "merge".
     */
    public void markRemotePortMerge() throws JNCException {
        markLeafMerge("remotePort");
    }

    /**
     * Marks the leaf "remote-port" with operation "create".
     */
    public void markRemotePortCreate() throws JNCException {
        markLeafCreate("remotePort");
    }

    /**
     * Marks the leaf "remote-port" with operation "delete".
     */
    public void markRemotePortDelete() throws JNCException {
        markLeafDelete("remotePort");
    }

    /* Access methods for optional leaf child: "state". */

    /**
     * Gets the value for child leaf "state".
     * @return The value of the leaf.
     */
    public YangString getStateValue() throws JNCException {
        return (YangString)getValue("state");
    }

    /**
     * Sets the value for child leaf "state",
     * using instance of generated typedef class.
     * @param stateValue The value to set.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(YangString stateValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "state",
            stateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "state",
     * using a String value.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(String stateValue) throws JNCException {
        setStateValue(new YangString(stateValue));
    }

    /**
     * Unsets the value for child leaf "state".
     */
    public void unsetStateValue() throws JNCException {
        delete("state");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "state" leaf will not have a value.
     */
    public void addState() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "state",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "state" with operation "replace".
     */
    public void markStateReplace() throws JNCException {
        markLeafReplace("state");
    }

    /**
     * Marks the leaf "state" with operation "merge".
     */
    public void markStateMerge() throws JNCException {
        markLeafMerge("state");
    }

    /**
     * Marks the leaf "state" with operation "create".
     */
    public void markStateCreate() throws JNCException {
        markLeafCreate("state");
    }

    /**
     * Marks the leaf "state" with operation "delete".
     */
    public void markStateDelete() throws JNCException {
        markLeafDelete("state");
    }

    /* Access methods for optional leaf child: "unit-data-rx". */

    /**
     * Gets the value for child leaf "unit-data-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnitDataRxValue() throws JNCException {
        return (YangUInt32)getValue("unit-data-rx");
    }

    /**
     * Sets the value for child leaf "unit-data-rx",
     * using instance of generated typedef class.
     * @param unitDataRxValue The value to set.
     * @param unitDataRxValue used during instantiation.
     */
    public void setUnitDataRxValue(YangUInt32 unitDataRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-rx",
            unitDataRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-data-rx",
     * using Java primitive values.
     * @param unitDataRxValue used during instantiation.
     */
    public void setUnitDataRxValue(long unitDataRxValue) throws JNCException {
        setUnitDataRxValue(new YangUInt32(unitDataRxValue));
    }

    /**
     * Sets the value for child leaf "unit-data-rx",
     * using a String value.
     * @param unitDataRxValue used during instantiation.
     */
    public void setUnitDataRxValue(String unitDataRxValue) throws JNCException {
        setUnitDataRxValue(new YangUInt32(unitDataRxValue));
    }

    /**
     * Unsets the value for child leaf "unit-data-rx".
     */
    public void unsetUnitDataRxValue() throws JNCException {
        delete("unit-data-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-data-rx" leaf will not have a value.
     */
    public void addUnitDataRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unit-data-rx" with operation "replace".
     */
    public void markUnitDataRxReplace() throws JNCException {
        markLeafReplace("unitDataRx");
    }

    /**
     * Marks the leaf "unit-data-rx" with operation "merge".
     */
    public void markUnitDataRxMerge() throws JNCException {
        markLeafMerge("unitDataRx");
    }

    /**
     * Marks the leaf "unit-data-rx" with operation "create".
     */
    public void markUnitDataRxCreate() throws JNCException {
        markLeafCreate("unitDataRx");
    }

    /**
     * Marks the leaf "unit-data-rx" with operation "delete".
     */
    public void markUnitDataRxDelete() throws JNCException {
        markLeafDelete("unitDataRx");
    }

    /* Access methods for optional leaf child: "unit-data-tx". */

    /**
     * Gets the value for child leaf "unit-data-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnitDataTxValue() throws JNCException {
        return (YangUInt32)getValue("unit-data-tx");
    }

    /**
     * Sets the value for child leaf "unit-data-tx",
     * using instance of generated typedef class.
     * @param unitDataTxValue The value to set.
     * @param unitDataTxValue used during instantiation.
     */
    public void setUnitDataTxValue(YangUInt32 unitDataTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-tx",
            unitDataTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-data-tx",
     * using Java primitive values.
     * @param unitDataTxValue used during instantiation.
     */
    public void setUnitDataTxValue(long unitDataTxValue) throws JNCException {
        setUnitDataTxValue(new YangUInt32(unitDataTxValue));
    }

    /**
     * Sets the value for child leaf "unit-data-tx",
     * using a String value.
     * @param unitDataTxValue used during instantiation.
     */
    public void setUnitDataTxValue(String unitDataTxValue) throws JNCException {
        setUnitDataTxValue(new YangUInt32(unitDataTxValue));
    }

    /**
     * Unsets the value for child leaf "unit-data-tx".
     */
    public void unsetUnitDataTxValue() throws JNCException {
        delete("unit-data-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-data-tx" leaf will not have a value.
     */
    public void addUnitDataTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unit-data-tx" with operation "replace".
     */
    public void markUnitDataTxReplace() throws JNCException {
        markLeafReplace("unitDataTx");
    }

    /**
     * Marks the leaf "unit-data-tx" with operation "merge".
     */
    public void markUnitDataTxMerge() throws JNCException {
        markLeafMerge("unitDataTx");
    }

    /**
     * Marks the leaf "unit-data-tx" with operation "create".
     */
    public void markUnitDataTxCreate() throws JNCException {
        markLeafCreate("unitDataTx");
    }

    /**
     * Marks the leaf "unit-data-tx" with operation "delete".
     */
    public void markUnitDataTxDelete() throws JNCException {
        markLeafDelete("unitDataTx");
    }

    /* Access methods for optional leaf child: "unit-data-octets-rx". */

    /**
     * Gets the value for child leaf "unit-data-octets-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnitDataOctetsRxValue() throws JNCException {
        return (YangUInt32)getValue("unit-data-octets-rx");
    }

    /**
     * Sets the value for child leaf "unit-data-octets-rx",
     * using instance of generated typedef class.
     * @param unitDataOctetsRxValue The value to set.
     * @param unitDataOctetsRxValue used during instantiation.
     */
    public void setUnitDataOctetsRxValue(YangUInt32 unitDataOctetsRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-octets-rx",
            unitDataOctetsRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-data-octets-rx",
     * using Java primitive values.
     * @param unitDataOctetsRxValue used during instantiation.
     */
    public void setUnitDataOctetsRxValue(long unitDataOctetsRxValue)
            throws JNCException {
        setUnitDataOctetsRxValue(new YangUInt32(unitDataOctetsRxValue));
    }

    /**
     * Sets the value for child leaf "unit-data-octets-rx",
     * using a String value.
     * @param unitDataOctetsRxValue used during instantiation.
     */
    public void setUnitDataOctetsRxValue(String unitDataOctetsRxValue)
            throws JNCException {
        setUnitDataOctetsRxValue(new YangUInt32(unitDataOctetsRxValue));
    }

    /**
     * Unsets the value for child leaf "unit-data-octets-rx".
     */
    public void unsetUnitDataOctetsRxValue() throws JNCException {
        delete("unit-data-octets-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-data-octets-rx" leaf will not have a value.
     */
    public void addUnitDataOctetsRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-octets-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unit-data-octets-rx" with operation "replace".
     */
    public void markUnitDataOctetsRxReplace() throws JNCException {
        markLeafReplace("unitDataOctetsRx");
    }

    /**
     * Marks the leaf "unit-data-octets-rx" with operation "merge".
     */
    public void markUnitDataOctetsRxMerge() throws JNCException {
        markLeafMerge("unitDataOctetsRx");
    }

    /**
     * Marks the leaf "unit-data-octets-rx" with operation "create".
     */
    public void markUnitDataOctetsRxCreate() throws JNCException {
        markLeafCreate("unitDataOctetsRx");
    }

    /**
     * Marks the leaf "unit-data-octets-rx" with operation "delete".
     */
    public void markUnitDataOctetsRxDelete() throws JNCException {
        markLeafDelete("unitDataOctetsRx");
    }

    /* Access methods for optional leaf child: "unit-data-octets-tx". */

    /**
     * Gets the value for child leaf "unit-data-octets-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnitDataOctetsTxValue() throws JNCException {
        return (YangUInt32)getValue("unit-data-octets-tx");
    }

    /**
     * Sets the value for child leaf "unit-data-octets-tx",
     * using instance of generated typedef class.
     * @param unitDataOctetsTxValue The value to set.
     * @param unitDataOctetsTxValue used during instantiation.
     */
    public void setUnitDataOctetsTxValue(YangUInt32 unitDataOctetsTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-octets-tx",
            unitDataOctetsTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-data-octets-tx",
     * using Java primitive values.
     * @param unitDataOctetsTxValue used during instantiation.
     */
    public void setUnitDataOctetsTxValue(long unitDataOctetsTxValue)
            throws JNCException {
        setUnitDataOctetsTxValue(new YangUInt32(unitDataOctetsTxValue));
    }

    /**
     * Sets the value for child leaf "unit-data-octets-tx",
     * using a String value.
     * @param unitDataOctetsTxValue used during instantiation.
     */
    public void setUnitDataOctetsTxValue(String unitDataOctetsTxValue)
            throws JNCException {
        setUnitDataOctetsTxValue(new YangUInt32(unitDataOctetsTxValue));
    }

    /**
     * Unsets the value for child leaf "unit-data-octets-tx".
     */
    public void unsetUnitDataOctetsTxValue() throws JNCException {
        delete("unit-data-octets-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-data-octets-tx" leaf will not have a value.
     */
    public void addUnitDataOctetsTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-octets-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unit-data-octets-tx" with operation "replace".
     */
    public void markUnitDataOctetsTxReplace() throws JNCException {
        markLeafReplace("unitDataOctetsTx");
    }

    /**
     * Marks the leaf "unit-data-octets-tx" with operation "merge".
     */
    public void markUnitDataOctetsTxMerge() throws JNCException {
        markLeafMerge("unitDataOctetsTx");
    }

    /**
     * Marks the leaf "unit-data-octets-tx" with operation "create".
     */
    public void markUnitDataOctetsTxCreate() throws JNCException {
        markLeafCreate("unitDataOctetsTx");
    }

    /**
     * Marks the leaf "unit-data-octets-tx" with operation "delete".
     */
    public void markUnitDataOctetsTxDelete() throws JNCException {
        markLeafDelete("unitDataOctetsTx");
    }

    /* Access methods for optional leaf child: "alives-rx". */

    /**
     * Gets the value for child leaf "alives-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getAlivesRxValue() throws JNCException {
        return (YangUInt32)getValue("alives-rx");
    }

    /**
     * Sets the value for child leaf "alives-rx",
     * using instance of generated typedef class.
     * @param alivesRxValue The value to set.
     * @param alivesRxValue used during instantiation.
     */
    public void setAlivesRxValue(YangUInt32 alivesRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alives-rx",
            alivesRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "alives-rx",
     * using Java primitive values.
     * @param alivesRxValue used during instantiation.
     */
    public void setAlivesRxValue(long alivesRxValue) throws JNCException {
        setAlivesRxValue(new YangUInt32(alivesRxValue));
    }

    /**
     * Sets the value for child leaf "alives-rx",
     * using a String value.
     * @param alivesRxValue used during instantiation.
     */
    public void setAlivesRxValue(String alivesRxValue) throws JNCException {
        setAlivesRxValue(new YangUInt32(alivesRxValue));
    }

    /**
     * Unsets the value for child leaf "alives-rx".
     */
    public void unsetAlivesRxValue() throws JNCException {
        delete("alives-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "alives-rx" leaf will not have a value.
     */
    public void addAlivesRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alives-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "alives-rx" with operation "replace".
     */
    public void markAlivesRxReplace() throws JNCException {
        markLeafReplace("alivesRx");
    }

    /**
     * Marks the leaf "alives-rx" with operation "merge".
     */
    public void markAlivesRxMerge() throws JNCException {
        markLeafMerge("alivesRx");
    }

    /**
     * Marks the leaf "alives-rx" with operation "create".
     */
    public void markAlivesRxCreate() throws JNCException {
        markLeafCreate("alivesRx");
    }

    /**
     * Marks the leaf "alives-rx" with operation "delete".
     */
    public void markAlivesRxDelete() throws JNCException {
        markLeafDelete("alivesRx");
    }

    /* Access methods for optional leaf child: "alives-tx". */

    /**
     * Gets the value for child leaf "alives-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getAlivesTxValue() throws JNCException {
        return (YangUInt32)getValue("alives-tx");
    }

    /**
     * Sets the value for child leaf "alives-tx",
     * using instance of generated typedef class.
     * @param alivesTxValue The value to set.
     * @param alivesTxValue used during instantiation.
     */
    public void setAlivesTxValue(YangUInt32 alivesTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alives-tx",
            alivesTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "alives-tx",
     * using Java primitive values.
     * @param alivesTxValue used during instantiation.
     */
    public void setAlivesTxValue(long alivesTxValue) throws JNCException {
        setAlivesTxValue(new YangUInt32(alivesTxValue));
    }

    /**
     * Sets the value for child leaf "alives-tx",
     * using a String value.
     * @param alivesTxValue used during instantiation.
     */
    public void setAlivesTxValue(String alivesTxValue) throws JNCException {
        setAlivesTxValue(new YangUInt32(alivesTxValue));
    }

    /**
     * Unsets the value for child leaf "alives-tx".
     */
    public void unsetAlivesTxValue() throws JNCException {
        delete("alives-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "alives-tx" leaf will not have a value.
     */
    public void addAlivesTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alives-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "alives-tx" with operation "replace".
     */
    public void markAlivesTxReplace() throws JNCException {
        markLeafReplace("alivesTx");
    }

    /**
     * Marks the leaf "alives-tx" with operation "merge".
     */
    public void markAlivesTxMerge() throws JNCException {
        markLeafMerge("alivesTx");
    }

    /**
     * Marks the leaf "alives-tx" with operation "create".
     */
    public void markAlivesTxCreate() throws JNCException {
        markLeafCreate("alivesTx");
    }

    /**
     * Marks the leaf "alives-tx" with operation "delete".
     */
    public void markAlivesTxDelete() throws JNCException {
        markLeafDelete("alivesTx");
    }

    /* Access methods for optional leaf child: "alive-acks-rx". */

    /**
     * Gets the value for child leaf "alive-acks-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getAliveAcksRxValue() throws JNCException {
        return (YangUInt32)getValue("alive-acks-rx");
    }

    /**
     * Sets the value for child leaf "alive-acks-rx",
     * using instance of generated typedef class.
     * @param aliveAcksRxValue The value to set.
     * @param aliveAcksRxValue used during instantiation.
     */
    public void setAliveAcksRxValue(YangUInt32 aliveAcksRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alive-acks-rx",
            aliveAcksRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "alive-acks-rx",
     * using Java primitive values.
     * @param aliveAcksRxValue used during instantiation.
     */
    public void setAliveAcksRxValue(long aliveAcksRxValue) throws JNCException {
        setAliveAcksRxValue(new YangUInt32(aliveAcksRxValue));
    }

    /**
     * Sets the value for child leaf "alive-acks-rx",
     * using a String value.
     * @param aliveAcksRxValue used during instantiation.
     */
    public void setAliveAcksRxValue(String aliveAcksRxValue)
            throws JNCException {
        setAliveAcksRxValue(new YangUInt32(aliveAcksRxValue));
    }

    /**
     * Unsets the value for child leaf "alive-acks-rx".
     */
    public void unsetAliveAcksRxValue() throws JNCException {
        delete("alive-acks-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "alive-acks-rx" leaf will not have a value.
     */
    public void addAliveAcksRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alive-acks-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "alive-acks-rx" with operation "replace".
     */
    public void markAliveAcksRxReplace() throws JNCException {
        markLeafReplace("aliveAcksRx");
    }

    /**
     * Marks the leaf "alive-acks-rx" with operation "merge".
     */
    public void markAliveAcksRxMerge() throws JNCException {
        markLeafMerge("aliveAcksRx");
    }

    /**
     * Marks the leaf "alive-acks-rx" with operation "create".
     */
    public void markAliveAcksRxCreate() throws JNCException {
        markLeafCreate("aliveAcksRx");
    }

    /**
     * Marks the leaf "alive-acks-rx" with operation "delete".
     */
    public void markAliveAcksRxDelete() throws JNCException {
        markLeafDelete("aliveAcksRx");
    }

    /* Access methods for optional leaf child: "alive-acks-tx". */

    /**
     * Gets the value for child leaf "alive-acks-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getAliveAcksTxValue() throws JNCException {
        return (YangUInt32)getValue("alive-acks-tx");
    }

    /**
     * Sets the value for child leaf "alive-acks-tx",
     * using instance of generated typedef class.
     * @param aliveAcksTxValue The value to set.
     * @param aliveAcksTxValue used during instantiation.
     */
    public void setAliveAcksTxValue(YangUInt32 aliveAcksTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alive-acks-tx",
            aliveAcksTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "alive-acks-tx",
     * using Java primitive values.
     * @param aliveAcksTxValue used during instantiation.
     */
    public void setAliveAcksTxValue(long aliveAcksTxValue) throws JNCException {
        setAliveAcksTxValue(new YangUInt32(aliveAcksTxValue));
    }

    /**
     * Sets the value for child leaf "alive-acks-tx",
     * using a String value.
     * @param aliveAcksTxValue used during instantiation.
     */
    public void setAliveAcksTxValue(String aliveAcksTxValue)
            throws JNCException {
        setAliveAcksTxValue(new YangUInt32(aliveAcksTxValue));
    }

    /**
     * Unsets the value for child leaf "alive-acks-tx".
     */
    public void unsetAliveAcksTxValue() throws JNCException {
        delete("alive-acks-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "alive-acks-tx" leaf will not have a value.
     */
    public void addAliveAcksTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alive-acks-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "alive-acks-tx" with operation "replace".
     */
    public void markAliveAcksTxReplace() throws JNCException {
        markLeafReplace("aliveAcksTx");
    }

    /**
     * Marks the leaf "alive-acks-tx" with operation "merge".
     */
    public void markAliveAcksTxMerge() throws JNCException {
        markLeafMerge("aliveAcksTx");
    }

    /**
     * Marks the leaf "alive-acks-tx" with operation "create".
     */
    public void markAliveAcksTxCreate() throws JNCException {
        markLeafCreate("aliveAcksTx");
    }

    /**
     * Marks the leaf "alive-acks-tx" with operation "delete".
     */
    public void markAliveAcksTxDelete() throws JNCException {
        markLeafDelete("aliveAcksTx");
    }

    /* Access methods for optional leaf child: "status-rx". */

    /**
     * Gets the value for child leaf "status-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getStatusRxValue() throws JNCException {
        return (YangUInt32)getValue("status-rx");
    }

    /**
     * Sets the value for child leaf "status-rx",
     * using instance of generated typedef class.
     * @param statusRxValue The value to set.
     * @param statusRxValue used during instantiation.
     */
    public void setStatusRxValue(YangUInt32 statusRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-rx",
            statusRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-rx",
     * using Java primitive values.
     * @param statusRxValue used during instantiation.
     */
    public void setStatusRxValue(long statusRxValue) throws JNCException {
        setStatusRxValue(new YangUInt32(statusRxValue));
    }

    /**
     * Sets the value for child leaf "status-rx",
     * using a String value.
     * @param statusRxValue used during instantiation.
     */
    public void setStatusRxValue(String statusRxValue) throws JNCException {
        setStatusRxValue(new YangUInt32(statusRxValue));
    }

    /**
     * Unsets the value for child leaf "status-rx".
     */
    public void unsetStatusRxValue() throws JNCException {
        delete("status-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-rx" leaf will not have a value.
     */
    public void addStatusRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-rx" with operation "replace".
     */
    public void markStatusRxReplace() throws JNCException {
        markLeafReplace("statusRx");
    }

    /**
     * Marks the leaf "status-rx" with operation "merge".
     */
    public void markStatusRxMerge() throws JNCException {
        markLeafMerge("statusRx");
    }

    /**
     * Marks the leaf "status-rx" with operation "create".
     */
    public void markStatusRxCreate() throws JNCException {
        markLeafCreate("statusRx");
    }

    /**
     * Marks the leaf "status-rx" with operation "delete".
     */
    public void markStatusRxDelete() throws JNCException {
        markLeafDelete("statusRx");
    }

    /* Access methods for optional leaf child: "status-tx". */

    /**
     * Gets the value for child leaf "status-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getStatusTxValue() throws JNCException {
        return (YangUInt32)getValue("status-tx");
    }

    /**
     * Sets the value for child leaf "status-tx",
     * using instance of generated typedef class.
     * @param statusTxValue The value to set.
     * @param statusTxValue used during instantiation.
     */
    public void setStatusTxValue(YangUInt32 statusTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-tx",
            statusTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-tx",
     * using Java primitive values.
     * @param statusTxValue used during instantiation.
     */
    public void setStatusTxValue(long statusTxValue) throws JNCException {
        setStatusTxValue(new YangUInt32(statusTxValue));
    }

    /**
     * Sets the value for child leaf "status-tx",
     * using a String value.
     * @param statusTxValue used during instantiation.
     */
    public void setStatusTxValue(String statusTxValue) throws JNCException {
        setStatusTxValue(new YangUInt32(statusTxValue));
    }

    /**
     * Unsets the value for child leaf "status-tx".
     */
    public void unsetStatusTxValue() throws JNCException {
        delete("status-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-tx" leaf will not have a value.
     */
    public void addStatusTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-tx" with operation "replace".
     */
    public void markStatusTxReplace() throws JNCException {
        markLeafReplace("statusTx");
    }

    /**
     * Marks the leaf "status-tx" with operation "merge".
     */
    public void markStatusTxMerge() throws JNCException {
        markLeafMerge("statusTx");
    }

    /**
     * Marks the leaf "status-tx" with operation "create".
     */
    public void markStatusTxCreate() throws JNCException {
        markLeafCreate("statusTx");
    }

    /**
     * Marks the leaf "status-tx" with operation "delete".
     */
    public void markStatusTxDelete() throws JNCException {
        markLeafDelete("statusTx");
    }

    /* Access methods for optional leaf child: "blocks-rx". */

    /**
     * Gets the value for child leaf "blocks-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getBlocksRxValue() throws JNCException {
        return (YangUInt32)getValue("blocks-rx");
    }

    /**
     * Sets the value for child leaf "blocks-rx",
     * using instance of generated typedef class.
     * @param blocksRxValue The value to set.
     * @param blocksRxValue used during instantiation.
     */
    public void setBlocksRxValue(YangUInt32 blocksRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "blocks-rx",
            blocksRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "blocks-rx",
     * using Java primitive values.
     * @param blocksRxValue used during instantiation.
     */
    public void setBlocksRxValue(long blocksRxValue) throws JNCException {
        setBlocksRxValue(new YangUInt32(blocksRxValue));
    }

    /**
     * Sets the value for child leaf "blocks-rx",
     * using a String value.
     * @param blocksRxValue used during instantiation.
     */
    public void setBlocksRxValue(String blocksRxValue) throws JNCException {
        setBlocksRxValue(new YangUInt32(blocksRxValue));
    }

    /**
     * Unsets the value for child leaf "blocks-rx".
     */
    public void unsetBlocksRxValue() throws JNCException {
        delete("blocks-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "blocks-rx" leaf will not have a value.
     */
    public void addBlocksRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "blocks-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "blocks-rx" with operation "replace".
     */
    public void markBlocksRxReplace() throws JNCException {
        markLeafReplace("blocksRx");
    }

    /**
     * Marks the leaf "blocks-rx" with operation "merge".
     */
    public void markBlocksRxMerge() throws JNCException {
        markLeafMerge("blocksRx");
    }

    /**
     * Marks the leaf "blocks-rx" with operation "create".
     */
    public void markBlocksRxCreate() throws JNCException {
        markLeafCreate("blocksRx");
    }

    /**
     * Marks the leaf "blocks-rx" with operation "delete".
     */
    public void markBlocksRxDelete() throws JNCException {
        markLeafDelete("blocksRx");
    }

    /* Access methods for optional leaf child: "blocks-tx". */

    /**
     * Gets the value for child leaf "blocks-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getBlocksTxValue() throws JNCException {
        return (YangUInt32)getValue("blocks-tx");
    }

    /**
     * Sets the value for child leaf "blocks-tx",
     * using instance of generated typedef class.
     * @param blocksTxValue The value to set.
     * @param blocksTxValue used during instantiation.
     */
    public void setBlocksTxValue(YangUInt32 blocksTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "blocks-tx",
            blocksTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "blocks-tx",
     * using Java primitive values.
     * @param blocksTxValue used during instantiation.
     */
    public void setBlocksTxValue(long blocksTxValue) throws JNCException {
        setBlocksTxValue(new YangUInt32(blocksTxValue));
    }

    /**
     * Sets the value for child leaf "blocks-tx",
     * using a String value.
     * @param blocksTxValue used during instantiation.
     */
    public void setBlocksTxValue(String blocksTxValue) throws JNCException {
        setBlocksTxValue(new YangUInt32(blocksTxValue));
    }

    /**
     * Unsets the value for child leaf "blocks-tx".
     */
    public void unsetBlocksTxValue() throws JNCException {
        delete("blocks-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "blocks-tx" leaf will not have a value.
     */
    public void addBlocksTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "blocks-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "blocks-tx" with operation "replace".
     */
    public void markBlocksTxReplace() throws JNCException {
        markLeafReplace("blocksTx");
    }

    /**
     * Marks the leaf "blocks-tx" with operation "merge".
     */
    public void markBlocksTxMerge() throws JNCException {
        markLeafMerge("blocksTx");
    }

    /**
     * Marks the leaf "blocks-tx" with operation "create".
     */
    public void markBlocksTxCreate() throws JNCException {
        markLeafCreate("blocksTx");
    }

    /**
     * Marks the leaf "blocks-tx" with operation "delete".
     */
    public void markBlocksTxDelete() throws JNCException {
        markLeafDelete("blocksTx");
    }

    /* Access methods for optional leaf child: "block-acks-rx". */

    /**
     * Gets the value for child leaf "block-acks-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getBlockAcksRxValue() throws JNCException {
        return (YangUInt32)getValue("block-acks-rx");
    }

    /**
     * Sets the value for child leaf "block-acks-rx",
     * using instance of generated typedef class.
     * @param blockAcksRxValue The value to set.
     * @param blockAcksRxValue used during instantiation.
     */
    public void setBlockAcksRxValue(YangUInt32 blockAcksRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "block-acks-rx",
            blockAcksRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "block-acks-rx",
     * using Java primitive values.
     * @param blockAcksRxValue used during instantiation.
     */
    public void setBlockAcksRxValue(long blockAcksRxValue) throws JNCException {
        setBlockAcksRxValue(new YangUInt32(blockAcksRxValue));
    }

    /**
     * Sets the value for child leaf "block-acks-rx",
     * using a String value.
     * @param blockAcksRxValue used during instantiation.
     */
    public void setBlockAcksRxValue(String blockAcksRxValue)
            throws JNCException {
        setBlockAcksRxValue(new YangUInt32(blockAcksRxValue));
    }

    /**
     * Unsets the value for child leaf "block-acks-rx".
     */
    public void unsetBlockAcksRxValue() throws JNCException {
        delete("block-acks-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "block-acks-rx" leaf will not have a value.
     */
    public void addBlockAcksRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "block-acks-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "block-acks-rx" with operation "replace".
     */
    public void markBlockAcksRxReplace() throws JNCException {
        markLeafReplace("blockAcksRx");
    }

    /**
     * Marks the leaf "block-acks-rx" with operation "merge".
     */
    public void markBlockAcksRxMerge() throws JNCException {
        markLeafMerge("blockAcksRx");
    }

    /**
     * Marks the leaf "block-acks-rx" with operation "create".
     */
    public void markBlockAcksRxCreate() throws JNCException {
        markLeafCreate("blockAcksRx");
    }

    /**
     * Marks the leaf "block-acks-rx" with operation "delete".
     */
    public void markBlockAcksRxDelete() throws JNCException {
        markLeafDelete("blockAcksRx");
    }

    /* Access methods for optional leaf child: "block-acks-tx". */

    /**
     * Gets the value for child leaf "block-acks-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getBlockAcksTxValue() throws JNCException {
        return (YangUInt32)getValue("block-acks-tx");
    }

    /**
     * Sets the value for child leaf "block-acks-tx",
     * using instance of generated typedef class.
     * @param blockAcksTxValue The value to set.
     * @param blockAcksTxValue used during instantiation.
     */
    public void setBlockAcksTxValue(YangUInt32 blockAcksTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "block-acks-tx",
            blockAcksTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "block-acks-tx",
     * using Java primitive values.
     * @param blockAcksTxValue used during instantiation.
     */
    public void setBlockAcksTxValue(long blockAcksTxValue) throws JNCException {
        setBlockAcksTxValue(new YangUInt32(blockAcksTxValue));
    }

    /**
     * Sets the value for child leaf "block-acks-tx",
     * using a String value.
     * @param blockAcksTxValue used during instantiation.
     */
    public void setBlockAcksTxValue(String blockAcksTxValue)
            throws JNCException {
        setBlockAcksTxValue(new YangUInt32(blockAcksTxValue));
    }

    /**
     * Unsets the value for child leaf "block-acks-tx".
     */
    public void unsetBlockAcksTxValue() throws JNCException {
        delete("block-acks-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "block-acks-tx" leaf will not have a value.
     */
    public void addBlockAcksTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "block-acks-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "block-acks-tx" with operation "replace".
     */
    public void markBlockAcksTxReplace() throws JNCException {
        markLeafReplace("blockAcksTx");
    }

    /**
     * Marks the leaf "block-acks-tx" with operation "merge".
     */
    public void markBlockAcksTxMerge() throws JNCException {
        markLeafMerge("blockAcksTx");
    }

    /**
     * Marks the leaf "block-acks-tx" with operation "create".
     */
    public void markBlockAcksTxCreate() throws JNCException {
        markLeafCreate("blockAcksTx");
    }

    /**
     * Marks the leaf "block-acks-tx" with operation "delete".
     */
    public void markBlockAcksTxDelete() throws JNCException {
        markLeafDelete("blockAcksTx");
    }

    /* Access methods for optional leaf child: "unblocks-rx". */

    /**
     * Gets the value for child leaf "unblocks-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnblocksRxValue() throws JNCException {
        return (YangUInt32)getValue("unblocks-rx");
    }

    /**
     * Sets the value for child leaf "unblocks-rx",
     * using instance of generated typedef class.
     * @param unblocksRxValue The value to set.
     * @param unblocksRxValue used during instantiation.
     */
    public void setUnblocksRxValue(YangUInt32 unblocksRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unblocks-rx",
            unblocksRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unblocks-rx",
     * using Java primitive values.
     * @param unblocksRxValue used during instantiation.
     */
    public void setUnblocksRxValue(long unblocksRxValue) throws JNCException {
        setUnblocksRxValue(new YangUInt32(unblocksRxValue));
    }

    /**
     * Sets the value for child leaf "unblocks-rx",
     * using a String value.
     * @param unblocksRxValue used during instantiation.
     */
    public void setUnblocksRxValue(String unblocksRxValue) throws JNCException {
        setUnblocksRxValue(new YangUInt32(unblocksRxValue));
    }

    /**
     * Unsets the value for child leaf "unblocks-rx".
     */
    public void unsetUnblocksRxValue() throws JNCException {
        delete("unblocks-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unblocks-rx" leaf will not have a value.
     */
    public void addUnblocksRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unblocks-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unblocks-rx" with operation "replace".
     */
    public void markUnblocksRxReplace() throws JNCException {
        markLeafReplace("unblocksRx");
    }

    /**
     * Marks the leaf "unblocks-rx" with operation "merge".
     */
    public void markUnblocksRxMerge() throws JNCException {
        markLeafMerge("unblocksRx");
    }

    /**
     * Marks the leaf "unblocks-rx" with operation "create".
     */
    public void markUnblocksRxCreate() throws JNCException {
        markLeafCreate("unblocksRx");
    }

    /**
     * Marks the leaf "unblocks-rx" with operation "delete".
     */
    public void markUnblocksRxDelete() throws JNCException {
        markLeafDelete("unblocksRx");
    }

    /* Access methods for optional leaf child: "unblocks-tx". */

    /**
     * Gets the value for child leaf "unblocks-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnblocksTxValue() throws JNCException {
        return (YangUInt32)getValue("unblocks-tx");
    }

    /**
     * Sets the value for child leaf "unblocks-tx",
     * using instance of generated typedef class.
     * @param unblocksTxValue The value to set.
     * @param unblocksTxValue used during instantiation.
     */
    public void setUnblocksTxValue(YangUInt32 unblocksTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unblocks-tx",
            unblocksTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unblocks-tx",
     * using Java primitive values.
     * @param unblocksTxValue used during instantiation.
     */
    public void setUnblocksTxValue(long unblocksTxValue) throws JNCException {
        setUnblocksTxValue(new YangUInt32(unblocksTxValue));
    }

    /**
     * Sets the value for child leaf "unblocks-tx",
     * using a String value.
     * @param unblocksTxValue used during instantiation.
     */
    public void setUnblocksTxValue(String unblocksTxValue) throws JNCException {
        setUnblocksTxValue(new YangUInt32(unblocksTxValue));
    }

    /**
     * Unsets the value for child leaf "unblocks-tx".
     */
    public void unsetUnblocksTxValue() throws JNCException {
        delete("unblocks-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unblocks-tx" leaf will not have a value.
     */
    public void addUnblocksTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unblocks-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unblocks-tx" with operation "replace".
     */
    public void markUnblocksTxReplace() throws JNCException {
        markLeafReplace("unblocksTx");
    }

    /**
     * Marks the leaf "unblocks-tx" with operation "merge".
     */
    public void markUnblocksTxMerge() throws JNCException {
        markLeafMerge("unblocksTx");
    }

    /**
     * Marks the leaf "unblocks-tx" with operation "create".
     */
    public void markUnblocksTxCreate() throws JNCException {
        markLeafCreate("unblocksTx");
    }

    /**
     * Marks the leaf "unblocks-tx" with operation "delete".
     */
    public void markUnblocksTxDelete() throws JNCException {
        markLeafDelete("unblocksTx");
    }

    /* Access methods for optional leaf child: "unblock-acks-rx". */

    /**
     * Gets the value for child leaf "unblock-acks-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnblockAcksRxValue() throws JNCException {
        return (YangUInt32)getValue("unblock-acks-rx");
    }

    /**
     * Sets the value for child leaf "unblock-acks-rx",
     * using instance of generated typedef class.
     * @param unblockAcksRxValue The value to set.
     * @param unblockAcksRxValue used during instantiation.
     */
    public void setUnblockAcksRxValue(YangUInt32 unblockAcksRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unblock-acks-rx",
            unblockAcksRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unblock-acks-rx",
     * using Java primitive values.
     * @param unblockAcksRxValue used during instantiation.
     */
    public void setUnblockAcksRxValue(long unblockAcksRxValue)
            throws JNCException {
        setUnblockAcksRxValue(new YangUInt32(unblockAcksRxValue));
    }

    /**
     * Sets the value for child leaf "unblock-acks-rx",
     * using a String value.
     * @param unblockAcksRxValue used during instantiation.
     */
    public void setUnblockAcksRxValue(String unblockAcksRxValue)
            throws JNCException {
        setUnblockAcksRxValue(new YangUInt32(unblockAcksRxValue));
    }

    /**
     * Unsets the value for child leaf "unblock-acks-rx".
     */
    public void unsetUnblockAcksRxValue() throws JNCException {
        delete("unblock-acks-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unblock-acks-rx" leaf will not have a value.
     */
    public void addUnblockAcksRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unblock-acks-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unblock-acks-rx" with operation "replace".
     */
    public void markUnblockAcksRxReplace() throws JNCException {
        markLeafReplace("unblockAcksRx");
    }

    /**
     * Marks the leaf "unblock-acks-rx" with operation "merge".
     */
    public void markUnblockAcksRxMerge() throws JNCException {
        markLeafMerge("unblockAcksRx");
    }

    /**
     * Marks the leaf "unblock-acks-rx" with operation "create".
     */
    public void markUnblockAcksRxCreate() throws JNCException {
        markLeafCreate("unblockAcksRx");
    }

    /**
     * Marks the leaf "unblock-acks-rx" with operation "delete".
     */
    public void markUnblockAcksRxDelete() throws JNCException {
        markLeafDelete("unblockAcksRx");
    }

    /* Access methods for optional leaf child: "unblock-acks-tx". */

    /**
     * Gets the value for child leaf "unblock-acks-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnblockAcksTxValue() throws JNCException {
        return (YangUInt32)getValue("unblock-acks-tx");
    }

    /**
     * Sets the value for child leaf "unblock-acks-tx",
     * using instance of generated typedef class.
     * @param unblockAcksTxValue The value to set.
     * @param unblockAcksTxValue used during instantiation.
     */
    public void setUnblockAcksTxValue(YangUInt32 unblockAcksTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unblock-acks-tx",
            unblockAcksTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unblock-acks-tx",
     * using Java primitive values.
     * @param unblockAcksTxValue used during instantiation.
     */
    public void setUnblockAcksTxValue(long unblockAcksTxValue)
            throws JNCException {
        setUnblockAcksTxValue(new YangUInt32(unblockAcksTxValue));
    }

    /**
     * Sets the value for child leaf "unblock-acks-tx",
     * using a String value.
     * @param unblockAcksTxValue used during instantiation.
     */
    public void setUnblockAcksTxValue(String unblockAcksTxValue)
            throws JNCException {
        setUnblockAcksTxValue(new YangUInt32(unblockAcksTxValue));
    }

    /**
     * Unsets the value for child leaf "unblock-acks-tx".
     */
    public void unsetUnblockAcksTxValue() throws JNCException {
        delete("unblock-acks-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unblock-acks-tx" leaf will not have a value.
     */
    public void addUnblockAcksTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unblock-acks-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unblock-acks-tx" with operation "replace".
     */
    public void markUnblockAcksTxReplace() throws JNCException {
        markLeafReplace("unblockAcksTx");
    }

    /**
     * Marks the leaf "unblock-acks-tx" with operation "merge".
     */
    public void markUnblockAcksTxMerge() throws JNCException {
        markLeafMerge("unblockAcksTx");
    }

    /**
     * Marks the leaf "unblock-acks-tx" with operation "create".
     */
    public void markUnblockAcksTxCreate() throws JNCException {
        markLeafCreate("unblockAcksTx");
    }

    /**
     * Marks the leaf "unblock-acks-tx" with operation "delete".
     */
    public void markUnblockAcksTxDelete() throws JNCException {
        markLeafDelete("unblockAcksTx");
    }

    /* Access methods for optional leaf child: "resets-rx". */

    /**
     * Gets the value for child leaf "resets-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getResetsRxValue() throws JNCException {
        return (YangUInt32)getValue("resets-rx");
    }

    /**
     * Sets the value for child leaf "resets-rx",
     * using instance of generated typedef class.
     * @param resetsRxValue The value to set.
     * @param resetsRxValue used during instantiation.
     */
    public void setResetsRxValue(YangUInt32 resetsRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "resets-rx",
            resetsRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "resets-rx",
     * using Java primitive values.
     * @param resetsRxValue used during instantiation.
     */
    public void setResetsRxValue(long resetsRxValue) throws JNCException {
        setResetsRxValue(new YangUInt32(resetsRxValue));
    }

    /**
     * Sets the value for child leaf "resets-rx",
     * using a String value.
     * @param resetsRxValue used during instantiation.
     */
    public void setResetsRxValue(String resetsRxValue) throws JNCException {
        setResetsRxValue(new YangUInt32(resetsRxValue));
    }

    /**
     * Unsets the value for child leaf "resets-rx".
     */
    public void unsetResetsRxValue() throws JNCException {
        delete("resets-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "resets-rx" leaf will not have a value.
     */
    public void addResetsRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "resets-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "resets-rx" with operation "replace".
     */
    public void markResetsRxReplace() throws JNCException {
        markLeafReplace("resetsRx");
    }

    /**
     * Marks the leaf "resets-rx" with operation "merge".
     */
    public void markResetsRxMerge() throws JNCException {
        markLeafMerge("resetsRx");
    }

    /**
     * Marks the leaf "resets-rx" with operation "create".
     */
    public void markResetsRxCreate() throws JNCException {
        markLeafCreate("resetsRx");
    }

    /**
     * Marks the leaf "resets-rx" with operation "delete".
     */
    public void markResetsRxDelete() throws JNCException {
        markLeafDelete("resetsRx");
    }

    /* Access methods for optional leaf child: "resets-tx". */

    /**
     * Gets the value for child leaf "resets-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getResetsTxValue() throws JNCException {
        return (YangUInt32)getValue("resets-tx");
    }

    /**
     * Sets the value for child leaf "resets-tx",
     * using instance of generated typedef class.
     * @param resetsTxValue The value to set.
     * @param resetsTxValue used during instantiation.
     */
    public void setResetsTxValue(YangUInt32 resetsTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "resets-tx",
            resetsTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "resets-tx",
     * using Java primitive values.
     * @param resetsTxValue used during instantiation.
     */
    public void setResetsTxValue(long resetsTxValue) throws JNCException {
        setResetsTxValue(new YangUInt32(resetsTxValue));
    }

    /**
     * Sets the value for child leaf "resets-tx",
     * using a String value.
     * @param resetsTxValue used during instantiation.
     */
    public void setResetsTxValue(String resetsTxValue) throws JNCException {
        setResetsTxValue(new YangUInt32(resetsTxValue));
    }

    /**
     * Unsets the value for child leaf "resets-tx".
     */
    public void unsetResetsTxValue() throws JNCException {
        delete("resets-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "resets-tx" leaf will not have a value.
     */
    public void addResetsTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "resets-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "resets-tx" with operation "replace".
     */
    public void markResetsTxReplace() throws JNCException {
        markLeafReplace("resetsTx");
    }

    /**
     * Marks the leaf "resets-tx" with operation "merge".
     */
    public void markResetsTxMerge() throws JNCException {
        markLeafMerge("resetsTx");
    }

    /**
     * Marks the leaf "resets-tx" with operation "create".
     */
    public void markResetsTxCreate() throws JNCException {
        markLeafCreate("resetsTx");
    }

    /**
     * Marks the leaf "resets-tx" with operation "delete".
     */
    public void markResetsTxDelete() throws JNCException {
        markLeafDelete("resetsTx");
    }

    /* Access methods for optional leaf child: "reset-acks-rx". */

    /**
     * Gets the value for child leaf "reset-acks-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getResetAcksRxValue() throws JNCException {
        return (YangUInt32)getValue("reset-acks-rx");
    }

    /**
     * Sets the value for child leaf "reset-acks-rx",
     * using instance of generated typedef class.
     * @param resetAcksRxValue The value to set.
     * @param resetAcksRxValue used during instantiation.
     */
    public void setResetAcksRxValue(YangUInt32 resetAcksRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-acks-rx",
            resetAcksRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "reset-acks-rx",
     * using Java primitive values.
     * @param resetAcksRxValue used during instantiation.
     */
    public void setResetAcksRxValue(long resetAcksRxValue) throws JNCException {
        setResetAcksRxValue(new YangUInt32(resetAcksRxValue));
    }

    /**
     * Sets the value for child leaf "reset-acks-rx",
     * using a String value.
     * @param resetAcksRxValue used during instantiation.
     */
    public void setResetAcksRxValue(String resetAcksRxValue)
            throws JNCException {
        setResetAcksRxValue(new YangUInt32(resetAcksRxValue));
    }

    /**
     * Unsets the value for child leaf "reset-acks-rx".
     */
    public void unsetResetAcksRxValue() throws JNCException {
        delete("reset-acks-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "reset-acks-rx" leaf will not have a value.
     */
    public void addResetAcksRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-acks-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "reset-acks-rx" with operation "replace".
     */
    public void markResetAcksRxReplace() throws JNCException {
        markLeafReplace("resetAcksRx");
    }

    /**
     * Marks the leaf "reset-acks-rx" with operation "merge".
     */
    public void markResetAcksRxMerge() throws JNCException {
        markLeafMerge("resetAcksRx");
    }

    /**
     * Marks the leaf "reset-acks-rx" with operation "create".
     */
    public void markResetAcksRxCreate() throws JNCException {
        markLeafCreate("resetAcksRx");
    }

    /**
     * Marks the leaf "reset-acks-rx" with operation "delete".
     */
    public void markResetAcksRxDelete() throws JNCException {
        markLeafDelete("resetAcksRx");
    }

    /* Access methods for optional leaf child: "reset-acks-tx". */

    /**
     * Gets the value for child leaf "reset-acks-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getResetAcksTxValue() throws JNCException {
        return (YangUInt32)getValue("reset-acks-tx");
    }

    /**
     * Sets the value for child leaf "reset-acks-tx",
     * using instance of generated typedef class.
     * @param resetAcksTxValue The value to set.
     * @param resetAcksTxValue used during instantiation.
     */
    public void setResetAcksTxValue(YangUInt32 resetAcksTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-acks-tx",
            resetAcksTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "reset-acks-tx",
     * using Java primitive values.
     * @param resetAcksTxValue used during instantiation.
     */
    public void setResetAcksTxValue(long resetAcksTxValue) throws JNCException {
        setResetAcksTxValue(new YangUInt32(resetAcksTxValue));
    }

    /**
     * Sets the value for child leaf "reset-acks-tx",
     * using a String value.
     * @param resetAcksTxValue used during instantiation.
     */
    public void setResetAcksTxValue(String resetAcksTxValue)
            throws JNCException {
        setResetAcksTxValue(new YangUInt32(resetAcksTxValue));
    }

    /**
     * Unsets the value for child leaf "reset-acks-tx".
     */
    public void unsetResetAcksTxValue() throws JNCException {
        delete("reset-acks-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "reset-acks-tx" leaf will not have a value.
     */
    public void addResetAcksTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-acks-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "reset-acks-tx" with operation "replace".
     */
    public void markResetAcksTxReplace() throws JNCException {
        markLeafReplace("resetAcksTx");
    }

    /**
     * Marks the leaf "reset-acks-tx" with operation "merge".
     */
    public void markResetAcksTxMerge() throws JNCException {
        markLeafMerge("resetAcksTx");
    }

    /**
     * Marks the leaf "reset-acks-tx" with operation "create".
     */
    public void markResetAcksTxCreate() throws JNCException {
        markLeafCreate("resetAcksTx");
    }

    /**
     * Marks the leaf "reset-acks-tx" with operation "delete".
     */
    public void markResetAcksTxDelete() throws JNCException {
        markLeafDelete("resetAcksTx");
    }

    /* Access methods for optional leaf child: "status-indications". */

    /**
     * Gets the value for child leaf "status-indications".
     * @return The value of the leaf.
     */
    public YangUInt32 getStatusIndicationsValue() throws JNCException {
        return (YangUInt32)getValue("status-indications");
    }

    /**
     * Sets the value for child leaf "status-indications",
     * using instance of generated typedef class.
     * @param statusIndicationsValue The value to set.
     * @param statusIndicationsValue used during instantiation.
     */
    public void setStatusIndicationsValue(YangUInt32 statusIndicationsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-indications",
            statusIndicationsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-indications",
     * using Java primitive values.
     * @param statusIndicationsValue used during instantiation.
     */
    public void setStatusIndicationsValue(long statusIndicationsValue)
            throws JNCException {
        setStatusIndicationsValue(new YangUInt32(statusIndicationsValue));
    }

    /**
     * Sets the value for child leaf "status-indications",
     * using a String value.
     * @param statusIndicationsValue used during instantiation.
     */
    public void setStatusIndicationsValue(String statusIndicationsValue)
            throws JNCException {
        setStatusIndicationsValue(new YangUInt32(statusIndicationsValue));
    }

    /**
     * Unsets the value for child leaf "status-indications".
     */
    public void unsetStatusIndicationsValue() throws JNCException {
        delete("status-indications");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-indications" leaf will not have a value.
     */
    public void addStatusIndications() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-indications",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-indications" with operation "replace".
     */
    public void markStatusIndicationsReplace() throws JNCException {
        markLeafReplace("statusIndications");
    }

    /**
     * Marks the leaf "status-indications" with operation "merge".
     */
    public void markStatusIndicationsMerge() throws JNCException {
        markLeafMerge("statusIndications");
    }

    /**
     * Marks the leaf "status-indications" with operation "create".
     */
    public void markStatusIndicationsCreate() throws JNCException {
        markLeafCreate("statusIndications");
    }

    /**
     * Marks the leaf "status-indications" with operation "delete".
     */
    public void markStatusIndicationsDelete() throws JNCException {
        markLeafDelete("statusIndications");
    }

    /* Access methods for optional leaf child: "fecn-bit-set". */

    /**
     * Gets the value for child leaf "fecn-bit-set".
     * @return The value of the leaf.
     */
    public YangUInt32 getFecnBitSetValue() throws JNCException {
        return (YangUInt32)getValue("fecn-bit-set");
    }

    /**
     * Sets the value for child leaf "fecn-bit-set",
     * using instance of generated typedef class.
     * @param fecnBitSetValue The value to set.
     * @param fecnBitSetValue used during instantiation.
     */
    public void setFecnBitSetValue(YangUInt32 fecnBitSetValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "fecn-bit-set",
            fecnBitSetValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "fecn-bit-set",
     * using Java primitive values.
     * @param fecnBitSetValue used during instantiation.
     */
    public void setFecnBitSetValue(long fecnBitSetValue) throws JNCException {
        setFecnBitSetValue(new YangUInt32(fecnBitSetValue));
    }

    /**
     * Sets the value for child leaf "fecn-bit-set",
     * using a String value.
     * @param fecnBitSetValue used during instantiation.
     */
    public void setFecnBitSetValue(String fecnBitSetValue) throws JNCException {
        setFecnBitSetValue(new YangUInt32(fecnBitSetValue));
    }

    /**
     * Unsets the value for child leaf "fecn-bit-set".
     */
    public void unsetFecnBitSetValue() throws JNCException {
        delete("fecn-bit-set");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fecn-bit-set" leaf will not have a value.
     */
    public void addFecnBitSet() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "fecn-bit-set",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "fecn-bit-set" with operation "replace".
     */
    public void markFecnBitSetReplace() throws JNCException {
        markLeafReplace("fecnBitSet");
    }

    /**
     * Marks the leaf "fecn-bit-set" with operation "merge".
     */
    public void markFecnBitSetMerge() throws JNCException {
        markLeafMerge("fecnBitSet");
    }

    /**
     * Marks the leaf "fecn-bit-set" with operation "create".
     */
    public void markFecnBitSetCreate() throws JNCException {
        markLeafCreate("fecnBitSet");
    }

    /**
     * Marks the leaf "fecn-bit-set" with operation "delete".
     */
    public void markFecnBitSetDelete() throws JNCException {
        markLeafDelete("fecnBitSet");
    }

    /* Access methods for optional leaf child: "becn-bit-set". */

    /**
     * Gets the value for child leaf "becn-bit-set".
     * @return The value of the leaf.
     */
    public YangUInt32 getBecnBitSetValue() throws JNCException {
        return (YangUInt32)getValue("becn-bit-set");
    }

    /**
     * Sets the value for child leaf "becn-bit-set",
     * using instance of generated typedef class.
     * @param becnBitSetValue The value to set.
     * @param becnBitSetValue used during instantiation.
     */
    public void setBecnBitSetValue(YangUInt32 becnBitSetValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "becn-bit-set",
            becnBitSetValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "becn-bit-set",
     * using Java primitive values.
     * @param becnBitSetValue used during instantiation.
     */
    public void setBecnBitSetValue(long becnBitSetValue) throws JNCException {
        setBecnBitSetValue(new YangUInt32(becnBitSetValue));
    }

    /**
     * Sets the value for child leaf "becn-bit-set",
     * using a String value.
     * @param becnBitSetValue used during instantiation.
     */
    public void setBecnBitSetValue(String becnBitSetValue) throws JNCException {
        setBecnBitSetValue(new YangUInt32(becnBitSetValue));
    }

    /**
     * Unsets the value for child leaf "becn-bit-set".
     */
    public void unsetBecnBitSetValue() throws JNCException {
        delete("becn-bit-set");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "becn-bit-set" leaf will not have a value.
     */
    public void addBecnBitSet() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "becn-bit-set",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "becn-bit-set" with operation "replace".
     */
    public void markBecnBitSetReplace() throws JNCException {
        markLeafReplace("becnBitSet");
    }

    /**
     * Marks the leaf "becn-bit-set" with operation "merge".
     */
    public void markBecnBitSetMerge() throws JNCException {
        markLeafMerge("becnBitSet");
    }

    /**
     * Marks the leaf "becn-bit-set" with operation "create".
     */
    public void markBecnBitSetCreate() throws JNCException {
        markLeafCreate("becnBitSet");
    }

    /**
     * Marks the leaf "becn-bit-set" with operation "delete".
     */
    public void markBecnBitSetDelete() throws JNCException {
        markLeafDelete("becnBitSet");
    }

    /* Access methods for optional leaf child: "diagnostic-reason". */

    /**
     * Gets the value for child leaf "diagnostic-reason".
     * @return The value of the leaf.
     */
    public YangString getDiagnosticReasonValue() throws JNCException {
        return (YangString)getValue("diagnostic-reason");
    }

    /**
     * Sets the value for child leaf "diagnostic-reason",
     * using instance of generated typedef class.
     * @param diagnosticReasonValue The value to set.
     * @param diagnosticReasonValue used during instantiation.
     */
    public void setDiagnosticReasonValue(YangString diagnosticReasonValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "diagnostic-reason",
            diagnosticReasonValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "diagnostic-reason",
     * using a String value.
     * @param diagnosticReasonValue used during instantiation.
     */
    public void setDiagnosticReasonValue(String diagnosticReasonValue)
            throws JNCException {
        setDiagnosticReasonValue(new YangString(diagnosticReasonValue));
    }

    /**
     * Unsets the value for child leaf "diagnostic-reason".
     */
    public void unsetDiagnosticReasonValue() throws JNCException {
        delete("diagnostic-reason");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "diagnostic-reason" leaf will not have a value.
     */
    public void addDiagnosticReason() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "diagnostic-reason",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "diagnostic-reason" with operation "replace".
     */
    public void markDiagnosticReasonReplace() throws JNCException {
        markLeafReplace("diagnosticReason");
    }

    /**
     * Marks the leaf "diagnostic-reason" with operation "merge".
     */
    public void markDiagnosticReasonMerge() throws JNCException {
        markLeafMerge("diagnosticReason");
    }

    /**
     * Marks the leaf "diagnostic-reason" with operation "create".
     */
    public void markDiagnosticReasonCreate() throws JNCException {
        markLeafCreate("diagnosticReason");
    }

    /**
     * Marks the leaf "diagnostic-reason" with operation "delete".
     */
    public void markDiagnosticReasonDelete() throws JNCException {
        markLeafDelete("diagnosticReason");
    }

    /* Access methods for optional leaf child: "cw-pdus-rx". */

    /**
     * Gets the value for child leaf "cw-pdus-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getCwPdusRxValue() throws JNCException {
        return (YangUInt32)getValue("cw-pdus-rx");
    }

    /**
     * Sets the value for child leaf "cw-pdus-rx",
     * using instance of generated typedef class.
     * @param cwPdusRxValue The value to set.
     * @param cwPdusRxValue used during instantiation.
     */
    public void setCwPdusRxValue(YangUInt32 cwPdusRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-pdus-rx",
            cwPdusRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cw-pdus-rx",
     * using Java primitive values.
     * @param cwPdusRxValue used during instantiation.
     */
    public void setCwPdusRxValue(long cwPdusRxValue) throws JNCException {
        setCwPdusRxValue(new YangUInt32(cwPdusRxValue));
    }

    /**
     * Sets the value for child leaf "cw-pdus-rx",
     * using a String value.
     * @param cwPdusRxValue used during instantiation.
     */
    public void setCwPdusRxValue(String cwPdusRxValue) throws JNCException {
        setCwPdusRxValue(new YangUInt32(cwPdusRxValue));
    }

    /**
     * Unsets the value for child leaf "cw-pdus-rx".
     */
    public void unsetCwPdusRxValue() throws JNCException {
        delete("cw-pdus-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cw-pdus-rx" leaf will not have a value.
     */
    public void addCwPdusRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-pdus-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cw-pdus-rx" with operation "replace".
     */
    public void markCwPdusRxReplace() throws JNCException {
        markLeafReplace("cwPdusRx");
    }

    /**
     * Marks the leaf "cw-pdus-rx" with operation "merge".
     */
    public void markCwPdusRxMerge() throws JNCException {
        markLeafMerge("cwPdusRx");
    }

    /**
     * Marks the leaf "cw-pdus-rx" with operation "create".
     */
    public void markCwPdusRxCreate() throws JNCException {
        markLeafCreate("cwPdusRx");
    }

    /**
     * Marks the leaf "cw-pdus-rx" with operation "delete".
     */
    public void markCwPdusRxDelete() throws JNCException {
        markLeafDelete("cwPdusRx");
    }

    /* Access methods for optional leaf child: "cw-pdus-rx-reassembled". */

    /**
     * Gets the value for child leaf "cw-pdus-rx-reassembled".
     * @return The value of the leaf.
     */
    public YangUInt32 getCwPdusRxReassembledValue() throws JNCException {
        return (YangUInt32)getValue("cw-pdus-rx-reassembled");
    }

    /**
     * Sets the value for child leaf "cw-pdus-rx-reassembled",
     * using instance of generated typedef class.
     * @param cwPdusRxReassembledValue The value to set.
     * @param cwPdusRxReassembledValue used during instantiation.
     */
    public void setCwPdusRxReassembledValue(YangUInt32 cwPdusRxReassembledValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-pdus-rx-reassembled",
            cwPdusRxReassembledValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cw-pdus-rx-reassembled",
     * using Java primitive values.
     * @param cwPdusRxReassembledValue used during instantiation.
     */
    public void setCwPdusRxReassembledValue(long cwPdusRxReassembledValue)
            throws JNCException {
        setCwPdusRxReassembledValue(new YangUInt32(cwPdusRxReassembledValue));
    }

    /**
     * Sets the value for child leaf "cw-pdus-rx-reassembled",
     * using a String value.
     * @param cwPdusRxReassembledValue used during instantiation.
     */
    public void setCwPdusRxReassembledValue(String cwPdusRxReassembledValue)
            throws JNCException {
        setCwPdusRxReassembledValue(new YangUInt32(cwPdusRxReassembledValue));
    }

    /**
     * Unsets the value for child leaf "cw-pdus-rx-reassembled".
     */
    public void unsetCwPdusRxReassembledValue() throws JNCException {
        delete("cw-pdus-rx-reassembled");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cw-pdus-rx-reassembled" leaf will not have a value.
     */
    public void addCwPdusRxReassembled() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-pdus-rx-reassembled",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cw-pdus-rx-reassembled" with operation "replace".
     */
    public void markCwPdusRxReassembledReplace() throws JNCException {
        markLeafReplace("cwPdusRxReassembled");
    }

    /**
     * Marks the leaf "cw-pdus-rx-reassembled" with operation "merge".
     */
    public void markCwPdusRxReassembledMerge() throws JNCException {
        markLeafMerge("cwPdusRxReassembled");
    }

    /**
     * Marks the leaf "cw-pdus-rx-reassembled" with operation "create".
     */
    public void markCwPdusRxReassembledCreate() throws JNCException {
        markLeafCreate("cwPdusRxReassembled");
    }

    /**
     * Marks the leaf "cw-pdus-rx-reassembled" with operation "delete".
     */
    public void markCwPdusRxReassembledDelete() throws JNCException {
        markLeafDelete("cwPdusRxReassembled");
    }

    /* Access methods for optional leaf child: "cw-pdus-rx-unfragmented". */

    /**
     * Gets the value for child leaf "cw-pdus-rx-unfragmented".
     * @return The value of the leaf.
     */
    public YangUInt32 getCwPdusRxUnfragmentedValue() throws JNCException {
        return (YangUInt32)getValue("cw-pdus-rx-unfragmented");
    }

    /**
     * Sets the value for child leaf "cw-pdus-rx-unfragmented",
     * using instance of generated typedef class.
     * @param cwPdusRxUnfragmentedValue The value to set.
     * @param cwPdusRxUnfragmentedValue used during instantiation.
     */
    public void setCwPdusRxUnfragmentedValue(YangUInt32 cwPdusRxUnfragmentedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-pdus-rx-unfragmented",
            cwPdusRxUnfragmentedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cw-pdus-rx-unfragmented",
     * using Java primitive values.
     * @param cwPdusRxUnfragmentedValue used during instantiation.
     */
    public void setCwPdusRxUnfragmentedValue(long cwPdusRxUnfragmentedValue)
            throws JNCException {
        setCwPdusRxUnfragmentedValue(new YangUInt32(cwPdusRxUnfragmentedValue));
    }

    /**
     * Sets the value for child leaf "cw-pdus-rx-unfragmented",
     * using a String value.
     * @param cwPdusRxUnfragmentedValue used during instantiation.
     */
    public void setCwPdusRxUnfragmentedValue(String cwPdusRxUnfragmentedValue)
            throws JNCException {
        setCwPdusRxUnfragmentedValue(new YangUInt32(cwPdusRxUnfragmentedValue));
    }

    /**
     * Unsets the value for child leaf "cw-pdus-rx-unfragmented".
     */
    public void unsetCwPdusRxUnfragmentedValue() throws JNCException {
        delete("cw-pdus-rx-unfragmented");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cw-pdus-rx-unfragmented" leaf will not have a value.
     */
    public void addCwPdusRxUnfragmented() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-pdus-rx-unfragmented",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cw-pdus-rx-unfragmented" with operation "replace".
     */
    public void markCwPdusRxUnfragmentedReplace() throws JNCException {
        markLeafReplace("cwPdusRxUnfragmented");
    }

    /**
     * Marks the leaf "cw-pdus-rx-unfragmented" with operation "merge".
     */
    public void markCwPdusRxUnfragmentedMerge() throws JNCException {
        markLeafMerge("cwPdusRxUnfragmented");
    }

    /**
     * Marks the leaf "cw-pdus-rx-unfragmented" with operation "create".
     */
    public void markCwPdusRxUnfragmentedCreate() throws JNCException {
        markLeafCreate("cwPdusRxUnfragmented");
    }

    /**
     * Marks the leaf "cw-pdus-rx-unfragmented" with operation "delete".
     */
    public void markCwPdusRxUnfragmentedDelete() throws JNCException {
        markLeafDelete("cwPdusRxUnfragmented");
    }

    /* Access methods for optional leaf child: "cw-pdus-tx". */

    /**
     * Gets the value for child leaf "cw-pdus-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getCwPdusTxValue() throws JNCException {
        return (YangUInt32)getValue("cw-pdus-tx");
    }

    /**
     * Sets the value for child leaf "cw-pdus-tx",
     * using instance of generated typedef class.
     * @param cwPdusTxValue The value to set.
     * @param cwPdusTxValue used during instantiation.
     */
    public void setCwPdusTxValue(YangUInt32 cwPdusTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-pdus-tx",
            cwPdusTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cw-pdus-tx",
     * using Java primitive values.
     * @param cwPdusTxValue used during instantiation.
     */
    public void setCwPdusTxValue(long cwPdusTxValue) throws JNCException {
        setCwPdusTxValue(new YangUInt32(cwPdusTxValue));
    }

    /**
     * Sets the value for child leaf "cw-pdus-tx",
     * using a String value.
     * @param cwPdusTxValue used during instantiation.
     */
    public void setCwPdusTxValue(String cwPdusTxValue) throws JNCException {
        setCwPdusTxValue(new YangUInt32(cwPdusTxValue));
    }

    /**
     * Unsets the value for child leaf "cw-pdus-tx".
     */
    public void unsetCwPdusTxValue() throws JNCException {
        delete("cw-pdus-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cw-pdus-tx" leaf will not have a value.
     */
    public void addCwPdusTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-pdus-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cw-pdus-tx" with operation "replace".
     */
    public void markCwPdusTxReplace() throws JNCException {
        markLeafReplace("cwPdusTx");
    }

    /**
     * Marks the leaf "cw-pdus-tx" with operation "merge".
     */
    public void markCwPdusTxMerge() throws JNCException {
        markLeafMerge("cwPdusTx");
    }

    /**
     * Marks the leaf "cw-pdus-tx" with operation "create".
     */
    public void markCwPdusTxCreate() throws JNCException {
        markLeafCreate("cwPdusTx");
    }

    /**
     * Marks the leaf "cw-pdus-tx" with operation "delete".
     */
    public void markCwPdusTxDelete() throws JNCException {
        markLeafDelete("cwPdusTx");
    }

    /* Access methods for optional leaf child: "cw-octets-rx". */

    /**
     * Gets the value for child leaf "cw-octets-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getCwOctetsRxValue() throws JNCException {
        return (YangUInt32)getValue("cw-octets-rx");
    }

    /**
     * Sets the value for child leaf "cw-octets-rx",
     * using instance of generated typedef class.
     * @param cwOctetsRxValue The value to set.
     * @param cwOctetsRxValue used during instantiation.
     */
    public void setCwOctetsRxValue(YangUInt32 cwOctetsRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-octets-rx",
            cwOctetsRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cw-octets-rx",
     * using Java primitive values.
     * @param cwOctetsRxValue used during instantiation.
     */
    public void setCwOctetsRxValue(long cwOctetsRxValue) throws JNCException {
        setCwOctetsRxValue(new YangUInt32(cwOctetsRxValue));
    }

    /**
     * Sets the value for child leaf "cw-octets-rx",
     * using a String value.
     * @param cwOctetsRxValue used during instantiation.
     */
    public void setCwOctetsRxValue(String cwOctetsRxValue) throws JNCException {
        setCwOctetsRxValue(new YangUInt32(cwOctetsRxValue));
    }

    /**
     * Unsets the value for child leaf "cw-octets-rx".
     */
    public void unsetCwOctetsRxValue() throws JNCException {
        delete("cw-octets-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cw-octets-rx" leaf will not have a value.
     */
    public void addCwOctetsRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-octets-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cw-octets-rx" with operation "replace".
     */
    public void markCwOctetsRxReplace() throws JNCException {
        markLeafReplace("cwOctetsRx");
    }

    /**
     * Marks the leaf "cw-octets-rx" with operation "merge".
     */
    public void markCwOctetsRxMerge() throws JNCException {
        markLeafMerge("cwOctetsRx");
    }

    /**
     * Marks the leaf "cw-octets-rx" with operation "create".
     */
    public void markCwOctetsRxCreate() throws JNCException {
        markLeafCreate("cwOctetsRx");
    }

    /**
     * Marks the leaf "cw-octets-rx" with operation "delete".
     */
    public void markCwOctetsRxDelete() throws JNCException {
        markLeafDelete("cwOctetsRx");
    }

    /* Access methods for optional leaf child: "cw-octets-tx". */

    /**
     * Gets the value for child leaf "cw-octets-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getCwOctetsTxValue() throws JNCException {
        return (YangUInt32)getValue("cw-octets-tx");
    }

    /**
     * Sets the value for child leaf "cw-octets-tx",
     * using instance of generated typedef class.
     * @param cwOctetsTxValue The value to set.
     * @param cwOctetsTxValue used during instantiation.
     */
    public void setCwOctetsTxValue(YangUInt32 cwOctetsTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-octets-tx",
            cwOctetsTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cw-octets-tx",
     * using Java primitive values.
     * @param cwOctetsTxValue used during instantiation.
     */
    public void setCwOctetsTxValue(long cwOctetsTxValue) throws JNCException {
        setCwOctetsTxValue(new YangUInt32(cwOctetsTxValue));
    }

    /**
     * Sets the value for child leaf "cw-octets-tx",
     * using a String value.
     * @param cwOctetsTxValue used during instantiation.
     */
    public void setCwOctetsTxValue(String cwOctetsTxValue) throws JNCException {
        setCwOctetsTxValue(new YangUInt32(cwOctetsTxValue));
    }

    /**
     * Unsets the value for child leaf "cw-octets-tx".
     */
    public void unsetCwOctetsTxValue() throws JNCException {
        delete("cw-octets-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cw-octets-tx" leaf will not have a value.
     */
    public void addCwOctetsTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-octets-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cw-octets-tx" with operation "replace".
     */
    public void markCwOctetsTxReplace() throws JNCException {
        markLeafReplace("cwOctetsTx");
    }

    /**
     * Marks the leaf "cw-octets-tx" with operation "merge".
     */
    public void markCwOctetsTxMerge() throws JNCException {
        markLeafMerge("cwOctetsTx");
    }

    /**
     * Marks the leaf "cw-octets-tx" with operation "create".
     */
    public void markCwOctetsTxCreate() throws JNCException {
        markLeafCreate("cwOctetsTx");
    }

    /**
     * Marks the leaf "cw-octets-tx" with operation "delete".
     */
    public void markCwOctetsTxDelete() throws JNCException {
        markLeafDelete("cwOctetsTx");
    }

    /* Access methods for optional leaf child: "cw-pdus-lost-or-discarded". */

    /**
     * Gets the value for child leaf "cw-pdus-lost-or-discarded".
     * @return The value of the leaf.
     */
    public YangUInt32 getCwPdusLostOrDiscardedValue() throws JNCException {
        return (YangUInt32)getValue("cw-pdus-lost-or-discarded");
    }

    /**
     * Sets the value for child leaf "cw-pdus-lost-or-discarded",
     * using instance of generated typedef class.
     * @param cwPdusLostOrDiscardedValue The value to set.
     * @param cwPdusLostOrDiscardedValue used during instantiation.
     */
    public void setCwPdusLostOrDiscardedValue(YangUInt32 cwPdusLostOrDiscardedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-pdus-lost-or-discarded",
            cwPdusLostOrDiscardedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cw-pdus-lost-or-discarded",
     * using Java primitive values.
     * @param cwPdusLostOrDiscardedValue used during instantiation.
     */
    public void setCwPdusLostOrDiscardedValue(long cwPdusLostOrDiscardedValue)
            throws JNCException {
        setCwPdusLostOrDiscardedValue(new YangUInt32(cwPdusLostOrDiscardedValue));
    }

    /**
     * Sets the value for child leaf "cw-pdus-lost-or-discarded",
     * using a String value.
     * @param cwPdusLostOrDiscardedValue used during instantiation.
     */
    public void setCwPdusLostOrDiscardedValue(String cwPdusLostOrDiscardedValue)
            throws JNCException {
        setCwPdusLostOrDiscardedValue(new YangUInt32(cwPdusLostOrDiscardedValue));
    }

    /**
     * Unsets the value for child leaf "cw-pdus-lost-or-discarded".
     */
    public void unsetCwPdusLostOrDiscardedValue() throws JNCException {
        delete("cw-pdus-lost-or-discarded");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cw-pdus-lost-or-discarded" leaf will not have a value.
     */
    public void addCwPdusLostOrDiscarded() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-pdus-lost-or-discarded",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cw-pdus-lost-or-discarded" with operation "replace".
     */
    public void markCwPdusLostOrDiscardedReplace() throws JNCException {
        markLeafReplace("cwPdusLostOrDiscarded");
    }

    /**
     * Marks the leaf "cw-pdus-lost-or-discarded" with operation "merge".
     */
    public void markCwPdusLostOrDiscardedMerge() throws JNCException {
        markLeafMerge("cwPdusLostOrDiscarded");
    }

    /**
     * Marks the leaf "cw-pdus-lost-or-discarded" with operation "create".
     */
    public void markCwPdusLostOrDiscardedCreate() throws JNCException {
        markLeafCreate("cwPdusLostOrDiscarded");
    }

    /**
     * Marks the leaf "cw-pdus-lost-or-discarded" with operation "delete".
     */
    public void markCwPdusLostOrDiscardedDelete() throws JNCException {
        markLeafDelete("cwPdusLostOrDiscarded");
    }

    /* Access methods for optional leaf child: "cw-fragments-lost-or-discarded". */

    /**
     * Gets the value for child leaf "cw-fragments-lost-or-discarded".
     * @return The value of the leaf.
     */
    public YangUInt32 getCwFragmentsLostOrDiscardedValue() throws JNCException {
        return (YangUInt32)getValue("cw-fragments-lost-or-discarded");
    }

    /**
     * Sets the value for child leaf "cw-fragments-lost-or-discarded",
     * using instance of generated typedef class.
     * @param cwFragmentsLostOrDiscardedValue The value to set.
     * @param cwFragmentsLostOrDiscardedValue used during instantiation.
     */
    public void setCwFragmentsLostOrDiscardedValue(YangUInt32 cwFragmentsLostOrDiscardedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-fragments-lost-or-discarded",
            cwFragmentsLostOrDiscardedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cw-fragments-lost-or-discarded",
     * using Java primitive values.
     * @param cwFragmentsLostOrDiscardedValue used during instantiation.
     */
    public void setCwFragmentsLostOrDiscardedValue(long cwFragmentsLostOrDiscardedValue)
            throws JNCException {
        setCwFragmentsLostOrDiscardedValue(new YangUInt32(cwFragmentsLostOrDiscardedValue));
    }

    /**
     * Sets the value for child leaf "cw-fragments-lost-or-discarded",
     * using a String value.
     * @param cwFragmentsLostOrDiscardedValue used during instantiation.
     */
    public void setCwFragmentsLostOrDiscardedValue(String cwFragmentsLostOrDiscardedValue)
            throws JNCException {
        setCwFragmentsLostOrDiscardedValue(new YangUInt32(cwFragmentsLostOrDiscardedValue));
    }

    /**
     * Unsets the value for child leaf "cw-fragments-lost-or-discarded".
     */
    public void unsetCwFragmentsLostOrDiscardedValue() throws JNCException {
        delete("cw-fragments-lost-or-discarded");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cw-fragments-lost-or-discarded" leaf will not have a value.
     */
    public void addCwFragmentsLostOrDiscarded() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-fragments-lost-or-discarded",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cw-fragments-lost-or-discarded" with operation "replace".
     */
    public void markCwFragmentsLostOrDiscardedReplace() throws JNCException {
        markLeafReplace("cwFragmentsLostOrDiscarded");
    }

    /**
     * Marks the leaf "cw-fragments-lost-or-discarded" with operation "merge".
     */
    public void markCwFragmentsLostOrDiscardedMerge() throws JNCException {
        markLeafMerge("cwFragmentsLostOrDiscarded");
    }

    /**
     * Marks the leaf "cw-fragments-lost-or-discarded" with operation "create".
     */
    public void markCwFragmentsLostOrDiscardedCreate() throws JNCException {
        markLeafCreate("cwFragmentsLostOrDiscarded");
    }

    /**
     * Marks the leaf "cw-fragments-lost-or-discarded" with operation "delete".
     */
    public void markCwFragmentsLostOrDiscardedDelete() throws JNCException {
        markLeafDelete("cwFragmentsLostOrDiscarded");
    }

    /* Access methods for optional leaf child: "cw-protocol-errors". */

    /**
     * Gets the value for child leaf "cw-protocol-errors".
     * @return The value of the leaf.
     */
    public YangUInt32 getCwProtocolErrorsValue() throws JNCException {
        return (YangUInt32)getValue("cw-protocol-errors");
    }

    /**
     * Sets the value for child leaf "cw-protocol-errors",
     * using instance of generated typedef class.
     * @param cwProtocolErrorsValue The value to set.
     * @param cwProtocolErrorsValue used during instantiation.
     */
    public void setCwProtocolErrorsValue(YangUInt32 cwProtocolErrorsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-protocol-errors",
            cwProtocolErrorsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cw-protocol-errors",
     * using Java primitive values.
     * @param cwProtocolErrorsValue used during instantiation.
     */
    public void setCwProtocolErrorsValue(long cwProtocolErrorsValue)
            throws JNCException {
        setCwProtocolErrorsValue(new YangUInt32(cwProtocolErrorsValue));
    }

    /**
     * Sets the value for child leaf "cw-protocol-errors",
     * using a String value.
     * @param cwProtocolErrorsValue used during instantiation.
     */
    public void setCwProtocolErrorsValue(String cwProtocolErrorsValue)
            throws JNCException {
        setCwProtocolErrorsValue(new YangUInt32(cwProtocolErrorsValue));
    }

    /**
     * Unsets the value for child leaf "cw-protocol-errors".
     */
    public void unsetCwProtocolErrorsValue() throws JNCException {
        delete("cw-protocol-errors");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cw-protocol-errors" leaf will not have a value.
     */
    public void addCwProtocolErrors() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cw-protocol-errors",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cw-protocol-errors" with operation "replace".
     */
    public void markCwProtocolErrorsReplace() throws JNCException {
        markLeafReplace("cwProtocolErrors");
    }

    /**
     * Marks the leaf "cw-protocol-errors" with operation "merge".
     */
    public void markCwProtocolErrorsMerge() throws JNCException {
        markLeafMerge("cwProtocolErrors");
    }

    /**
     * Marks the leaf "cw-protocol-errors" with operation "create".
     */
    public void markCwProtocolErrorsCreate() throws JNCException {
        markLeafCreate("cwProtocolErrors");
    }

    /**
     * Marks the leaf "cw-protocol-errors" with operation "delete".
     */
    public void markCwProtocolErrorsDelete() throws JNCException {
        markLeafDelete("cwProtocolErrors");
    }

    /* Access methods for optional leaf child: "nsvl-group". */

    /**
     * Gets the value for child leaf "nsvl-group".
     * @return The value of the leaf.
     */
    public YangUInt8 getNsvlGroupValue() throws JNCException {
        return (YangUInt8)getValue("nsvl-group");
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using instance of generated typedef class.
     * @param nsvlGroupValue The value to set.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(YangUInt8 nsvlGroupValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl-group",
            nsvlGroupValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using Java primitive values.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(short nsvlGroupValue) throws JNCException {
        setNsvlGroupValue(new YangUInt8(nsvlGroupValue));
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using a String value.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(String nsvlGroupValue) throws JNCException {
        setNsvlGroupValue(new YangUInt8(nsvlGroupValue));
    }

    /**
     * Unsets the value for child leaf "nsvl-group".
     */
    public void unsetNsvlGroupValue() throws JNCException {
        delete("nsvl-group");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsvl-group" leaf will not have a value.
     */
    public void addNsvlGroup() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl-group",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nsvl-group" with operation "replace".
     */
    public void markNsvlGroupReplace() throws JNCException {
        markLeafReplace("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "merge".
     */
    public void markNsvlGroupMerge() throws JNCException {
        markLeafMerge("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "create".
     */
    public void markNsvlGroupCreate() throws JNCException {
        markLeafCreate("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "delete".
     */
    public void markNsvlGroupDelete() throws JNCException {
        markLeafDelete("nsvlGroup");
    }

    /* Access methods for optional leaf child: "nsvl". */

    /**
     * Gets the value for child leaf "nsvl".
     * @return The value of the leaf.
     */
    public YangUInt8 getNsvlValue() throws JNCException {
        return (YangUInt8)getValue("nsvl");
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using instance of generated typedef class.
     * @param nsvlValue The value to set.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(YangUInt8 nsvlValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl",
            nsvlValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using Java primitive values.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(short nsvlValue) throws JNCException {
        setNsvlValue(new YangUInt8(nsvlValue));
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using a String value.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(String nsvlValue) throws JNCException {
        setNsvlValue(new YangUInt8(nsvlValue));
    }

    /**
     * Unsets the value for child leaf "nsvl".
     */
    public void unsetNsvlValue() throws JNCException {
        delete("nsvl");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsvl" leaf will not have a value.
     */
    public void addNsvl() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nsvl" with operation "replace".
     */
    public void markNsvlReplace() throws JNCException {
        markLeafReplace("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "merge".
     */
    public void markNsvlMerge() throws JNCException {
        markLeafMerge("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "create".
     */
    public void markNsvlCreate() throws JNCException {
        markLeafCreate("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "delete".
     */
    public void markNsvlDelete() throws JNCException {
        markLeafDelete("nsvl");
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "pid". */

    /**
     * Gets the value for child leaf "pid".
     * @return The value of the leaf.
     */
    public YangUInt16 getPidValue() throws JNCException {
        return (YangUInt16)getValue("pid");
    }

    /**
     * Sets the value for child leaf "pid",
     * using instance of generated typedef class.
     * @param pidValue The value to set.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(YangUInt16 pidValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pid",
            pidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pid",
     * using Java primitive values.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(int pidValue) throws JNCException {
        setPidValue(new YangUInt16(pidValue));
    }

    /**
     * Sets the value for child leaf "pid",
     * using a String value.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(String pidValue) throws JNCException {
        setPidValue(new YangUInt16(pidValue));
    }

    /**
     * Unsets the value for child leaf "pid".
     */
    public void unsetPidValue() throws JNCException {
        delete("pid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pid" leaf will not have a value.
     */
    public void addPid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pid" with operation "replace".
     */
    public void markPidReplace() throws JNCException {
        markLeafReplace("pid");
    }

    /**
     * Marks the leaf "pid" with operation "merge".
     */
    public void markPidMerge() throws JNCException {
        markLeafMerge("pid");
    }

    /**
     * Marks the leaf "pid" with operation "create".
     */
    public void markPidCreate() throws JNCException {
        markLeafCreate("pid");
    }

    /**
     * Marks the leaf "pid" with operation "delete".
     */
    public void markPidDelete() throws JNCException {
        markLeafDelete("pid");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
