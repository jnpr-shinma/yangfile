/* 
 * @(#)PtpBvc.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gb;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gb/ptp-bvc"
 * <p>
 * See line 460 in
 * gtlCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class PtpBvc extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty PtpBvc object.
     */
    public PtpBvc() {
        super(Epc.NAMESPACE, "ptp-bvc");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public PtpBvc clone() {
        return (PtpBvc)cloneContent(new PtpBvc());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public PtpBvc cloneShallow() {
        return (PtpBvc)cloneShallowContent(new PtpBvc());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "nse-id",
            "ptp-bvc-id",
            "bvc-global-cell-id",
            "state",
            "availability-status",
            "pdus-rx",
            "pdus-tx",
            "octets-rx",
            "octets-tx",
            "blocks-rx",
            "unblocks-rx",
            "resets-rx",
            "resets-tx",
            "status-rx",
            "status-tx",
            "bvc-flow-control-rx",
            "ms-flow-control-rx",
            "pfc-flow-control-rx",
            "bvc-bmax",
            "leak-rate",
            "bucket-full-ratio",
            "calculated-pcu-buffer",
            "estimated-traffic-available",
            "byte-adjustment-factor",
            "traffic-arrived",
            "current-buffered-frames",
            "current-buffered-data",
            "max-frames-in-buffer",
            "max-buffer-size",
            "flow-control-pdus-discarded",
            "flow-control-octets-discarded",
            "flow-control-bucket-size",
            "bvc-blocked-timeouts",
            "bvc-bmax-timeouts",
            "bvc-leak-rate-timeouts",
            "nsvl-group",
            "nsvl",
            "service",
            "location",
            "pid",
        };
    }

    /* Access methods for optional leaf child: "nse-id". */

    /**
     * Gets the value for child leaf "nse-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getNseIdValue() throws JNCException {
        return (YangUInt16)getValue("nse-id");
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using instance of generated typedef class.
     * @param nseIdValue The value to set.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(YangUInt16 nseIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nse-id",
            nseIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using Java primitive values.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(int nseIdValue) throws JNCException {
        setNseIdValue(new YangUInt16(nseIdValue));
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using a String value.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(String nseIdValue) throws JNCException {
        setNseIdValue(new YangUInt16(nseIdValue));
    }

    /**
     * Unsets the value for child leaf "nse-id".
     */
    public void unsetNseIdValue() throws JNCException {
        delete("nse-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nse-id" leaf will not have a value.
     */
    public void addNseId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nse-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nse-id" with operation "replace".
     */
    public void markNseIdReplace() throws JNCException {
        markLeafReplace("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "merge".
     */
    public void markNseIdMerge() throws JNCException {
        markLeafMerge("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "create".
     */
    public void markNseIdCreate() throws JNCException {
        markLeafCreate("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "delete".
     */
    public void markNseIdDelete() throws JNCException {
        markLeafDelete("nseId");
    }

    /* Access methods for optional leaf child: "ptp-bvc-id". */

    /**
     * Gets the value for child leaf "ptp-bvc-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getPtpBvcIdValue() throws JNCException {
        return (YangUInt16)getValue("ptp-bvc-id");
    }

    /**
     * Sets the value for child leaf "ptp-bvc-id",
     * using instance of generated typedef class.
     * @param ptpBvcIdValue The value to set.
     * @param ptpBvcIdValue used during instantiation.
     */
    public void setPtpBvcIdValue(YangUInt16 ptpBvcIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ptp-bvc-id",
            ptpBvcIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ptp-bvc-id",
     * using Java primitive values.
     * @param ptpBvcIdValue used during instantiation.
     */
    public void setPtpBvcIdValue(int ptpBvcIdValue) throws JNCException {
        setPtpBvcIdValue(new YangUInt16(ptpBvcIdValue));
    }

    /**
     * Sets the value for child leaf "ptp-bvc-id",
     * using a String value.
     * @param ptpBvcIdValue used during instantiation.
     */
    public void setPtpBvcIdValue(String ptpBvcIdValue) throws JNCException {
        setPtpBvcIdValue(new YangUInt16(ptpBvcIdValue));
    }

    /**
     * Unsets the value for child leaf "ptp-bvc-id".
     */
    public void unsetPtpBvcIdValue() throws JNCException {
        delete("ptp-bvc-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ptp-bvc-id" leaf will not have a value.
     */
    public void addPtpBvcId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ptp-bvc-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ptp-bvc-id" with operation "replace".
     */
    public void markPtpBvcIdReplace() throws JNCException {
        markLeafReplace("ptpBvcId");
    }

    /**
     * Marks the leaf "ptp-bvc-id" with operation "merge".
     */
    public void markPtpBvcIdMerge() throws JNCException {
        markLeafMerge("ptpBvcId");
    }

    /**
     * Marks the leaf "ptp-bvc-id" with operation "create".
     */
    public void markPtpBvcIdCreate() throws JNCException {
        markLeafCreate("ptpBvcId");
    }

    /**
     * Marks the leaf "ptp-bvc-id" with operation "delete".
     */
    public void markPtpBvcIdDelete() throws JNCException {
        markLeafDelete("ptpBvcId");
    }

    /* Access methods for optional leaf child: "bvc-global-cell-id". */

    /**
     * Gets the value for child leaf "bvc-global-cell-id".
     * @return The value of the leaf.
     */
    public YangString getBvcGlobalCellIdValue() throws JNCException {
        return (YangString)getValue("bvc-global-cell-id");
    }

    /**
     * Sets the value for child leaf "bvc-global-cell-id",
     * using instance of generated typedef class.
     * @param bvcGlobalCellIdValue The value to set.
     * @param bvcGlobalCellIdValue used during instantiation.
     */
    public void setBvcGlobalCellIdValue(YangString bvcGlobalCellIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-global-cell-id",
            bvcGlobalCellIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bvc-global-cell-id",
     * using a String value.
     * @param bvcGlobalCellIdValue used during instantiation.
     */
    public void setBvcGlobalCellIdValue(String bvcGlobalCellIdValue)
            throws JNCException {
        setBvcGlobalCellIdValue(new YangString(bvcGlobalCellIdValue));
    }

    /**
     * Unsets the value for child leaf "bvc-global-cell-id".
     */
    public void unsetBvcGlobalCellIdValue() throws JNCException {
        delete("bvc-global-cell-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bvc-global-cell-id" leaf will not have a value.
     */
    public void addBvcGlobalCellId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-global-cell-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bvc-global-cell-id" with operation "replace".
     */
    public void markBvcGlobalCellIdReplace() throws JNCException {
        markLeafReplace("bvcGlobalCellId");
    }

    /**
     * Marks the leaf "bvc-global-cell-id" with operation "merge".
     */
    public void markBvcGlobalCellIdMerge() throws JNCException {
        markLeafMerge("bvcGlobalCellId");
    }

    /**
     * Marks the leaf "bvc-global-cell-id" with operation "create".
     */
    public void markBvcGlobalCellIdCreate() throws JNCException {
        markLeafCreate("bvcGlobalCellId");
    }

    /**
     * Marks the leaf "bvc-global-cell-id" with operation "delete".
     */
    public void markBvcGlobalCellIdDelete() throws JNCException {
        markLeafDelete("bvcGlobalCellId");
    }

    /* Access methods for optional leaf child: "state". */

    /**
     * Gets the value for child leaf "state".
     * @return The value of the leaf.
     */
    public YangString getStateValue() throws JNCException {
        return (YangString)getValue("state");
    }

    /**
     * Sets the value for child leaf "state",
     * using instance of generated typedef class.
     * @param stateValue The value to set.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(YangString stateValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "state",
            stateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "state",
     * using a String value.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(String stateValue) throws JNCException {
        setStateValue(new YangString(stateValue));
    }

    /**
     * Unsets the value for child leaf "state".
     */
    public void unsetStateValue() throws JNCException {
        delete("state");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "state" leaf will not have a value.
     */
    public void addState() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "state",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "state" with operation "replace".
     */
    public void markStateReplace() throws JNCException {
        markLeafReplace("state");
    }

    /**
     * Marks the leaf "state" with operation "merge".
     */
    public void markStateMerge() throws JNCException {
        markLeafMerge("state");
    }

    /**
     * Marks the leaf "state" with operation "create".
     */
    public void markStateCreate() throws JNCException {
        markLeafCreate("state");
    }

    /**
     * Marks the leaf "state" with operation "delete".
     */
    public void markStateDelete() throws JNCException {
        markLeafDelete("state");
    }

    /* Access methods for optional leaf child: "availability-status". */

    /**
     * Gets the value for child leaf "availability-status".
     * @return The value of the leaf.
     */
    public YangString getAvailabilityStatusValue() throws JNCException {
        return (YangString)getValue("availability-status");
    }

    /**
     * Sets the value for child leaf "availability-status",
     * using instance of generated typedef class.
     * @param availabilityStatusValue The value to set.
     * @param availabilityStatusValue used during instantiation.
     */
    public void setAvailabilityStatusValue(YangString availabilityStatusValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "availability-status",
            availabilityStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "availability-status",
     * using a String value.
     * @param availabilityStatusValue used during instantiation.
     */
    public void setAvailabilityStatusValue(String availabilityStatusValue)
            throws JNCException {
        setAvailabilityStatusValue(new YangString(availabilityStatusValue));
    }

    /**
     * Unsets the value for child leaf "availability-status".
     */
    public void unsetAvailabilityStatusValue() throws JNCException {
        delete("availability-status");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "availability-status" leaf will not have a value.
     */
    public void addAvailabilityStatus() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "availability-status",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "availability-status" with operation "replace".
     */
    public void markAvailabilityStatusReplace() throws JNCException {
        markLeafReplace("availabilityStatus");
    }

    /**
     * Marks the leaf "availability-status" with operation "merge".
     */
    public void markAvailabilityStatusMerge() throws JNCException {
        markLeafMerge("availabilityStatus");
    }

    /**
     * Marks the leaf "availability-status" with operation "create".
     */
    public void markAvailabilityStatusCreate() throws JNCException {
        markLeafCreate("availabilityStatus");
    }

    /**
     * Marks the leaf "availability-status" with operation "delete".
     */
    public void markAvailabilityStatusDelete() throws JNCException {
        markLeafDelete("availabilityStatus");
    }

    /* Access methods for optional leaf child: "pdus-rx". */

    /**
     * Gets the value for child leaf "pdus-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getPdusRxValue() throws JNCException {
        return (YangUInt32)getValue("pdus-rx");
    }

    /**
     * Sets the value for child leaf "pdus-rx",
     * using instance of generated typedef class.
     * @param pdusRxValue The value to set.
     * @param pdusRxValue used during instantiation.
     */
    public void setPdusRxValue(YangUInt32 pdusRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdus-rx",
            pdusRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pdus-rx",
     * using Java primitive values.
     * @param pdusRxValue used during instantiation.
     */
    public void setPdusRxValue(long pdusRxValue) throws JNCException {
        setPdusRxValue(new YangUInt32(pdusRxValue));
    }

    /**
     * Sets the value for child leaf "pdus-rx",
     * using a String value.
     * @param pdusRxValue used during instantiation.
     */
    public void setPdusRxValue(String pdusRxValue) throws JNCException {
        setPdusRxValue(new YangUInt32(pdusRxValue));
    }

    /**
     * Unsets the value for child leaf "pdus-rx".
     */
    public void unsetPdusRxValue() throws JNCException {
        delete("pdus-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pdus-rx" leaf will not have a value.
     */
    public void addPdusRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdus-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pdus-rx" with operation "replace".
     */
    public void markPdusRxReplace() throws JNCException {
        markLeafReplace("pdusRx");
    }

    /**
     * Marks the leaf "pdus-rx" with operation "merge".
     */
    public void markPdusRxMerge() throws JNCException {
        markLeafMerge("pdusRx");
    }

    /**
     * Marks the leaf "pdus-rx" with operation "create".
     */
    public void markPdusRxCreate() throws JNCException {
        markLeafCreate("pdusRx");
    }

    /**
     * Marks the leaf "pdus-rx" with operation "delete".
     */
    public void markPdusRxDelete() throws JNCException {
        markLeafDelete("pdusRx");
    }

    /* Access methods for optional leaf child: "pdus-tx". */

    /**
     * Gets the value for child leaf "pdus-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getPdusTxValue() throws JNCException {
        return (YangUInt32)getValue("pdus-tx");
    }

    /**
     * Sets the value for child leaf "pdus-tx",
     * using instance of generated typedef class.
     * @param pdusTxValue The value to set.
     * @param pdusTxValue used during instantiation.
     */
    public void setPdusTxValue(YangUInt32 pdusTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdus-tx",
            pdusTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pdus-tx",
     * using Java primitive values.
     * @param pdusTxValue used during instantiation.
     */
    public void setPdusTxValue(long pdusTxValue) throws JNCException {
        setPdusTxValue(new YangUInt32(pdusTxValue));
    }

    /**
     * Sets the value for child leaf "pdus-tx",
     * using a String value.
     * @param pdusTxValue used during instantiation.
     */
    public void setPdusTxValue(String pdusTxValue) throws JNCException {
        setPdusTxValue(new YangUInt32(pdusTxValue));
    }

    /**
     * Unsets the value for child leaf "pdus-tx".
     */
    public void unsetPdusTxValue() throws JNCException {
        delete("pdus-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pdus-tx" leaf will not have a value.
     */
    public void addPdusTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdus-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pdus-tx" with operation "replace".
     */
    public void markPdusTxReplace() throws JNCException {
        markLeafReplace("pdusTx");
    }

    /**
     * Marks the leaf "pdus-tx" with operation "merge".
     */
    public void markPdusTxMerge() throws JNCException {
        markLeafMerge("pdusTx");
    }

    /**
     * Marks the leaf "pdus-tx" with operation "create".
     */
    public void markPdusTxCreate() throws JNCException {
        markLeafCreate("pdusTx");
    }

    /**
     * Marks the leaf "pdus-tx" with operation "delete".
     */
    public void markPdusTxDelete() throws JNCException {
        markLeafDelete("pdusTx");
    }

    /* Access methods for optional leaf child: "octets-rx". */

    /**
     * Gets the value for child leaf "octets-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getOctetsRxValue() throws JNCException {
        return (YangUInt32)getValue("octets-rx");
    }

    /**
     * Sets the value for child leaf "octets-rx",
     * using instance of generated typedef class.
     * @param octetsRxValue The value to set.
     * @param octetsRxValue used during instantiation.
     */
    public void setOctetsRxValue(YangUInt32 octetsRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "octets-rx",
            octetsRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "octets-rx",
     * using Java primitive values.
     * @param octetsRxValue used during instantiation.
     */
    public void setOctetsRxValue(long octetsRxValue) throws JNCException {
        setOctetsRxValue(new YangUInt32(octetsRxValue));
    }

    /**
     * Sets the value for child leaf "octets-rx",
     * using a String value.
     * @param octetsRxValue used during instantiation.
     */
    public void setOctetsRxValue(String octetsRxValue) throws JNCException {
        setOctetsRxValue(new YangUInt32(octetsRxValue));
    }

    /**
     * Unsets the value for child leaf "octets-rx".
     */
    public void unsetOctetsRxValue() throws JNCException {
        delete("octets-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "octets-rx" leaf will not have a value.
     */
    public void addOctetsRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "octets-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "octets-rx" with operation "replace".
     */
    public void markOctetsRxReplace() throws JNCException {
        markLeafReplace("octetsRx");
    }

    /**
     * Marks the leaf "octets-rx" with operation "merge".
     */
    public void markOctetsRxMerge() throws JNCException {
        markLeafMerge("octetsRx");
    }

    /**
     * Marks the leaf "octets-rx" with operation "create".
     */
    public void markOctetsRxCreate() throws JNCException {
        markLeafCreate("octetsRx");
    }

    /**
     * Marks the leaf "octets-rx" with operation "delete".
     */
    public void markOctetsRxDelete() throws JNCException {
        markLeafDelete("octetsRx");
    }

    /* Access methods for optional leaf child: "octets-tx". */

    /**
     * Gets the value for child leaf "octets-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getOctetsTxValue() throws JNCException {
        return (YangUInt32)getValue("octets-tx");
    }

    /**
     * Sets the value for child leaf "octets-tx",
     * using instance of generated typedef class.
     * @param octetsTxValue The value to set.
     * @param octetsTxValue used during instantiation.
     */
    public void setOctetsTxValue(YangUInt32 octetsTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "octets-tx",
            octetsTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "octets-tx",
     * using Java primitive values.
     * @param octetsTxValue used during instantiation.
     */
    public void setOctetsTxValue(long octetsTxValue) throws JNCException {
        setOctetsTxValue(new YangUInt32(octetsTxValue));
    }

    /**
     * Sets the value for child leaf "octets-tx",
     * using a String value.
     * @param octetsTxValue used during instantiation.
     */
    public void setOctetsTxValue(String octetsTxValue) throws JNCException {
        setOctetsTxValue(new YangUInt32(octetsTxValue));
    }

    /**
     * Unsets the value for child leaf "octets-tx".
     */
    public void unsetOctetsTxValue() throws JNCException {
        delete("octets-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "octets-tx" leaf will not have a value.
     */
    public void addOctetsTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "octets-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "octets-tx" with operation "replace".
     */
    public void markOctetsTxReplace() throws JNCException {
        markLeafReplace("octetsTx");
    }

    /**
     * Marks the leaf "octets-tx" with operation "merge".
     */
    public void markOctetsTxMerge() throws JNCException {
        markLeafMerge("octetsTx");
    }

    /**
     * Marks the leaf "octets-tx" with operation "create".
     */
    public void markOctetsTxCreate() throws JNCException {
        markLeafCreate("octetsTx");
    }

    /**
     * Marks the leaf "octets-tx" with operation "delete".
     */
    public void markOctetsTxDelete() throws JNCException {
        markLeafDelete("octetsTx");
    }

    /* Access methods for optional leaf child: "blocks-rx". */

    /**
     * Gets the value for child leaf "blocks-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getBlocksRxValue() throws JNCException {
        return (YangUInt32)getValue("blocks-rx");
    }

    /**
     * Sets the value for child leaf "blocks-rx",
     * using instance of generated typedef class.
     * @param blocksRxValue The value to set.
     * @param blocksRxValue used during instantiation.
     */
    public void setBlocksRxValue(YangUInt32 blocksRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "blocks-rx",
            blocksRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "blocks-rx",
     * using Java primitive values.
     * @param blocksRxValue used during instantiation.
     */
    public void setBlocksRxValue(long blocksRxValue) throws JNCException {
        setBlocksRxValue(new YangUInt32(blocksRxValue));
    }

    /**
     * Sets the value for child leaf "blocks-rx",
     * using a String value.
     * @param blocksRxValue used during instantiation.
     */
    public void setBlocksRxValue(String blocksRxValue) throws JNCException {
        setBlocksRxValue(new YangUInt32(blocksRxValue));
    }

    /**
     * Unsets the value for child leaf "blocks-rx".
     */
    public void unsetBlocksRxValue() throws JNCException {
        delete("blocks-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "blocks-rx" leaf will not have a value.
     */
    public void addBlocksRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "blocks-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "blocks-rx" with operation "replace".
     */
    public void markBlocksRxReplace() throws JNCException {
        markLeafReplace("blocksRx");
    }

    /**
     * Marks the leaf "blocks-rx" with operation "merge".
     */
    public void markBlocksRxMerge() throws JNCException {
        markLeafMerge("blocksRx");
    }

    /**
     * Marks the leaf "blocks-rx" with operation "create".
     */
    public void markBlocksRxCreate() throws JNCException {
        markLeafCreate("blocksRx");
    }

    /**
     * Marks the leaf "blocks-rx" with operation "delete".
     */
    public void markBlocksRxDelete() throws JNCException {
        markLeafDelete("blocksRx");
    }

    /* Access methods for optional leaf child: "unblocks-rx". */

    /**
     * Gets the value for child leaf "unblocks-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnblocksRxValue() throws JNCException {
        return (YangUInt32)getValue("unblocks-rx");
    }

    /**
     * Sets the value for child leaf "unblocks-rx",
     * using instance of generated typedef class.
     * @param unblocksRxValue The value to set.
     * @param unblocksRxValue used during instantiation.
     */
    public void setUnblocksRxValue(YangUInt32 unblocksRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unblocks-rx",
            unblocksRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unblocks-rx",
     * using Java primitive values.
     * @param unblocksRxValue used during instantiation.
     */
    public void setUnblocksRxValue(long unblocksRxValue) throws JNCException {
        setUnblocksRxValue(new YangUInt32(unblocksRxValue));
    }

    /**
     * Sets the value for child leaf "unblocks-rx",
     * using a String value.
     * @param unblocksRxValue used during instantiation.
     */
    public void setUnblocksRxValue(String unblocksRxValue) throws JNCException {
        setUnblocksRxValue(new YangUInt32(unblocksRxValue));
    }

    /**
     * Unsets the value for child leaf "unblocks-rx".
     */
    public void unsetUnblocksRxValue() throws JNCException {
        delete("unblocks-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unblocks-rx" leaf will not have a value.
     */
    public void addUnblocksRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unblocks-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unblocks-rx" with operation "replace".
     */
    public void markUnblocksRxReplace() throws JNCException {
        markLeafReplace("unblocksRx");
    }

    /**
     * Marks the leaf "unblocks-rx" with operation "merge".
     */
    public void markUnblocksRxMerge() throws JNCException {
        markLeafMerge("unblocksRx");
    }

    /**
     * Marks the leaf "unblocks-rx" with operation "create".
     */
    public void markUnblocksRxCreate() throws JNCException {
        markLeafCreate("unblocksRx");
    }

    /**
     * Marks the leaf "unblocks-rx" with operation "delete".
     */
    public void markUnblocksRxDelete() throws JNCException {
        markLeafDelete("unblocksRx");
    }

    /* Access methods for optional leaf child: "resets-rx". */

    /**
     * Gets the value for child leaf "resets-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getResetsRxValue() throws JNCException {
        return (YangUInt32)getValue("resets-rx");
    }

    /**
     * Sets the value for child leaf "resets-rx",
     * using instance of generated typedef class.
     * @param resetsRxValue The value to set.
     * @param resetsRxValue used during instantiation.
     */
    public void setResetsRxValue(YangUInt32 resetsRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "resets-rx",
            resetsRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "resets-rx",
     * using Java primitive values.
     * @param resetsRxValue used during instantiation.
     */
    public void setResetsRxValue(long resetsRxValue) throws JNCException {
        setResetsRxValue(new YangUInt32(resetsRxValue));
    }

    /**
     * Sets the value for child leaf "resets-rx",
     * using a String value.
     * @param resetsRxValue used during instantiation.
     */
    public void setResetsRxValue(String resetsRxValue) throws JNCException {
        setResetsRxValue(new YangUInt32(resetsRxValue));
    }

    /**
     * Unsets the value for child leaf "resets-rx".
     */
    public void unsetResetsRxValue() throws JNCException {
        delete("resets-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "resets-rx" leaf will not have a value.
     */
    public void addResetsRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "resets-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "resets-rx" with operation "replace".
     */
    public void markResetsRxReplace() throws JNCException {
        markLeafReplace("resetsRx");
    }

    /**
     * Marks the leaf "resets-rx" with operation "merge".
     */
    public void markResetsRxMerge() throws JNCException {
        markLeafMerge("resetsRx");
    }

    /**
     * Marks the leaf "resets-rx" with operation "create".
     */
    public void markResetsRxCreate() throws JNCException {
        markLeafCreate("resetsRx");
    }

    /**
     * Marks the leaf "resets-rx" with operation "delete".
     */
    public void markResetsRxDelete() throws JNCException {
        markLeafDelete("resetsRx");
    }

    /* Access methods for optional leaf child: "resets-tx". */

    /**
     * Gets the value for child leaf "resets-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getResetsTxValue() throws JNCException {
        return (YangUInt32)getValue("resets-tx");
    }

    /**
     * Sets the value for child leaf "resets-tx",
     * using instance of generated typedef class.
     * @param resetsTxValue The value to set.
     * @param resetsTxValue used during instantiation.
     */
    public void setResetsTxValue(YangUInt32 resetsTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "resets-tx",
            resetsTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "resets-tx",
     * using Java primitive values.
     * @param resetsTxValue used during instantiation.
     */
    public void setResetsTxValue(long resetsTxValue) throws JNCException {
        setResetsTxValue(new YangUInt32(resetsTxValue));
    }

    /**
     * Sets the value for child leaf "resets-tx",
     * using a String value.
     * @param resetsTxValue used during instantiation.
     */
    public void setResetsTxValue(String resetsTxValue) throws JNCException {
        setResetsTxValue(new YangUInt32(resetsTxValue));
    }

    /**
     * Unsets the value for child leaf "resets-tx".
     */
    public void unsetResetsTxValue() throws JNCException {
        delete("resets-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "resets-tx" leaf will not have a value.
     */
    public void addResetsTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "resets-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "resets-tx" with operation "replace".
     */
    public void markResetsTxReplace() throws JNCException {
        markLeafReplace("resetsTx");
    }

    /**
     * Marks the leaf "resets-tx" with operation "merge".
     */
    public void markResetsTxMerge() throws JNCException {
        markLeafMerge("resetsTx");
    }

    /**
     * Marks the leaf "resets-tx" with operation "create".
     */
    public void markResetsTxCreate() throws JNCException {
        markLeafCreate("resetsTx");
    }

    /**
     * Marks the leaf "resets-tx" with operation "delete".
     */
    public void markResetsTxDelete() throws JNCException {
        markLeafDelete("resetsTx");
    }

    /* Access methods for optional leaf child: "status-rx". */

    /**
     * Gets the value for child leaf "status-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getStatusRxValue() throws JNCException {
        return (YangUInt32)getValue("status-rx");
    }

    /**
     * Sets the value for child leaf "status-rx",
     * using instance of generated typedef class.
     * @param statusRxValue The value to set.
     * @param statusRxValue used during instantiation.
     */
    public void setStatusRxValue(YangUInt32 statusRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-rx",
            statusRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-rx",
     * using Java primitive values.
     * @param statusRxValue used during instantiation.
     */
    public void setStatusRxValue(long statusRxValue) throws JNCException {
        setStatusRxValue(new YangUInt32(statusRxValue));
    }

    /**
     * Sets the value for child leaf "status-rx",
     * using a String value.
     * @param statusRxValue used during instantiation.
     */
    public void setStatusRxValue(String statusRxValue) throws JNCException {
        setStatusRxValue(new YangUInt32(statusRxValue));
    }

    /**
     * Unsets the value for child leaf "status-rx".
     */
    public void unsetStatusRxValue() throws JNCException {
        delete("status-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-rx" leaf will not have a value.
     */
    public void addStatusRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-rx" with operation "replace".
     */
    public void markStatusRxReplace() throws JNCException {
        markLeafReplace("statusRx");
    }

    /**
     * Marks the leaf "status-rx" with operation "merge".
     */
    public void markStatusRxMerge() throws JNCException {
        markLeafMerge("statusRx");
    }

    /**
     * Marks the leaf "status-rx" with operation "create".
     */
    public void markStatusRxCreate() throws JNCException {
        markLeafCreate("statusRx");
    }

    /**
     * Marks the leaf "status-rx" with operation "delete".
     */
    public void markStatusRxDelete() throws JNCException {
        markLeafDelete("statusRx");
    }

    /* Access methods for optional leaf child: "status-tx". */

    /**
     * Gets the value for child leaf "status-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getStatusTxValue() throws JNCException {
        return (YangUInt32)getValue("status-tx");
    }

    /**
     * Sets the value for child leaf "status-tx",
     * using instance of generated typedef class.
     * @param statusTxValue The value to set.
     * @param statusTxValue used during instantiation.
     */
    public void setStatusTxValue(YangUInt32 statusTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-tx",
            statusTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-tx",
     * using Java primitive values.
     * @param statusTxValue used during instantiation.
     */
    public void setStatusTxValue(long statusTxValue) throws JNCException {
        setStatusTxValue(new YangUInt32(statusTxValue));
    }

    /**
     * Sets the value for child leaf "status-tx",
     * using a String value.
     * @param statusTxValue used during instantiation.
     */
    public void setStatusTxValue(String statusTxValue) throws JNCException {
        setStatusTxValue(new YangUInt32(statusTxValue));
    }

    /**
     * Unsets the value for child leaf "status-tx".
     */
    public void unsetStatusTxValue() throws JNCException {
        delete("status-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-tx" leaf will not have a value.
     */
    public void addStatusTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-tx" with operation "replace".
     */
    public void markStatusTxReplace() throws JNCException {
        markLeafReplace("statusTx");
    }

    /**
     * Marks the leaf "status-tx" with operation "merge".
     */
    public void markStatusTxMerge() throws JNCException {
        markLeafMerge("statusTx");
    }

    /**
     * Marks the leaf "status-tx" with operation "create".
     */
    public void markStatusTxCreate() throws JNCException {
        markLeafCreate("statusTx");
    }

    /**
     * Marks the leaf "status-tx" with operation "delete".
     */
    public void markStatusTxDelete() throws JNCException {
        markLeafDelete("statusTx");
    }

    /* Access methods for optional leaf child: "bvc-flow-control-rx". */

    /**
     * Gets the value for child leaf "bvc-flow-control-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getBvcFlowControlRxValue() throws JNCException {
        return (YangUInt32)getValue("bvc-flow-control-rx");
    }

    /**
     * Sets the value for child leaf "bvc-flow-control-rx",
     * using instance of generated typedef class.
     * @param bvcFlowControlRxValue The value to set.
     * @param bvcFlowControlRxValue used during instantiation.
     */
    public void setBvcFlowControlRxValue(YangUInt32 bvcFlowControlRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-flow-control-rx",
            bvcFlowControlRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bvc-flow-control-rx",
     * using Java primitive values.
     * @param bvcFlowControlRxValue used during instantiation.
     */
    public void setBvcFlowControlRxValue(long bvcFlowControlRxValue)
            throws JNCException {
        setBvcFlowControlRxValue(new YangUInt32(bvcFlowControlRxValue));
    }

    /**
     * Sets the value for child leaf "bvc-flow-control-rx",
     * using a String value.
     * @param bvcFlowControlRxValue used during instantiation.
     */
    public void setBvcFlowControlRxValue(String bvcFlowControlRxValue)
            throws JNCException {
        setBvcFlowControlRxValue(new YangUInt32(bvcFlowControlRxValue));
    }

    /**
     * Unsets the value for child leaf "bvc-flow-control-rx".
     */
    public void unsetBvcFlowControlRxValue() throws JNCException {
        delete("bvc-flow-control-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bvc-flow-control-rx" leaf will not have a value.
     */
    public void addBvcFlowControlRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-flow-control-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bvc-flow-control-rx" with operation "replace".
     */
    public void markBvcFlowControlRxReplace() throws JNCException {
        markLeafReplace("bvcFlowControlRx");
    }

    /**
     * Marks the leaf "bvc-flow-control-rx" with operation "merge".
     */
    public void markBvcFlowControlRxMerge() throws JNCException {
        markLeafMerge("bvcFlowControlRx");
    }

    /**
     * Marks the leaf "bvc-flow-control-rx" with operation "create".
     */
    public void markBvcFlowControlRxCreate() throws JNCException {
        markLeafCreate("bvcFlowControlRx");
    }

    /**
     * Marks the leaf "bvc-flow-control-rx" with operation "delete".
     */
    public void markBvcFlowControlRxDelete() throws JNCException {
        markLeafDelete("bvcFlowControlRx");
    }

    /* Access methods for optional leaf child: "ms-flow-control-rx". */

    /**
     * Gets the value for child leaf "ms-flow-control-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getMsFlowControlRxValue() throws JNCException {
        return (YangUInt32)getValue("ms-flow-control-rx");
    }

    /**
     * Sets the value for child leaf "ms-flow-control-rx",
     * using instance of generated typedef class.
     * @param msFlowControlRxValue The value to set.
     * @param msFlowControlRxValue used during instantiation.
     */
    public void setMsFlowControlRxValue(YangUInt32 msFlowControlRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ms-flow-control-rx",
            msFlowControlRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ms-flow-control-rx",
     * using Java primitive values.
     * @param msFlowControlRxValue used during instantiation.
     */
    public void setMsFlowControlRxValue(long msFlowControlRxValue)
            throws JNCException {
        setMsFlowControlRxValue(new YangUInt32(msFlowControlRxValue));
    }

    /**
     * Sets the value for child leaf "ms-flow-control-rx",
     * using a String value.
     * @param msFlowControlRxValue used during instantiation.
     */
    public void setMsFlowControlRxValue(String msFlowControlRxValue)
            throws JNCException {
        setMsFlowControlRxValue(new YangUInt32(msFlowControlRxValue));
    }

    /**
     * Unsets the value for child leaf "ms-flow-control-rx".
     */
    public void unsetMsFlowControlRxValue() throws JNCException {
        delete("ms-flow-control-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ms-flow-control-rx" leaf will not have a value.
     */
    public void addMsFlowControlRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ms-flow-control-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ms-flow-control-rx" with operation "replace".
     */
    public void markMsFlowControlRxReplace() throws JNCException {
        markLeafReplace("msFlowControlRx");
    }

    /**
     * Marks the leaf "ms-flow-control-rx" with operation "merge".
     */
    public void markMsFlowControlRxMerge() throws JNCException {
        markLeafMerge("msFlowControlRx");
    }

    /**
     * Marks the leaf "ms-flow-control-rx" with operation "create".
     */
    public void markMsFlowControlRxCreate() throws JNCException {
        markLeafCreate("msFlowControlRx");
    }

    /**
     * Marks the leaf "ms-flow-control-rx" with operation "delete".
     */
    public void markMsFlowControlRxDelete() throws JNCException {
        markLeafDelete("msFlowControlRx");
    }

    /* Access methods for optional leaf child: "pfc-flow-control-rx". */

    /**
     * Gets the value for child leaf "pfc-flow-control-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getPfcFlowControlRxValue() throws JNCException {
        return (YangUInt32)getValue("pfc-flow-control-rx");
    }

    /**
     * Sets the value for child leaf "pfc-flow-control-rx",
     * using instance of generated typedef class.
     * @param pfcFlowControlRxValue The value to set.
     * @param pfcFlowControlRxValue used during instantiation.
     */
    public void setPfcFlowControlRxValue(YangUInt32 pfcFlowControlRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-flow-control-rx",
            pfcFlowControlRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pfc-flow-control-rx",
     * using Java primitive values.
     * @param pfcFlowControlRxValue used during instantiation.
     */
    public void setPfcFlowControlRxValue(long pfcFlowControlRxValue)
            throws JNCException {
        setPfcFlowControlRxValue(new YangUInt32(pfcFlowControlRxValue));
    }

    /**
     * Sets the value for child leaf "pfc-flow-control-rx",
     * using a String value.
     * @param pfcFlowControlRxValue used during instantiation.
     */
    public void setPfcFlowControlRxValue(String pfcFlowControlRxValue)
            throws JNCException {
        setPfcFlowControlRxValue(new YangUInt32(pfcFlowControlRxValue));
    }

    /**
     * Unsets the value for child leaf "pfc-flow-control-rx".
     */
    public void unsetPfcFlowControlRxValue() throws JNCException {
        delete("pfc-flow-control-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pfc-flow-control-rx" leaf will not have a value.
     */
    public void addPfcFlowControlRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-flow-control-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pfc-flow-control-rx" with operation "replace".
     */
    public void markPfcFlowControlRxReplace() throws JNCException {
        markLeafReplace("pfcFlowControlRx");
    }

    /**
     * Marks the leaf "pfc-flow-control-rx" with operation "merge".
     */
    public void markPfcFlowControlRxMerge() throws JNCException {
        markLeafMerge("pfcFlowControlRx");
    }

    /**
     * Marks the leaf "pfc-flow-control-rx" with operation "create".
     */
    public void markPfcFlowControlRxCreate() throws JNCException {
        markLeafCreate("pfcFlowControlRx");
    }

    /**
     * Marks the leaf "pfc-flow-control-rx" with operation "delete".
     */
    public void markPfcFlowControlRxDelete() throws JNCException {
        markLeafDelete("pfcFlowControlRx");
    }

    /* Access methods for optional leaf child: "bvc-bmax". */

    /**
     * Gets the value for child leaf "bvc-bmax".
     * @return The value of the leaf.
     */
    public YangUInt16 getBvcBmaxValue() throws JNCException {
        return (YangUInt16)getValue("bvc-bmax");
    }

    /**
     * Sets the value for child leaf "bvc-bmax",
     * using instance of generated typedef class.
     * @param bvcBmaxValue The value to set.
     * @param bvcBmaxValue used during instantiation.
     */
    public void setBvcBmaxValue(YangUInt16 bvcBmaxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-bmax",
            bvcBmaxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bvc-bmax",
     * using Java primitive values.
     * @param bvcBmaxValue used during instantiation.
     */
    public void setBvcBmaxValue(int bvcBmaxValue) throws JNCException {
        setBvcBmaxValue(new YangUInt16(bvcBmaxValue));
    }

    /**
     * Sets the value for child leaf "bvc-bmax",
     * using a String value.
     * @param bvcBmaxValue used during instantiation.
     */
    public void setBvcBmaxValue(String bvcBmaxValue) throws JNCException {
        setBvcBmaxValue(new YangUInt16(bvcBmaxValue));
    }

    /**
     * Unsets the value for child leaf "bvc-bmax".
     */
    public void unsetBvcBmaxValue() throws JNCException {
        delete("bvc-bmax");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bvc-bmax" leaf will not have a value.
     */
    public void addBvcBmax() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-bmax",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bvc-bmax" with operation "replace".
     */
    public void markBvcBmaxReplace() throws JNCException {
        markLeafReplace("bvcBmax");
    }

    /**
     * Marks the leaf "bvc-bmax" with operation "merge".
     */
    public void markBvcBmaxMerge() throws JNCException {
        markLeafMerge("bvcBmax");
    }

    /**
     * Marks the leaf "bvc-bmax" with operation "create".
     */
    public void markBvcBmaxCreate() throws JNCException {
        markLeafCreate("bvcBmax");
    }

    /**
     * Marks the leaf "bvc-bmax" with operation "delete".
     */
    public void markBvcBmaxDelete() throws JNCException {
        markLeafDelete("bvcBmax");
    }

    /* Access methods for optional leaf child: "leak-rate". */

    /**
     * Gets the value for child leaf "leak-rate".
     * @return The value of the leaf.
     */
    public YangUInt16 getLeakRateValue() throws JNCException {
        return (YangUInt16)getValue("leak-rate");
    }

    /**
     * Sets the value for child leaf "leak-rate",
     * using instance of generated typedef class.
     * @param leakRateValue The value to set.
     * @param leakRateValue used during instantiation.
     */
    public void setLeakRateValue(YangUInt16 leakRateValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "leak-rate",
            leakRateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "leak-rate",
     * using Java primitive values.
     * @param leakRateValue used during instantiation.
     */
    public void setLeakRateValue(int leakRateValue) throws JNCException {
        setLeakRateValue(new YangUInt16(leakRateValue));
    }

    /**
     * Sets the value for child leaf "leak-rate",
     * using a String value.
     * @param leakRateValue used during instantiation.
     */
    public void setLeakRateValue(String leakRateValue) throws JNCException {
        setLeakRateValue(new YangUInt16(leakRateValue));
    }

    /**
     * Unsets the value for child leaf "leak-rate".
     */
    public void unsetLeakRateValue() throws JNCException {
        delete("leak-rate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "leak-rate" leaf will not have a value.
     */
    public void addLeakRate() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "leak-rate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "leak-rate" with operation "replace".
     */
    public void markLeakRateReplace() throws JNCException {
        markLeafReplace("leakRate");
    }

    /**
     * Marks the leaf "leak-rate" with operation "merge".
     */
    public void markLeakRateMerge() throws JNCException {
        markLeafMerge("leakRate");
    }

    /**
     * Marks the leaf "leak-rate" with operation "create".
     */
    public void markLeakRateCreate() throws JNCException {
        markLeafCreate("leakRate");
    }

    /**
     * Marks the leaf "leak-rate" with operation "delete".
     */
    public void markLeakRateDelete() throws JNCException {
        markLeafDelete("leakRate");
    }

    /* Access methods for optional leaf child: "bucket-full-ratio". */

    /**
     * Gets the value for child leaf "bucket-full-ratio".
     * @return The value of the leaf.
     */
    public YangString getBucketFullRatioValue() throws JNCException {
        return (YangString)getValue("bucket-full-ratio");
    }

    /**
     * Sets the value for child leaf "bucket-full-ratio",
     * using instance of generated typedef class.
     * @param bucketFullRatioValue The value to set.
     * @param bucketFullRatioValue used during instantiation.
     */
    public void setBucketFullRatioValue(YangString bucketFullRatioValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bucket-full-ratio",
            bucketFullRatioValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bucket-full-ratio",
     * using a String value.
     * @param bucketFullRatioValue used during instantiation.
     */
    public void setBucketFullRatioValue(String bucketFullRatioValue)
            throws JNCException {
        setBucketFullRatioValue(new YangString(bucketFullRatioValue));
    }

    /**
     * Unsets the value for child leaf "bucket-full-ratio".
     */
    public void unsetBucketFullRatioValue() throws JNCException {
        delete("bucket-full-ratio");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bucket-full-ratio" leaf will not have a value.
     */
    public void addBucketFullRatio() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bucket-full-ratio",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bucket-full-ratio" with operation "replace".
     */
    public void markBucketFullRatioReplace() throws JNCException {
        markLeafReplace("bucketFullRatio");
    }

    /**
     * Marks the leaf "bucket-full-ratio" with operation "merge".
     */
    public void markBucketFullRatioMerge() throws JNCException {
        markLeafMerge("bucketFullRatio");
    }

    /**
     * Marks the leaf "bucket-full-ratio" with operation "create".
     */
    public void markBucketFullRatioCreate() throws JNCException {
        markLeafCreate("bucketFullRatio");
    }

    /**
     * Marks the leaf "bucket-full-ratio" with operation "delete".
     */
    public void markBucketFullRatioDelete() throws JNCException {
        markLeafDelete("bucketFullRatio");
    }

    /* Access methods for optional leaf child: "calculated-pcu-buffer". */

    /**
     * Gets the value for child leaf "calculated-pcu-buffer".
     * @return The value of the leaf.
     */
    public YangUInt32 getCalculatedPcuBufferValue() throws JNCException {
        return (YangUInt32)getValue("calculated-pcu-buffer");
    }

    /**
     * Sets the value for child leaf "calculated-pcu-buffer",
     * using instance of generated typedef class.
     * @param calculatedPcuBufferValue The value to set.
     * @param calculatedPcuBufferValue used during instantiation.
     */
    public void setCalculatedPcuBufferValue(YangUInt32 calculatedPcuBufferValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "calculated-pcu-buffer",
            calculatedPcuBufferValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "calculated-pcu-buffer",
     * using Java primitive values.
     * @param calculatedPcuBufferValue used during instantiation.
     */
    public void setCalculatedPcuBufferValue(long calculatedPcuBufferValue)
            throws JNCException {
        setCalculatedPcuBufferValue(new YangUInt32(calculatedPcuBufferValue));
    }

    /**
     * Sets the value for child leaf "calculated-pcu-buffer",
     * using a String value.
     * @param calculatedPcuBufferValue used during instantiation.
     */
    public void setCalculatedPcuBufferValue(String calculatedPcuBufferValue)
            throws JNCException {
        setCalculatedPcuBufferValue(new YangUInt32(calculatedPcuBufferValue));
    }

    /**
     * Unsets the value for child leaf "calculated-pcu-buffer".
     */
    public void unsetCalculatedPcuBufferValue() throws JNCException {
        delete("calculated-pcu-buffer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "calculated-pcu-buffer" leaf will not have a value.
     */
    public void addCalculatedPcuBuffer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "calculated-pcu-buffer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "calculated-pcu-buffer" with operation "replace".
     */
    public void markCalculatedPcuBufferReplace() throws JNCException {
        markLeafReplace("calculatedPcuBuffer");
    }

    /**
     * Marks the leaf "calculated-pcu-buffer" with operation "merge".
     */
    public void markCalculatedPcuBufferMerge() throws JNCException {
        markLeafMerge("calculatedPcuBuffer");
    }

    /**
     * Marks the leaf "calculated-pcu-buffer" with operation "create".
     */
    public void markCalculatedPcuBufferCreate() throws JNCException {
        markLeafCreate("calculatedPcuBuffer");
    }

    /**
     * Marks the leaf "calculated-pcu-buffer" with operation "delete".
     */
    public void markCalculatedPcuBufferDelete() throws JNCException {
        markLeafDelete("calculatedPcuBuffer");
    }

    /* Access methods for optional leaf child: "estimated-traffic-available". */

    /**
     * Gets the value for child leaf "estimated-traffic-available".
     * @return The value of the leaf.
     */
    public YangUInt32 getEstimatedTrafficAvailableValue() throws JNCException {
        return (YangUInt32)getValue("estimated-traffic-available");
    }

    /**
     * Sets the value for child leaf "estimated-traffic-available",
     * using instance of generated typedef class.
     * @param estimatedTrafficAvailableValue The value to set.
     * @param estimatedTrafficAvailableValue used during instantiation.
     */
    public void setEstimatedTrafficAvailableValue(YangUInt32 estimatedTrafficAvailableValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "estimated-traffic-available",
            estimatedTrafficAvailableValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "estimated-traffic-available",
     * using Java primitive values.
     * @param estimatedTrafficAvailableValue used during instantiation.
     */
    public void setEstimatedTrafficAvailableValue(long estimatedTrafficAvailableValue)
            throws JNCException {
        setEstimatedTrafficAvailableValue(new YangUInt32(estimatedTrafficAvailableValue));
    }

    /**
     * Sets the value for child leaf "estimated-traffic-available",
     * using a String value.
     * @param estimatedTrafficAvailableValue used during instantiation.
     */
    public void setEstimatedTrafficAvailableValue(String estimatedTrafficAvailableValue)
            throws JNCException {
        setEstimatedTrafficAvailableValue(new YangUInt32(estimatedTrafficAvailableValue));
    }

    /**
     * Unsets the value for child leaf "estimated-traffic-available".
     */
    public void unsetEstimatedTrafficAvailableValue() throws JNCException {
        delete("estimated-traffic-available");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "estimated-traffic-available" leaf will not have a value.
     */
    public void addEstimatedTrafficAvailable() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "estimated-traffic-available",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "estimated-traffic-available" with operation "replace".
     */
    public void markEstimatedTrafficAvailableReplace() throws JNCException {
        markLeafReplace("estimatedTrafficAvailable");
    }

    /**
     * Marks the leaf "estimated-traffic-available" with operation "merge".
     */
    public void markEstimatedTrafficAvailableMerge() throws JNCException {
        markLeafMerge("estimatedTrafficAvailable");
    }

    /**
     * Marks the leaf "estimated-traffic-available" with operation "create".
     */
    public void markEstimatedTrafficAvailableCreate() throws JNCException {
        markLeafCreate("estimatedTrafficAvailable");
    }

    /**
     * Marks the leaf "estimated-traffic-available" with operation "delete".
     */
    public void markEstimatedTrafficAvailableDelete() throws JNCException {
        markLeafDelete("estimatedTrafficAvailable");
    }

    /* Access methods for optional leaf child: "byte-adjustment-factor". */

    /**
     * Gets the value for child leaf "byte-adjustment-factor".
     * @return The value of the leaf.
     */
    public YangString getByteAdjustmentFactorValue() throws JNCException {
        return (YangString)getValue("byte-adjustment-factor");
    }

    /**
     * Sets the value for child leaf "byte-adjustment-factor",
     * using instance of generated typedef class.
     * @param byteAdjustmentFactorValue The value to set.
     * @param byteAdjustmentFactorValue used during instantiation.
     */
    public void setByteAdjustmentFactorValue(YangString byteAdjustmentFactorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "byte-adjustment-factor",
            byteAdjustmentFactorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "byte-adjustment-factor",
     * using a String value.
     * @param byteAdjustmentFactorValue used during instantiation.
     */
    public void setByteAdjustmentFactorValue(String byteAdjustmentFactorValue)
            throws JNCException {
        setByteAdjustmentFactorValue(new YangString(byteAdjustmentFactorValue));
    }

    /**
     * Unsets the value for child leaf "byte-adjustment-factor".
     */
    public void unsetByteAdjustmentFactorValue() throws JNCException {
        delete("byte-adjustment-factor");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "byte-adjustment-factor" leaf will not have a value.
     */
    public void addByteAdjustmentFactor() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "byte-adjustment-factor",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "byte-adjustment-factor" with operation "replace".
     */
    public void markByteAdjustmentFactorReplace() throws JNCException {
        markLeafReplace("byteAdjustmentFactor");
    }

    /**
     * Marks the leaf "byte-adjustment-factor" with operation "merge".
     */
    public void markByteAdjustmentFactorMerge() throws JNCException {
        markLeafMerge("byteAdjustmentFactor");
    }

    /**
     * Marks the leaf "byte-adjustment-factor" with operation "create".
     */
    public void markByteAdjustmentFactorCreate() throws JNCException {
        markLeafCreate("byteAdjustmentFactor");
    }

    /**
     * Marks the leaf "byte-adjustment-factor" with operation "delete".
     */
    public void markByteAdjustmentFactorDelete() throws JNCException {
        markLeafDelete("byteAdjustmentFactor");
    }

    /* Access methods for optional leaf child: "traffic-arrived". */

    /**
     * Gets the value for child leaf "traffic-arrived".
     * @return The value of the leaf.
     */
    public YangUInt32 getTrafficArrivedValue() throws JNCException {
        return (YangUInt32)getValue("traffic-arrived");
    }

    /**
     * Sets the value for child leaf "traffic-arrived",
     * using instance of generated typedef class.
     * @param trafficArrivedValue The value to set.
     * @param trafficArrivedValue used during instantiation.
     */
    public void setTrafficArrivedValue(YangUInt32 trafficArrivedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "traffic-arrived",
            trafficArrivedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "traffic-arrived",
     * using Java primitive values.
     * @param trafficArrivedValue used during instantiation.
     */
    public void setTrafficArrivedValue(long trafficArrivedValue)
            throws JNCException {
        setTrafficArrivedValue(new YangUInt32(trafficArrivedValue));
    }

    /**
     * Sets the value for child leaf "traffic-arrived",
     * using a String value.
     * @param trafficArrivedValue used during instantiation.
     */
    public void setTrafficArrivedValue(String trafficArrivedValue)
            throws JNCException {
        setTrafficArrivedValue(new YangUInt32(trafficArrivedValue));
    }

    /**
     * Unsets the value for child leaf "traffic-arrived".
     */
    public void unsetTrafficArrivedValue() throws JNCException {
        delete("traffic-arrived");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "traffic-arrived" leaf will not have a value.
     */
    public void addTrafficArrived() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "traffic-arrived",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "traffic-arrived" with operation "replace".
     */
    public void markTrafficArrivedReplace() throws JNCException {
        markLeafReplace("trafficArrived");
    }

    /**
     * Marks the leaf "traffic-arrived" with operation "merge".
     */
    public void markTrafficArrivedMerge() throws JNCException {
        markLeafMerge("trafficArrived");
    }

    /**
     * Marks the leaf "traffic-arrived" with operation "create".
     */
    public void markTrafficArrivedCreate() throws JNCException {
        markLeafCreate("trafficArrived");
    }

    /**
     * Marks the leaf "traffic-arrived" with operation "delete".
     */
    public void markTrafficArrivedDelete() throws JNCException {
        markLeafDelete("trafficArrived");
    }

    /* Access methods for optional leaf child: "current-buffered-frames". */

    /**
     * Gets the value for child leaf "current-buffered-frames".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentBufferedFramesValue() throws JNCException {
        return (YangUInt32)getValue("current-buffered-frames");
    }

    /**
     * Sets the value for child leaf "current-buffered-frames",
     * using instance of generated typedef class.
     * @param currentBufferedFramesValue The value to set.
     * @param currentBufferedFramesValue used during instantiation.
     */
    public void setCurrentBufferedFramesValue(YangUInt32 currentBufferedFramesValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-buffered-frames",
            currentBufferedFramesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-buffered-frames",
     * using Java primitive values.
     * @param currentBufferedFramesValue used during instantiation.
     */
    public void setCurrentBufferedFramesValue(long currentBufferedFramesValue)
            throws JNCException {
        setCurrentBufferedFramesValue(new YangUInt32(currentBufferedFramesValue));
    }

    /**
     * Sets the value for child leaf "current-buffered-frames",
     * using a String value.
     * @param currentBufferedFramesValue used during instantiation.
     */
    public void setCurrentBufferedFramesValue(String currentBufferedFramesValue)
            throws JNCException {
        setCurrentBufferedFramesValue(new YangUInt32(currentBufferedFramesValue));
    }

    /**
     * Unsets the value for child leaf "current-buffered-frames".
     */
    public void unsetCurrentBufferedFramesValue() throws JNCException {
        delete("current-buffered-frames");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-buffered-frames" leaf will not have a value.
     */
    public void addCurrentBufferedFrames() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-buffered-frames",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-buffered-frames" with operation "replace".
     */
    public void markCurrentBufferedFramesReplace() throws JNCException {
        markLeafReplace("currentBufferedFrames");
    }

    /**
     * Marks the leaf "current-buffered-frames" with operation "merge".
     */
    public void markCurrentBufferedFramesMerge() throws JNCException {
        markLeafMerge("currentBufferedFrames");
    }

    /**
     * Marks the leaf "current-buffered-frames" with operation "create".
     */
    public void markCurrentBufferedFramesCreate() throws JNCException {
        markLeafCreate("currentBufferedFrames");
    }

    /**
     * Marks the leaf "current-buffered-frames" with operation "delete".
     */
    public void markCurrentBufferedFramesDelete() throws JNCException {
        markLeafDelete("currentBufferedFrames");
    }

    /* Access methods for optional leaf child: "current-buffered-data". */

    /**
     * Gets the value for child leaf "current-buffered-data".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentBufferedDataValue() throws JNCException {
        return (YangUInt32)getValue("current-buffered-data");
    }

    /**
     * Sets the value for child leaf "current-buffered-data",
     * using instance of generated typedef class.
     * @param currentBufferedDataValue The value to set.
     * @param currentBufferedDataValue used during instantiation.
     */
    public void setCurrentBufferedDataValue(YangUInt32 currentBufferedDataValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-buffered-data",
            currentBufferedDataValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-buffered-data",
     * using Java primitive values.
     * @param currentBufferedDataValue used during instantiation.
     */
    public void setCurrentBufferedDataValue(long currentBufferedDataValue)
            throws JNCException {
        setCurrentBufferedDataValue(new YangUInt32(currentBufferedDataValue));
    }

    /**
     * Sets the value for child leaf "current-buffered-data",
     * using a String value.
     * @param currentBufferedDataValue used during instantiation.
     */
    public void setCurrentBufferedDataValue(String currentBufferedDataValue)
            throws JNCException {
        setCurrentBufferedDataValue(new YangUInt32(currentBufferedDataValue));
    }

    /**
     * Unsets the value for child leaf "current-buffered-data".
     */
    public void unsetCurrentBufferedDataValue() throws JNCException {
        delete("current-buffered-data");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-buffered-data" leaf will not have a value.
     */
    public void addCurrentBufferedData() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-buffered-data",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-buffered-data" with operation "replace".
     */
    public void markCurrentBufferedDataReplace() throws JNCException {
        markLeafReplace("currentBufferedData");
    }

    /**
     * Marks the leaf "current-buffered-data" with operation "merge".
     */
    public void markCurrentBufferedDataMerge() throws JNCException {
        markLeafMerge("currentBufferedData");
    }

    /**
     * Marks the leaf "current-buffered-data" with operation "create".
     */
    public void markCurrentBufferedDataCreate() throws JNCException {
        markLeafCreate("currentBufferedData");
    }

    /**
     * Marks the leaf "current-buffered-data" with operation "delete".
     */
    public void markCurrentBufferedDataDelete() throws JNCException {
        markLeafDelete("currentBufferedData");
    }

    /* Access methods for optional leaf child: "max-frames-in-buffer". */

    /**
     * Gets the value for child leaf "max-frames-in-buffer".
     * @return The value of the leaf.
     */
    public YangUInt32 getMaxFramesInBufferValue() throws JNCException {
        return (YangUInt32)getValue("max-frames-in-buffer");
    }

    /**
     * Sets the value for child leaf "max-frames-in-buffer",
     * using instance of generated typedef class.
     * @param maxFramesInBufferValue The value to set.
     * @param maxFramesInBufferValue used during instantiation.
     */
    public void setMaxFramesInBufferValue(YangUInt32 maxFramesInBufferValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-frames-in-buffer",
            maxFramesInBufferValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-frames-in-buffer",
     * using Java primitive values.
     * @param maxFramesInBufferValue used during instantiation.
     */
    public void setMaxFramesInBufferValue(long maxFramesInBufferValue)
            throws JNCException {
        setMaxFramesInBufferValue(new YangUInt32(maxFramesInBufferValue));
    }

    /**
     * Sets the value for child leaf "max-frames-in-buffer",
     * using a String value.
     * @param maxFramesInBufferValue used during instantiation.
     */
    public void setMaxFramesInBufferValue(String maxFramesInBufferValue)
            throws JNCException {
        setMaxFramesInBufferValue(new YangUInt32(maxFramesInBufferValue));
    }

    /**
     * Unsets the value for child leaf "max-frames-in-buffer".
     */
    public void unsetMaxFramesInBufferValue() throws JNCException {
        delete("max-frames-in-buffer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-frames-in-buffer" leaf will not have a value.
     */
    public void addMaxFramesInBuffer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-frames-in-buffer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-frames-in-buffer" with operation "replace".
     */
    public void markMaxFramesInBufferReplace() throws JNCException {
        markLeafReplace("maxFramesInBuffer");
    }

    /**
     * Marks the leaf "max-frames-in-buffer" with operation "merge".
     */
    public void markMaxFramesInBufferMerge() throws JNCException {
        markLeafMerge("maxFramesInBuffer");
    }

    /**
     * Marks the leaf "max-frames-in-buffer" with operation "create".
     */
    public void markMaxFramesInBufferCreate() throws JNCException {
        markLeafCreate("maxFramesInBuffer");
    }

    /**
     * Marks the leaf "max-frames-in-buffer" with operation "delete".
     */
    public void markMaxFramesInBufferDelete() throws JNCException {
        markLeafDelete("maxFramesInBuffer");
    }

    /* Access methods for optional leaf child: "max-buffer-size". */

    /**
     * Gets the value for child leaf "max-buffer-size".
     * @return The value of the leaf.
     */
    public YangUInt32 getMaxBufferSizeValue() throws JNCException {
        return (YangUInt32)getValue("max-buffer-size");
    }

    /**
     * Sets the value for child leaf "max-buffer-size",
     * using instance of generated typedef class.
     * @param maxBufferSizeValue The value to set.
     * @param maxBufferSizeValue used during instantiation.
     */
    public void setMaxBufferSizeValue(YangUInt32 maxBufferSizeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-buffer-size",
            maxBufferSizeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-buffer-size",
     * using Java primitive values.
     * @param maxBufferSizeValue used during instantiation.
     */
    public void setMaxBufferSizeValue(long maxBufferSizeValue)
            throws JNCException {
        setMaxBufferSizeValue(new YangUInt32(maxBufferSizeValue));
    }

    /**
     * Sets the value for child leaf "max-buffer-size",
     * using a String value.
     * @param maxBufferSizeValue used during instantiation.
     */
    public void setMaxBufferSizeValue(String maxBufferSizeValue)
            throws JNCException {
        setMaxBufferSizeValue(new YangUInt32(maxBufferSizeValue));
    }

    /**
     * Unsets the value for child leaf "max-buffer-size".
     */
    public void unsetMaxBufferSizeValue() throws JNCException {
        delete("max-buffer-size");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-buffer-size" leaf will not have a value.
     */
    public void addMaxBufferSize() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-buffer-size",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-buffer-size" with operation "replace".
     */
    public void markMaxBufferSizeReplace() throws JNCException {
        markLeafReplace("maxBufferSize");
    }

    /**
     * Marks the leaf "max-buffer-size" with operation "merge".
     */
    public void markMaxBufferSizeMerge() throws JNCException {
        markLeafMerge("maxBufferSize");
    }

    /**
     * Marks the leaf "max-buffer-size" with operation "create".
     */
    public void markMaxBufferSizeCreate() throws JNCException {
        markLeafCreate("maxBufferSize");
    }

    /**
     * Marks the leaf "max-buffer-size" with operation "delete".
     */
    public void markMaxBufferSizeDelete() throws JNCException {
        markLeafDelete("maxBufferSize");
    }

    /* Access methods for optional leaf child: "flow-control-pdus-discarded". */

    /**
     * Gets the value for child leaf "flow-control-pdus-discarded".
     * @return The value of the leaf.
     */
    public YangUInt32 getFlowControlPdusDiscardedValue() throws JNCException {
        return (YangUInt32)getValue("flow-control-pdus-discarded");
    }

    /**
     * Sets the value for child leaf "flow-control-pdus-discarded",
     * using instance of generated typedef class.
     * @param flowControlPdusDiscardedValue The value to set.
     * @param flowControlPdusDiscardedValue used during instantiation.
     */
    public void setFlowControlPdusDiscardedValue(YangUInt32 flowControlPdusDiscardedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "flow-control-pdus-discarded",
            flowControlPdusDiscardedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "flow-control-pdus-discarded",
     * using Java primitive values.
     * @param flowControlPdusDiscardedValue used during instantiation.
     */
    public void setFlowControlPdusDiscardedValue(long flowControlPdusDiscardedValue)
            throws JNCException {
        setFlowControlPdusDiscardedValue(new YangUInt32(flowControlPdusDiscardedValue));
    }

    /**
     * Sets the value for child leaf "flow-control-pdus-discarded",
     * using a String value.
     * @param flowControlPdusDiscardedValue used during instantiation.
     */
    public void setFlowControlPdusDiscardedValue(String flowControlPdusDiscardedValue)
            throws JNCException {
        setFlowControlPdusDiscardedValue(new YangUInt32(flowControlPdusDiscardedValue));
    }

    /**
     * Unsets the value for child leaf "flow-control-pdus-discarded".
     */
    public void unsetFlowControlPdusDiscardedValue() throws JNCException {
        delete("flow-control-pdus-discarded");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "flow-control-pdus-discarded" leaf will not have a value.
     */
    public void addFlowControlPdusDiscarded() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "flow-control-pdus-discarded",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "flow-control-pdus-discarded" with operation "replace".
     */
    public void markFlowControlPdusDiscardedReplace() throws JNCException {
        markLeafReplace("flowControlPdusDiscarded");
    }

    /**
     * Marks the leaf "flow-control-pdus-discarded" with operation "merge".
     */
    public void markFlowControlPdusDiscardedMerge() throws JNCException {
        markLeafMerge("flowControlPdusDiscarded");
    }

    /**
     * Marks the leaf "flow-control-pdus-discarded" with operation "create".
     */
    public void markFlowControlPdusDiscardedCreate() throws JNCException {
        markLeafCreate("flowControlPdusDiscarded");
    }

    /**
     * Marks the leaf "flow-control-pdus-discarded" with operation "delete".
     */
    public void markFlowControlPdusDiscardedDelete() throws JNCException {
        markLeafDelete("flowControlPdusDiscarded");
    }

    /* Access methods for optional leaf child: "flow-control-octets-discarded". */

    /**
     * Gets the value for child leaf "flow-control-octets-discarded".
     * @return The value of the leaf.
     */
    public YangUInt32 getFlowControlOctetsDiscardedValue() throws JNCException {
        return (YangUInt32)getValue("flow-control-octets-discarded");
    }

    /**
     * Sets the value for child leaf "flow-control-octets-discarded",
     * using instance of generated typedef class.
     * @param flowControlOctetsDiscardedValue The value to set.
     * @param flowControlOctetsDiscardedValue used during instantiation.
     */
    public void setFlowControlOctetsDiscardedValue(YangUInt32 flowControlOctetsDiscardedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "flow-control-octets-discarded",
            flowControlOctetsDiscardedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "flow-control-octets-discarded",
     * using Java primitive values.
     * @param flowControlOctetsDiscardedValue used during instantiation.
     */
    public void setFlowControlOctetsDiscardedValue(long flowControlOctetsDiscardedValue)
            throws JNCException {
        setFlowControlOctetsDiscardedValue(new YangUInt32(flowControlOctetsDiscardedValue));
    }

    /**
     * Sets the value for child leaf "flow-control-octets-discarded",
     * using a String value.
     * @param flowControlOctetsDiscardedValue used during instantiation.
     */
    public void setFlowControlOctetsDiscardedValue(String flowControlOctetsDiscardedValue)
            throws JNCException {
        setFlowControlOctetsDiscardedValue(new YangUInt32(flowControlOctetsDiscardedValue));
    }

    /**
     * Unsets the value for child leaf "flow-control-octets-discarded".
     */
    public void unsetFlowControlOctetsDiscardedValue() throws JNCException {
        delete("flow-control-octets-discarded");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "flow-control-octets-discarded" leaf will not have a value.
     */
    public void addFlowControlOctetsDiscarded() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "flow-control-octets-discarded",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "flow-control-octets-discarded" with operation "replace".
     */
    public void markFlowControlOctetsDiscardedReplace() throws JNCException {
        markLeafReplace("flowControlOctetsDiscarded");
    }

    /**
     * Marks the leaf "flow-control-octets-discarded" with operation "merge".
     */
    public void markFlowControlOctetsDiscardedMerge() throws JNCException {
        markLeafMerge("flowControlOctetsDiscarded");
    }

    /**
     * Marks the leaf "flow-control-octets-discarded" with operation "create".
     */
    public void markFlowControlOctetsDiscardedCreate() throws JNCException {
        markLeafCreate("flowControlOctetsDiscarded");
    }

    /**
     * Marks the leaf "flow-control-octets-discarded" with operation "delete".
     */
    public void markFlowControlOctetsDiscardedDelete() throws JNCException {
        markLeafDelete("flowControlOctetsDiscarded");
    }

    /* Access methods for optional leaf child: "flow-control-bucket-size". */

    /**
     * Gets the value for child leaf "flow-control-bucket-size".
     * @return The value of the leaf.
     */
    public YangUInt32 getFlowControlBucketSizeValue() throws JNCException {
        return (YangUInt32)getValue("flow-control-bucket-size");
    }

    /**
     * Sets the value for child leaf "flow-control-bucket-size",
     * using instance of generated typedef class.
     * @param flowControlBucketSizeValue The value to set.
     * @param flowControlBucketSizeValue used during instantiation.
     */
    public void setFlowControlBucketSizeValue(YangUInt32 flowControlBucketSizeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "flow-control-bucket-size",
            flowControlBucketSizeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "flow-control-bucket-size",
     * using Java primitive values.
     * @param flowControlBucketSizeValue used during instantiation.
     */
    public void setFlowControlBucketSizeValue(long flowControlBucketSizeValue)
            throws JNCException {
        setFlowControlBucketSizeValue(new YangUInt32(flowControlBucketSizeValue));
    }

    /**
     * Sets the value for child leaf "flow-control-bucket-size",
     * using a String value.
     * @param flowControlBucketSizeValue used during instantiation.
     */
    public void setFlowControlBucketSizeValue(String flowControlBucketSizeValue)
            throws JNCException {
        setFlowControlBucketSizeValue(new YangUInt32(flowControlBucketSizeValue));
    }

    /**
     * Unsets the value for child leaf "flow-control-bucket-size".
     */
    public void unsetFlowControlBucketSizeValue() throws JNCException {
        delete("flow-control-bucket-size");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "flow-control-bucket-size" leaf will not have a value.
     */
    public void addFlowControlBucketSize() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "flow-control-bucket-size",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "flow-control-bucket-size" with operation "replace".
     */
    public void markFlowControlBucketSizeReplace() throws JNCException {
        markLeafReplace("flowControlBucketSize");
    }

    /**
     * Marks the leaf "flow-control-bucket-size" with operation "merge".
     */
    public void markFlowControlBucketSizeMerge() throws JNCException {
        markLeafMerge("flowControlBucketSize");
    }

    /**
     * Marks the leaf "flow-control-bucket-size" with operation "create".
     */
    public void markFlowControlBucketSizeCreate() throws JNCException {
        markLeafCreate("flowControlBucketSize");
    }

    /**
     * Marks the leaf "flow-control-bucket-size" with operation "delete".
     */
    public void markFlowControlBucketSizeDelete() throws JNCException {
        markLeafDelete("flowControlBucketSize");
    }

    /* Access methods for optional leaf child: "bvc-blocked-timeouts". */

    /**
     * Gets the value for child leaf "bvc-blocked-timeouts".
     * @return The value of the leaf.
     */
    public YangUInt32 getBvcBlockedTimeoutsValue() throws JNCException {
        return (YangUInt32)getValue("bvc-blocked-timeouts");
    }

    /**
     * Sets the value for child leaf "bvc-blocked-timeouts",
     * using instance of generated typedef class.
     * @param bvcBlockedTimeoutsValue The value to set.
     * @param bvcBlockedTimeoutsValue used during instantiation.
     */
    public void setBvcBlockedTimeoutsValue(YangUInt32 bvcBlockedTimeoutsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-blocked-timeouts",
            bvcBlockedTimeoutsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bvc-blocked-timeouts",
     * using Java primitive values.
     * @param bvcBlockedTimeoutsValue used during instantiation.
     */
    public void setBvcBlockedTimeoutsValue(long bvcBlockedTimeoutsValue)
            throws JNCException {
        setBvcBlockedTimeoutsValue(new YangUInt32(bvcBlockedTimeoutsValue));
    }

    /**
     * Sets the value for child leaf "bvc-blocked-timeouts",
     * using a String value.
     * @param bvcBlockedTimeoutsValue used during instantiation.
     */
    public void setBvcBlockedTimeoutsValue(String bvcBlockedTimeoutsValue)
            throws JNCException {
        setBvcBlockedTimeoutsValue(new YangUInt32(bvcBlockedTimeoutsValue));
    }

    /**
     * Unsets the value for child leaf "bvc-blocked-timeouts".
     */
    public void unsetBvcBlockedTimeoutsValue() throws JNCException {
        delete("bvc-blocked-timeouts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bvc-blocked-timeouts" leaf will not have a value.
     */
    public void addBvcBlockedTimeouts() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-blocked-timeouts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bvc-blocked-timeouts" with operation "replace".
     */
    public void markBvcBlockedTimeoutsReplace() throws JNCException {
        markLeafReplace("bvcBlockedTimeouts");
    }

    /**
     * Marks the leaf "bvc-blocked-timeouts" with operation "merge".
     */
    public void markBvcBlockedTimeoutsMerge() throws JNCException {
        markLeafMerge("bvcBlockedTimeouts");
    }

    /**
     * Marks the leaf "bvc-blocked-timeouts" with operation "create".
     */
    public void markBvcBlockedTimeoutsCreate() throws JNCException {
        markLeafCreate("bvcBlockedTimeouts");
    }

    /**
     * Marks the leaf "bvc-blocked-timeouts" with operation "delete".
     */
    public void markBvcBlockedTimeoutsDelete() throws JNCException {
        markLeafDelete("bvcBlockedTimeouts");
    }

    /* Access methods for optional leaf child: "bvc-bmax-timeouts". */

    /**
     * Gets the value for child leaf "bvc-bmax-timeouts".
     * @return The value of the leaf.
     */
    public YangUInt32 getBvcBmaxTimeoutsValue() throws JNCException {
        return (YangUInt32)getValue("bvc-bmax-timeouts");
    }

    /**
     * Sets the value for child leaf "bvc-bmax-timeouts",
     * using instance of generated typedef class.
     * @param bvcBmaxTimeoutsValue The value to set.
     * @param bvcBmaxTimeoutsValue used during instantiation.
     */
    public void setBvcBmaxTimeoutsValue(YangUInt32 bvcBmaxTimeoutsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-bmax-timeouts",
            bvcBmaxTimeoutsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bvc-bmax-timeouts",
     * using Java primitive values.
     * @param bvcBmaxTimeoutsValue used during instantiation.
     */
    public void setBvcBmaxTimeoutsValue(long bvcBmaxTimeoutsValue)
            throws JNCException {
        setBvcBmaxTimeoutsValue(new YangUInt32(bvcBmaxTimeoutsValue));
    }

    /**
     * Sets the value for child leaf "bvc-bmax-timeouts",
     * using a String value.
     * @param bvcBmaxTimeoutsValue used during instantiation.
     */
    public void setBvcBmaxTimeoutsValue(String bvcBmaxTimeoutsValue)
            throws JNCException {
        setBvcBmaxTimeoutsValue(new YangUInt32(bvcBmaxTimeoutsValue));
    }

    /**
     * Unsets the value for child leaf "bvc-bmax-timeouts".
     */
    public void unsetBvcBmaxTimeoutsValue() throws JNCException {
        delete("bvc-bmax-timeouts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bvc-bmax-timeouts" leaf will not have a value.
     */
    public void addBvcBmaxTimeouts() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-bmax-timeouts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bvc-bmax-timeouts" with operation "replace".
     */
    public void markBvcBmaxTimeoutsReplace() throws JNCException {
        markLeafReplace("bvcBmaxTimeouts");
    }

    /**
     * Marks the leaf "bvc-bmax-timeouts" with operation "merge".
     */
    public void markBvcBmaxTimeoutsMerge() throws JNCException {
        markLeafMerge("bvcBmaxTimeouts");
    }

    /**
     * Marks the leaf "bvc-bmax-timeouts" with operation "create".
     */
    public void markBvcBmaxTimeoutsCreate() throws JNCException {
        markLeafCreate("bvcBmaxTimeouts");
    }

    /**
     * Marks the leaf "bvc-bmax-timeouts" with operation "delete".
     */
    public void markBvcBmaxTimeoutsDelete() throws JNCException {
        markLeafDelete("bvcBmaxTimeouts");
    }

    /* Access methods for optional leaf child: "bvc-leak-rate-timeouts". */

    /**
     * Gets the value for child leaf "bvc-leak-rate-timeouts".
     * @return The value of the leaf.
     */
    public YangUInt32 getBvcLeakRateTimeoutsValue() throws JNCException {
        return (YangUInt32)getValue("bvc-leak-rate-timeouts");
    }

    /**
     * Sets the value for child leaf "bvc-leak-rate-timeouts",
     * using instance of generated typedef class.
     * @param bvcLeakRateTimeoutsValue The value to set.
     * @param bvcLeakRateTimeoutsValue used during instantiation.
     */
    public void setBvcLeakRateTimeoutsValue(YangUInt32 bvcLeakRateTimeoutsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-leak-rate-timeouts",
            bvcLeakRateTimeoutsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bvc-leak-rate-timeouts",
     * using Java primitive values.
     * @param bvcLeakRateTimeoutsValue used during instantiation.
     */
    public void setBvcLeakRateTimeoutsValue(long bvcLeakRateTimeoutsValue)
            throws JNCException {
        setBvcLeakRateTimeoutsValue(new YangUInt32(bvcLeakRateTimeoutsValue));
    }

    /**
     * Sets the value for child leaf "bvc-leak-rate-timeouts",
     * using a String value.
     * @param bvcLeakRateTimeoutsValue used during instantiation.
     */
    public void setBvcLeakRateTimeoutsValue(String bvcLeakRateTimeoutsValue)
            throws JNCException {
        setBvcLeakRateTimeoutsValue(new YangUInt32(bvcLeakRateTimeoutsValue));
    }

    /**
     * Unsets the value for child leaf "bvc-leak-rate-timeouts".
     */
    public void unsetBvcLeakRateTimeoutsValue() throws JNCException {
        delete("bvc-leak-rate-timeouts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bvc-leak-rate-timeouts" leaf will not have a value.
     */
    public void addBvcLeakRateTimeouts() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-leak-rate-timeouts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bvc-leak-rate-timeouts" with operation "replace".
     */
    public void markBvcLeakRateTimeoutsReplace() throws JNCException {
        markLeafReplace("bvcLeakRateTimeouts");
    }

    /**
     * Marks the leaf "bvc-leak-rate-timeouts" with operation "merge".
     */
    public void markBvcLeakRateTimeoutsMerge() throws JNCException {
        markLeafMerge("bvcLeakRateTimeouts");
    }

    /**
     * Marks the leaf "bvc-leak-rate-timeouts" with operation "create".
     */
    public void markBvcLeakRateTimeoutsCreate() throws JNCException {
        markLeafCreate("bvcLeakRateTimeouts");
    }

    /**
     * Marks the leaf "bvc-leak-rate-timeouts" with operation "delete".
     */
    public void markBvcLeakRateTimeoutsDelete() throws JNCException {
        markLeafDelete("bvcLeakRateTimeouts");
    }

    /* Access methods for optional leaf child: "nsvl-group". */

    /**
     * Gets the value for child leaf "nsvl-group".
     * @return The value of the leaf.
     */
    public YangUInt8 getNsvlGroupValue() throws JNCException {
        return (YangUInt8)getValue("nsvl-group");
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using instance of generated typedef class.
     * @param nsvlGroupValue The value to set.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(YangUInt8 nsvlGroupValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl-group",
            nsvlGroupValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using Java primitive values.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(short nsvlGroupValue) throws JNCException {
        setNsvlGroupValue(new YangUInt8(nsvlGroupValue));
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using a String value.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(String nsvlGroupValue) throws JNCException {
        setNsvlGroupValue(new YangUInt8(nsvlGroupValue));
    }

    /**
     * Unsets the value for child leaf "nsvl-group".
     */
    public void unsetNsvlGroupValue() throws JNCException {
        delete("nsvl-group");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsvl-group" leaf will not have a value.
     */
    public void addNsvlGroup() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl-group",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nsvl-group" with operation "replace".
     */
    public void markNsvlGroupReplace() throws JNCException {
        markLeafReplace("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "merge".
     */
    public void markNsvlGroupMerge() throws JNCException {
        markLeafMerge("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "create".
     */
    public void markNsvlGroupCreate() throws JNCException {
        markLeafCreate("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "delete".
     */
    public void markNsvlGroupDelete() throws JNCException {
        markLeafDelete("nsvlGroup");
    }

    /* Access methods for optional leaf child: "nsvl". */

    /**
     * Gets the value for child leaf "nsvl".
     * @return The value of the leaf.
     */
    public YangUInt8 getNsvlValue() throws JNCException {
        return (YangUInt8)getValue("nsvl");
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using instance of generated typedef class.
     * @param nsvlValue The value to set.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(YangUInt8 nsvlValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl",
            nsvlValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using Java primitive values.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(short nsvlValue) throws JNCException {
        setNsvlValue(new YangUInt8(nsvlValue));
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using a String value.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(String nsvlValue) throws JNCException {
        setNsvlValue(new YangUInt8(nsvlValue));
    }

    /**
     * Unsets the value for child leaf "nsvl".
     */
    public void unsetNsvlValue() throws JNCException {
        delete("nsvl");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsvl" leaf will not have a value.
     */
    public void addNsvl() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nsvl" with operation "replace".
     */
    public void markNsvlReplace() throws JNCException {
        markLeafReplace("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "merge".
     */
    public void markNsvlMerge() throws JNCException {
        markLeafMerge("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "create".
     */
    public void markNsvlCreate() throws JNCException {
        markLeafCreate("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "delete".
     */
    public void markNsvlDelete() throws JNCException {
        markLeafDelete("nsvl");
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "pid". */

    /**
     * Gets the value for child leaf "pid".
     * @return The value of the leaf.
     */
    public YangUInt16 getPidValue() throws JNCException {
        return (YangUInt16)getValue("pid");
    }

    /**
     * Sets the value for child leaf "pid",
     * using instance of generated typedef class.
     * @param pidValue The value to set.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(YangUInt16 pidValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pid",
            pidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pid",
     * using Java primitive values.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(int pidValue) throws JNCException {
        setPidValue(new YangUInt16(pidValue));
    }

    /**
     * Sets the value for child leaf "pid",
     * using a String value.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(String pidValue) throws JNCException {
        setPidValue(new YangUInt16(pidValue));
    }

    /**
     * Unsets the value for child leaf "pid".
     */
    public void unsetPidValue() throws JNCException {
        delete("pid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pid" leaf will not have a value.
     */
    public void addPid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pid" with operation "replace".
     */
    public void markPidReplace() throws JNCException {
        markLeafReplace("pid");
    }

    /**
     * Marks the leaf "pid" with operation "merge".
     */
    public void markPidMerge() throws JNCException {
        markLeafMerge("pid");
    }

    /**
     * Marks the leaf "pid" with operation "create".
     */
    public void markPidCreate() throws JNCException {
        markLeafCreate("pid");
    }

    /**
     * Marks the leaf "pid" with operation "delete".
     */
    public void markPidDelete() throws JNCException {
        markLeafDelete("pid");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
