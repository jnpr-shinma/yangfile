/* 
 * @(#)MmeBssgp.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gb;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gb/mme-bssgp"
 * <p>
 * See line 24 in
 * gtlConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeBssgp extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeBssgp object.
     */
    public MmeBssgp() {
        super(Epc.NAMESPACE, "mme-bssgp");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeBssgp clone() {
        return (MmeBssgp)cloneContent(new MmeBssgp());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeBssgp cloneShallow() {
        return (MmeBssgp)cloneShallowContent(new MmeBssgp());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "inter-nse-rerouting",
            "current-bucket-level",
            "gigabit-interface",
            "bvc-reset-timer",
            "bvc-reset-retry",
            "bvc-blocked-timer",
            "bvc-bmax-timer",
            "bvc-leak-rate-timer",
            "bvc-blocked-alarm-threshold",
            "bvc-blocked-clear-threshold",
        };
    }

    /* Access methods for optional leaf child: "inter-nse-rerouting". */

    /**
     * Gets the value for child leaf "inter-nse-rerouting".
     * @return The value of the leaf.
     */
    public YangEnumeration getInterNseReroutingValue() throws JNCException {
        YangEnumeration interNseRerouting = (YangEnumeration)getValue("inter-nse-rerouting");
        if (interNseRerouting == null) {
            interNseRerouting = new YangEnumeration("enable", new String[] {  // default
                "disable",
                "enable",
            });
        }
        return interNseRerouting;
    }

    /**
     * Sets the value for child leaf "inter-nse-rerouting",
     * using instance of generated typedef class.
     * @param interNseReroutingValue The value to set.
     * @param interNseReroutingValue used during instantiation.
     */
    public void setInterNseReroutingValue(YangEnumeration interNseReroutingValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "inter-nse-rerouting",
            interNseReroutingValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "inter-nse-rerouting",
     * using a String value.
     * @param interNseReroutingValue used during instantiation.
     */
    public void setInterNseReroutingValue(String interNseReroutingValue)
            throws JNCException {
        setInterNseReroutingValue(new YangEnumeration(interNseReroutingValue, new String[] {
             "disable",
             "enable",
        }));
    }

    /**
     * Unsets the value for child leaf "inter-nse-rerouting".
     */
    public void unsetInterNseReroutingValue() throws JNCException {
        delete("inter-nse-rerouting");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "inter-nse-rerouting" leaf will not have a value.
     */
    public void addInterNseRerouting() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "inter-nse-rerouting",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "inter-nse-rerouting" with operation "replace".
     */
    public void markInterNseReroutingReplace() throws JNCException {
        markLeafReplace("interNseRerouting");
    }

    /**
     * Marks the leaf "inter-nse-rerouting" with operation "merge".
     */
    public void markInterNseReroutingMerge() throws JNCException {
        markLeafMerge("interNseRerouting");
    }

    /**
     * Marks the leaf "inter-nse-rerouting" with operation "create".
     */
    public void markInterNseReroutingCreate() throws JNCException {
        markLeafCreate("interNseRerouting");
    }

    /**
     * Marks the leaf "inter-nse-rerouting" with operation "delete".
     */
    public void markInterNseReroutingDelete() throws JNCException {
        markLeafDelete("interNseRerouting");
    }

    /* Access methods for optional leaf child: "current-bucket-level". */

    /**
     * Gets the value for child leaf "current-bucket-level".
     * @return The value of the leaf.
     */
    public YangEnumeration getCurrentBucketLevelValue() throws JNCException {
        YangEnumeration currentBucketLevel = (YangEnumeration)getValue("current-bucket-level");
        if (currentBucketLevel == null) {
            currentBucketLevel = new YangEnumeration("enable", new String[] {  // default
                "disable",
                "enable",
            });
        }
        return currentBucketLevel;
    }

    /**
     * Sets the value for child leaf "current-bucket-level",
     * using instance of generated typedef class.
     * @param currentBucketLevelValue The value to set.
     * @param currentBucketLevelValue used during instantiation.
     */
    public void setCurrentBucketLevelValue(YangEnumeration currentBucketLevelValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-bucket-level",
            currentBucketLevelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-bucket-level",
     * using a String value.
     * @param currentBucketLevelValue used during instantiation.
     */
    public void setCurrentBucketLevelValue(String currentBucketLevelValue)
            throws JNCException {
        setCurrentBucketLevelValue(new YangEnumeration(currentBucketLevelValue, new String[] {
             "disable",
             "enable",
        }));
    }

    /**
     * Unsets the value for child leaf "current-bucket-level".
     */
    public void unsetCurrentBucketLevelValue() throws JNCException {
        delete("current-bucket-level");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-bucket-level" leaf will not have a value.
     */
    public void addCurrentBucketLevel() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-bucket-level",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-bucket-level" with operation "replace".
     */
    public void markCurrentBucketLevelReplace() throws JNCException {
        markLeafReplace("currentBucketLevel");
    }

    /**
     * Marks the leaf "current-bucket-level" with operation "merge".
     */
    public void markCurrentBucketLevelMerge() throws JNCException {
        markLeafMerge("currentBucketLevel");
    }

    /**
     * Marks the leaf "current-bucket-level" with operation "create".
     */
    public void markCurrentBucketLevelCreate() throws JNCException {
        markLeafCreate("currentBucketLevel");
    }

    /**
     * Marks the leaf "current-bucket-level" with operation "delete".
     */
    public void markCurrentBucketLevelDelete() throws JNCException {
        markLeafDelete("currentBucketLevel");
    }

    /* Access methods for optional leaf child: "gigabit-interface". */

    /**
     * Gets the value for child leaf "gigabit-interface".
     * @return The value of the leaf.
     */
    public YangEnumeration getGigabitInterfaceValue() throws JNCException {
        YangEnumeration gigabitInterface = (YangEnumeration)getValue("gigabit-interface");
        if (gigabitInterface == null) {
            gigabitInterface = new YangEnumeration("enable", new String[] {  // default
                "disable",
                "enable",
            });
        }
        return gigabitInterface;
    }

    /**
     * Sets the value for child leaf "gigabit-interface",
     * using instance of generated typedef class.
     * @param gigabitInterfaceValue The value to set.
     * @param gigabitInterfaceValue used during instantiation.
     */
    public void setGigabitInterfaceValue(YangEnumeration gigabitInterfaceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gigabit-interface",
            gigabitInterfaceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gigabit-interface",
     * using a String value.
     * @param gigabitInterfaceValue used during instantiation.
     */
    public void setGigabitInterfaceValue(String gigabitInterfaceValue)
            throws JNCException {
        setGigabitInterfaceValue(new YangEnumeration(gigabitInterfaceValue, new String[] {
             "disable",
             "enable",
        }));
    }

    /**
     * Unsets the value for child leaf "gigabit-interface".
     */
    public void unsetGigabitInterfaceValue() throws JNCException {
        delete("gigabit-interface");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gigabit-interface" leaf will not have a value.
     */
    public void addGigabitInterface() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gigabit-interface",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gigabit-interface" with operation "replace".
     */
    public void markGigabitInterfaceReplace() throws JNCException {
        markLeafReplace("gigabitInterface");
    }

    /**
     * Marks the leaf "gigabit-interface" with operation "merge".
     */
    public void markGigabitInterfaceMerge() throws JNCException {
        markLeafMerge("gigabitInterface");
    }

    /**
     * Marks the leaf "gigabit-interface" with operation "create".
     */
    public void markGigabitInterfaceCreate() throws JNCException {
        markLeafCreate("gigabitInterface");
    }

    /**
     * Marks the leaf "gigabit-interface" with operation "delete".
     */
    public void markGigabitInterfaceDelete() throws JNCException {
        markLeafDelete("gigabitInterface");
    }

    /* Access methods for optional leaf child: "bvc-reset-timer". */

    /**
     * Gets the value for child leaf "bvc-reset-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getBvcResetTimerValue() throws JNCException {
        YangUInt8 bvcResetTimer = (YangUInt8)getValue("bvc-reset-timer");
        if (bvcResetTimer == null) {
            bvcResetTimer = new YangUInt8("60");  // default
        }
        return bvcResetTimer;
    }

    /**
     * Sets the value for child leaf "bvc-reset-timer",
     * using instance of generated typedef class.
     * @param bvcResetTimerValue The value to set.
     * @param bvcResetTimerValue used during instantiation.
     */
    public void setBvcResetTimerValue(YangUInt8 bvcResetTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-reset-timer",
            bvcResetTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bvc-reset-timer",
     * using Java primitive values.
     * @param bvcResetTimerValue used during instantiation.
     */
    public void setBvcResetTimerValue(short bvcResetTimerValue)
            throws JNCException {
        setBvcResetTimerValue(new YangUInt8(bvcResetTimerValue));
    }

    /**
     * Sets the value for child leaf "bvc-reset-timer",
     * using a String value.
     * @param bvcResetTimerValue used during instantiation.
     */
    public void setBvcResetTimerValue(String bvcResetTimerValue)
            throws JNCException {
        setBvcResetTimerValue(new YangUInt8(bvcResetTimerValue));
    }

    /**
     * Unsets the value for child leaf "bvc-reset-timer".
     */
    public void unsetBvcResetTimerValue() throws JNCException {
        delete("bvc-reset-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bvc-reset-timer" leaf will not have a value.
     */
    public void addBvcResetTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-reset-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bvc-reset-timer" with operation "replace".
     */
    public void markBvcResetTimerReplace() throws JNCException {
        markLeafReplace("bvcResetTimer");
    }

    /**
     * Marks the leaf "bvc-reset-timer" with operation "merge".
     */
    public void markBvcResetTimerMerge() throws JNCException {
        markLeafMerge("bvcResetTimer");
    }

    /**
     * Marks the leaf "bvc-reset-timer" with operation "create".
     */
    public void markBvcResetTimerCreate() throws JNCException {
        markLeafCreate("bvcResetTimer");
    }

    /**
     * Marks the leaf "bvc-reset-timer" with operation "delete".
     */
    public void markBvcResetTimerDelete() throws JNCException {
        markLeafDelete("bvcResetTimer");
    }

    /* Access methods for optional leaf child: "bvc-reset-retry". */

    /**
     * Gets the value for child leaf "bvc-reset-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getBvcResetRetryValue() throws JNCException {
        YangUInt8 bvcResetRetry = (YangUInt8)getValue("bvc-reset-retry");
        if (bvcResetRetry == null) {
            bvcResetRetry = new YangUInt8("3");  // default
        }
        return bvcResetRetry;
    }

    /**
     * Sets the value for child leaf "bvc-reset-retry",
     * using instance of generated typedef class.
     * @param bvcResetRetryValue The value to set.
     * @param bvcResetRetryValue used during instantiation.
     */
    public void setBvcResetRetryValue(YangUInt8 bvcResetRetryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-reset-retry",
            bvcResetRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bvc-reset-retry",
     * using Java primitive values.
     * @param bvcResetRetryValue used during instantiation.
     */
    public void setBvcResetRetryValue(short bvcResetRetryValue)
            throws JNCException {
        setBvcResetRetryValue(new YangUInt8(bvcResetRetryValue));
    }

    /**
     * Sets the value for child leaf "bvc-reset-retry",
     * using a String value.
     * @param bvcResetRetryValue used during instantiation.
     */
    public void setBvcResetRetryValue(String bvcResetRetryValue)
            throws JNCException {
        setBvcResetRetryValue(new YangUInt8(bvcResetRetryValue));
    }

    /**
     * Unsets the value for child leaf "bvc-reset-retry".
     */
    public void unsetBvcResetRetryValue() throws JNCException {
        delete("bvc-reset-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bvc-reset-retry" leaf will not have a value.
     */
    public void addBvcResetRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-reset-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bvc-reset-retry" with operation "replace".
     */
    public void markBvcResetRetryReplace() throws JNCException {
        markLeafReplace("bvcResetRetry");
    }

    /**
     * Marks the leaf "bvc-reset-retry" with operation "merge".
     */
    public void markBvcResetRetryMerge() throws JNCException {
        markLeafMerge("bvcResetRetry");
    }

    /**
     * Marks the leaf "bvc-reset-retry" with operation "create".
     */
    public void markBvcResetRetryCreate() throws JNCException {
        markLeafCreate("bvcResetRetry");
    }

    /**
     * Marks the leaf "bvc-reset-retry" with operation "delete".
     */
    public void markBvcResetRetryDelete() throws JNCException {
        markLeafDelete("bvcResetRetry");
    }

    /* Access methods for optional leaf child: "bvc-blocked-timer". */

    /**
     * Gets the value for child leaf "bvc-blocked-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getBvcBlockedTimerValue() throws JNCException {
        YangUInt8 bvcBlockedTimer = (YangUInt8)getValue("bvc-blocked-timer");
        if (bvcBlockedTimer == null) {
            bvcBlockedTimer = new YangUInt8("10");  // default
        }
        return bvcBlockedTimer;
    }

    /**
     * Sets the value for child leaf "bvc-blocked-timer",
     * using instance of generated typedef class.
     * @param bvcBlockedTimerValue The value to set.
     * @param bvcBlockedTimerValue used during instantiation.
     */
    public void setBvcBlockedTimerValue(YangUInt8 bvcBlockedTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-blocked-timer",
            bvcBlockedTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bvc-blocked-timer",
     * using Java primitive values.
     * @param bvcBlockedTimerValue used during instantiation.
     */
    public void setBvcBlockedTimerValue(short bvcBlockedTimerValue)
            throws JNCException {
        setBvcBlockedTimerValue(new YangUInt8(bvcBlockedTimerValue));
    }

    /**
     * Sets the value for child leaf "bvc-blocked-timer",
     * using a String value.
     * @param bvcBlockedTimerValue used during instantiation.
     */
    public void setBvcBlockedTimerValue(String bvcBlockedTimerValue)
            throws JNCException {
        setBvcBlockedTimerValue(new YangUInt8(bvcBlockedTimerValue));
    }

    /**
     * Unsets the value for child leaf "bvc-blocked-timer".
     */
    public void unsetBvcBlockedTimerValue() throws JNCException {
        delete("bvc-blocked-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bvc-blocked-timer" leaf will not have a value.
     */
    public void addBvcBlockedTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-blocked-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bvc-blocked-timer" with operation "replace".
     */
    public void markBvcBlockedTimerReplace() throws JNCException {
        markLeafReplace("bvcBlockedTimer");
    }

    /**
     * Marks the leaf "bvc-blocked-timer" with operation "merge".
     */
    public void markBvcBlockedTimerMerge() throws JNCException {
        markLeafMerge("bvcBlockedTimer");
    }

    /**
     * Marks the leaf "bvc-blocked-timer" with operation "create".
     */
    public void markBvcBlockedTimerCreate() throws JNCException {
        markLeafCreate("bvcBlockedTimer");
    }

    /**
     * Marks the leaf "bvc-blocked-timer" with operation "delete".
     */
    public void markBvcBlockedTimerDelete() throws JNCException {
        markLeafDelete("bvcBlockedTimer");
    }

    /* Access methods for optional leaf child: "bvc-bmax-timer". */

    /**
     * Gets the value for child leaf "bvc-bmax-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getBvcBmaxTimerValue() throws JNCException {
        YangUInt8 bvcBmaxTimer = (YangUInt8)getValue("bvc-bmax-timer");
        if (bvcBmaxTimer == null) {
            bvcBmaxTimer = new YangUInt8("10");  // default
        }
        return bvcBmaxTimer;
    }

    /**
     * Sets the value for child leaf "bvc-bmax-timer",
     * using instance of generated typedef class.
     * @param bvcBmaxTimerValue The value to set.
     * @param bvcBmaxTimerValue used during instantiation.
     */
    public void setBvcBmaxTimerValue(YangUInt8 bvcBmaxTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-bmax-timer",
            bvcBmaxTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bvc-bmax-timer",
     * using Java primitive values.
     * @param bvcBmaxTimerValue used during instantiation.
     */
    public void setBvcBmaxTimerValue(short bvcBmaxTimerValue)
            throws JNCException {
        setBvcBmaxTimerValue(new YangUInt8(bvcBmaxTimerValue));
    }

    /**
     * Sets the value for child leaf "bvc-bmax-timer",
     * using a String value.
     * @param bvcBmaxTimerValue used during instantiation.
     */
    public void setBvcBmaxTimerValue(String bvcBmaxTimerValue)
            throws JNCException {
        setBvcBmaxTimerValue(new YangUInt8(bvcBmaxTimerValue));
    }

    /**
     * Unsets the value for child leaf "bvc-bmax-timer".
     */
    public void unsetBvcBmaxTimerValue() throws JNCException {
        delete("bvc-bmax-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bvc-bmax-timer" leaf will not have a value.
     */
    public void addBvcBmaxTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-bmax-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bvc-bmax-timer" with operation "replace".
     */
    public void markBvcBmaxTimerReplace() throws JNCException {
        markLeafReplace("bvcBmaxTimer");
    }

    /**
     * Marks the leaf "bvc-bmax-timer" with operation "merge".
     */
    public void markBvcBmaxTimerMerge() throws JNCException {
        markLeafMerge("bvcBmaxTimer");
    }

    /**
     * Marks the leaf "bvc-bmax-timer" with operation "create".
     */
    public void markBvcBmaxTimerCreate() throws JNCException {
        markLeafCreate("bvcBmaxTimer");
    }

    /**
     * Marks the leaf "bvc-bmax-timer" with operation "delete".
     */
    public void markBvcBmaxTimerDelete() throws JNCException {
        markLeafDelete("bvcBmaxTimer");
    }

    /* Access methods for optional leaf child: "bvc-leak-rate-timer". */

    /**
     * Gets the value for child leaf "bvc-leak-rate-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getBvcLeakRateTimerValue() throws JNCException {
        YangUInt8 bvcLeakRateTimer = (YangUInt8)getValue("bvc-leak-rate-timer");
        if (bvcLeakRateTimer == null) {
            bvcLeakRateTimer = new YangUInt8("10");  // default
        }
        return bvcLeakRateTimer;
    }

    /**
     * Sets the value for child leaf "bvc-leak-rate-timer",
     * using instance of generated typedef class.
     * @param bvcLeakRateTimerValue The value to set.
     * @param bvcLeakRateTimerValue used during instantiation.
     */
    public void setBvcLeakRateTimerValue(YangUInt8 bvcLeakRateTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-leak-rate-timer",
            bvcLeakRateTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bvc-leak-rate-timer",
     * using Java primitive values.
     * @param bvcLeakRateTimerValue used during instantiation.
     */
    public void setBvcLeakRateTimerValue(short bvcLeakRateTimerValue)
            throws JNCException {
        setBvcLeakRateTimerValue(new YangUInt8(bvcLeakRateTimerValue));
    }

    /**
     * Sets the value for child leaf "bvc-leak-rate-timer",
     * using a String value.
     * @param bvcLeakRateTimerValue used during instantiation.
     */
    public void setBvcLeakRateTimerValue(String bvcLeakRateTimerValue)
            throws JNCException {
        setBvcLeakRateTimerValue(new YangUInt8(bvcLeakRateTimerValue));
    }

    /**
     * Unsets the value for child leaf "bvc-leak-rate-timer".
     */
    public void unsetBvcLeakRateTimerValue() throws JNCException {
        delete("bvc-leak-rate-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bvc-leak-rate-timer" leaf will not have a value.
     */
    public void addBvcLeakRateTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-leak-rate-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bvc-leak-rate-timer" with operation "replace".
     */
    public void markBvcLeakRateTimerReplace() throws JNCException {
        markLeafReplace("bvcLeakRateTimer");
    }

    /**
     * Marks the leaf "bvc-leak-rate-timer" with operation "merge".
     */
    public void markBvcLeakRateTimerMerge() throws JNCException {
        markLeafMerge("bvcLeakRateTimer");
    }

    /**
     * Marks the leaf "bvc-leak-rate-timer" with operation "create".
     */
    public void markBvcLeakRateTimerCreate() throws JNCException {
        markLeafCreate("bvcLeakRateTimer");
    }

    /**
     * Marks the leaf "bvc-leak-rate-timer" with operation "delete".
     */
    public void markBvcLeakRateTimerDelete() throws JNCException {
        markLeafDelete("bvcLeakRateTimer");
    }

    /* Access methods for optional leaf child: "bvc-blocked-alarm-threshold". */

    /**
     * Gets the value for child leaf "bvc-blocked-alarm-threshold".
     * @return The value of the leaf.
     */
    public YangUInt16 getBvcBlockedAlarmThresholdValue() throws JNCException {
        YangUInt16 bvcBlockedAlarmThreshold = (YangUInt16)getValue("bvc-blocked-alarm-threshold");
        if (bvcBlockedAlarmThreshold == null) {
            bvcBlockedAlarmThreshold = new YangUInt16("10");  // default
        }
        return bvcBlockedAlarmThreshold;
    }

    /**
     * Sets the value for child leaf "bvc-blocked-alarm-threshold",
     * using instance of generated typedef class.
     * @param bvcBlockedAlarmThresholdValue The value to set.
     * @param bvcBlockedAlarmThresholdValue used during instantiation.
     */
    public void setBvcBlockedAlarmThresholdValue(YangUInt16 bvcBlockedAlarmThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-blocked-alarm-threshold",
            bvcBlockedAlarmThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bvc-blocked-alarm-threshold",
     * using Java primitive values.
     * @param bvcBlockedAlarmThresholdValue used during instantiation.
     */
    public void setBvcBlockedAlarmThresholdValue(int bvcBlockedAlarmThresholdValue)
            throws JNCException {
        setBvcBlockedAlarmThresholdValue(new YangUInt16(bvcBlockedAlarmThresholdValue));
    }

    /**
     * Sets the value for child leaf "bvc-blocked-alarm-threshold",
     * using a String value.
     * @param bvcBlockedAlarmThresholdValue used during instantiation.
     */
    public void setBvcBlockedAlarmThresholdValue(String bvcBlockedAlarmThresholdValue)
            throws JNCException {
        setBvcBlockedAlarmThresholdValue(new YangUInt16(bvcBlockedAlarmThresholdValue));
    }

    /**
     * Unsets the value for child leaf "bvc-blocked-alarm-threshold".
     */
    public void unsetBvcBlockedAlarmThresholdValue() throws JNCException {
        delete("bvc-blocked-alarm-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bvc-blocked-alarm-threshold" leaf will not have a value.
     */
    public void addBvcBlockedAlarmThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-blocked-alarm-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bvc-blocked-alarm-threshold" with operation "replace".
     */
    public void markBvcBlockedAlarmThresholdReplace() throws JNCException {
        markLeafReplace("bvcBlockedAlarmThreshold");
    }

    /**
     * Marks the leaf "bvc-blocked-alarm-threshold" with operation "merge".
     */
    public void markBvcBlockedAlarmThresholdMerge() throws JNCException {
        markLeafMerge("bvcBlockedAlarmThreshold");
    }

    /**
     * Marks the leaf "bvc-blocked-alarm-threshold" with operation "create".
     */
    public void markBvcBlockedAlarmThresholdCreate() throws JNCException {
        markLeafCreate("bvcBlockedAlarmThreshold");
    }

    /**
     * Marks the leaf "bvc-blocked-alarm-threshold" with operation "delete".
     */
    public void markBvcBlockedAlarmThresholdDelete() throws JNCException {
        markLeafDelete("bvcBlockedAlarmThreshold");
    }

    /* Access methods for optional leaf child: "bvc-blocked-clear-threshold". */

    /**
     * Gets the value for child leaf "bvc-blocked-clear-threshold".
     * @return The value of the leaf.
     */
    public YangUInt16 getBvcBlockedClearThresholdValue() throws JNCException {
        YangUInt16 bvcBlockedClearThreshold = (YangUInt16)getValue("bvc-blocked-clear-threshold");
        if (bvcBlockedClearThreshold == null) {
            bvcBlockedClearThreshold = new YangUInt16("5");  // default
        }
        return bvcBlockedClearThreshold;
    }

    /**
     * Sets the value for child leaf "bvc-blocked-clear-threshold",
     * using instance of generated typedef class.
     * @param bvcBlockedClearThresholdValue The value to set.
     * @param bvcBlockedClearThresholdValue used during instantiation.
     */
    public void setBvcBlockedClearThresholdValue(YangUInt16 bvcBlockedClearThresholdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-blocked-clear-threshold",
            bvcBlockedClearThresholdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "bvc-blocked-clear-threshold",
     * using Java primitive values.
     * @param bvcBlockedClearThresholdValue used during instantiation.
     */
    public void setBvcBlockedClearThresholdValue(int bvcBlockedClearThresholdValue)
            throws JNCException {
        setBvcBlockedClearThresholdValue(new YangUInt16(bvcBlockedClearThresholdValue));
    }

    /**
     * Sets the value for child leaf "bvc-blocked-clear-threshold",
     * using a String value.
     * @param bvcBlockedClearThresholdValue used during instantiation.
     */
    public void setBvcBlockedClearThresholdValue(String bvcBlockedClearThresholdValue)
            throws JNCException {
        setBvcBlockedClearThresholdValue(new YangUInt16(bvcBlockedClearThresholdValue));
    }

    /**
     * Unsets the value for child leaf "bvc-blocked-clear-threshold".
     */
    public void unsetBvcBlockedClearThresholdValue() throws JNCException {
        delete("bvc-blocked-clear-threshold");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "bvc-blocked-clear-threshold" leaf will not have a value.
     */
    public void addBvcBlockedClearThreshold() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "bvc-blocked-clear-threshold",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "bvc-blocked-clear-threshold" with operation "replace".
     */
    public void markBvcBlockedClearThresholdReplace() throws JNCException {
        markLeafReplace("bvcBlockedClearThreshold");
    }

    /**
     * Marks the leaf "bvc-blocked-clear-threshold" with operation "merge".
     */
    public void markBvcBlockedClearThresholdMerge() throws JNCException {
        markLeafMerge("bvcBlockedClearThreshold");
    }

    /**
     * Marks the leaf "bvc-blocked-clear-threshold" with operation "create".
     */
    public void markBvcBlockedClearThresholdCreate() throws JNCException {
        markLeafCreate("bvcBlockedClearThreshold");
    }

    /**
     * Marks the leaf "bvc-blocked-clear-threshold" with operation "delete".
     */
    public void markBvcBlockedClearThresholdDelete() throws JNCException {
        markLeafDelete("bvcBlockedClearThreshold");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
