/* 
 * @(#)NsvcIp.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gb;
import .ietfInetTypes.Ipv4Address;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gb/nsvc-ip"
 * <p>
 * See line 72 in
 * gtlCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class NsvcIp extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty NsvcIp object.
     */
    public NsvcIp() {
        super(Epc.NAMESPACE, "nsvc-ip");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public NsvcIp clone() {
        return (NsvcIp)cloneContent(new NsvcIp());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public NsvcIp cloneShallow() {
        return (NsvcIp)cloneShallowContent(new NsvcIp());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "nse-id",
            "local-ip",
            "local-port",
            "remote-ip",
            "remote-port",
            "state",
            "signaling-weight",
            "data-weight",
            "unit-data-rx",
            "unit-data-tx",
            "unit-data-octets-rx",
            "unit-data-octets-tx",
            "alives-rx",
            "alives-tx",
            "alive-acks-rx",
            "alive-acks-tx",
            "status-rx",
            "status-tx",
            "nsvl-group",
            "nsvl",
            "service",
            "location",
            "pid",
        };
    }

    /* Access methods for optional leaf child: "nse-id". */

    /**
     * Gets the value for child leaf "nse-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getNseIdValue() throws JNCException {
        return (YangUInt16)getValue("nse-id");
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using instance of generated typedef class.
     * @param nseIdValue The value to set.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(YangUInt16 nseIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nse-id",
            nseIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using Java primitive values.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(int nseIdValue) throws JNCException {
        setNseIdValue(new YangUInt16(nseIdValue));
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using a String value.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(String nseIdValue) throws JNCException {
        setNseIdValue(new YangUInt16(nseIdValue));
    }

    /**
     * Unsets the value for child leaf "nse-id".
     */
    public void unsetNseIdValue() throws JNCException {
        delete("nse-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nse-id" leaf will not have a value.
     */
    public void addNseId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nse-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nse-id" with operation "replace".
     */
    public void markNseIdReplace() throws JNCException {
        markLeafReplace("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "merge".
     */
    public void markNseIdMerge() throws JNCException {
        markLeafMerge("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "create".
     */
    public void markNseIdCreate() throws JNCException {
        markLeafCreate("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "delete".
     */
    public void markNseIdDelete() throws JNCException {
        markLeafDelete("nseId");
    }

    /* Access methods for optional leaf child: "local-ip". */

    /**
     * Gets the value for child leaf "local-ip".
     * @return The value of the leaf.
     */
    public Ipv4Address getLocalIpValue() throws JNCException {
        return (Ipv4Address)getValue("local-ip");
    }

    /**
     * Sets the value for child leaf "local-ip",
     * using a JNC type value.
     * @param localIpValue The value to set.
     * @param localIpValue used during instantiation.
     */
    public void setLocalIpValue(Ipv4Address localIpValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-ip",
            localIpValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-ip",
     * using a String value.
     * @param localIpValue used during instantiation.
     */
    public void setLocalIpValue(String localIpValue) throws JNCException {
        setLocalIpValue(new Ipv4Address(localIpValue));
    }

    /**
     * Unsets the value for child leaf "local-ip".
     */
    public void unsetLocalIpValue() throws JNCException {
        delete("local-ip");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-ip" leaf will not have a value.
     */
    public void addLocalIp() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-ip",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-ip" with operation "replace".
     */
    public void markLocalIpReplace() throws JNCException {
        markLeafReplace("localIp");
    }

    /**
     * Marks the leaf "local-ip" with operation "merge".
     */
    public void markLocalIpMerge() throws JNCException {
        markLeafMerge("localIp");
    }

    /**
     * Marks the leaf "local-ip" with operation "create".
     */
    public void markLocalIpCreate() throws JNCException {
        markLeafCreate("localIp");
    }

    /**
     * Marks the leaf "local-ip" with operation "delete".
     */
    public void markLocalIpDelete() throws JNCException {
        markLeafDelete("localIp");
    }

    /* Access methods for optional leaf child: "local-port". */

    /**
     * Gets the value for child leaf "local-port".
     * @return The value of the leaf.
     */
    public YangUInt16 getLocalPortValue() throws JNCException {
        return (YangUInt16)getValue("local-port");
    }

    /**
     * Sets the value for child leaf "local-port",
     * using instance of generated typedef class.
     * @param localPortValue The value to set.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(YangUInt16 localPortValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-port",
            localPortValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-port",
     * using Java primitive values.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(int localPortValue) throws JNCException {
        setLocalPortValue(new YangUInt16(localPortValue));
    }

    /**
     * Sets the value for child leaf "local-port",
     * using a String value.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(String localPortValue) throws JNCException {
        setLocalPortValue(new YangUInt16(localPortValue));
    }

    /**
     * Unsets the value for child leaf "local-port".
     */
    public void unsetLocalPortValue() throws JNCException {
        delete("local-port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-port" leaf will not have a value.
     */
    public void addLocalPort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-port" with operation "replace".
     */
    public void markLocalPortReplace() throws JNCException {
        markLeafReplace("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "merge".
     */
    public void markLocalPortMerge() throws JNCException {
        markLeafMerge("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "create".
     */
    public void markLocalPortCreate() throws JNCException {
        markLeafCreate("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "delete".
     */
    public void markLocalPortDelete() throws JNCException {
        markLeafDelete("localPort");
    }

    /* Access methods for optional leaf child: "remote-ip". */

    /**
     * Gets the value for child leaf "remote-ip".
     * @return The value of the leaf.
     */
    public Ipv4Address getRemoteIpValue() throws JNCException {
        return (Ipv4Address)getValue("remote-ip");
    }

    /**
     * Sets the value for child leaf "remote-ip",
     * using a JNC type value.
     * @param remoteIpValue The value to set.
     * @param remoteIpValue used during instantiation.
     */
    public void setRemoteIpValue(Ipv4Address remoteIpValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-ip",
            remoteIpValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "remote-ip",
     * using a String value.
     * @param remoteIpValue used during instantiation.
     */
    public void setRemoteIpValue(String remoteIpValue) throws JNCException {
        setRemoteIpValue(new Ipv4Address(remoteIpValue));
    }

    /**
     * Unsets the value for child leaf "remote-ip".
     */
    public void unsetRemoteIpValue() throws JNCException {
        delete("remote-ip");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "remote-ip" leaf will not have a value.
     */
    public void addRemoteIp() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-ip",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "remote-ip" with operation "replace".
     */
    public void markRemoteIpReplace() throws JNCException {
        markLeafReplace("remoteIp");
    }

    /**
     * Marks the leaf "remote-ip" with operation "merge".
     */
    public void markRemoteIpMerge() throws JNCException {
        markLeafMerge("remoteIp");
    }

    /**
     * Marks the leaf "remote-ip" with operation "create".
     */
    public void markRemoteIpCreate() throws JNCException {
        markLeafCreate("remoteIp");
    }

    /**
     * Marks the leaf "remote-ip" with operation "delete".
     */
    public void markRemoteIpDelete() throws JNCException {
        markLeafDelete("remoteIp");
    }

    /* Access methods for optional leaf child: "remote-port". */

    /**
     * Gets the value for child leaf "remote-port".
     * @return The value of the leaf.
     */
    public YangUInt16 getRemotePortValue() throws JNCException {
        return (YangUInt16)getValue("remote-port");
    }

    /**
     * Sets the value for child leaf "remote-port",
     * using instance of generated typedef class.
     * @param remotePortValue The value to set.
     * @param remotePortValue used during instantiation.
     */
    public void setRemotePortValue(YangUInt16 remotePortValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-port",
            remotePortValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "remote-port",
     * using Java primitive values.
     * @param remotePortValue used during instantiation.
     */
    public void setRemotePortValue(int remotePortValue) throws JNCException {
        setRemotePortValue(new YangUInt16(remotePortValue));
    }

    /**
     * Sets the value for child leaf "remote-port",
     * using a String value.
     * @param remotePortValue used during instantiation.
     */
    public void setRemotePortValue(String remotePortValue) throws JNCException {
        setRemotePortValue(new YangUInt16(remotePortValue));
    }

    /**
     * Unsets the value for child leaf "remote-port".
     */
    public void unsetRemotePortValue() throws JNCException {
        delete("remote-port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "remote-port" leaf will not have a value.
     */
    public void addRemotePort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "remote-port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "remote-port" with operation "replace".
     */
    public void markRemotePortReplace() throws JNCException {
        markLeafReplace("remotePort");
    }

    /**
     * Marks the leaf "remote-port" with operation "merge".
     */
    public void markRemotePortMerge() throws JNCException {
        markLeafMerge("remotePort");
    }

    /**
     * Marks the leaf "remote-port" with operation "create".
     */
    public void markRemotePortCreate() throws JNCException {
        markLeafCreate("remotePort");
    }

    /**
     * Marks the leaf "remote-port" with operation "delete".
     */
    public void markRemotePortDelete() throws JNCException {
        markLeafDelete("remotePort");
    }

    /* Access methods for optional leaf child: "state". */

    /**
     * Gets the value for child leaf "state".
     * @return The value of the leaf.
     */
    public YangString getStateValue() throws JNCException {
        return (YangString)getValue("state");
    }

    /**
     * Sets the value for child leaf "state",
     * using instance of generated typedef class.
     * @param stateValue The value to set.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(YangString stateValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "state",
            stateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "state",
     * using a String value.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(String stateValue) throws JNCException {
        setStateValue(new YangString(stateValue));
    }

    /**
     * Unsets the value for child leaf "state".
     */
    public void unsetStateValue() throws JNCException {
        delete("state");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "state" leaf will not have a value.
     */
    public void addState() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "state",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "state" with operation "replace".
     */
    public void markStateReplace() throws JNCException {
        markLeafReplace("state");
    }

    /**
     * Marks the leaf "state" with operation "merge".
     */
    public void markStateMerge() throws JNCException {
        markLeafMerge("state");
    }

    /**
     * Marks the leaf "state" with operation "create".
     */
    public void markStateCreate() throws JNCException {
        markLeafCreate("state");
    }

    /**
     * Marks the leaf "state" with operation "delete".
     */
    public void markStateDelete() throws JNCException {
        markLeafDelete("state");
    }

    /* Access methods for optional leaf child: "signaling-weight". */

    /**
     * Gets the value for child leaf "signaling-weight".
     * @return The value of the leaf.
     */
    public YangUInt16 getSignalingWeightValue() throws JNCException {
        return (YangUInt16)getValue("signaling-weight");
    }

    /**
     * Sets the value for child leaf "signaling-weight",
     * using instance of generated typedef class.
     * @param signalingWeightValue The value to set.
     * @param signalingWeightValue used during instantiation.
     */
    public void setSignalingWeightValue(YangUInt16 signalingWeightValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "signaling-weight",
            signalingWeightValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "signaling-weight",
     * using Java primitive values.
     * @param signalingWeightValue used during instantiation.
     */
    public void setSignalingWeightValue(int signalingWeightValue)
            throws JNCException {
        setSignalingWeightValue(new YangUInt16(signalingWeightValue));
    }

    /**
     * Sets the value for child leaf "signaling-weight",
     * using a String value.
     * @param signalingWeightValue used during instantiation.
     */
    public void setSignalingWeightValue(String signalingWeightValue)
            throws JNCException {
        setSignalingWeightValue(new YangUInt16(signalingWeightValue));
    }

    /**
     * Unsets the value for child leaf "signaling-weight".
     */
    public void unsetSignalingWeightValue() throws JNCException {
        delete("signaling-weight");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "signaling-weight" leaf will not have a value.
     */
    public void addSignalingWeight() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "signaling-weight",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "signaling-weight" with operation "replace".
     */
    public void markSignalingWeightReplace() throws JNCException {
        markLeafReplace("signalingWeight");
    }

    /**
     * Marks the leaf "signaling-weight" with operation "merge".
     */
    public void markSignalingWeightMerge() throws JNCException {
        markLeafMerge("signalingWeight");
    }

    /**
     * Marks the leaf "signaling-weight" with operation "create".
     */
    public void markSignalingWeightCreate() throws JNCException {
        markLeafCreate("signalingWeight");
    }

    /**
     * Marks the leaf "signaling-weight" with operation "delete".
     */
    public void markSignalingWeightDelete() throws JNCException {
        markLeafDelete("signalingWeight");
    }

    /* Access methods for optional leaf child: "data-weight". */

    /**
     * Gets the value for child leaf "data-weight".
     * @return The value of the leaf.
     */
    public YangUInt16 getDataWeightValue() throws JNCException {
        return (YangUInt16)getValue("data-weight");
    }

    /**
     * Sets the value for child leaf "data-weight",
     * using instance of generated typedef class.
     * @param dataWeightValue The value to set.
     * @param dataWeightValue used during instantiation.
     */
    public void setDataWeightValue(YangUInt16 dataWeightValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "data-weight",
            dataWeightValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "data-weight",
     * using Java primitive values.
     * @param dataWeightValue used during instantiation.
     */
    public void setDataWeightValue(int dataWeightValue) throws JNCException {
        setDataWeightValue(new YangUInt16(dataWeightValue));
    }

    /**
     * Sets the value for child leaf "data-weight",
     * using a String value.
     * @param dataWeightValue used during instantiation.
     */
    public void setDataWeightValue(String dataWeightValue) throws JNCException {
        setDataWeightValue(new YangUInt16(dataWeightValue));
    }

    /**
     * Unsets the value for child leaf "data-weight".
     */
    public void unsetDataWeightValue() throws JNCException {
        delete("data-weight");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "data-weight" leaf will not have a value.
     */
    public void addDataWeight() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "data-weight",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "data-weight" with operation "replace".
     */
    public void markDataWeightReplace() throws JNCException {
        markLeafReplace("dataWeight");
    }

    /**
     * Marks the leaf "data-weight" with operation "merge".
     */
    public void markDataWeightMerge() throws JNCException {
        markLeafMerge("dataWeight");
    }

    /**
     * Marks the leaf "data-weight" with operation "create".
     */
    public void markDataWeightCreate() throws JNCException {
        markLeafCreate("dataWeight");
    }

    /**
     * Marks the leaf "data-weight" with operation "delete".
     */
    public void markDataWeightDelete() throws JNCException {
        markLeafDelete("dataWeight");
    }

    /* Access methods for optional leaf child: "unit-data-rx". */

    /**
     * Gets the value for child leaf "unit-data-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnitDataRxValue() throws JNCException {
        return (YangUInt32)getValue("unit-data-rx");
    }

    /**
     * Sets the value for child leaf "unit-data-rx",
     * using instance of generated typedef class.
     * @param unitDataRxValue The value to set.
     * @param unitDataRxValue used during instantiation.
     */
    public void setUnitDataRxValue(YangUInt32 unitDataRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-rx",
            unitDataRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-data-rx",
     * using Java primitive values.
     * @param unitDataRxValue used during instantiation.
     */
    public void setUnitDataRxValue(long unitDataRxValue) throws JNCException {
        setUnitDataRxValue(new YangUInt32(unitDataRxValue));
    }

    /**
     * Sets the value for child leaf "unit-data-rx",
     * using a String value.
     * @param unitDataRxValue used during instantiation.
     */
    public void setUnitDataRxValue(String unitDataRxValue) throws JNCException {
        setUnitDataRxValue(new YangUInt32(unitDataRxValue));
    }

    /**
     * Unsets the value for child leaf "unit-data-rx".
     */
    public void unsetUnitDataRxValue() throws JNCException {
        delete("unit-data-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-data-rx" leaf will not have a value.
     */
    public void addUnitDataRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unit-data-rx" with operation "replace".
     */
    public void markUnitDataRxReplace() throws JNCException {
        markLeafReplace("unitDataRx");
    }

    /**
     * Marks the leaf "unit-data-rx" with operation "merge".
     */
    public void markUnitDataRxMerge() throws JNCException {
        markLeafMerge("unitDataRx");
    }

    /**
     * Marks the leaf "unit-data-rx" with operation "create".
     */
    public void markUnitDataRxCreate() throws JNCException {
        markLeafCreate("unitDataRx");
    }

    /**
     * Marks the leaf "unit-data-rx" with operation "delete".
     */
    public void markUnitDataRxDelete() throws JNCException {
        markLeafDelete("unitDataRx");
    }

    /* Access methods for optional leaf child: "unit-data-tx". */

    /**
     * Gets the value for child leaf "unit-data-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnitDataTxValue() throws JNCException {
        return (YangUInt32)getValue("unit-data-tx");
    }

    /**
     * Sets the value for child leaf "unit-data-tx",
     * using instance of generated typedef class.
     * @param unitDataTxValue The value to set.
     * @param unitDataTxValue used during instantiation.
     */
    public void setUnitDataTxValue(YangUInt32 unitDataTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-tx",
            unitDataTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-data-tx",
     * using Java primitive values.
     * @param unitDataTxValue used during instantiation.
     */
    public void setUnitDataTxValue(long unitDataTxValue) throws JNCException {
        setUnitDataTxValue(new YangUInt32(unitDataTxValue));
    }

    /**
     * Sets the value for child leaf "unit-data-tx",
     * using a String value.
     * @param unitDataTxValue used during instantiation.
     */
    public void setUnitDataTxValue(String unitDataTxValue) throws JNCException {
        setUnitDataTxValue(new YangUInt32(unitDataTxValue));
    }

    /**
     * Unsets the value for child leaf "unit-data-tx".
     */
    public void unsetUnitDataTxValue() throws JNCException {
        delete("unit-data-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-data-tx" leaf will not have a value.
     */
    public void addUnitDataTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unit-data-tx" with operation "replace".
     */
    public void markUnitDataTxReplace() throws JNCException {
        markLeafReplace("unitDataTx");
    }

    /**
     * Marks the leaf "unit-data-tx" with operation "merge".
     */
    public void markUnitDataTxMerge() throws JNCException {
        markLeafMerge("unitDataTx");
    }

    /**
     * Marks the leaf "unit-data-tx" with operation "create".
     */
    public void markUnitDataTxCreate() throws JNCException {
        markLeafCreate("unitDataTx");
    }

    /**
     * Marks the leaf "unit-data-tx" with operation "delete".
     */
    public void markUnitDataTxDelete() throws JNCException {
        markLeafDelete("unitDataTx");
    }

    /* Access methods for optional leaf child: "unit-data-octets-rx". */

    /**
     * Gets the value for child leaf "unit-data-octets-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnitDataOctetsRxValue() throws JNCException {
        return (YangUInt32)getValue("unit-data-octets-rx");
    }

    /**
     * Sets the value for child leaf "unit-data-octets-rx",
     * using instance of generated typedef class.
     * @param unitDataOctetsRxValue The value to set.
     * @param unitDataOctetsRxValue used during instantiation.
     */
    public void setUnitDataOctetsRxValue(YangUInt32 unitDataOctetsRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-octets-rx",
            unitDataOctetsRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-data-octets-rx",
     * using Java primitive values.
     * @param unitDataOctetsRxValue used during instantiation.
     */
    public void setUnitDataOctetsRxValue(long unitDataOctetsRxValue)
            throws JNCException {
        setUnitDataOctetsRxValue(new YangUInt32(unitDataOctetsRxValue));
    }

    /**
     * Sets the value for child leaf "unit-data-octets-rx",
     * using a String value.
     * @param unitDataOctetsRxValue used during instantiation.
     */
    public void setUnitDataOctetsRxValue(String unitDataOctetsRxValue)
            throws JNCException {
        setUnitDataOctetsRxValue(new YangUInt32(unitDataOctetsRxValue));
    }

    /**
     * Unsets the value for child leaf "unit-data-octets-rx".
     */
    public void unsetUnitDataOctetsRxValue() throws JNCException {
        delete("unit-data-octets-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-data-octets-rx" leaf will not have a value.
     */
    public void addUnitDataOctetsRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-octets-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unit-data-octets-rx" with operation "replace".
     */
    public void markUnitDataOctetsRxReplace() throws JNCException {
        markLeafReplace("unitDataOctetsRx");
    }

    /**
     * Marks the leaf "unit-data-octets-rx" with operation "merge".
     */
    public void markUnitDataOctetsRxMerge() throws JNCException {
        markLeafMerge("unitDataOctetsRx");
    }

    /**
     * Marks the leaf "unit-data-octets-rx" with operation "create".
     */
    public void markUnitDataOctetsRxCreate() throws JNCException {
        markLeafCreate("unitDataOctetsRx");
    }

    /**
     * Marks the leaf "unit-data-octets-rx" with operation "delete".
     */
    public void markUnitDataOctetsRxDelete() throws JNCException {
        markLeafDelete("unitDataOctetsRx");
    }

    /* Access methods for optional leaf child: "unit-data-octets-tx". */

    /**
     * Gets the value for child leaf "unit-data-octets-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnitDataOctetsTxValue() throws JNCException {
        return (YangUInt32)getValue("unit-data-octets-tx");
    }

    /**
     * Sets the value for child leaf "unit-data-octets-tx",
     * using instance of generated typedef class.
     * @param unitDataOctetsTxValue The value to set.
     * @param unitDataOctetsTxValue used during instantiation.
     */
    public void setUnitDataOctetsTxValue(YangUInt32 unitDataOctetsTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-octets-tx",
            unitDataOctetsTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-data-octets-tx",
     * using Java primitive values.
     * @param unitDataOctetsTxValue used during instantiation.
     */
    public void setUnitDataOctetsTxValue(long unitDataOctetsTxValue)
            throws JNCException {
        setUnitDataOctetsTxValue(new YangUInt32(unitDataOctetsTxValue));
    }

    /**
     * Sets the value for child leaf "unit-data-octets-tx",
     * using a String value.
     * @param unitDataOctetsTxValue used during instantiation.
     */
    public void setUnitDataOctetsTxValue(String unitDataOctetsTxValue)
            throws JNCException {
        setUnitDataOctetsTxValue(new YangUInt32(unitDataOctetsTxValue));
    }

    /**
     * Unsets the value for child leaf "unit-data-octets-tx".
     */
    public void unsetUnitDataOctetsTxValue() throws JNCException {
        delete("unit-data-octets-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-data-octets-tx" leaf will not have a value.
     */
    public void addUnitDataOctetsTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-data-octets-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unit-data-octets-tx" with operation "replace".
     */
    public void markUnitDataOctetsTxReplace() throws JNCException {
        markLeafReplace("unitDataOctetsTx");
    }

    /**
     * Marks the leaf "unit-data-octets-tx" with operation "merge".
     */
    public void markUnitDataOctetsTxMerge() throws JNCException {
        markLeafMerge("unitDataOctetsTx");
    }

    /**
     * Marks the leaf "unit-data-octets-tx" with operation "create".
     */
    public void markUnitDataOctetsTxCreate() throws JNCException {
        markLeafCreate("unitDataOctetsTx");
    }

    /**
     * Marks the leaf "unit-data-octets-tx" with operation "delete".
     */
    public void markUnitDataOctetsTxDelete() throws JNCException {
        markLeafDelete("unitDataOctetsTx");
    }

    /* Access methods for optional leaf child: "alives-rx". */

    /**
     * Gets the value for child leaf "alives-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getAlivesRxValue() throws JNCException {
        return (YangUInt32)getValue("alives-rx");
    }

    /**
     * Sets the value for child leaf "alives-rx",
     * using instance of generated typedef class.
     * @param alivesRxValue The value to set.
     * @param alivesRxValue used during instantiation.
     */
    public void setAlivesRxValue(YangUInt32 alivesRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alives-rx",
            alivesRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "alives-rx",
     * using Java primitive values.
     * @param alivesRxValue used during instantiation.
     */
    public void setAlivesRxValue(long alivesRxValue) throws JNCException {
        setAlivesRxValue(new YangUInt32(alivesRxValue));
    }

    /**
     * Sets the value for child leaf "alives-rx",
     * using a String value.
     * @param alivesRxValue used during instantiation.
     */
    public void setAlivesRxValue(String alivesRxValue) throws JNCException {
        setAlivesRxValue(new YangUInt32(alivesRxValue));
    }

    /**
     * Unsets the value for child leaf "alives-rx".
     */
    public void unsetAlivesRxValue() throws JNCException {
        delete("alives-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "alives-rx" leaf will not have a value.
     */
    public void addAlivesRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alives-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "alives-rx" with operation "replace".
     */
    public void markAlivesRxReplace() throws JNCException {
        markLeafReplace("alivesRx");
    }

    /**
     * Marks the leaf "alives-rx" with operation "merge".
     */
    public void markAlivesRxMerge() throws JNCException {
        markLeafMerge("alivesRx");
    }

    /**
     * Marks the leaf "alives-rx" with operation "create".
     */
    public void markAlivesRxCreate() throws JNCException {
        markLeafCreate("alivesRx");
    }

    /**
     * Marks the leaf "alives-rx" with operation "delete".
     */
    public void markAlivesRxDelete() throws JNCException {
        markLeafDelete("alivesRx");
    }

    /* Access methods for optional leaf child: "alives-tx". */

    /**
     * Gets the value for child leaf "alives-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getAlivesTxValue() throws JNCException {
        return (YangUInt32)getValue("alives-tx");
    }

    /**
     * Sets the value for child leaf "alives-tx",
     * using instance of generated typedef class.
     * @param alivesTxValue The value to set.
     * @param alivesTxValue used during instantiation.
     */
    public void setAlivesTxValue(YangUInt32 alivesTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alives-tx",
            alivesTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "alives-tx",
     * using Java primitive values.
     * @param alivesTxValue used during instantiation.
     */
    public void setAlivesTxValue(long alivesTxValue) throws JNCException {
        setAlivesTxValue(new YangUInt32(alivesTxValue));
    }

    /**
     * Sets the value for child leaf "alives-tx",
     * using a String value.
     * @param alivesTxValue used during instantiation.
     */
    public void setAlivesTxValue(String alivesTxValue) throws JNCException {
        setAlivesTxValue(new YangUInt32(alivesTxValue));
    }

    /**
     * Unsets the value for child leaf "alives-tx".
     */
    public void unsetAlivesTxValue() throws JNCException {
        delete("alives-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "alives-tx" leaf will not have a value.
     */
    public void addAlivesTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alives-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "alives-tx" with operation "replace".
     */
    public void markAlivesTxReplace() throws JNCException {
        markLeafReplace("alivesTx");
    }

    /**
     * Marks the leaf "alives-tx" with operation "merge".
     */
    public void markAlivesTxMerge() throws JNCException {
        markLeafMerge("alivesTx");
    }

    /**
     * Marks the leaf "alives-tx" with operation "create".
     */
    public void markAlivesTxCreate() throws JNCException {
        markLeafCreate("alivesTx");
    }

    /**
     * Marks the leaf "alives-tx" with operation "delete".
     */
    public void markAlivesTxDelete() throws JNCException {
        markLeafDelete("alivesTx");
    }

    /* Access methods for optional leaf child: "alive-acks-rx". */

    /**
     * Gets the value for child leaf "alive-acks-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getAliveAcksRxValue() throws JNCException {
        return (YangUInt32)getValue("alive-acks-rx");
    }

    /**
     * Sets the value for child leaf "alive-acks-rx",
     * using instance of generated typedef class.
     * @param aliveAcksRxValue The value to set.
     * @param aliveAcksRxValue used during instantiation.
     */
    public void setAliveAcksRxValue(YangUInt32 aliveAcksRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alive-acks-rx",
            aliveAcksRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "alive-acks-rx",
     * using Java primitive values.
     * @param aliveAcksRxValue used during instantiation.
     */
    public void setAliveAcksRxValue(long aliveAcksRxValue) throws JNCException {
        setAliveAcksRxValue(new YangUInt32(aliveAcksRxValue));
    }

    /**
     * Sets the value for child leaf "alive-acks-rx",
     * using a String value.
     * @param aliveAcksRxValue used during instantiation.
     */
    public void setAliveAcksRxValue(String aliveAcksRxValue)
            throws JNCException {
        setAliveAcksRxValue(new YangUInt32(aliveAcksRxValue));
    }

    /**
     * Unsets the value for child leaf "alive-acks-rx".
     */
    public void unsetAliveAcksRxValue() throws JNCException {
        delete("alive-acks-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "alive-acks-rx" leaf will not have a value.
     */
    public void addAliveAcksRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alive-acks-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "alive-acks-rx" with operation "replace".
     */
    public void markAliveAcksRxReplace() throws JNCException {
        markLeafReplace("aliveAcksRx");
    }

    /**
     * Marks the leaf "alive-acks-rx" with operation "merge".
     */
    public void markAliveAcksRxMerge() throws JNCException {
        markLeafMerge("aliveAcksRx");
    }

    /**
     * Marks the leaf "alive-acks-rx" with operation "create".
     */
    public void markAliveAcksRxCreate() throws JNCException {
        markLeafCreate("aliveAcksRx");
    }

    /**
     * Marks the leaf "alive-acks-rx" with operation "delete".
     */
    public void markAliveAcksRxDelete() throws JNCException {
        markLeafDelete("aliveAcksRx");
    }

    /* Access methods for optional leaf child: "alive-acks-tx". */

    /**
     * Gets the value for child leaf "alive-acks-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getAliveAcksTxValue() throws JNCException {
        return (YangUInt32)getValue("alive-acks-tx");
    }

    /**
     * Sets the value for child leaf "alive-acks-tx",
     * using instance of generated typedef class.
     * @param aliveAcksTxValue The value to set.
     * @param aliveAcksTxValue used during instantiation.
     */
    public void setAliveAcksTxValue(YangUInt32 aliveAcksTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alive-acks-tx",
            aliveAcksTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "alive-acks-tx",
     * using Java primitive values.
     * @param aliveAcksTxValue used during instantiation.
     */
    public void setAliveAcksTxValue(long aliveAcksTxValue) throws JNCException {
        setAliveAcksTxValue(new YangUInt32(aliveAcksTxValue));
    }

    /**
     * Sets the value for child leaf "alive-acks-tx",
     * using a String value.
     * @param aliveAcksTxValue used during instantiation.
     */
    public void setAliveAcksTxValue(String aliveAcksTxValue)
            throws JNCException {
        setAliveAcksTxValue(new YangUInt32(aliveAcksTxValue));
    }

    /**
     * Unsets the value for child leaf "alive-acks-tx".
     */
    public void unsetAliveAcksTxValue() throws JNCException {
        delete("alive-acks-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "alive-acks-tx" leaf will not have a value.
     */
    public void addAliveAcksTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "alive-acks-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "alive-acks-tx" with operation "replace".
     */
    public void markAliveAcksTxReplace() throws JNCException {
        markLeafReplace("aliveAcksTx");
    }

    /**
     * Marks the leaf "alive-acks-tx" with operation "merge".
     */
    public void markAliveAcksTxMerge() throws JNCException {
        markLeafMerge("aliveAcksTx");
    }

    /**
     * Marks the leaf "alive-acks-tx" with operation "create".
     */
    public void markAliveAcksTxCreate() throws JNCException {
        markLeafCreate("aliveAcksTx");
    }

    /**
     * Marks the leaf "alive-acks-tx" with operation "delete".
     */
    public void markAliveAcksTxDelete() throws JNCException {
        markLeafDelete("aliveAcksTx");
    }

    /* Access methods for optional leaf child: "status-rx". */

    /**
     * Gets the value for child leaf "status-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getStatusRxValue() throws JNCException {
        return (YangUInt32)getValue("status-rx");
    }

    /**
     * Sets the value for child leaf "status-rx",
     * using instance of generated typedef class.
     * @param statusRxValue The value to set.
     * @param statusRxValue used during instantiation.
     */
    public void setStatusRxValue(YangUInt32 statusRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-rx",
            statusRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-rx",
     * using Java primitive values.
     * @param statusRxValue used during instantiation.
     */
    public void setStatusRxValue(long statusRxValue) throws JNCException {
        setStatusRxValue(new YangUInt32(statusRxValue));
    }

    /**
     * Sets the value for child leaf "status-rx",
     * using a String value.
     * @param statusRxValue used during instantiation.
     */
    public void setStatusRxValue(String statusRxValue) throws JNCException {
        setStatusRxValue(new YangUInt32(statusRxValue));
    }

    /**
     * Unsets the value for child leaf "status-rx".
     */
    public void unsetStatusRxValue() throws JNCException {
        delete("status-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-rx" leaf will not have a value.
     */
    public void addStatusRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-rx" with operation "replace".
     */
    public void markStatusRxReplace() throws JNCException {
        markLeafReplace("statusRx");
    }

    /**
     * Marks the leaf "status-rx" with operation "merge".
     */
    public void markStatusRxMerge() throws JNCException {
        markLeafMerge("statusRx");
    }

    /**
     * Marks the leaf "status-rx" with operation "create".
     */
    public void markStatusRxCreate() throws JNCException {
        markLeafCreate("statusRx");
    }

    /**
     * Marks the leaf "status-rx" with operation "delete".
     */
    public void markStatusRxDelete() throws JNCException {
        markLeafDelete("statusRx");
    }

    /* Access methods for optional leaf child: "status-tx". */

    /**
     * Gets the value for child leaf "status-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getStatusTxValue() throws JNCException {
        return (YangUInt32)getValue("status-tx");
    }

    /**
     * Sets the value for child leaf "status-tx",
     * using instance of generated typedef class.
     * @param statusTxValue The value to set.
     * @param statusTxValue used during instantiation.
     */
    public void setStatusTxValue(YangUInt32 statusTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-tx",
            statusTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-tx",
     * using Java primitive values.
     * @param statusTxValue used during instantiation.
     */
    public void setStatusTxValue(long statusTxValue) throws JNCException {
        setStatusTxValue(new YangUInt32(statusTxValue));
    }

    /**
     * Sets the value for child leaf "status-tx",
     * using a String value.
     * @param statusTxValue used during instantiation.
     */
    public void setStatusTxValue(String statusTxValue) throws JNCException {
        setStatusTxValue(new YangUInt32(statusTxValue));
    }

    /**
     * Unsets the value for child leaf "status-tx".
     */
    public void unsetStatusTxValue() throws JNCException {
        delete("status-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-tx" leaf will not have a value.
     */
    public void addStatusTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-tx" with operation "replace".
     */
    public void markStatusTxReplace() throws JNCException {
        markLeafReplace("statusTx");
    }

    /**
     * Marks the leaf "status-tx" with operation "merge".
     */
    public void markStatusTxMerge() throws JNCException {
        markLeafMerge("statusTx");
    }

    /**
     * Marks the leaf "status-tx" with operation "create".
     */
    public void markStatusTxCreate() throws JNCException {
        markLeafCreate("statusTx");
    }

    /**
     * Marks the leaf "status-tx" with operation "delete".
     */
    public void markStatusTxDelete() throws JNCException {
        markLeafDelete("statusTx");
    }

    /* Access methods for optional leaf child: "nsvl-group". */

    /**
     * Gets the value for child leaf "nsvl-group".
     * @return The value of the leaf.
     */
    public YangUInt8 getNsvlGroupValue() throws JNCException {
        return (YangUInt8)getValue("nsvl-group");
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using instance of generated typedef class.
     * @param nsvlGroupValue The value to set.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(YangUInt8 nsvlGroupValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl-group",
            nsvlGroupValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using Java primitive values.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(short nsvlGroupValue) throws JNCException {
        setNsvlGroupValue(new YangUInt8(nsvlGroupValue));
    }

    /**
     * Sets the value for child leaf "nsvl-group",
     * using a String value.
     * @param nsvlGroupValue used during instantiation.
     */
    public void setNsvlGroupValue(String nsvlGroupValue) throws JNCException {
        setNsvlGroupValue(new YangUInt8(nsvlGroupValue));
    }

    /**
     * Unsets the value for child leaf "nsvl-group".
     */
    public void unsetNsvlGroupValue() throws JNCException {
        delete("nsvl-group");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsvl-group" leaf will not have a value.
     */
    public void addNsvlGroup() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl-group",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nsvl-group" with operation "replace".
     */
    public void markNsvlGroupReplace() throws JNCException {
        markLeafReplace("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "merge".
     */
    public void markNsvlGroupMerge() throws JNCException {
        markLeafMerge("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "create".
     */
    public void markNsvlGroupCreate() throws JNCException {
        markLeafCreate("nsvlGroup");
    }

    /**
     * Marks the leaf "nsvl-group" with operation "delete".
     */
    public void markNsvlGroupDelete() throws JNCException {
        markLeafDelete("nsvlGroup");
    }

    /* Access methods for optional leaf child: "nsvl". */

    /**
     * Gets the value for child leaf "nsvl".
     * @return The value of the leaf.
     */
    public YangUInt8 getNsvlValue() throws JNCException {
        return (YangUInt8)getValue("nsvl");
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using instance of generated typedef class.
     * @param nsvlValue The value to set.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(YangUInt8 nsvlValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl",
            nsvlValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using Java primitive values.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(short nsvlValue) throws JNCException {
        setNsvlValue(new YangUInt8(nsvlValue));
    }

    /**
     * Sets the value for child leaf "nsvl",
     * using a String value.
     * @param nsvlValue used during instantiation.
     */
    public void setNsvlValue(String nsvlValue) throws JNCException {
        setNsvlValue(new YangUInt8(nsvlValue));
    }

    /**
     * Unsets the value for child leaf "nsvl".
     */
    public void unsetNsvlValue() throws JNCException {
        delete("nsvl");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsvl" leaf will not have a value.
     */
    public void addNsvl() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nsvl" with operation "replace".
     */
    public void markNsvlReplace() throws JNCException {
        markLeafReplace("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "merge".
     */
    public void markNsvlMerge() throws JNCException {
        markLeafMerge("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "create".
     */
    public void markNsvlCreate() throws JNCException {
        markLeafCreate("nsvl");
    }

    /**
     * Marks the leaf "nsvl" with operation "delete".
     */
    public void markNsvlDelete() throws JNCException {
        markLeafDelete("nsvl");
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "pid". */

    /**
     * Gets the value for child leaf "pid".
     * @return The value of the leaf.
     */
    public YangUInt16 getPidValue() throws JNCException {
        return (YangUInt16)getValue("pid");
    }

    /**
     * Sets the value for child leaf "pid",
     * using instance of generated typedef class.
     * @param pidValue The value to set.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(YangUInt16 pidValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pid",
            pidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pid",
     * using Java primitive values.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(int pidValue) throws JNCException {
        setPidValue(new YangUInt16(pidValue));
    }

    /**
     * Sets the value for child leaf "pid",
     * using a String value.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(String pidValue) throws JNCException {
        setPidValue(new YangUInt16(pidValue));
    }

    /**
     * Unsets the value for child leaf "pid".
     */
    public void unsetPidValue() throws JNCException {
        delete("pid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pid" leaf will not have a value.
     */
    public void addPid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pid" with operation "replace".
     */
    public void markPidReplace() throws JNCException {
        markLeafReplace("pid");
    }

    /**
     * Marks the leaf "pid" with operation "merge".
     */
    public void markPidMerge() throws JNCException {
        markLeafMerge("pid");
    }

    /**
     * Marks the leaf "pid" with operation "create".
     */
    public void markPidCreate() throws JNCException {
        markLeafCreate("pid");
    }

    /**
     * Marks the leaf "pid" with operation "delete".
     */
    public void markPidDelete() throws JNCException {
        markLeafDelete("pid");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
