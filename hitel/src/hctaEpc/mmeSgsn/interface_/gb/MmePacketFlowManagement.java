/* 
 * @(#)MmePacketFlowManagement.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gb;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gb/mme-packet-flow-management"
 * <p>
 * See line 321 in
 * sdConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmePacketFlowManagement extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmePacketFlowManagement object.
     */
    public MmePacketFlowManagement() {
        super(Epc.NAMESPACE, "mme-packet-flow-management");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmePacketFlowManagement clone() {
        return (MmePacketFlowManagement)cloneContent(new MmePacketFlowManagement());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmePacketFlowManagement cloneShallow() {
        return (MmePacketFlowManagement)cloneShallowContent(new MmePacketFlowManagement());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "packet-flow-context",
            "pfc-flow-control",
            "pfc-flow-control-tf-timer",
            "average-pfcs-per-mobile",
            "t7-timer",
            "t7-retries",
            "packet-flow-timer",
        };
    }

    /* Access methods for optional leaf child: "packet-flow-context". */

    /**
     * Gets the value for child leaf "packet-flow-context".
     * @return The value of the leaf.
     */
    public YangEnumeration getPacketFlowContextValue() throws JNCException {
        YangEnumeration packetFlowContext = (YangEnumeration)getValue("packet-flow-context");
        if (packetFlowContext == null) {
            packetFlowContext = new YangEnumeration("disable", new String[] {  // default
                "disable",
                "enable",
            });
        }
        return packetFlowContext;
    }

    /**
     * Sets the value for child leaf "packet-flow-context",
     * using instance of generated typedef class.
     * @param packetFlowContextValue The value to set.
     * @param packetFlowContextValue used during instantiation.
     */
    public void setPacketFlowContextValue(YangEnumeration packetFlowContextValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "packet-flow-context",
            packetFlowContextValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "packet-flow-context",
     * using a String value.
     * @param packetFlowContextValue used during instantiation.
     */
    public void setPacketFlowContextValue(String packetFlowContextValue)
            throws JNCException {
        setPacketFlowContextValue(new YangEnumeration(packetFlowContextValue, new String[] {
             "disable",
             "enable",
        }));
    }

    /**
     * Unsets the value for child leaf "packet-flow-context".
     */
    public void unsetPacketFlowContextValue() throws JNCException {
        delete("packet-flow-context");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "packet-flow-context" leaf will not have a value.
     */
    public void addPacketFlowContext() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "packet-flow-context",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "packet-flow-context" with operation "replace".
     */
    public void markPacketFlowContextReplace() throws JNCException {
        markLeafReplace("packetFlowContext");
    }

    /**
     * Marks the leaf "packet-flow-context" with operation "merge".
     */
    public void markPacketFlowContextMerge() throws JNCException {
        markLeafMerge("packetFlowContext");
    }

    /**
     * Marks the leaf "packet-flow-context" with operation "create".
     */
    public void markPacketFlowContextCreate() throws JNCException {
        markLeafCreate("packetFlowContext");
    }

    /**
     * Marks the leaf "packet-flow-context" with operation "delete".
     */
    public void markPacketFlowContextDelete() throws JNCException {
        markLeafDelete("packetFlowContext");
    }

    /* Access methods for optional leaf child: "pfc-flow-control". */

    /**
     * Gets the value for child leaf "pfc-flow-control".
     * @return The value of the leaf.
     */
    public YangEnumeration getPfcFlowControlValue() throws JNCException {
        YangEnumeration pfcFlowControl = (YangEnumeration)getValue("pfc-flow-control");
        if (pfcFlowControl == null) {
            pfcFlowControl = new YangEnumeration("disable", new String[] {  // default
                "disable",
                "enable",
            });
        }
        return pfcFlowControl;
    }

    /**
     * Sets the value for child leaf "pfc-flow-control",
     * using instance of generated typedef class.
     * @param pfcFlowControlValue The value to set.
     * @param pfcFlowControlValue used during instantiation.
     */
    public void setPfcFlowControlValue(YangEnumeration pfcFlowControlValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-flow-control",
            pfcFlowControlValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pfc-flow-control",
     * using a String value.
     * @param pfcFlowControlValue used during instantiation.
     */
    public void setPfcFlowControlValue(String pfcFlowControlValue)
            throws JNCException {
        setPfcFlowControlValue(new YangEnumeration(pfcFlowControlValue, new String[] {
             "disable",
             "enable",
        }));
    }

    /**
     * Unsets the value for child leaf "pfc-flow-control".
     */
    public void unsetPfcFlowControlValue() throws JNCException {
        delete("pfc-flow-control");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pfc-flow-control" leaf will not have a value.
     */
    public void addPfcFlowControl() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-flow-control",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pfc-flow-control" with operation "replace".
     */
    public void markPfcFlowControlReplace() throws JNCException {
        markLeafReplace("pfcFlowControl");
    }

    /**
     * Marks the leaf "pfc-flow-control" with operation "merge".
     */
    public void markPfcFlowControlMerge() throws JNCException {
        markLeafMerge("pfcFlowControl");
    }

    /**
     * Marks the leaf "pfc-flow-control" with operation "create".
     */
    public void markPfcFlowControlCreate() throws JNCException {
        markLeafCreate("pfcFlowControl");
    }

    /**
     * Marks the leaf "pfc-flow-control" with operation "delete".
     */
    public void markPfcFlowControlDelete() throws JNCException {
        markLeafDelete("pfcFlowControl");
    }

    /* Access methods for optional leaf child: "pfc-flow-control-tf-timer". */

    /**
     * Gets the value for child leaf "pfc-flow-control-tf-timer".
     * @return The value of the leaf.
     */
    public YangUInt16 getPfcFlowControlTfTimerValue() throws JNCException {
        YangUInt16 pfcFlowControlTfTimer = (YangUInt16)getValue("pfc-flow-control-tf-timer");
        if (pfcFlowControlTfTimer == null) {
            pfcFlowControlTfTimer = new YangUInt16("5");  // default
        }
        return pfcFlowControlTfTimer;
    }

    /**
     * Sets the value for child leaf "pfc-flow-control-tf-timer",
     * using instance of generated typedef class.
     * @param pfcFlowControlTfTimerValue The value to set.
     * @param pfcFlowControlTfTimerValue used during instantiation.
     */
    public void setPfcFlowControlTfTimerValue(YangUInt16 pfcFlowControlTfTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-flow-control-tf-timer",
            pfcFlowControlTfTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pfc-flow-control-tf-timer",
     * using Java primitive values.
     * @param pfcFlowControlTfTimerValue used during instantiation.
     */
    public void setPfcFlowControlTfTimerValue(int pfcFlowControlTfTimerValue)
            throws JNCException {
        setPfcFlowControlTfTimerValue(new YangUInt16(pfcFlowControlTfTimerValue));
    }

    /**
     * Sets the value for child leaf "pfc-flow-control-tf-timer",
     * using a String value.
     * @param pfcFlowControlTfTimerValue used during instantiation.
     */
    public void setPfcFlowControlTfTimerValue(String pfcFlowControlTfTimerValue)
            throws JNCException {
        setPfcFlowControlTfTimerValue(new YangUInt16(pfcFlowControlTfTimerValue));
    }

    /**
     * Unsets the value for child leaf "pfc-flow-control-tf-timer".
     */
    public void unsetPfcFlowControlTfTimerValue() throws JNCException {
        delete("pfc-flow-control-tf-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pfc-flow-control-tf-timer" leaf will not have a value.
     */
    public void addPfcFlowControlTfTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pfc-flow-control-tf-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pfc-flow-control-tf-timer" with operation "replace".
     */
    public void markPfcFlowControlTfTimerReplace() throws JNCException {
        markLeafReplace("pfcFlowControlTfTimer");
    }

    /**
     * Marks the leaf "pfc-flow-control-tf-timer" with operation "merge".
     */
    public void markPfcFlowControlTfTimerMerge() throws JNCException {
        markLeafMerge("pfcFlowControlTfTimer");
    }

    /**
     * Marks the leaf "pfc-flow-control-tf-timer" with operation "create".
     */
    public void markPfcFlowControlTfTimerCreate() throws JNCException {
        markLeafCreate("pfcFlowControlTfTimer");
    }

    /**
     * Marks the leaf "pfc-flow-control-tf-timer" with operation "delete".
     */
    public void markPfcFlowControlTfTimerDelete() throws JNCException {
        markLeafDelete("pfcFlowControlTfTimer");
    }

    /* Access methods for optional leaf child: "average-pfcs-per-mobile". */

    /**
     * Gets the value for child leaf "average-pfcs-per-mobile".
     * @return The value of the leaf.
     */
    public YangUInt8 getAveragePfcsPerMobileValue() throws JNCException {
        YangUInt8 averagePfcsPerMobile = (YangUInt8)getValue("average-pfcs-per-mobile");
        if (averagePfcsPerMobile == null) {
            averagePfcsPerMobile = new YangUInt8("10");  // default
        }
        return averagePfcsPerMobile;
    }

    /**
     * Sets the value for child leaf "average-pfcs-per-mobile",
     * using instance of generated typedef class.
     * @param averagePfcsPerMobileValue The value to set.
     * @param averagePfcsPerMobileValue used during instantiation.
     */
    public void setAveragePfcsPerMobileValue(YangUInt8 averagePfcsPerMobileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "average-pfcs-per-mobile",
            averagePfcsPerMobileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "average-pfcs-per-mobile",
     * using Java primitive values.
     * @param averagePfcsPerMobileValue used during instantiation.
     */
    public void setAveragePfcsPerMobileValue(short averagePfcsPerMobileValue)
            throws JNCException {
        setAveragePfcsPerMobileValue(new YangUInt8(averagePfcsPerMobileValue));
    }

    /**
     * Sets the value for child leaf "average-pfcs-per-mobile",
     * using a String value.
     * @param averagePfcsPerMobileValue used during instantiation.
     */
    public void setAveragePfcsPerMobileValue(String averagePfcsPerMobileValue)
            throws JNCException {
        setAveragePfcsPerMobileValue(new YangUInt8(averagePfcsPerMobileValue));
    }

    /**
     * Unsets the value for child leaf "average-pfcs-per-mobile".
     */
    public void unsetAveragePfcsPerMobileValue() throws JNCException {
        delete("average-pfcs-per-mobile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "average-pfcs-per-mobile" leaf will not have a value.
     */
    public void addAveragePfcsPerMobile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "average-pfcs-per-mobile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "average-pfcs-per-mobile" with operation "replace".
     */
    public void markAveragePfcsPerMobileReplace() throws JNCException {
        markLeafReplace("averagePfcsPerMobile");
    }

    /**
     * Marks the leaf "average-pfcs-per-mobile" with operation "merge".
     */
    public void markAveragePfcsPerMobileMerge() throws JNCException {
        markLeafMerge("averagePfcsPerMobile");
    }

    /**
     * Marks the leaf "average-pfcs-per-mobile" with operation "create".
     */
    public void markAveragePfcsPerMobileCreate() throws JNCException {
        markLeafCreate("averagePfcsPerMobile");
    }

    /**
     * Marks the leaf "average-pfcs-per-mobile" with operation "delete".
     */
    public void markAveragePfcsPerMobileDelete() throws JNCException {
        markLeafDelete("averagePfcsPerMobile");
    }

    /* Access methods for optional leaf child: "t7-timer". */

    /**
     * Gets the value for child leaf "t7-timer".
     * @return The value of the leaf.
     */
    public YangString getT7TimerValue() throws JNCException {
        YangString t7Timer = (YangString)getValue("t7-timer");
        if (t7Timer == null) {
            t7Timer = new YangString("5");  // default
        }
        return t7Timer;
    }

    /**
     * Sets the value for child leaf "t7-timer",
     * using instance of generated typedef class.
     * @param t7TimerValue The value to set.
     * @param t7TimerValue used during instantiation.
     */
    public void setT7TimerValue(YangString t7TimerValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t7-timer",
            t7TimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "t7-timer",
     * using a String value.
     * @param t7TimerValue used during instantiation.
     */
    public void setT7TimerValue(String t7TimerValue) throws JNCException {
        setT7TimerValue(new YangString(t7TimerValue));
    }

    /**
     * Unsets the value for child leaf "t7-timer".
     */
    public void unsetT7TimerValue() throws JNCException {
        delete("t7-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "t7-timer" leaf will not have a value.
     */
    public void addT7Timer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t7-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "t7-timer" with operation "replace".
     */
    public void markT7TimerReplace() throws JNCException {
        markLeafReplace("t7Timer");
    }

    /**
     * Marks the leaf "t7-timer" with operation "merge".
     */
    public void markT7TimerMerge() throws JNCException {
        markLeafMerge("t7Timer");
    }

    /**
     * Marks the leaf "t7-timer" with operation "create".
     */
    public void markT7TimerCreate() throws JNCException {
        markLeafCreate("t7Timer");
    }

    /**
     * Marks the leaf "t7-timer" with operation "delete".
     */
    public void markT7TimerDelete() throws JNCException {
        markLeafDelete("t7Timer");
    }

    /* Access methods for optional leaf child: "t7-retries". */

    /**
     * Gets the value for child leaf "t7-retries".
     * @return The value of the leaf.
     */
    public YangUInt32 getT7RetriesValue() throws JNCException {
        YangUInt32 t7Retries = (YangUInt32)getValue("t7-retries");
        if (t7Retries == null) {
            t7Retries = new YangUInt32("3");  // default
        }
        return t7Retries;
    }

    /**
     * Sets the value for child leaf "t7-retries",
     * using instance of generated typedef class.
     * @param t7RetriesValue The value to set.
     * @param t7RetriesValue used during instantiation.
     */
    public void setT7RetriesValue(YangUInt32 t7RetriesValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t7-retries",
            t7RetriesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "t7-retries",
     * using Java primitive values.
     * @param t7RetriesValue used during instantiation.
     */
    public void setT7RetriesValue(long t7RetriesValue) throws JNCException {
        setT7RetriesValue(new YangUInt32(t7RetriesValue));
    }

    /**
     * Sets the value for child leaf "t7-retries",
     * using a String value.
     * @param t7RetriesValue used during instantiation.
     */
    public void setT7RetriesValue(String t7RetriesValue) throws JNCException {
        setT7RetriesValue(new YangUInt32(t7RetriesValue));
    }

    /**
     * Unsets the value for child leaf "t7-retries".
     */
    public void unsetT7RetriesValue() throws JNCException {
        delete("t7-retries");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "t7-retries" leaf will not have a value.
     */
    public void addT7Retries() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t7-retries",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "t7-retries" with operation "replace".
     */
    public void markT7RetriesReplace() throws JNCException {
        markLeafReplace("t7Retries");
    }

    /**
     * Marks the leaf "t7-retries" with operation "merge".
     */
    public void markT7RetriesMerge() throws JNCException {
        markLeafMerge("t7Retries");
    }

    /**
     * Marks the leaf "t7-retries" with operation "create".
     */
    public void markT7RetriesCreate() throws JNCException {
        markLeafCreate("t7Retries");
    }

    /**
     * Marks the leaf "t7-retries" with operation "delete".
     */
    public void markT7RetriesDelete() throws JNCException {
        markLeafDelete("t7Retries");
    }

    /* Access methods for optional leaf child: "packet-flow-timer". */

    /**
     * Gets the value for child leaf "packet-flow-timer".
     * @return The value of the leaf.
     */
    public YangString getPacketFlowTimerValue() throws JNCException {
        YangString packetFlowTimer = (YangString)getValue("packet-flow-timer");
        if (packetFlowTimer == null) {
            packetFlowTimer = new YangString("40");  // default
        }
        return packetFlowTimer;
    }

    /**
     * Sets the value for child leaf "packet-flow-timer",
     * using instance of generated typedef class.
     * @param packetFlowTimerValue The value to set.
     * @param packetFlowTimerValue used during instantiation.
     */
    public void setPacketFlowTimerValue(YangString packetFlowTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "packet-flow-timer",
            packetFlowTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "packet-flow-timer",
     * using a String value.
     * @param packetFlowTimerValue used during instantiation.
     */
    public void setPacketFlowTimerValue(String packetFlowTimerValue)
            throws JNCException {
        setPacketFlowTimerValue(new YangString(packetFlowTimerValue));
    }

    /**
     * Unsets the value for child leaf "packet-flow-timer".
     */
    public void unsetPacketFlowTimerValue() throws JNCException {
        delete("packet-flow-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "packet-flow-timer" leaf will not have a value.
     */
    public void addPacketFlowTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "packet-flow-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "packet-flow-timer" with operation "replace".
     */
    public void markPacketFlowTimerReplace() throws JNCException {
        markLeafReplace("packetFlowTimer");
    }

    /**
     * Marks the leaf "packet-flow-timer" with operation "merge".
     */
    public void markPacketFlowTimerMerge() throws JNCException {
        markLeafMerge("packetFlowTimer");
    }

    /**
     * Marks the leaf "packet-flow-timer" with operation "create".
     */
    public void markPacketFlowTimerCreate() throws JNCException {
        markLeafCreate("packetFlowTimer");
    }

    /**
     * Marks the leaf "packet-flow-timer" with operation "delete".
     */
    public void markPacketFlowTimerDelete() throws JNCException {
        markLeafDelete("packetFlowTimer");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
