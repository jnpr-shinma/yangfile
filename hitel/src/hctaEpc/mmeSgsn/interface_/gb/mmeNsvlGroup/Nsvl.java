/* 
 * @(#)Nsvl.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gb.mmeNsvlGroup;
import .ietfInetTypes.Ipv4Address;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt16;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gb/mmeNsvlGroup/nsvl"
 * <p>
 * See line 494 in
 * gtlConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Nsvl extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Nsvl object.
     */
    public Nsvl() {
        super(Epc.NAMESPACE, "nsvl");
    }

    /**
     * Constructor for an initialized Nsvl object,
     * 
     * @param nsvlIdValue Key argument of child.
     */
    public Nsvl(YangUInt16 nsvlIdValue) throws JNCException {
        super(Epc.NAMESPACE, "nsvl");
        Leaf nsvlId = new Leaf(Epc.NAMESPACE, "nsvl-id");
        nsvlId.setValue(nsvlIdValue);
        insertChild(nsvlId, childrenNames());
    }

    /**
     * Constructor for an initialized Nsvl object,
     * with String keys.
     * @param nsvlIdValue Key argument of child.
     */
    public Nsvl(String nsvlIdValue) throws JNCException {
        super(Epc.NAMESPACE, "nsvl");
        Leaf nsvlId = new Leaf(Epc.NAMESPACE, "nsvl-id");
        nsvlId.setValue(new YangUInt16(nsvlIdValue));
        insertChild(nsvlId, childrenNames());
    }

    /**
     * Constructor for an initialized Nsvl object,
     * with keys of built in Java types.
     * @param nsvlIdValue Key argument of child.
     */
    public Nsvl(int nsvlIdValue) throws JNCException {
        super(Epc.NAMESPACE, "nsvl");
        Leaf nsvlId = new Leaf(Epc.NAMESPACE, "nsvl-id");
        nsvlId.setValue(new YangUInt16(nsvlIdValue));
        insertChild(nsvlId, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Nsvl clone() {
        Nsvl copy;
        try {
            copy = new Nsvl(getNsvlIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Nsvl)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Nsvl cloneShallow() {
        Nsvl copy;
        try {
            copy = new Nsvl(getNsvlIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Nsvl)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "nsvl-id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "nsvl-id",
            "unit-id",
            "routing-instance",
            "local-ip-address",
            "local-port",
        };
    }

    /* Access methods for leaf child: "nsvl-id". */

    /**
     * Gets the value for child leaf "nsvl-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getNsvlIdValue() throws JNCException {
        return (YangUInt16)getValue("nsvl-id");
    }

    /**
     * Sets the value for child leaf "nsvl-id",
     * using instance of generated typedef class.
     * @param nsvlIdValue The value to set.
     * @param nsvlIdValue used during instantiation.
     */
    public void setNsvlIdValue(YangUInt16 nsvlIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl-id",
            nsvlIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nsvl-id",
     * using Java primitive values.
     * @param nsvlIdValue used during instantiation.
     */
    public void setNsvlIdValue(int nsvlIdValue) throws JNCException {
        setNsvlIdValue(new YangUInt16(nsvlIdValue));
    }

    /**
     * Sets the value for child leaf "nsvl-id",
     * using a String value.
     * @param nsvlIdValue used during instantiation.
     */
    public void setNsvlIdValue(String nsvlIdValue) throws JNCException {
        setNsvlIdValue(new YangUInt16(nsvlIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nsvl-id" leaf will not have a value.
     */
    public void addNsvlId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nsvl-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "unit-id". */

    /**
     * Gets the value for child leaf "unit-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getUnitIdValue() throws JNCException {
        return (YangUInt16)getValue("unit-id");
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using instance of generated typedef class.
     * @param unitIdValue The value to set.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(YangUInt16 unitIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-id",
            unitIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using Java primitive values.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(int unitIdValue) throws JNCException {
        setUnitIdValue(new YangUInt16(unitIdValue));
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using a String value.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(String unitIdValue) throws JNCException {
        setUnitIdValue(new YangUInt16(unitIdValue));
    }

    /**
     * Unsets the value for child leaf "unit-id".
     */
    public void unsetUnitIdValue() throws JNCException {
        delete("unit-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-id" leaf will not have a value.
     */
    public void addUnitId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unit-id" with operation "replace".
     */
    public void markUnitIdReplace() throws JNCException {
        markLeafReplace("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "merge".
     */
    public void markUnitIdMerge() throws JNCException {
        markLeafMerge("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "create".
     */
    public void markUnitIdCreate() throws JNCException {
        markLeafCreate("unitId");
    }

    /**
     * Marks the leaf "unit-id" with operation "delete".
     */
    public void markUnitIdDelete() throws JNCException {
        markLeafDelete("unitId");
    }

    /* Access methods for optional leaf child: "routing-instance". */

    /**
     * Gets the value for child leaf "routing-instance".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstanceValue() throws JNCException {
        return (YangString)getValue("routing-instance");
    }

    /**
     * Sets the value for child leaf "routing-instance",
     * using instance of generated typedef class.
     * @param routingInstanceValue The value to set.
     * @param routingInstanceValue used during instantiation.
     */
    public void setRoutingInstanceValue(YangString routingInstanceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance",
            routingInstanceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance",
     * using a String value.
     * @param routingInstanceValue used during instantiation.
     */
    public void setRoutingInstanceValue(String routingInstanceValue)
            throws JNCException {
        setRoutingInstanceValue(new YangString(routingInstanceValue));
    }

    /**
     * Unsets the value for child leaf "routing-instance".
     */
    public void unsetRoutingInstanceValue() throws JNCException {
        delete("routing-instance");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance" leaf will not have a value.
     */
    public void addRoutingInstance() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance" with operation "replace".
     */
    public void markRoutingInstanceReplace() throws JNCException {
        markLeafReplace("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "merge".
     */
    public void markRoutingInstanceMerge() throws JNCException {
        markLeafMerge("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "create".
     */
    public void markRoutingInstanceCreate() throws JNCException {
        markLeafCreate("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "delete".
     */
    public void markRoutingInstanceDelete() throws JNCException {
        markLeafDelete("routingInstance");
    }

    /* Access methods for optional leaf child: "local-ip-address". */

    /**
     * Gets the value for child leaf "local-ip-address".
     * @return The value of the leaf.
     */
    public Ipv4Address getLocalIpAddressValue() throws JNCException {
        return (Ipv4Address)getValue("local-ip-address");
    }

    /**
     * Sets the value for child leaf "local-ip-address",
     * using a JNC type value.
     * @param localIpAddressValue The value to set.
     * @param localIpAddressValue used during instantiation.
     */
    public void setLocalIpAddressValue(Ipv4Address localIpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-ip-address",
            localIpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-ip-address",
     * using a String value.
     * @param localIpAddressValue used during instantiation.
     */
    public void setLocalIpAddressValue(String localIpAddressValue)
            throws JNCException {
        setLocalIpAddressValue(new Ipv4Address(localIpAddressValue));
    }

    /**
     * Unsets the value for child leaf "local-ip-address".
     */
    public void unsetLocalIpAddressValue() throws JNCException {
        delete("local-ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-ip-address" leaf will not have a value.
     */
    public void addLocalIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-ip-address" with operation "replace".
     */
    public void markLocalIpAddressReplace() throws JNCException {
        markLeafReplace("localIpAddress");
    }

    /**
     * Marks the leaf "local-ip-address" with operation "merge".
     */
    public void markLocalIpAddressMerge() throws JNCException {
        markLeafMerge("localIpAddress");
    }

    /**
     * Marks the leaf "local-ip-address" with operation "create".
     */
    public void markLocalIpAddressCreate() throws JNCException {
        markLeafCreate("localIpAddress");
    }

    /**
     * Marks the leaf "local-ip-address" with operation "delete".
     */
    public void markLocalIpAddressDelete() throws JNCException {
        markLeafDelete("localIpAddress");
    }

    /* Access methods for optional leaf child: "local-port". */

    /**
     * Gets the value for child leaf "local-port".
     * @return The value of the leaf.
     */
    public YangUInt16 getLocalPortValue() throws JNCException {
        return (YangUInt16)getValue("local-port");
    }

    /**
     * Sets the value for child leaf "local-port",
     * using instance of generated typedef class.
     * @param localPortValue The value to set.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(YangUInt16 localPortValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-port",
            localPortValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-port",
     * using Java primitive values.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(int localPortValue) throws JNCException {
        setLocalPortValue(new YangUInt16(localPortValue));
    }

    /**
     * Sets the value for child leaf "local-port",
     * using a String value.
     * @param localPortValue used during instantiation.
     */
    public void setLocalPortValue(String localPortValue) throws JNCException {
        setLocalPortValue(new YangUInt16(localPortValue));
    }

    /**
     * Unsets the value for child leaf "local-port".
     */
    public void unsetLocalPortValue() throws JNCException {
        delete("local-port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-port" leaf will not have a value.
     */
    public void addLocalPort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-port" with operation "replace".
     */
    public void markLocalPortReplace() throws JNCException {
        markLeafReplace("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "merge".
     */
    public void markLocalPortMerge() throws JNCException {
        markLeafMerge("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "create".
     */
    public void markLocalPortCreate() throws JNCException {
        markLeafCreate("localPort");
    }

    /**
     * Marks the leaf "local-port" with operation "delete".
     */
    public void markLocalPortDelete() throws JNCException {
        markLeafDelete("localPort");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
