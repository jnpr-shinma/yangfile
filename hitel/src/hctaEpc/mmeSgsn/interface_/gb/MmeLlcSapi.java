/* 
 * @(#)MmeLlcSapi.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gb;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangEnumeration;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gb/mme-llc-sapi"
 * <p>
 * See line 162 in
 * sdConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeLlcSapi extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeLlcSapi object.
     */
    public MmeLlcSapi() {
        super(Epc.NAMESPACE, "mme-llc-sapi");
    }

    /**
     * Constructor for an initialized MmeLlcSapi object,
     * 
     * @param serviceAccessPointIdentifierValue Key argument of child.
     */
    public MmeLlcSapi(YangEnumeration serviceAccessPointIdentifierValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-llc-sapi");
        Leaf serviceAccessPointIdentifier = new Leaf(Epc.NAMESPACE, "service-access-point-identifier");
        serviceAccessPointIdentifier.setValue(serviceAccessPointIdentifierValue);
        insertChild(serviceAccessPointIdentifier, childrenNames());
    }

    /**
     * Constructor for an initialized MmeLlcSapi object,
     * with String keys.
     * @param serviceAccessPointIdentifierValue Key argument of child.
     */
    public MmeLlcSapi(String serviceAccessPointIdentifierValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-llc-sapi");
        Leaf serviceAccessPointIdentifier = new Leaf(Epc.NAMESPACE, "service-access-point-identifier");
        serviceAccessPointIdentifier.setValue(new YangEnumeration(serviceAccessPointIdentifierValue, new String [] {"1", "3", "5", "7", "9", "11", }));
        insertChild(serviceAccessPointIdentifier, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeLlcSapi clone() {
        MmeLlcSapi copy;
        try {
            copy = new MmeLlcSapi(getServiceAccessPointIdentifierValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeLlcSapi)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeLlcSapi cloneShallow() {
        MmeLlcSapi copy;
        try {
            copy = new MmeLlcSapi(getServiceAccessPointIdentifierValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeLlcSapi)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "service-access-point-identifier",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "service-access-point-identifier",
            "t200-retransmit-timer",
            "n200-max-retransmits",
            "n201-max-uinfo-field-length",
            "n201-max-iinfo-field-length",
            "k-window-size-downlink",
            "k-window-size-uplink",
            "pdu-unconfirmed-info-lifetime",
        };
    }

    /* Access methods for leaf child: "service-access-point-identifier". */

    /**
     * Gets the value for child leaf "service-access-point-identifier".
     * @return The value of the leaf.
     */
    public YangEnumeration getServiceAccessPointIdentifierValue()
            throws JNCException {
        return (YangEnumeration)getValue("service-access-point-identifier");
    }

    /**
     * Sets the value for child leaf "service-access-point-identifier",
     * using instance of generated typedef class.
     * @param serviceAccessPointIdentifierValue The value to set.
     * @param serviceAccessPointIdentifierValue used during instantiation.
     */
    public void setServiceAccessPointIdentifierValue(YangEnumeration serviceAccessPointIdentifierValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service-access-point-identifier",
            serviceAccessPointIdentifierValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service-access-point-identifier",
     * using a String value.
     * @param serviceAccessPointIdentifierValue used during instantiation.
     */
    public void setServiceAccessPointIdentifierValue(String serviceAccessPointIdentifierValue)
            throws JNCException {
        setServiceAccessPointIdentifierValue(new YangEnumeration(serviceAccessPointIdentifierValue, new String[] {
             "1",
             "3",
             "5",
             "7",
             "9",
             "11",
        }));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service-access-point-identifier" leaf will not have a value.
     */
    public void addServiceAccessPointIdentifier() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service-access-point-identifier",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "t200-retransmit-timer". */

    /**
     * Gets the value for child leaf "t200-retransmit-timer".
     * @return The value of the leaf.
     */
    public YangUInt16 getT200RetransmitTimerValue() throws JNCException {
        YangUInt16 t200RetransmitTimer = (YangUInt16)getValue("t200-retransmit-timer");
        if (t200RetransmitTimer == null) {
            t200RetransmitTimer = new YangUInt16("50");  // default
        }
        return t200RetransmitTimer;
    }

    /**
     * Sets the value for child leaf "t200-retransmit-timer",
     * using instance of generated typedef class.
     * @param t200RetransmitTimerValue The value to set.
     * @param t200RetransmitTimerValue used during instantiation.
     */
    public void setT200RetransmitTimerValue(YangUInt16 t200RetransmitTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t200-retransmit-timer",
            t200RetransmitTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "t200-retransmit-timer",
     * using Java primitive values.
     * @param t200RetransmitTimerValue used during instantiation.
     */
    public void setT200RetransmitTimerValue(int t200RetransmitTimerValue)
            throws JNCException {
        setT200RetransmitTimerValue(new YangUInt16(t200RetransmitTimerValue));
    }

    /**
     * Sets the value for child leaf "t200-retransmit-timer",
     * using a String value.
     * @param t200RetransmitTimerValue used during instantiation.
     */
    public void setT200RetransmitTimerValue(String t200RetransmitTimerValue)
            throws JNCException {
        setT200RetransmitTimerValue(new YangUInt16(t200RetransmitTimerValue));
    }

    /**
     * Unsets the value for child leaf "t200-retransmit-timer".
     */
    public void unsetT200RetransmitTimerValue() throws JNCException {
        delete("t200-retransmit-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "t200-retransmit-timer" leaf will not have a value.
     */
    public void addT200RetransmitTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t200-retransmit-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "t200-retransmit-timer" with operation "replace".
     */
    public void markT200RetransmitTimerReplace() throws JNCException {
        markLeafReplace("t200RetransmitTimer");
    }

    /**
     * Marks the leaf "t200-retransmit-timer" with operation "merge".
     */
    public void markT200RetransmitTimerMerge() throws JNCException {
        markLeafMerge("t200RetransmitTimer");
    }

    /**
     * Marks the leaf "t200-retransmit-timer" with operation "create".
     */
    public void markT200RetransmitTimerCreate() throws JNCException {
        markLeafCreate("t200RetransmitTimer");
    }

    /**
     * Marks the leaf "t200-retransmit-timer" with operation "delete".
     */
    public void markT200RetransmitTimerDelete() throws JNCException {
        markLeafDelete("t200RetransmitTimer");
    }

    /* Access methods for optional leaf child: "n200-max-retransmits". */

    /**
     * Gets the value for child leaf "n200-max-retransmits".
     * @return The value of the leaf.
     */
    public YangUInt8 getN200MaxRetransmitsValue() throws JNCException {
        YangUInt8 n200MaxRetransmits = (YangUInt8)getValue("n200-max-retransmits");
        if (n200MaxRetransmits == null) {
            n200MaxRetransmits = new YangUInt8("3");  // default
        }
        return n200MaxRetransmits;
    }

    /**
     * Sets the value for child leaf "n200-max-retransmits",
     * using instance of generated typedef class.
     * @param n200MaxRetransmitsValue The value to set.
     * @param n200MaxRetransmitsValue used during instantiation.
     */
    public void setN200MaxRetransmitsValue(YangUInt8 n200MaxRetransmitsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n200-max-retransmits",
            n200MaxRetransmitsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "n200-max-retransmits",
     * using Java primitive values.
     * @param n200MaxRetransmitsValue used during instantiation.
     */
    public void setN200MaxRetransmitsValue(short n200MaxRetransmitsValue)
            throws JNCException {
        setN200MaxRetransmitsValue(new YangUInt8(n200MaxRetransmitsValue));
    }

    /**
     * Sets the value for child leaf "n200-max-retransmits",
     * using a String value.
     * @param n200MaxRetransmitsValue used during instantiation.
     */
    public void setN200MaxRetransmitsValue(String n200MaxRetransmitsValue)
            throws JNCException {
        setN200MaxRetransmitsValue(new YangUInt8(n200MaxRetransmitsValue));
    }

    /**
     * Unsets the value for child leaf "n200-max-retransmits".
     */
    public void unsetN200MaxRetransmitsValue() throws JNCException {
        delete("n200-max-retransmits");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "n200-max-retransmits" leaf will not have a value.
     */
    public void addN200MaxRetransmits() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n200-max-retransmits",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "n200-max-retransmits" with operation "replace".
     */
    public void markN200MaxRetransmitsReplace() throws JNCException {
        markLeafReplace("n200MaxRetransmits");
    }

    /**
     * Marks the leaf "n200-max-retransmits" with operation "merge".
     */
    public void markN200MaxRetransmitsMerge() throws JNCException {
        markLeafMerge("n200MaxRetransmits");
    }

    /**
     * Marks the leaf "n200-max-retransmits" with operation "create".
     */
    public void markN200MaxRetransmitsCreate() throws JNCException {
        markLeafCreate("n200MaxRetransmits");
    }

    /**
     * Marks the leaf "n200-max-retransmits" with operation "delete".
     */
    public void markN200MaxRetransmitsDelete() throws JNCException {
        markLeafDelete("n200MaxRetransmits");
    }

    /* Access methods for optional leaf child: "n201-max-uinfo-field-length". */

    /**
     * Gets the value for child leaf "n201-max-uinfo-field-length".
     * @return The value of the leaf.
     */
    public YangUInt16 getN201MaxUinfoFieldLengthValue() throws JNCException {
        YangUInt16 n201MaxUinfoFieldLength = (YangUInt16)getValue("n201-max-uinfo-field-length");
        if (n201MaxUinfoFieldLength == null) {
            n201MaxUinfoFieldLength = new YangUInt16("400");  // default
        }
        return n201MaxUinfoFieldLength;
    }

    /**
     * Sets the value for child leaf "n201-max-uinfo-field-length",
     * using instance of generated typedef class.
     * @param n201MaxUinfoFieldLengthValue The value to set.
     * @param n201MaxUinfoFieldLengthValue used during instantiation.
     */
    public void setN201MaxUinfoFieldLengthValue(YangUInt16 n201MaxUinfoFieldLengthValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n201-max-uinfo-field-length",
            n201MaxUinfoFieldLengthValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "n201-max-uinfo-field-length",
     * using Java primitive values.
     * @param n201MaxUinfoFieldLengthValue used during instantiation.
     */
    public void setN201MaxUinfoFieldLengthValue(int n201MaxUinfoFieldLengthValue)
            throws JNCException {
        setN201MaxUinfoFieldLengthValue(new YangUInt16(n201MaxUinfoFieldLengthValue));
    }

    /**
     * Sets the value for child leaf "n201-max-uinfo-field-length",
     * using a String value.
     * @param n201MaxUinfoFieldLengthValue used during instantiation.
     */
    public void setN201MaxUinfoFieldLengthValue(String n201MaxUinfoFieldLengthValue)
            throws JNCException {
        setN201MaxUinfoFieldLengthValue(new YangUInt16(n201MaxUinfoFieldLengthValue));
    }

    /**
     * Unsets the value for child leaf "n201-max-uinfo-field-length".
     */
    public void unsetN201MaxUinfoFieldLengthValue() throws JNCException {
        delete("n201-max-uinfo-field-length");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "n201-max-uinfo-field-length" leaf will not have a value.
     */
    public void addN201MaxUinfoFieldLength() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n201-max-uinfo-field-length",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "n201-max-uinfo-field-length" with operation "replace".
     */
    public void markN201MaxUinfoFieldLengthReplace() throws JNCException {
        markLeafReplace("n201MaxUinfoFieldLength");
    }

    /**
     * Marks the leaf "n201-max-uinfo-field-length" with operation "merge".
     */
    public void markN201MaxUinfoFieldLengthMerge() throws JNCException {
        markLeafMerge("n201MaxUinfoFieldLength");
    }

    /**
     * Marks the leaf "n201-max-uinfo-field-length" with operation "create".
     */
    public void markN201MaxUinfoFieldLengthCreate() throws JNCException {
        markLeafCreate("n201MaxUinfoFieldLength");
    }

    /**
     * Marks the leaf "n201-max-uinfo-field-length" with operation "delete".
     */
    public void markN201MaxUinfoFieldLengthDelete() throws JNCException {
        markLeafDelete("n201MaxUinfoFieldLength");
    }

    /* Access methods for optional leaf child: "n201-max-iinfo-field-length". */

    /**
     * Gets the value for child leaf "n201-max-iinfo-field-length".
     * @return The value of the leaf.
     */
    public YangUInt16 getN201MaxIinfoFieldLengthValue() throws JNCException {
        YangUInt16 n201MaxIinfoFieldLength = (YangUInt16)getValue("n201-max-iinfo-field-length");
        if (n201MaxIinfoFieldLength == null) {
            n201MaxIinfoFieldLength = new YangUInt16("1503");  // default
        }
        return n201MaxIinfoFieldLength;
    }

    /**
     * Sets the value for child leaf "n201-max-iinfo-field-length",
     * using instance of generated typedef class.
     * @param n201MaxIinfoFieldLengthValue The value to set.
     * @param n201MaxIinfoFieldLengthValue used during instantiation.
     */
    public void setN201MaxIinfoFieldLengthValue(YangUInt16 n201MaxIinfoFieldLengthValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n201-max-iinfo-field-length",
            n201MaxIinfoFieldLengthValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "n201-max-iinfo-field-length",
     * using Java primitive values.
     * @param n201MaxIinfoFieldLengthValue used during instantiation.
     */
    public void setN201MaxIinfoFieldLengthValue(int n201MaxIinfoFieldLengthValue)
            throws JNCException {
        setN201MaxIinfoFieldLengthValue(new YangUInt16(n201MaxIinfoFieldLengthValue));
    }

    /**
     * Sets the value for child leaf "n201-max-iinfo-field-length",
     * using a String value.
     * @param n201MaxIinfoFieldLengthValue used during instantiation.
     */
    public void setN201MaxIinfoFieldLengthValue(String n201MaxIinfoFieldLengthValue)
            throws JNCException {
        setN201MaxIinfoFieldLengthValue(new YangUInt16(n201MaxIinfoFieldLengthValue));
    }

    /**
     * Unsets the value for child leaf "n201-max-iinfo-field-length".
     */
    public void unsetN201MaxIinfoFieldLengthValue() throws JNCException {
        delete("n201-max-iinfo-field-length");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "n201-max-iinfo-field-length" leaf will not have a value.
     */
    public void addN201MaxIinfoFieldLength() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n201-max-iinfo-field-length",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "n201-max-iinfo-field-length" with operation "replace".
     */
    public void markN201MaxIinfoFieldLengthReplace() throws JNCException {
        markLeafReplace("n201MaxIinfoFieldLength");
    }

    /**
     * Marks the leaf "n201-max-iinfo-field-length" with operation "merge".
     */
    public void markN201MaxIinfoFieldLengthMerge() throws JNCException {
        markLeafMerge("n201MaxIinfoFieldLength");
    }

    /**
     * Marks the leaf "n201-max-iinfo-field-length" with operation "create".
     */
    public void markN201MaxIinfoFieldLengthCreate() throws JNCException {
        markLeafCreate("n201MaxIinfoFieldLength");
    }

    /**
     * Marks the leaf "n201-max-iinfo-field-length" with operation "delete".
     */
    public void markN201MaxIinfoFieldLengthDelete() throws JNCException {
        markLeafDelete("n201MaxIinfoFieldLength");
    }

    /* Access methods for optional leaf child: "k-window-size-downlink". */

    /**
     * Gets the value for child leaf "k-window-size-downlink".
     * @return The value of the leaf.
     */
    public YangUInt8 getKWindowSizeDownlinkValue() throws JNCException {
        YangUInt8 kWindowSizeDownlink = (YangUInt8)getValue("k-window-size-downlink");
        if (kWindowSizeDownlink == null) {
            kWindowSizeDownlink = new YangUInt8("16");  // default
        }
        return kWindowSizeDownlink;
    }

    /**
     * Sets the value for child leaf "k-window-size-downlink",
     * using instance of generated typedef class.
     * @param kWindowSizeDownlinkValue The value to set.
     * @param kWindowSizeDownlinkValue used during instantiation.
     */
    public void setKWindowSizeDownlinkValue(YangUInt8 kWindowSizeDownlinkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "k-window-size-downlink",
            kWindowSizeDownlinkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "k-window-size-downlink",
     * using Java primitive values.
     * @param kWindowSizeDownlinkValue used during instantiation.
     */
    public void setKWindowSizeDownlinkValue(short kWindowSizeDownlinkValue)
            throws JNCException {
        setKWindowSizeDownlinkValue(new YangUInt8(kWindowSizeDownlinkValue));
    }

    /**
     * Sets the value for child leaf "k-window-size-downlink",
     * using a String value.
     * @param kWindowSizeDownlinkValue used during instantiation.
     */
    public void setKWindowSizeDownlinkValue(String kWindowSizeDownlinkValue)
            throws JNCException {
        setKWindowSizeDownlinkValue(new YangUInt8(kWindowSizeDownlinkValue));
    }

    /**
     * Unsets the value for child leaf "k-window-size-downlink".
     */
    public void unsetKWindowSizeDownlinkValue() throws JNCException {
        delete("k-window-size-downlink");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "k-window-size-downlink" leaf will not have a value.
     */
    public void addKWindowSizeDownlink() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "k-window-size-downlink",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "k-window-size-downlink" with operation "replace".
     */
    public void markKWindowSizeDownlinkReplace() throws JNCException {
        markLeafReplace("kWindowSizeDownlink");
    }

    /**
     * Marks the leaf "k-window-size-downlink" with operation "merge".
     */
    public void markKWindowSizeDownlinkMerge() throws JNCException {
        markLeafMerge("kWindowSizeDownlink");
    }

    /**
     * Marks the leaf "k-window-size-downlink" with operation "create".
     */
    public void markKWindowSizeDownlinkCreate() throws JNCException {
        markLeafCreate("kWindowSizeDownlink");
    }

    /**
     * Marks the leaf "k-window-size-downlink" with operation "delete".
     */
    public void markKWindowSizeDownlinkDelete() throws JNCException {
        markLeafDelete("kWindowSizeDownlink");
    }

    /* Access methods for optional leaf child: "k-window-size-uplink". */

    /**
     * Gets the value for child leaf "k-window-size-uplink".
     * @return The value of the leaf.
     */
    public YangUInt8 getKWindowSizeUplinkValue() throws JNCException {
        YangUInt8 kWindowSizeUplink = (YangUInt8)getValue("k-window-size-uplink");
        if (kWindowSizeUplink == null) {
            kWindowSizeUplink = new YangUInt8("16");  // default
        }
        return kWindowSizeUplink;
    }

    /**
     * Sets the value for child leaf "k-window-size-uplink",
     * using instance of generated typedef class.
     * @param kWindowSizeUplinkValue The value to set.
     * @param kWindowSizeUplinkValue used during instantiation.
     */
    public void setKWindowSizeUplinkValue(YangUInt8 kWindowSizeUplinkValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "k-window-size-uplink",
            kWindowSizeUplinkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "k-window-size-uplink",
     * using Java primitive values.
     * @param kWindowSizeUplinkValue used during instantiation.
     */
    public void setKWindowSizeUplinkValue(short kWindowSizeUplinkValue)
            throws JNCException {
        setKWindowSizeUplinkValue(new YangUInt8(kWindowSizeUplinkValue));
    }

    /**
     * Sets the value for child leaf "k-window-size-uplink",
     * using a String value.
     * @param kWindowSizeUplinkValue used during instantiation.
     */
    public void setKWindowSizeUplinkValue(String kWindowSizeUplinkValue)
            throws JNCException {
        setKWindowSizeUplinkValue(new YangUInt8(kWindowSizeUplinkValue));
    }

    /**
     * Unsets the value for child leaf "k-window-size-uplink".
     */
    public void unsetKWindowSizeUplinkValue() throws JNCException {
        delete("k-window-size-uplink");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "k-window-size-uplink" leaf will not have a value.
     */
    public void addKWindowSizeUplink() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "k-window-size-uplink",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "k-window-size-uplink" with operation "replace".
     */
    public void markKWindowSizeUplinkReplace() throws JNCException {
        markLeafReplace("kWindowSizeUplink");
    }

    /**
     * Marks the leaf "k-window-size-uplink" with operation "merge".
     */
    public void markKWindowSizeUplinkMerge() throws JNCException {
        markLeafMerge("kWindowSizeUplink");
    }

    /**
     * Marks the leaf "k-window-size-uplink" with operation "create".
     */
    public void markKWindowSizeUplinkCreate() throws JNCException {
        markLeafCreate("kWindowSizeUplink");
    }

    /**
     * Marks the leaf "k-window-size-uplink" with operation "delete".
     */
    public void markKWindowSizeUplinkDelete() throws JNCException {
        markLeafDelete("kWindowSizeUplink");
    }

    /* Access methods for optional leaf child: "pdu-unconfirmed-info-lifetime". */

    /**
     * Gets the value for child leaf "pdu-unconfirmed-info-lifetime".
     * @return The value of the leaf.
     */
    public YangUInt16 getPduUnconfirmedInfoLifetimeValue() throws JNCException {
        YangUInt16 pduUnconfirmedInfoLifetime = (YangUInt16)getValue("pdu-unconfirmed-info-lifetime");
        if (pduUnconfirmedInfoLifetime == null) {
            pduUnconfirmedInfoLifetime = new YangUInt16("100");  // default
        }
        return pduUnconfirmedInfoLifetime;
    }

    /**
     * Sets the value for child leaf "pdu-unconfirmed-info-lifetime",
     * using instance of generated typedef class.
     * @param pduUnconfirmedInfoLifetimeValue The value to set.
     * @param pduUnconfirmedInfoLifetimeValue used during instantiation.
     */
    public void setPduUnconfirmedInfoLifetimeValue(YangUInt16 pduUnconfirmedInfoLifetimeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdu-unconfirmed-info-lifetime",
            pduUnconfirmedInfoLifetimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pdu-unconfirmed-info-lifetime",
     * using Java primitive values.
     * @param pduUnconfirmedInfoLifetimeValue used during instantiation.
     */
    public void setPduUnconfirmedInfoLifetimeValue(int pduUnconfirmedInfoLifetimeValue)
            throws JNCException {
        setPduUnconfirmedInfoLifetimeValue(new YangUInt16(pduUnconfirmedInfoLifetimeValue));
    }

    /**
     * Sets the value for child leaf "pdu-unconfirmed-info-lifetime",
     * using a String value.
     * @param pduUnconfirmedInfoLifetimeValue used during instantiation.
     */
    public void setPduUnconfirmedInfoLifetimeValue(String pduUnconfirmedInfoLifetimeValue)
            throws JNCException {
        setPduUnconfirmedInfoLifetimeValue(new YangUInt16(pduUnconfirmedInfoLifetimeValue));
    }

    /**
     * Unsets the value for child leaf "pdu-unconfirmed-info-lifetime".
     */
    public void unsetPduUnconfirmedInfoLifetimeValue() throws JNCException {
        delete("pdu-unconfirmed-info-lifetime");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pdu-unconfirmed-info-lifetime" leaf will not have a value.
     */
    public void addPduUnconfirmedInfoLifetime() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdu-unconfirmed-info-lifetime",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pdu-unconfirmed-info-lifetime" with operation "replace".
     */
    public void markPduUnconfirmedInfoLifetimeReplace() throws JNCException {
        markLeafReplace("pduUnconfirmedInfoLifetime");
    }

    /**
     * Marks the leaf "pdu-unconfirmed-info-lifetime" with operation "merge".
     */
    public void markPduUnconfirmedInfoLifetimeMerge() throws JNCException {
        markLeafMerge("pduUnconfirmedInfoLifetime");
    }

    /**
     * Marks the leaf "pdu-unconfirmed-info-lifetime" with operation "create".
     */
    public void markPduUnconfirmedInfoLifetimeCreate() throws JNCException {
        markLeafCreate("pduUnconfirmedInfoLifetime");
    }

    /**
     * Marks the leaf "pdu-unconfirmed-info-lifetime" with operation "delete".
     */
    public void markPduUnconfirmedInfoLifetimeDelete() throws JNCException {
        markLeafDelete("pduUnconfirmedInfoLifetime");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
