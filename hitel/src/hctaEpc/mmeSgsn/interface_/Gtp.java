/* 
 * @(#)Gtp.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeGtpProfile;

import NodeSet;

import Path;

import PathOper;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gtp"
 * <p>
 * See line 50 in
 * upmConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Gtp extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "path".
     */
    public Path path = null;

    /**
     * Constructor for an empty Gtp object.
     */
    public Gtp() {
        super(Epc.NAMESPACE, "gtp");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Gtp clone() {
        return (Gtp)cloneContent(new Gtp());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Gtp cloneShallow() {
        return (Gtp)cloneShallowContent(new Gtp());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "max-pending-transactions",
            "gtpv1-version",
            "gtpv2-version",
            "mme-gtp-profile",
            "path-oper",
            "path",
        };
    }

    /* Access methods for optional leaf child: "max-pending-transactions". */

    /**
     * Gets the value for child leaf "max-pending-transactions".
     * @return The value of the leaf.
     */
    public YangUInt16 getMaxPendingTransactionsValue() throws JNCException {
        YangUInt16 maxPendingTransactions = (YangUInt16)getValue("max-pending-transactions");
        if (maxPendingTransactions == null) {
            maxPendingTransactions = new YangUInt16("20000");  // default
        }
        return maxPendingTransactions;
    }

    /**
     * Sets the value for child leaf "max-pending-transactions",
     * using instance of generated typedef class.
     * @param maxPendingTransactionsValue The value to set.
     * @param maxPendingTransactionsValue used during instantiation.
     */
    public void setMaxPendingTransactionsValue(YangUInt16 maxPendingTransactionsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-pending-transactions",
            maxPendingTransactionsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-pending-transactions",
     * using Java primitive values.
     * @param maxPendingTransactionsValue used during instantiation.
     */
    public void setMaxPendingTransactionsValue(int maxPendingTransactionsValue)
            throws JNCException {
        setMaxPendingTransactionsValue(new YangUInt16(maxPendingTransactionsValue));
    }

    /**
     * Sets the value for child leaf "max-pending-transactions",
     * using a String value.
     * @param maxPendingTransactionsValue used during instantiation.
     */
    public void setMaxPendingTransactionsValue(String maxPendingTransactionsValue)
            throws JNCException {
        setMaxPendingTransactionsValue(new YangUInt16(maxPendingTransactionsValue));
    }

    /**
     * Unsets the value for child leaf "max-pending-transactions".
     */
    public void unsetMaxPendingTransactionsValue() throws JNCException {
        delete("max-pending-transactions");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-pending-transactions" leaf will not have a value.
     */
    public void addMaxPendingTransactions() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-pending-transactions",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-pending-transactions" with operation "replace".
     */
    public void markMaxPendingTransactionsReplace() throws JNCException {
        markLeafReplace("maxPendingTransactions");
    }

    /**
     * Marks the leaf "max-pending-transactions" with operation "merge".
     */
    public void markMaxPendingTransactionsMerge() throws JNCException {
        markLeafMerge("maxPendingTransactions");
    }

    /**
     * Marks the leaf "max-pending-transactions" with operation "create".
     */
    public void markMaxPendingTransactionsCreate() throws JNCException {
        markLeafCreate("maxPendingTransactions");
    }

    /**
     * Marks the leaf "max-pending-transactions" with operation "delete".
     */
    public void markMaxPendingTransactionsDelete() throws JNCException {
        markLeafDelete("maxPendingTransactions");
    }

    /* Access methods for optional leaf child: "gtpv1-version". */

    /**
     * Gets the value for child leaf "gtpv1-version".
     * @return The value of the leaf.
     */
    public YangEnumeration getGtpv1VersionValue() throws JNCException {
        YangEnumeration gtpv1Version = (YangEnumeration)getValue("gtpv1-version");
        if (gtpv1Version == null) {
            gtpv1Version = new YangEnumeration("10.8.0", new String[] {  // default
                "9.5.0",
                "10.8.0",
            });
        }
        return gtpv1Version;
    }

    /**
     * Sets the value for child leaf "gtpv1-version",
     * using instance of generated typedef class.
     * @param gtpv1VersionValue The value to set.
     * @param gtpv1VersionValue used during instantiation.
     */
    public void setGtpv1VersionValue(YangEnumeration gtpv1VersionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gtpv1-version",
            gtpv1VersionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gtpv1-version",
     * using a String value.
     * @param gtpv1VersionValue used during instantiation.
     */
    public void setGtpv1VersionValue(String gtpv1VersionValue)
            throws JNCException {
        setGtpv1VersionValue(new YangEnumeration(gtpv1VersionValue, new String[] {
             "9.5.0",
             "10.8.0",
        }));
    }

    /**
     * Unsets the value for child leaf "gtpv1-version".
     */
    public void unsetGtpv1VersionValue() throws JNCException {
        delete("gtpv1-version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gtpv1-version" leaf will not have a value.
     */
    public void addGtpv1Version() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gtpv1-version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gtpv1-version" with operation "replace".
     */
    public void markGtpv1VersionReplace() throws JNCException {
        markLeafReplace("gtpv1Version");
    }

    /**
     * Marks the leaf "gtpv1-version" with operation "merge".
     */
    public void markGtpv1VersionMerge() throws JNCException {
        markLeafMerge("gtpv1Version");
    }

    /**
     * Marks the leaf "gtpv1-version" with operation "create".
     */
    public void markGtpv1VersionCreate() throws JNCException {
        markLeafCreate("gtpv1Version");
    }

    /**
     * Marks the leaf "gtpv1-version" with operation "delete".
     */
    public void markGtpv1VersionDelete() throws JNCException {
        markLeafDelete("gtpv1Version");
    }

    /* Access methods for optional leaf child: "gtpv2-version". */

    /**
     * Gets the value for child leaf "gtpv2-version".
     * @return The value of the leaf.
     */
    public YangEnumeration getGtpv2VersionValue() throws JNCException {
        YangEnumeration gtpv2Version = (YangEnumeration)getValue("gtpv2-version");
        if (gtpv2Version == null) {
            gtpv2Version = new YangEnumeration("10.10.0", new String[] {  // default
                "9.5.0",
                "10.10.0",
            });
        }
        return gtpv2Version;
    }

    /**
     * Sets the value for child leaf "gtpv2-version",
     * using instance of generated typedef class.
     * @param gtpv2VersionValue The value to set.
     * @param gtpv2VersionValue used during instantiation.
     */
    public void setGtpv2VersionValue(YangEnumeration gtpv2VersionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gtpv2-version",
            gtpv2VersionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gtpv2-version",
     * using a String value.
     * @param gtpv2VersionValue used during instantiation.
     */
    public void setGtpv2VersionValue(String gtpv2VersionValue)
            throws JNCException {
        setGtpv2VersionValue(new YangEnumeration(gtpv2VersionValue, new String[] {
             "9.5.0",
             "10.10.0",
        }));
    }

    /**
     * Unsets the value for child leaf "gtpv2-version".
     */
    public void unsetGtpv2VersionValue() throws JNCException {
        delete("gtpv2-version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gtpv2-version" leaf will not have a value.
     */
    public void addGtpv2Version() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gtpv2-version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gtpv2-version" with operation "replace".
     */
    public void markGtpv2VersionReplace() throws JNCException {
        markLeafReplace("gtpv2Version");
    }

    /**
     * Marks the leaf "gtpv2-version" with operation "merge".
     */
    public void markGtpv2VersionMerge() throws JNCException {
        markLeafMerge("gtpv2Version");
    }

    /**
     * Marks the leaf "gtpv2-version" with operation "create".
     */
    public void markGtpv2VersionCreate() throws JNCException {
        markLeafCreate("gtpv2Version");
    }

    /**
     * Marks the leaf "gtpv2-version" with operation "delete".
     */
    public void markGtpv2VersionDelete() throws JNCException {
        markLeafDelete("gtpv2Version");
    }

    /* Access methods for list child: "mme-gtp-profile". */

    /**
     * Gets list entry "mmeGtpProfile", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeGtpProfile getMmeGtpProfile(YangString nameValue)
            throws JNCException {
        String path = "mme-gtp-profile[name='" + nameValue + "']";
        return (MmeGtpProfile)searchOne(path);
    }

    /**
     * Gets list entry "mmeGtpProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeGtpProfile getMmeGtpProfile(String nameValue) throws JNCException {
        String path = "mme-gtp-profile[name='" + nameValue + "']";
        return (MmeGtpProfile)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-gtp-profile".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeGtpProfileIterator() {
        return new ElementChildrenIterator(children, "mme-gtp-profile");
    }

    /**
     * Adds list entry "mmeGtpProfile", using an existing object.
     * @param mmeGtpProfile The object to add.
     * @return The added child.
     */
    public MmeGtpProfile addMmeGtpProfile(MmeGtpProfile mmeGtpProfile)
            throws JNCException {
        insertChild(mmeGtpProfile, childrenNames());
        return mmeGtpProfile;
    }

    /**
     * Adds list entry "mmeGtpProfile", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeGtpProfile addMmeGtpProfile(YangString nameValue)
            throws JNCException {
        MmeGtpProfile mmeGtpProfile = new MmeGtpProfile(nameValue);
        return addMmeGtpProfile(mmeGtpProfile);
    }

    /**
     * Adds list entry "mmeGtpProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeGtpProfile addMmeGtpProfile(String nameValue) throws JNCException {
        MmeGtpProfile mmeGtpProfile = new MmeGtpProfile(nameValue);
        return addMmeGtpProfile(mmeGtpProfile);
    }

    /**
     * Adds list entry "mmeGtpProfile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeGtpProfile addMmeGtpProfile() throws JNCException {
        MmeGtpProfile mmeGtpProfile = new MmeGtpProfile();
        insertChild(mmeGtpProfile, childrenNames());
        return mmeGtpProfile;
    }

    /**
     * Deletes list entry "mmeGtpProfile", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeGtpProfile(YangString nameValue) throws JNCException {
        String path = "mme-gtp-profile[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeGtpProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeGtpProfile(String nameValue) throws JNCException {
        String path = "mme-gtp-profile[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "path-oper". */

    /**
     * Gets list entry "pathOper", with specified keys.
     */
    public PathOper getPathOper() throws JNCException {
        String path = "path-oper";
        return (PathOper)searchOne(path);
    }

    /**
     * Iterator method for the list "path-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator pathOperIterator() {
        return new ElementChildrenIterator(children, "path-oper");
    }

    /**
     * Adds list entry "pathOper", using an existing object.
     * @param pathOper The object to add.
     * @return The added child.
     */
    public PathOper addPathOper(PathOper pathOper) throws JNCException {
        insertChild(pathOper, childrenNames());
        return pathOper;
    }

    /**
     * Adds list entry "pathOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public PathOper addPathOper() throws JNCException {
        PathOper pathOper = new PathOper();
        insertChild(pathOper, childrenNames());
        return pathOper;
    }

    /**
     * Deletes list entry "pathOper", with specified keys.
     */
    public void deletePathOper() throws JNCException {
        String path = "path-oper";
        delete(path);
    }

    /* Access methods for container child: "path". */

    /**
     * Adds container entry "path", using an existing object.
     * @param path The object to add.
     * @return The added child.
     */
    public Path addPath(Path path) throws JNCException {
        this.path = path;
        insertChild(path, childrenNames());
        return path;
    }

    /**
     * Adds container entry "path".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Path addPath() throws JNCException {
        Path path = new Path();
        this.path = path;
        insertChild(path, childrenNames());
        return path;
    }

    /**
     * Deletes container entry "path".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deletePath() throws JNCException {
        this.path = null;
        String path = "path";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Path) path = (Path)child;
    }

}
