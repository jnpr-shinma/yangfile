/* 
 * @(#)MmeSlgIf.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.slg;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/slg/mme-slg-if"
 * <p>
 * See line 369 in
 * dcConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeSlgIf extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeSlgIf object.
     */
    public MmeSlgIf() {
        super(Epc.NAMESPACE, "mme-slg-if");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeSlgIf clone() {
        return (MmeSlgIf)cloneContent(new MmeSlgIf());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeSlgIf cloneShallow() {
        return (MmeSlgIf)cloneShallowContent(new MmeSlgIf());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "gmlc-realm",
            "request-timer",
            "request-retry",
            "version",
        };
    }

    /* Access methods for optional leaf child: "gmlc-realm". */

    /**
     * Gets the value for child leaf "gmlc-realm".
     * @return The value of the leaf.
     */
    public YangString getGmlcRealmValue() throws JNCException {
        return (YangString)getValue("gmlc-realm");
    }

    /**
     * Sets the value for child leaf "gmlc-realm",
     * using instance of generated typedef class.
     * @param gmlcRealmValue The value to set.
     * @param gmlcRealmValue used during instantiation.
     */
    public void setGmlcRealmValue(YangString gmlcRealmValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gmlc-realm",
            gmlcRealmValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gmlc-realm",
     * using a String value.
     * @param gmlcRealmValue used during instantiation.
     */
    public void setGmlcRealmValue(String gmlcRealmValue) throws JNCException {
        setGmlcRealmValue(new YangString(gmlcRealmValue));
    }

    /**
     * Unsets the value for child leaf "gmlc-realm".
     */
    public void unsetGmlcRealmValue() throws JNCException {
        delete("gmlc-realm");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gmlc-realm" leaf will not have a value.
     */
    public void addGmlcRealm() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gmlc-realm",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gmlc-realm" with operation "replace".
     */
    public void markGmlcRealmReplace() throws JNCException {
        markLeafReplace("gmlcRealm");
    }

    /**
     * Marks the leaf "gmlc-realm" with operation "merge".
     */
    public void markGmlcRealmMerge() throws JNCException {
        markLeafMerge("gmlcRealm");
    }

    /**
     * Marks the leaf "gmlc-realm" with operation "create".
     */
    public void markGmlcRealmCreate() throws JNCException {
        markLeafCreate("gmlcRealm");
    }

    /**
     * Marks the leaf "gmlc-realm" with operation "delete".
     */
    public void markGmlcRealmDelete() throws JNCException {
        markLeafDelete("gmlcRealm");
    }

    /* Access methods for optional leaf child: "request-timer". */

    /**
     * Gets the value for child leaf "request-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getRequestTimerValue() throws JNCException {
        YangUInt8 requestTimer = (YangUInt8)getValue("request-timer");
        if (requestTimer == null) {
            requestTimer = new YangUInt8("5");  // default
        }
        return requestTimer;
    }

    /**
     * Sets the value for child leaf "request-timer",
     * using instance of generated typedef class.
     * @param requestTimerValue The value to set.
     * @param requestTimerValue used during instantiation.
     */
    public void setRequestTimerValue(YangUInt8 requestTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "request-timer",
            requestTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "request-timer",
     * using Java primitive values.
     * @param requestTimerValue used during instantiation.
     */
    public void setRequestTimerValue(short requestTimerValue)
            throws JNCException {
        setRequestTimerValue(new YangUInt8(requestTimerValue));
    }

    /**
     * Sets the value for child leaf "request-timer",
     * using a String value.
     * @param requestTimerValue used during instantiation.
     */
    public void setRequestTimerValue(String requestTimerValue)
            throws JNCException {
        setRequestTimerValue(new YangUInt8(requestTimerValue));
    }

    /**
     * Unsets the value for child leaf "request-timer".
     */
    public void unsetRequestTimerValue() throws JNCException {
        delete("request-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "request-timer" leaf will not have a value.
     */
    public void addRequestTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "request-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "request-timer" with operation "replace".
     */
    public void markRequestTimerReplace() throws JNCException {
        markLeafReplace("requestTimer");
    }

    /**
     * Marks the leaf "request-timer" with operation "merge".
     */
    public void markRequestTimerMerge() throws JNCException {
        markLeafMerge("requestTimer");
    }

    /**
     * Marks the leaf "request-timer" with operation "create".
     */
    public void markRequestTimerCreate() throws JNCException {
        markLeafCreate("requestTimer");
    }

    /**
     * Marks the leaf "request-timer" with operation "delete".
     */
    public void markRequestTimerDelete() throws JNCException {
        markLeafDelete("requestTimer");
    }

    /* Access methods for optional leaf child: "request-retry". */

    /**
     * Gets the value for child leaf "request-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getRequestRetryValue() throws JNCException {
        YangUInt8 requestRetry = (YangUInt8)getValue("request-retry");
        if (requestRetry == null) {
            requestRetry = new YangUInt8("0");  // default
        }
        return requestRetry;
    }

    /**
     * Sets the value for child leaf "request-retry",
     * using instance of generated typedef class.
     * @param requestRetryValue The value to set.
     * @param requestRetryValue used during instantiation.
     */
    public void setRequestRetryValue(YangUInt8 requestRetryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "request-retry",
            requestRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "request-retry",
     * using Java primitive values.
     * @param requestRetryValue used during instantiation.
     */
    public void setRequestRetryValue(short requestRetryValue)
            throws JNCException {
        setRequestRetryValue(new YangUInt8(requestRetryValue));
    }

    /**
     * Sets the value for child leaf "request-retry",
     * using a String value.
     * @param requestRetryValue used during instantiation.
     */
    public void setRequestRetryValue(String requestRetryValue)
            throws JNCException {
        setRequestRetryValue(new YangUInt8(requestRetryValue));
    }

    /**
     * Unsets the value for child leaf "request-retry".
     */
    public void unsetRequestRetryValue() throws JNCException {
        delete("request-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "request-retry" leaf will not have a value.
     */
    public void addRequestRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "request-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "request-retry" with operation "replace".
     */
    public void markRequestRetryReplace() throws JNCException {
        markLeafReplace("requestRetry");
    }

    /**
     * Marks the leaf "request-retry" with operation "merge".
     */
    public void markRequestRetryMerge() throws JNCException {
        markLeafMerge("requestRetry");
    }

    /**
     * Marks the leaf "request-retry" with operation "create".
     */
    public void markRequestRetryCreate() throws JNCException {
        markLeafCreate("requestRetry");
    }

    /**
     * Marks the leaf "request-retry" with operation "delete".
     */
    public void markRequestRetryDelete() throws JNCException {
        markLeafDelete("requestRetry");
    }

    /* Access methods for optional leaf child: "version". */

    /**
     * Gets the value for child leaf "version".
     * @return The value of the leaf.
     */
    public YangEnumeration getVersionValue() throws JNCException {
        YangEnumeration version = (YangEnumeration)getValue("version");
        if (version == null) {
            version = new YangEnumeration("10.1.0", new String[] {  // default
                "10.1.0",
            });
        }
        return version;
    }

    /**
     * Sets the value for child leaf "version",
     * using instance of generated typedef class.
     * @param versionValue The value to set.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(YangEnumeration versionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            versionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "version",
     * using a String value.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(String versionValue) throws JNCException {
        setVersionValue(new YangEnumeration(versionValue, new String[] {
             "10.1.0",
        }));
    }

    /**
     * Unsets the value for child leaf "version".
     */
    public void unsetVersionValue() throws JNCException {
        delete("version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "version" leaf will not have a value.
     */
    public void addVersion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "version" with operation "replace".
     */
    public void markVersionReplace() throws JNCException {
        markLeafReplace("version");
    }

    /**
     * Marks the leaf "version" with operation "merge".
     */
    public void markVersionMerge() throws JNCException {
        markLeafMerge("version");
    }

    /**
     * Marks the leaf "version" with operation "create".
     */
    public void markVersionCreate() throws JNCException {
        markLeafCreate("version");
    }

    /**
     * Marks the leaf "version" with operation "delete".
     */
    public void markVersionDelete() throws JNCException {
        markLeafDelete("version");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
