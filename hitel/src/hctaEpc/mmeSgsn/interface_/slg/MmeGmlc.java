/* 
 * @(#)MmeGmlc.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.slg;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/slg/mme-gmlc"
 * <p>
 * See line 338 in
 * dcConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeGmlc extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeGmlc object.
     */
    public MmeGmlc() {
        super(Epc.NAMESPACE, "mme-gmlc");
    }

    /**
     * Constructor for an initialized MmeGmlc object,
     * 
     * @param gmlcNumberValue Key argument of child.
     */
    public MmeGmlc(YangString gmlcNumberValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-gmlc");
        Leaf gmlcNumber = new Leaf(Epc.NAMESPACE, "gmlc-number");
        gmlcNumber.setValue(gmlcNumberValue);
        insertChild(gmlcNumber, childrenNames());
    }

    /**
     * Constructor for an initialized MmeGmlc object,
     * with String keys.
     * @param gmlcNumberValue Key argument of child.
     */
    public MmeGmlc(String gmlcNumberValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-gmlc");
        Leaf gmlcNumber = new Leaf(Epc.NAMESPACE, "gmlc-number");
        gmlcNumber.setValue(new YangString(gmlcNumberValue));
        insertChild(gmlcNumber, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeGmlc clone() {
        MmeGmlc copy;
        try {
            copy = new MmeGmlc(getGmlcNumberValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeGmlc)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeGmlc cloneShallow() {
        MmeGmlc copy;
        try {
            copy = new MmeGmlc(getGmlcNumberValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeGmlc)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "gmlc-number",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "gmlc-number",
            "host-identity",
            "gmlc-usage",
        };
    }

    /* Access methods for leaf child: "gmlc-number". */

    /**
     * Gets the value for child leaf "gmlc-number".
     * @return The value of the leaf.
     */
    public YangString getGmlcNumberValue() throws JNCException {
        return (YangString)getValue("gmlc-number");
    }

    /**
     * Sets the value for child leaf "gmlc-number",
     * using instance of generated typedef class.
     * @param gmlcNumberValue The value to set.
     * @param gmlcNumberValue used during instantiation.
     */
    public void setGmlcNumberValue(YangString gmlcNumberValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gmlc-number",
            gmlcNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gmlc-number",
     * using a String value.
     * @param gmlcNumberValue used during instantiation.
     */
    public void setGmlcNumberValue(String gmlcNumberValue) throws JNCException {
        setGmlcNumberValue(new YangString(gmlcNumberValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gmlc-number" leaf will not have a value.
     */
    public void addGmlcNumber() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gmlc-number",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "host-identity". */

    /**
     * Gets the value for child leaf "host-identity".
     * @return The value of the leaf.
     */
    public YangString getHostIdentityValue() throws JNCException {
        return (YangString)getValue("host-identity");
    }

    /**
     * Sets the value for child leaf "host-identity",
     * using instance of generated typedef class.
     * @param hostIdentityValue The value to set.
     * @param hostIdentityValue used during instantiation.
     */
    public void setHostIdentityValue(YangString hostIdentityValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "host-identity",
            hostIdentityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "host-identity",
     * using a String value.
     * @param hostIdentityValue used during instantiation.
     */
    public void setHostIdentityValue(String hostIdentityValue)
            throws JNCException {
        setHostIdentityValue(new YangString(hostIdentityValue));
    }

    /**
     * Unsets the value for child leaf "host-identity".
     */
    public void unsetHostIdentityValue() throws JNCException {
        delete("host-identity");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "host-identity" leaf will not have a value.
     */
    public void addHostIdentity() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "host-identity",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "host-identity" with operation "replace".
     */
    public void markHostIdentityReplace() throws JNCException {
        markLeafReplace("hostIdentity");
    }

    /**
     * Marks the leaf "host-identity" with operation "merge".
     */
    public void markHostIdentityMerge() throws JNCException {
        markLeafMerge("hostIdentity");
    }

    /**
     * Marks the leaf "host-identity" with operation "create".
     */
    public void markHostIdentityCreate() throws JNCException {
        markLeafCreate("hostIdentity");
    }

    /**
     * Marks the leaf "host-identity" with operation "delete".
     */
    public void markHostIdentityDelete() throws JNCException {
        markLeafDelete("hostIdentity");
    }

    /* Access methods for optional leaf child: "gmlc-usage". */

    /**
     * Gets the value for child leaf "gmlc-usage".
     * @return The value of the leaf.
     */
    public YangEnumeration getGmlcUsageValue() throws JNCException {
        YangEnumeration gmlcUsage = (YangEnumeration)getValue("gmlc-usage");
        if (gmlcUsage == null) {
            gmlcUsage = new YangEnumeration("emergency-regular", new String[] {  // default
                "emergency",
                "regular",
                "roamer",
                "emergency-regular",
            });
        }
        return gmlcUsage;
    }

    /**
     * Sets the value for child leaf "gmlc-usage",
     * using instance of generated typedef class.
     * @param gmlcUsageValue The value to set.
     * @param gmlcUsageValue used during instantiation.
     */
    public void setGmlcUsageValue(YangEnumeration gmlcUsageValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gmlc-usage",
            gmlcUsageValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gmlc-usage",
     * using a String value.
     * @param gmlcUsageValue used during instantiation.
     */
    public void setGmlcUsageValue(String gmlcUsageValue) throws JNCException {
        setGmlcUsageValue(new YangEnumeration(gmlcUsageValue, new String[] {
             "emergency",
             "regular",
             "roamer",
             "emergency-regular",
        }));
    }

    /**
     * Unsets the value for child leaf "gmlc-usage".
     */
    public void unsetGmlcUsageValue() throws JNCException {
        delete("gmlc-usage");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gmlc-usage" leaf will not have a value.
     */
    public void addGmlcUsage() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gmlc-usage",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gmlc-usage" with operation "replace".
     */
    public void markGmlcUsageReplace() throws JNCException {
        markLeafReplace("gmlcUsage");
    }

    /**
     * Marks the leaf "gmlc-usage" with operation "merge".
     */
    public void markGmlcUsageMerge() throws JNCException {
        markLeafMerge("gmlcUsage");
    }

    /**
     * Marks the leaf "gmlc-usage" with operation "create".
     */
    public void markGmlcUsageCreate() throws JNCException {
        markLeafCreate("gmlcUsage");
    }

    /**
     * Marks the leaf "gmlc-usage" with operation "delete".
     */
    public void markGmlcUsageDelete() throws JNCException {
        markLeafDelete("gmlcUsage");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
