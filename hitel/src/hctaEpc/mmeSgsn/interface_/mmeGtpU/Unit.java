/* 
 * @(#)Unit.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.mmeGtpU;
import .ietfInetTypes.Ipv4Address;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt16;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/mmeGtpU/unit"
 * <p>
 * See line 418 in
 * sdConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Unit extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Unit object.
     */
    public Unit() {
        super(Epc.NAMESPACE, "unit");
    }

    /**
     * Constructor for an initialized Unit object,
     * 
     * @param unitIdValue Key argument of child.
     */
    public Unit(YangUInt16 unitIdValue) throws JNCException {
        super(Epc.NAMESPACE, "unit");
        Leaf unitId = new Leaf(Epc.NAMESPACE, "unit-id");
        unitId.setValue(unitIdValue);
        insertChild(unitId, childrenNames());
    }

    /**
     * Constructor for an initialized Unit object,
     * with String keys.
     * @param unitIdValue Key argument of child.
     */
    public Unit(String unitIdValue) throws JNCException {
        super(Epc.NAMESPACE, "unit");
        Leaf unitId = new Leaf(Epc.NAMESPACE, "unit-id");
        unitId.setValue(new YangUInt16(unitIdValue));
        insertChild(unitId, childrenNames());
    }

    /**
     * Constructor for an initialized Unit object,
     * with keys of built in Java types.
     * @param unitIdValue Key argument of child.
     */
    public Unit(int unitIdValue) throws JNCException {
        super(Epc.NAMESPACE, "unit");
        Leaf unitId = new Leaf(Epc.NAMESPACE, "unit-id");
        unitId.setValue(new YangUInt16(unitIdValue));
        insertChild(unitId, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Unit clone() {
        Unit copy;
        try {
            copy = new Unit(getUnitIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Unit)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Unit cloneShallow() {
        Unit copy;
        try {
            copy = new Unit(getUnitIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Unit)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "unit-id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "unit-id",
            "iu-data-ipaddress",
            "gn-data-ipaddress",
        };
    }

    /* Access methods for leaf child: "unit-id". */

    /**
     * Gets the value for child leaf "unit-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getUnitIdValue() throws JNCException {
        return (YangUInt16)getValue("unit-id");
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using instance of generated typedef class.
     * @param unitIdValue The value to set.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(YangUInt16 unitIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-id",
            unitIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using Java primitive values.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(int unitIdValue) throws JNCException {
        setUnitIdValue(new YangUInt16(unitIdValue));
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using a String value.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(String unitIdValue) throws JNCException {
        setUnitIdValue(new YangUInt16(unitIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-id" leaf will not have a value.
     */
    public void addUnitId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unit-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "iu-data-ipaddress". */

    /**
     * Gets the value for child leaf "iu-data-ipaddress".
     * @return The value of the leaf.
     */
    public Ipv4Address getIuDataIpaddressValue() throws JNCException {
        return (Ipv4Address)getValue("iu-data-ipaddress");
    }

    /**
     * Sets the value for child leaf "iu-data-ipaddress",
     * using a JNC type value.
     * @param iuDataIpaddressValue The value to set.
     * @param iuDataIpaddressValue used during instantiation.
     */
    public void setIuDataIpaddressValue(Ipv4Address iuDataIpaddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iu-data-ipaddress",
            iuDataIpaddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "iu-data-ipaddress",
     * using a String value.
     * @param iuDataIpaddressValue used during instantiation.
     */
    public void setIuDataIpaddressValue(String iuDataIpaddressValue)
            throws JNCException {
        setIuDataIpaddressValue(new Ipv4Address(iuDataIpaddressValue));
    }

    /**
     * Unsets the value for child leaf "iu-data-ipaddress".
     */
    public void unsetIuDataIpaddressValue() throws JNCException {
        delete("iu-data-ipaddress");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "iu-data-ipaddress" leaf will not have a value.
     */
    public void addIuDataIpaddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iu-data-ipaddress",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "iu-data-ipaddress" with operation "replace".
     */
    public void markIuDataIpaddressReplace() throws JNCException {
        markLeafReplace("iuDataIpaddress");
    }

    /**
     * Marks the leaf "iu-data-ipaddress" with operation "merge".
     */
    public void markIuDataIpaddressMerge() throws JNCException {
        markLeafMerge("iuDataIpaddress");
    }

    /**
     * Marks the leaf "iu-data-ipaddress" with operation "create".
     */
    public void markIuDataIpaddressCreate() throws JNCException {
        markLeafCreate("iuDataIpaddress");
    }

    /**
     * Marks the leaf "iu-data-ipaddress" with operation "delete".
     */
    public void markIuDataIpaddressDelete() throws JNCException {
        markLeafDelete("iuDataIpaddress");
    }

    /* Access methods for optional leaf child: "gn-data-ipaddress". */

    /**
     * Gets the value for child leaf "gn-data-ipaddress".
     * @return The value of the leaf.
     */
    public Ipv4Address getGnDataIpaddressValue() throws JNCException {
        return (Ipv4Address)getValue("gn-data-ipaddress");
    }

    /**
     * Sets the value for child leaf "gn-data-ipaddress",
     * using a JNC type value.
     * @param gnDataIpaddressValue The value to set.
     * @param gnDataIpaddressValue used during instantiation.
     */
    public void setGnDataIpaddressValue(Ipv4Address gnDataIpaddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gn-data-ipaddress",
            gnDataIpaddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gn-data-ipaddress",
     * using a String value.
     * @param gnDataIpaddressValue used during instantiation.
     */
    public void setGnDataIpaddressValue(String gnDataIpaddressValue)
            throws JNCException {
        setGnDataIpaddressValue(new Ipv4Address(gnDataIpaddressValue));
    }

    /**
     * Unsets the value for child leaf "gn-data-ipaddress".
     */
    public void unsetGnDataIpaddressValue() throws JNCException {
        delete("gn-data-ipaddress");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gn-data-ipaddress" leaf will not have a value.
     */
    public void addGnDataIpaddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gn-data-ipaddress",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gn-data-ipaddress" with operation "replace".
     */
    public void markGnDataIpaddressReplace() throws JNCException {
        markLeafReplace("gnDataIpaddress");
    }

    /**
     * Marks the leaf "gn-data-ipaddress" with operation "merge".
     */
    public void markGnDataIpaddressMerge() throws JNCException {
        markLeafMerge("gnDataIpaddress");
    }

    /**
     * Marks the leaf "gn-data-ipaddress" with operation "create".
     */
    public void markGnDataIpaddressCreate() throws JNCException {
        markLeafCreate("gnDataIpaddress");
    }

    /**
     * Marks the leaf "gn-data-ipaddress" with operation "delete".
     */
    public void markGnDataIpaddressDelete() throws JNCException {
        markLeafDelete("gnDataIpaddress");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
