/* 
 * @(#)MmeS11If.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.s11;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/s11/mme-s11-if"
 * <p>
 * See line 284 in
 * upmConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeS11If extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeS11If object.
     */
    public MmeS11If() {
        super(Epc.NAMESPACE, "mme-s11-if");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeS11If clone() {
        return (MmeS11If)cloneContent(new MmeS11If());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeS11If cloneShallow() {
        return (MmeS11If)cloneShallowContent(new MmeS11If());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "change-reporting",
            "uli-inclusion",
            "ue-timezone-inclusion",
            "load-status-private-extension",
            "pgw-load-status-lifetime",
            "quarantine-non-responsive-pgw",
            "pgw-quarantine-duration",
            "gtp-profile",
            "echoless-path-management",
        };
    }

    /* Access methods for optional leaf child: "change-reporting". */

    /**
     * Gets the value for child leaf "change-reporting".
     * @return The value of the leaf.
     */
    public YangEnumeration getChangeReportingValue() throws JNCException {
        YangEnumeration changeReporting = (YangEnumeration)getValue("change-reporting");
        if (changeReporting == null) {
            changeReporting = new YangEnumeration("off", new String[] {  // default
                "on",
                "off",
            });
        }
        return changeReporting;
    }

    /**
     * Sets the value for child leaf "change-reporting",
     * using instance of generated typedef class.
     * @param changeReportingValue The value to set.
     * @param changeReportingValue used during instantiation.
     */
    public void setChangeReportingValue(YangEnumeration changeReportingValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "change-reporting",
            changeReportingValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "change-reporting",
     * using a String value.
     * @param changeReportingValue used during instantiation.
     */
    public void setChangeReportingValue(String changeReportingValue)
            throws JNCException {
        setChangeReportingValue(new YangEnumeration(changeReportingValue, new String[] {
             "on",
             "off",
        }));
    }

    /**
     * Unsets the value for child leaf "change-reporting".
     */
    public void unsetChangeReportingValue() throws JNCException {
        delete("change-reporting");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "change-reporting" leaf will not have a value.
     */
    public void addChangeReporting() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "change-reporting",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "change-reporting" with operation "replace".
     */
    public void markChangeReportingReplace() throws JNCException {
        markLeafReplace("changeReporting");
    }

    /**
     * Marks the leaf "change-reporting" with operation "merge".
     */
    public void markChangeReportingMerge() throws JNCException {
        markLeafMerge("changeReporting");
    }

    /**
     * Marks the leaf "change-reporting" with operation "create".
     */
    public void markChangeReportingCreate() throws JNCException {
        markLeafCreate("changeReporting");
    }

    /**
     * Marks the leaf "change-reporting" with operation "delete".
     */
    public void markChangeReportingDelete() throws JNCException {
        markLeafDelete("changeReporting");
    }

    /* Access methods for optional leaf child: "uli-inclusion". */

    /**
     * Gets the value for child leaf "uli-inclusion".
     * @return The value of the leaf.
     */
    public YangEnumeration getUliInclusionValue() throws JNCException {
        YangEnumeration uliInclusion = (YangEnumeration)getValue("uli-inclusion");
        if (uliInclusion == null) {
            uliInclusion = new YangEnumeration("standard", new String[] {  // default
                "standard",
                "force-in-mbr",
                "force-in-all",
            });
        }
        return uliInclusion;
    }

    /**
     * Sets the value for child leaf "uli-inclusion",
     * using instance of generated typedef class.
     * @param uliInclusionValue The value to set.
     * @param uliInclusionValue used during instantiation.
     */
    public void setUliInclusionValue(YangEnumeration uliInclusionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "uli-inclusion",
            uliInclusionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uli-inclusion",
     * using a String value.
     * @param uliInclusionValue used during instantiation.
     */
    public void setUliInclusionValue(String uliInclusionValue)
            throws JNCException {
        setUliInclusionValue(new YangEnumeration(uliInclusionValue, new String[] {
             "standard",
             "force-in-mbr",
             "force-in-all",
        }));
    }

    /**
     * Unsets the value for child leaf "uli-inclusion".
     */
    public void unsetUliInclusionValue() throws JNCException {
        delete("uli-inclusion");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uli-inclusion" leaf will not have a value.
     */
    public void addUliInclusion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "uli-inclusion",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "uli-inclusion" with operation "replace".
     */
    public void markUliInclusionReplace() throws JNCException {
        markLeafReplace("uliInclusion");
    }

    /**
     * Marks the leaf "uli-inclusion" with operation "merge".
     */
    public void markUliInclusionMerge() throws JNCException {
        markLeafMerge("uliInclusion");
    }

    /**
     * Marks the leaf "uli-inclusion" with operation "create".
     */
    public void markUliInclusionCreate() throws JNCException {
        markLeafCreate("uliInclusion");
    }

    /**
     * Marks the leaf "uli-inclusion" with operation "delete".
     */
    public void markUliInclusionDelete() throws JNCException {
        markLeafDelete("uliInclusion");
    }

    /* Access methods for optional leaf child: "ue-timezone-inclusion". */

    /**
     * Gets the value for child leaf "ue-timezone-inclusion".
     * @return The value of the leaf.
     */
    public YangEnumeration getUeTimezoneInclusionValue() throws JNCException {
        YangEnumeration ueTimezoneInclusion = (YangEnumeration)getValue("ue-timezone-inclusion");
        if (ueTimezoneInclusion == null) {
            ueTimezoneInclusion = new YangEnumeration("standard", new String[] {  // default
                "standard",
                "force-in-all",
            });
        }
        return ueTimezoneInclusion;
    }

    /**
     * Sets the value for child leaf "ue-timezone-inclusion",
     * using instance of generated typedef class.
     * @param ueTimezoneInclusionValue The value to set.
     * @param ueTimezoneInclusionValue used during instantiation.
     */
    public void setUeTimezoneInclusionValue(YangEnumeration ueTimezoneInclusionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-timezone-inclusion",
            ueTimezoneInclusionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ue-timezone-inclusion",
     * using a String value.
     * @param ueTimezoneInclusionValue used during instantiation.
     */
    public void setUeTimezoneInclusionValue(String ueTimezoneInclusionValue)
            throws JNCException {
        setUeTimezoneInclusionValue(new YangEnumeration(ueTimezoneInclusionValue, new String[] {
             "standard",
             "force-in-all",
        }));
    }

    /**
     * Unsets the value for child leaf "ue-timezone-inclusion".
     */
    public void unsetUeTimezoneInclusionValue() throws JNCException {
        delete("ue-timezone-inclusion");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ue-timezone-inclusion" leaf will not have a value.
     */
    public void addUeTimezoneInclusion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-timezone-inclusion",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ue-timezone-inclusion" with operation "replace".
     */
    public void markUeTimezoneInclusionReplace() throws JNCException {
        markLeafReplace("ueTimezoneInclusion");
    }

    /**
     * Marks the leaf "ue-timezone-inclusion" with operation "merge".
     */
    public void markUeTimezoneInclusionMerge() throws JNCException {
        markLeafMerge("ueTimezoneInclusion");
    }

    /**
     * Marks the leaf "ue-timezone-inclusion" with operation "create".
     */
    public void markUeTimezoneInclusionCreate() throws JNCException {
        markLeafCreate("ueTimezoneInclusion");
    }

    /**
     * Marks the leaf "ue-timezone-inclusion" with operation "delete".
     */
    public void markUeTimezoneInclusionDelete() throws JNCException {
        markLeafDelete("ueTimezoneInclusion");
    }

    /* Access methods for optional leaf child: "load-status-private-extension". */

    /**
     * Gets the value for child leaf "load-status-private-extension".
     * @return The value of the leaf.
     */
    public YangEnumeration getLoadStatusPrivateExtensionValue()
            throws JNCException {
        YangEnumeration loadStatusPrivateExtension = (YangEnumeration)getValue("load-status-private-extension");
        if (loadStatusPrivateExtension == null) {
            loadStatusPrivateExtension = new YangEnumeration("off", new String[] {  // default
                "on",
                "off",
            });
        }
        return loadStatusPrivateExtension;
    }

    /**
     * Sets the value for child leaf "load-status-private-extension",
     * using instance of generated typedef class.
     * @param loadStatusPrivateExtensionValue The value to set.
     * @param loadStatusPrivateExtensionValue used during instantiation.
     */
    public void setLoadStatusPrivateExtensionValue(YangEnumeration loadStatusPrivateExtensionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "load-status-private-extension",
            loadStatusPrivateExtensionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "load-status-private-extension",
     * using a String value.
     * @param loadStatusPrivateExtensionValue used during instantiation.
     */
    public void setLoadStatusPrivateExtensionValue(String loadStatusPrivateExtensionValue)
            throws JNCException {
        setLoadStatusPrivateExtensionValue(new YangEnumeration(loadStatusPrivateExtensionValue, new String[] {
             "on",
             "off",
        }));
    }

    /**
     * Unsets the value for child leaf "load-status-private-extension".
     */
    public void unsetLoadStatusPrivateExtensionValue() throws JNCException {
        delete("load-status-private-extension");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "load-status-private-extension" leaf will not have a value.
     */
    public void addLoadStatusPrivateExtension() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "load-status-private-extension",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "load-status-private-extension" with operation "replace".
     */
    public void markLoadStatusPrivateExtensionReplace() throws JNCException {
        markLeafReplace("loadStatusPrivateExtension");
    }

    /**
     * Marks the leaf "load-status-private-extension" with operation "merge".
     */
    public void markLoadStatusPrivateExtensionMerge() throws JNCException {
        markLeafMerge("loadStatusPrivateExtension");
    }

    /**
     * Marks the leaf "load-status-private-extension" with operation "create".
     */
    public void markLoadStatusPrivateExtensionCreate() throws JNCException {
        markLeafCreate("loadStatusPrivateExtension");
    }

    /**
     * Marks the leaf "load-status-private-extension" with operation "delete".
     */
    public void markLoadStatusPrivateExtensionDelete() throws JNCException {
        markLeafDelete("loadStatusPrivateExtension");
    }

    /* Access methods for optional leaf child: "pgw-load-status-lifetime". */

    /**
     * Gets the value for child leaf "pgw-load-status-lifetime".
     * @return The value of the leaf.
     */
    public YangUInt8 getPgwLoadStatusLifetimeValue() throws JNCException {
        YangUInt8 pgwLoadStatusLifetime = (YangUInt8)getValue("pgw-load-status-lifetime");
        if (pgwLoadStatusLifetime == null) {
            pgwLoadStatusLifetime = new YangUInt8("15");  // default
        }
        return pgwLoadStatusLifetime;
    }

    /**
     * Sets the value for child leaf "pgw-load-status-lifetime",
     * using instance of generated typedef class.
     * @param pgwLoadStatusLifetimeValue The value to set.
     * @param pgwLoadStatusLifetimeValue used during instantiation.
     */
    public void setPgwLoadStatusLifetimeValue(YangUInt8 pgwLoadStatusLifetimeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-load-status-lifetime",
            pgwLoadStatusLifetimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pgw-load-status-lifetime",
     * using Java primitive values.
     * @param pgwLoadStatusLifetimeValue used during instantiation.
     */
    public void setPgwLoadStatusLifetimeValue(short pgwLoadStatusLifetimeValue)
            throws JNCException {
        setPgwLoadStatusLifetimeValue(new YangUInt8(pgwLoadStatusLifetimeValue));
    }

    /**
     * Sets the value for child leaf "pgw-load-status-lifetime",
     * using a String value.
     * @param pgwLoadStatusLifetimeValue used during instantiation.
     */
    public void setPgwLoadStatusLifetimeValue(String pgwLoadStatusLifetimeValue)
            throws JNCException {
        setPgwLoadStatusLifetimeValue(new YangUInt8(pgwLoadStatusLifetimeValue));
    }

    /**
     * Unsets the value for child leaf "pgw-load-status-lifetime".
     */
    public void unsetPgwLoadStatusLifetimeValue() throws JNCException {
        delete("pgw-load-status-lifetime");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pgw-load-status-lifetime" leaf will not have a value.
     */
    public void addPgwLoadStatusLifetime() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-load-status-lifetime",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pgw-load-status-lifetime" with operation "replace".
     */
    public void markPgwLoadStatusLifetimeReplace() throws JNCException {
        markLeafReplace("pgwLoadStatusLifetime");
    }

    /**
     * Marks the leaf "pgw-load-status-lifetime" with operation "merge".
     */
    public void markPgwLoadStatusLifetimeMerge() throws JNCException {
        markLeafMerge("pgwLoadStatusLifetime");
    }

    /**
     * Marks the leaf "pgw-load-status-lifetime" with operation "create".
     */
    public void markPgwLoadStatusLifetimeCreate() throws JNCException {
        markLeafCreate("pgwLoadStatusLifetime");
    }

    /**
     * Marks the leaf "pgw-load-status-lifetime" with operation "delete".
     */
    public void markPgwLoadStatusLifetimeDelete() throws JNCException {
        markLeafDelete("pgwLoadStatusLifetime");
    }

    /* Access methods for optional leaf child: "quarantine-non-responsive-pgw". */

    /**
     * Gets the value for child leaf "quarantine-non-responsive-pgw".
     * @return The value of the leaf.
     */
    public YangEnumeration getQuarantineNonResponsivePgwValue()
            throws JNCException {
        YangEnumeration quarantineNonResponsivePgw = (YangEnumeration)getValue("quarantine-non-responsive-pgw");
        if (quarantineNonResponsivePgw == null) {
            quarantineNonResponsivePgw = new YangEnumeration("off", new String[] {  // default
                "on",
                "off",
            });
        }
        return quarantineNonResponsivePgw;
    }

    /**
     * Sets the value for child leaf "quarantine-non-responsive-pgw",
     * using instance of generated typedef class.
     * @param quarantineNonResponsivePgwValue The value to set.
     * @param quarantineNonResponsivePgwValue used during instantiation.
     */
    public void setQuarantineNonResponsivePgwValue(YangEnumeration quarantineNonResponsivePgwValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "quarantine-non-responsive-pgw",
            quarantineNonResponsivePgwValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "quarantine-non-responsive-pgw",
     * using a String value.
     * @param quarantineNonResponsivePgwValue used during instantiation.
     */
    public void setQuarantineNonResponsivePgwValue(String quarantineNonResponsivePgwValue)
            throws JNCException {
        setQuarantineNonResponsivePgwValue(new YangEnumeration(quarantineNonResponsivePgwValue, new String[] {
             "on",
             "off",
        }));
    }

    /**
     * Unsets the value for child leaf "quarantine-non-responsive-pgw".
     */
    public void unsetQuarantineNonResponsivePgwValue() throws JNCException {
        delete("quarantine-non-responsive-pgw");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "quarantine-non-responsive-pgw" leaf will not have a value.
     */
    public void addQuarantineNonResponsivePgw() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "quarantine-non-responsive-pgw",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "quarantine-non-responsive-pgw" with operation "replace".
     */
    public void markQuarantineNonResponsivePgwReplace() throws JNCException {
        markLeafReplace("quarantineNonResponsivePgw");
    }

    /**
     * Marks the leaf "quarantine-non-responsive-pgw" with operation "merge".
     */
    public void markQuarantineNonResponsivePgwMerge() throws JNCException {
        markLeafMerge("quarantineNonResponsivePgw");
    }

    /**
     * Marks the leaf "quarantine-non-responsive-pgw" with operation "create".
     */
    public void markQuarantineNonResponsivePgwCreate() throws JNCException {
        markLeafCreate("quarantineNonResponsivePgw");
    }

    /**
     * Marks the leaf "quarantine-non-responsive-pgw" with operation "delete".
     */
    public void markQuarantineNonResponsivePgwDelete() throws JNCException {
        markLeafDelete("quarantineNonResponsivePgw");
    }

    /* Access methods for optional leaf child: "pgw-quarantine-duration". */

    /**
     * Gets the value for child leaf "pgw-quarantine-duration".
     * @return The value of the leaf.
     */
    public YangUInt16 getPgwQuarantineDurationValue() throws JNCException {
        YangUInt16 pgwQuarantineDuration = (YangUInt16)getValue("pgw-quarantine-duration");
        if (pgwQuarantineDuration == null) {
            pgwQuarantineDuration = new YangUInt16("15");  // default
        }
        return pgwQuarantineDuration;
    }

    /**
     * Sets the value for child leaf "pgw-quarantine-duration",
     * using instance of generated typedef class.
     * @param pgwQuarantineDurationValue The value to set.
     * @param pgwQuarantineDurationValue used during instantiation.
     */
    public void setPgwQuarantineDurationValue(YangUInt16 pgwQuarantineDurationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-quarantine-duration",
            pgwQuarantineDurationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pgw-quarantine-duration",
     * using Java primitive values.
     * @param pgwQuarantineDurationValue used during instantiation.
     */
    public void setPgwQuarantineDurationValue(int pgwQuarantineDurationValue)
            throws JNCException {
        setPgwQuarantineDurationValue(new YangUInt16(pgwQuarantineDurationValue));
    }

    /**
     * Sets the value for child leaf "pgw-quarantine-duration",
     * using a String value.
     * @param pgwQuarantineDurationValue used during instantiation.
     */
    public void setPgwQuarantineDurationValue(String pgwQuarantineDurationValue)
            throws JNCException {
        setPgwQuarantineDurationValue(new YangUInt16(pgwQuarantineDurationValue));
    }

    /**
     * Unsets the value for child leaf "pgw-quarantine-duration".
     */
    public void unsetPgwQuarantineDurationValue() throws JNCException {
        delete("pgw-quarantine-duration");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pgw-quarantine-duration" leaf will not have a value.
     */
    public void addPgwQuarantineDuration() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pgw-quarantine-duration",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pgw-quarantine-duration" with operation "replace".
     */
    public void markPgwQuarantineDurationReplace() throws JNCException {
        markLeafReplace("pgwQuarantineDuration");
    }

    /**
     * Marks the leaf "pgw-quarantine-duration" with operation "merge".
     */
    public void markPgwQuarantineDurationMerge() throws JNCException {
        markLeafMerge("pgwQuarantineDuration");
    }

    /**
     * Marks the leaf "pgw-quarantine-duration" with operation "create".
     */
    public void markPgwQuarantineDurationCreate() throws JNCException {
        markLeafCreate("pgwQuarantineDuration");
    }

    /**
     * Marks the leaf "pgw-quarantine-duration" with operation "delete".
     */
    public void markPgwQuarantineDurationDelete() throws JNCException {
        markLeafDelete("pgwQuarantineDuration");
    }

    /* Access methods for optional leaf child: "gtp-profile". */

    /**
     * Gets the value for child leaf "gtp-profile".
     * @return The value of the leaf.
     */
    public YangString getGtpProfileValue() throws JNCException {
        return (YangString)getValue("gtp-profile");
    }

    /**
     * Sets the value for child leaf "gtp-profile",
     * using instance of generated typedef class.
     * @param gtpProfileValue The value to set.
     * @param gtpProfileValue used during instantiation.
     */
    public void setGtpProfileValue(YangString gtpProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gtp-profile",
            gtpProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gtp-profile",
     * using a String value.
     * @param gtpProfileValue used during instantiation.
     */
    public void setGtpProfileValue(String gtpProfileValue) throws JNCException {
        setGtpProfileValue(new YangString(gtpProfileValue));
    }

    /**
     * Unsets the value for child leaf "gtp-profile".
     */
    public void unsetGtpProfileValue() throws JNCException {
        delete("gtp-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gtp-profile" leaf will not have a value.
     */
    public void addGtpProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gtp-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gtp-profile" with operation "replace".
     */
    public void markGtpProfileReplace() throws JNCException {
        markLeafReplace("gtpProfile");
    }

    /**
     * Marks the leaf "gtp-profile" with operation "merge".
     */
    public void markGtpProfileMerge() throws JNCException {
        markLeafMerge("gtpProfile");
    }

    /**
     * Marks the leaf "gtp-profile" with operation "create".
     */
    public void markGtpProfileCreate() throws JNCException {
        markLeafCreate("gtpProfile");
    }

    /**
     * Marks the leaf "gtp-profile" with operation "delete".
     */
    public void markGtpProfileDelete() throws JNCException {
        markLeafDelete("gtpProfile");
    }

    /* Access methods for optional leaf child: "echoless-path-management". */

    /**
     * Gets the value for child leaf "echoless-path-management".
     * @return The value of the leaf.
     */
    public YangEnumeration getEcholessPathManagementValue() throws JNCException {
        YangEnumeration echolessPathManagement = (YangEnumeration)getValue("echoless-path-management");
        if (echolessPathManagement == null) {
            echolessPathManagement = new YangEnumeration("disabled", new String[] {  // default
                "enabled",
                "disabled",
            });
        }
        return echolessPathManagement;
    }

    /**
     * Sets the value for child leaf "echoless-path-management",
     * using instance of generated typedef class.
     * @param echolessPathManagementValue The value to set.
     * @param echolessPathManagementValue used during instantiation.
     */
    public void setEcholessPathManagementValue(YangEnumeration echolessPathManagementValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "echoless-path-management",
            echolessPathManagementValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "echoless-path-management",
     * using a String value.
     * @param echolessPathManagementValue used during instantiation.
     */
    public void setEcholessPathManagementValue(String echolessPathManagementValue)
            throws JNCException {
        setEcholessPathManagementValue(new YangEnumeration(echolessPathManagementValue, new String[] {
             "enabled",
             "disabled",
        }));
    }

    /**
     * Unsets the value for child leaf "echoless-path-management".
     */
    public void unsetEcholessPathManagementValue() throws JNCException {
        delete("echoless-path-management");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "echoless-path-management" leaf will not have a value.
     */
    public void addEcholessPathManagement() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "echoless-path-management",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "echoless-path-management" with operation "replace".
     */
    public void markEcholessPathManagementReplace() throws JNCException {
        markLeafReplace("echolessPathManagement");
    }

    /**
     * Marks the leaf "echoless-path-management" with operation "merge".
     */
    public void markEcholessPathManagementMerge() throws JNCException {
        markLeafMerge("echolessPathManagement");
    }

    /**
     * Marks the leaf "echoless-path-management" with operation "create".
     */
    public void markEcholessPathManagementCreate() throws JNCException {
        markLeafCreate("echolessPathManagement");
    }

    /**
     * Marks the leaf "echoless-path-management" with operation "delete".
     */
    public void markEcholessPathManagementDelete() throws JNCException {
        markLeafDelete("echolessPathManagement");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
