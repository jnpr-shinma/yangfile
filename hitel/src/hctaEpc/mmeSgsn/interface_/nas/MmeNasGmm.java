/* 
 * @(#)MmeNasGmm.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.nas;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/nas/mme-nas-gmm"
 * <p>
 * See line 305 in
 * sgsnScConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeNasGmm extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeNasGmm object.
     */
    public MmeNasGmm() {
        super(Epc.NAMESPACE, "mme-nas-gmm");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeNasGmm clone() {
        return (MmeNasGmm)cloneContent(new MmeNasGmm());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeNasGmm cloneShallow() {
        return (MmeNasGmm)cloneShallowContent(new MmeNasGmm());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mobile-reachable-timer",
            "cancel-location-timer",
            "paging-timer-t3313",
            "paging-retry-n3313",
            "nwk-init-detach-timer-t3322",
            "nwk-init-detach-retry-n3322",
            "id-request-timer-t3370",
            "id-request-retry-n3370",
            "radio-priority-level",
            "auth-ciphering-timer-t3360",
            "auth-ciphering-retry-n3360",
            "reset-ppf-radio-status",
            "ptmsi-realloc-timer-t3350",
            "ptmsi-realloc-retry-n3350",
            "t3-tunnel-timer",
            "opt-authentication-control",
            "send-old-and-new-tlli",
            "second-auth-attempts",
            "ready-timer-t3314",
            "periodic-ra-update-timer-t3312",
            "gprs-ciphering-algorithms",
            "umts-ciphering-algorithms",
            "attach-acc-force-standby",
            "detach-req-force-standby",
            "detach-acc-force-standby",
            "intra-rau-acc-force-standby",
            "inter-rau-acc-force-standby",
            "rau-reject-force-standby",
            "umts-integrity-algorithms",
            "ptmsi-lifetime",
            "periodic-rau-tmr-t3312-offload",
            "ims-voice-sgsn",
            "cancel-location-detach-cause",
        };
    }

    /* Access methods for optional leaf child: "mobile-reachable-timer". */

    /**
     * Gets the value for child leaf "mobile-reachable-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getMobileReachableTimerValue() throws JNCException {
        YangUInt8 mobileReachableTimer = (YangUInt8)getValue("mobile-reachable-timer");
        if (mobileReachableTimer == null) {
            mobileReachableTimer = new YangUInt8("58");  // default
        }
        return mobileReachableTimer;
    }

    /**
     * Sets the value for child leaf "mobile-reachable-timer",
     * using instance of generated typedef class.
     * @param mobileReachableTimerValue The value to set.
     * @param mobileReachableTimerValue used during instantiation.
     */
    public void setMobileReachableTimerValue(YangUInt8 mobileReachableTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mobile-reachable-timer",
            mobileReachableTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mobile-reachable-timer",
     * using Java primitive values.
     * @param mobileReachableTimerValue used during instantiation.
     */
    public void setMobileReachableTimerValue(short mobileReachableTimerValue)
            throws JNCException {
        setMobileReachableTimerValue(new YangUInt8(mobileReachableTimerValue));
    }

    /**
     * Sets the value for child leaf "mobile-reachable-timer",
     * using a String value.
     * @param mobileReachableTimerValue used during instantiation.
     */
    public void setMobileReachableTimerValue(String mobileReachableTimerValue)
            throws JNCException {
        setMobileReachableTimerValue(new YangUInt8(mobileReachableTimerValue));
    }

    /**
     * Unsets the value for child leaf "mobile-reachable-timer".
     */
    public void unsetMobileReachableTimerValue() throws JNCException {
        delete("mobile-reachable-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mobile-reachable-timer" leaf will not have a value.
     */
    public void addMobileReachableTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mobile-reachable-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mobile-reachable-timer" with operation "replace".
     */
    public void markMobileReachableTimerReplace() throws JNCException {
        markLeafReplace("mobileReachableTimer");
    }

    /**
     * Marks the leaf "mobile-reachable-timer" with operation "merge".
     */
    public void markMobileReachableTimerMerge() throws JNCException {
        markLeafMerge("mobileReachableTimer");
    }

    /**
     * Marks the leaf "mobile-reachable-timer" with operation "create".
     */
    public void markMobileReachableTimerCreate() throws JNCException {
        markLeafCreate("mobileReachableTimer");
    }

    /**
     * Marks the leaf "mobile-reachable-timer" with operation "delete".
     */
    public void markMobileReachableTimerDelete() throws JNCException {
        markLeafDelete("mobileReachableTimer");
    }

    /* Access methods for optional leaf child: "cancel-location-timer". */

    /**
     * Gets the value for child leaf "cancel-location-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getCancelLocationTimerValue() throws JNCException {
        YangUInt8 cancelLocationTimer = (YangUInt8)getValue("cancel-location-timer");
        if (cancelLocationTimer == null) {
            cancelLocationTimer = new YangUInt8("20");  // default
        }
        return cancelLocationTimer;
    }

    /**
     * Sets the value for child leaf "cancel-location-timer",
     * using instance of generated typedef class.
     * @param cancelLocationTimerValue The value to set.
     * @param cancelLocationTimerValue used during instantiation.
     */
    public void setCancelLocationTimerValue(YangUInt8 cancelLocationTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cancel-location-timer",
            cancelLocationTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cancel-location-timer",
     * using Java primitive values.
     * @param cancelLocationTimerValue used during instantiation.
     */
    public void setCancelLocationTimerValue(short cancelLocationTimerValue)
            throws JNCException {
        setCancelLocationTimerValue(new YangUInt8(cancelLocationTimerValue));
    }

    /**
     * Sets the value for child leaf "cancel-location-timer",
     * using a String value.
     * @param cancelLocationTimerValue used during instantiation.
     */
    public void setCancelLocationTimerValue(String cancelLocationTimerValue)
            throws JNCException {
        setCancelLocationTimerValue(new YangUInt8(cancelLocationTimerValue));
    }

    /**
     * Unsets the value for child leaf "cancel-location-timer".
     */
    public void unsetCancelLocationTimerValue() throws JNCException {
        delete("cancel-location-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cancel-location-timer" leaf will not have a value.
     */
    public void addCancelLocationTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cancel-location-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cancel-location-timer" with operation "replace".
     */
    public void markCancelLocationTimerReplace() throws JNCException {
        markLeafReplace("cancelLocationTimer");
    }

    /**
     * Marks the leaf "cancel-location-timer" with operation "merge".
     */
    public void markCancelLocationTimerMerge() throws JNCException {
        markLeafMerge("cancelLocationTimer");
    }

    /**
     * Marks the leaf "cancel-location-timer" with operation "create".
     */
    public void markCancelLocationTimerCreate() throws JNCException {
        markLeafCreate("cancelLocationTimer");
    }

    /**
     * Marks the leaf "cancel-location-timer" with operation "delete".
     */
    public void markCancelLocationTimerDelete() throws JNCException {
        markLeafDelete("cancelLocationTimer");
    }

    /* Access methods for optional leaf child: "paging-timer-t3313". */

    /**
     * Gets the value for child leaf "paging-timer-t3313".
     * @return The value of the leaf.
     */
    public YangUInt8 getPagingTimerT3313Value() throws JNCException {
        YangUInt8 pagingTimerT3313 = (YangUInt8)getValue("paging-timer-t3313");
        if (pagingTimerT3313 == null) {
            pagingTimerT3313 = new YangUInt8("8");  // default
        }
        return pagingTimerT3313;
    }

    /**
     * Sets the value for child leaf "paging-timer-t3313",
     * using instance of generated typedef class.
     * @param pagingTimerT3313Value The value to set.
     * @param pagingTimerT3313Value used during instantiation.
     */
    public void setPagingTimerT3313Value(YangUInt8 pagingTimerT3313Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-timer-t3313",
            pagingTimerT3313Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "paging-timer-t3313",
     * using Java primitive values.
     * @param pagingTimerT3313Value used during instantiation.
     */
    public void setPagingTimerT3313Value(short pagingTimerT3313Value)
            throws JNCException {
        setPagingTimerT3313Value(new YangUInt8(pagingTimerT3313Value));
    }

    /**
     * Sets the value for child leaf "paging-timer-t3313",
     * using a String value.
     * @param pagingTimerT3313Value used during instantiation.
     */
    public void setPagingTimerT3313Value(String pagingTimerT3313Value)
            throws JNCException {
        setPagingTimerT3313Value(new YangUInt8(pagingTimerT3313Value));
    }

    /**
     * Unsets the value for child leaf "paging-timer-t3313".
     */
    public void unsetPagingTimerT3313Value() throws JNCException {
        delete("paging-timer-t3313");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "paging-timer-t3313" leaf will not have a value.
     */
    public void addPagingTimerT3313() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-timer-t3313",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "paging-timer-t3313" with operation "replace".
     */
    public void markPagingTimerT3313Replace() throws JNCException {
        markLeafReplace("pagingTimerT3313");
    }

    /**
     * Marks the leaf "paging-timer-t3313" with operation "merge".
     */
    public void markPagingTimerT3313Merge() throws JNCException {
        markLeafMerge("pagingTimerT3313");
    }

    /**
     * Marks the leaf "paging-timer-t3313" with operation "create".
     */
    public void markPagingTimerT3313Create() throws JNCException {
        markLeafCreate("pagingTimerT3313");
    }

    /**
     * Marks the leaf "paging-timer-t3313" with operation "delete".
     */
    public void markPagingTimerT3313Delete() throws JNCException {
        markLeafDelete("pagingTimerT3313");
    }

    /* Access methods for optional leaf child: "paging-retry-n3313". */

    /**
     * Gets the value for child leaf "paging-retry-n3313".
     * @return The value of the leaf.
     */
    public YangUInt8 getPagingRetryN3313Value() throws JNCException {
        YangUInt8 pagingRetryN3313 = (YangUInt8)getValue("paging-retry-n3313");
        if (pagingRetryN3313 == null) {
            pagingRetryN3313 = new YangUInt8("1");  // default
        }
        return pagingRetryN3313;
    }

    /**
     * Sets the value for child leaf "paging-retry-n3313",
     * using instance of generated typedef class.
     * @param pagingRetryN3313Value The value to set.
     * @param pagingRetryN3313Value used during instantiation.
     */
    public void setPagingRetryN3313Value(YangUInt8 pagingRetryN3313Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-retry-n3313",
            pagingRetryN3313Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "paging-retry-n3313",
     * using Java primitive values.
     * @param pagingRetryN3313Value used during instantiation.
     */
    public void setPagingRetryN3313Value(short pagingRetryN3313Value)
            throws JNCException {
        setPagingRetryN3313Value(new YangUInt8(pagingRetryN3313Value));
    }

    /**
     * Sets the value for child leaf "paging-retry-n3313",
     * using a String value.
     * @param pagingRetryN3313Value used during instantiation.
     */
    public void setPagingRetryN3313Value(String pagingRetryN3313Value)
            throws JNCException {
        setPagingRetryN3313Value(new YangUInt8(pagingRetryN3313Value));
    }

    /**
     * Unsets the value for child leaf "paging-retry-n3313".
     */
    public void unsetPagingRetryN3313Value() throws JNCException {
        delete("paging-retry-n3313");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "paging-retry-n3313" leaf will not have a value.
     */
    public void addPagingRetryN3313() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-retry-n3313",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "paging-retry-n3313" with operation "replace".
     */
    public void markPagingRetryN3313Replace() throws JNCException {
        markLeafReplace("pagingRetryN3313");
    }

    /**
     * Marks the leaf "paging-retry-n3313" with operation "merge".
     */
    public void markPagingRetryN3313Merge() throws JNCException {
        markLeafMerge("pagingRetryN3313");
    }

    /**
     * Marks the leaf "paging-retry-n3313" with operation "create".
     */
    public void markPagingRetryN3313Create() throws JNCException {
        markLeafCreate("pagingRetryN3313");
    }

    /**
     * Marks the leaf "paging-retry-n3313" with operation "delete".
     */
    public void markPagingRetryN3313Delete() throws JNCException {
        markLeafDelete("pagingRetryN3313");
    }

    /* Access methods for optional leaf child: "nwk-init-detach-timer-t3322". */

    /**
     * Gets the value for child leaf "nwk-init-detach-timer-t3322".
     * @return The value of the leaf.
     */
    public YangUInt8 getNwkInitDetachTimerT3322Value() throws JNCException {
        YangUInt8 nwkInitDetachTimerT3322 = (YangUInt8)getValue("nwk-init-detach-timer-t3322");
        if (nwkInitDetachTimerT3322 == null) {
            nwkInitDetachTimerT3322 = new YangUInt8("6");  // default
        }
        return nwkInitDetachTimerT3322;
    }

    /**
     * Sets the value for child leaf "nwk-init-detach-timer-t3322",
     * using instance of generated typedef class.
     * @param nwkInitDetachTimerT3322Value The value to set.
     * @param nwkInitDetachTimerT3322Value used during instantiation.
     */
    public void setNwkInitDetachTimerT3322Value(YangUInt8 nwkInitDetachTimerT3322Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-init-detach-timer-t3322",
            nwkInitDetachTimerT3322Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nwk-init-detach-timer-t3322",
     * using Java primitive values.
     * @param nwkInitDetachTimerT3322Value used during instantiation.
     */
    public void setNwkInitDetachTimerT3322Value(short nwkInitDetachTimerT3322Value)
            throws JNCException {
        setNwkInitDetachTimerT3322Value(new YangUInt8(nwkInitDetachTimerT3322Value));
    }

    /**
     * Sets the value for child leaf "nwk-init-detach-timer-t3322",
     * using a String value.
     * @param nwkInitDetachTimerT3322Value used during instantiation.
     */
    public void setNwkInitDetachTimerT3322Value(String nwkInitDetachTimerT3322Value)
            throws JNCException {
        setNwkInitDetachTimerT3322Value(new YangUInt8(nwkInitDetachTimerT3322Value));
    }

    /**
     * Unsets the value for child leaf "nwk-init-detach-timer-t3322".
     */
    public void unsetNwkInitDetachTimerT3322Value() throws JNCException {
        delete("nwk-init-detach-timer-t3322");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nwk-init-detach-timer-t3322" leaf will not have a value.
     */
    public void addNwkInitDetachTimerT3322() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-init-detach-timer-t3322",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nwk-init-detach-timer-t3322" with operation "replace".
     */
    public void markNwkInitDetachTimerT3322Replace() throws JNCException {
        markLeafReplace("nwkInitDetachTimerT3322");
    }

    /**
     * Marks the leaf "nwk-init-detach-timer-t3322" with operation "merge".
     */
    public void markNwkInitDetachTimerT3322Merge() throws JNCException {
        markLeafMerge("nwkInitDetachTimerT3322");
    }

    /**
     * Marks the leaf "nwk-init-detach-timer-t3322" with operation "create".
     */
    public void markNwkInitDetachTimerT3322Create() throws JNCException {
        markLeafCreate("nwkInitDetachTimerT3322");
    }

    /**
     * Marks the leaf "nwk-init-detach-timer-t3322" with operation "delete".
     */
    public void markNwkInitDetachTimerT3322Delete() throws JNCException {
        markLeafDelete("nwkInitDetachTimerT3322");
    }

    /* Access methods for optional leaf child: "nwk-init-detach-retry-n3322". */

    /**
     * Gets the value for child leaf "nwk-init-detach-retry-n3322".
     * @return The value of the leaf.
     */
    public YangUInt8 getNwkInitDetachRetryN3322Value() throws JNCException {
        YangUInt8 nwkInitDetachRetryN3322 = (YangUInt8)getValue("nwk-init-detach-retry-n3322");
        if (nwkInitDetachRetryN3322 == null) {
            nwkInitDetachRetryN3322 = new YangUInt8("4");  // default
        }
        return nwkInitDetachRetryN3322;
    }

    /**
     * Sets the value for child leaf "nwk-init-detach-retry-n3322",
     * using instance of generated typedef class.
     * @param nwkInitDetachRetryN3322Value The value to set.
     * @param nwkInitDetachRetryN3322Value used during instantiation.
     */
    public void setNwkInitDetachRetryN3322Value(YangUInt8 nwkInitDetachRetryN3322Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-init-detach-retry-n3322",
            nwkInitDetachRetryN3322Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nwk-init-detach-retry-n3322",
     * using Java primitive values.
     * @param nwkInitDetachRetryN3322Value used during instantiation.
     */
    public void setNwkInitDetachRetryN3322Value(short nwkInitDetachRetryN3322Value)
            throws JNCException {
        setNwkInitDetachRetryN3322Value(new YangUInt8(nwkInitDetachRetryN3322Value));
    }

    /**
     * Sets the value for child leaf "nwk-init-detach-retry-n3322",
     * using a String value.
     * @param nwkInitDetachRetryN3322Value used during instantiation.
     */
    public void setNwkInitDetachRetryN3322Value(String nwkInitDetachRetryN3322Value)
            throws JNCException {
        setNwkInitDetachRetryN3322Value(new YangUInt8(nwkInitDetachRetryN3322Value));
    }

    /**
     * Unsets the value for child leaf "nwk-init-detach-retry-n3322".
     */
    public void unsetNwkInitDetachRetryN3322Value() throws JNCException {
        delete("nwk-init-detach-retry-n3322");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nwk-init-detach-retry-n3322" leaf will not have a value.
     */
    public void addNwkInitDetachRetryN3322() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-init-detach-retry-n3322",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nwk-init-detach-retry-n3322" with operation "replace".
     */
    public void markNwkInitDetachRetryN3322Replace() throws JNCException {
        markLeafReplace("nwkInitDetachRetryN3322");
    }

    /**
     * Marks the leaf "nwk-init-detach-retry-n3322" with operation "merge".
     */
    public void markNwkInitDetachRetryN3322Merge() throws JNCException {
        markLeafMerge("nwkInitDetachRetryN3322");
    }

    /**
     * Marks the leaf "nwk-init-detach-retry-n3322" with operation "create".
     */
    public void markNwkInitDetachRetryN3322Create() throws JNCException {
        markLeafCreate("nwkInitDetachRetryN3322");
    }

    /**
     * Marks the leaf "nwk-init-detach-retry-n3322" with operation "delete".
     */
    public void markNwkInitDetachRetryN3322Delete() throws JNCException {
        markLeafDelete("nwkInitDetachRetryN3322");
    }

    /* Access methods for optional leaf child: "id-request-timer-t3370". */

    /**
     * Gets the value for child leaf "id-request-timer-t3370".
     * @return The value of the leaf.
     */
    public YangUInt8 getIdRequestTimerT3370Value() throws JNCException {
        YangUInt8 idRequestTimerT3370 = (YangUInt8)getValue("id-request-timer-t3370");
        if (idRequestTimerT3370 == null) {
            idRequestTimerT3370 = new YangUInt8("6");  // default
        }
        return idRequestTimerT3370;
    }

    /**
     * Sets the value for child leaf "id-request-timer-t3370",
     * using instance of generated typedef class.
     * @param idRequestTimerT3370Value The value to set.
     * @param idRequestTimerT3370Value used during instantiation.
     */
    public void setIdRequestTimerT3370Value(YangUInt8 idRequestTimerT3370Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "id-request-timer-t3370",
            idRequestTimerT3370Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "id-request-timer-t3370",
     * using Java primitive values.
     * @param idRequestTimerT3370Value used during instantiation.
     */
    public void setIdRequestTimerT3370Value(short idRequestTimerT3370Value)
            throws JNCException {
        setIdRequestTimerT3370Value(new YangUInt8(idRequestTimerT3370Value));
    }

    /**
     * Sets the value for child leaf "id-request-timer-t3370",
     * using a String value.
     * @param idRequestTimerT3370Value used during instantiation.
     */
    public void setIdRequestTimerT3370Value(String idRequestTimerT3370Value)
            throws JNCException {
        setIdRequestTimerT3370Value(new YangUInt8(idRequestTimerT3370Value));
    }

    /**
     * Unsets the value for child leaf "id-request-timer-t3370".
     */
    public void unsetIdRequestTimerT3370Value() throws JNCException {
        delete("id-request-timer-t3370");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "id-request-timer-t3370" leaf will not have a value.
     */
    public void addIdRequestTimerT3370() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "id-request-timer-t3370",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "id-request-timer-t3370" with operation "replace".
     */
    public void markIdRequestTimerT3370Replace() throws JNCException {
        markLeafReplace("idRequestTimerT3370");
    }

    /**
     * Marks the leaf "id-request-timer-t3370" with operation "merge".
     */
    public void markIdRequestTimerT3370Merge() throws JNCException {
        markLeafMerge("idRequestTimerT3370");
    }

    /**
     * Marks the leaf "id-request-timer-t3370" with operation "create".
     */
    public void markIdRequestTimerT3370Create() throws JNCException {
        markLeafCreate("idRequestTimerT3370");
    }

    /**
     * Marks the leaf "id-request-timer-t3370" with operation "delete".
     */
    public void markIdRequestTimerT3370Delete() throws JNCException {
        markLeafDelete("idRequestTimerT3370");
    }

    /* Access methods for optional leaf child: "id-request-retry-n3370". */

    /**
     * Gets the value for child leaf "id-request-retry-n3370".
     * @return The value of the leaf.
     */
    public YangUInt8 getIdRequestRetryN3370Value() throws JNCException {
        YangUInt8 idRequestRetryN3370 = (YangUInt8)getValue("id-request-retry-n3370");
        if (idRequestRetryN3370 == null) {
            idRequestRetryN3370 = new YangUInt8("4");  // default
        }
        return idRequestRetryN3370;
    }

    /**
     * Sets the value for child leaf "id-request-retry-n3370",
     * using instance of generated typedef class.
     * @param idRequestRetryN3370Value The value to set.
     * @param idRequestRetryN3370Value used during instantiation.
     */
    public void setIdRequestRetryN3370Value(YangUInt8 idRequestRetryN3370Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "id-request-retry-n3370",
            idRequestRetryN3370Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "id-request-retry-n3370",
     * using Java primitive values.
     * @param idRequestRetryN3370Value used during instantiation.
     */
    public void setIdRequestRetryN3370Value(short idRequestRetryN3370Value)
            throws JNCException {
        setIdRequestRetryN3370Value(new YangUInt8(idRequestRetryN3370Value));
    }

    /**
     * Sets the value for child leaf "id-request-retry-n3370",
     * using a String value.
     * @param idRequestRetryN3370Value used during instantiation.
     */
    public void setIdRequestRetryN3370Value(String idRequestRetryN3370Value)
            throws JNCException {
        setIdRequestRetryN3370Value(new YangUInt8(idRequestRetryN3370Value));
    }

    /**
     * Unsets the value for child leaf "id-request-retry-n3370".
     */
    public void unsetIdRequestRetryN3370Value() throws JNCException {
        delete("id-request-retry-n3370");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "id-request-retry-n3370" leaf will not have a value.
     */
    public void addIdRequestRetryN3370() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "id-request-retry-n3370",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "id-request-retry-n3370" with operation "replace".
     */
    public void markIdRequestRetryN3370Replace() throws JNCException {
        markLeafReplace("idRequestRetryN3370");
    }

    /**
     * Marks the leaf "id-request-retry-n3370" with operation "merge".
     */
    public void markIdRequestRetryN3370Merge() throws JNCException {
        markLeafMerge("idRequestRetryN3370");
    }

    /**
     * Marks the leaf "id-request-retry-n3370" with operation "create".
     */
    public void markIdRequestRetryN3370Create() throws JNCException {
        markLeafCreate("idRequestRetryN3370");
    }

    /**
     * Marks the leaf "id-request-retry-n3370" with operation "delete".
     */
    public void markIdRequestRetryN3370Delete() throws JNCException {
        markLeafDelete("idRequestRetryN3370");
    }

    /* Access methods for optional leaf child: "radio-priority-level". */

    /**
     * Gets the value for child leaf "radio-priority-level".
     * @return The value of the leaf.
     */
    public YangUInt8 getRadioPriorityLevelValue() throws JNCException {
        YangUInt8 radioPriorityLevel = (YangUInt8)getValue("radio-priority-level");
        if (radioPriorityLevel == null) {
            radioPriorityLevel = new YangUInt8("4");  // default
        }
        return radioPriorityLevel;
    }

    /**
     * Sets the value for child leaf "radio-priority-level",
     * using instance of generated typedef class.
     * @param radioPriorityLevelValue The value to set.
     * @param radioPriorityLevelValue used during instantiation.
     */
    public void setRadioPriorityLevelValue(YangUInt8 radioPriorityLevelValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "radio-priority-level",
            radioPriorityLevelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "radio-priority-level",
     * using Java primitive values.
     * @param radioPriorityLevelValue used during instantiation.
     */
    public void setRadioPriorityLevelValue(short radioPriorityLevelValue)
            throws JNCException {
        setRadioPriorityLevelValue(new YangUInt8(radioPriorityLevelValue));
    }

    /**
     * Sets the value for child leaf "radio-priority-level",
     * using a String value.
     * @param radioPriorityLevelValue used during instantiation.
     */
    public void setRadioPriorityLevelValue(String radioPriorityLevelValue)
            throws JNCException {
        setRadioPriorityLevelValue(new YangUInt8(radioPriorityLevelValue));
    }

    /**
     * Unsets the value for child leaf "radio-priority-level".
     */
    public void unsetRadioPriorityLevelValue() throws JNCException {
        delete("radio-priority-level");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "radio-priority-level" leaf will not have a value.
     */
    public void addRadioPriorityLevel() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "radio-priority-level",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "radio-priority-level" with operation "replace".
     */
    public void markRadioPriorityLevelReplace() throws JNCException {
        markLeafReplace("radioPriorityLevel");
    }

    /**
     * Marks the leaf "radio-priority-level" with operation "merge".
     */
    public void markRadioPriorityLevelMerge() throws JNCException {
        markLeafMerge("radioPriorityLevel");
    }

    /**
     * Marks the leaf "radio-priority-level" with operation "create".
     */
    public void markRadioPriorityLevelCreate() throws JNCException {
        markLeafCreate("radioPriorityLevel");
    }

    /**
     * Marks the leaf "radio-priority-level" with operation "delete".
     */
    public void markRadioPriorityLevelDelete() throws JNCException {
        markLeafDelete("radioPriorityLevel");
    }

    /* Access methods for optional leaf child: "auth-ciphering-timer-t3360". */

    /**
     * Gets the value for child leaf "auth-ciphering-timer-t3360".
     * @return The value of the leaf.
     */
    public YangUInt8 getAuthCipheringTimerT3360Value() throws JNCException {
        YangUInt8 authCipheringTimerT3360 = (YangUInt8)getValue("auth-ciphering-timer-t3360");
        if (authCipheringTimerT3360 == null) {
            authCipheringTimerT3360 = new YangUInt8("6");  // default
        }
        return authCipheringTimerT3360;
    }

    /**
     * Sets the value for child leaf "auth-ciphering-timer-t3360",
     * using instance of generated typedef class.
     * @param authCipheringTimerT3360Value The value to set.
     * @param authCipheringTimerT3360Value used during instantiation.
     */
    public void setAuthCipheringTimerT3360Value(YangUInt8 authCipheringTimerT3360Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "auth-ciphering-timer-t3360",
            authCipheringTimerT3360Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "auth-ciphering-timer-t3360",
     * using Java primitive values.
     * @param authCipheringTimerT3360Value used during instantiation.
     */
    public void setAuthCipheringTimerT3360Value(short authCipheringTimerT3360Value)
            throws JNCException {
        setAuthCipheringTimerT3360Value(new YangUInt8(authCipheringTimerT3360Value));
    }

    /**
     * Sets the value for child leaf "auth-ciphering-timer-t3360",
     * using a String value.
     * @param authCipheringTimerT3360Value used during instantiation.
     */
    public void setAuthCipheringTimerT3360Value(String authCipheringTimerT3360Value)
            throws JNCException {
        setAuthCipheringTimerT3360Value(new YangUInt8(authCipheringTimerT3360Value));
    }

    /**
     * Unsets the value for child leaf "auth-ciphering-timer-t3360".
     */
    public void unsetAuthCipheringTimerT3360Value() throws JNCException {
        delete("auth-ciphering-timer-t3360");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "auth-ciphering-timer-t3360" leaf will not have a value.
     */
    public void addAuthCipheringTimerT3360() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "auth-ciphering-timer-t3360",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "auth-ciphering-timer-t3360" with operation "replace".
     */
    public void markAuthCipheringTimerT3360Replace() throws JNCException {
        markLeafReplace("authCipheringTimerT3360");
    }

    /**
     * Marks the leaf "auth-ciphering-timer-t3360" with operation "merge".
     */
    public void markAuthCipheringTimerT3360Merge() throws JNCException {
        markLeafMerge("authCipheringTimerT3360");
    }

    /**
     * Marks the leaf "auth-ciphering-timer-t3360" with operation "create".
     */
    public void markAuthCipheringTimerT3360Create() throws JNCException {
        markLeafCreate("authCipheringTimerT3360");
    }

    /**
     * Marks the leaf "auth-ciphering-timer-t3360" with operation "delete".
     */
    public void markAuthCipheringTimerT3360Delete() throws JNCException {
        markLeafDelete("authCipheringTimerT3360");
    }

    /* Access methods for optional leaf child: "auth-ciphering-retry-n3360". */

    /**
     * Gets the value for child leaf "auth-ciphering-retry-n3360".
     * @return The value of the leaf.
     */
    public YangUInt8 getAuthCipheringRetryN3360Value() throws JNCException {
        YangUInt8 authCipheringRetryN3360 = (YangUInt8)getValue("auth-ciphering-retry-n3360");
        if (authCipheringRetryN3360 == null) {
            authCipheringRetryN3360 = new YangUInt8("4");  // default
        }
        return authCipheringRetryN3360;
    }

    /**
     * Sets the value for child leaf "auth-ciphering-retry-n3360",
     * using instance of generated typedef class.
     * @param authCipheringRetryN3360Value The value to set.
     * @param authCipheringRetryN3360Value used during instantiation.
     */
    public void setAuthCipheringRetryN3360Value(YangUInt8 authCipheringRetryN3360Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "auth-ciphering-retry-n3360",
            authCipheringRetryN3360Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "auth-ciphering-retry-n3360",
     * using Java primitive values.
     * @param authCipheringRetryN3360Value used during instantiation.
     */
    public void setAuthCipheringRetryN3360Value(short authCipheringRetryN3360Value)
            throws JNCException {
        setAuthCipheringRetryN3360Value(new YangUInt8(authCipheringRetryN3360Value));
    }

    /**
     * Sets the value for child leaf "auth-ciphering-retry-n3360",
     * using a String value.
     * @param authCipheringRetryN3360Value used during instantiation.
     */
    public void setAuthCipheringRetryN3360Value(String authCipheringRetryN3360Value)
            throws JNCException {
        setAuthCipheringRetryN3360Value(new YangUInt8(authCipheringRetryN3360Value));
    }

    /**
     * Unsets the value for child leaf "auth-ciphering-retry-n3360".
     */
    public void unsetAuthCipheringRetryN3360Value() throws JNCException {
        delete("auth-ciphering-retry-n3360");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "auth-ciphering-retry-n3360" leaf will not have a value.
     */
    public void addAuthCipheringRetryN3360() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "auth-ciphering-retry-n3360",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "auth-ciphering-retry-n3360" with operation "replace".
     */
    public void markAuthCipheringRetryN3360Replace() throws JNCException {
        markLeafReplace("authCipheringRetryN3360");
    }

    /**
     * Marks the leaf "auth-ciphering-retry-n3360" with operation "merge".
     */
    public void markAuthCipheringRetryN3360Merge() throws JNCException {
        markLeafMerge("authCipheringRetryN3360");
    }

    /**
     * Marks the leaf "auth-ciphering-retry-n3360" with operation "create".
     */
    public void markAuthCipheringRetryN3360Create() throws JNCException {
        markLeafCreate("authCipheringRetryN3360");
    }

    /**
     * Marks the leaf "auth-ciphering-retry-n3360" with operation "delete".
     */
    public void markAuthCipheringRetryN3360Delete() throws JNCException {
        markLeafDelete("authCipheringRetryN3360");
    }

    /* Access methods for optional leaf child: "reset-ppf-radio-status". */

    /**
     * Gets the value for child leaf "reset-ppf-radio-status".
     * @return The value of the leaf.
     */
    public YangEnumeration getResetPpfRadioStatusValue() throws JNCException {
        YangEnumeration resetPpfRadioStatus = (YangEnumeration)getValue("reset-ppf-radio-status");
        if (resetPpfRadioStatus == null) {
            resetPpfRadioStatus = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return resetPpfRadioStatus;
    }

    /**
     * Sets the value for child leaf "reset-ppf-radio-status",
     * using instance of generated typedef class.
     * @param resetPpfRadioStatusValue The value to set.
     * @param resetPpfRadioStatusValue used during instantiation.
     */
    public void setResetPpfRadioStatusValue(YangEnumeration resetPpfRadioStatusValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-ppf-radio-status",
            resetPpfRadioStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "reset-ppf-radio-status",
     * using a String value.
     * @param resetPpfRadioStatusValue used during instantiation.
     */
    public void setResetPpfRadioStatusValue(String resetPpfRadioStatusValue)
            throws JNCException {
        setResetPpfRadioStatusValue(new YangEnumeration(resetPpfRadioStatusValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "reset-ppf-radio-status".
     */
    public void unsetResetPpfRadioStatusValue() throws JNCException {
        delete("reset-ppf-radio-status");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "reset-ppf-radio-status" leaf will not have a value.
     */
    public void addResetPpfRadioStatus() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-ppf-radio-status",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "reset-ppf-radio-status" with operation "replace".
     */
    public void markResetPpfRadioStatusReplace() throws JNCException {
        markLeafReplace("resetPpfRadioStatus");
    }

    /**
     * Marks the leaf "reset-ppf-radio-status" with operation "merge".
     */
    public void markResetPpfRadioStatusMerge() throws JNCException {
        markLeafMerge("resetPpfRadioStatus");
    }

    /**
     * Marks the leaf "reset-ppf-radio-status" with operation "create".
     */
    public void markResetPpfRadioStatusCreate() throws JNCException {
        markLeafCreate("resetPpfRadioStatus");
    }

    /**
     * Marks the leaf "reset-ppf-radio-status" with operation "delete".
     */
    public void markResetPpfRadioStatusDelete() throws JNCException {
        markLeafDelete("resetPpfRadioStatus");
    }

    /* Access methods for optional leaf child: "ptmsi-realloc-timer-t3350". */

    /**
     * Gets the value for child leaf "ptmsi-realloc-timer-t3350".
     * @return The value of the leaf.
     */
    public YangUInt8 getPtmsiReallocTimerT3350Value() throws JNCException {
        YangUInt8 ptmsiReallocTimerT3350 = (YangUInt8)getValue("ptmsi-realloc-timer-t3350");
        if (ptmsiReallocTimerT3350 == null) {
            ptmsiReallocTimerT3350 = new YangUInt8("6");  // default
        }
        return ptmsiReallocTimerT3350;
    }

    /**
     * Sets the value for child leaf "ptmsi-realloc-timer-t3350",
     * using instance of generated typedef class.
     * @param ptmsiReallocTimerT3350Value The value to set.
     * @param ptmsiReallocTimerT3350Value used during instantiation.
     */
    public void setPtmsiReallocTimerT3350Value(YangUInt8 ptmsiReallocTimerT3350Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ptmsi-realloc-timer-t3350",
            ptmsiReallocTimerT3350Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ptmsi-realloc-timer-t3350",
     * using Java primitive values.
     * @param ptmsiReallocTimerT3350Value used during instantiation.
     */
    public void setPtmsiReallocTimerT3350Value(short ptmsiReallocTimerT3350Value)
            throws JNCException {
        setPtmsiReallocTimerT3350Value(new YangUInt8(ptmsiReallocTimerT3350Value));
    }

    /**
     * Sets the value for child leaf "ptmsi-realloc-timer-t3350",
     * using a String value.
     * @param ptmsiReallocTimerT3350Value used during instantiation.
     */
    public void setPtmsiReallocTimerT3350Value(String ptmsiReallocTimerT3350Value)
            throws JNCException {
        setPtmsiReallocTimerT3350Value(new YangUInt8(ptmsiReallocTimerT3350Value));
    }

    /**
     * Unsets the value for child leaf "ptmsi-realloc-timer-t3350".
     */
    public void unsetPtmsiReallocTimerT3350Value() throws JNCException {
        delete("ptmsi-realloc-timer-t3350");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ptmsi-realloc-timer-t3350" leaf will not have a value.
     */
    public void addPtmsiReallocTimerT3350() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ptmsi-realloc-timer-t3350",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ptmsi-realloc-timer-t3350" with operation "replace".
     */
    public void markPtmsiReallocTimerT3350Replace() throws JNCException {
        markLeafReplace("ptmsiReallocTimerT3350");
    }

    /**
     * Marks the leaf "ptmsi-realloc-timer-t3350" with operation "merge".
     */
    public void markPtmsiReallocTimerT3350Merge() throws JNCException {
        markLeafMerge("ptmsiReallocTimerT3350");
    }

    /**
     * Marks the leaf "ptmsi-realloc-timer-t3350" with operation "create".
     */
    public void markPtmsiReallocTimerT3350Create() throws JNCException {
        markLeafCreate("ptmsiReallocTimerT3350");
    }

    /**
     * Marks the leaf "ptmsi-realloc-timer-t3350" with operation "delete".
     */
    public void markPtmsiReallocTimerT3350Delete() throws JNCException {
        markLeafDelete("ptmsiReallocTimerT3350");
    }

    /* Access methods for optional leaf child: "ptmsi-realloc-retry-n3350". */

    /**
     * Gets the value for child leaf "ptmsi-realloc-retry-n3350".
     * @return The value of the leaf.
     */
    public YangUInt8 getPtmsiReallocRetryN3350Value() throws JNCException {
        YangUInt8 ptmsiReallocRetryN3350 = (YangUInt8)getValue("ptmsi-realloc-retry-n3350");
        if (ptmsiReallocRetryN3350 == null) {
            ptmsiReallocRetryN3350 = new YangUInt8("4");  // default
        }
        return ptmsiReallocRetryN3350;
    }

    /**
     * Sets the value for child leaf "ptmsi-realloc-retry-n3350",
     * using instance of generated typedef class.
     * @param ptmsiReallocRetryN3350Value The value to set.
     * @param ptmsiReallocRetryN3350Value used during instantiation.
     */
    public void setPtmsiReallocRetryN3350Value(YangUInt8 ptmsiReallocRetryN3350Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ptmsi-realloc-retry-n3350",
            ptmsiReallocRetryN3350Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ptmsi-realloc-retry-n3350",
     * using Java primitive values.
     * @param ptmsiReallocRetryN3350Value used during instantiation.
     */
    public void setPtmsiReallocRetryN3350Value(short ptmsiReallocRetryN3350Value)
            throws JNCException {
        setPtmsiReallocRetryN3350Value(new YangUInt8(ptmsiReallocRetryN3350Value));
    }

    /**
     * Sets the value for child leaf "ptmsi-realloc-retry-n3350",
     * using a String value.
     * @param ptmsiReallocRetryN3350Value used during instantiation.
     */
    public void setPtmsiReallocRetryN3350Value(String ptmsiReallocRetryN3350Value)
            throws JNCException {
        setPtmsiReallocRetryN3350Value(new YangUInt8(ptmsiReallocRetryN3350Value));
    }

    /**
     * Unsets the value for child leaf "ptmsi-realloc-retry-n3350".
     */
    public void unsetPtmsiReallocRetryN3350Value() throws JNCException {
        delete("ptmsi-realloc-retry-n3350");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ptmsi-realloc-retry-n3350" leaf will not have a value.
     */
    public void addPtmsiReallocRetryN3350() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ptmsi-realloc-retry-n3350",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ptmsi-realloc-retry-n3350" with operation "replace".
     */
    public void markPtmsiReallocRetryN3350Replace() throws JNCException {
        markLeafReplace("ptmsiReallocRetryN3350");
    }

    /**
     * Marks the leaf "ptmsi-realloc-retry-n3350" with operation "merge".
     */
    public void markPtmsiReallocRetryN3350Merge() throws JNCException {
        markLeafMerge("ptmsiReallocRetryN3350");
    }

    /**
     * Marks the leaf "ptmsi-realloc-retry-n3350" with operation "create".
     */
    public void markPtmsiReallocRetryN3350Create() throws JNCException {
        markLeafCreate("ptmsiReallocRetryN3350");
    }

    /**
     * Marks the leaf "ptmsi-realloc-retry-n3350" with operation "delete".
     */
    public void markPtmsiReallocRetryN3350Delete() throws JNCException {
        markLeafDelete("ptmsiReallocRetryN3350");
    }

    /* Access methods for optional leaf child: "t3-tunnel-timer". */

    /**
     * Gets the value for child leaf "t3-tunnel-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getT3TunnelTimerValue() throws JNCException {
        YangUInt8 t3TunnelTimer = (YangUInt8)getValue("t3-tunnel-timer");
        if (t3TunnelTimer == null) {
            t3TunnelTimer = new YangUInt8("12");  // default
        }
        return t3TunnelTimer;
    }

    /**
     * Sets the value for child leaf "t3-tunnel-timer",
     * using instance of generated typedef class.
     * @param t3TunnelTimerValue The value to set.
     * @param t3TunnelTimerValue used during instantiation.
     */
    public void setT3TunnelTimerValue(YangUInt8 t3TunnelTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t3-tunnel-timer",
            t3TunnelTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "t3-tunnel-timer",
     * using Java primitive values.
     * @param t3TunnelTimerValue used during instantiation.
     */
    public void setT3TunnelTimerValue(short t3TunnelTimerValue)
            throws JNCException {
        setT3TunnelTimerValue(new YangUInt8(t3TunnelTimerValue));
    }

    /**
     * Sets the value for child leaf "t3-tunnel-timer",
     * using a String value.
     * @param t3TunnelTimerValue used during instantiation.
     */
    public void setT3TunnelTimerValue(String t3TunnelTimerValue)
            throws JNCException {
        setT3TunnelTimerValue(new YangUInt8(t3TunnelTimerValue));
    }

    /**
     * Unsets the value for child leaf "t3-tunnel-timer".
     */
    public void unsetT3TunnelTimerValue() throws JNCException {
        delete("t3-tunnel-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "t3-tunnel-timer" leaf will not have a value.
     */
    public void addT3TunnelTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t3-tunnel-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "t3-tunnel-timer" with operation "replace".
     */
    public void markT3TunnelTimerReplace() throws JNCException {
        markLeafReplace("t3TunnelTimer");
    }

    /**
     * Marks the leaf "t3-tunnel-timer" with operation "merge".
     */
    public void markT3TunnelTimerMerge() throws JNCException {
        markLeafMerge("t3TunnelTimer");
    }

    /**
     * Marks the leaf "t3-tunnel-timer" with operation "create".
     */
    public void markT3TunnelTimerCreate() throws JNCException {
        markLeafCreate("t3TunnelTimer");
    }

    /**
     * Marks the leaf "t3-tunnel-timer" with operation "delete".
     */
    public void markT3TunnelTimerDelete() throws JNCException {
        markLeafDelete("t3TunnelTimer");
    }

    /* Access methods for optional leaf child: "opt-authentication-control". */

    /**
     * Gets the value for child leaf "opt-authentication-control".
     * @return The value of the leaf.
     */
    public YangString getOptAuthenticationControlValue() throws JNCException {
        YangString optAuthenticationControl = (YangString)getValue("opt-authentication-control");
        if (optAuthenticationControl == null) {
            optAuthenticationControl = new YangString("off");  // default
        }
        return optAuthenticationControl;
    }

    /**
     * Sets the value for child leaf "opt-authentication-control",
     * using instance of generated typedef class.
     * @param optAuthenticationControlValue The value to set.
     * @param optAuthenticationControlValue used during instantiation.
     */
    public void setOptAuthenticationControlValue(YangString optAuthenticationControlValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "opt-authentication-control",
            optAuthenticationControlValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "opt-authentication-control",
     * using a String value.
     * @param optAuthenticationControlValue used during instantiation.
     */
    public void setOptAuthenticationControlValue(String optAuthenticationControlValue)
            throws JNCException {
        setOptAuthenticationControlValue(new YangString(optAuthenticationControlValue));
    }

    /**
     * Unsets the value for child leaf "opt-authentication-control".
     */
    public void unsetOptAuthenticationControlValue() throws JNCException {
        delete("opt-authentication-control");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "opt-authentication-control" leaf will not have a value.
     */
    public void addOptAuthenticationControl() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "opt-authentication-control",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "opt-authentication-control" with operation "replace".
     */
    public void markOptAuthenticationControlReplace() throws JNCException {
        markLeafReplace("optAuthenticationControl");
    }

    /**
     * Marks the leaf "opt-authentication-control" with operation "merge".
     */
    public void markOptAuthenticationControlMerge() throws JNCException {
        markLeafMerge("optAuthenticationControl");
    }

    /**
     * Marks the leaf "opt-authentication-control" with operation "create".
     */
    public void markOptAuthenticationControlCreate() throws JNCException {
        markLeafCreate("optAuthenticationControl");
    }

    /**
     * Marks the leaf "opt-authentication-control" with operation "delete".
     */
    public void markOptAuthenticationControlDelete() throws JNCException {
        markLeafDelete("optAuthenticationControl");
    }

    /* Access methods for optional leaf child: "send-old-and-new-tlli". */

    /**
     * Gets the value for child leaf "send-old-and-new-tlli".
     * @return The value of the leaf.
     */
    public YangEnumeration getSendOldAndNewTlliValue() throws JNCException {
        YangEnumeration sendOldAndNewTlli = (YangEnumeration)getValue("send-old-and-new-tlli");
        if (sendOldAndNewTlli == null) {
            sendOldAndNewTlli = new YangEnumeration("enable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return sendOldAndNewTlli;
    }

    /**
     * Sets the value for child leaf "send-old-and-new-tlli",
     * using instance of generated typedef class.
     * @param sendOldAndNewTlliValue The value to set.
     * @param sendOldAndNewTlliValue used during instantiation.
     */
    public void setSendOldAndNewTlliValue(YangEnumeration sendOldAndNewTlliValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "send-old-and-new-tlli",
            sendOldAndNewTlliValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "send-old-and-new-tlli",
     * using a String value.
     * @param sendOldAndNewTlliValue used during instantiation.
     */
    public void setSendOldAndNewTlliValue(String sendOldAndNewTlliValue)
            throws JNCException {
        setSendOldAndNewTlliValue(new YangEnumeration(sendOldAndNewTlliValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "send-old-and-new-tlli".
     */
    public void unsetSendOldAndNewTlliValue() throws JNCException {
        delete("send-old-and-new-tlli");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "send-old-and-new-tlli" leaf will not have a value.
     */
    public void addSendOldAndNewTlli() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "send-old-and-new-tlli",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "send-old-and-new-tlli" with operation "replace".
     */
    public void markSendOldAndNewTlliReplace() throws JNCException {
        markLeafReplace("sendOldAndNewTlli");
    }

    /**
     * Marks the leaf "send-old-and-new-tlli" with operation "merge".
     */
    public void markSendOldAndNewTlliMerge() throws JNCException {
        markLeafMerge("sendOldAndNewTlli");
    }

    /**
     * Marks the leaf "send-old-and-new-tlli" with operation "create".
     */
    public void markSendOldAndNewTlliCreate() throws JNCException {
        markLeafCreate("sendOldAndNewTlli");
    }

    /**
     * Marks the leaf "send-old-and-new-tlli" with operation "delete".
     */
    public void markSendOldAndNewTlliDelete() throws JNCException {
        markLeafDelete("sendOldAndNewTlli");
    }

    /* Access methods for optional leaf child: "second-auth-attempts". */

    /**
     * Gets the value for child leaf "second-auth-attempts".
     * @return The value of the leaf.
     */
    public YangEnumeration getSecondAuthAttemptsValue() throws JNCException {
        YangEnumeration secondAuthAttempts = (YangEnumeration)getValue("second-auth-attempts");
        if (secondAuthAttempts == null) {
            secondAuthAttempts = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return secondAuthAttempts;
    }

    /**
     * Sets the value for child leaf "second-auth-attempts",
     * using instance of generated typedef class.
     * @param secondAuthAttemptsValue The value to set.
     * @param secondAuthAttemptsValue used during instantiation.
     */
    public void setSecondAuthAttemptsValue(YangEnumeration secondAuthAttemptsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "second-auth-attempts",
            secondAuthAttemptsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "second-auth-attempts",
     * using a String value.
     * @param secondAuthAttemptsValue used during instantiation.
     */
    public void setSecondAuthAttemptsValue(String secondAuthAttemptsValue)
            throws JNCException {
        setSecondAuthAttemptsValue(new YangEnumeration(secondAuthAttemptsValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "second-auth-attempts".
     */
    public void unsetSecondAuthAttemptsValue() throws JNCException {
        delete("second-auth-attempts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "second-auth-attempts" leaf will not have a value.
     */
    public void addSecondAuthAttempts() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "second-auth-attempts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "second-auth-attempts" with operation "replace".
     */
    public void markSecondAuthAttemptsReplace() throws JNCException {
        markLeafReplace("secondAuthAttempts");
    }

    /**
     * Marks the leaf "second-auth-attempts" with operation "merge".
     */
    public void markSecondAuthAttemptsMerge() throws JNCException {
        markLeafMerge("secondAuthAttempts");
    }

    /**
     * Marks the leaf "second-auth-attempts" with operation "create".
     */
    public void markSecondAuthAttemptsCreate() throws JNCException {
        markLeafCreate("secondAuthAttempts");
    }

    /**
     * Marks the leaf "second-auth-attempts" with operation "delete".
     */
    public void markSecondAuthAttemptsDelete() throws JNCException {
        markLeafDelete("secondAuthAttempts");
    }

    /* Access methods for optional leaf child: "ready-timer-t3314". */

    /**
     * Gets the value for child leaf "ready-timer-t3314".
     * @return The value of the leaf.
     */
    public YangString getReadyTimerT3314Value() throws JNCException {
        YangString readyTimerT3314 = (YangString)getValue("ready-timer-t3314");
        if (readyTimerT3314 == null) {
            readyTimerT3314 = new YangString("44");  // default
        }
        return readyTimerT3314;
    }

    /**
     * Sets the value for child leaf "ready-timer-t3314",
     * using instance of generated typedef class.
     * @param readyTimerT3314Value The value to set.
     * @param readyTimerT3314Value used during instantiation.
     */
    public void setReadyTimerT3314Value(YangString readyTimerT3314Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ready-timer-t3314",
            readyTimerT3314Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ready-timer-t3314",
     * using a String value.
     * @param readyTimerT3314Value used during instantiation.
     */
    public void setReadyTimerT3314Value(String readyTimerT3314Value)
            throws JNCException {
        setReadyTimerT3314Value(new YangString(readyTimerT3314Value));
    }

    /**
     * Unsets the value for child leaf "ready-timer-t3314".
     */
    public void unsetReadyTimerT3314Value() throws JNCException {
        delete("ready-timer-t3314");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ready-timer-t3314" leaf will not have a value.
     */
    public void addReadyTimerT3314() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ready-timer-t3314",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ready-timer-t3314" with operation "replace".
     */
    public void markReadyTimerT3314Replace() throws JNCException {
        markLeafReplace("readyTimerT3314");
    }

    /**
     * Marks the leaf "ready-timer-t3314" with operation "merge".
     */
    public void markReadyTimerT3314Merge() throws JNCException {
        markLeafMerge("readyTimerT3314");
    }

    /**
     * Marks the leaf "ready-timer-t3314" with operation "create".
     */
    public void markReadyTimerT3314Create() throws JNCException {
        markLeafCreate("readyTimerT3314");
    }

    /**
     * Marks the leaf "ready-timer-t3314" with operation "delete".
     */
    public void markReadyTimerT3314Delete() throws JNCException {
        markLeafDelete("readyTimerT3314");
    }

    /* Access methods for optional leaf child: "periodic-ra-update-timer-t3312". */

    /**
     * Gets the value for child leaf "periodic-ra-update-timer-t3312".
     * @return The value of the leaf.
     */
    public YangUInt8 getPeriodicRaUpdateTimerT3312Value() throws JNCException {
        YangUInt8 periodicRaUpdateTimerT3312 = (YangUInt8)getValue("periodic-ra-update-timer-t3312");
        if (periodicRaUpdateTimerT3312 == null) {
            periodicRaUpdateTimerT3312 = new YangUInt8("28");  // default
        }
        return periodicRaUpdateTimerT3312;
    }

    /**
     * Sets the value for child leaf "periodic-ra-update-timer-t3312",
     * using instance of generated typedef class.
     * @param periodicRaUpdateTimerT3312Value The value to set.
     * @param periodicRaUpdateTimerT3312Value used during instantiation.
     */
    public void setPeriodicRaUpdateTimerT3312Value(YangUInt8 periodicRaUpdateTimerT3312Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "periodic-ra-update-timer-t3312",
            periodicRaUpdateTimerT3312Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "periodic-ra-update-timer-t3312",
     * using Java primitive values.
     * @param periodicRaUpdateTimerT3312Value used during instantiation.
     */
    public void setPeriodicRaUpdateTimerT3312Value(short periodicRaUpdateTimerT3312Value)
            throws JNCException {
        setPeriodicRaUpdateTimerT3312Value(new YangUInt8(periodicRaUpdateTimerT3312Value));
    }

    /**
     * Sets the value for child leaf "periodic-ra-update-timer-t3312",
     * using a String value.
     * @param periodicRaUpdateTimerT3312Value used during instantiation.
     */
    public void setPeriodicRaUpdateTimerT3312Value(String periodicRaUpdateTimerT3312Value)
            throws JNCException {
        setPeriodicRaUpdateTimerT3312Value(new YangUInt8(periodicRaUpdateTimerT3312Value));
    }

    /**
     * Unsets the value for child leaf "periodic-ra-update-timer-t3312".
     */
    public void unsetPeriodicRaUpdateTimerT3312Value() throws JNCException {
        delete("periodic-ra-update-timer-t3312");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "periodic-ra-update-timer-t3312" leaf will not have a value.
     */
    public void addPeriodicRaUpdateTimerT3312() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "periodic-ra-update-timer-t3312",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "periodic-ra-update-timer-t3312" with operation "replace".
     */
    public void markPeriodicRaUpdateTimerT3312Replace() throws JNCException {
        markLeafReplace("periodicRaUpdateTimerT3312");
    }

    /**
     * Marks the leaf "periodic-ra-update-timer-t3312" with operation "merge".
     */
    public void markPeriodicRaUpdateTimerT3312Merge() throws JNCException {
        markLeafMerge("periodicRaUpdateTimerT3312");
    }

    /**
     * Marks the leaf "periodic-ra-update-timer-t3312" with operation "create".
     */
    public void markPeriodicRaUpdateTimerT3312Create() throws JNCException {
        markLeafCreate("periodicRaUpdateTimerT3312");
    }

    /**
     * Marks the leaf "periodic-ra-update-timer-t3312" with operation "delete".
     */
    public void markPeriodicRaUpdateTimerT3312Delete() throws JNCException {
        markLeafDelete("periodicRaUpdateTimerT3312");
    }

    /* Access methods for optional leaf child: "gprs-ciphering-algorithms". */

    /**
     * Gets the value for child leaf "gprs-ciphering-algorithms".
     * @return The value of the leaf.
     */
    public YangString getGprsCipheringAlgorithmsValue() throws JNCException {
        YangString gprsCipheringAlgorithms = (YangString)getValue("gprs-ciphering-algorithms");
        if (gprsCipheringAlgorithms == null) {
            gprsCipheringAlgorithms = new YangString("no-ciphering");  // default
        }
        return gprsCipheringAlgorithms;
    }

    /**
     * Sets the value for child leaf "gprs-ciphering-algorithms",
     * using instance of generated typedef class.
     * @param gprsCipheringAlgorithmsValue The value to set.
     * @param gprsCipheringAlgorithmsValue used during instantiation.
     */
    public void setGprsCipheringAlgorithmsValue(YangString gprsCipheringAlgorithmsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gprs-ciphering-algorithms",
            gprsCipheringAlgorithmsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gprs-ciphering-algorithms",
     * using a String value.
     * @param gprsCipheringAlgorithmsValue used during instantiation.
     */
    public void setGprsCipheringAlgorithmsValue(String gprsCipheringAlgorithmsValue)
            throws JNCException {
        setGprsCipheringAlgorithmsValue(new YangString(gprsCipheringAlgorithmsValue));
    }

    /**
     * Unsets the value for child leaf "gprs-ciphering-algorithms".
     */
    public void unsetGprsCipheringAlgorithmsValue() throws JNCException {
        delete("gprs-ciphering-algorithms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gprs-ciphering-algorithms" leaf will not have a value.
     */
    public void addGprsCipheringAlgorithms() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gprs-ciphering-algorithms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gprs-ciphering-algorithms" with operation "replace".
     */
    public void markGprsCipheringAlgorithmsReplace() throws JNCException {
        markLeafReplace("gprsCipheringAlgorithms");
    }

    /**
     * Marks the leaf "gprs-ciphering-algorithms" with operation "merge".
     */
    public void markGprsCipheringAlgorithmsMerge() throws JNCException {
        markLeafMerge("gprsCipheringAlgorithms");
    }

    /**
     * Marks the leaf "gprs-ciphering-algorithms" with operation "create".
     */
    public void markGprsCipheringAlgorithmsCreate() throws JNCException {
        markLeafCreate("gprsCipheringAlgorithms");
    }

    /**
     * Marks the leaf "gprs-ciphering-algorithms" with operation "delete".
     */
    public void markGprsCipheringAlgorithmsDelete() throws JNCException {
        markLeafDelete("gprsCipheringAlgorithms");
    }

    /* Access methods for optional leaf child: "umts-ciphering-algorithms". */

    /**
     * Gets the value for child leaf "umts-ciphering-algorithms".
     * @return The value of the leaf.
     */
    public YangString getUmtsCipheringAlgorithmsValue() throws JNCException {
        YangString umtsCipheringAlgorithms = (YangString)getValue("umts-ciphering-algorithms");
        if (umtsCipheringAlgorithms == null) {
            umtsCipheringAlgorithms = new YangString("no-ciphering");  // default
        }
        return umtsCipheringAlgorithms;
    }

    /**
     * Sets the value for child leaf "umts-ciphering-algorithms",
     * using instance of generated typedef class.
     * @param umtsCipheringAlgorithmsValue The value to set.
     * @param umtsCipheringAlgorithmsValue used during instantiation.
     */
    public void setUmtsCipheringAlgorithmsValue(YangString umtsCipheringAlgorithmsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "umts-ciphering-algorithms",
            umtsCipheringAlgorithmsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "umts-ciphering-algorithms",
     * using a String value.
     * @param umtsCipheringAlgorithmsValue used during instantiation.
     */
    public void setUmtsCipheringAlgorithmsValue(String umtsCipheringAlgorithmsValue)
            throws JNCException {
        setUmtsCipheringAlgorithmsValue(new YangString(umtsCipheringAlgorithmsValue));
    }

    /**
     * Unsets the value for child leaf "umts-ciphering-algorithms".
     */
    public void unsetUmtsCipheringAlgorithmsValue() throws JNCException {
        delete("umts-ciphering-algorithms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "umts-ciphering-algorithms" leaf will not have a value.
     */
    public void addUmtsCipheringAlgorithms() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "umts-ciphering-algorithms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "umts-ciphering-algorithms" with operation "replace".
     */
    public void markUmtsCipheringAlgorithmsReplace() throws JNCException {
        markLeafReplace("umtsCipheringAlgorithms");
    }

    /**
     * Marks the leaf "umts-ciphering-algorithms" with operation "merge".
     */
    public void markUmtsCipheringAlgorithmsMerge() throws JNCException {
        markLeafMerge("umtsCipheringAlgorithms");
    }

    /**
     * Marks the leaf "umts-ciphering-algorithms" with operation "create".
     */
    public void markUmtsCipheringAlgorithmsCreate() throws JNCException {
        markLeafCreate("umtsCipheringAlgorithms");
    }

    /**
     * Marks the leaf "umts-ciphering-algorithms" with operation "delete".
     */
    public void markUmtsCipheringAlgorithmsDelete() throws JNCException {
        markLeafDelete("umtsCipheringAlgorithms");
    }

    /* Access methods for optional leaf child: "attach-acc-force-standby". */

    /**
     * Gets the value for child leaf "attach-acc-force-standby".
     * @return The value of the leaf.
     */
    public YangEnumeration getAttachAccForceStandbyValue() throws JNCException {
        YangEnumeration attachAccForceStandby = (YangEnumeration)getValue("attach-acc-force-standby");
        if (attachAccForceStandby == null) {
            attachAccForceStandby = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return attachAccForceStandby;
    }

    /**
     * Sets the value for child leaf "attach-acc-force-standby",
     * using instance of generated typedef class.
     * @param attachAccForceStandbyValue The value to set.
     * @param attachAccForceStandbyValue used during instantiation.
     */
    public void setAttachAccForceStandbyValue(YangEnumeration attachAccForceStandbyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attach-acc-force-standby",
            attachAccForceStandbyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "attach-acc-force-standby",
     * using a String value.
     * @param attachAccForceStandbyValue used during instantiation.
     */
    public void setAttachAccForceStandbyValue(String attachAccForceStandbyValue)
            throws JNCException {
        setAttachAccForceStandbyValue(new YangEnumeration(attachAccForceStandbyValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "attach-acc-force-standby".
     */
    public void unsetAttachAccForceStandbyValue() throws JNCException {
        delete("attach-acc-force-standby");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "attach-acc-force-standby" leaf will not have a value.
     */
    public void addAttachAccForceStandby() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "attach-acc-force-standby",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "attach-acc-force-standby" with operation "replace".
     */
    public void markAttachAccForceStandbyReplace() throws JNCException {
        markLeafReplace("attachAccForceStandby");
    }

    /**
     * Marks the leaf "attach-acc-force-standby" with operation "merge".
     */
    public void markAttachAccForceStandbyMerge() throws JNCException {
        markLeafMerge("attachAccForceStandby");
    }

    /**
     * Marks the leaf "attach-acc-force-standby" with operation "create".
     */
    public void markAttachAccForceStandbyCreate() throws JNCException {
        markLeafCreate("attachAccForceStandby");
    }

    /**
     * Marks the leaf "attach-acc-force-standby" with operation "delete".
     */
    public void markAttachAccForceStandbyDelete() throws JNCException {
        markLeafDelete("attachAccForceStandby");
    }

    /* Access methods for optional leaf child: "detach-req-force-standby". */

    /**
     * Gets the value for child leaf "detach-req-force-standby".
     * @return The value of the leaf.
     */
    public YangEnumeration getDetachReqForceStandbyValue() throws JNCException {
        YangEnumeration detachReqForceStandby = (YangEnumeration)getValue("detach-req-force-standby");
        if (detachReqForceStandby == null) {
            detachReqForceStandby = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return detachReqForceStandby;
    }

    /**
     * Sets the value for child leaf "detach-req-force-standby",
     * using instance of generated typedef class.
     * @param detachReqForceStandbyValue The value to set.
     * @param detachReqForceStandbyValue used during instantiation.
     */
    public void setDetachReqForceStandbyValue(YangEnumeration detachReqForceStandbyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "detach-req-force-standby",
            detachReqForceStandbyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "detach-req-force-standby",
     * using a String value.
     * @param detachReqForceStandbyValue used during instantiation.
     */
    public void setDetachReqForceStandbyValue(String detachReqForceStandbyValue)
            throws JNCException {
        setDetachReqForceStandbyValue(new YangEnumeration(detachReqForceStandbyValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "detach-req-force-standby".
     */
    public void unsetDetachReqForceStandbyValue() throws JNCException {
        delete("detach-req-force-standby");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "detach-req-force-standby" leaf will not have a value.
     */
    public void addDetachReqForceStandby() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "detach-req-force-standby",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "detach-req-force-standby" with operation "replace".
     */
    public void markDetachReqForceStandbyReplace() throws JNCException {
        markLeafReplace("detachReqForceStandby");
    }

    /**
     * Marks the leaf "detach-req-force-standby" with operation "merge".
     */
    public void markDetachReqForceStandbyMerge() throws JNCException {
        markLeafMerge("detachReqForceStandby");
    }

    /**
     * Marks the leaf "detach-req-force-standby" with operation "create".
     */
    public void markDetachReqForceStandbyCreate() throws JNCException {
        markLeafCreate("detachReqForceStandby");
    }

    /**
     * Marks the leaf "detach-req-force-standby" with operation "delete".
     */
    public void markDetachReqForceStandbyDelete() throws JNCException {
        markLeafDelete("detachReqForceStandby");
    }

    /* Access methods for optional leaf child: "detach-acc-force-standby". */

    /**
     * Gets the value for child leaf "detach-acc-force-standby".
     * @return The value of the leaf.
     */
    public YangEnumeration getDetachAccForceStandbyValue() throws JNCException {
        YangEnumeration detachAccForceStandby = (YangEnumeration)getValue("detach-acc-force-standby");
        if (detachAccForceStandby == null) {
            detachAccForceStandby = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return detachAccForceStandby;
    }

    /**
     * Sets the value for child leaf "detach-acc-force-standby",
     * using instance of generated typedef class.
     * @param detachAccForceStandbyValue The value to set.
     * @param detachAccForceStandbyValue used during instantiation.
     */
    public void setDetachAccForceStandbyValue(YangEnumeration detachAccForceStandbyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "detach-acc-force-standby",
            detachAccForceStandbyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "detach-acc-force-standby",
     * using a String value.
     * @param detachAccForceStandbyValue used during instantiation.
     */
    public void setDetachAccForceStandbyValue(String detachAccForceStandbyValue)
            throws JNCException {
        setDetachAccForceStandbyValue(new YangEnumeration(detachAccForceStandbyValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "detach-acc-force-standby".
     */
    public void unsetDetachAccForceStandbyValue() throws JNCException {
        delete("detach-acc-force-standby");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "detach-acc-force-standby" leaf will not have a value.
     */
    public void addDetachAccForceStandby() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "detach-acc-force-standby",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "detach-acc-force-standby" with operation "replace".
     */
    public void markDetachAccForceStandbyReplace() throws JNCException {
        markLeafReplace("detachAccForceStandby");
    }

    /**
     * Marks the leaf "detach-acc-force-standby" with operation "merge".
     */
    public void markDetachAccForceStandbyMerge() throws JNCException {
        markLeafMerge("detachAccForceStandby");
    }

    /**
     * Marks the leaf "detach-acc-force-standby" with operation "create".
     */
    public void markDetachAccForceStandbyCreate() throws JNCException {
        markLeafCreate("detachAccForceStandby");
    }

    /**
     * Marks the leaf "detach-acc-force-standby" with operation "delete".
     */
    public void markDetachAccForceStandbyDelete() throws JNCException {
        markLeafDelete("detachAccForceStandby");
    }

    /* Access methods for optional leaf child: "intra-rau-acc-force-standby". */

    /**
     * Gets the value for child leaf "intra-rau-acc-force-standby".
     * @return The value of the leaf.
     */
    public YangEnumeration getIntraRauAccForceStandbyValue()
            throws JNCException {
        YangEnumeration intraRauAccForceStandby = (YangEnumeration)getValue("intra-rau-acc-force-standby");
        if (intraRauAccForceStandby == null) {
            intraRauAccForceStandby = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return intraRauAccForceStandby;
    }

    /**
     * Sets the value for child leaf "intra-rau-acc-force-standby",
     * using instance of generated typedef class.
     * @param intraRauAccForceStandbyValue The value to set.
     * @param intraRauAccForceStandbyValue used during instantiation.
     */
    public void setIntraRauAccForceStandbyValue(YangEnumeration intraRauAccForceStandbyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "intra-rau-acc-force-standby",
            intraRauAccForceStandbyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "intra-rau-acc-force-standby",
     * using a String value.
     * @param intraRauAccForceStandbyValue used during instantiation.
     */
    public void setIntraRauAccForceStandbyValue(String intraRauAccForceStandbyValue)
            throws JNCException {
        setIntraRauAccForceStandbyValue(new YangEnumeration(intraRauAccForceStandbyValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "intra-rau-acc-force-standby".
     */
    public void unsetIntraRauAccForceStandbyValue() throws JNCException {
        delete("intra-rau-acc-force-standby");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "intra-rau-acc-force-standby" leaf will not have a value.
     */
    public void addIntraRauAccForceStandby() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "intra-rau-acc-force-standby",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "intra-rau-acc-force-standby" with operation "replace".
     */
    public void markIntraRauAccForceStandbyReplace() throws JNCException {
        markLeafReplace("intraRauAccForceStandby");
    }

    /**
     * Marks the leaf "intra-rau-acc-force-standby" with operation "merge".
     */
    public void markIntraRauAccForceStandbyMerge() throws JNCException {
        markLeafMerge("intraRauAccForceStandby");
    }

    /**
     * Marks the leaf "intra-rau-acc-force-standby" with operation "create".
     */
    public void markIntraRauAccForceStandbyCreate() throws JNCException {
        markLeafCreate("intraRauAccForceStandby");
    }

    /**
     * Marks the leaf "intra-rau-acc-force-standby" with operation "delete".
     */
    public void markIntraRauAccForceStandbyDelete() throws JNCException {
        markLeafDelete("intraRauAccForceStandby");
    }

    /* Access methods for optional leaf child: "inter-rau-acc-force-standby". */

    /**
     * Gets the value for child leaf "inter-rau-acc-force-standby".
     * @return The value of the leaf.
     */
    public YangEnumeration getInterRauAccForceStandbyValue()
            throws JNCException {
        YangEnumeration interRauAccForceStandby = (YangEnumeration)getValue("inter-rau-acc-force-standby");
        if (interRauAccForceStandby == null) {
            interRauAccForceStandby = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return interRauAccForceStandby;
    }

    /**
     * Sets the value for child leaf "inter-rau-acc-force-standby",
     * using instance of generated typedef class.
     * @param interRauAccForceStandbyValue The value to set.
     * @param interRauAccForceStandbyValue used during instantiation.
     */
    public void setInterRauAccForceStandbyValue(YangEnumeration interRauAccForceStandbyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "inter-rau-acc-force-standby",
            interRauAccForceStandbyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "inter-rau-acc-force-standby",
     * using a String value.
     * @param interRauAccForceStandbyValue used during instantiation.
     */
    public void setInterRauAccForceStandbyValue(String interRauAccForceStandbyValue)
            throws JNCException {
        setInterRauAccForceStandbyValue(new YangEnumeration(interRauAccForceStandbyValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "inter-rau-acc-force-standby".
     */
    public void unsetInterRauAccForceStandbyValue() throws JNCException {
        delete("inter-rau-acc-force-standby");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "inter-rau-acc-force-standby" leaf will not have a value.
     */
    public void addInterRauAccForceStandby() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "inter-rau-acc-force-standby",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "inter-rau-acc-force-standby" with operation "replace".
     */
    public void markInterRauAccForceStandbyReplace() throws JNCException {
        markLeafReplace("interRauAccForceStandby");
    }

    /**
     * Marks the leaf "inter-rau-acc-force-standby" with operation "merge".
     */
    public void markInterRauAccForceStandbyMerge() throws JNCException {
        markLeafMerge("interRauAccForceStandby");
    }

    /**
     * Marks the leaf "inter-rau-acc-force-standby" with operation "create".
     */
    public void markInterRauAccForceStandbyCreate() throws JNCException {
        markLeafCreate("interRauAccForceStandby");
    }

    /**
     * Marks the leaf "inter-rau-acc-force-standby" with operation "delete".
     */
    public void markInterRauAccForceStandbyDelete() throws JNCException {
        markLeafDelete("interRauAccForceStandby");
    }

    /* Access methods for optional leaf child: "rau-reject-force-standby". */

    /**
     * Gets the value for child leaf "rau-reject-force-standby".
     * @return The value of the leaf.
     */
    public YangEnumeration getRauRejectForceStandbyValue() throws JNCException {
        YangEnumeration rauRejectForceStandby = (YangEnumeration)getValue("rau-reject-force-standby");
        if (rauRejectForceStandby == null) {
            rauRejectForceStandby = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return rauRejectForceStandby;
    }

    /**
     * Sets the value for child leaf "rau-reject-force-standby",
     * using instance of generated typedef class.
     * @param rauRejectForceStandbyValue The value to set.
     * @param rauRejectForceStandbyValue used during instantiation.
     */
    public void setRauRejectForceStandbyValue(YangEnumeration rauRejectForceStandbyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rau-reject-force-standby",
            rauRejectForceStandbyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rau-reject-force-standby",
     * using a String value.
     * @param rauRejectForceStandbyValue used during instantiation.
     */
    public void setRauRejectForceStandbyValue(String rauRejectForceStandbyValue)
            throws JNCException {
        setRauRejectForceStandbyValue(new YangEnumeration(rauRejectForceStandbyValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "rau-reject-force-standby".
     */
    public void unsetRauRejectForceStandbyValue() throws JNCException {
        delete("rau-reject-force-standby");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rau-reject-force-standby" leaf will not have a value.
     */
    public void addRauRejectForceStandby() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rau-reject-force-standby",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rau-reject-force-standby" with operation "replace".
     */
    public void markRauRejectForceStandbyReplace() throws JNCException {
        markLeafReplace("rauRejectForceStandby");
    }

    /**
     * Marks the leaf "rau-reject-force-standby" with operation "merge".
     */
    public void markRauRejectForceStandbyMerge() throws JNCException {
        markLeafMerge("rauRejectForceStandby");
    }

    /**
     * Marks the leaf "rau-reject-force-standby" with operation "create".
     */
    public void markRauRejectForceStandbyCreate() throws JNCException {
        markLeafCreate("rauRejectForceStandby");
    }

    /**
     * Marks the leaf "rau-reject-force-standby" with operation "delete".
     */
    public void markRauRejectForceStandbyDelete() throws JNCException {
        markLeafDelete("rauRejectForceStandby");
    }

    /* Access methods for optional leaf child: "umts-integrity-algorithms". */

    /**
     * Gets the value for child leaf "umts-integrity-algorithms".
     * @return The value of the leaf.
     */
    public YangString getUmtsIntegrityAlgorithmsValue() throws JNCException {
        YangString umtsIntegrityAlgorithms = (YangString)getValue("umts-integrity-algorithms");
        if (umtsIntegrityAlgorithms == null) {
            umtsIntegrityAlgorithms = new YangString("uia1");  // default
        }
        return umtsIntegrityAlgorithms;
    }

    /**
     * Sets the value for child leaf "umts-integrity-algorithms",
     * using instance of generated typedef class.
     * @param umtsIntegrityAlgorithmsValue The value to set.
     * @param umtsIntegrityAlgorithmsValue used during instantiation.
     */
    public void setUmtsIntegrityAlgorithmsValue(YangString umtsIntegrityAlgorithmsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "umts-integrity-algorithms",
            umtsIntegrityAlgorithmsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "umts-integrity-algorithms",
     * using a String value.
     * @param umtsIntegrityAlgorithmsValue used during instantiation.
     */
    public void setUmtsIntegrityAlgorithmsValue(String umtsIntegrityAlgorithmsValue)
            throws JNCException {
        setUmtsIntegrityAlgorithmsValue(new YangString(umtsIntegrityAlgorithmsValue));
    }

    /**
     * Unsets the value for child leaf "umts-integrity-algorithms".
     */
    public void unsetUmtsIntegrityAlgorithmsValue() throws JNCException {
        delete("umts-integrity-algorithms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "umts-integrity-algorithms" leaf will not have a value.
     */
    public void addUmtsIntegrityAlgorithms() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "umts-integrity-algorithms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "umts-integrity-algorithms" with operation "replace".
     */
    public void markUmtsIntegrityAlgorithmsReplace() throws JNCException {
        markLeafReplace("umtsIntegrityAlgorithms");
    }

    /**
     * Marks the leaf "umts-integrity-algorithms" with operation "merge".
     */
    public void markUmtsIntegrityAlgorithmsMerge() throws JNCException {
        markLeafMerge("umtsIntegrityAlgorithms");
    }

    /**
     * Marks the leaf "umts-integrity-algorithms" with operation "create".
     */
    public void markUmtsIntegrityAlgorithmsCreate() throws JNCException {
        markLeafCreate("umtsIntegrityAlgorithms");
    }

    /**
     * Marks the leaf "umts-integrity-algorithms" with operation "delete".
     */
    public void markUmtsIntegrityAlgorithmsDelete() throws JNCException {
        markLeafDelete("umtsIntegrityAlgorithms");
    }

    /* Access methods for optional leaf child: "ptmsi-lifetime". */

    /**
     * Gets the value for child leaf "ptmsi-lifetime".
     * @return The value of the leaf.
     */
    public YangString getPtmsiLifetimeValue() throws JNCException {
        YangString ptmsiLifetime = (YangString)getValue("ptmsi-lifetime");
        if (ptmsiLifetime == null) {
            ptmsiLifetime = new YangString("12");  // default
        }
        return ptmsiLifetime;
    }

    /**
     * Sets the value for child leaf "ptmsi-lifetime",
     * using instance of generated typedef class.
     * @param ptmsiLifetimeValue The value to set.
     * @param ptmsiLifetimeValue used during instantiation.
     */
    public void setPtmsiLifetimeValue(YangString ptmsiLifetimeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ptmsi-lifetime",
            ptmsiLifetimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ptmsi-lifetime",
     * using a String value.
     * @param ptmsiLifetimeValue used during instantiation.
     */
    public void setPtmsiLifetimeValue(String ptmsiLifetimeValue)
            throws JNCException {
        setPtmsiLifetimeValue(new YangString(ptmsiLifetimeValue));
    }

    /**
     * Unsets the value for child leaf "ptmsi-lifetime".
     */
    public void unsetPtmsiLifetimeValue() throws JNCException {
        delete("ptmsi-lifetime");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ptmsi-lifetime" leaf will not have a value.
     */
    public void addPtmsiLifetime() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ptmsi-lifetime",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ptmsi-lifetime" with operation "replace".
     */
    public void markPtmsiLifetimeReplace() throws JNCException {
        markLeafReplace("ptmsiLifetime");
    }

    /**
     * Marks the leaf "ptmsi-lifetime" with operation "merge".
     */
    public void markPtmsiLifetimeMerge() throws JNCException {
        markLeafMerge("ptmsiLifetime");
    }

    /**
     * Marks the leaf "ptmsi-lifetime" with operation "create".
     */
    public void markPtmsiLifetimeCreate() throws JNCException {
        markLeafCreate("ptmsiLifetime");
    }

    /**
     * Marks the leaf "ptmsi-lifetime" with operation "delete".
     */
    public void markPtmsiLifetimeDelete() throws JNCException {
        markLeafDelete("ptmsiLifetime");
    }

    /* Access methods for optional leaf child: "periodic-rau-tmr-t3312-offload". */

    /**
     * Gets the value for child leaf "periodic-rau-tmr-t3312-offload".
     * @return The value of the leaf.
     */
    public YangUInt16 getPeriodicRauTmrT3312OffloadValue() throws JNCException {
        YangUInt16 periodicRauTmrT3312Offload = (YangUInt16)getValue("periodic-rau-tmr-t3312-offload");
        if (periodicRauTmrT3312Offload == null) {
            periodicRauTmrT3312Offload = new YangUInt16("4");  // default
        }
        return periodicRauTmrT3312Offload;
    }

    /**
     * Sets the value for child leaf "periodic-rau-tmr-t3312-offload",
     * using instance of generated typedef class.
     * @param periodicRauTmrT3312OffloadValue The value to set.
     * @param periodicRauTmrT3312OffloadValue used during instantiation.
     */
    public void setPeriodicRauTmrT3312OffloadValue(YangUInt16 periodicRauTmrT3312OffloadValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "periodic-rau-tmr-t3312-offload",
            periodicRauTmrT3312OffloadValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "periodic-rau-tmr-t3312-offload",
     * using Java primitive values.
     * @param periodicRauTmrT3312OffloadValue used during instantiation.
     */
    public void setPeriodicRauTmrT3312OffloadValue(int periodicRauTmrT3312OffloadValue)
            throws JNCException {
        setPeriodicRauTmrT3312OffloadValue(new YangUInt16(periodicRauTmrT3312OffloadValue));
    }

    /**
     * Sets the value for child leaf "periodic-rau-tmr-t3312-offload",
     * using a String value.
     * @param periodicRauTmrT3312OffloadValue used during instantiation.
     */
    public void setPeriodicRauTmrT3312OffloadValue(String periodicRauTmrT3312OffloadValue)
            throws JNCException {
        setPeriodicRauTmrT3312OffloadValue(new YangUInt16(periodicRauTmrT3312OffloadValue));
    }

    /**
     * Unsets the value for child leaf "periodic-rau-tmr-t3312-offload".
     */
    public void unsetPeriodicRauTmrT3312OffloadValue() throws JNCException {
        delete("periodic-rau-tmr-t3312-offload");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "periodic-rau-tmr-t3312-offload" leaf will not have a value.
     */
    public void addPeriodicRauTmrT3312Offload() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "periodic-rau-tmr-t3312-offload",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "periodic-rau-tmr-t3312-offload" with operation "replace".
     */
    public void markPeriodicRauTmrT3312OffloadReplace() throws JNCException {
        markLeafReplace("periodicRauTmrT3312Offload");
    }

    /**
     * Marks the leaf "periodic-rau-tmr-t3312-offload" with operation "merge".
     */
    public void markPeriodicRauTmrT3312OffloadMerge() throws JNCException {
        markLeafMerge("periodicRauTmrT3312Offload");
    }

    /**
     * Marks the leaf "periodic-rau-tmr-t3312-offload" with operation "create".
     */
    public void markPeriodicRauTmrT3312OffloadCreate() throws JNCException {
        markLeafCreate("periodicRauTmrT3312Offload");
    }

    /**
     * Marks the leaf "periodic-rau-tmr-t3312-offload" with operation "delete".
     */
    public void markPeriodicRauTmrT3312OffloadDelete() throws JNCException {
        markLeafDelete("periodicRauTmrT3312Offload");
    }

    /* Access methods for optional leaf child: "ims-voice-sgsn". */

    /**
     * Gets the value for child leaf "ims-voice-sgsn".
     * @return The value of the leaf.
     */
    public YangEnumeration getImsVoiceSgsnValue() throws JNCException {
        return (YangEnumeration)getValue("ims-voice-sgsn");
    }

    /**
     * Sets the value for child leaf "ims-voice-sgsn",
     * using instance of generated typedef class.
     * @param imsVoiceSgsnValue The value to set.
     * @param imsVoiceSgsnValue used during instantiation.
     */
    public void setImsVoiceSgsnValue(YangEnumeration imsVoiceSgsnValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ims-voice-sgsn",
            imsVoiceSgsnValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ims-voice-sgsn",
     * using a String value.
     * @param imsVoiceSgsnValue used during instantiation.
     */
    public void setImsVoiceSgsnValue(String imsVoiceSgsnValue)
            throws JNCException {
        setImsVoiceSgsnValue(new YangEnumeration(imsVoiceSgsnValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "ims-voice-sgsn".
     */
    public void unsetImsVoiceSgsnValue() throws JNCException {
        delete("ims-voice-sgsn");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ims-voice-sgsn" leaf will not have a value.
     */
    public void addImsVoiceSgsn() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ims-voice-sgsn",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ims-voice-sgsn" with operation "replace".
     */
    public void markImsVoiceSgsnReplace() throws JNCException {
        markLeafReplace("imsVoiceSgsn");
    }

    /**
     * Marks the leaf "ims-voice-sgsn" with operation "merge".
     */
    public void markImsVoiceSgsnMerge() throws JNCException {
        markLeafMerge("imsVoiceSgsn");
    }

    /**
     * Marks the leaf "ims-voice-sgsn" with operation "create".
     */
    public void markImsVoiceSgsnCreate() throws JNCException {
        markLeafCreate("imsVoiceSgsn");
    }

    /**
     * Marks the leaf "ims-voice-sgsn" with operation "delete".
     */
    public void markImsVoiceSgsnDelete() throws JNCException {
        markLeafDelete("imsVoiceSgsn");
    }

    /* Access methods for optional leaf child: "cancel-location-detach-cause". */

    /**
     * Gets the value for child leaf "cancel-location-detach-cause".
     * @return The value of the leaf.
     */
    public YangEnumeration getCancelLocationDetachCauseValue()
            throws JNCException {
        YangEnumeration cancelLocationDetachCause = (YangEnumeration)getValue("cancel-location-detach-cause");
        if (cancelLocationDetachCause == null) {
            cancelLocationDetachCause = new YangEnumeration("gprs-service-not-allowed-7", new String[] {  // default
                "none",
                "imsi-unknown-in-hlr-2",
                "illegal-ms-3",
                "illegal-me-6",
                "gprs-service-not-allowed-7",
                "gprs-and-non-gprs-service-not-allowed-8",
                "plmn-not-allowed-11",
                "location-area-not-allowed-12",
                "roaming-not-allowed-in-this-la-13",
                "gprs-service-not-allowed-in-this-plmn-14",
                "no-suitable-cells-in-la-15",
            });
        }
        return cancelLocationDetachCause;
    }

    /**
     * Sets the value for child leaf "cancel-location-detach-cause",
     * using instance of generated typedef class.
     * @param cancelLocationDetachCauseValue The value to set.
     * @param cancelLocationDetachCauseValue used during instantiation.
     */
    public void setCancelLocationDetachCauseValue(YangEnumeration cancelLocationDetachCauseValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cancel-location-detach-cause",
            cancelLocationDetachCauseValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cancel-location-detach-cause",
     * using a String value.
     * @param cancelLocationDetachCauseValue used during instantiation.
     */
    public void setCancelLocationDetachCauseValue(String cancelLocationDetachCauseValue)
            throws JNCException {
        setCancelLocationDetachCauseValue(new YangEnumeration(cancelLocationDetachCauseValue, new String[] {
             "none",
             "imsi-unknown-in-hlr-2",
             "illegal-ms-3",
             "illegal-me-6",
             "gprs-service-not-allowed-7",
             "gprs-and-non-gprs-service-not-allowed-8",
             "plmn-not-allowed-11",
             "location-area-not-allowed-12",
             "roaming-not-allowed-in-this-la-13",
             "gprs-service-not-allowed-in-this-plmn-14",
             "no-suitable-cells-in-la-15",
        }));
    }

    /**
     * Unsets the value for child leaf "cancel-location-detach-cause".
     */
    public void unsetCancelLocationDetachCauseValue() throws JNCException {
        delete("cancel-location-detach-cause");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cancel-location-detach-cause" leaf will not have a value.
     */
    public void addCancelLocationDetachCause() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cancel-location-detach-cause",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cancel-location-detach-cause" with operation "replace".
     */
    public void markCancelLocationDetachCauseReplace() throws JNCException {
        markLeafReplace("cancelLocationDetachCause");
    }

    /**
     * Marks the leaf "cancel-location-detach-cause" with operation "merge".
     */
    public void markCancelLocationDetachCauseMerge() throws JNCException {
        markLeafMerge("cancelLocationDetachCause");
    }

    /**
     * Marks the leaf "cancel-location-detach-cause" with operation "create".
     */
    public void markCancelLocationDetachCauseCreate() throws JNCException {
        markLeafCreate("cancelLocationDetachCause");
    }

    /**
     * Marks the leaf "cancel-location-detach-cause" with operation "delete".
     */
    public void markCancelLocationDetachCauseDelete() throws JNCException {
        markLeafDelete("cancelLocationDetachCause");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
