/* 
 * @(#)MmeNasMm.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.nas;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/nas/mme-nas-mm"
 * <p>
 * See line 33 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeNasMm extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeNasMm object.
     */
    public MmeNasMm() {
        super(Epc.NAMESPACE, "mme-nas-mm");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeNasMm clone() {
        return (MmeNasMm)cloneContent(new MmeNasMm());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeNasMm cloneShallow() {
        return (MmeNasMm)cloneShallowContent(new MmeNasMm());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "ue-retry-delay-t3402-value",
            "ue-periodic-tau-t3412-value",
            "paging-t3413-initial",
            "paging-t3413-increment",
            "paging-retry-n3413",
            "targeted-first-page",
            "nwk-init-detach-t3422",
            "nwk-init-detach-retry-n3422",
            "guti-allocation-t3450",
            "guti-allocation-retry-n3450",
            "guti-lifetime",
            "security-t3460",
            "security-retry-n3460",
            "identity-t3470",
            "identity-retry-n3470",
            "mobile-reachable-timer-str",
            "opt-authentication-control",
            "vector-retrieval-failure",
            "ciphering-algorithms",
            "integrity-algorithms",
            "src-mme-resource-release-timer",
            "cancel-location-wait-timer",
            "imeisv-req-sec-mode-cmd",
            "tai-list-max",
            "nas-token-window",
            "ue-service-reject-t3442-value",
            "ta-list-allocation",
            "s1-release-delay-timer",
            "guti-allocation-intra-tau",
            "voice-paging-t3413",
            "voice-paging-retry-n3413",
            "cancel-location-detach-cause",
        };
    }

    /* Access methods for optional leaf child: "ue-retry-delay-t3402-value". */

    /**
     * Gets the value for child leaf "ue-retry-delay-t3402-value".
     * @return The value of the leaf.
     */
    public YangUInt8 getUeRetryDelayT3402ValueValue() throws JNCException {
        YangUInt8 ueRetryDelayT3402Value = (YangUInt8)getValue("ue-retry-delay-t3402-value");
        if (ueRetryDelayT3402Value == null) {
            ueRetryDelayT3402Value = new YangUInt8("12");  // default
        }
        return ueRetryDelayT3402Value;
    }

    /**
     * Sets the value for child leaf "ue-retry-delay-t3402-value",
     * using instance of generated typedef class.
     * @param ueRetryDelayT3402ValueValue The value to set.
     * @param ueRetryDelayT3402ValueValue used during instantiation.
     */
    public void setUeRetryDelayT3402ValueValue(YangUInt8 ueRetryDelayT3402ValueValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-retry-delay-t3402-value",
            ueRetryDelayT3402ValueValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ue-retry-delay-t3402-value",
     * using Java primitive values.
     * @param ueRetryDelayT3402ValueValue used during instantiation.
     */
    public void setUeRetryDelayT3402ValueValue(short ueRetryDelayT3402ValueValue)
            throws JNCException {
        setUeRetryDelayT3402ValueValue(new YangUInt8(ueRetryDelayT3402ValueValue));
    }

    /**
     * Sets the value for child leaf "ue-retry-delay-t3402-value",
     * using a String value.
     * @param ueRetryDelayT3402ValueValue used during instantiation.
     */
    public void setUeRetryDelayT3402ValueValue(String ueRetryDelayT3402ValueValue)
            throws JNCException {
        setUeRetryDelayT3402ValueValue(new YangUInt8(ueRetryDelayT3402ValueValue));
    }

    /**
     * Unsets the value for child leaf "ue-retry-delay-t3402-value".
     */
    public void unsetUeRetryDelayT3402ValueValue() throws JNCException {
        delete("ue-retry-delay-t3402-value");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ue-retry-delay-t3402-value" leaf will not have a value.
     */
    public void addUeRetryDelayT3402Value() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-retry-delay-t3402-value",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ue-retry-delay-t3402-value" with operation "replace".
     */
    public void markUeRetryDelayT3402ValueReplace() throws JNCException {
        markLeafReplace("ueRetryDelayT3402Value");
    }

    /**
     * Marks the leaf "ue-retry-delay-t3402-value" with operation "merge".
     */
    public void markUeRetryDelayT3402ValueMerge() throws JNCException {
        markLeafMerge("ueRetryDelayT3402Value");
    }

    /**
     * Marks the leaf "ue-retry-delay-t3402-value" with operation "create".
     */
    public void markUeRetryDelayT3402ValueCreate() throws JNCException {
        markLeafCreate("ueRetryDelayT3402Value");
    }

    /**
     * Marks the leaf "ue-retry-delay-t3402-value" with operation "delete".
     */
    public void markUeRetryDelayT3402ValueDelete() throws JNCException {
        markLeafDelete("ueRetryDelayT3402Value");
    }

    /* Access methods for optional leaf child: "ue-periodic-tau-t3412-value". */

    /**
     * Gets the value for child leaf "ue-periodic-tau-t3412-value".
     * @return The value of the leaf.
     */
    public YangUInt16 getUePeriodicTauT3412ValueValue() throws JNCException {
        YangUInt16 uePeriodicTauT3412Value = (YangUInt16)getValue("ue-periodic-tau-t3412-value");
        if (uePeriodicTauT3412Value == null) {
            uePeriodicTauT3412Value = new YangUInt16("54");  // default
        }
        return uePeriodicTauT3412Value;
    }

    /**
     * Sets the value for child leaf "ue-periodic-tau-t3412-value",
     * using instance of generated typedef class.
     * @param uePeriodicTauT3412ValueValue The value to set.
     * @param uePeriodicTauT3412ValueValue used during instantiation.
     */
    public void setUePeriodicTauT3412ValueValue(YangUInt16 uePeriodicTauT3412ValueValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-periodic-tau-t3412-value",
            uePeriodicTauT3412ValueValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ue-periodic-tau-t3412-value",
     * using Java primitive values.
     * @param uePeriodicTauT3412ValueValue used during instantiation.
     */
    public void setUePeriodicTauT3412ValueValue(int uePeriodicTauT3412ValueValue)
            throws JNCException {
        setUePeriodicTauT3412ValueValue(new YangUInt16(uePeriodicTauT3412ValueValue));
    }

    /**
     * Sets the value for child leaf "ue-periodic-tau-t3412-value",
     * using a String value.
     * @param uePeriodicTauT3412ValueValue used during instantiation.
     */
    public void setUePeriodicTauT3412ValueValue(String uePeriodicTauT3412ValueValue)
            throws JNCException {
        setUePeriodicTauT3412ValueValue(new YangUInt16(uePeriodicTauT3412ValueValue));
    }

    /**
     * Unsets the value for child leaf "ue-periodic-tau-t3412-value".
     */
    public void unsetUePeriodicTauT3412ValueValue() throws JNCException {
        delete("ue-periodic-tau-t3412-value");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ue-periodic-tau-t3412-value" leaf will not have a value.
     */
    public void addUePeriodicTauT3412Value() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-periodic-tau-t3412-value",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ue-periodic-tau-t3412-value" with operation "replace".
     */
    public void markUePeriodicTauT3412ValueReplace() throws JNCException {
        markLeafReplace("uePeriodicTauT3412Value");
    }

    /**
     * Marks the leaf "ue-periodic-tau-t3412-value" with operation "merge".
     */
    public void markUePeriodicTauT3412ValueMerge() throws JNCException {
        markLeafMerge("uePeriodicTauT3412Value");
    }

    /**
     * Marks the leaf "ue-periodic-tau-t3412-value" with operation "create".
     */
    public void markUePeriodicTauT3412ValueCreate() throws JNCException {
        markLeafCreate("uePeriodicTauT3412Value");
    }

    /**
     * Marks the leaf "ue-periodic-tau-t3412-value" with operation "delete".
     */
    public void markUePeriodicTauT3412ValueDelete() throws JNCException {
        markLeafDelete("uePeriodicTauT3412Value");
    }

    /* Access methods for optional leaf child: "paging-t3413-initial". */

    /**
     * Gets the value for child leaf "paging-t3413-initial".
     * @return The value of the leaf.
     */
    public YangUInt8 getPagingT3413InitialValue() throws JNCException {
        YangUInt8 pagingT3413Initial = (YangUInt8)getValue("paging-t3413-initial");
        if (pagingT3413Initial == null) {
            pagingT3413Initial = new YangUInt8("5");  // default
        }
        return pagingT3413Initial;
    }

    /**
     * Sets the value for child leaf "paging-t3413-initial",
     * using instance of generated typedef class.
     * @param pagingT3413InitialValue The value to set.
     * @param pagingT3413InitialValue used during instantiation.
     */
    public void setPagingT3413InitialValue(YangUInt8 pagingT3413InitialValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-t3413-initial",
            pagingT3413InitialValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "paging-t3413-initial",
     * using Java primitive values.
     * @param pagingT3413InitialValue used during instantiation.
     */
    public void setPagingT3413InitialValue(short pagingT3413InitialValue)
            throws JNCException {
        setPagingT3413InitialValue(new YangUInt8(pagingT3413InitialValue));
    }

    /**
     * Sets the value for child leaf "paging-t3413-initial",
     * using a String value.
     * @param pagingT3413InitialValue used during instantiation.
     */
    public void setPagingT3413InitialValue(String pagingT3413InitialValue)
            throws JNCException {
        setPagingT3413InitialValue(new YangUInt8(pagingT3413InitialValue));
    }

    /**
     * Unsets the value for child leaf "paging-t3413-initial".
     */
    public void unsetPagingT3413InitialValue() throws JNCException {
        delete("paging-t3413-initial");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "paging-t3413-initial" leaf will not have a value.
     */
    public void addPagingT3413Initial() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-t3413-initial",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "paging-t3413-initial" with operation "replace".
     */
    public void markPagingT3413InitialReplace() throws JNCException {
        markLeafReplace("pagingT3413Initial");
    }

    /**
     * Marks the leaf "paging-t3413-initial" with operation "merge".
     */
    public void markPagingT3413InitialMerge() throws JNCException {
        markLeafMerge("pagingT3413Initial");
    }

    /**
     * Marks the leaf "paging-t3413-initial" with operation "create".
     */
    public void markPagingT3413InitialCreate() throws JNCException {
        markLeafCreate("pagingT3413Initial");
    }

    /**
     * Marks the leaf "paging-t3413-initial" with operation "delete".
     */
    public void markPagingT3413InitialDelete() throws JNCException {
        markLeafDelete("pagingT3413Initial");
    }

    /* Access methods for optional leaf child: "paging-t3413-increment". */

    /**
     * Gets the value for child leaf "paging-t3413-increment".
     * @return The value of the leaf.
     */
    public YangUInt8 getPagingT3413IncrementValue() throws JNCException {
        YangUInt8 pagingT3413Increment = (YangUInt8)getValue("paging-t3413-increment");
        if (pagingT3413Increment == null) {
            pagingT3413Increment = new YangUInt8("2");  // default
        }
        return pagingT3413Increment;
    }

    /**
     * Sets the value for child leaf "paging-t3413-increment",
     * using instance of generated typedef class.
     * @param pagingT3413IncrementValue The value to set.
     * @param pagingT3413IncrementValue used during instantiation.
     */
    public void setPagingT3413IncrementValue(YangUInt8 pagingT3413IncrementValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-t3413-increment",
            pagingT3413IncrementValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "paging-t3413-increment",
     * using Java primitive values.
     * @param pagingT3413IncrementValue used during instantiation.
     */
    public void setPagingT3413IncrementValue(short pagingT3413IncrementValue)
            throws JNCException {
        setPagingT3413IncrementValue(new YangUInt8(pagingT3413IncrementValue));
    }

    /**
     * Sets the value for child leaf "paging-t3413-increment",
     * using a String value.
     * @param pagingT3413IncrementValue used during instantiation.
     */
    public void setPagingT3413IncrementValue(String pagingT3413IncrementValue)
            throws JNCException {
        setPagingT3413IncrementValue(new YangUInt8(pagingT3413IncrementValue));
    }

    /**
     * Unsets the value for child leaf "paging-t3413-increment".
     */
    public void unsetPagingT3413IncrementValue() throws JNCException {
        delete("paging-t3413-increment");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "paging-t3413-increment" leaf will not have a value.
     */
    public void addPagingT3413Increment() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-t3413-increment",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "paging-t3413-increment" with operation "replace".
     */
    public void markPagingT3413IncrementReplace() throws JNCException {
        markLeafReplace("pagingT3413Increment");
    }

    /**
     * Marks the leaf "paging-t3413-increment" with operation "merge".
     */
    public void markPagingT3413IncrementMerge() throws JNCException {
        markLeafMerge("pagingT3413Increment");
    }

    /**
     * Marks the leaf "paging-t3413-increment" with operation "create".
     */
    public void markPagingT3413IncrementCreate() throws JNCException {
        markLeafCreate("pagingT3413Increment");
    }

    /**
     * Marks the leaf "paging-t3413-increment" with operation "delete".
     */
    public void markPagingT3413IncrementDelete() throws JNCException {
        markLeafDelete("pagingT3413Increment");
    }

    /* Access methods for optional leaf child: "paging-retry-n3413". */

    /**
     * Gets the value for child leaf "paging-retry-n3413".
     * @return The value of the leaf.
     */
    public YangUInt8 getPagingRetryN3413Value() throws JNCException {
        YangUInt8 pagingRetryN3413 = (YangUInt8)getValue("paging-retry-n3413");
        if (pagingRetryN3413 == null) {
            pagingRetryN3413 = new YangUInt8("2");  // default
        }
        return pagingRetryN3413;
    }

    /**
     * Sets the value for child leaf "paging-retry-n3413",
     * using instance of generated typedef class.
     * @param pagingRetryN3413Value The value to set.
     * @param pagingRetryN3413Value used during instantiation.
     */
    public void setPagingRetryN3413Value(YangUInt8 pagingRetryN3413Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-retry-n3413",
            pagingRetryN3413Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "paging-retry-n3413",
     * using Java primitive values.
     * @param pagingRetryN3413Value used during instantiation.
     */
    public void setPagingRetryN3413Value(short pagingRetryN3413Value)
            throws JNCException {
        setPagingRetryN3413Value(new YangUInt8(pagingRetryN3413Value));
    }

    /**
     * Sets the value for child leaf "paging-retry-n3413",
     * using a String value.
     * @param pagingRetryN3413Value used during instantiation.
     */
    public void setPagingRetryN3413Value(String pagingRetryN3413Value)
            throws JNCException {
        setPagingRetryN3413Value(new YangUInt8(pagingRetryN3413Value));
    }

    /**
     * Unsets the value for child leaf "paging-retry-n3413".
     */
    public void unsetPagingRetryN3413Value() throws JNCException {
        delete("paging-retry-n3413");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "paging-retry-n3413" leaf will not have a value.
     */
    public void addPagingRetryN3413() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "paging-retry-n3413",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "paging-retry-n3413" with operation "replace".
     */
    public void markPagingRetryN3413Replace() throws JNCException {
        markLeafReplace("pagingRetryN3413");
    }

    /**
     * Marks the leaf "paging-retry-n3413" with operation "merge".
     */
    public void markPagingRetryN3413Merge() throws JNCException {
        markLeafMerge("pagingRetryN3413");
    }

    /**
     * Marks the leaf "paging-retry-n3413" with operation "create".
     */
    public void markPagingRetryN3413Create() throws JNCException {
        markLeafCreate("pagingRetryN3413");
    }

    /**
     * Marks the leaf "paging-retry-n3413" with operation "delete".
     */
    public void markPagingRetryN3413Delete() throws JNCException {
        markLeafDelete("pagingRetryN3413");
    }

    /* Access methods for optional leaf child: "targeted-first-page". */

    /**
     * Gets the value for child leaf "targeted-first-page".
     * @return The value of the leaf.
     */
    public YangEnumeration getTargetedFirstPageValue() throws JNCException {
        YangEnumeration targetedFirstPage = (YangEnumeration)getValue("targeted-first-page");
        if (targetedFirstPage == null) {
            targetedFirstPage = new YangEnumeration("all-ta", new String[] {  // default
                "last-known-ta",
                "last-known-enb",
                "last-known-enb-ps-only",
                "all-ta",
            });
        }
        return targetedFirstPage;
    }

    /**
     * Sets the value for child leaf "targeted-first-page",
     * using instance of generated typedef class.
     * @param targetedFirstPageValue The value to set.
     * @param targetedFirstPageValue used during instantiation.
     */
    public void setTargetedFirstPageValue(YangEnumeration targetedFirstPageValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "targeted-first-page",
            targetedFirstPageValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "targeted-first-page",
     * using a String value.
     * @param targetedFirstPageValue used during instantiation.
     */
    public void setTargetedFirstPageValue(String targetedFirstPageValue)
            throws JNCException {
        setTargetedFirstPageValue(new YangEnumeration(targetedFirstPageValue, new String[] {
             "last-known-ta",
             "last-known-enb",
             "last-known-enb-ps-only",
             "all-ta",
        }));
    }

    /**
     * Unsets the value for child leaf "targeted-first-page".
     */
    public void unsetTargetedFirstPageValue() throws JNCException {
        delete("targeted-first-page");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "targeted-first-page" leaf will not have a value.
     */
    public void addTargetedFirstPage() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "targeted-first-page",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "targeted-first-page" with operation "replace".
     */
    public void markTargetedFirstPageReplace() throws JNCException {
        markLeafReplace("targetedFirstPage");
    }

    /**
     * Marks the leaf "targeted-first-page" with operation "merge".
     */
    public void markTargetedFirstPageMerge() throws JNCException {
        markLeafMerge("targetedFirstPage");
    }

    /**
     * Marks the leaf "targeted-first-page" with operation "create".
     */
    public void markTargetedFirstPageCreate() throws JNCException {
        markLeafCreate("targetedFirstPage");
    }

    /**
     * Marks the leaf "targeted-first-page" with operation "delete".
     */
    public void markTargetedFirstPageDelete() throws JNCException {
        markLeafDelete("targetedFirstPage");
    }

    /* Access methods for optional leaf child: "nwk-init-detach-t3422". */

    /**
     * Gets the value for child leaf "nwk-init-detach-t3422".
     * @return The value of the leaf.
     */
    public YangUInt8 getNwkInitDetachT3422Value() throws JNCException {
        YangUInt8 nwkInitDetachT3422 = (YangUInt8)getValue("nwk-init-detach-t3422");
        if (nwkInitDetachT3422 == null) {
            nwkInitDetachT3422 = new YangUInt8("6");  // default
        }
        return nwkInitDetachT3422;
    }

    /**
     * Sets the value for child leaf "nwk-init-detach-t3422",
     * using instance of generated typedef class.
     * @param nwkInitDetachT3422Value The value to set.
     * @param nwkInitDetachT3422Value used during instantiation.
     */
    public void setNwkInitDetachT3422Value(YangUInt8 nwkInitDetachT3422Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-init-detach-t3422",
            nwkInitDetachT3422Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nwk-init-detach-t3422",
     * using Java primitive values.
     * @param nwkInitDetachT3422Value used during instantiation.
     */
    public void setNwkInitDetachT3422Value(short nwkInitDetachT3422Value)
            throws JNCException {
        setNwkInitDetachT3422Value(new YangUInt8(nwkInitDetachT3422Value));
    }

    /**
     * Sets the value for child leaf "nwk-init-detach-t3422",
     * using a String value.
     * @param nwkInitDetachT3422Value used during instantiation.
     */
    public void setNwkInitDetachT3422Value(String nwkInitDetachT3422Value)
            throws JNCException {
        setNwkInitDetachT3422Value(new YangUInt8(nwkInitDetachT3422Value));
    }

    /**
     * Unsets the value for child leaf "nwk-init-detach-t3422".
     */
    public void unsetNwkInitDetachT3422Value() throws JNCException {
        delete("nwk-init-detach-t3422");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nwk-init-detach-t3422" leaf will not have a value.
     */
    public void addNwkInitDetachT3422() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-init-detach-t3422",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nwk-init-detach-t3422" with operation "replace".
     */
    public void markNwkInitDetachT3422Replace() throws JNCException {
        markLeafReplace("nwkInitDetachT3422");
    }

    /**
     * Marks the leaf "nwk-init-detach-t3422" with operation "merge".
     */
    public void markNwkInitDetachT3422Merge() throws JNCException {
        markLeafMerge("nwkInitDetachT3422");
    }

    /**
     * Marks the leaf "nwk-init-detach-t3422" with operation "create".
     */
    public void markNwkInitDetachT3422Create() throws JNCException {
        markLeafCreate("nwkInitDetachT3422");
    }

    /**
     * Marks the leaf "nwk-init-detach-t3422" with operation "delete".
     */
    public void markNwkInitDetachT3422Delete() throws JNCException {
        markLeafDelete("nwkInitDetachT3422");
    }

    /* Access methods for optional leaf child: "nwk-init-detach-retry-n3422". */

    /**
     * Gets the value for child leaf "nwk-init-detach-retry-n3422".
     * @return The value of the leaf.
     */
    public YangUInt8 getNwkInitDetachRetryN3422Value() throws JNCException {
        YangUInt8 nwkInitDetachRetryN3422 = (YangUInt8)getValue("nwk-init-detach-retry-n3422");
        if (nwkInitDetachRetryN3422 == null) {
            nwkInitDetachRetryN3422 = new YangUInt8("2");  // default
        }
        return nwkInitDetachRetryN3422;
    }

    /**
     * Sets the value for child leaf "nwk-init-detach-retry-n3422",
     * using instance of generated typedef class.
     * @param nwkInitDetachRetryN3422Value The value to set.
     * @param nwkInitDetachRetryN3422Value used during instantiation.
     */
    public void setNwkInitDetachRetryN3422Value(YangUInt8 nwkInitDetachRetryN3422Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-init-detach-retry-n3422",
            nwkInitDetachRetryN3422Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nwk-init-detach-retry-n3422",
     * using Java primitive values.
     * @param nwkInitDetachRetryN3422Value used during instantiation.
     */
    public void setNwkInitDetachRetryN3422Value(short nwkInitDetachRetryN3422Value)
            throws JNCException {
        setNwkInitDetachRetryN3422Value(new YangUInt8(nwkInitDetachRetryN3422Value));
    }

    /**
     * Sets the value for child leaf "nwk-init-detach-retry-n3422",
     * using a String value.
     * @param nwkInitDetachRetryN3422Value used during instantiation.
     */
    public void setNwkInitDetachRetryN3422Value(String nwkInitDetachRetryN3422Value)
            throws JNCException {
        setNwkInitDetachRetryN3422Value(new YangUInt8(nwkInitDetachRetryN3422Value));
    }

    /**
     * Unsets the value for child leaf "nwk-init-detach-retry-n3422".
     */
    public void unsetNwkInitDetachRetryN3422Value() throws JNCException {
        delete("nwk-init-detach-retry-n3422");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nwk-init-detach-retry-n3422" leaf will not have a value.
     */
    public void addNwkInitDetachRetryN3422() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-init-detach-retry-n3422",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nwk-init-detach-retry-n3422" with operation "replace".
     */
    public void markNwkInitDetachRetryN3422Replace() throws JNCException {
        markLeafReplace("nwkInitDetachRetryN3422");
    }

    /**
     * Marks the leaf "nwk-init-detach-retry-n3422" with operation "merge".
     */
    public void markNwkInitDetachRetryN3422Merge() throws JNCException {
        markLeafMerge("nwkInitDetachRetryN3422");
    }

    /**
     * Marks the leaf "nwk-init-detach-retry-n3422" with operation "create".
     */
    public void markNwkInitDetachRetryN3422Create() throws JNCException {
        markLeafCreate("nwkInitDetachRetryN3422");
    }

    /**
     * Marks the leaf "nwk-init-detach-retry-n3422" with operation "delete".
     */
    public void markNwkInitDetachRetryN3422Delete() throws JNCException {
        markLeafDelete("nwkInitDetachRetryN3422");
    }

    /* Access methods for optional leaf child: "guti-allocation-t3450". */

    /**
     * Gets the value for child leaf "guti-allocation-t3450".
     * @return The value of the leaf.
     */
    public YangUInt8 getGutiAllocationT3450Value() throws JNCException {
        YangUInt8 gutiAllocationT3450 = (YangUInt8)getValue("guti-allocation-t3450");
        if (gutiAllocationT3450 == null) {
            gutiAllocationT3450 = new YangUInt8("6");  // default
        }
        return gutiAllocationT3450;
    }

    /**
     * Sets the value for child leaf "guti-allocation-t3450",
     * using instance of generated typedef class.
     * @param gutiAllocationT3450Value The value to set.
     * @param gutiAllocationT3450Value used during instantiation.
     */
    public void setGutiAllocationT3450Value(YangUInt8 gutiAllocationT3450Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guti-allocation-t3450",
            gutiAllocationT3450Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "guti-allocation-t3450",
     * using Java primitive values.
     * @param gutiAllocationT3450Value used during instantiation.
     */
    public void setGutiAllocationT3450Value(short gutiAllocationT3450Value)
            throws JNCException {
        setGutiAllocationT3450Value(new YangUInt8(gutiAllocationT3450Value));
    }

    /**
     * Sets the value for child leaf "guti-allocation-t3450",
     * using a String value.
     * @param gutiAllocationT3450Value used during instantiation.
     */
    public void setGutiAllocationT3450Value(String gutiAllocationT3450Value)
            throws JNCException {
        setGutiAllocationT3450Value(new YangUInt8(gutiAllocationT3450Value));
    }

    /**
     * Unsets the value for child leaf "guti-allocation-t3450".
     */
    public void unsetGutiAllocationT3450Value() throws JNCException {
        delete("guti-allocation-t3450");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "guti-allocation-t3450" leaf will not have a value.
     */
    public void addGutiAllocationT3450() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guti-allocation-t3450",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "guti-allocation-t3450" with operation "replace".
     */
    public void markGutiAllocationT3450Replace() throws JNCException {
        markLeafReplace("gutiAllocationT3450");
    }

    /**
     * Marks the leaf "guti-allocation-t3450" with operation "merge".
     */
    public void markGutiAllocationT3450Merge() throws JNCException {
        markLeafMerge("gutiAllocationT3450");
    }

    /**
     * Marks the leaf "guti-allocation-t3450" with operation "create".
     */
    public void markGutiAllocationT3450Create() throws JNCException {
        markLeafCreate("gutiAllocationT3450");
    }

    /**
     * Marks the leaf "guti-allocation-t3450" with operation "delete".
     */
    public void markGutiAllocationT3450Delete() throws JNCException {
        markLeafDelete("gutiAllocationT3450");
    }

    /* Access methods for optional leaf child: "guti-allocation-retry-n3450". */

    /**
     * Gets the value for child leaf "guti-allocation-retry-n3450".
     * @return The value of the leaf.
     */
    public YangUInt8 getGutiAllocationRetryN3450Value() throws JNCException {
        YangUInt8 gutiAllocationRetryN3450 = (YangUInt8)getValue("guti-allocation-retry-n3450");
        if (gutiAllocationRetryN3450 == null) {
            gutiAllocationRetryN3450 = new YangUInt8("3");  // default
        }
        return gutiAllocationRetryN3450;
    }

    /**
     * Sets the value for child leaf "guti-allocation-retry-n3450",
     * using instance of generated typedef class.
     * @param gutiAllocationRetryN3450Value The value to set.
     * @param gutiAllocationRetryN3450Value used during instantiation.
     */
    public void setGutiAllocationRetryN3450Value(YangUInt8 gutiAllocationRetryN3450Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guti-allocation-retry-n3450",
            gutiAllocationRetryN3450Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "guti-allocation-retry-n3450",
     * using Java primitive values.
     * @param gutiAllocationRetryN3450Value used during instantiation.
     */
    public void setGutiAllocationRetryN3450Value(short gutiAllocationRetryN3450Value)
            throws JNCException {
        setGutiAllocationRetryN3450Value(new YangUInt8(gutiAllocationRetryN3450Value));
    }

    /**
     * Sets the value for child leaf "guti-allocation-retry-n3450",
     * using a String value.
     * @param gutiAllocationRetryN3450Value used during instantiation.
     */
    public void setGutiAllocationRetryN3450Value(String gutiAllocationRetryN3450Value)
            throws JNCException {
        setGutiAllocationRetryN3450Value(new YangUInt8(gutiAllocationRetryN3450Value));
    }

    /**
     * Unsets the value for child leaf "guti-allocation-retry-n3450".
     */
    public void unsetGutiAllocationRetryN3450Value() throws JNCException {
        delete("guti-allocation-retry-n3450");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "guti-allocation-retry-n3450" leaf will not have a value.
     */
    public void addGutiAllocationRetryN3450() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guti-allocation-retry-n3450",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "guti-allocation-retry-n3450" with operation "replace".
     */
    public void markGutiAllocationRetryN3450Replace() throws JNCException {
        markLeafReplace("gutiAllocationRetryN3450");
    }

    /**
     * Marks the leaf "guti-allocation-retry-n3450" with operation "merge".
     */
    public void markGutiAllocationRetryN3450Merge() throws JNCException {
        markLeafMerge("gutiAllocationRetryN3450");
    }

    /**
     * Marks the leaf "guti-allocation-retry-n3450" with operation "create".
     */
    public void markGutiAllocationRetryN3450Create() throws JNCException {
        markLeafCreate("gutiAllocationRetryN3450");
    }

    /**
     * Marks the leaf "guti-allocation-retry-n3450" with operation "delete".
     */
    public void markGutiAllocationRetryN3450Delete() throws JNCException {
        markLeafDelete("gutiAllocationRetryN3450");
    }

    /* Access methods for optional leaf child: "guti-lifetime". */

    /**
     * Gets the value for child leaf "guti-lifetime".
     * @return The value of the leaf.
     */
    public YangUInt8 getGutiLifetimeValue() throws JNCException {
        YangUInt8 gutiLifetime = (YangUInt8)getValue("guti-lifetime");
        if (gutiLifetime == null) {
            gutiLifetime = new YangUInt8("12");  // default
        }
        return gutiLifetime;
    }

    /**
     * Sets the value for child leaf "guti-lifetime",
     * using instance of generated typedef class.
     * @param gutiLifetimeValue The value to set.
     * @param gutiLifetimeValue used during instantiation.
     */
    public void setGutiLifetimeValue(YangUInt8 gutiLifetimeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guti-lifetime",
            gutiLifetimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "guti-lifetime",
     * using Java primitive values.
     * @param gutiLifetimeValue used during instantiation.
     */
    public void setGutiLifetimeValue(short gutiLifetimeValue)
            throws JNCException {
        setGutiLifetimeValue(new YangUInt8(gutiLifetimeValue));
    }

    /**
     * Sets the value for child leaf "guti-lifetime",
     * using a String value.
     * @param gutiLifetimeValue used during instantiation.
     */
    public void setGutiLifetimeValue(String gutiLifetimeValue)
            throws JNCException {
        setGutiLifetimeValue(new YangUInt8(gutiLifetimeValue));
    }

    /**
     * Unsets the value for child leaf "guti-lifetime".
     */
    public void unsetGutiLifetimeValue() throws JNCException {
        delete("guti-lifetime");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "guti-lifetime" leaf will not have a value.
     */
    public void addGutiLifetime() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guti-lifetime",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "guti-lifetime" with operation "replace".
     */
    public void markGutiLifetimeReplace() throws JNCException {
        markLeafReplace("gutiLifetime");
    }

    /**
     * Marks the leaf "guti-lifetime" with operation "merge".
     */
    public void markGutiLifetimeMerge() throws JNCException {
        markLeafMerge("gutiLifetime");
    }

    /**
     * Marks the leaf "guti-lifetime" with operation "create".
     */
    public void markGutiLifetimeCreate() throws JNCException {
        markLeafCreate("gutiLifetime");
    }

    /**
     * Marks the leaf "guti-lifetime" with operation "delete".
     */
    public void markGutiLifetimeDelete() throws JNCException {
        markLeafDelete("gutiLifetime");
    }

    /* Access methods for optional leaf child: "security-t3460". */

    /**
     * Gets the value for child leaf "security-t3460".
     * @return The value of the leaf.
     */
    public YangUInt8 getSecurityT3460Value() throws JNCException {
        YangUInt8 securityT3460 = (YangUInt8)getValue("security-t3460");
        if (securityT3460 == null) {
            securityT3460 = new YangUInt8("6");  // default
        }
        return securityT3460;
    }

    /**
     * Sets the value for child leaf "security-t3460",
     * using instance of generated typedef class.
     * @param securityT3460Value The value to set.
     * @param securityT3460Value used during instantiation.
     */
    public void setSecurityT3460Value(YangUInt8 securityT3460Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "security-t3460",
            securityT3460Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "security-t3460",
     * using Java primitive values.
     * @param securityT3460Value used during instantiation.
     */
    public void setSecurityT3460Value(short securityT3460Value)
            throws JNCException {
        setSecurityT3460Value(new YangUInt8(securityT3460Value));
    }

    /**
     * Sets the value for child leaf "security-t3460",
     * using a String value.
     * @param securityT3460Value used during instantiation.
     */
    public void setSecurityT3460Value(String securityT3460Value)
            throws JNCException {
        setSecurityT3460Value(new YangUInt8(securityT3460Value));
    }

    /**
     * Unsets the value for child leaf "security-t3460".
     */
    public void unsetSecurityT3460Value() throws JNCException {
        delete("security-t3460");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "security-t3460" leaf will not have a value.
     */
    public void addSecurityT3460() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "security-t3460",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "security-t3460" with operation "replace".
     */
    public void markSecurityT3460Replace() throws JNCException {
        markLeafReplace("securityT3460");
    }

    /**
     * Marks the leaf "security-t3460" with operation "merge".
     */
    public void markSecurityT3460Merge() throws JNCException {
        markLeafMerge("securityT3460");
    }

    /**
     * Marks the leaf "security-t3460" with operation "create".
     */
    public void markSecurityT3460Create() throws JNCException {
        markLeafCreate("securityT3460");
    }

    /**
     * Marks the leaf "security-t3460" with operation "delete".
     */
    public void markSecurityT3460Delete() throws JNCException {
        markLeafDelete("securityT3460");
    }

    /* Access methods for optional leaf child: "security-retry-n3460". */

    /**
     * Gets the value for child leaf "security-retry-n3460".
     * @return The value of the leaf.
     */
    public YangUInt8 getSecurityRetryN3460Value() throws JNCException {
        YangUInt8 securityRetryN3460 = (YangUInt8)getValue("security-retry-n3460");
        if (securityRetryN3460 == null) {
            securityRetryN3460 = new YangUInt8("2");  // default
        }
        return securityRetryN3460;
    }

    /**
     * Sets the value for child leaf "security-retry-n3460",
     * using instance of generated typedef class.
     * @param securityRetryN3460Value The value to set.
     * @param securityRetryN3460Value used during instantiation.
     */
    public void setSecurityRetryN3460Value(YangUInt8 securityRetryN3460Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "security-retry-n3460",
            securityRetryN3460Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "security-retry-n3460",
     * using Java primitive values.
     * @param securityRetryN3460Value used during instantiation.
     */
    public void setSecurityRetryN3460Value(short securityRetryN3460Value)
            throws JNCException {
        setSecurityRetryN3460Value(new YangUInt8(securityRetryN3460Value));
    }

    /**
     * Sets the value for child leaf "security-retry-n3460",
     * using a String value.
     * @param securityRetryN3460Value used during instantiation.
     */
    public void setSecurityRetryN3460Value(String securityRetryN3460Value)
            throws JNCException {
        setSecurityRetryN3460Value(new YangUInt8(securityRetryN3460Value));
    }

    /**
     * Unsets the value for child leaf "security-retry-n3460".
     */
    public void unsetSecurityRetryN3460Value() throws JNCException {
        delete("security-retry-n3460");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "security-retry-n3460" leaf will not have a value.
     */
    public void addSecurityRetryN3460() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "security-retry-n3460",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "security-retry-n3460" with operation "replace".
     */
    public void markSecurityRetryN3460Replace() throws JNCException {
        markLeafReplace("securityRetryN3460");
    }

    /**
     * Marks the leaf "security-retry-n3460" with operation "merge".
     */
    public void markSecurityRetryN3460Merge() throws JNCException {
        markLeafMerge("securityRetryN3460");
    }

    /**
     * Marks the leaf "security-retry-n3460" with operation "create".
     */
    public void markSecurityRetryN3460Create() throws JNCException {
        markLeafCreate("securityRetryN3460");
    }

    /**
     * Marks the leaf "security-retry-n3460" with operation "delete".
     */
    public void markSecurityRetryN3460Delete() throws JNCException {
        markLeafDelete("securityRetryN3460");
    }

    /* Access methods for optional leaf child: "identity-t3470". */

    /**
     * Gets the value for child leaf "identity-t3470".
     * @return The value of the leaf.
     */
    public YangUInt8 getIdentityT3470Value() throws JNCException {
        YangUInt8 identityT3470 = (YangUInt8)getValue("identity-t3470");
        if (identityT3470 == null) {
            identityT3470 = new YangUInt8("6");  // default
        }
        return identityT3470;
    }

    /**
     * Sets the value for child leaf "identity-t3470",
     * using instance of generated typedef class.
     * @param identityT3470Value The value to set.
     * @param identityT3470Value used during instantiation.
     */
    public void setIdentityT3470Value(YangUInt8 identityT3470Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "identity-t3470",
            identityT3470Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "identity-t3470",
     * using Java primitive values.
     * @param identityT3470Value used during instantiation.
     */
    public void setIdentityT3470Value(short identityT3470Value)
            throws JNCException {
        setIdentityT3470Value(new YangUInt8(identityT3470Value));
    }

    /**
     * Sets the value for child leaf "identity-t3470",
     * using a String value.
     * @param identityT3470Value used during instantiation.
     */
    public void setIdentityT3470Value(String identityT3470Value)
            throws JNCException {
        setIdentityT3470Value(new YangUInt8(identityT3470Value));
    }

    /**
     * Unsets the value for child leaf "identity-t3470".
     */
    public void unsetIdentityT3470Value() throws JNCException {
        delete("identity-t3470");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "identity-t3470" leaf will not have a value.
     */
    public void addIdentityT3470() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "identity-t3470",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "identity-t3470" with operation "replace".
     */
    public void markIdentityT3470Replace() throws JNCException {
        markLeafReplace("identityT3470");
    }

    /**
     * Marks the leaf "identity-t3470" with operation "merge".
     */
    public void markIdentityT3470Merge() throws JNCException {
        markLeafMerge("identityT3470");
    }

    /**
     * Marks the leaf "identity-t3470" with operation "create".
     */
    public void markIdentityT3470Create() throws JNCException {
        markLeafCreate("identityT3470");
    }

    /**
     * Marks the leaf "identity-t3470" with operation "delete".
     */
    public void markIdentityT3470Delete() throws JNCException {
        markLeafDelete("identityT3470");
    }

    /* Access methods for optional leaf child: "identity-retry-n3470". */

    /**
     * Gets the value for child leaf "identity-retry-n3470".
     * @return The value of the leaf.
     */
    public YangUInt8 getIdentityRetryN3470Value() throws JNCException {
        YangUInt8 identityRetryN3470 = (YangUInt8)getValue("identity-retry-n3470");
        if (identityRetryN3470 == null) {
            identityRetryN3470 = new YangUInt8("2");  // default
        }
        return identityRetryN3470;
    }

    /**
     * Sets the value for child leaf "identity-retry-n3470",
     * using instance of generated typedef class.
     * @param identityRetryN3470Value The value to set.
     * @param identityRetryN3470Value used during instantiation.
     */
    public void setIdentityRetryN3470Value(YangUInt8 identityRetryN3470Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "identity-retry-n3470",
            identityRetryN3470Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "identity-retry-n3470",
     * using Java primitive values.
     * @param identityRetryN3470Value used during instantiation.
     */
    public void setIdentityRetryN3470Value(short identityRetryN3470Value)
            throws JNCException {
        setIdentityRetryN3470Value(new YangUInt8(identityRetryN3470Value));
    }

    /**
     * Sets the value for child leaf "identity-retry-n3470",
     * using a String value.
     * @param identityRetryN3470Value used during instantiation.
     */
    public void setIdentityRetryN3470Value(String identityRetryN3470Value)
            throws JNCException {
        setIdentityRetryN3470Value(new YangUInt8(identityRetryN3470Value));
    }

    /**
     * Unsets the value for child leaf "identity-retry-n3470".
     */
    public void unsetIdentityRetryN3470Value() throws JNCException {
        delete("identity-retry-n3470");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "identity-retry-n3470" leaf will not have a value.
     */
    public void addIdentityRetryN3470() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "identity-retry-n3470",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "identity-retry-n3470" with operation "replace".
     */
    public void markIdentityRetryN3470Replace() throws JNCException {
        markLeafReplace("identityRetryN3470");
    }

    /**
     * Marks the leaf "identity-retry-n3470" with operation "merge".
     */
    public void markIdentityRetryN3470Merge() throws JNCException {
        markLeafMerge("identityRetryN3470");
    }

    /**
     * Marks the leaf "identity-retry-n3470" with operation "create".
     */
    public void markIdentityRetryN3470Create() throws JNCException {
        markLeafCreate("identityRetryN3470");
    }

    /**
     * Marks the leaf "identity-retry-n3470" with operation "delete".
     */
    public void markIdentityRetryN3470Delete() throws JNCException {
        markLeafDelete("identityRetryN3470");
    }

    /* Access methods for optional leaf child: "mobile-reachable-timer-str". */

    /**
     * Gets the value for child leaf "mobile-reachable-timer-str".
     * @return The value of the leaf.
     */
    public YangString getMobileReachableTimerStrValue() throws JNCException {
        YangString mobileReachableTimerStr = (YangString)getValue("mobile-reachable-timer-str");
        if (mobileReachableTimerStr == null) {
            mobileReachableTimerStr = new YangString("t3412plus4");  // default
        }
        return mobileReachableTimerStr;
    }

    /**
     * Sets the value for child leaf "mobile-reachable-timer-str",
     * using instance of generated typedef class.
     * @param mobileReachableTimerStrValue The value to set.
     * @param mobileReachableTimerStrValue used during instantiation.
     */
    public void setMobileReachableTimerStrValue(YangString mobileReachableTimerStrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mobile-reachable-timer-str",
            mobileReachableTimerStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mobile-reachable-timer-str",
     * using a String value.
     * @param mobileReachableTimerStrValue used during instantiation.
     */
    public void setMobileReachableTimerStrValue(String mobileReachableTimerStrValue)
            throws JNCException {
        setMobileReachableTimerStrValue(new YangString(mobileReachableTimerStrValue));
    }

    /**
     * Unsets the value for child leaf "mobile-reachable-timer-str".
     */
    public void unsetMobileReachableTimerStrValue() throws JNCException {
        delete("mobile-reachable-timer-str");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mobile-reachable-timer-str" leaf will not have a value.
     */
    public void addMobileReachableTimerStr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mobile-reachable-timer-str",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mobile-reachable-timer-str" with operation "replace".
     */
    public void markMobileReachableTimerStrReplace() throws JNCException {
        markLeafReplace("mobileReachableTimerStr");
    }

    /**
     * Marks the leaf "mobile-reachable-timer-str" with operation "merge".
     */
    public void markMobileReachableTimerStrMerge() throws JNCException {
        markLeafMerge("mobileReachableTimerStr");
    }

    /**
     * Marks the leaf "mobile-reachable-timer-str" with operation "create".
     */
    public void markMobileReachableTimerStrCreate() throws JNCException {
        markLeafCreate("mobileReachableTimerStr");
    }

    /**
     * Marks the leaf "mobile-reachable-timer-str" with operation "delete".
     */
    public void markMobileReachableTimerStrDelete() throws JNCException {
        markLeafDelete("mobileReachableTimerStr");
    }

    /* Access methods for optional leaf child: "opt-authentication-control". */

    /**
     * Gets the value for child leaf "opt-authentication-control".
     * @return The value of the leaf.
     */
    public YangString getOptAuthenticationControlValue() throws JNCException {
        YangString optAuthenticationControl = (YangString)getValue("opt-authentication-control");
        if (optAuthenticationControl == null) {
            optAuthenticationControl = new YangString("off");  // default
        }
        return optAuthenticationControl;
    }

    /**
     * Sets the value for child leaf "opt-authentication-control",
     * using instance of generated typedef class.
     * @param optAuthenticationControlValue The value to set.
     * @param optAuthenticationControlValue used during instantiation.
     */
    public void setOptAuthenticationControlValue(YangString optAuthenticationControlValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "opt-authentication-control",
            optAuthenticationControlValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "opt-authentication-control",
     * using a String value.
     * @param optAuthenticationControlValue used during instantiation.
     */
    public void setOptAuthenticationControlValue(String optAuthenticationControlValue)
            throws JNCException {
        setOptAuthenticationControlValue(new YangString(optAuthenticationControlValue));
    }

    /**
     * Unsets the value for child leaf "opt-authentication-control".
     */
    public void unsetOptAuthenticationControlValue() throws JNCException {
        delete("opt-authentication-control");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "opt-authentication-control" leaf will not have a value.
     */
    public void addOptAuthenticationControl() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "opt-authentication-control",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "opt-authentication-control" with operation "replace".
     */
    public void markOptAuthenticationControlReplace() throws JNCException {
        markLeafReplace("optAuthenticationControl");
    }

    /**
     * Marks the leaf "opt-authentication-control" with operation "merge".
     */
    public void markOptAuthenticationControlMerge() throws JNCException {
        markLeafMerge("optAuthenticationControl");
    }

    /**
     * Marks the leaf "opt-authentication-control" with operation "create".
     */
    public void markOptAuthenticationControlCreate() throws JNCException {
        markLeafCreate("optAuthenticationControl");
    }

    /**
     * Marks the leaf "opt-authentication-control" with operation "delete".
     */
    public void markOptAuthenticationControlDelete() throws JNCException {
        markLeafDelete("optAuthenticationControl");
    }

    /* Access methods for optional leaf child: "vector-retrieval-failure". */

    /**
     * Gets the value for child leaf "vector-retrieval-failure".
     * @return The value of the leaf.
     */
    public YangEnumeration getVectorRetrievalFailureValue() throws JNCException {
        YangEnumeration vectorRetrievalFailure = (YangEnumeration)getValue("vector-retrieval-failure");
        if (vectorRetrievalFailure == null) {
            vectorRetrievalFailure = new YangEnumeration("ignore", new String[] {  // default
                "ignore",
                "fail",
            });
        }
        return vectorRetrievalFailure;
    }

    /**
     * Sets the value for child leaf "vector-retrieval-failure",
     * using instance of generated typedef class.
     * @param vectorRetrievalFailureValue The value to set.
     * @param vectorRetrievalFailureValue used during instantiation.
     */
    public void setVectorRetrievalFailureValue(YangEnumeration vectorRetrievalFailureValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vector-retrieval-failure",
            vectorRetrievalFailureValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vector-retrieval-failure",
     * using a String value.
     * @param vectorRetrievalFailureValue used during instantiation.
     */
    public void setVectorRetrievalFailureValue(String vectorRetrievalFailureValue)
            throws JNCException {
        setVectorRetrievalFailureValue(new YangEnumeration(vectorRetrievalFailureValue, new String[] {
             "ignore",
             "fail",
        }));
    }

    /**
     * Unsets the value for child leaf "vector-retrieval-failure".
     */
    public void unsetVectorRetrievalFailureValue() throws JNCException {
        delete("vector-retrieval-failure");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vector-retrieval-failure" leaf will not have a value.
     */
    public void addVectorRetrievalFailure() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vector-retrieval-failure",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vector-retrieval-failure" with operation "replace".
     */
    public void markVectorRetrievalFailureReplace() throws JNCException {
        markLeafReplace("vectorRetrievalFailure");
    }

    /**
     * Marks the leaf "vector-retrieval-failure" with operation "merge".
     */
    public void markVectorRetrievalFailureMerge() throws JNCException {
        markLeafMerge("vectorRetrievalFailure");
    }

    /**
     * Marks the leaf "vector-retrieval-failure" with operation "create".
     */
    public void markVectorRetrievalFailureCreate() throws JNCException {
        markLeafCreate("vectorRetrievalFailure");
    }

    /**
     * Marks the leaf "vector-retrieval-failure" with operation "delete".
     */
    public void markVectorRetrievalFailureDelete() throws JNCException {
        markLeafDelete("vectorRetrievalFailure");
    }

    /* Access methods for optional leaf child: "ciphering-algorithms". */

    /**
     * Gets the value for child leaf "ciphering-algorithms".
     * @return The value of the leaf.
     */
    public YangString getCipheringAlgorithmsValue() throws JNCException {
        YangString cipheringAlgorithms = (YangString)getValue("ciphering-algorithms");
        if (cipheringAlgorithms == null) {
            cipheringAlgorithms = new YangString("eea1,eea2,eea0");  // default
        }
        return cipheringAlgorithms;
    }

    /**
     * Sets the value for child leaf "ciphering-algorithms",
     * using instance of generated typedef class.
     * @param cipheringAlgorithmsValue The value to set.
     * @param cipheringAlgorithmsValue used during instantiation.
     */
    public void setCipheringAlgorithmsValue(YangString cipheringAlgorithmsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ciphering-algorithms",
            cipheringAlgorithmsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ciphering-algorithms",
     * using a String value.
     * @param cipheringAlgorithmsValue used during instantiation.
     */
    public void setCipheringAlgorithmsValue(String cipheringAlgorithmsValue)
            throws JNCException {
        setCipheringAlgorithmsValue(new YangString(cipheringAlgorithmsValue));
    }

    /**
     * Unsets the value for child leaf "ciphering-algorithms".
     */
    public void unsetCipheringAlgorithmsValue() throws JNCException {
        delete("ciphering-algorithms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ciphering-algorithms" leaf will not have a value.
     */
    public void addCipheringAlgorithms() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ciphering-algorithms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ciphering-algorithms" with operation "replace".
     */
    public void markCipheringAlgorithmsReplace() throws JNCException {
        markLeafReplace("cipheringAlgorithms");
    }

    /**
     * Marks the leaf "ciphering-algorithms" with operation "merge".
     */
    public void markCipheringAlgorithmsMerge() throws JNCException {
        markLeafMerge("cipheringAlgorithms");
    }

    /**
     * Marks the leaf "ciphering-algorithms" with operation "create".
     */
    public void markCipheringAlgorithmsCreate() throws JNCException {
        markLeafCreate("cipheringAlgorithms");
    }

    /**
     * Marks the leaf "ciphering-algorithms" with operation "delete".
     */
    public void markCipheringAlgorithmsDelete() throws JNCException {
        markLeafDelete("cipheringAlgorithms");
    }

    /* Access methods for optional leaf child: "integrity-algorithms". */

    /**
     * Gets the value for child leaf "integrity-algorithms".
     * @return The value of the leaf.
     */
    public YangString getIntegrityAlgorithmsValue() throws JNCException {
        YangString integrityAlgorithms = (YangString)getValue("integrity-algorithms");
        if (integrityAlgorithms == null) {
            integrityAlgorithms = new YangString("eia1,eia2,null");  // default
        }
        return integrityAlgorithms;
    }

    /**
     * Sets the value for child leaf "integrity-algorithms",
     * using instance of generated typedef class.
     * @param integrityAlgorithmsValue The value to set.
     * @param integrityAlgorithmsValue used during instantiation.
     */
    public void setIntegrityAlgorithmsValue(YangString integrityAlgorithmsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "integrity-algorithms",
            integrityAlgorithmsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "integrity-algorithms",
     * using a String value.
     * @param integrityAlgorithmsValue used during instantiation.
     */
    public void setIntegrityAlgorithmsValue(String integrityAlgorithmsValue)
            throws JNCException {
        setIntegrityAlgorithmsValue(new YangString(integrityAlgorithmsValue));
    }

    /**
     * Unsets the value for child leaf "integrity-algorithms".
     */
    public void unsetIntegrityAlgorithmsValue() throws JNCException {
        delete("integrity-algorithms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "integrity-algorithms" leaf will not have a value.
     */
    public void addIntegrityAlgorithms() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "integrity-algorithms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "integrity-algorithms" with operation "replace".
     */
    public void markIntegrityAlgorithmsReplace() throws JNCException {
        markLeafReplace("integrityAlgorithms");
    }

    /**
     * Marks the leaf "integrity-algorithms" with operation "merge".
     */
    public void markIntegrityAlgorithmsMerge() throws JNCException {
        markLeafMerge("integrityAlgorithms");
    }

    /**
     * Marks the leaf "integrity-algorithms" with operation "create".
     */
    public void markIntegrityAlgorithmsCreate() throws JNCException {
        markLeafCreate("integrityAlgorithms");
    }

    /**
     * Marks the leaf "integrity-algorithms" with operation "delete".
     */
    public void markIntegrityAlgorithmsDelete() throws JNCException {
        markLeafDelete("integrityAlgorithms");
    }

    /* Access methods for optional leaf child: "src-mme-resource-release-timer". */

    /**
     * Gets the value for child leaf "src-mme-resource-release-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getSrcMmeResourceReleaseTimerValue() throws JNCException {
        YangUInt8 srcMmeResourceReleaseTimer = (YangUInt8)getValue("src-mme-resource-release-timer");
        if (srcMmeResourceReleaseTimer == null) {
            srcMmeResourceReleaseTimer = new YangUInt8("15");  // default
        }
        return srcMmeResourceReleaseTimer;
    }

    /**
     * Sets the value for child leaf "src-mme-resource-release-timer",
     * using instance of generated typedef class.
     * @param srcMmeResourceReleaseTimerValue The value to set.
     * @param srcMmeResourceReleaseTimerValue used during instantiation.
     */
    public void setSrcMmeResourceReleaseTimerValue(YangUInt8 srcMmeResourceReleaseTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "src-mme-resource-release-timer",
            srcMmeResourceReleaseTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "src-mme-resource-release-timer",
     * using Java primitive values.
     * @param srcMmeResourceReleaseTimerValue used during instantiation.
     */
    public void setSrcMmeResourceReleaseTimerValue(short srcMmeResourceReleaseTimerValue)
            throws JNCException {
        setSrcMmeResourceReleaseTimerValue(new YangUInt8(srcMmeResourceReleaseTimerValue));
    }

    /**
     * Sets the value for child leaf "src-mme-resource-release-timer",
     * using a String value.
     * @param srcMmeResourceReleaseTimerValue used during instantiation.
     */
    public void setSrcMmeResourceReleaseTimerValue(String srcMmeResourceReleaseTimerValue)
            throws JNCException {
        setSrcMmeResourceReleaseTimerValue(new YangUInt8(srcMmeResourceReleaseTimerValue));
    }

    /**
     * Unsets the value for child leaf "src-mme-resource-release-timer".
     */
    public void unsetSrcMmeResourceReleaseTimerValue() throws JNCException {
        delete("src-mme-resource-release-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "src-mme-resource-release-timer" leaf will not have a value.
     */
    public void addSrcMmeResourceReleaseTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "src-mme-resource-release-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "src-mme-resource-release-timer" with operation "replace".
     */
    public void markSrcMmeResourceReleaseTimerReplace() throws JNCException {
        markLeafReplace("srcMmeResourceReleaseTimer");
    }

    /**
     * Marks the leaf "src-mme-resource-release-timer" with operation "merge".
     */
    public void markSrcMmeResourceReleaseTimerMerge() throws JNCException {
        markLeafMerge("srcMmeResourceReleaseTimer");
    }

    /**
     * Marks the leaf "src-mme-resource-release-timer" with operation "create".
     */
    public void markSrcMmeResourceReleaseTimerCreate() throws JNCException {
        markLeafCreate("srcMmeResourceReleaseTimer");
    }

    /**
     * Marks the leaf "src-mme-resource-release-timer" with operation "delete".
     */
    public void markSrcMmeResourceReleaseTimerDelete() throws JNCException {
        markLeafDelete("srcMmeResourceReleaseTimer");
    }

    /* Access methods for optional leaf child: "cancel-location-wait-timer". */

    /**
     * Gets the value for child leaf "cancel-location-wait-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getCancelLocationWaitTimerValue() throws JNCException {
        YangUInt8 cancelLocationWaitTimer = (YangUInt8)getValue("cancel-location-wait-timer");
        if (cancelLocationWaitTimer == null) {
            cancelLocationWaitTimer = new YangUInt8("10");  // default
        }
        return cancelLocationWaitTimer;
    }

    /**
     * Sets the value for child leaf "cancel-location-wait-timer",
     * using instance of generated typedef class.
     * @param cancelLocationWaitTimerValue The value to set.
     * @param cancelLocationWaitTimerValue used during instantiation.
     */
    public void setCancelLocationWaitTimerValue(YangUInt8 cancelLocationWaitTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cancel-location-wait-timer",
            cancelLocationWaitTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cancel-location-wait-timer",
     * using Java primitive values.
     * @param cancelLocationWaitTimerValue used during instantiation.
     */
    public void setCancelLocationWaitTimerValue(short cancelLocationWaitTimerValue)
            throws JNCException {
        setCancelLocationWaitTimerValue(new YangUInt8(cancelLocationWaitTimerValue));
    }

    /**
     * Sets the value for child leaf "cancel-location-wait-timer",
     * using a String value.
     * @param cancelLocationWaitTimerValue used during instantiation.
     */
    public void setCancelLocationWaitTimerValue(String cancelLocationWaitTimerValue)
            throws JNCException {
        setCancelLocationWaitTimerValue(new YangUInt8(cancelLocationWaitTimerValue));
    }

    /**
     * Unsets the value for child leaf "cancel-location-wait-timer".
     */
    public void unsetCancelLocationWaitTimerValue() throws JNCException {
        delete("cancel-location-wait-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cancel-location-wait-timer" leaf will not have a value.
     */
    public void addCancelLocationWaitTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cancel-location-wait-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cancel-location-wait-timer" with operation "replace".
     */
    public void markCancelLocationWaitTimerReplace() throws JNCException {
        markLeafReplace("cancelLocationWaitTimer");
    }

    /**
     * Marks the leaf "cancel-location-wait-timer" with operation "merge".
     */
    public void markCancelLocationWaitTimerMerge() throws JNCException {
        markLeafMerge("cancelLocationWaitTimer");
    }

    /**
     * Marks the leaf "cancel-location-wait-timer" with operation "create".
     */
    public void markCancelLocationWaitTimerCreate() throws JNCException {
        markLeafCreate("cancelLocationWaitTimer");
    }

    /**
     * Marks the leaf "cancel-location-wait-timer" with operation "delete".
     */
    public void markCancelLocationWaitTimerDelete() throws JNCException {
        markLeafDelete("cancelLocationWaitTimer");
    }

    /* Access methods for optional leaf child: "imeisv-req-sec-mode-cmd". */

    /**
     * Gets the value for child leaf "imeisv-req-sec-mode-cmd".
     * @return The value of the leaf.
     */
    public YangEnumeration getImeisvReqSecModeCmdValue() throws JNCException {
        YangEnumeration imeisvReqSecModeCmd = (YangEnumeration)getValue("imeisv-req-sec-mode-cmd");
        if (imeisvReqSecModeCmd == null) {
            imeisvReqSecModeCmd = new YangEnumeration("on", new String[] {  // default
                "on",
                "off",
            });
        }
        return imeisvReqSecModeCmd;
    }

    /**
     * Sets the value for child leaf "imeisv-req-sec-mode-cmd",
     * using instance of generated typedef class.
     * @param imeisvReqSecModeCmdValue The value to set.
     * @param imeisvReqSecModeCmdValue used during instantiation.
     */
    public void setImeisvReqSecModeCmdValue(YangEnumeration imeisvReqSecModeCmdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imeisv-req-sec-mode-cmd",
            imeisvReqSecModeCmdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imeisv-req-sec-mode-cmd",
     * using a String value.
     * @param imeisvReqSecModeCmdValue used during instantiation.
     */
    public void setImeisvReqSecModeCmdValue(String imeisvReqSecModeCmdValue)
            throws JNCException {
        setImeisvReqSecModeCmdValue(new YangEnumeration(imeisvReqSecModeCmdValue, new String[] {
             "on",
             "off",
        }));
    }

    /**
     * Unsets the value for child leaf "imeisv-req-sec-mode-cmd".
     */
    public void unsetImeisvReqSecModeCmdValue() throws JNCException {
        delete("imeisv-req-sec-mode-cmd");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imeisv-req-sec-mode-cmd" leaf will not have a value.
     */
    public void addImeisvReqSecModeCmd() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "imeisv-req-sec-mode-cmd",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "imeisv-req-sec-mode-cmd" with operation "replace".
     */
    public void markImeisvReqSecModeCmdReplace() throws JNCException {
        markLeafReplace("imeisvReqSecModeCmd");
    }

    /**
     * Marks the leaf "imeisv-req-sec-mode-cmd" with operation "merge".
     */
    public void markImeisvReqSecModeCmdMerge() throws JNCException {
        markLeafMerge("imeisvReqSecModeCmd");
    }

    /**
     * Marks the leaf "imeisv-req-sec-mode-cmd" with operation "create".
     */
    public void markImeisvReqSecModeCmdCreate() throws JNCException {
        markLeafCreate("imeisvReqSecModeCmd");
    }

    /**
     * Marks the leaf "imeisv-req-sec-mode-cmd" with operation "delete".
     */
    public void markImeisvReqSecModeCmdDelete() throws JNCException {
        markLeafDelete("imeisvReqSecModeCmd");
    }

    /* Access methods for optional leaf child: "tai-list-max". */

    /**
     * Gets the value for child leaf "tai-list-max".
     * @return The value of the leaf.
     */
    public YangUInt8 getTaiListMaxValue() throws JNCException {
        YangUInt8 taiListMax = (YangUInt8)getValue("tai-list-max");
        if (taiListMax == null) {
            taiListMax = new YangUInt8("1");  // default
        }
        return taiListMax;
    }

    /**
     * Sets the value for child leaf "tai-list-max",
     * using instance of generated typedef class.
     * @param taiListMaxValue The value to set.
     * @param taiListMaxValue used during instantiation.
     */
    public void setTaiListMaxValue(YangUInt8 taiListMaxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tai-list-max",
            taiListMaxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tai-list-max",
     * using Java primitive values.
     * @param taiListMaxValue used during instantiation.
     */
    public void setTaiListMaxValue(short taiListMaxValue) throws JNCException {
        setTaiListMaxValue(new YangUInt8(taiListMaxValue));
    }

    /**
     * Sets the value for child leaf "tai-list-max",
     * using a String value.
     * @param taiListMaxValue used during instantiation.
     */
    public void setTaiListMaxValue(String taiListMaxValue) throws JNCException {
        setTaiListMaxValue(new YangUInt8(taiListMaxValue));
    }

    /**
     * Unsets the value for child leaf "tai-list-max".
     */
    public void unsetTaiListMaxValue() throws JNCException {
        delete("tai-list-max");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tai-list-max" leaf will not have a value.
     */
    public void addTaiListMax() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tai-list-max",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tai-list-max" with operation "replace".
     */
    public void markTaiListMaxReplace() throws JNCException {
        markLeafReplace("taiListMax");
    }

    /**
     * Marks the leaf "tai-list-max" with operation "merge".
     */
    public void markTaiListMaxMerge() throws JNCException {
        markLeafMerge("taiListMax");
    }

    /**
     * Marks the leaf "tai-list-max" with operation "create".
     */
    public void markTaiListMaxCreate() throws JNCException {
        markLeafCreate("taiListMax");
    }

    /**
     * Marks the leaf "tai-list-max" with operation "delete".
     */
    public void markTaiListMaxDelete() throws JNCException {
        markLeafDelete("taiListMax");
    }

    /* Access methods for optional leaf child: "nas-token-window". */

    /**
     * Gets the value for child leaf "nas-token-window".
     * @return The value of the leaf.
     */
    public YangUInt8 getNasTokenWindowValue() throws JNCException {
        YangUInt8 nasTokenWindow = (YangUInt8)getValue("nas-token-window");
        if (nasTokenWindow == null) {
            nasTokenWindow = new YangUInt8("5");  // default
        }
        return nasTokenWindow;
    }

    /**
     * Sets the value for child leaf "nas-token-window",
     * using instance of generated typedef class.
     * @param nasTokenWindowValue The value to set.
     * @param nasTokenWindowValue used during instantiation.
     */
    public void setNasTokenWindowValue(YangUInt8 nasTokenWindowValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nas-token-window",
            nasTokenWindowValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nas-token-window",
     * using Java primitive values.
     * @param nasTokenWindowValue used during instantiation.
     */
    public void setNasTokenWindowValue(short nasTokenWindowValue)
            throws JNCException {
        setNasTokenWindowValue(new YangUInt8(nasTokenWindowValue));
    }

    /**
     * Sets the value for child leaf "nas-token-window",
     * using a String value.
     * @param nasTokenWindowValue used during instantiation.
     */
    public void setNasTokenWindowValue(String nasTokenWindowValue)
            throws JNCException {
        setNasTokenWindowValue(new YangUInt8(nasTokenWindowValue));
    }

    /**
     * Unsets the value for child leaf "nas-token-window".
     */
    public void unsetNasTokenWindowValue() throws JNCException {
        delete("nas-token-window");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nas-token-window" leaf will not have a value.
     */
    public void addNasTokenWindow() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nas-token-window",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nas-token-window" with operation "replace".
     */
    public void markNasTokenWindowReplace() throws JNCException {
        markLeafReplace("nasTokenWindow");
    }

    /**
     * Marks the leaf "nas-token-window" with operation "merge".
     */
    public void markNasTokenWindowMerge() throws JNCException {
        markLeafMerge("nasTokenWindow");
    }

    /**
     * Marks the leaf "nas-token-window" with operation "create".
     */
    public void markNasTokenWindowCreate() throws JNCException {
        markLeafCreate("nasTokenWindow");
    }

    /**
     * Marks the leaf "nas-token-window" with operation "delete".
     */
    public void markNasTokenWindowDelete() throws JNCException {
        markLeafDelete("nasTokenWindow");
    }

    /* Access methods for optional leaf child: "ue-service-reject-t3442-value". */

    /**
     * Gets the value for child leaf "ue-service-reject-t3442-value".
     * @return The value of the leaf.
     */
    public YangUInt16 getUeServiceRejectT3442ValueValue() throws JNCException {
        YangUInt16 ueServiceRejectT3442Value = (YangUInt16)getValue("ue-service-reject-t3442-value");
        if (ueServiceRejectT3442Value == null) {
            ueServiceRejectT3442Value = new YangUInt16("60");  // default
        }
        return ueServiceRejectT3442Value;
    }

    /**
     * Sets the value for child leaf "ue-service-reject-t3442-value",
     * using instance of generated typedef class.
     * @param ueServiceRejectT3442ValueValue The value to set.
     * @param ueServiceRejectT3442ValueValue used during instantiation.
     */
    public void setUeServiceRejectT3442ValueValue(YangUInt16 ueServiceRejectT3442ValueValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-service-reject-t3442-value",
            ueServiceRejectT3442ValueValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ue-service-reject-t3442-value",
     * using Java primitive values.
     * @param ueServiceRejectT3442ValueValue used during instantiation.
     */
    public void setUeServiceRejectT3442ValueValue(int ueServiceRejectT3442ValueValue)
            throws JNCException {
        setUeServiceRejectT3442ValueValue(new YangUInt16(ueServiceRejectT3442ValueValue));
    }

    /**
     * Sets the value for child leaf "ue-service-reject-t3442-value",
     * using a String value.
     * @param ueServiceRejectT3442ValueValue used during instantiation.
     */
    public void setUeServiceRejectT3442ValueValue(String ueServiceRejectT3442ValueValue)
            throws JNCException {
        setUeServiceRejectT3442ValueValue(new YangUInt16(ueServiceRejectT3442ValueValue));
    }

    /**
     * Unsets the value for child leaf "ue-service-reject-t3442-value".
     */
    public void unsetUeServiceRejectT3442ValueValue() throws JNCException {
        delete("ue-service-reject-t3442-value");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ue-service-reject-t3442-value" leaf will not have a value.
     */
    public void addUeServiceRejectT3442Value() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-service-reject-t3442-value",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ue-service-reject-t3442-value" with operation "replace".
     */
    public void markUeServiceRejectT3442ValueReplace() throws JNCException {
        markLeafReplace("ueServiceRejectT3442Value");
    }

    /**
     * Marks the leaf "ue-service-reject-t3442-value" with operation "merge".
     */
    public void markUeServiceRejectT3442ValueMerge() throws JNCException {
        markLeafMerge("ueServiceRejectT3442Value");
    }

    /**
     * Marks the leaf "ue-service-reject-t3442-value" with operation "create".
     */
    public void markUeServiceRejectT3442ValueCreate() throws JNCException {
        markLeafCreate("ueServiceRejectT3442Value");
    }

    /**
     * Marks the leaf "ue-service-reject-t3442-value" with operation "delete".
     */
    public void markUeServiceRejectT3442ValueDelete() throws JNCException {
        markLeafDelete("ueServiceRejectT3442Value");
    }

    /* Access methods for optional leaf child: "ta-list-allocation". */

    /**
     * Gets the value for child leaf "ta-list-allocation".
     * @return The value of the leaf.
     */
    public YangEnumeration getTaListAllocationValue() throws JNCException {
        YangEnumeration taListAllocation = (YangEnumeration)getValue("ta-list-allocation");
        if (taListAllocation == null) {
            taListAllocation = new YangEnumeration("unrestricted", new String[] {  // default
                "unrestricted",
                "within-plmn",
                "within-la",
            });
        }
        return taListAllocation;
    }

    /**
     * Sets the value for child leaf "ta-list-allocation",
     * using instance of generated typedef class.
     * @param taListAllocationValue The value to set.
     * @param taListAllocationValue used during instantiation.
     */
    public void setTaListAllocationValue(YangEnumeration taListAllocationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ta-list-allocation",
            taListAllocationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ta-list-allocation",
     * using a String value.
     * @param taListAllocationValue used during instantiation.
     */
    public void setTaListAllocationValue(String taListAllocationValue)
            throws JNCException {
        setTaListAllocationValue(new YangEnumeration(taListAllocationValue, new String[] {
             "unrestricted",
             "within-plmn",
             "within-la",
        }));
    }

    /**
     * Unsets the value for child leaf "ta-list-allocation".
     */
    public void unsetTaListAllocationValue() throws JNCException {
        delete("ta-list-allocation");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ta-list-allocation" leaf will not have a value.
     */
    public void addTaListAllocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ta-list-allocation",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ta-list-allocation" with operation "replace".
     */
    public void markTaListAllocationReplace() throws JNCException {
        markLeafReplace("taListAllocation");
    }

    /**
     * Marks the leaf "ta-list-allocation" with operation "merge".
     */
    public void markTaListAllocationMerge() throws JNCException {
        markLeafMerge("taListAllocation");
    }

    /**
     * Marks the leaf "ta-list-allocation" with operation "create".
     */
    public void markTaListAllocationCreate() throws JNCException {
        markLeafCreate("taListAllocation");
    }

    /**
     * Marks the leaf "ta-list-allocation" with operation "delete".
     */
    public void markTaListAllocationDelete() throws JNCException {
        markLeafDelete("taListAllocation");
    }

    /* Access methods for optional leaf child: "s1-release-delay-timer". */

    /**
     * Gets the value for child leaf "s1-release-delay-timer".
     * @return The value of the leaf.
     */
    public YangString getS1ReleaseDelayTimerValue() throws JNCException {
        YangString s1ReleaseDelayTimer = (YangString)getValue("s1-release-delay-timer");
        if (s1ReleaseDelayTimer == null) {
            s1ReleaseDelayTimer = new YangString("disabled");  // default
        }
        return s1ReleaseDelayTimer;
    }

    /**
     * Sets the value for child leaf "s1-release-delay-timer",
     * using instance of generated typedef class.
     * @param s1ReleaseDelayTimerValue The value to set.
     * @param s1ReleaseDelayTimerValue used during instantiation.
     */
    public void setS1ReleaseDelayTimerValue(YangString s1ReleaseDelayTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s1-release-delay-timer",
            s1ReleaseDelayTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "s1-release-delay-timer",
     * using a String value.
     * @param s1ReleaseDelayTimerValue used during instantiation.
     */
    public void setS1ReleaseDelayTimerValue(String s1ReleaseDelayTimerValue)
            throws JNCException {
        setS1ReleaseDelayTimerValue(new YangString(s1ReleaseDelayTimerValue));
    }

    /**
     * Unsets the value for child leaf "s1-release-delay-timer".
     */
    public void unsetS1ReleaseDelayTimerValue() throws JNCException {
        delete("s1-release-delay-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "s1-release-delay-timer" leaf will not have a value.
     */
    public void addS1ReleaseDelayTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "s1-release-delay-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "s1-release-delay-timer" with operation "replace".
     */
    public void markS1ReleaseDelayTimerReplace() throws JNCException {
        markLeafReplace("s1ReleaseDelayTimer");
    }

    /**
     * Marks the leaf "s1-release-delay-timer" with operation "merge".
     */
    public void markS1ReleaseDelayTimerMerge() throws JNCException {
        markLeafMerge("s1ReleaseDelayTimer");
    }

    /**
     * Marks the leaf "s1-release-delay-timer" with operation "create".
     */
    public void markS1ReleaseDelayTimerCreate() throws JNCException {
        markLeafCreate("s1ReleaseDelayTimer");
    }

    /**
     * Marks the leaf "s1-release-delay-timer" with operation "delete".
     */
    public void markS1ReleaseDelayTimerDelete() throws JNCException {
        markLeafDelete("s1ReleaseDelayTimer");
    }

    /* Access methods for optional leaf child: "guti-allocation-intra-tau". */

    /**
     * Gets the value for child leaf "guti-allocation-intra-tau".
     * @return The value of the leaf.
     */
    public YangEnumeration getGutiAllocationIntraTauValue() throws JNCException {
        YangEnumeration gutiAllocationIntraTau = (YangEnumeration)getValue("guti-allocation-intra-tau");
        if (gutiAllocationIntraTau == null) {
            gutiAllocationIntraTau = new YangEnumeration("enable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return gutiAllocationIntraTau;
    }

    /**
     * Sets the value for child leaf "guti-allocation-intra-tau",
     * using instance of generated typedef class.
     * @param gutiAllocationIntraTauValue The value to set.
     * @param gutiAllocationIntraTauValue used during instantiation.
     */
    public void setGutiAllocationIntraTauValue(YangEnumeration gutiAllocationIntraTauValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guti-allocation-intra-tau",
            gutiAllocationIntraTauValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "guti-allocation-intra-tau",
     * using a String value.
     * @param gutiAllocationIntraTauValue used during instantiation.
     */
    public void setGutiAllocationIntraTauValue(String gutiAllocationIntraTauValue)
            throws JNCException {
        setGutiAllocationIntraTauValue(new YangEnumeration(gutiAllocationIntraTauValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "guti-allocation-intra-tau".
     */
    public void unsetGutiAllocationIntraTauValue() throws JNCException {
        delete("guti-allocation-intra-tau");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "guti-allocation-intra-tau" leaf will not have a value.
     */
    public void addGutiAllocationIntraTau() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "guti-allocation-intra-tau",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "guti-allocation-intra-tau" with operation "replace".
     */
    public void markGutiAllocationIntraTauReplace() throws JNCException {
        markLeafReplace("gutiAllocationIntraTau");
    }

    /**
     * Marks the leaf "guti-allocation-intra-tau" with operation "merge".
     */
    public void markGutiAllocationIntraTauMerge() throws JNCException {
        markLeafMerge("gutiAllocationIntraTau");
    }

    /**
     * Marks the leaf "guti-allocation-intra-tau" with operation "create".
     */
    public void markGutiAllocationIntraTauCreate() throws JNCException {
        markLeafCreate("gutiAllocationIntraTau");
    }

    /**
     * Marks the leaf "guti-allocation-intra-tau" with operation "delete".
     */
    public void markGutiAllocationIntraTauDelete() throws JNCException {
        markLeafDelete("gutiAllocationIntraTau");
    }

    /* Access methods for optional leaf child: "voice-paging-t3413". */

    /**
     * Gets the value for child leaf "voice-paging-t3413".
     * @return The value of the leaf.
     */
    public YangString getVoicePagingT3413Value() throws JNCException {
        YangString voicePagingT3413 = (YangString)getValue("voice-paging-t3413");
        if (voicePagingT3413 == null) {
            voicePagingT3413 = new YangString("disable");  // default
        }
        return voicePagingT3413;
    }

    /**
     * Sets the value for child leaf "voice-paging-t3413",
     * using instance of generated typedef class.
     * @param voicePagingT3413Value The value to set.
     * @param voicePagingT3413Value used during instantiation.
     */
    public void setVoicePagingT3413Value(YangString voicePagingT3413Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "voice-paging-t3413",
            voicePagingT3413Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "voice-paging-t3413",
     * using a String value.
     * @param voicePagingT3413Value used during instantiation.
     */
    public void setVoicePagingT3413Value(String voicePagingT3413Value)
            throws JNCException {
        setVoicePagingT3413Value(new YangString(voicePagingT3413Value));
    }

    /**
     * Unsets the value for child leaf "voice-paging-t3413".
     */
    public void unsetVoicePagingT3413Value() throws JNCException {
        delete("voice-paging-t3413");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "voice-paging-t3413" leaf will not have a value.
     */
    public void addVoicePagingT3413() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "voice-paging-t3413",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "voice-paging-t3413" with operation "replace".
     */
    public void markVoicePagingT3413Replace() throws JNCException {
        markLeafReplace("voicePagingT3413");
    }

    /**
     * Marks the leaf "voice-paging-t3413" with operation "merge".
     */
    public void markVoicePagingT3413Merge() throws JNCException {
        markLeafMerge("voicePagingT3413");
    }

    /**
     * Marks the leaf "voice-paging-t3413" with operation "create".
     */
    public void markVoicePagingT3413Create() throws JNCException {
        markLeafCreate("voicePagingT3413");
    }

    /**
     * Marks the leaf "voice-paging-t3413" with operation "delete".
     */
    public void markVoicePagingT3413Delete() throws JNCException {
        markLeafDelete("voicePagingT3413");
    }

    /* Access methods for optional leaf child: "voice-paging-retry-n3413". */

    /**
     * Gets the value for child leaf "voice-paging-retry-n3413".
     * @return The value of the leaf.
     */
    public YangUInt8 getVoicePagingRetryN3413Value() throws JNCException {
        YangUInt8 voicePagingRetryN3413 = (YangUInt8)getValue("voice-paging-retry-n3413");
        if (voicePagingRetryN3413 == null) {
            voicePagingRetryN3413 = new YangUInt8("0");  // default
        }
        return voicePagingRetryN3413;
    }

    /**
     * Sets the value for child leaf "voice-paging-retry-n3413",
     * using instance of generated typedef class.
     * @param voicePagingRetryN3413Value The value to set.
     * @param voicePagingRetryN3413Value used during instantiation.
     */
    public void setVoicePagingRetryN3413Value(YangUInt8 voicePagingRetryN3413Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "voice-paging-retry-n3413",
            voicePagingRetryN3413Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "voice-paging-retry-n3413",
     * using Java primitive values.
     * @param voicePagingRetryN3413Value used during instantiation.
     */
    public void setVoicePagingRetryN3413Value(short voicePagingRetryN3413Value)
            throws JNCException {
        setVoicePagingRetryN3413Value(new YangUInt8(voicePagingRetryN3413Value));
    }

    /**
     * Sets the value for child leaf "voice-paging-retry-n3413",
     * using a String value.
     * @param voicePagingRetryN3413Value used during instantiation.
     */
    public void setVoicePagingRetryN3413Value(String voicePagingRetryN3413Value)
            throws JNCException {
        setVoicePagingRetryN3413Value(new YangUInt8(voicePagingRetryN3413Value));
    }

    /**
     * Unsets the value for child leaf "voice-paging-retry-n3413".
     */
    public void unsetVoicePagingRetryN3413Value() throws JNCException {
        delete("voice-paging-retry-n3413");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "voice-paging-retry-n3413" leaf will not have a value.
     */
    public void addVoicePagingRetryN3413() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "voice-paging-retry-n3413",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "voice-paging-retry-n3413" with operation "replace".
     */
    public void markVoicePagingRetryN3413Replace() throws JNCException {
        markLeafReplace("voicePagingRetryN3413");
    }

    /**
     * Marks the leaf "voice-paging-retry-n3413" with operation "merge".
     */
    public void markVoicePagingRetryN3413Merge() throws JNCException {
        markLeafMerge("voicePagingRetryN3413");
    }

    /**
     * Marks the leaf "voice-paging-retry-n3413" with operation "create".
     */
    public void markVoicePagingRetryN3413Create() throws JNCException {
        markLeafCreate("voicePagingRetryN3413");
    }

    /**
     * Marks the leaf "voice-paging-retry-n3413" with operation "delete".
     */
    public void markVoicePagingRetryN3413Delete() throws JNCException {
        markLeafDelete("voicePagingRetryN3413");
    }

    /* Access methods for optional leaf child: "cancel-location-detach-cause". */

    /**
     * Gets the value for child leaf "cancel-location-detach-cause".
     * @return The value of the leaf.
     */
    public YangEnumeration getCancelLocationDetachCauseValue()
            throws JNCException {
        YangEnumeration cancelLocationDetachCause = (YangEnumeration)getValue("cancel-location-detach-cause");
        if (cancelLocationDetachCause == null) {
            cancelLocationDetachCause = new YangEnumeration("eps-service-not-allowed-7", new String[] {  // default
                "none",
                "imsi-unknown-in-hss-2",
                "illegal-ue-3",
                "illegal-me-6",
                "eps-service-not-allowed-7",
                "eps-and-non-eps-service-not-allowed-8",
                "plmn-not-allowed-11",
                "tracking-area-not-allowed-12",
                "roaming-not-allowed-in-this-ta-13",
                "eps-service-not-allowed-in-this-plmn-14",
                "no-suitable-cells-in-ta-15",
            });
        }
        return cancelLocationDetachCause;
    }

    /**
     * Sets the value for child leaf "cancel-location-detach-cause",
     * using instance of generated typedef class.
     * @param cancelLocationDetachCauseValue The value to set.
     * @param cancelLocationDetachCauseValue used during instantiation.
     */
    public void setCancelLocationDetachCauseValue(YangEnumeration cancelLocationDetachCauseValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cancel-location-detach-cause",
            cancelLocationDetachCauseValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cancel-location-detach-cause",
     * using a String value.
     * @param cancelLocationDetachCauseValue used during instantiation.
     */
    public void setCancelLocationDetachCauseValue(String cancelLocationDetachCauseValue)
            throws JNCException {
        setCancelLocationDetachCauseValue(new YangEnumeration(cancelLocationDetachCauseValue, new String[] {
             "none",
             "imsi-unknown-in-hss-2",
             "illegal-ue-3",
             "illegal-me-6",
             "eps-service-not-allowed-7",
             "eps-and-non-eps-service-not-allowed-8",
             "plmn-not-allowed-11",
             "tracking-area-not-allowed-12",
             "roaming-not-allowed-in-this-ta-13",
             "eps-service-not-allowed-in-this-plmn-14",
             "no-suitable-cells-in-ta-15",
        }));
    }

    /**
     * Unsets the value for child leaf "cancel-location-detach-cause".
     */
    public void unsetCancelLocationDetachCauseValue() throws JNCException {
        delete("cancel-location-detach-cause");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cancel-location-detach-cause" leaf will not have a value.
     */
    public void addCancelLocationDetachCause() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cancel-location-detach-cause",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cancel-location-detach-cause" with operation "replace".
     */
    public void markCancelLocationDetachCauseReplace() throws JNCException {
        markLeafReplace("cancelLocationDetachCause");
    }

    /**
     * Marks the leaf "cancel-location-detach-cause" with operation "merge".
     */
    public void markCancelLocationDetachCauseMerge() throws JNCException {
        markLeafMerge("cancelLocationDetachCause");
    }

    /**
     * Marks the leaf "cancel-location-detach-cause" with operation "create".
     */
    public void markCancelLocationDetachCauseCreate() throws JNCException {
        markLeafCreate("cancelLocationDetachCause");
    }

    /**
     * Marks the leaf "cancel-location-detach-cause" with operation "delete".
     */
    public void markCancelLocationDetachCauseDelete() throws JNCException {
        markLeafDelete("cancelLocationDetachCause");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
