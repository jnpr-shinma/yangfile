/* 
 * @(#)MmeNasSgsnSm.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.nas;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/nas/mme-nas-sgsn-sm"
 * <p>
 * See line 644 in
 * sgsnScConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeNasSgsnSm extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeNasSgsnSm object.
     */
    public MmeNasSgsnSm() {
        super(Epc.NAMESPACE, "mme-nas-sgsn-sm");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeNasSgsnSm clone() {
        return (MmeNasSgsnSm)cloneContent(new MmeNasSgsnSm());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeNasSgsnSm cloneShallow() {
        return (MmeNasSgsnSm)cloneShallowContent(new MmeNasSgsnSm());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "nwk-pdp-deact-timer-t3395",
            "nwk-pdp-deact-retry-n3395",
            "nwk-pdp-modify-timer-t3386",
            "nwk-pdp-modify-retry-n3386",
            "pdp-activations-per-mobile",
            "ipv6-enduser-address",
            "route-advance",
            "qos-negotiation",
            "qos-upgrade-support",
            "local-qos-control",
            "old-sgsn-buffering",
            "secondary-pdp-context",
        };
    }

    /* Access methods for optional leaf child: "nwk-pdp-deact-timer-t3395". */

    /**
     * Gets the value for child leaf "nwk-pdp-deact-timer-t3395".
     * @return The value of the leaf.
     */
    public YangUInt8 getNwkPdpDeactTimerT3395Value() throws JNCException {
        YangUInt8 nwkPdpDeactTimerT3395 = (YangUInt8)getValue("nwk-pdp-deact-timer-t3395");
        if (nwkPdpDeactTimerT3395 == null) {
            nwkPdpDeactTimerT3395 = new YangUInt8("8");  // default
        }
        return nwkPdpDeactTimerT3395;
    }

    /**
     * Sets the value for child leaf "nwk-pdp-deact-timer-t3395",
     * using instance of generated typedef class.
     * @param nwkPdpDeactTimerT3395Value The value to set.
     * @param nwkPdpDeactTimerT3395Value used during instantiation.
     */
    public void setNwkPdpDeactTimerT3395Value(YangUInt8 nwkPdpDeactTimerT3395Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-pdp-deact-timer-t3395",
            nwkPdpDeactTimerT3395Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nwk-pdp-deact-timer-t3395",
     * using Java primitive values.
     * @param nwkPdpDeactTimerT3395Value used during instantiation.
     */
    public void setNwkPdpDeactTimerT3395Value(short nwkPdpDeactTimerT3395Value)
            throws JNCException {
        setNwkPdpDeactTimerT3395Value(new YangUInt8(nwkPdpDeactTimerT3395Value));
    }

    /**
     * Sets the value for child leaf "nwk-pdp-deact-timer-t3395",
     * using a String value.
     * @param nwkPdpDeactTimerT3395Value used during instantiation.
     */
    public void setNwkPdpDeactTimerT3395Value(String nwkPdpDeactTimerT3395Value)
            throws JNCException {
        setNwkPdpDeactTimerT3395Value(new YangUInt8(nwkPdpDeactTimerT3395Value));
    }

    /**
     * Unsets the value for child leaf "nwk-pdp-deact-timer-t3395".
     */
    public void unsetNwkPdpDeactTimerT3395Value() throws JNCException {
        delete("nwk-pdp-deact-timer-t3395");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nwk-pdp-deact-timer-t3395" leaf will not have a value.
     */
    public void addNwkPdpDeactTimerT3395() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-pdp-deact-timer-t3395",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nwk-pdp-deact-timer-t3395" with operation "replace".
     */
    public void markNwkPdpDeactTimerT3395Replace() throws JNCException {
        markLeafReplace("nwkPdpDeactTimerT3395");
    }

    /**
     * Marks the leaf "nwk-pdp-deact-timer-t3395" with operation "merge".
     */
    public void markNwkPdpDeactTimerT3395Merge() throws JNCException {
        markLeafMerge("nwkPdpDeactTimerT3395");
    }

    /**
     * Marks the leaf "nwk-pdp-deact-timer-t3395" with operation "create".
     */
    public void markNwkPdpDeactTimerT3395Create() throws JNCException {
        markLeafCreate("nwkPdpDeactTimerT3395");
    }

    /**
     * Marks the leaf "nwk-pdp-deact-timer-t3395" with operation "delete".
     */
    public void markNwkPdpDeactTimerT3395Delete() throws JNCException {
        markLeafDelete("nwkPdpDeactTimerT3395");
    }

    /* Access methods for optional leaf child: "nwk-pdp-deact-retry-n3395". */

    /**
     * Gets the value for child leaf "nwk-pdp-deact-retry-n3395".
     * @return The value of the leaf.
     */
    public YangUInt8 getNwkPdpDeactRetryN3395Value() throws JNCException {
        YangUInt8 nwkPdpDeactRetryN3395 = (YangUInt8)getValue("nwk-pdp-deact-retry-n3395");
        if (nwkPdpDeactRetryN3395 == null) {
            nwkPdpDeactRetryN3395 = new YangUInt8("4");  // default
        }
        return nwkPdpDeactRetryN3395;
    }

    /**
     * Sets the value for child leaf "nwk-pdp-deact-retry-n3395",
     * using instance of generated typedef class.
     * @param nwkPdpDeactRetryN3395Value The value to set.
     * @param nwkPdpDeactRetryN3395Value used during instantiation.
     */
    public void setNwkPdpDeactRetryN3395Value(YangUInt8 nwkPdpDeactRetryN3395Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-pdp-deact-retry-n3395",
            nwkPdpDeactRetryN3395Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nwk-pdp-deact-retry-n3395",
     * using Java primitive values.
     * @param nwkPdpDeactRetryN3395Value used during instantiation.
     */
    public void setNwkPdpDeactRetryN3395Value(short nwkPdpDeactRetryN3395Value)
            throws JNCException {
        setNwkPdpDeactRetryN3395Value(new YangUInt8(nwkPdpDeactRetryN3395Value));
    }

    /**
     * Sets the value for child leaf "nwk-pdp-deact-retry-n3395",
     * using a String value.
     * @param nwkPdpDeactRetryN3395Value used during instantiation.
     */
    public void setNwkPdpDeactRetryN3395Value(String nwkPdpDeactRetryN3395Value)
            throws JNCException {
        setNwkPdpDeactRetryN3395Value(new YangUInt8(nwkPdpDeactRetryN3395Value));
    }

    /**
     * Unsets the value for child leaf "nwk-pdp-deact-retry-n3395".
     */
    public void unsetNwkPdpDeactRetryN3395Value() throws JNCException {
        delete("nwk-pdp-deact-retry-n3395");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nwk-pdp-deact-retry-n3395" leaf will not have a value.
     */
    public void addNwkPdpDeactRetryN3395() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-pdp-deact-retry-n3395",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nwk-pdp-deact-retry-n3395" with operation "replace".
     */
    public void markNwkPdpDeactRetryN3395Replace() throws JNCException {
        markLeafReplace("nwkPdpDeactRetryN3395");
    }

    /**
     * Marks the leaf "nwk-pdp-deact-retry-n3395" with operation "merge".
     */
    public void markNwkPdpDeactRetryN3395Merge() throws JNCException {
        markLeafMerge("nwkPdpDeactRetryN3395");
    }

    /**
     * Marks the leaf "nwk-pdp-deact-retry-n3395" with operation "create".
     */
    public void markNwkPdpDeactRetryN3395Create() throws JNCException {
        markLeafCreate("nwkPdpDeactRetryN3395");
    }

    /**
     * Marks the leaf "nwk-pdp-deact-retry-n3395" with operation "delete".
     */
    public void markNwkPdpDeactRetryN3395Delete() throws JNCException {
        markLeafDelete("nwkPdpDeactRetryN3395");
    }

    /* Access methods for optional leaf child: "nwk-pdp-modify-timer-t3386". */

    /**
     * Gets the value for child leaf "nwk-pdp-modify-timer-t3386".
     * @return The value of the leaf.
     */
    public YangUInt8 getNwkPdpModifyTimerT3386Value() throws JNCException {
        YangUInt8 nwkPdpModifyTimerT3386 = (YangUInt8)getValue("nwk-pdp-modify-timer-t3386");
        if (nwkPdpModifyTimerT3386 == null) {
            nwkPdpModifyTimerT3386 = new YangUInt8("8");  // default
        }
        return nwkPdpModifyTimerT3386;
    }

    /**
     * Sets the value for child leaf "nwk-pdp-modify-timer-t3386",
     * using instance of generated typedef class.
     * @param nwkPdpModifyTimerT3386Value The value to set.
     * @param nwkPdpModifyTimerT3386Value used during instantiation.
     */
    public void setNwkPdpModifyTimerT3386Value(YangUInt8 nwkPdpModifyTimerT3386Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-pdp-modify-timer-t3386",
            nwkPdpModifyTimerT3386Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nwk-pdp-modify-timer-t3386",
     * using Java primitive values.
     * @param nwkPdpModifyTimerT3386Value used during instantiation.
     */
    public void setNwkPdpModifyTimerT3386Value(short nwkPdpModifyTimerT3386Value)
            throws JNCException {
        setNwkPdpModifyTimerT3386Value(new YangUInt8(nwkPdpModifyTimerT3386Value));
    }

    /**
     * Sets the value for child leaf "nwk-pdp-modify-timer-t3386",
     * using a String value.
     * @param nwkPdpModifyTimerT3386Value used during instantiation.
     */
    public void setNwkPdpModifyTimerT3386Value(String nwkPdpModifyTimerT3386Value)
            throws JNCException {
        setNwkPdpModifyTimerT3386Value(new YangUInt8(nwkPdpModifyTimerT3386Value));
    }

    /**
     * Unsets the value for child leaf "nwk-pdp-modify-timer-t3386".
     */
    public void unsetNwkPdpModifyTimerT3386Value() throws JNCException {
        delete("nwk-pdp-modify-timer-t3386");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nwk-pdp-modify-timer-t3386" leaf will not have a value.
     */
    public void addNwkPdpModifyTimerT3386() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-pdp-modify-timer-t3386",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nwk-pdp-modify-timer-t3386" with operation "replace".
     */
    public void markNwkPdpModifyTimerT3386Replace() throws JNCException {
        markLeafReplace("nwkPdpModifyTimerT3386");
    }

    /**
     * Marks the leaf "nwk-pdp-modify-timer-t3386" with operation "merge".
     */
    public void markNwkPdpModifyTimerT3386Merge() throws JNCException {
        markLeafMerge("nwkPdpModifyTimerT3386");
    }

    /**
     * Marks the leaf "nwk-pdp-modify-timer-t3386" with operation "create".
     */
    public void markNwkPdpModifyTimerT3386Create() throws JNCException {
        markLeafCreate("nwkPdpModifyTimerT3386");
    }

    /**
     * Marks the leaf "nwk-pdp-modify-timer-t3386" with operation "delete".
     */
    public void markNwkPdpModifyTimerT3386Delete() throws JNCException {
        markLeafDelete("nwkPdpModifyTimerT3386");
    }

    /* Access methods for optional leaf child: "nwk-pdp-modify-retry-n3386". */

    /**
     * Gets the value for child leaf "nwk-pdp-modify-retry-n3386".
     * @return The value of the leaf.
     */
    public YangUInt8 getNwkPdpModifyRetryN3386Value() throws JNCException {
        YangUInt8 nwkPdpModifyRetryN3386 = (YangUInt8)getValue("nwk-pdp-modify-retry-n3386");
        if (nwkPdpModifyRetryN3386 == null) {
            nwkPdpModifyRetryN3386 = new YangUInt8("4");  // default
        }
        return nwkPdpModifyRetryN3386;
    }

    /**
     * Sets the value for child leaf "nwk-pdp-modify-retry-n3386",
     * using instance of generated typedef class.
     * @param nwkPdpModifyRetryN3386Value The value to set.
     * @param nwkPdpModifyRetryN3386Value used during instantiation.
     */
    public void setNwkPdpModifyRetryN3386Value(YangUInt8 nwkPdpModifyRetryN3386Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-pdp-modify-retry-n3386",
            nwkPdpModifyRetryN3386Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nwk-pdp-modify-retry-n3386",
     * using Java primitive values.
     * @param nwkPdpModifyRetryN3386Value used during instantiation.
     */
    public void setNwkPdpModifyRetryN3386Value(short nwkPdpModifyRetryN3386Value)
            throws JNCException {
        setNwkPdpModifyRetryN3386Value(new YangUInt8(nwkPdpModifyRetryN3386Value));
    }

    /**
     * Sets the value for child leaf "nwk-pdp-modify-retry-n3386",
     * using a String value.
     * @param nwkPdpModifyRetryN3386Value used during instantiation.
     */
    public void setNwkPdpModifyRetryN3386Value(String nwkPdpModifyRetryN3386Value)
            throws JNCException {
        setNwkPdpModifyRetryN3386Value(new YangUInt8(nwkPdpModifyRetryN3386Value));
    }

    /**
     * Unsets the value for child leaf "nwk-pdp-modify-retry-n3386".
     */
    public void unsetNwkPdpModifyRetryN3386Value() throws JNCException {
        delete("nwk-pdp-modify-retry-n3386");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nwk-pdp-modify-retry-n3386" leaf will not have a value.
     */
    public void addNwkPdpModifyRetryN3386() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nwk-pdp-modify-retry-n3386",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nwk-pdp-modify-retry-n3386" with operation "replace".
     */
    public void markNwkPdpModifyRetryN3386Replace() throws JNCException {
        markLeafReplace("nwkPdpModifyRetryN3386");
    }

    /**
     * Marks the leaf "nwk-pdp-modify-retry-n3386" with operation "merge".
     */
    public void markNwkPdpModifyRetryN3386Merge() throws JNCException {
        markLeafMerge("nwkPdpModifyRetryN3386");
    }

    /**
     * Marks the leaf "nwk-pdp-modify-retry-n3386" with operation "create".
     */
    public void markNwkPdpModifyRetryN3386Create() throws JNCException {
        markLeafCreate("nwkPdpModifyRetryN3386");
    }

    /**
     * Marks the leaf "nwk-pdp-modify-retry-n3386" with operation "delete".
     */
    public void markNwkPdpModifyRetryN3386Delete() throws JNCException {
        markLeafDelete("nwkPdpModifyRetryN3386");
    }

    /* Access methods for optional leaf child: "pdp-activations-per-mobile". */

    /**
     * Gets the value for child leaf "pdp-activations-per-mobile".
     * @return The value of the leaf.
     */
    public YangUInt8 getPdpActivationsPerMobileValue() throws JNCException {
        YangUInt8 pdpActivationsPerMobile = (YangUInt8)getValue("pdp-activations-per-mobile");
        if (pdpActivationsPerMobile == null) {
            pdpActivationsPerMobile = new YangUInt8("8");  // default
        }
        return pdpActivationsPerMobile;
    }

    /**
     * Sets the value for child leaf "pdp-activations-per-mobile",
     * using instance of generated typedef class.
     * @param pdpActivationsPerMobileValue The value to set.
     * @param pdpActivationsPerMobileValue used during instantiation.
     */
    public void setPdpActivationsPerMobileValue(YangUInt8 pdpActivationsPerMobileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdp-activations-per-mobile",
            pdpActivationsPerMobileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pdp-activations-per-mobile",
     * using Java primitive values.
     * @param pdpActivationsPerMobileValue used during instantiation.
     */
    public void setPdpActivationsPerMobileValue(short pdpActivationsPerMobileValue)
            throws JNCException {
        setPdpActivationsPerMobileValue(new YangUInt8(pdpActivationsPerMobileValue));
    }

    /**
     * Sets the value for child leaf "pdp-activations-per-mobile",
     * using a String value.
     * @param pdpActivationsPerMobileValue used during instantiation.
     */
    public void setPdpActivationsPerMobileValue(String pdpActivationsPerMobileValue)
            throws JNCException {
        setPdpActivationsPerMobileValue(new YangUInt8(pdpActivationsPerMobileValue));
    }

    /**
     * Unsets the value for child leaf "pdp-activations-per-mobile".
     */
    public void unsetPdpActivationsPerMobileValue() throws JNCException {
        delete("pdp-activations-per-mobile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pdp-activations-per-mobile" leaf will not have a value.
     */
    public void addPdpActivationsPerMobile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdp-activations-per-mobile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pdp-activations-per-mobile" with operation "replace".
     */
    public void markPdpActivationsPerMobileReplace() throws JNCException {
        markLeafReplace("pdpActivationsPerMobile");
    }

    /**
     * Marks the leaf "pdp-activations-per-mobile" with operation "merge".
     */
    public void markPdpActivationsPerMobileMerge() throws JNCException {
        markLeafMerge("pdpActivationsPerMobile");
    }

    /**
     * Marks the leaf "pdp-activations-per-mobile" with operation "create".
     */
    public void markPdpActivationsPerMobileCreate() throws JNCException {
        markLeafCreate("pdpActivationsPerMobile");
    }

    /**
     * Marks the leaf "pdp-activations-per-mobile" with operation "delete".
     */
    public void markPdpActivationsPerMobileDelete() throws JNCException {
        markLeafDelete("pdpActivationsPerMobile");
    }

    /* Access methods for optional leaf child: "ipv6-enduser-address". */

    /**
     * Gets the value for child leaf "ipv6-enduser-address".
     * @return The value of the leaf.
     */
    public YangEnumeration getIpv6EnduserAddressValue() throws JNCException {
        YangEnumeration ipv6EnduserAddress = (YangEnumeration)getValue("ipv6-enduser-address");
        if (ipv6EnduserAddress == null) {
            ipv6EnduserAddress = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return ipv6EnduserAddress;
    }

    /**
     * Sets the value for child leaf "ipv6-enduser-address",
     * using instance of generated typedef class.
     * @param ipv6EnduserAddressValue The value to set.
     * @param ipv6EnduserAddressValue used during instantiation.
     */
    public void setIpv6EnduserAddressValue(YangEnumeration ipv6EnduserAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ipv6-enduser-address",
            ipv6EnduserAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ipv6-enduser-address",
     * using a String value.
     * @param ipv6EnduserAddressValue used during instantiation.
     */
    public void setIpv6EnduserAddressValue(String ipv6EnduserAddressValue)
            throws JNCException {
        setIpv6EnduserAddressValue(new YangEnumeration(ipv6EnduserAddressValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "ipv6-enduser-address".
     */
    public void unsetIpv6EnduserAddressValue() throws JNCException {
        delete("ipv6-enduser-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ipv6-enduser-address" leaf will not have a value.
     */
    public void addIpv6EnduserAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ipv6-enduser-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ipv6-enduser-address" with operation "replace".
     */
    public void markIpv6EnduserAddressReplace() throws JNCException {
        markLeafReplace("ipv6EnduserAddress");
    }

    /**
     * Marks the leaf "ipv6-enduser-address" with operation "merge".
     */
    public void markIpv6EnduserAddressMerge() throws JNCException {
        markLeafMerge("ipv6EnduserAddress");
    }

    /**
     * Marks the leaf "ipv6-enduser-address" with operation "create".
     */
    public void markIpv6EnduserAddressCreate() throws JNCException {
        markLeafCreate("ipv6EnduserAddress");
    }

    /**
     * Marks the leaf "ipv6-enduser-address" with operation "delete".
     */
    public void markIpv6EnduserAddressDelete() throws JNCException {
        markLeafDelete("ipv6EnduserAddress");
    }

    /* Access methods for optional leaf child: "route-advance". */

    /**
     * Gets the value for child leaf "route-advance".
     * @return The value of the leaf.
     */
    public YangEnumeration getRouteAdvanceValue() throws JNCException {
        YangEnumeration routeAdvance = (YangEnumeration)getValue("route-advance");
        if (routeAdvance == null) {
            routeAdvance = new YangEnumeration("enable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return routeAdvance;
    }

    /**
     * Sets the value for child leaf "route-advance",
     * using instance of generated typedef class.
     * @param routeAdvanceValue The value to set.
     * @param routeAdvanceValue used during instantiation.
     */
    public void setRouteAdvanceValue(YangEnumeration routeAdvanceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "route-advance",
            routeAdvanceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "route-advance",
     * using a String value.
     * @param routeAdvanceValue used during instantiation.
     */
    public void setRouteAdvanceValue(String routeAdvanceValue)
            throws JNCException {
        setRouteAdvanceValue(new YangEnumeration(routeAdvanceValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "route-advance".
     */
    public void unsetRouteAdvanceValue() throws JNCException {
        delete("route-advance");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "route-advance" leaf will not have a value.
     */
    public void addRouteAdvance() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "route-advance",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "route-advance" with operation "replace".
     */
    public void markRouteAdvanceReplace() throws JNCException {
        markLeafReplace("routeAdvance");
    }

    /**
     * Marks the leaf "route-advance" with operation "merge".
     */
    public void markRouteAdvanceMerge() throws JNCException {
        markLeafMerge("routeAdvance");
    }

    /**
     * Marks the leaf "route-advance" with operation "create".
     */
    public void markRouteAdvanceCreate() throws JNCException {
        markLeafCreate("routeAdvance");
    }

    /**
     * Marks the leaf "route-advance" with operation "delete".
     */
    public void markRouteAdvanceDelete() throws JNCException {
        markLeafDelete("routeAdvance");
    }

    /* Access methods for optional leaf child: "qos-negotiation". */

    /**
     * Gets the value for child leaf "qos-negotiation".
     * @return The value of the leaf.
     */
    public YangEnumeration getQosNegotiationValue() throws JNCException {
        YangEnumeration qosNegotiation = (YangEnumeration)getValue("qos-negotiation");
        if (qosNegotiation == null) {
            qosNegotiation = new YangEnumeration("enable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return qosNegotiation;
    }

    /**
     * Sets the value for child leaf "qos-negotiation",
     * using instance of generated typedef class.
     * @param qosNegotiationValue The value to set.
     * @param qosNegotiationValue used during instantiation.
     */
    public void setQosNegotiationValue(YangEnumeration qosNegotiationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "qos-negotiation",
            qosNegotiationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "qos-negotiation",
     * using a String value.
     * @param qosNegotiationValue used during instantiation.
     */
    public void setQosNegotiationValue(String qosNegotiationValue)
            throws JNCException {
        setQosNegotiationValue(new YangEnumeration(qosNegotiationValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "qos-negotiation".
     */
    public void unsetQosNegotiationValue() throws JNCException {
        delete("qos-negotiation");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "qos-negotiation" leaf will not have a value.
     */
    public void addQosNegotiation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "qos-negotiation",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "qos-negotiation" with operation "replace".
     */
    public void markQosNegotiationReplace() throws JNCException {
        markLeafReplace("qosNegotiation");
    }

    /**
     * Marks the leaf "qos-negotiation" with operation "merge".
     */
    public void markQosNegotiationMerge() throws JNCException {
        markLeafMerge("qosNegotiation");
    }

    /**
     * Marks the leaf "qos-negotiation" with operation "create".
     */
    public void markQosNegotiationCreate() throws JNCException {
        markLeafCreate("qosNegotiation");
    }

    /**
     * Marks the leaf "qos-negotiation" with operation "delete".
     */
    public void markQosNegotiationDelete() throws JNCException {
        markLeafDelete("qosNegotiation");
    }

    /* Access methods for optional leaf child: "qos-upgrade-support". */

    /**
     * Gets the value for child leaf "qos-upgrade-support".
     * @return The value of the leaf.
     */
    public YangEnumeration getQosUpgradeSupportValue() throws JNCException {
        YangEnumeration qosUpgradeSupport = (YangEnumeration)getValue("qos-upgrade-support");
        if (qosUpgradeSupport == null) {
            qosUpgradeSupport = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return qosUpgradeSupport;
    }

    /**
     * Sets the value for child leaf "qos-upgrade-support",
     * using instance of generated typedef class.
     * @param qosUpgradeSupportValue The value to set.
     * @param qosUpgradeSupportValue used during instantiation.
     */
    public void setQosUpgradeSupportValue(YangEnumeration qosUpgradeSupportValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "qos-upgrade-support",
            qosUpgradeSupportValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "qos-upgrade-support",
     * using a String value.
     * @param qosUpgradeSupportValue used during instantiation.
     */
    public void setQosUpgradeSupportValue(String qosUpgradeSupportValue)
            throws JNCException {
        setQosUpgradeSupportValue(new YangEnumeration(qosUpgradeSupportValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "qos-upgrade-support".
     */
    public void unsetQosUpgradeSupportValue() throws JNCException {
        delete("qos-upgrade-support");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "qos-upgrade-support" leaf will not have a value.
     */
    public void addQosUpgradeSupport() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "qos-upgrade-support",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "qos-upgrade-support" with operation "replace".
     */
    public void markQosUpgradeSupportReplace() throws JNCException {
        markLeafReplace("qosUpgradeSupport");
    }

    /**
     * Marks the leaf "qos-upgrade-support" with operation "merge".
     */
    public void markQosUpgradeSupportMerge() throws JNCException {
        markLeafMerge("qosUpgradeSupport");
    }

    /**
     * Marks the leaf "qos-upgrade-support" with operation "create".
     */
    public void markQosUpgradeSupportCreate() throws JNCException {
        markLeafCreate("qosUpgradeSupport");
    }

    /**
     * Marks the leaf "qos-upgrade-support" with operation "delete".
     */
    public void markQosUpgradeSupportDelete() throws JNCException {
        markLeafDelete("qosUpgradeSupport");
    }

    /* Access methods for optional leaf child: "local-qos-control". */

    /**
     * Gets the value for child leaf "local-qos-control".
     * @return The value of the leaf.
     */
    public YangEnumeration getLocalQosControlValue() throws JNCException {
        YangEnumeration localQosControl = (YangEnumeration)getValue("local-qos-control");
        if (localQosControl == null) {
            localQosControl = new YangEnumeration("never", new String[] {  // default
                "never",
                "requested-qos-subscribed",
                "always",
            });
        }
        return localQosControl;
    }

    /**
     * Sets the value for child leaf "local-qos-control",
     * using instance of generated typedef class.
     * @param localQosControlValue The value to set.
     * @param localQosControlValue used during instantiation.
     */
    public void setLocalQosControlValue(YangEnumeration localQosControlValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-qos-control",
            localQosControlValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "local-qos-control",
     * using a String value.
     * @param localQosControlValue used during instantiation.
     */
    public void setLocalQosControlValue(String localQosControlValue)
            throws JNCException {
        setLocalQosControlValue(new YangEnumeration(localQosControlValue, new String[] {
             "never",
             "requested-qos-subscribed",
             "always",
        }));
    }

    /**
     * Unsets the value for child leaf "local-qos-control".
     */
    public void unsetLocalQosControlValue() throws JNCException {
        delete("local-qos-control");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "local-qos-control" leaf will not have a value.
     */
    public void addLocalQosControl() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "local-qos-control",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "local-qos-control" with operation "replace".
     */
    public void markLocalQosControlReplace() throws JNCException {
        markLeafReplace("localQosControl");
    }

    /**
     * Marks the leaf "local-qos-control" with operation "merge".
     */
    public void markLocalQosControlMerge() throws JNCException {
        markLeafMerge("localQosControl");
    }

    /**
     * Marks the leaf "local-qos-control" with operation "create".
     */
    public void markLocalQosControlCreate() throws JNCException {
        markLeafCreate("localQosControl");
    }

    /**
     * Marks the leaf "local-qos-control" with operation "delete".
     */
    public void markLocalQosControlDelete() throws JNCException {
        markLeafDelete("localQosControl");
    }

    /* Access methods for optional leaf child: "old-sgsn-buffering". */

    /**
     * Gets the value for child leaf "old-sgsn-buffering".
     * @return The value of the leaf.
     */
    public YangEnumeration getOldSgsnBufferingValue() throws JNCException {
        YangEnumeration oldSgsnBuffering = (YangEnumeration)getValue("old-sgsn-buffering");
        if (oldSgsnBuffering == null) {
            oldSgsnBuffering = new YangEnumeration("enable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return oldSgsnBuffering;
    }

    /**
     * Sets the value for child leaf "old-sgsn-buffering",
     * using instance of generated typedef class.
     * @param oldSgsnBufferingValue The value to set.
     * @param oldSgsnBufferingValue used during instantiation.
     */
    public void setOldSgsnBufferingValue(YangEnumeration oldSgsnBufferingValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "old-sgsn-buffering",
            oldSgsnBufferingValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "old-sgsn-buffering",
     * using a String value.
     * @param oldSgsnBufferingValue used during instantiation.
     */
    public void setOldSgsnBufferingValue(String oldSgsnBufferingValue)
            throws JNCException {
        setOldSgsnBufferingValue(new YangEnumeration(oldSgsnBufferingValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "old-sgsn-buffering".
     */
    public void unsetOldSgsnBufferingValue() throws JNCException {
        delete("old-sgsn-buffering");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "old-sgsn-buffering" leaf will not have a value.
     */
    public void addOldSgsnBuffering() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "old-sgsn-buffering",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "old-sgsn-buffering" with operation "replace".
     */
    public void markOldSgsnBufferingReplace() throws JNCException {
        markLeafReplace("oldSgsnBuffering");
    }

    /**
     * Marks the leaf "old-sgsn-buffering" with operation "merge".
     */
    public void markOldSgsnBufferingMerge() throws JNCException {
        markLeafMerge("oldSgsnBuffering");
    }

    /**
     * Marks the leaf "old-sgsn-buffering" with operation "create".
     */
    public void markOldSgsnBufferingCreate() throws JNCException {
        markLeafCreate("oldSgsnBuffering");
    }

    /**
     * Marks the leaf "old-sgsn-buffering" with operation "delete".
     */
    public void markOldSgsnBufferingDelete() throws JNCException {
        markLeafDelete("oldSgsnBuffering");
    }

    /* Access methods for optional leaf child: "secondary-pdp-context". */

    /**
     * Gets the value for child leaf "secondary-pdp-context".
     * @return The value of the leaf.
     */
    public YangEnumeration getSecondaryPdpContextValue() throws JNCException {
        YangEnumeration secondaryPdpContext = (YangEnumeration)getValue("secondary-pdp-context");
        if (secondaryPdpContext == null) {
            secondaryPdpContext = new YangEnumeration("disable", new String[] {  // default
                "disable",
                "enable",
            });
        }
        return secondaryPdpContext;
    }

    /**
     * Sets the value for child leaf "secondary-pdp-context",
     * using instance of generated typedef class.
     * @param secondaryPdpContextValue The value to set.
     * @param secondaryPdpContextValue used during instantiation.
     */
    public void setSecondaryPdpContextValue(YangEnumeration secondaryPdpContextValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "secondary-pdp-context",
            secondaryPdpContextValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "secondary-pdp-context",
     * using a String value.
     * @param secondaryPdpContextValue used during instantiation.
     */
    public void setSecondaryPdpContextValue(String secondaryPdpContextValue)
            throws JNCException {
        setSecondaryPdpContextValue(new YangEnumeration(secondaryPdpContextValue, new String[] {
             "disable",
             "enable",
        }));
    }

    /**
     * Unsets the value for child leaf "secondary-pdp-context".
     */
    public void unsetSecondaryPdpContextValue() throws JNCException {
        delete("secondary-pdp-context");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "secondary-pdp-context" leaf will not have a value.
     */
    public void addSecondaryPdpContext() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "secondary-pdp-context",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "secondary-pdp-context" with operation "replace".
     */
    public void markSecondaryPdpContextReplace() throws JNCException {
        markLeafReplace("secondaryPdpContext");
    }

    /**
     * Marks the leaf "secondary-pdp-context" with operation "merge".
     */
    public void markSecondaryPdpContextMerge() throws JNCException {
        markLeafMerge("secondaryPdpContext");
    }

    /**
     * Marks the leaf "secondary-pdp-context" with operation "create".
     */
    public void markSecondaryPdpContextCreate() throws JNCException {
        markLeafCreate("secondaryPdpContext");
    }

    /**
     * Marks the leaf "secondary-pdp-context" with operation "delete".
     */
    public void markSecondaryPdpContextDelete() throws JNCException {
        markLeafDelete("secondaryPdpContext");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
