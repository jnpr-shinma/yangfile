/* 
 * @(#)MmeEmergencyNumberList.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.nas;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/nas/mme-emergency-number-list"
 * <p>
 * See line 417 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeEmergencyNumberList extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeEmergencyNumberList object.
     */
    public MmeEmergencyNumberList() {
        super(Epc.NAMESPACE, "mme-emergency-number-list");
    }

    /**
     * Constructor for an initialized MmeEmergencyNumberList object,
     * 
     * @param emergencyNumberValue Key argument of child.
     */
    public MmeEmergencyNumberList(YangString emergencyNumberValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-emergency-number-list");
        Leaf emergencyNumber = new Leaf(Epc.NAMESPACE, "emergency-number");
        emergencyNumber.setValue(emergencyNumberValue);
        insertChild(emergencyNumber, childrenNames());
    }

    /**
     * Constructor for an initialized MmeEmergencyNumberList object,
     * with String keys.
     * @param emergencyNumberValue Key argument of child.
     */
    public MmeEmergencyNumberList(String emergencyNumberValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-emergency-number-list");
        Leaf emergencyNumber = new Leaf(Epc.NAMESPACE, "emergency-number");
        emergencyNumber.setValue(new YangString(emergencyNumberValue));
        insertChild(emergencyNumber, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeEmergencyNumberList clone() {
        MmeEmergencyNumberList copy;
        try {
            copy = new MmeEmergencyNumberList(getEmergencyNumberValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeEmergencyNumberList)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeEmergencyNumberList cloneShallow() {
        MmeEmergencyNumberList copy;
        try {
            copy = new MmeEmergencyNumberList(getEmergencyNumberValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeEmergencyNumberList)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "emergency-number",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "emergency-number",
            "emergency-category",
        };
    }

    /* Access methods for leaf child: "emergency-number". */

    /**
     * Gets the value for child leaf "emergency-number".
     * @return The value of the leaf.
     */
    public YangString getEmergencyNumberValue() throws JNCException {
        return (YangString)getValue("emergency-number");
    }

    /**
     * Sets the value for child leaf "emergency-number",
     * using instance of generated typedef class.
     * @param emergencyNumberValue The value to set.
     * @param emergencyNumberValue used during instantiation.
     */
    public void setEmergencyNumberValue(YangString emergencyNumberValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "emergency-number",
            emergencyNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "emergency-number",
     * using a String value.
     * @param emergencyNumberValue used during instantiation.
     */
    public void setEmergencyNumberValue(String emergencyNumberValue)
            throws JNCException {
        setEmergencyNumberValue(new YangString(emergencyNumberValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "emergency-number" leaf will not have a value.
     */
    public void addEmergencyNumber() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "emergency-number",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "emergency-category". */

    /**
     * Gets the value for child leaf "emergency-category".
     * @return The value of the leaf.
     */
    public YangString getEmergencyCategoryValue() throws JNCException {
        return (YangString)getValue("emergency-category");
    }

    /**
     * Sets the value for child leaf "emergency-category",
     * using instance of generated typedef class.
     * @param emergencyCategoryValue The value to set.
     * @param emergencyCategoryValue used during instantiation.
     */
    public void setEmergencyCategoryValue(YangString emergencyCategoryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "emergency-category",
            emergencyCategoryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "emergency-category",
     * using a String value.
     * @param emergencyCategoryValue used during instantiation.
     */
    public void setEmergencyCategoryValue(String emergencyCategoryValue)
            throws JNCException {
        setEmergencyCategoryValue(new YangString(emergencyCategoryValue));
    }

    /**
     * Unsets the value for child leaf "emergency-category".
     */
    public void unsetEmergencyCategoryValue() throws JNCException {
        delete("emergency-category");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "emergency-category" leaf will not have a value.
     */
    public void addEmergencyCategory() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "emergency-category",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "emergency-category" with operation "replace".
     */
    public void markEmergencyCategoryReplace() throws JNCException {
        markLeafReplace("emergencyCategory");
    }

    /**
     * Marks the leaf "emergency-category" with operation "merge".
     */
    public void markEmergencyCategoryMerge() throws JNCException {
        markLeafMerge("emergencyCategory");
    }

    /**
     * Marks the leaf "emergency-category" with operation "create".
     */
    public void markEmergencyCategoryCreate() throws JNCException {
        markLeafCreate("emergencyCategory");
    }

    /**
     * Marks the leaf "emergency-category" with operation "delete".
     */
    public void markEmergencyCategoryDelete() throws JNCException {
        markLeafDelete("emergencyCategory");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
