/* 
 * @(#)MmeSbcIf.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.sbc;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/sbc/mme-sbc-if"
 * <p>
 * See line 25 in
 * sbcConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeSbcIf extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeSbcIf object.
     */
    public MmeSbcIf() {
        super(Epc.NAMESPACE, "mme-sbc-if");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeSbcIf clone() {
        return (MmeSbcIf)cloneContent(new MmeSbcIf());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeSbcIf cloneShallow() {
        return (MmeSbcIf)cloneShallowContent(new MmeSbcIf());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "sctp-profile",
            "routing-instance1",
            "routing-instance2",
            "ip-address1",
            "ip-address2",
            "port",
            "max-outstanding-requests",
            "dscp-mark",
            "sbc-type",
            "warning-message-ttl",
            "version",
        };
    }

    /* Access methods for optional leaf child: "sctp-profile". */

    /**
     * Gets the value for child leaf "sctp-profile".
     * @return The value of the leaf.
     */
    public YangString getSctpProfileValue() throws JNCException {
        return (YangString)getValue("sctp-profile");
    }

    /**
     * Sets the value for child leaf "sctp-profile",
     * using instance of generated typedef class.
     * @param sctpProfileValue The value to set.
     * @param sctpProfileValue used during instantiation.
     */
    public void setSctpProfileValue(YangString sctpProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-profile",
            sctpProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sctp-profile",
     * using a String value.
     * @param sctpProfileValue used during instantiation.
     */
    public void setSctpProfileValue(String sctpProfileValue)
            throws JNCException {
        setSctpProfileValue(new YangString(sctpProfileValue));
    }

    /**
     * Unsets the value for child leaf "sctp-profile".
     */
    public void unsetSctpProfileValue() throws JNCException {
        delete("sctp-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sctp-profile" leaf will not have a value.
     */
    public void addSctpProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sctp-profile" with operation "replace".
     */
    public void markSctpProfileReplace() throws JNCException {
        markLeafReplace("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "merge".
     */
    public void markSctpProfileMerge() throws JNCException {
        markLeafMerge("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "create".
     */
    public void markSctpProfileCreate() throws JNCException {
        markLeafCreate("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "delete".
     */
    public void markSctpProfileDelete() throws JNCException {
        markLeafDelete("sctpProfile");
    }

    /* Access methods for optional leaf child: "routing-instance1". */

    /**
     * Gets the value for child leaf "routing-instance1".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstance1Value() throws JNCException {
        return (YangString)getValue("routing-instance1");
    }

    /**
     * Sets the value for child leaf "routing-instance1",
     * using instance of generated typedef class.
     * @param routingInstance1Value The value to set.
     * @param routingInstance1Value used during instantiation.
     */
    public void setRoutingInstance1Value(YangString routingInstance1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance1",
            routingInstance1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance1",
     * using a String value.
     * @param routingInstance1Value used during instantiation.
     */
    public void setRoutingInstance1Value(String routingInstance1Value)
            throws JNCException {
        setRoutingInstance1Value(new YangString(routingInstance1Value));
    }

    /**
     * Unsets the value for child leaf "routing-instance1".
     */
    public void unsetRoutingInstance1Value() throws JNCException {
        delete("routing-instance1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance1" leaf will not have a value.
     */
    public void addRoutingInstance1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance1" with operation "replace".
     */
    public void markRoutingInstance1Replace() throws JNCException {
        markLeafReplace("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "merge".
     */
    public void markRoutingInstance1Merge() throws JNCException {
        markLeafMerge("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "create".
     */
    public void markRoutingInstance1Create() throws JNCException {
        markLeafCreate("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "delete".
     */
    public void markRoutingInstance1Delete() throws JNCException {
        markLeafDelete("routingInstance1");
    }

    /* Access methods for optional leaf child: "routing-instance2". */

    /**
     * Gets the value for child leaf "routing-instance2".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstance2Value() throws JNCException {
        return (YangString)getValue("routing-instance2");
    }

    /**
     * Sets the value for child leaf "routing-instance2",
     * using instance of generated typedef class.
     * @param routingInstance2Value The value to set.
     * @param routingInstance2Value used during instantiation.
     */
    public void setRoutingInstance2Value(YangString routingInstance2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance2",
            routingInstance2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance2",
     * using a String value.
     * @param routingInstance2Value used during instantiation.
     */
    public void setRoutingInstance2Value(String routingInstance2Value)
            throws JNCException {
        setRoutingInstance2Value(new YangString(routingInstance2Value));
    }

    /**
     * Unsets the value for child leaf "routing-instance2".
     */
    public void unsetRoutingInstance2Value() throws JNCException {
        delete("routing-instance2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance2" leaf will not have a value.
     */
    public void addRoutingInstance2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance2" with operation "replace".
     */
    public void markRoutingInstance2Replace() throws JNCException {
        markLeafReplace("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "merge".
     */
    public void markRoutingInstance2Merge() throws JNCException {
        markLeafMerge("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "create".
     */
    public void markRoutingInstance2Create() throws JNCException {
        markLeafCreate("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "delete".
     */
    public void markRoutingInstance2Delete() throws JNCException {
        markLeafDelete("routingInstance2");
    }

    /* Access methods for optional leaf child: "ip-address1". */

    /**
     * Gets the value for child leaf "ip-address1".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddress1Value() throws JNCException {
        return (IpAddress)getValue("ip-address1");
    }

    /**
     * Sets the value for child leaf "ip-address1",
     * using a JNC type value.
     * @param ipAddress1Value The value to set.
     * @param ipAddress1Value used during instantiation.
     */
    public void setIpAddress1Value(IpAddress ipAddress1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address1",
            ipAddress1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address1",
     * using a String value.
     * @param ipAddress1Value used during instantiation.
     */
    public void setIpAddress1Value(String ipAddress1Value) throws JNCException {
        setIpAddress1Value(new IpAddress(ipAddress1Value));
    }

    /**
     * Unsets the value for child leaf "ip-address1".
     */
    public void unsetIpAddress1Value() throws JNCException {
        delete("ip-address1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address1" leaf will not have a value.
     */
    public void addIpAddress1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address1" with operation "replace".
     */
    public void markIpAddress1Replace() throws JNCException {
        markLeafReplace("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "merge".
     */
    public void markIpAddress1Merge() throws JNCException {
        markLeafMerge("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "create".
     */
    public void markIpAddress1Create() throws JNCException {
        markLeafCreate("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "delete".
     */
    public void markIpAddress1Delete() throws JNCException {
        markLeafDelete("ipAddress1");
    }

    /* Access methods for optional leaf child: "ip-address2". */

    /**
     * Gets the value for child leaf "ip-address2".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddress2Value() throws JNCException {
        IpAddress ipAddress2 = (IpAddress)getValue("ip-address2");
        if (ipAddress2 == null) {
            ipAddress2 = new IpAddress("0.0.0.0");  // default
        }
        return ipAddress2;
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a JNC type value.
     * @param ipAddress2Value The value to set.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(IpAddress ipAddress2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            ipAddress2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a String value.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(String ipAddress2Value) throws JNCException {
        setIpAddress2Value(new IpAddress(ipAddress2Value));
    }

    /**
     * Unsets the value for child leaf "ip-address2".
     */
    public void unsetIpAddress2Value() throws JNCException {
        delete("ip-address2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address2" leaf will not have a value.
     */
    public void addIpAddress2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address2" with operation "replace".
     */
    public void markIpAddress2Replace() throws JNCException {
        markLeafReplace("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "merge".
     */
    public void markIpAddress2Merge() throws JNCException {
        markLeafMerge("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "create".
     */
    public void markIpAddress2Create() throws JNCException {
        markLeafCreate("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "delete".
     */
    public void markIpAddress2Delete() throws JNCException {
        markLeafDelete("ipAddress2");
    }

    /* Access methods for optional leaf child: "port". */

    /**
     * Gets the value for child leaf "port".
     * @return The value of the leaf.
     */
    public YangUInt16 getPortValue() throws JNCException {
        YangUInt16 port = (YangUInt16)getValue("port");
        if (port == null) {
            port = new YangUInt16("29168");  // default
        }
        return port;
    }

    /**
     * Sets the value for child leaf "port",
     * using instance of generated typedef class.
     * @param portValue The value to set.
     * @param portValue used during instantiation.
     */
    public void setPortValue(YangUInt16 portValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port",
            portValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "port",
     * using Java primitive values.
     * @param portValue used during instantiation.
     */
    public void setPortValue(int portValue) throws JNCException {
        setPortValue(new YangUInt16(portValue));
    }

    /**
     * Sets the value for child leaf "port",
     * using a String value.
     * @param portValue used during instantiation.
     */
    public void setPortValue(String portValue) throws JNCException {
        setPortValue(new YangUInt16(portValue));
    }

    /**
     * Unsets the value for child leaf "port".
     */
    public void unsetPortValue() throws JNCException {
        delete("port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "port" leaf will not have a value.
     */
    public void addPort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "port" with operation "replace".
     */
    public void markPortReplace() throws JNCException {
        markLeafReplace("port");
    }

    /**
     * Marks the leaf "port" with operation "merge".
     */
    public void markPortMerge() throws JNCException {
        markLeafMerge("port");
    }

    /**
     * Marks the leaf "port" with operation "create".
     */
    public void markPortCreate() throws JNCException {
        markLeafCreate("port");
    }

    /**
     * Marks the leaf "port" with operation "delete".
     */
    public void markPortDelete() throws JNCException {
        markLeafDelete("port");
    }

    /* Access methods for optional leaf child: "max-outstanding-requests". */

    /**
     * Gets the value for child leaf "max-outstanding-requests".
     * @return The value of the leaf.
     */
    public YangUInt8 getMaxOutstandingRequestsValue() throws JNCException {
        YangUInt8 maxOutstandingRequests = (YangUInt8)getValue("max-outstanding-requests");
        if (maxOutstandingRequests == null) {
            maxOutstandingRequests = new YangUInt8("5");  // default
        }
        return maxOutstandingRequests;
    }

    /**
     * Sets the value for child leaf "max-outstanding-requests",
     * using instance of generated typedef class.
     * @param maxOutstandingRequestsValue The value to set.
     * @param maxOutstandingRequestsValue used during instantiation.
     */
    public void setMaxOutstandingRequestsValue(YangUInt8 maxOutstandingRequestsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-outstanding-requests",
            maxOutstandingRequestsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-outstanding-requests",
     * using Java primitive values.
     * @param maxOutstandingRequestsValue used during instantiation.
     */
    public void setMaxOutstandingRequestsValue(short maxOutstandingRequestsValue)
            throws JNCException {
        setMaxOutstandingRequestsValue(new YangUInt8(maxOutstandingRequestsValue));
    }

    /**
     * Sets the value for child leaf "max-outstanding-requests",
     * using a String value.
     * @param maxOutstandingRequestsValue used during instantiation.
     */
    public void setMaxOutstandingRequestsValue(String maxOutstandingRequestsValue)
            throws JNCException {
        setMaxOutstandingRequestsValue(new YangUInt8(maxOutstandingRequestsValue));
    }

    /**
     * Unsets the value for child leaf "max-outstanding-requests".
     */
    public void unsetMaxOutstandingRequestsValue() throws JNCException {
        delete("max-outstanding-requests");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-outstanding-requests" leaf will not have a value.
     */
    public void addMaxOutstandingRequests() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-outstanding-requests",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-outstanding-requests" with operation "replace".
     */
    public void markMaxOutstandingRequestsReplace() throws JNCException {
        markLeafReplace("maxOutstandingRequests");
    }

    /**
     * Marks the leaf "max-outstanding-requests" with operation "merge".
     */
    public void markMaxOutstandingRequestsMerge() throws JNCException {
        markLeafMerge("maxOutstandingRequests");
    }

    /**
     * Marks the leaf "max-outstanding-requests" with operation "create".
     */
    public void markMaxOutstandingRequestsCreate() throws JNCException {
        markLeafCreate("maxOutstandingRequests");
    }

    /**
     * Marks the leaf "max-outstanding-requests" with operation "delete".
     */
    public void markMaxOutstandingRequestsDelete() throws JNCException {
        markLeafDelete("maxOutstandingRequests");
    }

    /* Access methods for optional leaf child: "dscp-mark". */

    /**
     * Gets the value for child leaf "dscp-mark".
     * @return The value of the leaf.
     */
    public YangString getDscpMarkValue() throws JNCException {
        YangString dscpMark = (YangString)getValue("dscp-mark");
        if (dscpMark == null) {
            dscpMark = new YangString("de");  // default
        }
        return dscpMark;
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using instance of generated typedef class.
     * @param dscpMarkValue The value to set.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(YangString dscpMarkValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            dscpMarkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using a String value.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(String dscpMarkValue) throws JNCException {
        setDscpMarkValue(new YangString(dscpMarkValue));
    }

    /**
     * Unsets the value for child leaf "dscp-mark".
     */
    public void unsetDscpMarkValue() throws JNCException {
        delete("dscp-mark");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dscp-mark" leaf will not have a value.
     */
    public void addDscpMark() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dscp-mark" with operation "replace".
     */
    public void markDscpMarkReplace() throws JNCException {
        markLeafReplace("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "merge".
     */
    public void markDscpMarkMerge() throws JNCException {
        markLeafMerge("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "create".
     */
    public void markDscpMarkCreate() throws JNCException {
        markLeafCreate("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "delete".
     */
    public void markDscpMarkDelete() throws JNCException {
        markLeafDelete("dscpMark");
    }

    /* Access methods for optional leaf child: "sbc-type". */

    /**
     * Gets the value for child leaf "sbc-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getSbcTypeValue() throws JNCException {
        YangEnumeration sbcType = (YangEnumeration)getValue("sbc-type");
        if (sbcType == null) {
            sbcType = new YangEnumeration("pws", new String[] {  // default
                "pws",
                "etws",
            });
        }
        return sbcType;
    }

    /**
     * Sets the value for child leaf "sbc-type",
     * using instance of generated typedef class.
     * @param sbcTypeValue The value to set.
     * @param sbcTypeValue used during instantiation.
     */
    public void setSbcTypeValue(YangEnumeration sbcTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sbc-type",
            sbcTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sbc-type",
     * using a String value.
     * @param sbcTypeValue used during instantiation.
     */
    public void setSbcTypeValue(String sbcTypeValue) throws JNCException {
        setSbcTypeValue(new YangEnumeration(sbcTypeValue, new String[] {
             "pws",
             "etws",
        }));
    }

    /**
     * Unsets the value for child leaf "sbc-type".
     */
    public void unsetSbcTypeValue() throws JNCException {
        delete("sbc-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sbc-type" leaf will not have a value.
     */
    public void addSbcType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sbc-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sbc-type" with operation "replace".
     */
    public void markSbcTypeReplace() throws JNCException {
        markLeafReplace("sbcType");
    }

    /**
     * Marks the leaf "sbc-type" with operation "merge".
     */
    public void markSbcTypeMerge() throws JNCException {
        markLeafMerge("sbcType");
    }

    /**
     * Marks the leaf "sbc-type" with operation "create".
     */
    public void markSbcTypeCreate() throws JNCException {
        markLeafCreate("sbcType");
    }

    /**
     * Marks the leaf "sbc-type" with operation "delete".
     */
    public void markSbcTypeDelete() throws JNCException {
        markLeafDelete("sbcType");
    }

    /* Access methods for optional leaf child: "warning-message-ttl". */

    /**
     * Gets the value for child leaf "warning-message-ttl".
     * @return The value of the leaf.
     */
    public YangUInt8 getWarningMessageTtlValue() throws JNCException {
        YangUInt8 warningMessageTtl = (YangUInt8)getValue("warning-message-ttl");
        if (warningMessageTtl == null) {
            warningMessageTtl = new YangUInt8("1");  // default
        }
        return warningMessageTtl;
    }

    /**
     * Sets the value for child leaf "warning-message-ttl",
     * using instance of generated typedef class.
     * @param warningMessageTtlValue The value to set.
     * @param warningMessageTtlValue used during instantiation.
     */
    public void setWarningMessageTtlValue(YangUInt8 warningMessageTtlValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "warning-message-ttl",
            warningMessageTtlValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "warning-message-ttl",
     * using Java primitive values.
     * @param warningMessageTtlValue used during instantiation.
     */
    public void setWarningMessageTtlValue(short warningMessageTtlValue)
            throws JNCException {
        setWarningMessageTtlValue(new YangUInt8(warningMessageTtlValue));
    }

    /**
     * Sets the value for child leaf "warning-message-ttl",
     * using a String value.
     * @param warningMessageTtlValue used during instantiation.
     */
    public void setWarningMessageTtlValue(String warningMessageTtlValue)
            throws JNCException {
        setWarningMessageTtlValue(new YangUInt8(warningMessageTtlValue));
    }

    /**
     * Unsets the value for child leaf "warning-message-ttl".
     */
    public void unsetWarningMessageTtlValue() throws JNCException {
        delete("warning-message-ttl");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "warning-message-ttl" leaf will not have a value.
     */
    public void addWarningMessageTtl() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "warning-message-ttl",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "warning-message-ttl" with operation "replace".
     */
    public void markWarningMessageTtlReplace() throws JNCException {
        markLeafReplace("warningMessageTtl");
    }

    /**
     * Marks the leaf "warning-message-ttl" with operation "merge".
     */
    public void markWarningMessageTtlMerge() throws JNCException {
        markLeafMerge("warningMessageTtl");
    }

    /**
     * Marks the leaf "warning-message-ttl" with operation "create".
     */
    public void markWarningMessageTtlCreate() throws JNCException {
        markLeafCreate("warningMessageTtl");
    }

    /**
     * Marks the leaf "warning-message-ttl" with operation "delete".
     */
    public void markWarningMessageTtlDelete() throws JNCException {
        markLeafDelete("warningMessageTtl");
    }

    /* Access methods for optional leaf child: "version". */

    /**
     * Gets the value for child leaf "version".
     * @return The value of the leaf.
     */
    public YangEnumeration getVersionValue() throws JNCException {
        YangEnumeration version = (YangEnumeration)getValue("version");
        if (version == null) {
            version = new YangEnumeration("10.2.0", new String[] {  // default
                "9.3.0",
                "10.2.0",
            });
        }
        return version;
    }

    /**
     * Sets the value for child leaf "version",
     * using instance of generated typedef class.
     * @param versionValue The value to set.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(YangEnumeration versionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            versionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "version",
     * using a String value.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(String versionValue) throws JNCException {
        setVersionValue(new YangEnumeration(versionValue, new String[] {
             "9.3.0",
             "10.2.0",
        }));
    }

    /**
     * Unsets the value for child leaf "version".
     */
    public void unsetVersionValue() throws JNCException {
        delete("version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "version" leaf will not have a value.
     */
    public void addVersion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "version" with operation "replace".
     */
    public void markVersionReplace() throws JNCException {
        markLeafReplace("version");
    }

    /**
     * Marks the leaf "version" with operation "merge".
     */
    public void markVersionMerge() throws JNCException {
        markLeafMerge("version");
    }

    /**
     * Marks the leaf "version" with operation "create".
     */
    public void markVersionCreate() throws JNCException {
        markLeafCreate("version");
    }

    /**
     * Marks the leaf "version" with operation "delete".
     */
    public void markVersionDelete() throws JNCException {
        markLeafDelete("version");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
