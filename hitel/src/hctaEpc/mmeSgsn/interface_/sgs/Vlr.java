/* 
 * @(#)Vlr.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.sgs;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/sgs/vlr"
 * <p>
 * See line 38 in
 * sgsCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Vlr extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Vlr object.
     */
    public Vlr() {
        super(Epc.NAMESPACE, "vlr");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Vlr clone() {
        return (Vlr)cloneContent(new Vlr());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Vlr cloneShallow() {
        return (Vlr)cloneShallowContent(new Vlr());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "vlr-name",
            "sctp-status",
        };
    }

    /* Access methods for optional leaf child: "vlr-name". */

    /**
     * Gets the value for child leaf "vlr-name".
     * @return The value of the leaf.
     */
    public YangString getVlrNameValue() throws JNCException {
        return (YangString)getValue("vlr-name");
    }

    /**
     * Sets the value for child leaf "vlr-name",
     * using instance of generated typedef class.
     * @param vlrNameValue The value to set.
     * @param vlrNameValue used during instantiation.
     */
    public void setVlrNameValue(YangString vlrNameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-name",
            vlrNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlr-name",
     * using a String value.
     * @param vlrNameValue used during instantiation.
     */
    public void setVlrNameValue(String vlrNameValue) throws JNCException {
        setVlrNameValue(new YangString(vlrNameValue));
    }

    /**
     * Unsets the value for child leaf "vlr-name".
     */
    public void unsetVlrNameValue() throws JNCException {
        delete("vlr-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlr-name" leaf will not have a value.
     */
    public void addVlrName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlr-name" with operation "replace".
     */
    public void markVlrNameReplace() throws JNCException {
        markLeafReplace("vlrName");
    }

    /**
     * Marks the leaf "vlr-name" with operation "merge".
     */
    public void markVlrNameMerge() throws JNCException {
        markLeafMerge("vlrName");
    }

    /**
     * Marks the leaf "vlr-name" with operation "create".
     */
    public void markVlrNameCreate() throws JNCException {
        markLeafCreate("vlrName");
    }

    /**
     * Marks the leaf "vlr-name" with operation "delete".
     */
    public void markVlrNameDelete() throws JNCException {
        markLeafDelete("vlrName");
    }

    /* Access methods for optional leaf child: "sctp-status". */

    /**
     * Gets the value for child leaf "sctp-status".
     * @return The value of the leaf.
     */
    public YangString getSctpStatusValue() throws JNCException {
        return (YangString)getValue("sctp-status");
    }

    /**
     * Sets the value for child leaf "sctp-status",
     * using instance of generated typedef class.
     * @param sctpStatusValue The value to set.
     * @param sctpStatusValue used during instantiation.
     */
    public void setSctpStatusValue(YangString sctpStatusValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-status",
            sctpStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sctp-status",
     * using a String value.
     * @param sctpStatusValue used during instantiation.
     */
    public void setSctpStatusValue(String sctpStatusValue) throws JNCException {
        setSctpStatusValue(new YangString(sctpStatusValue));
    }

    /**
     * Unsets the value for child leaf "sctp-status".
     */
    public void unsetSctpStatusValue() throws JNCException {
        delete("sctp-status");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sctp-status" leaf will not have a value.
     */
    public void addSctpStatus() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-status",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sctp-status" with operation "replace".
     */
    public void markSctpStatusReplace() throws JNCException {
        markLeafReplace("sctpStatus");
    }

    /**
     * Marks the leaf "sctp-status" with operation "merge".
     */
    public void markSctpStatusMerge() throws JNCException {
        markLeafMerge("sctpStatus");
    }

    /**
     * Marks the leaf "sctp-status" with operation "create".
     */
    public void markSctpStatusCreate() throws JNCException {
        markLeafCreate("sctpStatus");
    }

    /**
     * Marks the leaf "sctp-status" with operation "delete".
     */
    public void markSctpStatusDelete() throws JNCException {
        markLeafDelete("sctpStatus");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
