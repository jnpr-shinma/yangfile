/* 
 * @(#)MmeSgsIf.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.sgs;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/sgs/mme-sgs-if"
 * <p>
 * See line 25 in
 * sgsConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeSgsIf extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeSgsIf object.
     */
    public MmeSgsIf() {
        super(Epc.NAMESPACE, "mme-sgs-if");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeSgsIf clone() {
        return (MmeSgsIf)cloneContent(new MmeSgsIf());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeSgsIf cloneShallow() {
        return (MmeSgsIf)cloneShallowContent(new MmeSgsIf());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "routing-instance1",
            "routing-instance2",
            "ip-address",
            "sctp-profile",
            "loc-upd-guard-ts6-1",
            "eps-detach-guard-ts8",
            "explicit-imsi-detach-guard-ts9",
            "implicit-imsi-detach-guard-ts10",
            "mme-reset-ind-guard-ts12-2",
            "loc-upd-retry-ns6",
            "eps-detach-retry-ns8",
            "explicit-imsi-detach-retry-ns9",
            "implicit-imsi-detach-retry-ns10",
            "mme-reset-ind-retry-ns12",
            "sms-only",
            "mme-reset-paging-type",
            "mme-reset-indication",
            "version",
            "dscp-mark",
            "ip-address2",
        };
    }

    /* Access methods for optional leaf child: "routing-instance1". */

    /**
     * Gets the value for child leaf "routing-instance1".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstance1Value() throws JNCException {
        return (YangString)getValue("routing-instance1");
    }

    /**
     * Sets the value for child leaf "routing-instance1",
     * using instance of generated typedef class.
     * @param routingInstance1Value The value to set.
     * @param routingInstance1Value used during instantiation.
     */
    public void setRoutingInstance1Value(YangString routingInstance1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance1",
            routingInstance1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance1",
     * using a String value.
     * @param routingInstance1Value used during instantiation.
     */
    public void setRoutingInstance1Value(String routingInstance1Value)
            throws JNCException {
        setRoutingInstance1Value(new YangString(routingInstance1Value));
    }

    /**
     * Unsets the value for child leaf "routing-instance1".
     */
    public void unsetRoutingInstance1Value() throws JNCException {
        delete("routing-instance1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance1" leaf will not have a value.
     */
    public void addRoutingInstance1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance1" with operation "replace".
     */
    public void markRoutingInstance1Replace() throws JNCException {
        markLeafReplace("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "merge".
     */
    public void markRoutingInstance1Merge() throws JNCException {
        markLeafMerge("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "create".
     */
    public void markRoutingInstance1Create() throws JNCException {
        markLeafCreate("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "delete".
     */
    public void markRoutingInstance1Delete() throws JNCException {
        markLeafDelete("routingInstance1");
    }

    /* Access methods for optional leaf child: "routing-instance2". */

    /**
     * Gets the value for child leaf "routing-instance2".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstance2Value() throws JNCException {
        return (YangString)getValue("routing-instance2");
    }

    /**
     * Sets the value for child leaf "routing-instance2",
     * using instance of generated typedef class.
     * @param routingInstance2Value The value to set.
     * @param routingInstance2Value used during instantiation.
     */
    public void setRoutingInstance2Value(YangString routingInstance2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance2",
            routingInstance2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance2",
     * using a String value.
     * @param routingInstance2Value used during instantiation.
     */
    public void setRoutingInstance2Value(String routingInstance2Value)
            throws JNCException {
        setRoutingInstance2Value(new YangString(routingInstance2Value));
    }

    /**
     * Unsets the value for child leaf "routing-instance2".
     */
    public void unsetRoutingInstance2Value() throws JNCException {
        delete("routing-instance2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance2" leaf will not have a value.
     */
    public void addRoutingInstance2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance2" with operation "replace".
     */
    public void markRoutingInstance2Replace() throws JNCException {
        markLeafReplace("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "merge".
     */
    public void markRoutingInstance2Merge() throws JNCException {
        markLeafMerge("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "create".
     */
    public void markRoutingInstance2Create() throws JNCException {
        markLeafCreate("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "delete".
     */
    public void markRoutingInstance2Delete() throws JNCException {
        markLeafDelete("routingInstance2");
    }

    /* Access methods for optional leaf child: "ip-address". */

    /**
     * Gets the value for child leaf "ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddressValue() throws JNCException {
        return (IpAddress)getValue("ip-address");
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a JNC type value.
     * @param ipAddressValue The value to set.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(IpAddress ipAddressValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            ipAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a String value.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(String ipAddressValue) throws JNCException {
        setIpAddressValue(new IpAddress(ipAddressValue));
    }

    /**
     * Unsets the value for child leaf "ip-address".
     */
    public void unsetIpAddressValue() throws JNCException {
        delete("ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address" leaf will not have a value.
     */
    public void addIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address" with operation "replace".
     */
    public void markIpAddressReplace() throws JNCException {
        markLeafReplace("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "merge".
     */
    public void markIpAddressMerge() throws JNCException {
        markLeafMerge("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "create".
     */
    public void markIpAddressCreate() throws JNCException {
        markLeafCreate("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "delete".
     */
    public void markIpAddressDelete() throws JNCException {
        markLeafDelete("ipAddress");
    }

    /* Access methods for optional leaf child: "sctp-profile". */

    /**
     * Gets the value for child leaf "sctp-profile".
     * @return The value of the leaf.
     */
    public YangString getSctpProfileValue() throws JNCException {
        return (YangString)getValue("sctp-profile");
    }

    /**
     * Sets the value for child leaf "sctp-profile",
     * using instance of generated typedef class.
     * @param sctpProfileValue The value to set.
     * @param sctpProfileValue used during instantiation.
     */
    public void setSctpProfileValue(YangString sctpProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-profile",
            sctpProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sctp-profile",
     * using a String value.
     * @param sctpProfileValue used during instantiation.
     */
    public void setSctpProfileValue(String sctpProfileValue)
            throws JNCException {
        setSctpProfileValue(new YangString(sctpProfileValue));
    }

    /**
     * Unsets the value for child leaf "sctp-profile".
     */
    public void unsetSctpProfileValue() throws JNCException {
        delete("sctp-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sctp-profile" leaf will not have a value.
     */
    public void addSctpProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sctp-profile" with operation "replace".
     */
    public void markSctpProfileReplace() throws JNCException {
        markLeafReplace("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "merge".
     */
    public void markSctpProfileMerge() throws JNCException {
        markLeafMerge("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "create".
     */
    public void markSctpProfileCreate() throws JNCException {
        markLeafCreate("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "delete".
     */
    public void markSctpProfileDelete() throws JNCException {
        markLeafDelete("sctpProfile");
    }

    /* Access methods for optional leaf child: "loc-upd-guard-ts6-1". */

    /**
     * Gets the value for child leaf "loc-upd-guard-ts6-1".
     * @return The value of the leaf.
     */
    public YangUInt8 getLocUpdGuardTs61Value() throws JNCException {
        YangUInt8 locUpdGuardTs61 = (YangUInt8)getValue("loc-upd-guard-ts6-1");
        if (locUpdGuardTs61 == null) {
            locUpdGuardTs61 = new YangUInt8("10");  // default
        }
        return locUpdGuardTs61;
    }

    /**
     * Sets the value for child leaf "loc-upd-guard-ts6-1",
     * using instance of generated typedef class.
     * @param locUpdGuardTs61Value The value to set.
     * @param locUpdGuardTs61Value used during instantiation.
     */
    public void setLocUpdGuardTs61Value(YangUInt8 locUpdGuardTs61Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "loc-upd-guard-ts6-1",
            locUpdGuardTs61Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "loc-upd-guard-ts6-1",
     * using Java primitive values.
     * @param locUpdGuardTs61Value used during instantiation.
     */
    public void setLocUpdGuardTs61Value(short locUpdGuardTs61Value)
            throws JNCException {
        setLocUpdGuardTs61Value(new YangUInt8(locUpdGuardTs61Value));
    }

    /**
     * Sets the value for child leaf "loc-upd-guard-ts6-1",
     * using a String value.
     * @param locUpdGuardTs61Value used during instantiation.
     */
    public void setLocUpdGuardTs61Value(String locUpdGuardTs61Value)
            throws JNCException {
        setLocUpdGuardTs61Value(new YangUInt8(locUpdGuardTs61Value));
    }

    /**
     * Unsets the value for child leaf "loc-upd-guard-ts6-1".
     */
    public void unsetLocUpdGuardTs61Value() throws JNCException {
        delete("loc-upd-guard-ts6-1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "loc-upd-guard-ts6-1" leaf will not have a value.
     */
    public void addLocUpdGuardTs61() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "loc-upd-guard-ts6-1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "loc-upd-guard-ts6-1" with operation "replace".
     */
    public void markLocUpdGuardTs61Replace() throws JNCException {
        markLeafReplace("locUpdGuardTs61");
    }

    /**
     * Marks the leaf "loc-upd-guard-ts6-1" with operation "merge".
     */
    public void markLocUpdGuardTs61Merge() throws JNCException {
        markLeafMerge("locUpdGuardTs61");
    }

    /**
     * Marks the leaf "loc-upd-guard-ts6-1" with operation "create".
     */
    public void markLocUpdGuardTs61Create() throws JNCException {
        markLeafCreate("locUpdGuardTs61");
    }

    /**
     * Marks the leaf "loc-upd-guard-ts6-1" with operation "delete".
     */
    public void markLocUpdGuardTs61Delete() throws JNCException {
        markLeafDelete("locUpdGuardTs61");
    }

    /* Access methods for optional leaf child: "eps-detach-guard-ts8". */

    /**
     * Gets the value for child leaf "eps-detach-guard-ts8".
     * @return The value of the leaf.
     */
    public YangUInt8 getEpsDetachGuardTs8Value() throws JNCException {
        YangUInt8 epsDetachGuardTs8 = (YangUInt8)getValue("eps-detach-guard-ts8");
        if (epsDetachGuardTs8 == null) {
            epsDetachGuardTs8 = new YangUInt8("4");  // default
        }
        return epsDetachGuardTs8;
    }

    /**
     * Sets the value for child leaf "eps-detach-guard-ts8",
     * using instance of generated typedef class.
     * @param epsDetachGuardTs8Value The value to set.
     * @param epsDetachGuardTs8Value used during instantiation.
     */
    public void setEpsDetachGuardTs8Value(YangUInt8 epsDetachGuardTs8Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eps-detach-guard-ts8",
            epsDetachGuardTs8Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "eps-detach-guard-ts8",
     * using Java primitive values.
     * @param epsDetachGuardTs8Value used during instantiation.
     */
    public void setEpsDetachGuardTs8Value(short epsDetachGuardTs8Value)
            throws JNCException {
        setEpsDetachGuardTs8Value(new YangUInt8(epsDetachGuardTs8Value));
    }

    /**
     * Sets the value for child leaf "eps-detach-guard-ts8",
     * using a String value.
     * @param epsDetachGuardTs8Value used during instantiation.
     */
    public void setEpsDetachGuardTs8Value(String epsDetachGuardTs8Value)
            throws JNCException {
        setEpsDetachGuardTs8Value(new YangUInt8(epsDetachGuardTs8Value));
    }

    /**
     * Unsets the value for child leaf "eps-detach-guard-ts8".
     */
    public void unsetEpsDetachGuardTs8Value() throws JNCException {
        delete("eps-detach-guard-ts8");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "eps-detach-guard-ts8" leaf will not have a value.
     */
    public void addEpsDetachGuardTs8() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eps-detach-guard-ts8",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "eps-detach-guard-ts8" with operation "replace".
     */
    public void markEpsDetachGuardTs8Replace() throws JNCException {
        markLeafReplace("epsDetachGuardTs8");
    }

    /**
     * Marks the leaf "eps-detach-guard-ts8" with operation "merge".
     */
    public void markEpsDetachGuardTs8Merge() throws JNCException {
        markLeafMerge("epsDetachGuardTs8");
    }

    /**
     * Marks the leaf "eps-detach-guard-ts8" with operation "create".
     */
    public void markEpsDetachGuardTs8Create() throws JNCException {
        markLeafCreate("epsDetachGuardTs8");
    }

    /**
     * Marks the leaf "eps-detach-guard-ts8" with operation "delete".
     */
    public void markEpsDetachGuardTs8Delete() throws JNCException {
        markLeafDelete("epsDetachGuardTs8");
    }

    /* Access methods for optional leaf child: "explicit-imsi-detach-guard-ts9". */

    /**
     * Gets the value for child leaf "explicit-imsi-detach-guard-ts9".
     * @return The value of the leaf.
     */
    public YangUInt8 getExplicitImsiDetachGuardTs9Value() throws JNCException {
        YangUInt8 explicitImsiDetachGuardTs9 = (YangUInt8)getValue("explicit-imsi-detach-guard-ts9");
        if (explicitImsiDetachGuardTs9 == null) {
            explicitImsiDetachGuardTs9 = new YangUInt8("4");  // default
        }
        return explicitImsiDetachGuardTs9;
    }

    /**
     * Sets the value for child leaf "explicit-imsi-detach-guard-ts9",
     * using instance of generated typedef class.
     * @param explicitImsiDetachGuardTs9Value The value to set.
     * @param explicitImsiDetachGuardTs9Value used during instantiation.
     */
    public void setExplicitImsiDetachGuardTs9Value(YangUInt8 explicitImsiDetachGuardTs9Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "explicit-imsi-detach-guard-ts9",
            explicitImsiDetachGuardTs9Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "explicit-imsi-detach-guard-ts9",
     * using Java primitive values.
     * @param explicitImsiDetachGuardTs9Value used during instantiation.
     */
    public void setExplicitImsiDetachGuardTs9Value(short explicitImsiDetachGuardTs9Value)
            throws JNCException {
        setExplicitImsiDetachGuardTs9Value(new YangUInt8(explicitImsiDetachGuardTs9Value));
    }

    /**
     * Sets the value for child leaf "explicit-imsi-detach-guard-ts9",
     * using a String value.
     * @param explicitImsiDetachGuardTs9Value used during instantiation.
     */
    public void setExplicitImsiDetachGuardTs9Value(String explicitImsiDetachGuardTs9Value)
            throws JNCException {
        setExplicitImsiDetachGuardTs9Value(new YangUInt8(explicitImsiDetachGuardTs9Value));
    }

    /**
     * Unsets the value for child leaf "explicit-imsi-detach-guard-ts9".
     */
    public void unsetExplicitImsiDetachGuardTs9Value() throws JNCException {
        delete("explicit-imsi-detach-guard-ts9");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "explicit-imsi-detach-guard-ts9" leaf will not have a value.
     */
    public void addExplicitImsiDetachGuardTs9() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "explicit-imsi-detach-guard-ts9",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "explicit-imsi-detach-guard-ts9" with operation "replace".
     */
    public void markExplicitImsiDetachGuardTs9Replace() throws JNCException {
        markLeafReplace("explicitImsiDetachGuardTs9");
    }

    /**
     * Marks the leaf "explicit-imsi-detach-guard-ts9" with operation "merge".
     */
    public void markExplicitImsiDetachGuardTs9Merge() throws JNCException {
        markLeafMerge("explicitImsiDetachGuardTs9");
    }

    /**
     * Marks the leaf "explicit-imsi-detach-guard-ts9" with operation "create".
     */
    public void markExplicitImsiDetachGuardTs9Create() throws JNCException {
        markLeafCreate("explicitImsiDetachGuardTs9");
    }

    /**
     * Marks the leaf "explicit-imsi-detach-guard-ts9" with operation "delete".
     */
    public void markExplicitImsiDetachGuardTs9Delete() throws JNCException {
        markLeafDelete("explicitImsiDetachGuardTs9");
    }

    /* Access methods for optional leaf child: "implicit-imsi-detach-guard-ts10". */

    /**
     * Gets the value for child leaf "implicit-imsi-detach-guard-ts10".
     * @return The value of the leaf.
     */
    public YangUInt8 getImplicitImsiDetachGuardTs10Value() throws JNCException {
        YangUInt8 implicitImsiDetachGuardTs10 = (YangUInt8)getValue("implicit-imsi-detach-guard-ts10");
        if (implicitImsiDetachGuardTs10 == null) {
            implicitImsiDetachGuardTs10 = new YangUInt8("4");  // default
        }
        return implicitImsiDetachGuardTs10;
    }

    /**
     * Sets the value for child leaf "implicit-imsi-detach-guard-ts10",
     * using instance of generated typedef class.
     * @param implicitImsiDetachGuardTs10Value The value to set.
     * @param implicitImsiDetachGuardTs10Value used during instantiation.
     */
    public void setImplicitImsiDetachGuardTs10Value(YangUInt8 implicitImsiDetachGuardTs10Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "implicit-imsi-detach-guard-ts10",
            implicitImsiDetachGuardTs10Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "implicit-imsi-detach-guard-ts10",
     * using Java primitive values.
     * @param implicitImsiDetachGuardTs10Value used during instantiation.
     */
    public void setImplicitImsiDetachGuardTs10Value(short implicitImsiDetachGuardTs10Value)
            throws JNCException {
        setImplicitImsiDetachGuardTs10Value(new YangUInt8(implicitImsiDetachGuardTs10Value));
    }

    /**
     * Sets the value for child leaf "implicit-imsi-detach-guard-ts10",
     * using a String value.
     * @param implicitImsiDetachGuardTs10Value used during instantiation.
     */
    public void setImplicitImsiDetachGuardTs10Value(String implicitImsiDetachGuardTs10Value)
            throws JNCException {
        setImplicitImsiDetachGuardTs10Value(new YangUInt8(implicitImsiDetachGuardTs10Value));
    }

    /**
     * Unsets the value for child leaf "implicit-imsi-detach-guard-ts10".
     */
    public void unsetImplicitImsiDetachGuardTs10Value() throws JNCException {
        delete("implicit-imsi-detach-guard-ts10");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "implicit-imsi-detach-guard-ts10" leaf will not have a value.
     */
    public void addImplicitImsiDetachGuardTs10() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "implicit-imsi-detach-guard-ts10",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "implicit-imsi-detach-guard-ts10" with operation "replace".
     */
    public void markImplicitImsiDetachGuardTs10Replace() throws JNCException {
        markLeafReplace("implicitImsiDetachGuardTs10");
    }

    /**
     * Marks the leaf "implicit-imsi-detach-guard-ts10" with operation "merge".
     */
    public void markImplicitImsiDetachGuardTs10Merge() throws JNCException {
        markLeafMerge("implicitImsiDetachGuardTs10");
    }

    /**
     * Marks the leaf "implicit-imsi-detach-guard-ts10" with operation "create".
     */
    public void markImplicitImsiDetachGuardTs10Create() throws JNCException {
        markLeafCreate("implicitImsiDetachGuardTs10");
    }

    /**
     * Marks the leaf "implicit-imsi-detach-guard-ts10" with operation "delete".
     */
    public void markImplicitImsiDetachGuardTs10Delete() throws JNCException {
        markLeafDelete("implicitImsiDetachGuardTs10");
    }

    /* Access methods for optional leaf child: "mme-reset-ind-guard-ts12-2". */

    /**
     * Gets the value for child leaf "mme-reset-ind-guard-ts12-2".
     * @return The value of the leaf.
     */
    public YangUInt8 getMmeResetIndGuardTs122Value() throws JNCException {
        YangUInt8 mmeResetIndGuardTs122 = (YangUInt8)getValue("mme-reset-ind-guard-ts12-2");
        if (mmeResetIndGuardTs122 == null) {
            mmeResetIndGuardTs122 = new YangUInt8("4");  // default
        }
        return mmeResetIndGuardTs122;
    }

    /**
     * Sets the value for child leaf "mme-reset-ind-guard-ts12-2",
     * using instance of generated typedef class.
     * @param mmeResetIndGuardTs122Value The value to set.
     * @param mmeResetIndGuardTs122Value used during instantiation.
     */
    public void setMmeResetIndGuardTs122Value(YangUInt8 mmeResetIndGuardTs122Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-reset-ind-guard-ts12-2",
            mmeResetIndGuardTs122Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mme-reset-ind-guard-ts12-2",
     * using Java primitive values.
     * @param mmeResetIndGuardTs122Value used during instantiation.
     */
    public void setMmeResetIndGuardTs122Value(short mmeResetIndGuardTs122Value)
            throws JNCException {
        setMmeResetIndGuardTs122Value(new YangUInt8(mmeResetIndGuardTs122Value));
    }

    /**
     * Sets the value for child leaf "mme-reset-ind-guard-ts12-2",
     * using a String value.
     * @param mmeResetIndGuardTs122Value used during instantiation.
     */
    public void setMmeResetIndGuardTs122Value(String mmeResetIndGuardTs122Value)
            throws JNCException {
        setMmeResetIndGuardTs122Value(new YangUInt8(mmeResetIndGuardTs122Value));
    }

    /**
     * Unsets the value for child leaf "mme-reset-ind-guard-ts12-2".
     */
    public void unsetMmeResetIndGuardTs122Value() throws JNCException {
        delete("mme-reset-ind-guard-ts12-2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mme-reset-ind-guard-ts12-2" leaf will not have a value.
     */
    public void addMmeResetIndGuardTs122() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-reset-ind-guard-ts12-2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mme-reset-ind-guard-ts12-2" with operation "replace".
     */
    public void markMmeResetIndGuardTs122Replace() throws JNCException {
        markLeafReplace("mmeResetIndGuardTs122");
    }

    /**
     * Marks the leaf "mme-reset-ind-guard-ts12-2" with operation "merge".
     */
    public void markMmeResetIndGuardTs122Merge() throws JNCException {
        markLeafMerge("mmeResetIndGuardTs122");
    }

    /**
     * Marks the leaf "mme-reset-ind-guard-ts12-2" with operation "create".
     */
    public void markMmeResetIndGuardTs122Create() throws JNCException {
        markLeafCreate("mmeResetIndGuardTs122");
    }

    /**
     * Marks the leaf "mme-reset-ind-guard-ts12-2" with operation "delete".
     */
    public void markMmeResetIndGuardTs122Delete() throws JNCException {
        markLeafDelete("mmeResetIndGuardTs122");
    }

    /* Access methods for optional leaf child: "loc-upd-retry-ns6". */

    /**
     * Gets the value for child leaf "loc-upd-retry-ns6".
     * @return The value of the leaf.
     */
    public YangUInt8 getLocUpdRetryNs6Value() throws JNCException {
        YangUInt8 locUpdRetryNs6 = (YangUInt8)getValue("loc-upd-retry-ns6");
        if (locUpdRetryNs6 == null) {
            locUpdRetryNs6 = new YangUInt8("2");  // default
        }
        return locUpdRetryNs6;
    }

    /**
     * Sets the value for child leaf "loc-upd-retry-ns6",
     * using instance of generated typedef class.
     * @param locUpdRetryNs6Value The value to set.
     * @param locUpdRetryNs6Value used during instantiation.
     */
    public void setLocUpdRetryNs6Value(YangUInt8 locUpdRetryNs6Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "loc-upd-retry-ns6",
            locUpdRetryNs6Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "loc-upd-retry-ns6",
     * using Java primitive values.
     * @param locUpdRetryNs6Value used during instantiation.
     */
    public void setLocUpdRetryNs6Value(short locUpdRetryNs6Value)
            throws JNCException {
        setLocUpdRetryNs6Value(new YangUInt8(locUpdRetryNs6Value));
    }

    /**
     * Sets the value for child leaf "loc-upd-retry-ns6",
     * using a String value.
     * @param locUpdRetryNs6Value used during instantiation.
     */
    public void setLocUpdRetryNs6Value(String locUpdRetryNs6Value)
            throws JNCException {
        setLocUpdRetryNs6Value(new YangUInt8(locUpdRetryNs6Value));
    }

    /**
     * Unsets the value for child leaf "loc-upd-retry-ns6".
     */
    public void unsetLocUpdRetryNs6Value() throws JNCException {
        delete("loc-upd-retry-ns6");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "loc-upd-retry-ns6" leaf will not have a value.
     */
    public void addLocUpdRetryNs6() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "loc-upd-retry-ns6",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "loc-upd-retry-ns6" with operation "replace".
     */
    public void markLocUpdRetryNs6Replace() throws JNCException {
        markLeafReplace("locUpdRetryNs6");
    }

    /**
     * Marks the leaf "loc-upd-retry-ns6" with operation "merge".
     */
    public void markLocUpdRetryNs6Merge() throws JNCException {
        markLeafMerge("locUpdRetryNs6");
    }

    /**
     * Marks the leaf "loc-upd-retry-ns6" with operation "create".
     */
    public void markLocUpdRetryNs6Create() throws JNCException {
        markLeafCreate("locUpdRetryNs6");
    }

    /**
     * Marks the leaf "loc-upd-retry-ns6" with operation "delete".
     */
    public void markLocUpdRetryNs6Delete() throws JNCException {
        markLeafDelete("locUpdRetryNs6");
    }

    /* Access methods for optional leaf child: "eps-detach-retry-ns8". */

    /**
     * Gets the value for child leaf "eps-detach-retry-ns8".
     * @return The value of the leaf.
     */
    public YangUInt8 getEpsDetachRetryNs8Value() throws JNCException {
        YangUInt8 epsDetachRetryNs8 = (YangUInt8)getValue("eps-detach-retry-ns8");
        if (epsDetachRetryNs8 == null) {
            epsDetachRetryNs8 = new YangUInt8("2");  // default
        }
        return epsDetachRetryNs8;
    }

    /**
     * Sets the value for child leaf "eps-detach-retry-ns8",
     * using instance of generated typedef class.
     * @param epsDetachRetryNs8Value The value to set.
     * @param epsDetachRetryNs8Value used during instantiation.
     */
    public void setEpsDetachRetryNs8Value(YangUInt8 epsDetachRetryNs8Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eps-detach-retry-ns8",
            epsDetachRetryNs8Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "eps-detach-retry-ns8",
     * using Java primitive values.
     * @param epsDetachRetryNs8Value used during instantiation.
     */
    public void setEpsDetachRetryNs8Value(short epsDetachRetryNs8Value)
            throws JNCException {
        setEpsDetachRetryNs8Value(new YangUInt8(epsDetachRetryNs8Value));
    }

    /**
     * Sets the value for child leaf "eps-detach-retry-ns8",
     * using a String value.
     * @param epsDetachRetryNs8Value used during instantiation.
     */
    public void setEpsDetachRetryNs8Value(String epsDetachRetryNs8Value)
            throws JNCException {
        setEpsDetachRetryNs8Value(new YangUInt8(epsDetachRetryNs8Value));
    }

    /**
     * Unsets the value for child leaf "eps-detach-retry-ns8".
     */
    public void unsetEpsDetachRetryNs8Value() throws JNCException {
        delete("eps-detach-retry-ns8");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "eps-detach-retry-ns8" leaf will not have a value.
     */
    public void addEpsDetachRetryNs8() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eps-detach-retry-ns8",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "eps-detach-retry-ns8" with operation "replace".
     */
    public void markEpsDetachRetryNs8Replace() throws JNCException {
        markLeafReplace("epsDetachRetryNs8");
    }

    /**
     * Marks the leaf "eps-detach-retry-ns8" with operation "merge".
     */
    public void markEpsDetachRetryNs8Merge() throws JNCException {
        markLeafMerge("epsDetachRetryNs8");
    }

    /**
     * Marks the leaf "eps-detach-retry-ns8" with operation "create".
     */
    public void markEpsDetachRetryNs8Create() throws JNCException {
        markLeafCreate("epsDetachRetryNs8");
    }

    /**
     * Marks the leaf "eps-detach-retry-ns8" with operation "delete".
     */
    public void markEpsDetachRetryNs8Delete() throws JNCException {
        markLeafDelete("epsDetachRetryNs8");
    }

    /* Access methods for optional leaf child: "explicit-imsi-detach-retry-ns9". */

    /**
     * Gets the value for child leaf "explicit-imsi-detach-retry-ns9".
     * @return The value of the leaf.
     */
    public YangUInt8 getExplicitImsiDetachRetryNs9Value() throws JNCException {
        YangUInt8 explicitImsiDetachRetryNs9 = (YangUInt8)getValue("explicit-imsi-detach-retry-ns9");
        if (explicitImsiDetachRetryNs9 == null) {
            explicitImsiDetachRetryNs9 = new YangUInt8("2");  // default
        }
        return explicitImsiDetachRetryNs9;
    }

    /**
     * Sets the value for child leaf "explicit-imsi-detach-retry-ns9",
     * using instance of generated typedef class.
     * @param explicitImsiDetachRetryNs9Value The value to set.
     * @param explicitImsiDetachRetryNs9Value used during instantiation.
     */
    public void setExplicitImsiDetachRetryNs9Value(YangUInt8 explicitImsiDetachRetryNs9Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "explicit-imsi-detach-retry-ns9",
            explicitImsiDetachRetryNs9Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "explicit-imsi-detach-retry-ns9",
     * using Java primitive values.
     * @param explicitImsiDetachRetryNs9Value used during instantiation.
     */
    public void setExplicitImsiDetachRetryNs9Value(short explicitImsiDetachRetryNs9Value)
            throws JNCException {
        setExplicitImsiDetachRetryNs9Value(new YangUInt8(explicitImsiDetachRetryNs9Value));
    }

    /**
     * Sets the value for child leaf "explicit-imsi-detach-retry-ns9",
     * using a String value.
     * @param explicitImsiDetachRetryNs9Value used during instantiation.
     */
    public void setExplicitImsiDetachRetryNs9Value(String explicitImsiDetachRetryNs9Value)
            throws JNCException {
        setExplicitImsiDetachRetryNs9Value(new YangUInt8(explicitImsiDetachRetryNs9Value));
    }

    /**
     * Unsets the value for child leaf "explicit-imsi-detach-retry-ns9".
     */
    public void unsetExplicitImsiDetachRetryNs9Value() throws JNCException {
        delete("explicit-imsi-detach-retry-ns9");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "explicit-imsi-detach-retry-ns9" leaf will not have a value.
     */
    public void addExplicitImsiDetachRetryNs9() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "explicit-imsi-detach-retry-ns9",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "explicit-imsi-detach-retry-ns9" with operation "replace".
     */
    public void markExplicitImsiDetachRetryNs9Replace() throws JNCException {
        markLeafReplace("explicitImsiDetachRetryNs9");
    }

    /**
     * Marks the leaf "explicit-imsi-detach-retry-ns9" with operation "merge".
     */
    public void markExplicitImsiDetachRetryNs9Merge() throws JNCException {
        markLeafMerge("explicitImsiDetachRetryNs9");
    }

    /**
     * Marks the leaf "explicit-imsi-detach-retry-ns9" with operation "create".
     */
    public void markExplicitImsiDetachRetryNs9Create() throws JNCException {
        markLeafCreate("explicitImsiDetachRetryNs9");
    }

    /**
     * Marks the leaf "explicit-imsi-detach-retry-ns9" with operation "delete".
     */
    public void markExplicitImsiDetachRetryNs9Delete() throws JNCException {
        markLeafDelete("explicitImsiDetachRetryNs9");
    }

    /* Access methods for optional leaf child: "implicit-imsi-detach-retry-ns10". */

    /**
     * Gets the value for child leaf "implicit-imsi-detach-retry-ns10".
     * @return The value of the leaf.
     */
    public YangUInt8 getImplicitImsiDetachRetryNs10Value() throws JNCException {
        YangUInt8 implicitImsiDetachRetryNs10 = (YangUInt8)getValue("implicit-imsi-detach-retry-ns10");
        if (implicitImsiDetachRetryNs10 == null) {
            implicitImsiDetachRetryNs10 = new YangUInt8("2");  // default
        }
        return implicitImsiDetachRetryNs10;
    }

    /**
     * Sets the value for child leaf "implicit-imsi-detach-retry-ns10",
     * using instance of generated typedef class.
     * @param implicitImsiDetachRetryNs10Value The value to set.
     * @param implicitImsiDetachRetryNs10Value used during instantiation.
     */
    public void setImplicitImsiDetachRetryNs10Value(YangUInt8 implicitImsiDetachRetryNs10Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "implicit-imsi-detach-retry-ns10",
            implicitImsiDetachRetryNs10Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "implicit-imsi-detach-retry-ns10",
     * using Java primitive values.
     * @param implicitImsiDetachRetryNs10Value used during instantiation.
     */
    public void setImplicitImsiDetachRetryNs10Value(short implicitImsiDetachRetryNs10Value)
            throws JNCException {
        setImplicitImsiDetachRetryNs10Value(new YangUInt8(implicitImsiDetachRetryNs10Value));
    }

    /**
     * Sets the value for child leaf "implicit-imsi-detach-retry-ns10",
     * using a String value.
     * @param implicitImsiDetachRetryNs10Value used during instantiation.
     */
    public void setImplicitImsiDetachRetryNs10Value(String implicitImsiDetachRetryNs10Value)
            throws JNCException {
        setImplicitImsiDetachRetryNs10Value(new YangUInt8(implicitImsiDetachRetryNs10Value));
    }

    /**
     * Unsets the value for child leaf "implicit-imsi-detach-retry-ns10".
     */
    public void unsetImplicitImsiDetachRetryNs10Value() throws JNCException {
        delete("implicit-imsi-detach-retry-ns10");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "implicit-imsi-detach-retry-ns10" leaf will not have a value.
     */
    public void addImplicitImsiDetachRetryNs10() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "implicit-imsi-detach-retry-ns10",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "implicit-imsi-detach-retry-ns10" with operation "replace".
     */
    public void markImplicitImsiDetachRetryNs10Replace() throws JNCException {
        markLeafReplace("implicitImsiDetachRetryNs10");
    }

    /**
     * Marks the leaf "implicit-imsi-detach-retry-ns10" with operation "merge".
     */
    public void markImplicitImsiDetachRetryNs10Merge() throws JNCException {
        markLeafMerge("implicitImsiDetachRetryNs10");
    }

    /**
     * Marks the leaf "implicit-imsi-detach-retry-ns10" with operation "create".
     */
    public void markImplicitImsiDetachRetryNs10Create() throws JNCException {
        markLeafCreate("implicitImsiDetachRetryNs10");
    }

    /**
     * Marks the leaf "implicit-imsi-detach-retry-ns10" with operation "delete".
     */
    public void markImplicitImsiDetachRetryNs10Delete() throws JNCException {
        markLeafDelete("implicitImsiDetachRetryNs10");
    }

    /* Access methods for optional leaf child: "mme-reset-ind-retry-ns12". */

    /**
     * Gets the value for child leaf "mme-reset-ind-retry-ns12".
     * @return The value of the leaf.
     */
    public YangUInt8 getMmeResetIndRetryNs12Value() throws JNCException {
        YangUInt8 mmeResetIndRetryNs12 = (YangUInt8)getValue("mme-reset-ind-retry-ns12");
        if (mmeResetIndRetryNs12 == null) {
            mmeResetIndRetryNs12 = new YangUInt8("2");  // default
        }
        return mmeResetIndRetryNs12;
    }

    /**
     * Sets the value for child leaf "mme-reset-ind-retry-ns12",
     * using instance of generated typedef class.
     * @param mmeResetIndRetryNs12Value The value to set.
     * @param mmeResetIndRetryNs12Value used during instantiation.
     */
    public void setMmeResetIndRetryNs12Value(YangUInt8 mmeResetIndRetryNs12Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-reset-ind-retry-ns12",
            mmeResetIndRetryNs12Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mme-reset-ind-retry-ns12",
     * using Java primitive values.
     * @param mmeResetIndRetryNs12Value used during instantiation.
     */
    public void setMmeResetIndRetryNs12Value(short mmeResetIndRetryNs12Value)
            throws JNCException {
        setMmeResetIndRetryNs12Value(new YangUInt8(mmeResetIndRetryNs12Value));
    }

    /**
     * Sets the value for child leaf "mme-reset-ind-retry-ns12",
     * using a String value.
     * @param mmeResetIndRetryNs12Value used during instantiation.
     */
    public void setMmeResetIndRetryNs12Value(String mmeResetIndRetryNs12Value)
            throws JNCException {
        setMmeResetIndRetryNs12Value(new YangUInt8(mmeResetIndRetryNs12Value));
    }

    /**
     * Unsets the value for child leaf "mme-reset-ind-retry-ns12".
     */
    public void unsetMmeResetIndRetryNs12Value() throws JNCException {
        delete("mme-reset-ind-retry-ns12");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mme-reset-ind-retry-ns12" leaf will not have a value.
     */
    public void addMmeResetIndRetryNs12() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-reset-ind-retry-ns12",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mme-reset-ind-retry-ns12" with operation "replace".
     */
    public void markMmeResetIndRetryNs12Replace() throws JNCException {
        markLeafReplace("mmeResetIndRetryNs12");
    }

    /**
     * Marks the leaf "mme-reset-ind-retry-ns12" with operation "merge".
     */
    public void markMmeResetIndRetryNs12Merge() throws JNCException {
        markLeafMerge("mmeResetIndRetryNs12");
    }

    /**
     * Marks the leaf "mme-reset-ind-retry-ns12" with operation "create".
     */
    public void markMmeResetIndRetryNs12Create() throws JNCException {
        markLeafCreate("mmeResetIndRetryNs12");
    }

    /**
     * Marks the leaf "mme-reset-ind-retry-ns12" with operation "delete".
     */
    public void markMmeResetIndRetryNs12Delete() throws JNCException {
        markLeafDelete("mmeResetIndRetryNs12");
    }

    /* Access methods for optional leaf child: "sms-only". */

    /**
     * Gets the value for child leaf "sms-only".
     * @return The value of the leaf.
     */
    public YangBoolean getSmsOnlyValue() throws JNCException {
        YangBoolean smsOnly = (YangBoolean)getValue("sms-only");
        if (smsOnly == null) {
            smsOnly = new YangBoolean("false");  // default
        }
        return smsOnly;
    }

    /**
     * Sets the value for child leaf "sms-only",
     * using instance of generated typedef class.
     * @param smsOnlyValue The value to set.
     * @param smsOnlyValue used during instantiation.
     */
    public void setSmsOnlyValue(YangBoolean smsOnlyValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sms-only",
            smsOnlyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sms-only",
     * using Java primitive values.
     * @param smsOnlyValue used during instantiation.
     */
    public void setSmsOnlyValue(Boolean smsOnlyValue) throws JNCException {
        setSmsOnlyValue(new YangBoolean(smsOnlyValue));
    }

    /**
     * Sets the value for child leaf "sms-only",
     * using a String value.
     * @param smsOnlyValue used during instantiation.
     */
    public void setSmsOnlyValue(String smsOnlyValue) throws JNCException {
        setSmsOnlyValue(new YangBoolean(smsOnlyValue));
    }

    /**
     * Unsets the value for child leaf "sms-only".
     */
    public void unsetSmsOnlyValue() throws JNCException {
        delete("sms-only");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sms-only" leaf will not have a value.
     */
    public void addSmsOnly() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sms-only",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sms-only" with operation "replace".
     */
    public void markSmsOnlyReplace() throws JNCException {
        markLeafReplace("smsOnly");
    }

    /**
     * Marks the leaf "sms-only" with operation "merge".
     */
    public void markSmsOnlyMerge() throws JNCException {
        markLeafMerge("smsOnly");
    }

    /**
     * Marks the leaf "sms-only" with operation "create".
     */
    public void markSmsOnlyCreate() throws JNCException {
        markLeafCreate("smsOnly");
    }

    /**
     * Marks the leaf "sms-only" with operation "delete".
     */
    public void markSmsOnlyDelete() throws JNCException {
        markLeafDelete("smsOnly");
    }

    /* Access methods for optional leaf child: "mme-reset-paging-type". */

    /**
     * Gets the value for child leaf "mme-reset-paging-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getMmeResetPagingTypeValue() throws JNCException {
        YangEnumeration mmeResetPagingType = (YangEnumeration)getValue("mme-reset-paging-type");
        if (mmeResetPagingType == null) {
            mmeResetPagingType = new YangEnumeration("cs-paging", new String[] {  // default
                "cs-paging",
                "ps-paging",
            });
        }
        return mmeResetPagingType;
    }

    /**
     * Sets the value for child leaf "mme-reset-paging-type",
     * using instance of generated typedef class.
     * @param mmeResetPagingTypeValue The value to set.
     * @param mmeResetPagingTypeValue used during instantiation.
     */
    public void setMmeResetPagingTypeValue(YangEnumeration mmeResetPagingTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-reset-paging-type",
            mmeResetPagingTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mme-reset-paging-type",
     * using a String value.
     * @param mmeResetPagingTypeValue used during instantiation.
     */
    public void setMmeResetPagingTypeValue(String mmeResetPagingTypeValue)
            throws JNCException {
        setMmeResetPagingTypeValue(new YangEnumeration(mmeResetPagingTypeValue, new String[] {
             "cs-paging",
             "ps-paging",
        }));
    }

    /**
     * Unsets the value for child leaf "mme-reset-paging-type".
     */
    public void unsetMmeResetPagingTypeValue() throws JNCException {
        delete("mme-reset-paging-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mme-reset-paging-type" leaf will not have a value.
     */
    public void addMmeResetPagingType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-reset-paging-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mme-reset-paging-type" with operation "replace".
     */
    public void markMmeResetPagingTypeReplace() throws JNCException {
        markLeafReplace("mmeResetPagingType");
    }

    /**
     * Marks the leaf "mme-reset-paging-type" with operation "merge".
     */
    public void markMmeResetPagingTypeMerge() throws JNCException {
        markLeafMerge("mmeResetPagingType");
    }

    /**
     * Marks the leaf "mme-reset-paging-type" with operation "create".
     */
    public void markMmeResetPagingTypeCreate() throws JNCException {
        markLeafCreate("mmeResetPagingType");
    }

    /**
     * Marks the leaf "mme-reset-paging-type" with operation "delete".
     */
    public void markMmeResetPagingTypeDelete() throws JNCException {
        markLeafDelete("mmeResetPagingType");
    }

    /* Access methods for optional leaf child: "mme-reset-indication". */

    /**
     * Gets the value for child leaf "mme-reset-indication".
     * @return The value of the leaf.
     */
    public YangBoolean getMmeResetIndicationValue() throws JNCException {
        YangBoolean mmeResetIndication = (YangBoolean)getValue("mme-reset-indication");
        if (mmeResetIndication == null) {
            mmeResetIndication = new YangBoolean("true");  // default
        }
        return mmeResetIndication;
    }

    /**
     * Sets the value for child leaf "mme-reset-indication",
     * using instance of generated typedef class.
     * @param mmeResetIndicationValue The value to set.
     * @param mmeResetIndicationValue used during instantiation.
     */
    public void setMmeResetIndicationValue(YangBoolean mmeResetIndicationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-reset-indication",
            mmeResetIndicationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mme-reset-indication",
     * using Java primitive values.
     * @param mmeResetIndicationValue used during instantiation.
     */
    public void setMmeResetIndicationValue(Boolean mmeResetIndicationValue)
            throws JNCException {
        setMmeResetIndicationValue(new YangBoolean(mmeResetIndicationValue));
    }

    /**
     * Sets the value for child leaf "mme-reset-indication",
     * using a String value.
     * @param mmeResetIndicationValue used during instantiation.
     */
    public void setMmeResetIndicationValue(String mmeResetIndicationValue)
            throws JNCException {
        setMmeResetIndicationValue(new YangBoolean(mmeResetIndicationValue));
    }

    /**
     * Unsets the value for child leaf "mme-reset-indication".
     */
    public void unsetMmeResetIndicationValue() throws JNCException {
        delete("mme-reset-indication");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mme-reset-indication" leaf will not have a value.
     */
    public void addMmeResetIndication() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mme-reset-indication",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mme-reset-indication" with operation "replace".
     */
    public void markMmeResetIndicationReplace() throws JNCException {
        markLeafReplace("mmeResetIndication");
    }

    /**
     * Marks the leaf "mme-reset-indication" with operation "merge".
     */
    public void markMmeResetIndicationMerge() throws JNCException {
        markLeafMerge("mmeResetIndication");
    }

    /**
     * Marks the leaf "mme-reset-indication" with operation "create".
     */
    public void markMmeResetIndicationCreate() throws JNCException {
        markLeafCreate("mmeResetIndication");
    }

    /**
     * Marks the leaf "mme-reset-indication" with operation "delete".
     */
    public void markMmeResetIndicationDelete() throws JNCException {
        markLeafDelete("mmeResetIndication");
    }

    /* Access methods for optional leaf child: "version". */

    /**
     * Gets the value for child leaf "version".
     * @return The value of the leaf.
     */
    public YangEnumeration getVersionValue() throws JNCException {
        YangEnumeration version = (YangEnumeration)getValue("version");
        if (version == null) {
            version = new YangEnumeration("10.9.0", new String[] {  // default
                "9.3.0",
                "10.9.0",
            });
        }
        return version;
    }

    /**
     * Sets the value for child leaf "version",
     * using instance of generated typedef class.
     * @param versionValue The value to set.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(YangEnumeration versionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            versionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "version",
     * using a String value.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(String versionValue) throws JNCException {
        setVersionValue(new YangEnumeration(versionValue, new String[] {
             "9.3.0",
             "10.9.0",
        }));
    }

    /**
     * Unsets the value for child leaf "version".
     */
    public void unsetVersionValue() throws JNCException {
        delete("version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "version" leaf will not have a value.
     */
    public void addVersion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "version" with operation "replace".
     */
    public void markVersionReplace() throws JNCException {
        markLeafReplace("version");
    }

    /**
     * Marks the leaf "version" with operation "merge".
     */
    public void markVersionMerge() throws JNCException {
        markLeafMerge("version");
    }

    /**
     * Marks the leaf "version" with operation "create".
     */
    public void markVersionCreate() throws JNCException {
        markLeafCreate("version");
    }

    /**
     * Marks the leaf "version" with operation "delete".
     */
    public void markVersionDelete() throws JNCException {
        markLeafDelete("version");
    }

    /* Access methods for optional leaf child: "dscp-mark". */

    /**
     * Gets the value for child leaf "dscp-mark".
     * @return The value of the leaf.
     */
    public YangString getDscpMarkValue() throws JNCException {
        YangString dscpMark = (YangString)getValue("dscp-mark");
        if (dscpMark == null) {
            dscpMark = new YangString("de");  // default
        }
        return dscpMark;
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using instance of generated typedef class.
     * @param dscpMarkValue The value to set.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(YangString dscpMarkValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            dscpMarkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using a String value.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(String dscpMarkValue) throws JNCException {
        setDscpMarkValue(new YangString(dscpMarkValue));
    }

    /**
     * Unsets the value for child leaf "dscp-mark".
     */
    public void unsetDscpMarkValue() throws JNCException {
        delete("dscp-mark");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dscp-mark" leaf will not have a value.
     */
    public void addDscpMark() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dscp-mark" with operation "replace".
     */
    public void markDscpMarkReplace() throws JNCException {
        markLeafReplace("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "merge".
     */
    public void markDscpMarkMerge() throws JNCException {
        markLeafMerge("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "create".
     */
    public void markDscpMarkCreate() throws JNCException {
        markLeafCreate("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "delete".
     */
    public void markDscpMarkDelete() throws JNCException {
        markLeafDelete("dscpMark");
    }

    /* Access methods for optional leaf child: "ip-address2". */

    /**
     * Gets the value for child leaf "ip-address2".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddress2Value() throws JNCException {
        IpAddress ipAddress2 = (IpAddress)getValue("ip-address2");
        if (ipAddress2 == null) {
            ipAddress2 = new IpAddress("0.0.0.0");  // default
        }
        return ipAddress2;
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a JNC type value.
     * @param ipAddress2Value The value to set.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(IpAddress ipAddress2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            ipAddress2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a String value.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(String ipAddress2Value) throws JNCException {
        setIpAddress2Value(new IpAddress(ipAddress2Value));
    }

    /**
     * Unsets the value for child leaf "ip-address2".
     */
    public void unsetIpAddress2Value() throws JNCException {
        delete("ip-address2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address2" leaf will not have a value.
     */
    public void addIpAddress2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address2" with operation "replace".
     */
    public void markIpAddress2Replace() throws JNCException {
        markLeafReplace("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "merge".
     */
    public void markIpAddress2Merge() throws JNCException {
        markLeafMerge("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "create".
     */
    public void markIpAddress2Create() throws JNCException {
        markLeafCreate("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "delete".
     */
    public void markIpAddress2Delete() throws JNCException {
        markLeafDelete("ipAddress2");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
