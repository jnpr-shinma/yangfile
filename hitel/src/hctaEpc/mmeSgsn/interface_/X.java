/* 
 * @(#)X.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;

import AgwLig;

import AgwX;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import NodeSet;

import X1;
import X2;
import X3;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/x"
 * <p>
 * See line 21 in
 * agwLiConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class X extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "agw-x".
     */
    public AgwX agwX = null;

    /**
     * Field for child container "agw-lig".
     */
    public AgwLig agwLig = null;

    /**
     * Constructor for an empty X object.
     */
    public X() {
        super(Epc.NAMESPACE, "x");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public X clone() {
        return (X)cloneContent(new X());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public X cloneShallow() {
        return (X)cloneShallowContent(new X());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "agw-x",
            "agw-lig",
            "x1",
            "x2",
            "x3",
        };
    }

    /* Access methods for container child: "agw-x". */

    /**
     * Adds container entry "agwX", using an existing object.
     * @param agwX The object to add.
     * @return The added child.
     */
    public AgwX addAgwX(AgwX agwX) throws JNCException {
        this.agwX = agwX;
        insertChild(agwX, childrenNames());
        return agwX;
    }

    /**
     * Adds container entry "agwX".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AgwX addAgwX() throws JNCException {
        AgwX agwX = new AgwX();
        this.agwX = agwX;
        insertChild(agwX, childrenNames());
        return agwX;
    }

    /**
     * Deletes container entry "agwX".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteAgwX() throws JNCException {
        this.agwX = null;
        String path = "agw-x";
        return delete(path);
    }

    /* Access methods for container child: "agw-lig". */

    /**
     * Adds container entry "agwLig", using an existing object.
     * @param agwLig The object to add.
     * @return The added child.
     */
    public AgwLig addAgwLig(AgwLig agwLig) throws JNCException {
        this.agwLig = agwLig;
        insertChild(agwLig, childrenNames());
        return agwLig;
    }

    /**
     * Adds container entry "agwLig".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AgwLig addAgwLig() throws JNCException {
        AgwLig agwLig = new AgwLig();
        this.agwLig = agwLig;
        insertChild(agwLig, childrenNames());
        return agwLig;
    }

    /**
     * Deletes container entry "agwLig".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteAgwLig() throws JNCException {
        this.agwLig = null;
        String path = "agw-lig";
        return delete(path);
    }

    /* Access methods for list child: "x1". */

    /**
     * Gets list entry "x1", with specified keys.
     */
    public X1 getX1() throws JNCException {
        String path = "x1";
        return (X1)searchOne(path);
    }

    /**
     * Iterator method for the list "x1".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator x1Iterator() {
        return new ElementChildrenIterator(children, "x1");
    }

    /**
     * Adds list entry "x1", using an existing object.
     * @param x1 The object to add.
     * @return The added child.
     */
    public X1 addX1(X1 x1) throws JNCException {
        insertChild(x1, childrenNames());
        return x1;
    }

    /**
     * Adds list entry "x1".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public X1 addX1() throws JNCException {
        X1 x1 = new X1();
        insertChild(x1, childrenNames());
        return x1;
    }

    /**
     * Deletes list entry "x1", with specified keys.
     */
    public void deleteX1() throws JNCException {
        String path = "x1";
        delete(path);
    }

    /* Access methods for list child: "x2". */

    /**
     * Gets list entry "x2", with specified keys.
     */
    public X2 getX2() throws JNCException {
        String path = "x2";
        return (X2)searchOne(path);
    }

    /**
     * Iterator method for the list "x2".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator x2Iterator() {
        return new ElementChildrenIterator(children, "x2");
    }

    /**
     * Adds list entry "x2", using an existing object.
     * @param x2 The object to add.
     * @return The added child.
     */
    public X2 addX2(X2 x2) throws JNCException {
        insertChild(x2, childrenNames());
        return x2;
    }

    /**
     * Adds list entry "x2".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public X2 addX2() throws JNCException {
        X2 x2 = new X2();
        insertChild(x2, childrenNames());
        return x2;
    }

    /**
     * Deletes list entry "x2", with specified keys.
     */
    public void deleteX2() throws JNCException {
        String path = "x2";
        delete(path);
    }

    /* Access methods for list child: "x3". */

    /**
     * Gets list entry "x3", with specified keys.
     */
    public X3 getX3() throws JNCException {
        String path = "x3";
        return (X3)searchOne(path);
    }

    /**
     * Iterator method for the list "x3".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator x3Iterator() {
        return new ElementChildrenIterator(children, "x3");
    }

    /**
     * Adds list entry "x3", using an existing object.
     * @param x3 The object to add.
     * @return The added child.
     */
    public X3 addX3(X3 x3) throws JNCException {
        insertChild(x3, childrenNames());
        return x3;
    }

    /**
     * Adds list entry "x3".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public X3 addX3() throws JNCException {
        X3 x3 = new X3();
        insertChild(x3, childrenNames());
        return x3;
    }

    /**
     * Deletes list entry "x3", with specified keys.
     */
    public void deleteX3() throws JNCException {
        String path = "x3";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof AgwX) agwX = (AgwX)child;
        else if (child instanceof AgwLig) agwLig = (AgwLig)child;
    }

}
