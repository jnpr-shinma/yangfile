/* 
 * @(#)Ss7.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeAddressTranslation;

import MmeAppServer;

import MmeGAspInstance;

import MmeGDestPeerMap;

import MmeGM3ua;

import MmeGPeer;

import MmeGttEntry;

import MmeGttResult;

import MmeRemoteDestination;

import MmeSccpProfile;

import MmeSs7Profile;

import MmeTcapProfile;

import NodeSet;

import PeerOper;

import RemoteDest;

import RemoteSubsystem;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/ss7"
 * <p>
 * See line 17 in
 * tcapConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Ss7 extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-tcap-profile".
     */
    public MmeTcapProfile mmeTcapProfile = null;

    /**
     * Field for child container "mme-sccp-profile".
     */
    public MmeSccpProfile mmeSccpProfile = null;

    /**
     * Field for child container "mme-ss7-profile".
     */
    public MmeSs7Profile mmeSs7Profile = null;

    /**
     * Constructor for an empty Ss7 object.
     */
    public Ss7() {
        super(Epc.NAMESPACE, "ss7");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Ss7 clone() {
        return (Ss7)cloneContent(new Ss7());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Ss7 cloneShallow() {
        return (Ss7)cloneShallowContent(new Ss7());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-tcap-profile",
            "mme-address-translation",
            "mme-sccp-profile",
            "mme-remote-destination",
            "mme-gtt-entry",
            "mme-gtt-result",
            "mme-g-m3ua",
            "mme-g-asp-instance",
            "mme-g-peer",
            "mme-g-dest-peer-map",
            "mme-app-server",
            "mme-ss7-profile",
            "peer-oper",
            "remote-dest",
            "remote-subsystem",
        };
    }

    /* Access methods for container child: "mme-tcap-profile". */

    /**
     * Adds container entry "mmeTcapProfile", using an existing object.
     * @param mmeTcapProfile The object to add.
     * @return The added child.
     */
    public MmeTcapProfile addMmeTcapProfile(MmeTcapProfile mmeTcapProfile)
            throws JNCException {
        this.mmeTcapProfile = mmeTcapProfile;
        insertChild(mmeTcapProfile, childrenNames());
        return mmeTcapProfile;
    }

    /**
     * Adds container entry "mmeTcapProfile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeTcapProfile addMmeTcapProfile() throws JNCException {
        MmeTcapProfile mmeTcapProfile = new MmeTcapProfile();
        this.mmeTcapProfile = mmeTcapProfile;
        insertChild(mmeTcapProfile, childrenNames());
        return mmeTcapProfile;
    }

    /**
     * Deletes container entry "mmeTcapProfile".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeTcapProfile() throws JNCException {
        this.mmeTcapProfile = null;
        String path = "mme-tcap-profile";
        return delete(path);
    }

    /* Access methods for list child: "mme-address-translation". */

    /**
     * Gets list entry "mmeAddressTranslation", with specified keys.
     * @param plmnIdValue Key argument of child.
     */
    public MmeAddressTranslation getMmeAddressTranslation(YangString plmnIdValue)
            throws JNCException {
        String path = "mme-address-translation[plmnId='" + plmnIdValue + "']";
        return (MmeAddressTranslation)searchOne(path);
    }

    /**
     * Gets list entry "mmeAddressTranslation", with specified keys.
     * The keys are specified as strings.
     * @param plmnIdValue Key argument of child.
     */
    public MmeAddressTranslation getMmeAddressTranslation(String plmnIdValue)
            throws JNCException {
        String path = "mme-address-translation[plmnId='" + plmnIdValue + "']";
        return (MmeAddressTranslation)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-address-translation".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeAddressTranslationIterator() {
        return new ElementChildrenIterator(children, "mme-address-translation");
    }

    /**
     * Adds list entry "mmeAddressTranslation", using an existing object.
     * @param mmeAddressTranslation The object to add.
     * @return The added child.
     */
    public MmeAddressTranslation addMmeAddressTranslation(MmeAddressTranslation mmeAddressTranslation)
            throws JNCException {
        insertChild(mmeAddressTranslation, childrenNames());
        return mmeAddressTranslation;
    }

    /**
     * Adds list entry "mmeAddressTranslation", with specified keys.
     * @param plmnIdValue Key argument of child.
     * @return The added child.
     */
    public MmeAddressTranslation addMmeAddressTranslation(YangString plmnIdValue)
            throws JNCException {
        MmeAddressTranslation mmeAddressTranslation = new MmeAddressTranslation(plmnIdValue);
        return addMmeAddressTranslation(mmeAddressTranslation);
    }

    /**
     * Adds list entry "mmeAddressTranslation", with specified keys.
     * The keys are specified as strings.
     * @param plmnIdValue Key argument of child.
     * @return The added child.
     */
    public MmeAddressTranslation addMmeAddressTranslation(String plmnIdValue)
            throws JNCException {
        MmeAddressTranslation mmeAddressTranslation = new MmeAddressTranslation(plmnIdValue);
        return addMmeAddressTranslation(mmeAddressTranslation);
    }

    /**
     * Adds list entry "mmeAddressTranslation".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeAddressTranslation addMmeAddressTranslation() throws JNCException {
        MmeAddressTranslation mmeAddressTranslation = new MmeAddressTranslation();
        insertChild(mmeAddressTranslation, childrenNames());
        return mmeAddressTranslation;
    }

    /**
     * Deletes list entry "mmeAddressTranslation", with specified keys.
     * @param plmnIdValue Key argument of child.
     */
    public void deleteMmeAddressTranslation(YangString plmnIdValue)
            throws JNCException {
        String path = "mme-address-translation[plmnId='" + plmnIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeAddressTranslation", with specified keys.
     * The keys are specified as strings.
     * @param plmnIdValue Key argument of child.
     */
    public void deleteMmeAddressTranslation(String plmnIdValue)
            throws JNCException {
        String path = "mme-address-translation[plmnId='" + plmnIdValue + "']";
        delete(path);
    }

    /* Access methods for container child: "mme-sccp-profile". */

    /**
     * Adds container entry "mmeSccpProfile", using an existing object.
     * @param mmeSccpProfile The object to add.
     * @return The added child.
     */
    public MmeSccpProfile addMmeSccpProfile(MmeSccpProfile mmeSccpProfile)
            throws JNCException {
        this.mmeSccpProfile = mmeSccpProfile;
        insertChild(mmeSccpProfile, childrenNames());
        return mmeSccpProfile;
    }

    /**
     * Adds container entry "mmeSccpProfile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSccpProfile addMmeSccpProfile() throws JNCException {
        MmeSccpProfile mmeSccpProfile = new MmeSccpProfile();
        this.mmeSccpProfile = mmeSccpProfile;
        insertChild(mmeSccpProfile, childrenNames());
        return mmeSccpProfile;
    }

    /**
     * Deletes container entry "mmeSccpProfile".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeSccpProfile() throws JNCException {
        this.mmeSccpProfile = null;
        String path = "mme-sccp-profile";
        return delete(path);
    }

    /* Access methods for list child: "mme-remote-destination". */

    /**
     * Gets list entry "mmeRemoteDestination", with specified keys.
     * @param destinationPointCodeValue Key argument of child.
     */
    public MmeRemoteDestination getMmeRemoteDestination(YangString destinationPointCodeValue)
            throws JNCException {
        String path = "mme-remote-destination[destinationPointCode='" + destinationPointCodeValue + "']";
        return (MmeRemoteDestination)searchOne(path);
    }

    /**
     * Gets list entry "mmeRemoteDestination", with specified keys.
     * The keys are specified as strings.
     * @param destinationPointCodeValue Key argument of child.
     */
    public MmeRemoteDestination getMmeRemoteDestination(String destinationPointCodeValue)
            throws JNCException {
        String path = "mme-remote-destination[destinationPointCode='" + destinationPointCodeValue + "']";
        return (MmeRemoteDestination)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-remote-destination".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeRemoteDestinationIterator() {
        return new ElementChildrenIterator(children, "mme-remote-destination");
    }

    /**
     * Adds list entry "mmeRemoteDestination", using an existing object.
     * @param mmeRemoteDestination The object to add.
     * @return The added child.
     */
    public MmeRemoteDestination addMmeRemoteDestination(MmeRemoteDestination mmeRemoteDestination)
            throws JNCException {
        insertChild(mmeRemoteDestination, childrenNames());
        return mmeRemoteDestination;
    }

    /**
     * Adds list entry "mmeRemoteDestination", with specified keys.
     * @param destinationPointCodeValue Key argument of child.
     * @return The added child.
     */
    public MmeRemoteDestination addMmeRemoteDestination(YangString destinationPointCodeValue)
            throws JNCException {
        MmeRemoteDestination mmeRemoteDestination = new MmeRemoteDestination(destinationPointCodeValue);
        return addMmeRemoteDestination(mmeRemoteDestination);
    }

    /**
     * Adds list entry "mmeRemoteDestination", with specified keys.
     * The keys are specified as strings.
     * @param destinationPointCodeValue Key argument of child.
     * @return The added child.
     */
    public MmeRemoteDestination addMmeRemoteDestination(String destinationPointCodeValue)
            throws JNCException {
        MmeRemoteDestination mmeRemoteDestination = new MmeRemoteDestination(destinationPointCodeValue);
        return addMmeRemoteDestination(mmeRemoteDestination);
    }

    /**
     * Adds list entry "mmeRemoteDestination".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeRemoteDestination addMmeRemoteDestination() throws JNCException {
        MmeRemoteDestination mmeRemoteDestination = new MmeRemoteDestination();
        insertChild(mmeRemoteDestination, childrenNames());
        return mmeRemoteDestination;
    }

    /**
     * Deletes list entry "mmeRemoteDestination", with specified keys.
     * @param destinationPointCodeValue Key argument of child.
     */
    public void deleteMmeRemoteDestination(YangString destinationPointCodeValue)
            throws JNCException {
        String path = "mme-remote-destination[destinationPointCode='" + destinationPointCodeValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeRemoteDestination", with specified keys.
     * The keys are specified as strings.
     * @param destinationPointCodeValue Key argument of child.
     */
    public void deleteMmeRemoteDestination(String destinationPointCodeValue)
            throws JNCException {
        String path = "mme-remote-destination[destinationPointCode='" + destinationPointCodeValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-gtt-entry". */

    /**
     * Gets list entry "mmeGttEntry", with specified keys.
     * @param instanceValue Key argument of child.
     */
    public MmeGttEntry getMmeGttEntry(YangUInt16 instanceValue)
            throws JNCException {
        String path = "mme-gtt-entry[instance='" + instanceValue + "']";
        return (MmeGttEntry)searchOne(path);
    }

    /**
     * Gets list entry "mmeGttEntry", with specified keys.
     * The keys are specified as strings.
     * @param instanceValue Key argument of child.
     */
    public MmeGttEntry getMmeGttEntry(String instanceValue) throws JNCException {
        String path = "mme-gtt-entry[instance='" + instanceValue + "']";
        return (MmeGttEntry)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-gtt-entry".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeGttEntryIterator() {
        return new ElementChildrenIterator(children, "mme-gtt-entry");
    }

    /**
     * Adds list entry "mmeGttEntry", using an existing object.
     * @param mmeGttEntry The object to add.
     * @return The added child.
     */
    public MmeGttEntry addMmeGttEntry(MmeGttEntry mmeGttEntry)
            throws JNCException {
        insertChild(mmeGttEntry, childrenNames());
        return mmeGttEntry;
    }

    /**
     * Adds list entry "mmeGttEntry", with specified keys.
     * @param instanceValue Key argument of child.
     * @return The added child.
     */
    public MmeGttEntry addMmeGttEntry(YangUInt16 instanceValue)
            throws JNCException {
        MmeGttEntry mmeGttEntry = new MmeGttEntry(instanceValue);
        return addMmeGttEntry(mmeGttEntry);
    }

    /**
     * Adds list entry "mmeGttEntry", with specified keys.
     * The keys are specified as strings.
     * @param instanceValue Key argument of child.
     * @return The added child.
     */
    public MmeGttEntry addMmeGttEntry(String instanceValue) throws JNCException {
        MmeGttEntry mmeGttEntry = new MmeGttEntry(instanceValue);
        return addMmeGttEntry(mmeGttEntry);
    }

    /**
     * Adds list entry "mmeGttEntry".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeGttEntry addMmeGttEntry() throws JNCException {
        MmeGttEntry mmeGttEntry = new MmeGttEntry();
        insertChild(mmeGttEntry, childrenNames());
        return mmeGttEntry;
    }

    /**
     * Deletes list entry "mmeGttEntry", with specified keys.
     * @param instanceValue Key argument of child.
     */
    public void deleteMmeGttEntry(YangUInt16 instanceValue) throws JNCException {
        String path = "mme-gtt-entry[instance='" + instanceValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeGttEntry", with specified keys.
     * The keys are specified as strings.
     * @param instanceValue Key argument of child.
     */
    public void deleteMmeGttEntry(String instanceValue) throws JNCException {
        String path = "mme-gtt-entry[instance='" + instanceValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-gtt-result". */

    /**
     * Gets list entry "mmeGttResult", with specified keys.
     * @param instanceValue Key argument of child.
     */
    public MmeGttResult getMmeGttResult(YangUInt16 instanceValue)
            throws JNCException {
        String path = "mme-gtt-result[instance='" + instanceValue + "']";
        return (MmeGttResult)searchOne(path);
    }

    /**
     * Gets list entry "mmeGttResult", with specified keys.
     * The keys are specified as strings.
     * @param instanceValue Key argument of child.
     */
    public MmeGttResult getMmeGttResult(String instanceValue)
            throws JNCException {
        String path = "mme-gtt-result[instance='" + instanceValue + "']";
        return (MmeGttResult)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-gtt-result".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeGttResultIterator() {
        return new ElementChildrenIterator(children, "mme-gtt-result");
    }

    /**
     * Adds list entry "mmeGttResult", using an existing object.
     * @param mmeGttResult The object to add.
     * @return The added child.
     */
    public MmeGttResult addMmeGttResult(MmeGttResult mmeGttResult)
            throws JNCException {
        insertChild(mmeGttResult, childrenNames());
        return mmeGttResult;
    }

    /**
     * Adds list entry "mmeGttResult", with specified keys.
     * @param instanceValue Key argument of child.
     * @return The added child.
     */
    public MmeGttResult addMmeGttResult(YangUInt16 instanceValue)
            throws JNCException {
        MmeGttResult mmeGttResult = new MmeGttResult(instanceValue);
        return addMmeGttResult(mmeGttResult);
    }

    /**
     * Adds list entry "mmeGttResult", with specified keys.
     * The keys are specified as strings.
     * @param instanceValue Key argument of child.
     * @return The added child.
     */
    public MmeGttResult addMmeGttResult(String instanceValue)
            throws JNCException {
        MmeGttResult mmeGttResult = new MmeGttResult(instanceValue);
        return addMmeGttResult(mmeGttResult);
    }

    /**
     * Adds list entry "mmeGttResult".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeGttResult addMmeGttResult() throws JNCException {
        MmeGttResult mmeGttResult = new MmeGttResult();
        insertChild(mmeGttResult, childrenNames());
        return mmeGttResult;
    }

    /**
     * Deletes list entry "mmeGttResult", with specified keys.
     * @param instanceValue Key argument of child.
     */
    public void deleteMmeGttResult(YangUInt16 instanceValue)
            throws JNCException {
        String path = "mme-gtt-result[instance='" + instanceValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeGttResult", with specified keys.
     * The keys are specified as strings.
     * @param instanceValue Key argument of child.
     */
    public void deleteMmeGttResult(String instanceValue) throws JNCException {
        String path = "mme-gtt-result[instance='" + instanceValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-g-m3ua". */

    /**
     * Gets list entry "mmeGM3ua", with specified keys.
     * @param localPointCodeValue Key argument of child.
     */
    public MmeGM3ua getMmeGM3ua(YangString localPointCodeValue)
            throws JNCException {
        String path = "mme-g-m3ua[localPointCode='" + localPointCodeValue + "']";
        return (MmeGM3ua)searchOne(path);
    }

    /**
     * Gets list entry "mmeGM3ua", with specified keys.
     * The keys are specified as strings.
     * @param localPointCodeValue Key argument of child.
     */
    public MmeGM3ua getMmeGM3ua(String localPointCodeValue) throws JNCException {
        String path = "mme-g-m3ua[localPointCode='" + localPointCodeValue + "']";
        return (MmeGM3ua)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-g-m3ua".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeGM3uaIterator() {
        return new ElementChildrenIterator(children, "mme-g-m3ua");
    }

    /**
     * Adds list entry "mmeGM3ua", using an existing object.
     * @param mmeGM3ua The object to add.
     * @return The added child.
     */
    public MmeGM3ua addMmeGM3ua(MmeGM3ua mmeGM3ua) throws JNCException {
        insertChild(mmeGM3ua, childrenNames());
        return mmeGM3ua;
    }

    /**
     * Adds list entry "mmeGM3ua", with specified keys.
     * @param localPointCodeValue Key argument of child.
     * @return The added child.
     */
    public MmeGM3ua addMmeGM3ua(YangString localPointCodeValue)
            throws JNCException {
        MmeGM3ua mmeGM3ua = new MmeGM3ua(localPointCodeValue);
        return addMmeGM3ua(mmeGM3ua);
    }

    /**
     * Adds list entry "mmeGM3ua", with specified keys.
     * The keys are specified as strings.
     * @param localPointCodeValue Key argument of child.
     * @return The added child.
     */
    public MmeGM3ua addMmeGM3ua(String localPointCodeValue) throws JNCException {
        MmeGM3ua mmeGM3ua = new MmeGM3ua(localPointCodeValue);
        return addMmeGM3ua(mmeGM3ua);
    }

    /**
     * Adds list entry "mmeGM3ua".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeGM3ua addMmeGM3ua() throws JNCException {
        MmeGM3ua mmeGM3ua = new MmeGM3ua();
        insertChild(mmeGM3ua, childrenNames());
        return mmeGM3ua;
    }

    /**
     * Deletes list entry "mmeGM3ua", with specified keys.
     * @param localPointCodeValue Key argument of child.
     */
    public void deleteMmeGM3ua(YangString localPointCodeValue)
            throws JNCException {
        String path = "mme-g-m3ua[localPointCode='" + localPointCodeValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeGM3ua", with specified keys.
     * The keys are specified as strings.
     * @param localPointCodeValue Key argument of child.
     */
    public void deleteMmeGM3ua(String localPointCodeValue) throws JNCException {
        String path = "mme-g-m3ua[localPointCode='" + localPointCodeValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-g-asp-instance". */

    /**
     * Gets list entry "mmeGAspInstance", with specified keys.
     * @param unitIdValue Key argument of child.
     */
    public MmeGAspInstance getMmeGAspInstance(YangUInt16 unitIdValue)
            throws JNCException {
        String path = "mme-g-asp-instance[unitId='" + unitIdValue + "']";
        return (MmeGAspInstance)searchOne(path);
    }

    /**
     * Gets list entry "mmeGAspInstance", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     */
    public MmeGAspInstance getMmeGAspInstance(String unitIdValue)
            throws JNCException {
        String path = "mme-g-asp-instance[unitId='" + unitIdValue + "']";
        return (MmeGAspInstance)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-g-asp-instance".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeGAspInstanceIterator() {
        return new ElementChildrenIterator(children, "mme-g-asp-instance");
    }

    /**
     * Adds list entry "mmeGAspInstance", using an existing object.
     * @param mmeGAspInstance The object to add.
     * @return The added child.
     */
    public MmeGAspInstance addMmeGAspInstance(MmeGAspInstance mmeGAspInstance)
            throws JNCException {
        insertChild(mmeGAspInstance, childrenNames());
        return mmeGAspInstance;
    }

    /**
     * Adds list entry "mmeGAspInstance", with specified keys.
     * @param unitIdValue Key argument of child.
     * @return The added child.
     */
    public MmeGAspInstance addMmeGAspInstance(YangUInt16 unitIdValue)
            throws JNCException {
        MmeGAspInstance mmeGAspInstance = new MmeGAspInstance(unitIdValue);
        return addMmeGAspInstance(mmeGAspInstance);
    }

    /**
     * Adds list entry "mmeGAspInstance", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     * @return The added child.
     */
    public MmeGAspInstance addMmeGAspInstance(String unitIdValue)
            throws JNCException {
        MmeGAspInstance mmeGAspInstance = new MmeGAspInstance(unitIdValue);
        return addMmeGAspInstance(mmeGAspInstance);
    }

    /**
     * Adds list entry "mmeGAspInstance".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeGAspInstance addMmeGAspInstance() throws JNCException {
        MmeGAspInstance mmeGAspInstance = new MmeGAspInstance();
        insertChild(mmeGAspInstance, childrenNames());
        return mmeGAspInstance;
    }

    /**
     * Deletes list entry "mmeGAspInstance", with specified keys.
     * @param unitIdValue Key argument of child.
     */
    public void deleteMmeGAspInstance(YangUInt16 unitIdValue)
            throws JNCException {
        String path = "mme-g-asp-instance[unitId='" + unitIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeGAspInstance", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     */
    public void deleteMmeGAspInstance(String unitIdValue) throws JNCException {
        String path = "mme-g-asp-instance[unitId='" + unitIdValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-g-peer". */

    /**
     * Gets list entry "mmeGPeer", with specified keys.
     * @param gPeerNameValue Key argument of child.
     */
    public MmeGPeer getMmeGPeer(YangString gPeerNameValue) throws JNCException {
        String path = "mme-g-peer[gPeerName='" + gPeerNameValue + "']";
        return (MmeGPeer)searchOne(path);
    }

    /**
     * Gets list entry "mmeGPeer", with specified keys.
     * The keys are specified as strings.
     * @param gPeerNameValue Key argument of child.
     */
    public MmeGPeer getMmeGPeer(String gPeerNameValue) throws JNCException {
        String path = "mme-g-peer[gPeerName='" + gPeerNameValue + "']";
        return (MmeGPeer)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-g-peer".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeGPeerIterator() {
        return new ElementChildrenIterator(children, "mme-g-peer");
    }

    /**
     * Adds list entry "mmeGPeer", using an existing object.
     * @param mmeGPeer The object to add.
     * @return The added child.
     */
    public MmeGPeer addMmeGPeer(MmeGPeer mmeGPeer) throws JNCException {
        insertChild(mmeGPeer, childrenNames());
        return mmeGPeer;
    }

    /**
     * Adds list entry "mmeGPeer", with specified keys.
     * @param gPeerNameValue Key argument of child.
     * @return The added child.
     */
    public MmeGPeer addMmeGPeer(YangString gPeerNameValue) throws JNCException {
        MmeGPeer mmeGPeer = new MmeGPeer(gPeerNameValue);
        return addMmeGPeer(mmeGPeer);
    }

    /**
     * Adds list entry "mmeGPeer", with specified keys.
     * The keys are specified as strings.
     * @param gPeerNameValue Key argument of child.
     * @return The added child.
     */
    public MmeGPeer addMmeGPeer(String gPeerNameValue) throws JNCException {
        MmeGPeer mmeGPeer = new MmeGPeer(gPeerNameValue);
        return addMmeGPeer(mmeGPeer);
    }

    /**
     * Adds list entry "mmeGPeer".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeGPeer addMmeGPeer() throws JNCException {
        MmeGPeer mmeGPeer = new MmeGPeer();
        insertChild(mmeGPeer, childrenNames());
        return mmeGPeer;
    }

    /**
     * Deletes list entry "mmeGPeer", with specified keys.
     * @param gPeerNameValue Key argument of child.
     */
    public void deleteMmeGPeer(YangString gPeerNameValue) throws JNCException {
        String path = "mme-g-peer[gPeerName='" + gPeerNameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeGPeer", with specified keys.
     * The keys are specified as strings.
     * @param gPeerNameValue Key argument of child.
     */
    public void deleteMmeGPeer(String gPeerNameValue) throws JNCException {
        String path = "mme-g-peer[gPeerName='" + gPeerNameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-g-dest-peer-map". */

    /**
     * Gets list entry "mmeGDestPeerMap", with specified keys.
     * @param destinationPointCodeValue Key argument of child.
     * @param gPeerNameValue Key argument of child.
     */
    public MmeGDestPeerMap getMmeGDestPeerMap(YangString destinationPointCodeValue, YangString gPeerNameValue)
            throws JNCException {
        String path = "mme-g-dest-peer-map[destinationPointCode='" + destinationPointCodeValue + "'][gPeerName='" + gPeerNameValue + "']";
        return (MmeGDestPeerMap)searchOne(path);
    }

    /**
     * Gets list entry "mmeGDestPeerMap", with specified keys.
     * The keys are specified as strings.
     * @param destinationPointCodeValue Key argument of child.
     * @param gPeerNameValue Key argument of child.
     */
    public MmeGDestPeerMap getMmeGDestPeerMap(String destinationPointCodeValue, String gPeerNameValue)
            throws JNCException {
        String path = "mme-g-dest-peer-map[destinationPointCode='" + destinationPointCodeValue + "'][gPeerName='" + gPeerNameValue + "']";
        return (MmeGDestPeerMap)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-g-dest-peer-map".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeGDestPeerMapIterator() {
        return new ElementChildrenIterator(children, "mme-g-dest-peer-map");
    }

    /**
     * Adds list entry "mmeGDestPeerMap", using an existing object.
     * @param mmeGDestPeerMap The object to add.
     * @return The added child.
     */
    public MmeGDestPeerMap addMmeGDestPeerMap(MmeGDestPeerMap mmeGDestPeerMap)
            throws JNCException {
        insertChild(mmeGDestPeerMap, childrenNames());
        return mmeGDestPeerMap;
    }

    /**
     * Adds list entry "mmeGDestPeerMap", with specified keys.
     * @param destinationPointCodeValue Key argument of child.
     * @param gPeerNameValue Key argument of child.
     * @return The added child.
     */
    public MmeGDestPeerMap addMmeGDestPeerMap(YangString destinationPointCodeValue, YangString gPeerNameValue)
            throws JNCException {
        MmeGDestPeerMap mmeGDestPeerMap = new MmeGDestPeerMap(destinationPointCodeValue, gPeerNameValue);
        return addMmeGDestPeerMap(mmeGDestPeerMap);
    }

    /**
     * Adds list entry "mmeGDestPeerMap", with specified keys.
     * The keys are specified as strings.
     * @param destinationPointCodeValue Key argument of child.
     * @param gPeerNameValue Key argument of child.
     * @return The added child.
     */
    public MmeGDestPeerMap addMmeGDestPeerMap(String destinationPointCodeValue, String gPeerNameValue)
            throws JNCException {
        MmeGDestPeerMap mmeGDestPeerMap = new MmeGDestPeerMap(destinationPointCodeValue, gPeerNameValue);
        return addMmeGDestPeerMap(mmeGDestPeerMap);
    }

    /**
     * Adds list entry "mmeGDestPeerMap".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeGDestPeerMap addMmeGDestPeerMap() throws JNCException {
        MmeGDestPeerMap mmeGDestPeerMap = new MmeGDestPeerMap();
        insertChild(mmeGDestPeerMap, childrenNames());
        return mmeGDestPeerMap;
    }

    /**
     * Deletes list entry "mmeGDestPeerMap", with specified keys.
     * @param destinationPointCodeValue Key argument of child.
     * @param gPeerNameValue Key argument of child.
     */
    public void deleteMmeGDestPeerMap(YangString destinationPointCodeValue, YangString gPeerNameValue)
            throws JNCException {
        String path = "mme-g-dest-peer-map[destinationPointCode='" + destinationPointCodeValue + "'][gPeerName='" + gPeerNameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeGDestPeerMap", with specified keys.
     * The keys are specified as strings.
     * @param destinationPointCodeValue Key argument of child.
     * @param gPeerNameValue Key argument of child.
     */
    public void deleteMmeGDestPeerMap(String destinationPointCodeValue, String gPeerNameValue)
            throws JNCException {
        String path = "mme-g-dest-peer-map[destinationPointCode='" + destinationPointCodeValue + "'][gPeerName='" + gPeerNameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-app-server". */

    /**
     * Gets list entry "mmeAppServer", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeAppServer getMmeAppServer(YangString nameValue)
            throws JNCException {
        String path = "mme-app-server[name='" + nameValue + "']";
        return (MmeAppServer)searchOne(path);
    }

    /**
     * Gets list entry "mmeAppServer", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeAppServer getMmeAppServer(String nameValue) throws JNCException {
        String path = "mme-app-server[name='" + nameValue + "']";
        return (MmeAppServer)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-app-server".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeAppServerIterator() {
        return new ElementChildrenIterator(children, "mme-app-server");
    }

    /**
     * Adds list entry "mmeAppServer", using an existing object.
     * @param mmeAppServer The object to add.
     * @return The added child.
     */
    public MmeAppServer addMmeAppServer(MmeAppServer mmeAppServer)
            throws JNCException {
        insertChild(mmeAppServer, childrenNames());
        return mmeAppServer;
    }

    /**
     * Adds list entry "mmeAppServer", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeAppServer addMmeAppServer(YangString nameValue)
            throws JNCException {
        MmeAppServer mmeAppServer = new MmeAppServer(nameValue);
        return addMmeAppServer(mmeAppServer);
    }

    /**
     * Adds list entry "mmeAppServer", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeAppServer addMmeAppServer(String nameValue) throws JNCException {
        MmeAppServer mmeAppServer = new MmeAppServer(nameValue);
        return addMmeAppServer(mmeAppServer);
    }

    /**
     * Adds list entry "mmeAppServer".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeAppServer addMmeAppServer() throws JNCException {
        MmeAppServer mmeAppServer = new MmeAppServer();
        insertChild(mmeAppServer, childrenNames());
        return mmeAppServer;
    }

    /**
     * Deletes list entry "mmeAppServer", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeAppServer(YangString nameValue) throws JNCException {
        String path = "mme-app-server[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeAppServer", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeAppServer(String nameValue) throws JNCException {
        String path = "mme-app-server[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for container child: "mme-ss7-profile". */

    /**
     * Adds container entry "mmeSs7Profile", using an existing object.
     * @param mmeSs7Profile The object to add.
     * @return The added child.
     */
    public MmeSs7Profile addMmeSs7Profile(MmeSs7Profile mmeSs7Profile)
            throws JNCException {
        this.mmeSs7Profile = mmeSs7Profile;
        insertChild(mmeSs7Profile, childrenNames());
        return mmeSs7Profile;
    }

    /**
     * Adds container entry "mmeSs7Profile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSs7Profile addMmeSs7Profile() throws JNCException {
        MmeSs7Profile mmeSs7Profile = new MmeSs7Profile();
        this.mmeSs7Profile = mmeSs7Profile;
        insertChild(mmeSs7Profile, childrenNames());
        return mmeSs7Profile;
    }

    /**
     * Deletes container entry "mmeSs7Profile".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeSs7Profile() throws JNCException {
        this.mmeSs7Profile = null;
        String path = "mme-ss7-profile";
        return delete(path);
    }

    /* Access methods for list child: "peer-oper". */

    /**
     * Gets list entry "peerOper", with specified keys.
     */
    public PeerOper getPeerOper() throws JNCException {
        String path = "peer-oper";
        return (PeerOper)searchOne(path);
    }

    /**
     * Iterator method for the list "peer-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator peerOperIterator() {
        return new ElementChildrenIterator(children, "peer-oper");
    }

    /**
     * Adds list entry "peerOper", using an existing object.
     * @param peerOper The object to add.
     * @return The added child.
     */
    public PeerOper addPeerOper(PeerOper peerOper) throws JNCException {
        insertChild(peerOper, childrenNames());
        return peerOper;
    }

    /**
     * Adds list entry "peerOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public PeerOper addPeerOper() throws JNCException {
        PeerOper peerOper = new PeerOper();
        insertChild(peerOper, childrenNames());
        return peerOper;
    }

    /**
     * Deletes list entry "peerOper", with specified keys.
     */
    public void deletePeerOper() throws JNCException {
        String path = "peer-oper";
        delete(path);
    }

    /* Access methods for list child: "remote-dest". */

    /**
     * Gets list entry "remoteDest", with specified keys.
     */
    public RemoteDest getRemoteDest() throws JNCException {
        String path = "remote-dest";
        return (RemoteDest)searchOne(path);
    }

    /**
     * Iterator method for the list "remote-dest".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator remoteDestIterator() {
        return new ElementChildrenIterator(children, "remote-dest");
    }

    /**
     * Adds list entry "remoteDest", using an existing object.
     * @param remoteDest The object to add.
     * @return The added child.
     */
    public RemoteDest addRemoteDest(RemoteDest remoteDest) throws JNCException {
        insertChild(remoteDest, childrenNames());
        return remoteDest;
    }

    /**
     * Adds list entry "remoteDest".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public RemoteDest addRemoteDest() throws JNCException {
        RemoteDest remoteDest = new RemoteDest();
        insertChild(remoteDest, childrenNames());
        return remoteDest;
    }

    /**
     * Deletes list entry "remoteDest", with specified keys.
     */
    public void deleteRemoteDest() throws JNCException {
        String path = "remote-dest";
        delete(path);
    }

    /* Access methods for list child: "remote-subsystem". */

    /**
     * Gets list entry "remoteSubsystem", with specified keys.
     */
    public RemoteSubsystem getRemoteSubsystem() throws JNCException {
        String path = "remote-subsystem";
        return (RemoteSubsystem)searchOne(path);
    }

    /**
     * Iterator method for the list "remote-subsystem".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator remoteSubsystemIterator() {
        return new ElementChildrenIterator(children, "remote-subsystem");
    }

    /**
     * Adds list entry "remoteSubsystem", using an existing object.
     * @param remoteSubsystem The object to add.
     * @return The added child.
     */
    public RemoteSubsystem addRemoteSubsystem(RemoteSubsystem remoteSubsystem)
            throws JNCException {
        insertChild(remoteSubsystem, childrenNames());
        return remoteSubsystem;
    }

    /**
     * Adds list entry "remoteSubsystem".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public RemoteSubsystem addRemoteSubsystem() throws JNCException {
        RemoteSubsystem remoteSubsystem = new RemoteSubsystem();
        insertChild(remoteSubsystem, childrenNames());
        return remoteSubsystem;
    }

    /**
     * Deletes list entry "remoteSubsystem", with specified keys.
     */
    public void deleteRemoteSubsystem() throws JNCException {
        String path = "remote-subsystem";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeTcapProfile) mmeTcapProfile = (MmeTcapProfile)child;
        else if (child instanceof MmeSccpProfile) mmeSccpProfile = (MmeSccpProfile)child;
        else if (child instanceof MmeSs7Profile) mmeSs7Profile = (MmeSs7Profile)child;
    }

}
