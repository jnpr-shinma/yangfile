/* 
 * @(#)MmeGdIf.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gd;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gd/mme-gd-if"
 * <p>
 * See line 32 in
 * sgsnScConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeGdIf extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeGdIf object.
     */
    public MmeGdIf() {
        super(Epc.NAMESPACE, "mme-gd-if");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeGdIf clone() {
        return (MmeGdIf)cloneContent(new MmeGdIf());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeGdIf cloneShallow() {
        return (MmeGdIf)cloneShallowContent(new MmeGdIf());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "sms-fraud-counter-measures",
            "sms-data-retention-timer",
            "cp-response-timer",
            "cp-response-retry",
            "rp-response-timer",
            "iwm-sc-response-timer",
            "mt-teleservice-isd-ack",
        };
    }

    /* Access methods for optional leaf child: "sms-fraud-counter-measures". */

    /**
     * Gets the value for child leaf "sms-fraud-counter-measures".
     * @return The value of the leaf.
     */
    public YangEnumeration getSmsFraudCounterMeasuresValue()
            throws JNCException {
        YangEnumeration smsFraudCounterMeasures = (YangEnumeration)getValue("sms-fraud-counter-measures");
        if (smsFraudCounterMeasures == null) {
            smsFraudCounterMeasures = new YangEnumeration("disable", new String[] {  // default
                "disable",
                "mo-only",
                "mt-only",
                "both-mo-mt",
            });
        }
        return smsFraudCounterMeasures;
    }

    /**
     * Sets the value for child leaf "sms-fraud-counter-measures",
     * using instance of generated typedef class.
     * @param smsFraudCounterMeasuresValue The value to set.
     * @param smsFraudCounterMeasuresValue used during instantiation.
     */
    public void setSmsFraudCounterMeasuresValue(YangEnumeration smsFraudCounterMeasuresValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sms-fraud-counter-measures",
            smsFraudCounterMeasuresValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sms-fraud-counter-measures",
     * using a String value.
     * @param smsFraudCounterMeasuresValue used during instantiation.
     */
    public void setSmsFraudCounterMeasuresValue(String smsFraudCounterMeasuresValue)
            throws JNCException {
        setSmsFraudCounterMeasuresValue(new YangEnumeration(smsFraudCounterMeasuresValue, new String[] {
             "disable",
             "mo-only",
             "mt-only",
             "both-mo-mt",
        }));
    }

    /**
     * Unsets the value for child leaf "sms-fraud-counter-measures".
     */
    public void unsetSmsFraudCounterMeasuresValue() throws JNCException {
        delete("sms-fraud-counter-measures");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sms-fraud-counter-measures" leaf will not have a value.
     */
    public void addSmsFraudCounterMeasures() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sms-fraud-counter-measures",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sms-fraud-counter-measures" with operation "replace".
     */
    public void markSmsFraudCounterMeasuresReplace() throws JNCException {
        markLeafReplace("smsFraudCounterMeasures");
    }

    /**
     * Marks the leaf "sms-fraud-counter-measures" with operation "merge".
     */
    public void markSmsFraudCounterMeasuresMerge() throws JNCException {
        markLeafMerge("smsFraudCounterMeasures");
    }

    /**
     * Marks the leaf "sms-fraud-counter-measures" with operation "create".
     */
    public void markSmsFraudCounterMeasuresCreate() throws JNCException {
        markLeafCreate("smsFraudCounterMeasures");
    }

    /**
     * Marks the leaf "sms-fraud-counter-measures" with operation "delete".
     */
    public void markSmsFraudCounterMeasuresDelete() throws JNCException {
        markLeafDelete("smsFraudCounterMeasures");
    }

    /* Access methods for optional leaf child: "sms-data-retention-timer". */

    /**
     * Gets the value for child leaf "sms-data-retention-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getSmsDataRetentionTimerValue() throws JNCException {
        YangUInt8 smsDataRetentionTimer = (YangUInt8)getValue("sms-data-retention-timer");
        if (smsDataRetentionTimer == null) {
            smsDataRetentionTimer = new YangUInt8("5");  // default
        }
        return smsDataRetentionTimer;
    }

    /**
     * Sets the value for child leaf "sms-data-retention-timer",
     * using instance of generated typedef class.
     * @param smsDataRetentionTimerValue The value to set.
     * @param smsDataRetentionTimerValue used during instantiation.
     */
    public void setSmsDataRetentionTimerValue(YangUInt8 smsDataRetentionTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sms-data-retention-timer",
            smsDataRetentionTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sms-data-retention-timer",
     * using Java primitive values.
     * @param smsDataRetentionTimerValue used during instantiation.
     */
    public void setSmsDataRetentionTimerValue(short smsDataRetentionTimerValue)
            throws JNCException {
        setSmsDataRetentionTimerValue(new YangUInt8(smsDataRetentionTimerValue));
    }

    /**
     * Sets the value for child leaf "sms-data-retention-timer",
     * using a String value.
     * @param smsDataRetentionTimerValue used during instantiation.
     */
    public void setSmsDataRetentionTimerValue(String smsDataRetentionTimerValue)
            throws JNCException {
        setSmsDataRetentionTimerValue(new YangUInt8(smsDataRetentionTimerValue));
    }

    /**
     * Unsets the value for child leaf "sms-data-retention-timer".
     */
    public void unsetSmsDataRetentionTimerValue() throws JNCException {
        delete("sms-data-retention-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sms-data-retention-timer" leaf will not have a value.
     */
    public void addSmsDataRetentionTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sms-data-retention-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sms-data-retention-timer" with operation "replace".
     */
    public void markSmsDataRetentionTimerReplace() throws JNCException {
        markLeafReplace("smsDataRetentionTimer");
    }

    /**
     * Marks the leaf "sms-data-retention-timer" with operation "merge".
     */
    public void markSmsDataRetentionTimerMerge() throws JNCException {
        markLeafMerge("smsDataRetentionTimer");
    }

    /**
     * Marks the leaf "sms-data-retention-timer" with operation "create".
     */
    public void markSmsDataRetentionTimerCreate() throws JNCException {
        markLeafCreate("smsDataRetentionTimer");
    }

    /**
     * Marks the leaf "sms-data-retention-timer" with operation "delete".
     */
    public void markSmsDataRetentionTimerDelete() throws JNCException {
        markLeafDelete("smsDataRetentionTimer");
    }

    /* Access methods for optional leaf child: "cp-response-timer". */

    /**
     * Gets the value for child leaf "cp-response-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getCpResponseTimerValue() throws JNCException {
        YangUInt8 cpResponseTimer = (YangUInt8)getValue("cp-response-timer");
        if (cpResponseTimer == null) {
            cpResponseTimer = new YangUInt8("20");  // default
        }
        return cpResponseTimer;
    }

    /**
     * Sets the value for child leaf "cp-response-timer",
     * using instance of generated typedef class.
     * @param cpResponseTimerValue The value to set.
     * @param cpResponseTimerValue used during instantiation.
     */
    public void setCpResponseTimerValue(YangUInt8 cpResponseTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cp-response-timer",
            cpResponseTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cp-response-timer",
     * using Java primitive values.
     * @param cpResponseTimerValue used during instantiation.
     */
    public void setCpResponseTimerValue(short cpResponseTimerValue)
            throws JNCException {
        setCpResponseTimerValue(new YangUInt8(cpResponseTimerValue));
    }

    /**
     * Sets the value for child leaf "cp-response-timer",
     * using a String value.
     * @param cpResponseTimerValue used during instantiation.
     */
    public void setCpResponseTimerValue(String cpResponseTimerValue)
            throws JNCException {
        setCpResponseTimerValue(new YangUInt8(cpResponseTimerValue));
    }

    /**
     * Unsets the value for child leaf "cp-response-timer".
     */
    public void unsetCpResponseTimerValue() throws JNCException {
        delete("cp-response-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cp-response-timer" leaf will not have a value.
     */
    public void addCpResponseTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cp-response-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cp-response-timer" with operation "replace".
     */
    public void markCpResponseTimerReplace() throws JNCException {
        markLeafReplace("cpResponseTimer");
    }

    /**
     * Marks the leaf "cp-response-timer" with operation "merge".
     */
    public void markCpResponseTimerMerge() throws JNCException {
        markLeafMerge("cpResponseTimer");
    }

    /**
     * Marks the leaf "cp-response-timer" with operation "create".
     */
    public void markCpResponseTimerCreate() throws JNCException {
        markLeafCreate("cpResponseTimer");
    }

    /**
     * Marks the leaf "cp-response-timer" with operation "delete".
     */
    public void markCpResponseTimerDelete() throws JNCException {
        markLeafDelete("cpResponseTimer");
    }

    /* Access methods for optional leaf child: "cp-response-retry". */

    /**
     * Gets the value for child leaf "cp-response-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getCpResponseRetryValue() throws JNCException {
        return (YangUInt8)getValue("cp-response-retry");
    }

    /**
     * Sets the value for child leaf "cp-response-retry",
     * using instance of generated typedef class.
     * @param cpResponseRetryValue The value to set.
     * @param cpResponseRetryValue used during instantiation.
     */
    public void setCpResponseRetryValue(YangUInt8 cpResponseRetryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cp-response-retry",
            cpResponseRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cp-response-retry",
     * using Java primitive values.
     * @param cpResponseRetryValue used during instantiation.
     */
    public void setCpResponseRetryValue(short cpResponseRetryValue)
            throws JNCException {
        setCpResponseRetryValue(new YangUInt8(cpResponseRetryValue));
    }

    /**
     * Sets the value for child leaf "cp-response-retry",
     * using a String value.
     * @param cpResponseRetryValue used during instantiation.
     */
    public void setCpResponseRetryValue(String cpResponseRetryValue)
            throws JNCException {
        setCpResponseRetryValue(new YangUInt8(cpResponseRetryValue));
    }

    /**
     * Unsets the value for child leaf "cp-response-retry".
     */
    public void unsetCpResponseRetryValue() throws JNCException {
        delete("cp-response-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cp-response-retry" leaf will not have a value.
     */
    public void addCpResponseRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cp-response-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cp-response-retry" with operation "replace".
     */
    public void markCpResponseRetryReplace() throws JNCException {
        markLeafReplace("cpResponseRetry");
    }

    /**
     * Marks the leaf "cp-response-retry" with operation "merge".
     */
    public void markCpResponseRetryMerge() throws JNCException {
        markLeafMerge("cpResponseRetry");
    }

    /**
     * Marks the leaf "cp-response-retry" with operation "create".
     */
    public void markCpResponseRetryCreate() throws JNCException {
        markLeafCreate("cpResponseRetry");
    }

    /**
     * Marks the leaf "cp-response-retry" with operation "delete".
     */
    public void markCpResponseRetryDelete() throws JNCException {
        markLeafDelete("cpResponseRetry");
    }

    /* Access methods for optional leaf child: "rp-response-timer". */

    /**
     * Gets the value for child leaf "rp-response-timer".
     * @return The value of the leaf.
     */
    public YangUInt16 getRpResponseTimerValue() throws JNCException {
        YangUInt16 rpResponseTimer = (YangUInt16)getValue("rp-response-timer");
        if (rpResponseTimer == null) {
            rpResponseTimer = new YangUInt16("78");  // default
        }
        return rpResponseTimer;
    }

    /**
     * Sets the value for child leaf "rp-response-timer",
     * using instance of generated typedef class.
     * @param rpResponseTimerValue The value to set.
     * @param rpResponseTimerValue used during instantiation.
     */
    public void setRpResponseTimerValue(YangUInt16 rpResponseTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rp-response-timer",
            rpResponseTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rp-response-timer",
     * using Java primitive values.
     * @param rpResponseTimerValue used during instantiation.
     */
    public void setRpResponseTimerValue(int rpResponseTimerValue)
            throws JNCException {
        setRpResponseTimerValue(new YangUInt16(rpResponseTimerValue));
    }

    /**
     * Sets the value for child leaf "rp-response-timer",
     * using a String value.
     * @param rpResponseTimerValue used during instantiation.
     */
    public void setRpResponseTimerValue(String rpResponseTimerValue)
            throws JNCException {
        setRpResponseTimerValue(new YangUInt16(rpResponseTimerValue));
    }

    /**
     * Unsets the value for child leaf "rp-response-timer".
     */
    public void unsetRpResponseTimerValue() throws JNCException {
        delete("rp-response-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rp-response-timer" leaf will not have a value.
     */
    public void addRpResponseTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rp-response-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rp-response-timer" with operation "replace".
     */
    public void markRpResponseTimerReplace() throws JNCException {
        markLeafReplace("rpResponseTimer");
    }

    /**
     * Marks the leaf "rp-response-timer" with operation "merge".
     */
    public void markRpResponseTimerMerge() throws JNCException {
        markLeafMerge("rpResponseTimer");
    }

    /**
     * Marks the leaf "rp-response-timer" with operation "create".
     */
    public void markRpResponseTimerCreate() throws JNCException {
        markLeafCreate("rpResponseTimer");
    }

    /**
     * Marks the leaf "rp-response-timer" with operation "delete".
     */
    public void markRpResponseTimerDelete() throws JNCException {
        markLeafDelete("rpResponseTimer");
    }

    /* Access methods for optional leaf child: "iwm-sc-response-timer". */

    /**
     * Gets the value for child leaf "iwm-sc-response-timer".
     * @return The value of the leaf.
     */
    public YangUInt16 getIwmScResponseTimerValue() throws JNCException {
        YangUInt16 iwmScResponseTimer = (YangUInt16)getValue("iwm-sc-response-timer");
        if (iwmScResponseTimer == null) {
            iwmScResponseTimer = new YangUInt16("5");  // default
        }
        return iwmScResponseTimer;
    }

    /**
     * Sets the value for child leaf "iwm-sc-response-timer",
     * using instance of generated typedef class.
     * @param iwmScResponseTimerValue The value to set.
     * @param iwmScResponseTimerValue used during instantiation.
     */
    public void setIwmScResponseTimerValue(YangUInt16 iwmScResponseTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iwm-sc-response-timer",
            iwmScResponseTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "iwm-sc-response-timer",
     * using Java primitive values.
     * @param iwmScResponseTimerValue used during instantiation.
     */
    public void setIwmScResponseTimerValue(int iwmScResponseTimerValue)
            throws JNCException {
        setIwmScResponseTimerValue(new YangUInt16(iwmScResponseTimerValue));
    }

    /**
     * Sets the value for child leaf "iwm-sc-response-timer",
     * using a String value.
     * @param iwmScResponseTimerValue used during instantiation.
     */
    public void setIwmScResponseTimerValue(String iwmScResponseTimerValue)
            throws JNCException {
        setIwmScResponseTimerValue(new YangUInt16(iwmScResponseTimerValue));
    }

    /**
     * Unsets the value for child leaf "iwm-sc-response-timer".
     */
    public void unsetIwmScResponseTimerValue() throws JNCException {
        delete("iwm-sc-response-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "iwm-sc-response-timer" leaf will not have a value.
     */
    public void addIwmScResponseTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iwm-sc-response-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "iwm-sc-response-timer" with operation "replace".
     */
    public void markIwmScResponseTimerReplace() throws JNCException {
        markLeafReplace("iwmScResponseTimer");
    }

    /**
     * Marks the leaf "iwm-sc-response-timer" with operation "merge".
     */
    public void markIwmScResponseTimerMerge() throws JNCException {
        markLeafMerge("iwmScResponseTimer");
    }

    /**
     * Marks the leaf "iwm-sc-response-timer" with operation "create".
     */
    public void markIwmScResponseTimerCreate() throws JNCException {
        markLeafCreate("iwmScResponseTimer");
    }

    /**
     * Marks the leaf "iwm-sc-response-timer" with operation "delete".
     */
    public void markIwmScResponseTimerDelete() throws JNCException {
        markLeafDelete("iwmScResponseTimer");
    }

    /* Access methods for optional leaf child: "mt-teleservice-isd-ack". */

    /**
     * Gets the value for child leaf "mt-teleservice-isd-ack".
     * @return The value of the leaf.
     */
    public YangEnumeration getMtTeleserviceIsdAckValue() throws JNCException {
        YangEnumeration mtTeleserviceIsdAck = (YangEnumeration)getValue("mt-teleservice-isd-ack");
        if (mtTeleserviceIsdAck == null) {
            mtTeleserviceIsdAck = new YangEnumeration("per-sgsn", new String[] {  // default
                "per-sgsn",
                "per-mobile",
            });
        }
        return mtTeleserviceIsdAck;
    }

    /**
     * Sets the value for child leaf "mt-teleservice-isd-ack",
     * using instance of generated typedef class.
     * @param mtTeleserviceIsdAckValue The value to set.
     * @param mtTeleserviceIsdAckValue used during instantiation.
     */
    public void setMtTeleserviceIsdAckValue(YangEnumeration mtTeleserviceIsdAckValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mt-teleservice-isd-ack",
            mtTeleserviceIsdAckValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mt-teleservice-isd-ack",
     * using a String value.
     * @param mtTeleserviceIsdAckValue used during instantiation.
     */
    public void setMtTeleserviceIsdAckValue(String mtTeleserviceIsdAckValue)
            throws JNCException {
        setMtTeleserviceIsdAckValue(new YangEnumeration(mtTeleserviceIsdAckValue, new String[] {
             "per-sgsn",
             "per-mobile",
        }));
    }

    /**
     * Unsets the value for child leaf "mt-teleservice-isd-ack".
     */
    public void unsetMtTeleserviceIsdAckValue() throws JNCException {
        delete("mt-teleservice-isd-ack");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mt-teleservice-isd-ack" leaf will not have a value.
     */
    public void addMtTeleserviceIsdAck() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mt-teleservice-isd-ack",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mt-teleservice-isd-ack" with operation "replace".
     */
    public void markMtTeleserviceIsdAckReplace() throws JNCException {
        markLeafReplace("mtTeleserviceIsdAck");
    }

    /**
     * Marks the leaf "mt-teleservice-isd-ack" with operation "merge".
     */
    public void markMtTeleserviceIsdAckMerge() throws JNCException {
        markLeafMerge("mtTeleserviceIsdAck");
    }

    /**
     * Marks the leaf "mt-teleservice-isd-ack" with operation "create".
     */
    public void markMtTeleserviceIsdAckCreate() throws JNCException {
        markLeafCreate("mtTeleserviceIsdAck");
    }

    /**
     * Marks the leaf "mt-teleservice-isd-ack" with operation "delete".
     */
    public void markMtTeleserviceIsdAckDelete() throws JNCException {
        markLeafDelete("mtTeleserviceIsdAck");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
