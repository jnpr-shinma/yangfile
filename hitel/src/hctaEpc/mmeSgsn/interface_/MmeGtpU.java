/* 
 * @(#)MmeGtpU.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import Unit;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/mme-gtp-u"
 * <p>
 * See line 397 in
 * sdConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeGtpU extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeGtpU object.
     */
    public MmeGtpU() {
        super(Epc.NAMESPACE, "mme-gtp-u");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeGtpU clone() {
        return (MmeGtpU)cloneContent(new MmeGtpU());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeGtpU cloneShallow() {
        return (MmeGtpU)cloneShallowContent(new MmeGtpU());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "iu-data-routing-instance",
            "gn-data-routing-instance",
            "unit",
        };
    }

    /* Access methods for optional leaf child: "iu-data-routing-instance". */

    /**
     * Gets the value for child leaf "iu-data-routing-instance".
     * @return The value of the leaf.
     */
    public YangString getIuDataRoutingInstanceValue() throws JNCException {
        return (YangString)getValue("iu-data-routing-instance");
    }

    /**
     * Sets the value for child leaf "iu-data-routing-instance",
     * using instance of generated typedef class.
     * @param iuDataRoutingInstanceValue The value to set.
     * @param iuDataRoutingInstanceValue used during instantiation.
     */
    public void setIuDataRoutingInstanceValue(YangString iuDataRoutingInstanceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iu-data-routing-instance",
            iuDataRoutingInstanceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "iu-data-routing-instance",
     * using a String value.
     * @param iuDataRoutingInstanceValue used during instantiation.
     */
    public void setIuDataRoutingInstanceValue(String iuDataRoutingInstanceValue)
            throws JNCException {
        setIuDataRoutingInstanceValue(new YangString(iuDataRoutingInstanceValue));
    }

    /**
     * Unsets the value for child leaf "iu-data-routing-instance".
     */
    public void unsetIuDataRoutingInstanceValue() throws JNCException {
        delete("iu-data-routing-instance");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "iu-data-routing-instance" leaf will not have a value.
     */
    public void addIuDataRoutingInstance() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iu-data-routing-instance",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "iu-data-routing-instance" with operation "replace".
     */
    public void markIuDataRoutingInstanceReplace() throws JNCException {
        markLeafReplace("iuDataRoutingInstance");
    }

    /**
     * Marks the leaf "iu-data-routing-instance" with operation "merge".
     */
    public void markIuDataRoutingInstanceMerge() throws JNCException {
        markLeafMerge("iuDataRoutingInstance");
    }

    /**
     * Marks the leaf "iu-data-routing-instance" with operation "create".
     */
    public void markIuDataRoutingInstanceCreate() throws JNCException {
        markLeafCreate("iuDataRoutingInstance");
    }

    /**
     * Marks the leaf "iu-data-routing-instance" with operation "delete".
     */
    public void markIuDataRoutingInstanceDelete() throws JNCException {
        markLeafDelete("iuDataRoutingInstance");
    }

    /* Access methods for optional leaf child: "gn-data-routing-instance". */

    /**
     * Gets the value for child leaf "gn-data-routing-instance".
     * @return The value of the leaf.
     */
    public YangString getGnDataRoutingInstanceValue() throws JNCException {
        return (YangString)getValue("gn-data-routing-instance");
    }

    /**
     * Sets the value for child leaf "gn-data-routing-instance",
     * using instance of generated typedef class.
     * @param gnDataRoutingInstanceValue The value to set.
     * @param gnDataRoutingInstanceValue used during instantiation.
     */
    public void setGnDataRoutingInstanceValue(YangString gnDataRoutingInstanceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gn-data-routing-instance",
            gnDataRoutingInstanceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gn-data-routing-instance",
     * using a String value.
     * @param gnDataRoutingInstanceValue used during instantiation.
     */
    public void setGnDataRoutingInstanceValue(String gnDataRoutingInstanceValue)
            throws JNCException {
        setGnDataRoutingInstanceValue(new YangString(gnDataRoutingInstanceValue));
    }

    /**
     * Unsets the value for child leaf "gn-data-routing-instance".
     */
    public void unsetGnDataRoutingInstanceValue() throws JNCException {
        delete("gn-data-routing-instance");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gn-data-routing-instance" leaf will not have a value.
     */
    public void addGnDataRoutingInstance() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gn-data-routing-instance",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gn-data-routing-instance" with operation "replace".
     */
    public void markGnDataRoutingInstanceReplace() throws JNCException {
        markLeafReplace("gnDataRoutingInstance");
    }

    /**
     * Marks the leaf "gn-data-routing-instance" with operation "merge".
     */
    public void markGnDataRoutingInstanceMerge() throws JNCException {
        markLeafMerge("gnDataRoutingInstance");
    }

    /**
     * Marks the leaf "gn-data-routing-instance" with operation "create".
     */
    public void markGnDataRoutingInstanceCreate() throws JNCException {
        markLeafCreate("gnDataRoutingInstance");
    }

    /**
     * Marks the leaf "gn-data-routing-instance" with operation "delete".
     */
    public void markGnDataRoutingInstanceDelete() throws JNCException {
        markLeafDelete("gnDataRoutingInstance");
    }

    /* Access methods for list child: "unit". */

    /**
     * Gets list entry "unit", with specified keys.
     * @param unitIdValue Key argument of child.
     */
    public Unit getUnit(YangUInt16 unitIdValue) throws JNCException {
        String path = "unit[unitId='" + unitIdValue + "']";
        return (Unit)searchOne(path);
    }

    /**
     * Gets list entry "unit", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     */
    public Unit getUnit(String unitIdValue) throws JNCException {
        String path = "unit[unitId='" + unitIdValue + "']";
        return (Unit)searchOne(path);
    }

    /**
     * Iterator method for the list "unit".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator unitIterator() {
        return new ElementChildrenIterator(children, "unit");
    }

    /**
     * Adds list entry "unit", using an existing object.
     * @param unit The object to add.
     * @return The added child.
     */
    public Unit addUnit(Unit unit) throws JNCException {
        insertChild(unit, childrenNames());
        return unit;
    }

    /**
     * Adds list entry "unit", with specified keys.
     * @param unitIdValue Key argument of child.
     * @return The added child.
     */
    public Unit addUnit(YangUInt16 unitIdValue) throws JNCException {
        Unit unit = new Unit(unitIdValue);
        return addUnit(unit);
    }

    /**
     * Adds list entry "unit", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     * @return The added child.
     */
    public Unit addUnit(String unitIdValue) throws JNCException {
        Unit unit = new Unit(unitIdValue);
        return addUnit(unit);
    }

    /**
     * Adds list entry "unit".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Unit addUnit() throws JNCException {
        Unit unit = new Unit();
        insertChild(unit, childrenNames());
        return unit;
    }

    /**
     * Deletes list entry "unit", with specified keys.
     * @param unitIdValue Key argument of child.
     */
    public void deleteUnit(YangUInt16 unitIdValue) throws JNCException {
        String path = "unit[unitId='" + unitIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "unit", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     */
    public void deleteUnit(String unitIdValue) throws JNCException {
        String path = "unit[unitId='" + unitIdValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
