/* 
 * @(#)Iu.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;

import Element;

import ElementChildrenIterator;

import Epc;

import FgwRncOper;

import JNCException;

import MmeFgwRnc;

import MmeIpspInstance;

import MmeIuDestPeerMap;

import MmeIuIf;

import MmeIuM3ua;

import MmeIuPeer;

import MmeRnc;

import MmeRncOper;

import NodeSet;

import PeerOper;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/iu"
 * <p>
 * See line 42 in
 * rncConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Iu extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-iu-if".
     */
    public MmeIuIf mmeIuIf = null;

    /**
     * Constructor for an empty Iu object.
     */
    public Iu() {
        super(Epc.NAMESPACE, "iu");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Iu clone() {
        return (Iu)cloneContent(new Iu());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Iu cloneShallow() {
        return (Iu)cloneShallowContent(new Iu());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-iu-if",
            "mme-rnc",
            "mme-fgw-rnc",
            "mme-iu-m3ua",
            "mme-iu-peer",
            "mme-iu-dest-peer-map",
            "mme-ipsp-instance",
            "mme-rnc-oper",
            "fgw-rnc-oper",
            "peer-oper",
        };
    }

    /* Access methods for container child: "mme-iu-if". */

    /**
     * Adds container entry "mmeIuIf", using an existing object.
     * @param mmeIuIf The object to add.
     * @return The added child.
     */
    public MmeIuIf addMmeIuIf(MmeIuIf mmeIuIf) throws JNCException {
        this.mmeIuIf = mmeIuIf;
        insertChild(mmeIuIf, childrenNames());
        return mmeIuIf;
    }

    /**
     * Adds container entry "mmeIuIf".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeIuIf addMmeIuIf() throws JNCException {
        MmeIuIf mmeIuIf = new MmeIuIf();
        this.mmeIuIf = mmeIuIf;
        insertChild(mmeIuIf, childrenNames());
        return mmeIuIf;
    }

    /**
     * Deletes container entry "mmeIuIf".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeIuIf() throws JNCException {
        this.mmeIuIf = null;
        String path = "mme-iu-if";
        return delete(path);
    }

    /* Access methods for list child: "mme-rnc". */

    /**
     * Gets list entry "mmeRnc", with specified keys.
     * @param rncIdValue Key argument of child.
     */
    public MmeRnc getMmeRnc(YangUInt16 rncIdValue) throws JNCException {
        String path = "mme-rnc[rncId='" + rncIdValue + "']";
        return (MmeRnc)searchOne(path);
    }

    /**
     * Gets list entry "mmeRnc", with specified keys.
     * The keys are specified as strings.
     * @param rncIdValue Key argument of child.
     */
    public MmeRnc getMmeRnc(String rncIdValue) throws JNCException {
        String path = "mme-rnc[rncId='" + rncIdValue + "']";
        return (MmeRnc)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-rnc".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeRncIterator() {
        return new ElementChildrenIterator(children, "mme-rnc");
    }

    /**
     * Adds list entry "mmeRnc", using an existing object.
     * @param mmeRnc The object to add.
     * @return The added child.
     */
    public MmeRnc addMmeRnc(MmeRnc mmeRnc) throws JNCException {
        insertChild(mmeRnc, childrenNames());
        return mmeRnc;
    }

    /**
     * Adds list entry "mmeRnc", with specified keys.
     * @param rncIdValue Key argument of child.
     * @return The added child.
     */
    public MmeRnc addMmeRnc(YangUInt16 rncIdValue) throws JNCException {
        MmeRnc mmeRnc = new MmeRnc(rncIdValue);
        return addMmeRnc(mmeRnc);
    }

    /**
     * Adds list entry "mmeRnc", with specified keys.
     * The keys are specified as strings.
     * @param rncIdValue Key argument of child.
     * @return The added child.
     */
    public MmeRnc addMmeRnc(String rncIdValue) throws JNCException {
        MmeRnc mmeRnc = new MmeRnc(rncIdValue);
        return addMmeRnc(mmeRnc);
    }

    /**
     * Adds list entry "mmeRnc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeRnc addMmeRnc() throws JNCException {
        MmeRnc mmeRnc = new MmeRnc();
        insertChild(mmeRnc, childrenNames());
        return mmeRnc;
    }

    /**
     * Deletes list entry "mmeRnc", with specified keys.
     * @param rncIdValue Key argument of child.
     */
    public void deleteMmeRnc(YangUInt16 rncIdValue) throws JNCException {
        String path = "mme-rnc[rncId='" + rncIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeRnc", with specified keys.
     * The keys are specified as strings.
     * @param rncIdValue Key argument of child.
     */
    public void deleteMmeRnc(String rncIdValue) throws JNCException {
        String path = "mme-rnc[rncId='" + rncIdValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-fgw-rnc". */

    /**
     * Gets list entry "mmeFgwRnc", with specified keys.
     * @param rncIdValue Key argument of child.
     */
    public MmeFgwRnc getMmeFgwRnc(YangUInt16 rncIdValue) throws JNCException {
        String path = "mme-fgw-rnc[rncId='" + rncIdValue + "']";
        return (MmeFgwRnc)searchOne(path);
    }

    /**
     * Gets list entry "mmeFgwRnc", with specified keys.
     * The keys are specified as strings.
     * @param rncIdValue Key argument of child.
     */
    public MmeFgwRnc getMmeFgwRnc(String rncIdValue) throws JNCException {
        String path = "mme-fgw-rnc[rncId='" + rncIdValue + "']";
        return (MmeFgwRnc)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-fgw-rnc".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeFgwRncIterator() {
        return new ElementChildrenIterator(children, "mme-fgw-rnc");
    }

    /**
     * Adds list entry "mmeFgwRnc", using an existing object.
     * @param mmeFgwRnc The object to add.
     * @return The added child.
     */
    public MmeFgwRnc addMmeFgwRnc(MmeFgwRnc mmeFgwRnc) throws JNCException {
        insertChild(mmeFgwRnc, childrenNames());
        return mmeFgwRnc;
    }

    /**
     * Adds list entry "mmeFgwRnc", with specified keys.
     * @param rncIdValue Key argument of child.
     * @return The added child.
     */
    public MmeFgwRnc addMmeFgwRnc(YangUInt16 rncIdValue) throws JNCException {
        MmeFgwRnc mmeFgwRnc = new MmeFgwRnc(rncIdValue);
        return addMmeFgwRnc(mmeFgwRnc);
    }

    /**
     * Adds list entry "mmeFgwRnc", with specified keys.
     * The keys are specified as strings.
     * @param rncIdValue Key argument of child.
     * @return The added child.
     */
    public MmeFgwRnc addMmeFgwRnc(String rncIdValue) throws JNCException {
        MmeFgwRnc mmeFgwRnc = new MmeFgwRnc(rncIdValue);
        return addMmeFgwRnc(mmeFgwRnc);
    }

    /**
     * Adds list entry "mmeFgwRnc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeFgwRnc addMmeFgwRnc() throws JNCException {
        MmeFgwRnc mmeFgwRnc = new MmeFgwRnc();
        insertChild(mmeFgwRnc, childrenNames());
        return mmeFgwRnc;
    }

    /**
     * Deletes list entry "mmeFgwRnc", with specified keys.
     * @param rncIdValue Key argument of child.
     */
    public void deleteMmeFgwRnc(YangUInt16 rncIdValue) throws JNCException {
        String path = "mme-fgw-rnc[rncId='" + rncIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeFgwRnc", with specified keys.
     * The keys are specified as strings.
     * @param rncIdValue Key argument of child.
     */
    public void deleteMmeFgwRnc(String rncIdValue) throws JNCException {
        String path = "mme-fgw-rnc[rncId='" + rncIdValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-iu-m3ua". */

    /**
     * Gets list entry "mmeIuM3ua", with specified keys.
     * @param localPointCodeValue Key argument of child.
     */
    public MmeIuM3ua getMmeIuM3ua(YangString localPointCodeValue)
            throws JNCException {
        String path = "mme-iu-m3ua[localPointCode='" + localPointCodeValue + "']";
        return (MmeIuM3ua)searchOne(path);
    }

    /**
     * Gets list entry "mmeIuM3ua", with specified keys.
     * The keys are specified as strings.
     * @param localPointCodeValue Key argument of child.
     */
    public MmeIuM3ua getMmeIuM3ua(String localPointCodeValue)
            throws JNCException {
        String path = "mme-iu-m3ua[localPointCode='" + localPointCodeValue + "']";
        return (MmeIuM3ua)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-iu-m3ua".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeIuM3uaIterator() {
        return new ElementChildrenIterator(children, "mme-iu-m3ua");
    }

    /**
     * Adds list entry "mmeIuM3ua", using an existing object.
     * @param mmeIuM3ua The object to add.
     * @return The added child.
     */
    public MmeIuM3ua addMmeIuM3ua(MmeIuM3ua mmeIuM3ua) throws JNCException {
        insertChild(mmeIuM3ua, childrenNames());
        return mmeIuM3ua;
    }

    /**
     * Adds list entry "mmeIuM3ua", with specified keys.
     * @param localPointCodeValue Key argument of child.
     * @return The added child.
     */
    public MmeIuM3ua addMmeIuM3ua(YangString localPointCodeValue)
            throws JNCException {
        MmeIuM3ua mmeIuM3ua = new MmeIuM3ua(localPointCodeValue);
        return addMmeIuM3ua(mmeIuM3ua);
    }

    /**
     * Adds list entry "mmeIuM3ua", with specified keys.
     * The keys are specified as strings.
     * @param localPointCodeValue Key argument of child.
     * @return The added child.
     */
    public MmeIuM3ua addMmeIuM3ua(String localPointCodeValue)
            throws JNCException {
        MmeIuM3ua mmeIuM3ua = new MmeIuM3ua(localPointCodeValue);
        return addMmeIuM3ua(mmeIuM3ua);
    }

    /**
     * Adds list entry "mmeIuM3ua".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeIuM3ua addMmeIuM3ua() throws JNCException {
        MmeIuM3ua mmeIuM3ua = new MmeIuM3ua();
        insertChild(mmeIuM3ua, childrenNames());
        return mmeIuM3ua;
    }

    /**
     * Deletes list entry "mmeIuM3ua", with specified keys.
     * @param localPointCodeValue Key argument of child.
     */
    public void deleteMmeIuM3ua(YangString localPointCodeValue)
            throws JNCException {
        String path = "mme-iu-m3ua[localPointCode='" + localPointCodeValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeIuM3ua", with specified keys.
     * The keys are specified as strings.
     * @param localPointCodeValue Key argument of child.
     */
    public void deleteMmeIuM3ua(String localPointCodeValue) throws JNCException {
        String path = "mme-iu-m3ua[localPointCode='" + localPointCodeValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-iu-peer". */

    /**
     * Gets list entry "mmeIuPeer", with specified keys.
     * @param iuPeerNameValue Key argument of child.
     */
    public MmeIuPeer getMmeIuPeer(YangString iuPeerNameValue)
            throws JNCException {
        String path = "mme-iu-peer[iuPeerName='" + iuPeerNameValue + "']";
        return (MmeIuPeer)searchOne(path);
    }

    /**
     * Gets list entry "mmeIuPeer", with specified keys.
     * The keys are specified as strings.
     * @param iuPeerNameValue Key argument of child.
     */
    public MmeIuPeer getMmeIuPeer(String iuPeerNameValue) throws JNCException {
        String path = "mme-iu-peer[iuPeerName='" + iuPeerNameValue + "']";
        return (MmeIuPeer)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-iu-peer".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeIuPeerIterator() {
        return new ElementChildrenIterator(children, "mme-iu-peer");
    }

    /**
     * Adds list entry "mmeIuPeer", using an existing object.
     * @param mmeIuPeer The object to add.
     * @return The added child.
     */
    public MmeIuPeer addMmeIuPeer(MmeIuPeer mmeIuPeer) throws JNCException {
        insertChild(mmeIuPeer, childrenNames());
        return mmeIuPeer;
    }

    /**
     * Adds list entry "mmeIuPeer", with specified keys.
     * @param iuPeerNameValue Key argument of child.
     * @return The added child.
     */
    public MmeIuPeer addMmeIuPeer(YangString iuPeerNameValue)
            throws JNCException {
        MmeIuPeer mmeIuPeer = new MmeIuPeer(iuPeerNameValue);
        return addMmeIuPeer(mmeIuPeer);
    }

    /**
     * Adds list entry "mmeIuPeer", with specified keys.
     * The keys are specified as strings.
     * @param iuPeerNameValue Key argument of child.
     * @return The added child.
     */
    public MmeIuPeer addMmeIuPeer(String iuPeerNameValue) throws JNCException {
        MmeIuPeer mmeIuPeer = new MmeIuPeer(iuPeerNameValue);
        return addMmeIuPeer(mmeIuPeer);
    }

    /**
     * Adds list entry "mmeIuPeer".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeIuPeer addMmeIuPeer() throws JNCException {
        MmeIuPeer mmeIuPeer = new MmeIuPeer();
        insertChild(mmeIuPeer, childrenNames());
        return mmeIuPeer;
    }

    /**
     * Deletes list entry "mmeIuPeer", with specified keys.
     * @param iuPeerNameValue Key argument of child.
     */
    public void deleteMmeIuPeer(YangString iuPeerNameValue) throws JNCException {
        String path = "mme-iu-peer[iuPeerName='" + iuPeerNameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeIuPeer", with specified keys.
     * The keys are specified as strings.
     * @param iuPeerNameValue Key argument of child.
     */
    public void deleteMmeIuPeer(String iuPeerNameValue) throws JNCException {
        String path = "mme-iu-peer[iuPeerName='" + iuPeerNameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-iu-dest-peer-map". */

    /**
     * Gets list entry "mmeIuDestPeerMap", with specified keys.
     * @param destinationPointCodeValue Key argument of child.
     * @param iuPeerNameValue Key argument of child.
     */
    public MmeIuDestPeerMap getMmeIuDestPeerMap(YangString destinationPointCodeValue, YangString iuPeerNameValue)
            throws JNCException {
        String path = "mme-iu-dest-peer-map[destinationPointCode='" + destinationPointCodeValue + "'][iuPeerName='" + iuPeerNameValue + "']";
        return (MmeIuDestPeerMap)searchOne(path);
    }

    /**
     * Gets list entry "mmeIuDestPeerMap", with specified keys.
     * The keys are specified as strings.
     * @param destinationPointCodeValue Key argument of child.
     * @param iuPeerNameValue Key argument of child.
     */
    public MmeIuDestPeerMap getMmeIuDestPeerMap(String destinationPointCodeValue, String iuPeerNameValue)
            throws JNCException {
        String path = "mme-iu-dest-peer-map[destinationPointCode='" + destinationPointCodeValue + "'][iuPeerName='" + iuPeerNameValue + "']";
        return (MmeIuDestPeerMap)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-iu-dest-peer-map".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeIuDestPeerMapIterator() {
        return new ElementChildrenIterator(children, "mme-iu-dest-peer-map");
    }

    /**
     * Adds list entry "mmeIuDestPeerMap", using an existing object.
     * @param mmeIuDestPeerMap The object to add.
     * @return The added child.
     */
    public MmeIuDestPeerMap addMmeIuDestPeerMap(MmeIuDestPeerMap mmeIuDestPeerMap)
            throws JNCException {
        insertChild(mmeIuDestPeerMap, childrenNames());
        return mmeIuDestPeerMap;
    }

    /**
     * Adds list entry "mmeIuDestPeerMap", with specified keys.
     * @param destinationPointCodeValue Key argument of child.
     * @param iuPeerNameValue Key argument of child.
     * @return The added child.
     */
    public MmeIuDestPeerMap addMmeIuDestPeerMap(YangString destinationPointCodeValue, YangString iuPeerNameValue)
            throws JNCException {
        MmeIuDestPeerMap mmeIuDestPeerMap = new MmeIuDestPeerMap(destinationPointCodeValue, iuPeerNameValue);
        return addMmeIuDestPeerMap(mmeIuDestPeerMap);
    }

    /**
     * Adds list entry "mmeIuDestPeerMap", with specified keys.
     * The keys are specified as strings.
     * @param destinationPointCodeValue Key argument of child.
     * @param iuPeerNameValue Key argument of child.
     * @return The added child.
     */
    public MmeIuDestPeerMap addMmeIuDestPeerMap(String destinationPointCodeValue, String iuPeerNameValue)
            throws JNCException {
        MmeIuDestPeerMap mmeIuDestPeerMap = new MmeIuDestPeerMap(destinationPointCodeValue, iuPeerNameValue);
        return addMmeIuDestPeerMap(mmeIuDestPeerMap);
    }

    /**
     * Adds list entry "mmeIuDestPeerMap".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeIuDestPeerMap addMmeIuDestPeerMap() throws JNCException {
        MmeIuDestPeerMap mmeIuDestPeerMap = new MmeIuDestPeerMap();
        insertChild(mmeIuDestPeerMap, childrenNames());
        return mmeIuDestPeerMap;
    }

    /**
     * Deletes list entry "mmeIuDestPeerMap", with specified keys.
     * @param destinationPointCodeValue Key argument of child.
     * @param iuPeerNameValue Key argument of child.
     */
    public void deleteMmeIuDestPeerMap(YangString destinationPointCodeValue, YangString iuPeerNameValue)
            throws JNCException {
        String path = "mme-iu-dest-peer-map[destinationPointCode='" + destinationPointCodeValue + "'][iuPeerName='" + iuPeerNameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeIuDestPeerMap", with specified keys.
     * The keys are specified as strings.
     * @param destinationPointCodeValue Key argument of child.
     * @param iuPeerNameValue Key argument of child.
     */
    public void deleteMmeIuDestPeerMap(String destinationPointCodeValue, String iuPeerNameValue)
            throws JNCException {
        String path = "mme-iu-dest-peer-map[destinationPointCode='" + destinationPointCodeValue + "'][iuPeerName='" + iuPeerNameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-ipsp-instance". */

    /**
     * Gets list entry "mmeIpspInstance", with specified keys.
     * @param unitIdValue Key argument of child.
     */
    public MmeIpspInstance getMmeIpspInstance(YangUInt16 unitIdValue)
            throws JNCException {
        String path = "mme-ipsp-instance[unitId='" + unitIdValue + "']";
        return (MmeIpspInstance)searchOne(path);
    }

    /**
     * Gets list entry "mmeIpspInstance", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     */
    public MmeIpspInstance getMmeIpspInstance(String unitIdValue)
            throws JNCException {
        String path = "mme-ipsp-instance[unitId='" + unitIdValue + "']";
        return (MmeIpspInstance)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-ipsp-instance".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeIpspInstanceIterator() {
        return new ElementChildrenIterator(children, "mme-ipsp-instance");
    }

    /**
     * Adds list entry "mmeIpspInstance", using an existing object.
     * @param mmeIpspInstance The object to add.
     * @return The added child.
     */
    public MmeIpspInstance addMmeIpspInstance(MmeIpspInstance mmeIpspInstance)
            throws JNCException {
        insertChild(mmeIpspInstance, childrenNames());
        return mmeIpspInstance;
    }

    /**
     * Adds list entry "mmeIpspInstance", with specified keys.
     * @param unitIdValue Key argument of child.
     * @return The added child.
     */
    public MmeIpspInstance addMmeIpspInstance(YangUInt16 unitIdValue)
            throws JNCException {
        MmeIpspInstance mmeIpspInstance = new MmeIpspInstance(unitIdValue);
        return addMmeIpspInstance(mmeIpspInstance);
    }

    /**
     * Adds list entry "mmeIpspInstance", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     * @return The added child.
     */
    public MmeIpspInstance addMmeIpspInstance(String unitIdValue)
            throws JNCException {
        MmeIpspInstance mmeIpspInstance = new MmeIpspInstance(unitIdValue);
        return addMmeIpspInstance(mmeIpspInstance);
    }

    /**
     * Adds list entry "mmeIpspInstance".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeIpspInstance addMmeIpspInstance() throws JNCException {
        MmeIpspInstance mmeIpspInstance = new MmeIpspInstance();
        insertChild(mmeIpspInstance, childrenNames());
        return mmeIpspInstance;
    }

    /**
     * Deletes list entry "mmeIpspInstance", with specified keys.
     * @param unitIdValue Key argument of child.
     */
    public void deleteMmeIpspInstance(YangUInt16 unitIdValue)
            throws JNCException {
        String path = "mme-ipsp-instance[unitId='" + unitIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeIpspInstance", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     */
    public void deleteMmeIpspInstance(String unitIdValue) throws JNCException {
        String path = "mme-ipsp-instance[unitId='" + unitIdValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-rnc-oper". */

    /**
     * Gets list entry "mmeRncOper", with specified keys.
     */
    public MmeRncOper getMmeRncOper() throws JNCException {
        String path = "mme-rnc-oper";
        return (MmeRncOper)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-rnc-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeRncOperIterator() {
        return new ElementChildrenIterator(children, "mme-rnc-oper");
    }

    /**
     * Adds list entry "mmeRncOper", using an existing object.
     * @param mmeRncOper The object to add.
     * @return The added child.
     */
    public MmeRncOper addMmeRncOper(MmeRncOper mmeRncOper) throws JNCException {
        insertChild(mmeRncOper, childrenNames());
        return mmeRncOper;
    }

    /**
     * Adds list entry "mmeRncOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeRncOper addMmeRncOper() throws JNCException {
        MmeRncOper mmeRncOper = new MmeRncOper();
        insertChild(mmeRncOper, childrenNames());
        return mmeRncOper;
    }

    /**
     * Deletes list entry "mmeRncOper", with specified keys.
     */
    public void deleteMmeRncOper() throws JNCException {
        String path = "mme-rnc-oper";
        delete(path);
    }

    /* Access methods for list child: "fgw-rnc-oper". */

    /**
     * Gets list entry "fgwRncOper", with specified keys.
     */
    public FgwRncOper getFgwRncOper() throws JNCException {
        String path = "fgw-rnc-oper";
        return (FgwRncOper)searchOne(path);
    }

    /**
     * Iterator method for the list "fgw-rnc-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator fgwRncOperIterator() {
        return new ElementChildrenIterator(children, "fgw-rnc-oper");
    }

    /**
     * Adds list entry "fgwRncOper", using an existing object.
     * @param fgwRncOper The object to add.
     * @return The added child.
     */
    public FgwRncOper addFgwRncOper(FgwRncOper fgwRncOper) throws JNCException {
        insertChild(fgwRncOper, childrenNames());
        return fgwRncOper;
    }

    /**
     * Adds list entry "fgwRncOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public FgwRncOper addFgwRncOper() throws JNCException {
        FgwRncOper fgwRncOper = new FgwRncOper();
        insertChild(fgwRncOper, childrenNames());
        return fgwRncOper;
    }

    /**
     * Deletes list entry "fgwRncOper", with specified keys.
     */
    public void deleteFgwRncOper() throws JNCException {
        String path = "fgw-rnc-oper";
        delete(path);
    }

    /* Access methods for list child: "peer-oper". */

    /**
     * Gets list entry "peerOper", with specified keys.
     */
    public PeerOper getPeerOper() throws JNCException {
        String path = "peer-oper";
        return (PeerOper)searchOne(path);
    }

    /**
     * Iterator method for the list "peer-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator peerOperIterator() {
        return new ElementChildrenIterator(children, "peer-oper");
    }

    /**
     * Adds list entry "peerOper", using an existing object.
     * @param peerOper The object to add.
     * @return The added child.
     */
    public PeerOper addPeerOper(PeerOper peerOper) throws JNCException {
        insertChild(peerOper, childrenNames());
        return peerOper;
    }

    /**
     * Adds list entry "peerOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public PeerOper addPeerOper() throws JNCException {
        PeerOper peerOper = new PeerOper();
        insertChild(peerOper, childrenNames());
        return peerOper;
    }

    /**
     * Deletes list entry "peerOper", with specified keys.
     */
    public void deletePeerOper() throws JNCException {
        String path = "peer-oper";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeIuIf) mmeIuIf = (MmeIuIf)child;
    }

}
