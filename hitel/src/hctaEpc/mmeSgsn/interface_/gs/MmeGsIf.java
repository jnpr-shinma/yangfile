/* 
 * @(#)MmeGsIf.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gs;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gs/mme-gs-if"
 * <p>
 * See line 162 in
 * sgsnScConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeGsIf extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeGsIf object.
     */
    public MmeGsIf() {
        super(Epc.NAMESPACE, "mme-gs-if");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeGsIf clone() {
        return (MmeGsIf)cloneContent(new MmeGsIf());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeGsIf cloneShallow() {
        return (MmeGsIf)cloneShallowContent(new MmeGsIf());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "global-title",
            "cgpa-routing-indicator",
            "nature-of-address",
            "return-option",
            "xudt-option",
            "registration-request-timer",
            "loc-upd-on-lai-mismatch",
            "loc-upd-timer",
            "explicit-gprs-detach-timer",
            "explicit-gprs-detach-retry",
            "explicit-imsi-detach-timer",
            "explicit-imsi-detach-retry",
            "implicit-imsi-detach-timer",
            "implicit-imsi-detach-retry",
            "reset-timer",
            "reset-retry",
            "version",
        };
    }

    /* Access methods for optional leaf child: "global-title". */

    /**
     * Gets the value for child leaf "global-title".
     * @return The value of the leaf.
     */
    public YangString getGlobalTitleValue() throws JNCException {
        return (YangString)getValue("global-title");
    }

    /**
     * Sets the value for child leaf "global-title",
     * using instance of generated typedef class.
     * @param globalTitleValue The value to set.
     * @param globalTitleValue used during instantiation.
     */
    public void setGlobalTitleValue(YangString globalTitleValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "global-title",
            globalTitleValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "global-title",
     * using a String value.
     * @param globalTitleValue used during instantiation.
     */
    public void setGlobalTitleValue(String globalTitleValue)
            throws JNCException {
        setGlobalTitleValue(new YangString(globalTitleValue));
    }

    /**
     * Unsets the value for child leaf "global-title".
     */
    public void unsetGlobalTitleValue() throws JNCException {
        delete("global-title");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "global-title" leaf will not have a value.
     */
    public void addGlobalTitle() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "global-title",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "global-title" with operation "replace".
     */
    public void markGlobalTitleReplace() throws JNCException {
        markLeafReplace("globalTitle");
    }

    /**
     * Marks the leaf "global-title" with operation "merge".
     */
    public void markGlobalTitleMerge() throws JNCException {
        markLeafMerge("globalTitle");
    }

    /**
     * Marks the leaf "global-title" with operation "create".
     */
    public void markGlobalTitleCreate() throws JNCException {
        markLeafCreate("globalTitle");
    }

    /**
     * Marks the leaf "global-title" with operation "delete".
     */
    public void markGlobalTitleDelete() throws JNCException {
        markLeafDelete("globalTitle");
    }

    /* Access methods for optional leaf child: "cgpa-routing-indicator". */

    /**
     * Gets the value for child leaf "cgpa-routing-indicator".
     * @return The value of the leaf.
     */
    public YangEnumeration getCgpaRoutingIndicatorValue() throws JNCException {
        YangEnumeration cgpaRoutingIndicator = (YangEnumeration)getValue("cgpa-routing-indicator");
        if (cgpaRoutingIndicator == null) {
            cgpaRoutingIndicator = new YangEnumeration("point-code", new String[] {  // default
                "global-title",
                "point-code",
            });
        }
        return cgpaRoutingIndicator;
    }

    /**
     * Sets the value for child leaf "cgpa-routing-indicator",
     * using instance of generated typedef class.
     * @param cgpaRoutingIndicatorValue The value to set.
     * @param cgpaRoutingIndicatorValue used during instantiation.
     */
    public void setCgpaRoutingIndicatorValue(YangEnumeration cgpaRoutingIndicatorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cgpa-routing-indicator",
            cgpaRoutingIndicatorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cgpa-routing-indicator",
     * using a String value.
     * @param cgpaRoutingIndicatorValue used during instantiation.
     */
    public void setCgpaRoutingIndicatorValue(String cgpaRoutingIndicatorValue)
            throws JNCException {
        setCgpaRoutingIndicatorValue(new YangEnumeration(cgpaRoutingIndicatorValue, new String[] {
             "global-title",
             "point-code",
        }));
    }

    /**
     * Unsets the value for child leaf "cgpa-routing-indicator".
     */
    public void unsetCgpaRoutingIndicatorValue() throws JNCException {
        delete("cgpa-routing-indicator");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cgpa-routing-indicator" leaf will not have a value.
     */
    public void addCgpaRoutingIndicator() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cgpa-routing-indicator",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cgpa-routing-indicator" with operation "replace".
     */
    public void markCgpaRoutingIndicatorReplace() throws JNCException {
        markLeafReplace("cgpaRoutingIndicator");
    }

    /**
     * Marks the leaf "cgpa-routing-indicator" with operation "merge".
     */
    public void markCgpaRoutingIndicatorMerge() throws JNCException {
        markLeafMerge("cgpaRoutingIndicator");
    }

    /**
     * Marks the leaf "cgpa-routing-indicator" with operation "create".
     */
    public void markCgpaRoutingIndicatorCreate() throws JNCException {
        markLeafCreate("cgpaRoutingIndicator");
    }

    /**
     * Marks the leaf "cgpa-routing-indicator" with operation "delete".
     */
    public void markCgpaRoutingIndicatorDelete() throws JNCException {
        markLeafDelete("cgpaRoutingIndicator");
    }

    /* Access methods for optional leaf child: "nature-of-address". */

    /**
     * Gets the value for child leaf "nature-of-address".
     * @return The value of the leaf.
     */
    public YangEnumeration getNatureOfAddressValue() throws JNCException {
        YangEnumeration natureOfAddress = (YangEnumeration)getValue("nature-of-address");
        if (natureOfAddress == null) {
            natureOfAddress = new YangEnumeration("international-number", new String[] {  // default
                "subscriber-number",
                "reserve-national-use",
                "national-specific-number",
                "international-number",
            });
        }
        return natureOfAddress;
    }

    /**
     * Sets the value for child leaf "nature-of-address",
     * using instance of generated typedef class.
     * @param natureOfAddressValue The value to set.
     * @param natureOfAddressValue used during instantiation.
     */
    public void setNatureOfAddressValue(YangEnumeration natureOfAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nature-of-address",
            natureOfAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nature-of-address",
     * using a String value.
     * @param natureOfAddressValue used during instantiation.
     */
    public void setNatureOfAddressValue(String natureOfAddressValue)
            throws JNCException {
        setNatureOfAddressValue(new YangEnumeration(natureOfAddressValue, new String[] {
             "subscriber-number",
             "reserve-national-use",
             "national-specific-number",
             "international-number",
        }));
    }

    /**
     * Unsets the value for child leaf "nature-of-address".
     */
    public void unsetNatureOfAddressValue() throws JNCException {
        delete("nature-of-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nature-of-address" leaf will not have a value.
     */
    public void addNatureOfAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nature-of-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nature-of-address" with operation "replace".
     */
    public void markNatureOfAddressReplace() throws JNCException {
        markLeafReplace("natureOfAddress");
    }

    /**
     * Marks the leaf "nature-of-address" with operation "merge".
     */
    public void markNatureOfAddressMerge() throws JNCException {
        markLeafMerge("natureOfAddress");
    }

    /**
     * Marks the leaf "nature-of-address" with operation "create".
     */
    public void markNatureOfAddressCreate() throws JNCException {
        markLeafCreate("natureOfAddress");
    }

    /**
     * Marks the leaf "nature-of-address" with operation "delete".
     */
    public void markNatureOfAddressDelete() throws JNCException {
        markLeafDelete("natureOfAddress");
    }

    /* Access methods for optional leaf child: "return-option". */

    /**
     * Gets the value for child leaf "return-option".
     * @return The value of the leaf.
     */
    public YangEnumeration getReturnOptionValue() throws JNCException {
        YangEnumeration returnOption = (YangEnumeration)getValue("return-option");
        if (returnOption == null) {
            returnOption = new YangEnumeration("ret-undeliverable", new String[] {  // default
                "no-ret-undeliverable",
                "ret-undeliverable",
            });
        }
        return returnOption;
    }

    /**
     * Sets the value for child leaf "return-option",
     * using instance of generated typedef class.
     * @param returnOptionValue The value to set.
     * @param returnOptionValue used during instantiation.
     */
    public void setReturnOptionValue(YangEnumeration returnOptionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "return-option",
            returnOptionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "return-option",
     * using a String value.
     * @param returnOptionValue used during instantiation.
     */
    public void setReturnOptionValue(String returnOptionValue)
            throws JNCException {
        setReturnOptionValue(new YangEnumeration(returnOptionValue, new String[] {
             "no-ret-undeliverable",
             "ret-undeliverable",
        }));
    }

    /**
     * Unsets the value for child leaf "return-option".
     */
    public void unsetReturnOptionValue() throws JNCException {
        delete("return-option");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "return-option" leaf will not have a value.
     */
    public void addReturnOption() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "return-option",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "return-option" with operation "replace".
     */
    public void markReturnOptionReplace() throws JNCException {
        markLeafReplace("returnOption");
    }

    /**
     * Marks the leaf "return-option" with operation "merge".
     */
    public void markReturnOptionMerge() throws JNCException {
        markLeafMerge("returnOption");
    }

    /**
     * Marks the leaf "return-option" with operation "create".
     */
    public void markReturnOptionCreate() throws JNCException {
        markLeafCreate("returnOption");
    }

    /**
     * Marks the leaf "return-option" with operation "delete".
     */
    public void markReturnOptionDelete() throws JNCException {
        markLeafDelete("returnOption");
    }

    /* Access methods for optional leaf child: "xudt-option". */

    /**
     * Gets the value for child leaf "xudt-option".
     * @return The value of the leaf.
     */
    public YangEnumeration getXudtOptionValue() throws JNCException {
        YangEnumeration xudtOption = (YangEnumeration)getValue("xudt-option");
        if (xudtOption == null) {
            xudtOption = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return xudtOption;
    }

    /**
     * Sets the value for child leaf "xudt-option",
     * using instance of generated typedef class.
     * @param xudtOptionValue The value to set.
     * @param xudtOptionValue used during instantiation.
     */
    public void setXudtOptionValue(YangEnumeration xudtOptionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "xudt-option",
            xudtOptionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "xudt-option",
     * using a String value.
     * @param xudtOptionValue used during instantiation.
     */
    public void setXudtOptionValue(String xudtOptionValue) throws JNCException {
        setXudtOptionValue(new YangEnumeration(xudtOptionValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "xudt-option".
     */
    public void unsetXudtOptionValue() throws JNCException {
        delete("xudt-option");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "xudt-option" leaf will not have a value.
     */
    public void addXudtOption() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "xudt-option",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "xudt-option" with operation "replace".
     */
    public void markXudtOptionReplace() throws JNCException {
        markLeafReplace("xudtOption");
    }

    /**
     * Marks the leaf "xudt-option" with operation "merge".
     */
    public void markXudtOptionMerge() throws JNCException {
        markLeafMerge("xudtOption");
    }

    /**
     * Marks the leaf "xudt-option" with operation "create".
     */
    public void markXudtOptionCreate() throws JNCException {
        markLeafCreate("xudtOption");
    }

    /**
     * Marks the leaf "xudt-option" with operation "delete".
     */
    public void markXudtOptionDelete() throws JNCException {
        markLeafDelete("xudtOption");
    }

    /* Access methods for optional leaf child: "registration-request-timer". */

    /**
     * Gets the value for child leaf "registration-request-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getRegistrationRequestTimerValue() throws JNCException {
        YangUInt8 registrationRequestTimer = (YangUInt8)getValue("registration-request-timer");
        if (registrationRequestTimer == null) {
            registrationRequestTimer = new YangUInt8("5");  // default
        }
        return registrationRequestTimer;
    }

    /**
     * Sets the value for child leaf "registration-request-timer",
     * using instance of generated typedef class.
     * @param registrationRequestTimerValue The value to set.
     * @param registrationRequestTimerValue used during instantiation.
     */
    public void setRegistrationRequestTimerValue(YangUInt8 registrationRequestTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "registration-request-timer",
            registrationRequestTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "registration-request-timer",
     * using Java primitive values.
     * @param registrationRequestTimerValue used during instantiation.
     */
    public void setRegistrationRequestTimerValue(short registrationRequestTimerValue)
            throws JNCException {
        setRegistrationRequestTimerValue(new YangUInt8(registrationRequestTimerValue));
    }

    /**
     * Sets the value for child leaf "registration-request-timer",
     * using a String value.
     * @param registrationRequestTimerValue used during instantiation.
     */
    public void setRegistrationRequestTimerValue(String registrationRequestTimerValue)
            throws JNCException {
        setRegistrationRequestTimerValue(new YangUInt8(registrationRequestTimerValue));
    }

    /**
     * Unsets the value for child leaf "registration-request-timer".
     */
    public void unsetRegistrationRequestTimerValue() throws JNCException {
        delete("registration-request-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "registration-request-timer" leaf will not have a value.
     */
    public void addRegistrationRequestTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "registration-request-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "registration-request-timer" with operation "replace".
     */
    public void markRegistrationRequestTimerReplace() throws JNCException {
        markLeafReplace("registrationRequestTimer");
    }

    /**
     * Marks the leaf "registration-request-timer" with operation "merge".
     */
    public void markRegistrationRequestTimerMerge() throws JNCException {
        markLeafMerge("registrationRequestTimer");
    }

    /**
     * Marks the leaf "registration-request-timer" with operation "create".
     */
    public void markRegistrationRequestTimerCreate() throws JNCException {
        markLeafCreate("registrationRequestTimer");
    }

    /**
     * Marks the leaf "registration-request-timer" with operation "delete".
     */
    public void markRegistrationRequestTimerDelete() throws JNCException {
        markLeafDelete("registrationRequestTimer");
    }

    /* Access methods for optional leaf child: "loc-upd-on-lai-mismatch". */

    /**
     * Gets the value for child leaf "loc-upd-on-lai-mismatch".
     * @return The value of the leaf.
     */
    public YangEnumeration getLocUpdOnLaiMismatchValue() throws JNCException {
        YangEnumeration locUpdOnLaiMismatch = (YangEnumeration)getValue("loc-upd-on-lai-mismatch");
        if (locUpdOnLaiMismatch == null) {
            locUpdOnLaiMismatch = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return locUpdOnLaiMismatch;
    }

    /**
     * Sets the value for child leaf "loc-upd-on-lai-mismatch",
     * using instance of generated typedef class.
     * @param locUpdOnLaiMismatchValue The value to set.
     * @param locUpdOnLaiMismatchValue used during instantiation.
     */
    public void setLocUpdOnLaiMismatchValue(YangEnumeration locUpdOnLaiMismatchValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "loc-upd-on-lai-mismatch",
            locUpdOnLaiMismatchValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "loc-upd-on-lai-mismatch",
     * using a String value.
     * @param locUpdOnLaiMismatchValue used during instantiation.
     */
    public void setLocUpdOnLaiMismatchValue(String locUpdOnLaiMismatchValue)
            throws JNCException {
        setLocUpdOnLaiMismatchValue(new YangEnumeration(locUpdOnLaiMismatchValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "loc-upd-on-lai-mismatch".
     */
    public void unsetLocUpdOnLaiMismatchValue() throws JNCException {
        delete("loc-upd-on-lai-mismatch");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "loc-upd-on-lai-mismatch" leaf will not have a value.
     */
    public void addLocUpdOnLaiMismatch() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "loc-upd-on-lai-mismatch",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "loc-upd-on-lai-mismatch" with operation "replace".
     */
    public void markLocUpdOnLaiMismatchReplace() throws JNCException {
        markLeafReplace("locUpdOnLaiMismatch");
    }

    /**
     * Marks the leaf "loc-upd-on-lai-mismatch" with operation "merge".
     */
    public void markLocUpdOnLaiMismatchMerge() throws JNCException {
        markLeafMerge("locUpdOnLaiMismatch");
    }

    /**
     * Marks the leaf "loc-upd-on-lai-mismatch" with operation "create".
     */
    public void markLocUpdOnLaiMismatchCreate() throws JNCException {
        markLeafCreate("locUpdOnLaiMismatch");
    }

    /**
     * Marks the leaf "loc-upd-on-lai-mismatch" with operation "delete".
     */
    public void markLocUpdOnLaiMismatchDelete() throws JNCException {
        markLeafDelete("locUpdOnLaiMismatch");
    }

    /* Access methods for optional leaf child: "loc-upd-timer". */

    /**
     * Gets the value for child leaf "loc-upd-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getLocUpdTimerValue() throws JNCException {
        YangUInt8 locUpdTimer = (YangUInt8)getValue("loc-upd-timer");
        if (locUpdTimer == null) {
            locUpdTimer = new YangUInt8("10");  // default
        }
        return locUpdTimer;
    }

    /**
     * Sets the value for child leaf "loc-upd-timer",
     * using instance of generated typedef class.
     * @param locUpdTimerValue The value to set.
     * @param locUpdTimerValue used during instantiation.
     */
    public void setLocUpdTimerValue(YangUInt8 locUpdTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "loc-upd-timer",
            locUpdTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "loc-upd-timer",
     * using Java primitive values.
     * @param locUpdTimerValue used during instantiation.
     */
    public void setLocUpdTimerValue(short locUpdTimerValue) throws JNCException {
        setLocUpdTimerValue(new YangUInt8(locUpdTimerValue));
    }

    /**
     * Sets the value for child leaf "loc-upd-timer",
     * using a String value.
     * @param locUpdTimerValue used during instantiation.
     */
    public void setLocUpdTimerValue(String locUpdTimerValue)
            throws JNCException {
        setLocUpdTimerValue(new YangUInt8(locUpdTimerValue));
    }

    /**
     * Unsets the value for child leaf "loc-upd-timer".
     */
    public void unsetLocUpdTimerValue() throws JNCException {
        delete("loc-upd-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "loc-upd-timer" leaf will not have a value.
     */
    public void addLocUpdTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "loc-upd-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "loc-upd-timer" with operation "replace".
     */
    public void markLocUpdTimerReplace() throws JNCException {
        markLeafReplace("locUpdTimer");
    }

    /**
     * Marks the leaf "loc-upd-timer" with operation "merge".
     */
    public void markLocUpdTimerMerge() throws JNCException {
        markLeafMerge("locUpdTimer");
    }

    /**
     * Marks the leaf "loc-upd-timer" with operation "create".
     */
    public void markLocUpdTimerCreate() throws JNCException {
        markLeafCreate("locUpdTimer");
    }

    /**
     * Marks the leaf "loc-upd-timer" with operation "delete".
     */
    public void markLocUpdTimerDelete() throws JNCException {
        markLeafDelete("locUpdTimer");
    }

    /* Access methods for optional leaf child: "explicit-gprs-detach-timer". */

    /**
     * Gets the value for child leaf "explicit-gprs-detach-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getExplicitGprsDetachTimerValue() throws JNCException {
        YangUInt8 explicitGprsDetachTimer = (YangUInt8)getValue("explicit-gprs-detach-timer");
        if (explicitGprsDetachTimer == null) {
            explicitGprsDetachTimer = new YangUInt8("4");  // default
        }
        return explicitGprsDetachTimer;
    }

    /**
     * Sets the value for child leaf "explicit-gprs-detach-timer",
     * using instance of generated typedef class.
     * @param explicitGprsDetachTimerValue The value to set.
     * @param explicitGprsDetachTimerValue used during instantiation.
     */
    public void setExplicitGprsDetachTimerValue(YangUInt8 explicitGprsDetachTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "explicit-gprs-detach-timer",
            explicitGprsDetachTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "explicit-gprs-detach-timer",
     * using Java primitive values.
     * @param explicitGprsDetachTimerValue used during instantiation.
     */
    public void setExplicitGprsDetachTimerValue(short explicitGprsDetachTimerValue)
            throws JNCException {
        setExplicitGprsDetachTimerValue(new YangUInt8(explicitGprsDetachTimerValue));
    }

    /**
     * Sets the value for child leaf "explicit-gprs-detach-timer",
     * using a String value.
     * @param explicitGprsDetachTimerValue used during instantiation.
     */
    public void setExplicitGprsDetachTimerValue(String explicitGprsDetachTimerValue)
            throws JNCException {
        setExplicitGprsDetachTimerValue(new YangUInt8(explicitGprsDetachTimerValue));
    }

    /**
     * Unsets the value for child leaf "explicit-gprs-detach-timer".
     */
    public void unsetExplicitGprsDetachTimerValue() throws JNCException {
        delete("explicit-gprs-detach-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "explicit-gprs-detach-timer" leaf will not have a value.
     */
    public void addExplicitGprsDetachTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "explicit-gprs-detach-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "explicit-gprs-detach-timer" with operation "replace".
     */
    public void markExplicitGprsDetachTimerReplace() throws JNCException {
        markLeafReplace("explicitGprsDetachTimer");
    }

    /**
     * Marks the leaf "explicit-gprs-detach-timer" with operation "merge".
     */
    public void markExplicitGprsDetachTimerMerge() throws JNCException {
        markLeafMerge("explicitGprsDetachTimer");
    }

    /**
     * Marks the leaf "explicit-gprs-detach-timer" with operation "create".
     */
    public void markExplicitGprsDetachTimerCreate() throws JNCException {
        markLeafCreate("explicitGprsDetachTimer");
    }

    /**
     * Marks the leaf "explicit-gprs-detach-timer" with operation "delete".
     */
    public void markExplicitGprsDetachTimerDelete() throws JNCException {
        markLeafDelete("explicitGprsDetachTimer");
    }

    /* Access methods for optional leaf child: "explicit-gprs-detach-retry". */

    /**
     * Gets the value for child leaf "explicit-gprs-detach-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getExplicitGprsDetachRetryValue() throws JNCException {
        YangUInt8 explicitGprsDetachRetry = (YangUInt8)getValue("explicit-gprs-detach-retry");
        if (explicitGprsDetachRetry == null) {
            explicitGprsDetachRetry = new YangUInt8("2");  // default
        }
        return explicitGprsDetachRetry;
    }

    /**
     * Sets the value for child leaf "explicit-gprs-detach-retry",
     * using instance of generated typedef class.
     * @param explicitGprsDetachRetryValue The value to set.
     * @param explicitGprsDetachRetryValue used during instantiation.
     */
    public void setExplicitGprsDetachRetryValue(YangUInt8 explicitGprsDetachRetryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "explicit-gprs-detach-retry",
            explicitGprsDetachRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "explicit-gprs-detach-retry",
     * using Java primitive values.
     * @param explicitGprsDetachRetryValue used during instantiation.
     */
    public void setExplicitGprsDetachRetryValue(short explicitGprsDetachRetryValue)
            throws JNCException {
        setExplicitGprsDetachRetryValue(new YangUInt8(explicitGprsDetachRetryValue));
    }

    /**
     * Sets the value for child leaf "explicit-gprs-detach-retry",
     * using a String value.
     * @param explicitGprsDetachRetryValue used during instantiation.
     */
    public void setExplicitGprsDetachRetryValue(String explicitGprsDetachRetryValue)
            throws JNCException {
        setExplicitGprsDetachRetryValue(new YangUInt8(explicitGprsDetachRetryValue));
    }

    /**
     * Unsets the value for child leaf "explicit-gprs-detach-retry".
     */
    public void unsetExplicitGprsDetachRetryValue() throws JNCException {
        delete("explicit-gprs-detach-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "explicit-gprs-detach-retry" leaf will not have a value.
     */
    public void addExplicitGprsDetachRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "explicit-gprs-detach-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "explicit-gprs-detach-retry" with operation "replace".
     */
    public void markExplicitGprsDetachRetryReplace() throws JNCException {
        markLeafReplace("explicitGprsDetachRetry");
    }

    /**
     * Marks the leaf "explicit-gprs-detach-retry" with operation "merge".
     */
    public void markExplicitGprsDetachRetryMerge() throws JNCException {
        markLeafMerge("explicitGprsDetachRetry");
    }

    /**
     * Marks the leaf "explicit-gprs-detach-retry" with operation "create".
     */
    public void markExplicitGprsDetachRetryCreate() throws JNCException {
        markLeafCreate("explicitGprsDetachRetry");
    }

    /**
     * Marks the leaf "explicit-gprs-detach-retry" with operation "delete".
     */
    public void markExplicitGprsDetachRetryDelete() throws JNCException {
        markLeafDelete("explicitGprsDetachRetry");
    }

    /* Access methods for optional leaf child: "explicit-imsi-detach-timer". */

    /**
     * Gets the value for child leaf "explicit-imsi-detach-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getExplicitImsiDetachTimerValue() throws JNCException {
        YangUInt8 explicitImsiDetachTimer = (YangUInt8)getValue("explicit-imsi-detach-timer");
        if (explicitImsiDetachTimer == null) {
            explicitImsiDetachTimer = new YangUInt8("4");  // default
        }
        return explicitImsiDetachTimer;
    }

    /**
     * Sets the value for child leaf "explicit-imsi-detach-timer",
     * using instance of generated typedef class.
     * @param explicitImsiDetachTimerValue The value to set.
     * @param explicitImsiDetachTimerValue used during instantiation.
     */
    public void setExplicitImsiDetachTimerValue(YangUInt8 explicitImsiDetachTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "explicit-imsi-detach-timer",
            explicitImsiDetachTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "explicit-imsi-detach-timer",
     * using Java primitive values.
     * @param explicitImsiDetachTimerValue used during instantiation.
     */
    public void setExplicitImsiDetachTimerValue(short explicitImsiDetachTimerValue)
            throws JNCException {
        setExplicitImsiDetachTimerValue(new YangUInt8(explicitImsiDetachTimerValue));
    }

    /**
     * Sets the value for child leaf "explicit-imsi-detach-timer",
     * using a String value.
     * @param explicitImsiDetachTimerValue used during instantiation.
     */
    public void setExplicitImsiDetachTimerValue(String explicitImsiDetachTimerValue)
            throws JNCException {
        setExplicitImsiDetachTimerValue(new YangUInt8(explicitImsiDetachTimerValue));
    }

    /**
     * Unsets the value for child leaf "explicit-imsi-detach-timer".
     */
    public void unsetExplicitImsiDetachTimerValue() throws JNCException {
        delete("explicit-imsi-detach-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "explicit-imsi-detach-timer" leaf will not have a value.
     */
    public void addExplicitImsiDetachTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "explicit-imsi-detach-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "explicit-imsi-detach-timer" with operation "replace".
     */
    public void markExplicitImsiDetachTimerReplace() throws JNCException {
        markLeafReplace("explicitImsiDetachTimer");
    }

    /**
     * Marks the leaf "explicit-imsi-detach-timer" with operation "merge".
     */
    public void markExplicitImsiDetachTimerMerge() throws JNCException {
        markLeafMerge("explicitImsiDetachTimer");
    }

    /**
     * Marks the leaf "explicit-imsi-detach-timer" with operation "create".
     */
    public void markExplicitImsiDetachTimerCreate() throws JNCException {
        markLeafCreate("explicitImsiDetachTimer");
    }

    /**
     * Marks the leaf "explicit-imsi-detach-timer" with operation "delete".
     */
    public void markExplicitImsiDetachTimerDelete() throws JNCException {
        markLeafDelete("explicitImsiDetachTimer");
    }

    /* Access methods for optional leaf child: "explicit-imsi-detach-retry". */

    /**
     * Gets the value for child leaf "explicit-imsi-detach-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getExplicitImsiDetachRetryValue() throws JNCException {
        YangUInt8 explicitImsiDetachRetry = (YangUInt8)getValue("explicit-imsi-detach-retry");
        if (explicitImsiDetachRetry == null) {
            explicitImsiDetachRetry = new YangUInt8("2");  // default
        }
        return explicitImsiDetachRetry;
    }

    /**
     * Sets the value for child leaf "explicit-imsi-detach-retry",
     * using instance of generated typedef class.
     * @param explicitImsiDetachRetryValue The value to set.
     * @param explicitImsiDetachRetryValue used during instantiation.
     */
    public void setExplicitImsiDetachRetryValue(YangUInt8 explicitImsiDetachRetryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "explicit-imsi-detach-retry",
            explicitImsiDetachRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "explicit-imsi-detach-retry",
     * using Java primitive values.
     * @param explicitImsiDetachRetryValue used during instantiation.
     */
    public void setExplicitImsiDetachRetryValue(short explicitImsiDetachRetryValue)
            throws JNCException {
        setExplicitImsiDetachRetryValue(new YangUInt8(explicitImsiDetachRetryValue));
    }

    /**
     * Sets the value for child leaf "explicit-imsi-detach-retry",
     * using a String value.
     * @param explicitImsiDetachRetryValue used during instantiation.
     */
    public void setExplicitImsiDetachRetryValue(String explicitImsiDetachRetryValue)
            throws JNCException {
        setExplicitImsiDetachRetryValue(new YangUInt8(explicitImsiDetachRetryValue));
    }

    /**
     * Unsets the value for child leaf "explicit-imsi-detach-retry".
     */
    public void unsetExplicitImsiDetachRetryValue() throws JNCException {
        delete("explicit-imsi-detach-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "explicit-imsi-detach-retry" leaf will not have a value.
     */
    public void addExplicitImsiDetachRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "explicit-imsi-detach-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "explicit-imsi-detach-retry" with operation "replace".
     */
    public void markExplicitImsiDetachRetryReplace() throws JNCException {
        markLeafReplace("explicitImsiDetachRetry");
    }

    /**
     * Marks the leaf "explicit-imsi-detach-retry" with operation "merge".
     */
    public void markExplicitImsiDetachRetryMerge() throws JNCException {
        markLeafMerge("explicitImsiDetachRetry");
    }

    /**
     * Marks the leaf "explicit-imsi-detach-retry" with operation "create".
     */
    public void markExplicitImsiDetachRetryCreate() throws JNCException {
        markLeafCreate("explicitImsiDetachRetry");
    }

    /**
     * Marks the leaf "explicit-imsi-detach-retry" with operation "delete".
     */
    public void markExplicitImsiDetachRetryDelete() throws JNCException {
        markLeafDelete("explicitImsiDetachRetry");
    }

    /* Access methods for optional leaf child: "implicit-imsi-detach-timer". */

    /**
     * Gets the value for child leaf "implicit-imsi-detach-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getImplicitImsiDetachTimerValue() throws JNCException {
        YangUInt8 implicitImsiDetachTimer = (YangUInt8)getValue("implicit-imsi-detach-timer");
        if (implicitImsiDetachTimer == null) {
            implicitImsiDetachTimer = new YangUInt8("4");  // default
        }
        return implicitImsiDetachTimer;
    }

    /**
     * Sets the value for child leaf "implicit-imsi-detach-timer",
     * using instance of generated typedef class.
     * @param implicitImsiDetachTimerValue The value to set.
     * @param implicitImsiDetachTimerValue used during instantiation.
     */
    public void setImplicitImsiDetachTimerValue(YangUInt8 implicitImsiDetachTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "implicit-imsi-detach-timer",
            implicitImsiDetachTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "implicit-imsi-detach-timer",
     * using Java primitive values.
     * @param implicitImsiDetachTimerValue used during instantiation.
     */
    public void setImplicitImsiDetachTimerValue(short implicitImsiDetachTimerValue)
            throws JNCException {
        setImplicitImsiDetachTimerValue(new YangUInt8(implicitImsiDetachTimerValue));
    }

    /**
     * Sets the value for child leaf "implicit-imsi-detach-timer",
     * using a String value.
     * @param implicitImsiDetachTimerValue used during instantiation.
     */
    public void setImplicitImsiDetachTimerValue(String implicitImsiDetachTimerValue)
            throws JNCException {
        setImplicitImsiDetachTimerValue(new YangUInt8(implicitImsiDetachTimerValue));
    }

    /**
     * Unsets the value for child leaf "implicit-imsi-detach-timer".
     */
    public void unsetImplicitImsiDetachTimerValue() throws JNCException {
        delete("implicit-imsi-detach-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "implicit-imsi-detach-timer" leaf will not have a value.
     */
    public void addImplicitImsiDetachTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "implicit-imsi-detach-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "implicit-imsi-detach-timer" with operation "replace".
     */
    public void markImplicitImsiDetachTimerReplace() throws JNCException {
        markLeafReplace("implicitImsiDetachTimer");
    }

    /**
     * Marks the leaf "implicit-imsi-detach-timer" with operation "merge".
     */
    public void markImplicitImsiDetachTimerMerge() throws JNCException {
        markLeafMerge("implicitImsiDetachTimer");
    }

    /**
     * Marks the leaf "implicit-imsi-detach-timer" with operation "create".
     */
    public void markImplicitImsiDetachTimerCreate() throws JNCException {
        markLeafCreate("implicitImsiDetachTimer");
    }

    /**
     * Marks the leaf "implicit-imsi-detach-timer" with operation "delete".
     */
    public void markImplicitImsiDetachTimerDelete() throws JNCException {
        markLeafDelete("implicitImsiDetachTimer");
    }

    /* Access methods for optional leaf child: "implicit-imsi-detach-retry". */

    /**
     * Gets the value for child leaf "implicit-imsi-detach-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getImplicitImsiDetachRetryValue() throws JNCException {
        YangUInt8 implicitImsiDetachRetry = (YangUInt8)getValue("implicit-imsi-detach-retry");
        if (implicitImsiDetachRetry == null) {
            implicitImsiDetachRetry = new YangUInt8("2");  // default
        }
        return implicitImsiDetachRetry;
    }

    /**
     * Sets the value for child leaf "implicit-imsi-detach-retry",
     * using instance of generated typedef class.
     * @param implicitImsiDetachRetryValue The value to set.
     * @param implicitImsiDetachRetryValue used during instantiation.
     */
    public void setImplicitImsiDetachRetryValue(YangUInt8 implicitImsiDetachRetryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "implicit-imsi-detach-retry",
            implicitImsiDetachRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "implicit-imsi-detach-retry",
     * using Java primitive values.
     * @param implicitImsiDetachRetryValue used during instantiation.
     */
    public void setImplicitImsiDetachRetryValue(short implicitImsiDetachRetryValue)
            throws JNCException {
        setImplicitImsiDetachRetryValue(new YangUInt8(implicitImsiDetachRetryValue));
    }

    /**
     * Sets the value for child leaf "implicit-imsi-detach-retry",
     * using a String value.
     * @param implicitImsiDetachRetryValue used during instantiation.
     */
    public void setImplicitImsiDetachRetryValue(String implicitImsiDetachRetryValue)
            throws JNCException {
        setImplicitImsiDetachRetryValue(new YangUInt8(implicitImsiDetachRetryValue));
    }

    /**
     * Unsets the value for child leaf "implicit-imsi-detach-retry".
     */
    public void unsetImplicitImsiDetachRetryValue() throws JNCException {
        delete("implicit-imsi-detach-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "implicit-imsi-detach-retry" leaf will not have a value.
     */
    public void addImplicitImsiDetachRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "implicit-imsi-detach-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "implicit-imsi-detach-retry" with operation "replace".
     */
    public void markImplicitImsiDetachRetryReplace() throws JNCException {
        markLeafReplace("implicitImsiDetachRetry");
    }

    /**
     * Marks the leaf "implicit-imsi-detach-retry" with operation "merge".
     */
    public void markImplicitImsiDetachRetryMerge() throws JNCException {
        markLeafMerge("implicitImsiDetachRetry");
    }

    /**
     * Marks the leaf "implicit-imsi-detach-retry" with operation "create".
     */
    public void markImplicitImsiDetachRetryCreate() throws JNCException {
        markLeafCreate("implicitImsiDetachRetry");
    }

    /**
     * Marks the leaf "implicit-imsi-detach-retry" with operation "delete".
     */
    public void markImplicitImsiDetachRetryDelete() throws JNCException {
        markLeafDelete("implicitImsiDetachRetry");
    }

    /* Access methods for optional leaf child: "reset-timer". */

    /**
     * Gets the value for child leaf "reset-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getResetTimerValue() throws JNCException {
        YangUInt8 resetTimer = (YangUInt8)getValue("reset-timer");
        if (resetTimer == null) {
            resetTimer = new YangUInt8("4");  // default
        }
        return resetTimer;
    }

    /**
     * Sets the value for child leaf "reset-timer",
     * using instance of generated typedef class.
     * @param resetTimerValue The value to set.
     * @param resetTimerValue used during instantiation.
     */
    public void setResetTimerValue(YangUInt8 resetTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-timer",
            resetTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "reset-timer",
     * using Java primitive values.
     * @param resetTimerValue used during instantiation.
     */
    public void setResetTimerValue(short resetTimerValue) throws JNCException {
        setResetTimerValue(new YangUInt8(resetTimerValue));
    }

    /**
     * Sets the value for child leaf "reset-timer",
     * using a String value.
     * @param resetTimerValue used during instantiation.
     */
    public void setResetTimerValue(String resetTimerValue) throws JNCException {
        setResetTimerValue(new YangUInt8(resetTimerValue));
    }

    /**
     * Unsets the value for child leaf "reset-timer".
     */
    public void unsetResetTimerValue() throws JNCException {
        delete("reset-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "reset-timer" leaf will not have a value.
     */
    public void addResetTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "reset-timer" with operation "replace".
     */
    public void markResetTimerReplace() throws JNCException {
        markLeafReplace("resetTimer");
    }

    /**
     * Marks the leaf "reset-timer" with operation "merge".
     */
    public void markResetTimerMerge() throws JNCException {
        markLeafMerge("resetTimer");
    }

    /**
     * Marks the leaf "reset-timer" with operation "create".
     */
    public void markResetTimerCreate() throws JNCException {
        markLeafCreate("resetTimer");
    }

    /**
     * Marks the leaf "reset-timer" with operation "delete".
     */
    public void markResetTimerDelete() throws JNCException {
        markLeafDelete("resetTimer");
    }

    /* Access methods for optional leaf child: "reset-retry". */

    /**
     * Gets the value for child leaf "reset-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getResetRetryValue() throws JNCException {
        YangUInt8 resetRetry = (YangUInt8)getValue("reset-retry");
        if (resetRetry == null) {
            resetRetry = new YangUInt8("2");  // default
        }
        return resetRetry;
    }

    /**
     * Sets the value for child leaf "reset-retry",
     * using instance of generated typedef class.
     * @param resetRetryValue The value to set.
     * @param resetRetryValue used during instantiation.
     */
    public void setResetRetryValue(YangUInt8 resetRetryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-retry",
            resetRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "reset-retry",
     * using Java primitive values.
     * @param resetRetryValue used during instantiation.
     */
    public void setResetRetryValue(short resetRetryValue) throws JNCException {
        setResetRetryValue(new YangUInt8(resetRetryValue));
    }

    /**
     * Sets the value for child leaf "reset-retry",
     * using a String value.
     * @param resetRetryValue used during instantiation.
     */
    public void setResetRetryValue(String resetRetryValue) throws JNCException {
        setResetRetryValue(new YangUInt8(resetRetryValue));
    }

    /**
     * Unsets the value for child leaf "reset-retry".
     */
    public void unsetResetRetryValue() throws JNCException {
        delete("reset-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "reset-retry" leaf will not have a value.
     */
    public void addResetRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "reset-retry" with operation "replace".
     */
    public void markResetRetryReplace() throws JNCException {
        markLeafReplace("resetRetry");
    }

    /**
     * Marks the leaf "reset-retry" with operation "merge".
     */
    public void markResetRetryMerge() throws JNCException {
        markLeafMerge("resetRetry");
    }

    /**
     * Marks the leaf "reset-retry" with operation "create".
     */
    public void markResetRetryCreate() throws JNCException {
        markLeafCreate("resetRetry");
    }

    /**
     * Marks the leaf "reset-retry" with operation "delete".
     */
    public void markResetRetryDelete() throws JNCException {
        markLeafDelete("resetRetry");
    }

    /* Access methods for optional leaf child: "version". */

    /**
     * Gets the value for child leaf "version".
     * @return The value of the leaf.
     */
    public YangEnumeration getVersionValue() throws JNCException {
        YangEnumeration version = (YangEnumeration)getValue("version");
        if (version == null) {
            version = new YangEnumeration("10.7.0", new String[] {  // default
                "9.3.0",
                "10.7.0",
            });
        }
        return version;
    }

    /**
     * Sets the value for child leaf "version",
     * using instance of generated typedef class.
     * @param versionValue The value to set.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(YangEnumeration versionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            versionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "version",
     * using a String value.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(String versionValue) throws JNCException {
        setVersionValue(new YangEnumeration(versionValue, new String[] {
             "9.3.0",
             "10.7.0",
        }));
    }

    /**
     * Unsets the value for child leaf "version".
     */
    public void unsetVersionValue() throws JNCException {
        delete("version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "version" leaf will not have a value.
     */
    public void addVersion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "version" with operation "replace".
     */
    public void markVersionReplace() throws JNCException {
        markLeafReplace("version");
    }

    /**
     * Marks the leaf "version" with operation "merge".
     */
    public void markVersionMerge() throws JNCException {
        markLeafMerge("version");
    }

    /**
     * Marks the leaf "version" with operation "create".
     */
    public void markVersionCreate() throws JNCException {
        markLeafCreate("version");
    }

    /**
     * Marks the leaf "version" with operation "delete".
     */
    public void markVersionDelete() throws JNCException {
        markLeafDelete("version");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
