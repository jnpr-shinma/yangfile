/* 
 * @(#)Sls.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;

import ESmlcOper;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeESmlc;

import MmeSlsIf;

import NodeSet;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/sls"
 * <p>
 * See line 23 in
 * slsConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Sls extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-sls-if".
     */
    public MmeSlsIf mmeSlsIf = null;

    /**
     * Constructor for an empty Sls object.
     */
    public Sls() {
        super(Epc.NAMESPACE, "sls");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Sls clone() {
        return (Sls)cloneContent(new Sls());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Sls cloneShallow() {
        return (Sls)cloneShallowContent(new Sls());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-sls-if",
            "mme-e-smlc",
            "e-smlc-oper",
        };
    }

    /* Access methods for container child: "mme-sls-if". */

    /**
     * Adds container entry "mmeSlsIf", using an existing object.
     * @param mmeSlsIf The object to add.
     * @return The added child.
     */
    public MmeSlsIf addMmeSlsIf(MmeSlsIf mmeSlsIf) throws JNCException {
        this.mmeSlsIf = mmeSlsIf;
        insertChild(mmeSlsIf, childrenNames());
        return mmeSlsIf;
    }

    /**
     * Adds container entry "mmeSlsIf".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSlsIf addMmeSlsIf() throws JNCException {
        MmeSlsIf mmeSlsIf = new MmeSlsIf();
        this.mmeSlsIf = mmeSlsIf;
        insertChild(mmeSlsIf, childrenNames());
        return mmeSlsIf;
    }

    /**
     * Deletes container entry "mmeSlsIf".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeSlsIf() throws JNCException {
        this.mmeSlsIf = null;
        String path = "mme-sls-if";
        return delete(path);
    }

    /* Access methods for list child: "mme-e-smlc". */

    /**
     * Gets list entry "mmeESmlc", with specified keys.
     * @param eSmlcIdValue Key argument of child.
     */
    public MmeESmlc getMmeESmlc(YangUInt8 eSmlcIdValue) throws JNCException {
        String path = "mme-e-smlc[eSmlcId='" + eSmlcIdValue + "']";
        return (MmeESmlc)searchOne(path);
    }

    /**
     * Gets list entry "mmeESmlc", with specified keys.
     * The keys are specified as strings.
     * @param eSmlcIdValue Key argument of child.
     */
    public MmeESmlc getMmeESmlc(String eSmlcIdValue) throws JNCException {
        String path = "mme-e-smlc[eSmlcId='" + eSmlcIdValue + "']";
        return (MmeESmlc)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-e-smlc".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeESmlcIterator() {
        return new ElementChildrenIterator(children, "mme-e-smlc");
    }

    /**
     * Adds list entry "mmeESmlc", using an existing object.
     * @param mmeESmlc The object to add.
     * @return The added child.
     */
    public MmeESmlc addMmeESmlc(MmeESmlc mmeESmlc) throws JNCException {
        insertChild(mmeESmlc, childrenNames());
        return mmeESmlc;
    }

    /**
     * Adds list entry "mmeESmlc", with specified keys.
     * @param eSmlcIdValue Key argument of child.
     * @return The added child.
     */
    public MmeESmlc addMmeESmlc(YangUInt8 eSmlcIdValue) throws JNCException {
        MmeESmlc mmeESmlc = new MmeESmlc(eSmlcIdValue);
        return addMmeESmlc(mmeESmlc);
    }

    /**
     * Adds list entry "mmeESmlc", with specified keys.
     * The keys are specified as strings.
     * @param eSmlcIdValue Key argument of child.
     * @return The added child.
     */
    public MmeESmlc addMmeESmlc(String eSmlcIdValue) throws JNCException {
        MmeESmlc mmeESmlc = new MmeESmlc(eSmlcIdValue);
        return addMmeESmlc(mmeESmlc);
    }

    /**
     * Adds list entry "mmeESmlc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeESmlc addMmeESmlc() throws JNCException {
        MmeESmlc mmeESmlc = new MmeESmlc();
        insertChild(mmeESmlc, childrenNames());
        return mmeESmlc;
    }

    /**
     * Deletes list entry "mmeESmlc", with specified keys.
     * @param eSmlcIdValue Key argument of child.
     */
    public void deleteMmeESmlc(YangUInt8 eSmlcIdValue) throws JNCException {
        String path = "mme-e-smlc[eSmlcId='" + eSmlcIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeESmlc", with specified keys.
     * The keys are specified as strings.
     * @param eSmlcIdValue Key argument of child.
     */
    public void deleteMmeESmlc(String eSmlcIdValue) throws JNCException {
        String path = "mme-e-smlc[eSmlcId='" + eSmlcIdValue + "']";
        delete(path);
    }

    /* Access methods for list child: "e-smlc-oper". */

    /**
     * Gets list entry "eSmlcOper", with specified keys.
     */
    public ESmlcOper getESmlcOper() throws JNCException {
        String path = "e-smlc-oper";
        return (ESmlcOper)searchOne(path);
    }

    /**
     * Iterator method for the list "e-smlc-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator eSmlcOperIterator() {
        return new ElementChildrenIterator(children, "e-smlc-oper");
    }

    /**
     * Adds list entry "eSmlcOper", using an existing object.
     * @param eSmlcOper The object to add.
     * @return The added child.
     */
    public ESmlcOper addESmlcOper(ESmlcOper eSmlcOper) throws JNCException {
        insertChild(eSmlcOper, childrenNames());
        return eSmlcOper;
    }

    /**
     * Adds list entry "eSmlcOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public ESmlcOper addESmlcOper() throws JNCException {
        ESmlcOper eSmlcOper = new ESmlcOper();
        insertChild(eSmlcOper, childrenNames());
        return eSmlcOper;
    }

    /**
     * Deletes list entry "eSmlcOper", with specified keys.
     */
    public void deleteESmlcOper() throws JNCException {
        String path = "e-smlc-oper";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeSlsIf) mmeSlsIf = (MmeSlsIf)child;
    }

}
