/* 
 * @(#)RadiusPeerOper.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.radius;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/radius/radius-peer-oper"
 * <p>
 * See line 48 in
 * upsmCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class RadiusPeerOper extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty RadiusPeerOper object.
     */
    public RadiusPeerOper() {
        super(Epc.NAMESPACE, "radius-peer-oper");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public RadiusPeerOper clone() {
        return (RadiusPeerOper)cloneContent(new RadiusPeerOper());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public RadiusPeerOper cloneShallow() {
        return (RadiusPeerOper)cloneShallowContent(new RadiusPeerOper());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "ip-address",
            "port-number",
            "application-identifier",
            "status-str",
            "location",
            "inc-pdu",
            "out-pdu",
            "pending-trans",
        };
    }

    /* Access methods for optional leaf child: "ip-address". */

    /**
     * Gets the value for child leaf "ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddressValue() throws JNCException {
        return (IpAddress)getValue("ip-address");
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a JNC type value.
     * @param ipAddressValue The value to set.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(IpAddress ipAddressValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            ipAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a String value.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(String ipAddressValue) throws JNCException {
        setIpAddressValue(new IpAddress(ipAddressValue));
    }

    /**
     * Unsets the value for child leaf "ip-address".
     */
    public void unsetIpAddressValue() throws JNCException {
        delete("ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address" leaf will not have a value.
     */
    public void addIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address" with operation "replace".
     */
    public void markIpAddressReplace() throws JNCException {
        markLeafReplace("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "merge".
     */
    public void markIpAddressMerge() throws JNCException {
        markLeafMerge("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "create".
     */
    public void markIpAddressCreate() throws JNCException {
        markLeafCreate("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "delete".
     */
    public void markIpAddressDelete() throws JNCException {
        markLeafDelete("ipAddress");
    }

    /* Access methods for optional leaf child: "port-number". */

    /**
     * Gets the value for child leaf "port-number".
     * @return The value of the leaf.
     */
    public YangUInt16 getPortNumberValue() throws JNCException {
        return (YangUInt16)getValue("port-number");
    }

    /**
     * Sets the value for child leaf "port-number",
     * using instance of generated typedef class.
     * @param portNumberValue The value to set.
     * @param portNumberValue used during instantiation.
     */
    public void setPortNumberValue(YangUInt16 portNumberValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port-number",
            portNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "port-number",
     * using Java primitive values.
     * @param portNumberValue used during instantiation.
     */
    public void setPortNumberValue(int portNumberValue) throws JNCException {
        setPortNumberValue(new YangUInt16(portNumberValue));
    }

    /**
     * Sets the value for child leaf "port-number",
     * using a String value.
     * @param portNumberValue used during instantiation.
     */
    public void setPortNumberValue(String portNumberValue) throws JNCException {
        setPortNumberValue(new YangUInt16(portNumberValue));
    }

    /**
     * Unsets the value for child leaf "port-number".
     */
    public void unsetPortNumberValue() throws JNCException {
        delete("port-number");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "port-number" leaf will not have a value.
     */
    public void addPortNumber() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port-number",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "port-number" with operation "replace".
     */
    public void markPortNumberReplace() throws JNCException {
        markLeafReplace("portNumber");
    }

    /**
     * Marks the leaf "port-number" with operation "merge".
     */
    public void markPortNumberMerge() throws JNCException {
        markLeafMerge("portNumber");
    }

    /**
     * Marks the leaf "port-number" with operation "create".
     */
    public void markPortNumberCreate() throws JNCException {
        markLeafCreate("portNumber");
    }

    /**
     * Marks the leaf "port-number" with operation "delete".
     */
    public void markPortNumberDelete() throws JNCException {
        markLeafDelete("portNumber");
    }

    /* Access methods for optional leaf child: "application-identifier". */

    /**
     * Gets the value for child leaf "application-identifier".
     * @return The value of the leaf.
     */
    public YangString getApplicationIdentifierValue() throws JNCException {
        return (YangString)getValue("application-identifier");
    }

    /**
     * Sets the value for child leaf "application-identifier",
     * using instance of generated typedef class.
     * @param applicationIdentifierValue The value to set.
     * @param applicationIdentifierValue used during instantiation.
     */
    public void setApplicationIdentifierValue(YangString applicationIdentifierValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "application-identifier",
            applicationIdentifierValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "application-identifier",
     * using a String value.
     * @param applicationIdentifierValue used during instantiation.
     */
    public void setApplicationIdentifierValue(String applicationIdentifierValue)
            throws JNCException {
        setApplicationIdentifierValue(new YangString(applicationIdentifierValue));
    }

    /**
     * Unsets the value for child leaf "application-identifier".
     */
    public void unsetApplicationIdentifierValue() throws JNCException {
        delete("application-identifier");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "application-identifier" leaf will not have a value.
     */
    public void addApplicationIdentifier() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "application-identifier",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "application-identifier" with operation "replace".
     */
    public void markApplicationIdentifierReplace() throws JNCException {
        markLeafReplace("applicationIdentifier");
    }

    /**
     * Marks the leaf "application-identifier" with operation "merge".
     */
    public void markApplicationIdentifierMerge() throws JNCException {
        markLeafMerge("applicationIdentifier");
    }

    /**
     * Marks the leaf "application-identifier" with operation "create".
     */
    public void markApplicationIdentifierCreate() throws JNCException {
        markLeafCreate("applicationIdentifier");
    }

    /**
     * Marks the leaf "application-identifier" with operation "delete".
     */
    public void markApplicationIdentifierDelete() throws JNCException {
        markLeafDelete("applicationIdentifier");
    }

    /* Access methods for optional leaf child: "status-str". */

    /**
     * Gets the value for child leaf "status-str".
     * @return The value of the leaf.
     */
    public YangString getStatusStrValue() throws JNCException {
        return (YangString)getValue("status-str");
    }

    /**
     * Sets the value for child leaf "status-str",
     * using instance of generated typedef class.
     * @param statusStrValue The value to set.
     * @param statusStrValue used during instantiation.
     */
    public void setStatusStrValue(YangString statusStrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-str",
            statusStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-str",
     * using a String value.
     * @param statusStrValue used during instantiation.
     */
    public void setStatusStrValue(String statusStrValue) throws JNCException {
        setStatusStrValue(new YangString(statusStrValue));
    }

    /**
     * Unsets the value for child leaf "status-str".
     */
    public void unsetStatusStrValue() throws JNCException {
        delete("status-str");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-str" leaf will not have a value.
     */
    public void addStatusStr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-str",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-str" with operation "replace".
     */
    public void markStatusStrReplace() throws JNCException {
        markLeafReplace("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "merge".
     */
    public void markStatusStrMerge() throws JNCException {
        markLeafMerge("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "create".
     */
    public void markStatusStrCreate() throws JNCException {
        markLeafCreate("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "delete".
     */
    public void markStatusStrDelete() throws JNCException {
        markLeafDelete("statusStr");
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "inc-pdu". */

    /**
     * Gets the value for child leaf "inc-pdu".
     * @return The value of the leaf.
     */
    public YangUInt32 getIncPduValue() throws JNCException {
        return (YangUInt32)getValue("inc-pdu");
    }

    /**
     * Sets the value for child leaf "inc-pdu",
     * using instance of generated typedef class.
     * @param incPduValue The value to set.
     * @param incPduValue used during instantiation.
     */
    public void setIncPduValue(YangUInt32 incPduValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "inc-pdu",
            incPduValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "inc-pdu",
     * using Java primitive values.
     * @param incPduValue used during instantiation.
     */
    public void setIncPduValue(long incPduValue) throws JNCException {
        setIncPduValue(new YangUInt32(incPduValue));
    }

    /**
     * Sets the value for child leaf "inc-pdu",
     * using a String value.
     * @param incPduValue used during instantiation.
     */
    public void setIncPduValue(String incPduValue) throws JNCException {
        setIncPduValue(new YangUInt32(incPduValue));
    }

    /**
     * Unsets the value for child leaf "inc-pdu".
     */
    public void unsetIncPduValue() throws JNCException {
        delete("inc-pdu");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "inc-pdu" leaf will not have a value.
     */
    public void addIncPdu() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "inc-pdu",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "inc-pdu" with operation "replace".
     */
    public void markIncPduReplace() throws JNCException {
        markLeafReplace("incPdu");
    }

    /**
     * Marks the leaf "inc-pdu" with operation "merge".
     */
    public void markIncPduMerge() throws JNCException {
        markLeafMerge("incPdu");
    }

    /**
     * Marks the leaf "inc-pdu" with operation "create".
     */
    public void markIncPduCreate() throws JNCException {
        markLeafCreate("incPdu");
    }

    /**
     * Marks the leaf "inc-pdu" with operation "delete".
     */
    public void markIncPduDelete() throws JNCException {
        markLeafDelete("incPdu");
    }

    /* Access methods for optional leaf child: "out-pdu". */

    /**
     * Gets the value for child leaf "out-pdu".
     * @return The value of the leaf.
     */
    public YangUInt32 getOutPduValue() throws JNCException {
        return (YangUInt32)getValue("out-pdu");
    }

    /**
     * Sets the value for child leaf "out-pdu",
     * using instance of generated typedef class.
     * @param outPduValue The value to set.
     * @param outPduValue used during instantiation.
     */
    public void setOutPduValue(YangUInt32 outPduValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "out-pdu",
            outPduValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-pdu",
     * using Java primitive values.
     * @param outPduValue used during instantiation.
     */
    public void setOutPduValue(long outPduValue) throws JNCException {
        setOutPduValue(new YangUInt32(outPduValue));
    }

    /**
     * Sets the value for child leaf "out-pdu",
     * using a String value.
     * @param outPduValue used during instantiation.
     */
    public void setOutPduValue(String outPduValue) throws JNCException {
        setOutPduValue(new YangUInt32(outPduValue));
    }

    /**
     * Unsets the value for child leaf "out-pdu".
     */
    public void unsetOutPduValue() throws JNCException {
        delete("out-pdu");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-pdu" leaf will not have a value.
     */
    public void addOutPdu() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "out-pdu",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-pdu" with operation "replace".
     */
    public void markOutPduReplace() throws JNCException {
        markLeafReplace("outPdu");
    }

    /**
     * Marks the leaf "out-pdu" with operation "merge".
     */
    public void markOutPduMerge() throws JNCException {
        markLeafMerge("outPdu");
    }

    /**
     * Marks the leaf "out-pdu" with operation "create".
     */
    public void markOutPduCreate() throws JNCException {
        markLeafCreate("outPdu");
    }

    /**
     * Marks the leaf "out-pdu" with operation "delete".
     */
    public void markOutPduDelete() throws JNCException {
        markLeafDelete("outPdu");
    }

    /* Access methods for optional leaf child: "pending-trans". */

    /**
     * Gets the value for child leaf "pending-trans".
     * @return The value of the leaf.
     */
    public YangUInt32 getPendingTransValue() throws JNCException {
        return (YangUInt32)getValue("pending-trans");
    }

    /**
     * Sets the value for child leaf "pending-trans",
     * using instance of generated typedef class.
     * @param pendingTransValue The value to set.
     * @param pendingTransValue used during instantiation.
     */
    public void setPendingTransValue(YangUInt32 pendingTransValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pending-trans",
            pendingTransValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pending-trans",
     * using Java primitive values.
     * @param pendingTransValue used during instantiation.
     */
    public void setPendingTransValue(long pendingTransValue)
            throws JNCException {
        setPendingTransValue(new YangUInt32(pendingTransValue));
    }

    /**
     * Sets the value for child leaf "pending-trans",
     * using a String value.
     * @param pendingTransValue used during instantiation.
     */
    public void setPendingTransValue(String pendingTransValue)
            throws JNCException {
        setPendingTransValue(new YangUInt32(pendingTransValue));
    }

    /**
     * Unsets the value for child leaf "pending-trans".
     */
    public void unsetPendingTransValue() throws JNCException {
        delete("pending-trans");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pending-trans" leaf will not have a value.
     */
    public void addPendingTrans() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pending-trans",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pending-trans" with operation "replace".
     */
    public void markPendingTransReplace() throws JNCException {
        markLeafReplace("pendingTrans");
    }

    /**
     * Marks the leaf "pending-trans" with operation "merge".
     */
    public void markPendingTransMerge() throws JNCException {
        markLeafMerge("pendingTrans");
    }

    /**
     * Marks the leaf "pending-trans" with operation "create".
     */
    public void markPendingTransCreate() throws JNCException {
        markLeafCreate("pendingTrans");
    }

    /**
     * Marks the leaf "pending-trans" with operation "delete".
     */
    public void markPendingTransDelete() throws JNCException {
        markLeafDelete("pendingTrans");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
