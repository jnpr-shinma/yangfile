/* 
 * @(#)Sgs.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeSgsIf;

import NodeSet;

import Vlr;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/sgs"
 * <p>
 * See line 23 in
 * sgsConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Sgs extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-sgs-if".
     */
    public MmeSgsIf mmeSgsIf = null;

    /**
     * Constructor for an empty Sgs object.
     */
    public Sgs() {
        super(Epc.NAMESPACE, "sgs");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Sgs clone() {
        return (Sgs)cloneContent(new Sgs());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Sgs cloneShallow() {
        return (Sgs)cloneShallowContent(new Sgs());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-sgs-if",
            "vlr",
        };
    }

    /* Access methods for container child: "mme-sgs-if". */

    /**
     * Adds container entry "mmeSgsIf", using an existing object.
     * @param mmeSgsIf The object to add.
     * @return The added child.
     */
    public MmeSgsIf addMmeSgsIf(MmeSgsIf mmeSgsIf) throws JNCException {
        this.mmeSgsIf = mmeSgsIf;
        insertChild(mmeSgsIf, childrenNames());
        return mmeSgsIf;
    }

    /**
     * Adds container entry "mmeSgsIf".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSgsIf addMmeSgsIf() throws JNCException {
        MmeSgsIf mmeSgsIf = new MmeSgsIf();
        this.mmeSgsIf = mmeSgsIf;
        insertChild(mmeSgsIf, childrenNames());
        return mmeSgsIf;
    }

    /**
     * Deletes container entry "mmeSgsIf".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeSgsIf() throws JNCException {
        this.mmeSgsIf = null;
        String path = "mme-sgs-if";
        return delete(path);
    }

    /* Access methods for list child: "vlr". */

    /**
     * Gets list entry "vlr", with specified keys.
     */
    public Vlr getVlr() throws JNCException {
        String path = "vlr";
        return (Vlr)searchOne(path);
    }

    /**
     * Iterator method for the list "vlr".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator vlrIterator() {
        return new ElementChildrenIterator(children, "vlr");
    }

    /**
     * Adds list entry "vlr", using an existing object.
     * @param vlr The object to add.
     * @return The added child.
     */
    public Vlr addVlr(Vlr vlr) throws JNCException {
        insertChild(vlr, childrenNames());
        return vlr;
    }

    /**
     * Adds list entry "vlr".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Vlr addVlr() throws JNCException {
        Vlr vlr = new Vlr();
        insertChild(vlr, childrenNames());
        return vlr;
    }

    /**
     * Deletes list entry "vlr", with specified keys.
     */
    public void deleteVlr() throws JNCException {
        String path = "vlr";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeSgsIf) mmeSgsIf = (MmeSgsIf)child;
    }

}
