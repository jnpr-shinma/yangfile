/* 
 * @(#)Diameter.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeAvpMbitOverride;

import MmeDiameterClientInstance;

import MmeDiameterPeer;

import MmeDiameterProfile;

import MmeRealmPeerMap;

import NodeSet;

import PeerOper;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/diameter"
 * <p>
 * See line 106 in
 * dcConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Diameter extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-diameter-profile".
     */
    public MmeDiameterProfile mmeDiameterProfile = null;

    /**
     * Constructor for an empty Diameter object.
     */
    public Diameter() {
        super(Epc.NAMESPACE, "diameter");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Diameter clone() {
        return (Diameter)cloneContent(new Diameter());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Diameter cloneShallow() {
        return (Diameter)cloneShallowContent(new Diameter());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-diameter-profile",
            "mme-diameter-peer",
            "mme-realm-peer-map",
            "mme-diameter-client-instance",
            "mme-avp-mbit-override",
            "peer-oper",
        };
    }

    /* Access methods for container child: "mme-diameter-profile". */

    /**
     * Adds container entry "mmeDiameterProfile", using an existing object.
     * @param mmeDiameterProfile The object to add.
     * @return The added child.
     */
    public MmeDiameterProfile addMmeDiameterProfile(MmeDiameterProfile mmeDiameterProfile)
            throws JNCException {
        this.mmeDiameterProfile = mmeDiameterProfile;
        insertChild(mmeDiameterProfile, childrenNames());
        return mmeDiameterProfile;
    }

    /**
     * Adds container entry "mmeDiameterProfile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeDiameterProfile addMmeDiameterProfile() throws JNCException {
        MmeDiameterProfile mmeDiameterProfile = new MmeDiameterProfile();
        this.mmeDiameterProfile = mmeDiameterProfile;
        insertChild(mmeDiameterProfile, childrenNames());
        return mmeDiameterProfile;
    }

    /**
     * Deletes container entry "mmeDiameterProfile".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeDiameterProfile() throws JNCException {
        this.mmeDiameterProfile = null;
        String path = "mme-diameter-profile";
        return delete(path);
    }

    /* Access methods for list child: "mme-diameter-peer". */

    /**
     * Gets list entry "mmeDiameterPeer", with specified keys.
     * @param hostIdentityValue Key argument of child.
     */
    public MmeDiameterPeer getMmeDiameterPeer(YangString hostIdentityValue)
            throws JNCException {
        String path = "mme-diameter-peer[hostIdentity='" + hostIdentityValue + "']";
        return (MmeDiameterPeer)searchOne(path);
    }

    /**
     * Gets list entry "mmeDiameterPeer", with specified keys.
     * The keys are specified as strings.
     * @param hostIdentityValue Key argument of child.
     */
    public MmeDiameterPeer getMmeDiameterPeer(String hostIdentityValue)
            throws JNCException {
        String path = "mme-diameter-peer[hostIdentity='" + hostIdentityValue + "']";
        return (MmeDiameterPeer)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-diameter-peer".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeDiameterPeerIterator() {
        return new ElementChildrenIterator(children, "mme-diameter-peer");
    }

    /**
     * Adds list entry "mmeDiameterPeer", using an existing object.
     * @param mmeDiameterPeer The object to add.
     * @return The added child.
     */
    public MmeDiameterPeer addMmeDiameterPeer(MmeDiameterPeer mmeDiameterPeer)
            throws JNCException {
        insertChild(mmeDiameterPeer, childrenNames());
        return mmeDiameterPeer;
    }

    /**
     * Adds list entry "mmeDiameterPeer", with specified keys.
     * @param hostIdentityValue Key argument of child.
     * @return The added child.
     */
    public MmeDiameterPeer addMmeDiameterPeer(YangString hostIdentityValue)
            throws JNCException {
        MmeDiameterPeer mmeDiameterPeer = new MmeDiameterPeer(hostIdentityValue);
        return addMmeDiameterPeer(mmeDiameterPeer);
    }

    /**
     * Adds list entry "mmeDiameterPeer", with specified keys.
     * The keys are specified as strings.
     * @param hostIdentityValue Key argument of child.
     * @return The added child.
     */
    public MmeDiameterPeer addMmeDiameterPeer(String hostIdentityValue)
            throws JNCException {
        MmeDiameterPeer mmeDiameterPeer = new MmeDiameterPeer(hostIdentityValue);
        return addMmeDiameterPeer(mmeDiameterPeer);
    }

    /**
     * Adds list entry "mmeDiameterPeer".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeDiameterPeer addMmeDiameterPeer() throws JNCException {
        MmeDiameterPeer mmeDiameterPeer = new MmeDiameterPeer();
        insertChild(mmeDiameterPeer, childrenNames());
        return mmeDiameterPeer;
    }

    /**
     * Deletes list entry "mmeDiameterPeer", with specified keys.
     * @param hostIdentityValue Key argument of child.
     */
    public void deleteMmeDiameterPeer(YangString hostIdentityValue)
            throws JNCException {
        String path = "mme-diameter-peer[hostIdentity='" + hostIdentityValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeDiameterPeer", with specified keys.
     * The keys are specified as strings.
     * @param hostIdentityValue Key argument of child.
     */
    public void deleteMmeDiameterPeer(String hostIdentityValue)
            throws JNCException {
        String path = "mme-diameter-peer[hostIdentity='" + hostIdentityValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-realm-peer-map". */

    /**
     * Gets list entry "mmeRealmPeerMap", with specified keys.
     * @param realmNameValue Key argument of child.
     * @param hostIdentityValue Key argument of child.
     */
    public MmeRealmPeerMap getMmeRealmPeerMap(YangString realmNameValue, YangString hostIdentityValue)
            throws JNCException {
        String path = "mme-realm-peer-map[realmName='" + realmNameValue + "'][hostIdentity='" + hostIdentityValue + "']";
        return (MmeRealmPeerMap)searchOne(path);
    }

    /**
     * Gets list entry "mmeRealmPeerMap", with specified keys.
     * The keys are specified as strings.
     * @param realmNameValue Key argument of child.
     * @param hostIdentityValue Key argument of child.
     */
    public MmeRealmPeerMap getMmeRealmPeerMap(String realmNameValue, String hostIdentityValue)
            throws JNCException {
        String path = "mme-realm-peer-map[realmName='" + realmNameValue + "'][hostIdentity='" + hostIdentityValue + "']";
        return (MmeRealmPeerMap)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-realm-peer-map".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeRealmPeerMapIterator() {
        return new ElementChildrenIterator(children, "mme-realm-peer-map");
    }

    /**
     * Adds list entry "mmeRealmPeerMap", using an existing object.
     * @param mmeRealmPeerMap The object to add.
     * @return The added child.
     */
    public MmeRealmPeerMap addMmeRealmPeerMap(MmeRealmPeerMap mmeRealmPeerMap)
            throws JNCException {
        insertChild(mmeRealmPeerMap, childrenNames());
        return mmeRealmPeerMap;
    }

    /**
     * Adds list entry "mmeRealmPeerMap", with specified keys.
     * @param realmNameValue Key argument of child.
     * @param hostIdentityValue Key argument of child.
     * @return The added child.
     */
    public MmeRealmPeerMap addMmeRealmPeerMap(YangString realmNameValue, YangString hostIdentityValue)
            throws JNCException {
        MmeRealmPeerMap mmeRealmPeerMap = new MmeRealmPeerMap(realmNameValue, hostIdentityValue);
        return addMmeRealmPeerMap(mmeRealmPeerMap);
    }

    /**
     * Adds list entry "mmeRealmPeerMap", with specified keys.
     * The keys are specified as strings.
     * @param realmNameValue Key argument of child.
     * @param hostIdentityValue Key argument of child.
     * @return The added child.
     */
    public MmeRealmPeerMap addMmeRealmPeerMap(String realmNameValue, String hostIdentityValue)
            throws JNCException {
        MmeRealmPeerMap mmeRealmPeerMap = new MmeRealmPeerMap(realmNameValue, hostIdentityValue);
        return addMmeRealmPeerMap(mmeRealmPeerMap);
    }

    /**
     * Adds list entry "mmeRealmPeerMap".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeRealmPeerMap addMmeRealmPeerMap() throws JNCException {
        MmeRealmPeerMap mmeRealmPeerMap = new MmeRealmPeerMap();
        insertChild(mmeRealmPeerMap, childrenNames());
        return mmeRealmPeerMap;
    }

    /**
     * Deletes list entry "mmeRealmPeerMap", with specified keys.
     * @param realmNameValue Key argument of child.
     * @param hostIdentityValue Key argument of child.
     */
    public void deleteMmeRealmPeerMap(YangString realmNameValue, YangString hostIdentityValue)
            throws JNCException {
        String path = "mme-realm-peer-map[realmName='" + realmNameValue + "'][hostIdentity='" + hostIdentityValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeRealmPeerMap", with specified keys.
     * The keys are specified as strings.
     * @param realmNameValue Key argument of child.
     * @param hostIdentityValue Key argument of child.
     */
    public void deleteMmeRealmPeerMap(String realmNameValue, String hostIdentityValue)
            throws JNCException {
        String path = "mme-realm-peer-map[realmName='" + realmNameValue + "'][hostIdentity='" + hostIdentityValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-diameter-client-instance". */

    /**
     * Gets list entry "mmeDiameterClientInstance", with specified keys.
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeDiameterClientInstance getMmeDiameterClientInstance(YangUInt16 callpServiceIdValue)
            throws JNCException {
        String path = "mme-diameter-client-instance[callpServiceId='" + callpServiceIdValue + "']";
        return (MmeDiameterClientInstance)searchOne(path);
    }

    /**
     * Gets list entry "mmeDiameterClientInstance", with specified keys.
     * The keys are specified as strings.
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeDiameterClientInstance getMmeDiameterClientInstance(String callpServiceIdValue)
            throws JNCException {
        String path = "mme-diameter-client-instance[callpServiceId='" + callpServiceIdValue + "']";
        return (MmeDiameterClientInstance)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-diameter-client-instance".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeDiameterClientInstanceIterator() {
        return new ElementChildrenIterator(children, "mme-diameter-client-instance");
    }

    /**
     * Adds list entry "mmeDiameterClientInstance", using an existing object.
     * @param mmeDiameterClientInstance The object to add.
     * @return The added child.
     */
    public MmeDiameterClientInstance addMmeDiameterClientInstance(MmeDiameterClientInstance mmeDiameterClientInstance)
            throws JNCException {
        insertChild(mmeDiameterClientInstance, childrenNames());
        return mmeDiameterClientInstance;
    }

    /**
     * Adds list entry "mmeDiameterClientInstance", with specified keys.
     * @param callpServiceIdValue Key argument of child.
     * @return The added child.
     */
    public MmeDiameterClientInstance addMmeDiameterClientInstance(YangUInt16 callpServiceIdValue)
            throws JNCException {
        MmeDiameterClientInstance mmeDiameterClientInstance = new MmeDiameterClientInstance(callpServiceIdValue);
        return addMmeDiameterClientInstance(mmeDiameterClientInstance);
    }

    /**
     * Adds list entry "mmeDiameterClientInstance", with specified keys.
     * The keys are specified as strings.
     * @param callpServiceIdValue Key argument of child.
     * @return The added child.
     */
    public MmeDiameterClientInstance addMmeDiameterClientInstance(String callpServiceIdValue)
            throws JNCException {
        MmeDiameterClientInstance mmeDiameterClientInstance = new MmeDiameterClientInstance(callpServiceIdValue);
        return addMmeDiameterClientInstance(mmeDiameterClientInstance);
    }

    /**
     * Adds list entry "mmeDiameterClientInstance".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeDiameterClientInstance addMmeDiameterClientInstance()
            throws JNCException {
        MmeDiameterClientInstance mmeDiameterClientInstance = new MmeDiameterClientInstance();
        insertChild(mmeDiameterClientInstance, childrenNames());
        return mmeDiameterClientInstance;
    }

    /**
     * Deletes list entry "mmeDiameterClientInstance", with specified keys.
     * @param callpServiceIdValue Key argument of child.
     */
    public void deleteMmeDiameterClientInstance(YangUInt16 callpServiceIdValue)
            throws JNCException {
        String path = "mme-diameter-client-instance[callpServiceId='" + callpServiceIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeDiameterClientInstance", with specified keys.
     * The keys are specified as strings.
     * @param callpServiceIdValue Key argument of child.
     */
    public void deleteMmeDiameterClientInstance(String callpServiceIdValue)
            throws JNCException {
        String path = "mme-diameter-client-instance[callpServiceId='" + callpServiceIdValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-avp-mbit-override". */

    /**
     * Gets list entry "mmeAvpMbitOverride", with specified keys.
     * @param avpCodeValue Key argument of child.
     */
    public MmeAvpMbitOverride getMmeAvpMbitOverride(YangUInt16 avpCodeValue)
            throws JNCException {
        String path = "mme-avp-mbit-override[avpCode='" + avpCodeValue + "']";
        return (MmeAvpMbitOverride)searchOne(path);
    }

    /**
     * Gets list entry "mmeAvpMbitOverride", with specified keys.
     * The keys are specified as strings.
     * @param avpCodeValue Key argument of child.
     */
    public MmeAvpMbitOverride getMmeAvpMbitOverride(String avpCodeValue)
            throws JNCException {
        String path = "mme-avp-mbit-override[avpCode='" + avpCodeValue + "']";
        return (MmeAvpMbitOverride)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-avp-mbit-override".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeAvpMbitOverrideIterator() {
        return new ElementChildrenIterator(children, "mme-avp-mbit-override");
    }

    /**
     * Adds list entry "mmeAvpMbitOverride", using an existing object.
     * @param mmeAvpMbitOverride The object to add.
     * @return The added child.
     */
    public MmeAvpMbitOverride addMmeAvpMbitOverride(MmeAvpMbitOverride mmeAvpMbitOverride)
            throws JNCException {
        insertChild(mmeAvpMbitOverride, childrenNames());
        return mmeAvpMbitOverride;
    }

    /**
     * Adds list entry "mmeAvpMbitOverride", with specified keys.
     * @param avpCodeValue Key argument of child.
     * @return The added child.
     */
    public MmeAvpMbitOverride addMmeAvpMbitOverride(YangUInt16 avpCodeValue)
            throws JNCException {
        MmeAvpMbitOverride mmeAvpMbitOverride = new MmeAvpMbitOverride(avpCodeValue);
        return addMmeAvpMbitOverride(mmeAvpMbitOverride);
    }

    /**
     * Adds list entry "mmeAvpMbitOverride", with specified keys.
     * The keys are specified as strings.
     * @param avpCodeValue Key argument of child.
     * @return The added child.
     */
    public MmeAvpMbitOverride addMmeAvpMbitOverride(String avpCodeValue)
            throws JNCException {
        MmeAvpMbitOverride mmeAvpMbitOverride = new MmeAvpMbitOverride(avpCodeValue);
        return addMmeAvpMbitOverride(mmeAvpMbitOverride);
    }

    /**
     * Adds list entry "mmeAvpMbitOverride".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeAvpMbitOverride addMmeAvpMbitOverride() throws JNCException {
        MmeAvpMbitOverride mmeAvpMbitOverride = new MmeAvpMbitOverride();
        insertChild(mmeAvpMbitOverride, childrenNames());
        return mmeAvpMbitOverride;
    }

    /**
     * Deletes list entry "mmeAvpMbitOverride", with specified keys.
     * @param avpCodeValue Key argument of child.
     */
    public void deleteMmeAvpMbitOverride(YangUInt16 avpCodeValue)
            throws JNCException {
        String path = "mme-avp-mbit-override[avpCode='" + avpCodeValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeAvpMbitOverride", with specified keys.
     * The keys are specified as strings.
     * @param avpCodeValue Key argument of child.
     */
    public void deleteMmeAvpMbitOverride(String avpCodeValue)
            throws JNCException {
        String path = "mme-avp-mbit-override[avpCode='" + avpCodeValue + "']";
        delete(path);
    }

    /* Access methods for list child: "peer-oper". */

    /**
     * Gets list entry "peerOper", with specified keys.
     */
    public PeerOper getPeerOper() throws JNCException {
        String path = "peer-oper";
        return (PeerOper)searchOne(path);
    }

    /**
     * Iterator method for the list "peer-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator peerOperIterator() {
        return new ElementChildrenIterator(children, "peer-oper");
    }

    /**
     * Adds list entry "peerOper", using an existing object.
     * @param peerOper The object to add.
     * @return The added child.
     */
    public PeerOper addPeerOper(PeerOper peerOper) throws JNCException {
        insertChild(peerOper, childrenNames());
        return peerOper;
    }

    /**
     * Adds list entry "peerOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public PeerOper addPeerOper() throws JNCException {
        PeerOper peerOper = new PeerOper();
        insertChild(peerOper, childrenNames());
        return peerOper;
    }

    /**
     * Deletes list entry "peerOper", with specified keys.
     */
    public void deletePeerOper() throws JNCException {
        String path = "peer-oper";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeDiameterProfile) mmeDiameterProfile = (MmeDiameterProfile)child;
    }

}
