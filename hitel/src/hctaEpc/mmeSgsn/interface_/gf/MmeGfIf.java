/* 
 * @(#)MmeGfIf.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gf;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gf/mme-gf-if"
 * <p>
 * See line 119 in
 * sgsnScConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeGfIf extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeGfIf object.
     */
    public MmeGfIf() {
        super(Epc.NAMESPACE, "mme-gf-if");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeGfIf clone() {
        return (MmeGfIf)cloneContent(new MmeGfIf());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeGfIf cloneShallow() {
        return (MmeGfIf)cloneShallowContent(new MmeGfIf());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "eir-address",
            "check-imei-timer",
            "check-imei-retry",
            "include-imsi",
        };
    }

    /* Access methods for optional leaf child: "eir-address". */

    /**
     * Gets the value for child leaf "eir-address".
     * @return The value of the leaf.
     */
    public YangString getEirAddressValue() throws JNCException {
        return (YangString)getValue("eir-address");
    }

    /**
     * Sets the value for child leaf "eir-address",
     * using instance of generated typedef class.
     * @param eirAddressValue The value to set.
     * @param eirAddressValue used during instantiation.
     */
    public void setEirAddressValue(YangString eirAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eir-address",
            eirAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "eir-address",
     * using a String value.
     * @param eirAddressValue used during instantiation.
     */
    public void setEirAddressValue(String eirAddressValue) throws JNCException {
        setEirAddressValue(new YangString(eirAddressValue));
    }

    /**
     * Unsets the value for child leaf "eir-address".
     */
    public void unsetEirAddressValue() throws JNCException {
        delete("eir-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "eir-address" leaf will not have a value.
     */
    public void addEirAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "eir-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "eir-address" with operation "replace".
     */
    public void markEirAddressReplace() throws JNCException {
        markLeafReplace("eirAddress");
    }

    /**
     * Marks the leaf "eir-address" with operation "merge".
     */
    public void markEirAddressMerge() throws JNCException {
        markLeafMerge("eirAddress");
    }

    /**
     * Marks the leaf "eir-address" with operation "create".
     */
    public void markEirAddressCreate() throws JNCException {
        markLeafCreate("eirAddress");
    }

    /**
     * Marks the leaf "eir-address" with operation "delete".
     */
    public void markEirAddressDelete() throws JNCException {
        markLeafDelete("eirAddress");
    }

    /* Access methods for optional leaf child: "check-imei-timer". */

    /**
     * Gets the value for child leaf "check-imei-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getCheckImeiTimerValue() throws JNCException {
        YangUInt8 checkImeiTimer = (YangUInt8)getValue("check-imei-timer");
        if (checkImeiTimer == null) {
            checkImeiTimer = new YangUInt8("4");  // default
        }
        return checkImeiTimer;
    }

    /**
     * Sets the value for child leaf "check-imei-timer",
     * using instance of generated typedef class.
     * @param checkImeiTimerValue The value to set.
     * @param checkImeiTimerValue used during instantiation.
     */
    public void setCheckImeiTimerValue(YangUInt8 checkImeiTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "check-imei-timer",
            checkImeiTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "check-imei-timer",
     * using Java primitive values.
     * @param checkImeiTimerValue used during instantiation.
     */
    public void setCheckImeiTimerValue(short checkImeiTimerValue)
            throws JNCException {
        setCheckImeiTimerValue(new YangUInt8(checkImeiTimerValue));
    }

    /**
     * Sets the value for child leaf "check-imei-timer",
     * using a String value.
     * @param checkImeiTimerValue used during instantiation.
     */
    public void setCheckImeiTimerValue(String checkImeiTimerValue)
            throws JNCException {
        setCheckImeiTimerValue(new YangUInt8(checkImeiTimerValue));
    }

    /**
     * Unsets the value for child leaf "check-imei-timer".
     */
    public void unsetCheckImeiTimerValue() throws JNCException {
        delete("check-imei-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "check-imei-timer" leaf will not have a value.
     */
    public void addCheckImeiTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "check-imei-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "check-imei-timer" with operation "replace".
     */
    public void markCheckImeiTimerReplace() throws JNCException {
        markLeafReplace("checkImeiTimer");
    }

    /**
     * Marks the leaf "check-imei-timer" with operation "merge".
     */
    public void markCheckImeiTimerMerge() throws JNCException {
        markLeafMerge("checkImeiTimer");
    }

    /**
     * Marks the leaf "check-imei-timer" with operation "create".
     */
    public void markCheckImeiTimerCreate() throws JNCException {
        markLeafCreate("checkImeiTimer");
    }

    /**
     * Marks the leaf "check-imei-timer" with operation "delete".
     */
    public void markCheckImeiTimerDelete() throws JNCException {
        markLeafDelete("checkImeiTimer");
    }

    /* Access methods for optional leaf child: "check-imei-retry". */

    /**
     * Gets the value for child leaf "check-imei-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getCheckImeiRetryValue() throws JNCException {
        YangUInt8 checkImeiRetry = (YangUInt8)getValue("check-imei-retry");
        if (checkImeiRetry == null) {
            checkImeiRetry = new YangUInt8("0");  // default
        }
        return checkImeiRetry;
    }

    /**
     * Sets the value for child leaf "check-imei-retry",
     * using instance of generated typedef class.
     * @param checkImeiRetryValue The value to set.
     * @param checkImeiRetryValue used during instantiation.
     */
    public void setCheckImeiRetryValue(YangUInt8 checkImeiRetryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "check-imei-retry",
            checkImeiRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "check-imei-retry",
     * using Java primitive values.
     * @param checkImeiRetryValue used during instantiation.
     */
    public void setCheckImeiRetryValue(short checkImeiRetryValue)
            throws JNCException {
        setCheckImeiRetryValue(new YangUInt8(checkImeiRetryValue));
    }

    /**
     * Sets the value for child leaf "check-imei-retry",
     * using a String value.
     * @param checkImeiRetryValue used during instantiation.
     */
    public void setCheckImeiRetryValue(String checkImeiRetryValue)
            throws JNCException {
        setCheckImeiRetryValue(new YangUInt8(checkImeiRetryValue));
    }

    /**
     * Unsets the value for child leaf "check-imei-retry".
     */
    public void unsetCheckImeiRetryValue() throws JNCException {
        delete("check-imei-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "check-imei-retry" leaf will not have a value.
     */
    public void addCheckImeiRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "check-imei-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "check-imei-retry" with operation "replace".
     */
    public void markCheckImeiRetryReplace() throws JNCException {
        markLeafReplace("checkImeiRetry");
    }

    /**
     * Marks the leaf "check-imei-retry" with operation "merge".
     */
    public void markCheckImeiRetryMerge() throws JNCException {
        markLeafMerge("checkImeiRetry");
    }

    /**
     * Marks the leaf "check-imei-retry" with operation "create".
     */
    public void markCheckImeiRetryCreate() throws JNCException {
        markLeafCreate("checkImeiRetry");
    }

    /**
     * Marks the leaf "check-imei-retry" with operation "delete".
     */
    public void markCheckImeiRetryDelete() throws JNCException {
        markLeafDelete("checkImeiRetry");
    }

    /* Access methods for optional leaf child: "include-imsi". */

    /**
     * Gets the value for child leaf "include-imsi".
     * @return The value of the leaf.
     */
    public YangEnumeration getIncludeImsiValue() throws JNCException {
        YangEnumeration includeImsi = (YangEnumeration)getValue("include-imsi");
        if (includeImsi == null) {
            includeImsi = new YangEnumeration("enable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return includeImsi;
    }

    /**
     * Sets the value for child leaf "include-imsi",
     * using instance of generated typedef class.
     * @param includeImsiValue The value to set.
     * @param includeImsiValue used during instantiation.
     */
    public void setIncludeImsiValue(YangEnumeration includeImsiValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "include-imsi",
            includeImsiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "include-imsi",
     * using a String value.
     * @param includeImsiValue used during instantiation.
     */
    public void setIncludeImsiValue(String includeImsiValue)
            throws JNCException {
        setIncludeImsiValue(new YangEnumeration(includeImsiValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "include-imsi".
     */
    public void unsetIncludeImsiValue() throws JNCException {
        delete("include-imsi");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "include-imsi" leaf will not have a value.
     */
    public void addIncludeImsi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "include-imsi",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "include-imsi" with operation "replace".
     */
    public void markIncludeImsiReplace() throws JNCException {
        markLeafReplace("includeImsi");
    }

    /**
     * Marks the leaf "include-imsi" with operation "merge".
     */
    public void markIncludeImsiMerge() throws JNCException {
        markLeafMerge("includeImsi");
    }

    /**
     * Marks the leaf "include-imsi" with operation "create".
     */
    public void markIncludeImsiCreate() throws JNCException {
        markLeafCreate("includeImsi");
    }

    /**
     * Marks the leaf "include-imsi" with operation "delete".
     */
    public void markIncludeImsiDelete() throws JNCException {
        markLeafDelete("includeImsi");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
