/* 
 * @(#)Gr.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;

import Element;

import Epc;

import JNCException;

import MmeGrIf;

import NodeSet;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gr"
 * <p>
 * See line 1766 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Gr extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-gr-if".
     */
    public MmeGrIf mmeGrIf = null;

    /**
     * Constructor for an empty Gr object.
     */
    public Gr() {
        super(Epc.NAMESPACE, "gr");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Gr clone() {
        return (Gr)cloneContent(new Gr());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Gr cloneShallow() {
        return (Gr)cloneShallowContent(new Gr());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-gr-if",
        };
    }

    /* Access methods for container child: "mme-gr-if". */

    /**
     * Adds container entry "mmeGrIf", using an existing object.
     * @param mmeGrIf The object to add.
     * @return The added child.
     */
    public MmeGrIf addMmeGrIf(MmeGrIf mmeGrIf) throws JNCException {
        this.mmeGrIf = mmeGrIf;
        insertChild(mmeGrIf, childrenNames());
        return mmeGrIf;
    }

    /**
     * Adds container entry "mmeGrIf".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeGrIf addMmeGrIf() throws JNCException {
        MmeGrIf mmeGrIf = new MmeGrIf();
        this.mmeGrIf = mmeGrIf;
        insertChild(mmeGrIf, childrenNames());
        return mmeGrIf;
    }

    /**
     * Deletes container entry "mmeGrIf".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeGrIf() throws JNCException {
        this.mmeGrIf = null;
        String path = "mme-gr-if";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeGrIf) mmeGrIf = (MmeGrIf)child;
    }

}
