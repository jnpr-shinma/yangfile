/* 
 * @(#)MmeDiameterClientInstance.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.diameter;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt16;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/diameter/mme-diameter-client-instance"
 * <p>
 * See line 408 in
 * dcConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeDiameterClientInstance extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeDiameterClientInstance object.
     */
    public MmeDiameterClientInstance() {
        super(Epc.NAMESPACE, "mme-diameter-client-instance");
    }

    /**
     * Constructor for an initialized MmeDiameterClientInstance object,
     * 
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeDiameterClientInstance(YangUInt16 callpServiceIdValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-diameter-client-instance");
        Leaf callpServiceId = new Leaf(Epc.NAMESPACE, "callp-service-id");
        callpServiceId.setValue(callpServiceIdValue);
        insertChild(callpServiceId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeDiameterClientInstance object,
     * with String keys.
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeDiameterClientInstance(String callpServiceIdValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-diameter-client-instance");
        Leaf callpServiceId = new Leaf(Epc.NAMESPACE, "callp-service-id");
        callpServiceId.setValue(new YangUInt16(callpServiceIdValue));
        insertChild(callpServiceId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeDiameterClientInstance object,
     * with keys of built in Java types.
     * @param callpServiceIdValue Key argument of child.
     */
    public MmeDiameterClientInstance(int callpServiceIdValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-diameter-client-instance");
        Leaf callpServiceId = new Leaf(Epc.NAMESPACE, "callp-service-id");
        callpServiceId.setValue(new YangUInt16(callpServiceIdValue));
        insertChild(callpServiceId, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeDiameterClientInstance clone() {
        MmeDiameterClientInstance copy;
        try {
            copy = new MmeDiameterClientInstance(getCallpServiceIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeDiameterClientInstance)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeDiameterClientInstance cloneShallow() {
        MmeDiameterClientInstance copy;
        try {
            copy = new MmeDiameterClientInstance(getCallpServiceIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeDiameterClientInstance)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "callp-service-id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "callp-service-id",
            "host-id-prefix",
            "routing-instance1",
            "routing-instance2",
            "ip-address1",
            "ip-address2",
            "port",
            "max-transactions-per-peer",
        };
    }

    /* Access methods for leaf child: "callp-service-id". */

    /**
     * Gets the value for child leaf "callp-service-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getCallpServiceIdValue() throws JNCException {
        return (YangUInt16)getValue("callp-service-id");
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using instance of generated typedef class.
     * @param callpServiceIdValue The value to set.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(YangUInt16 callpServiceIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "callp-service-id",
            callpServiceIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using Java primitive values.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(int callpServiceIdValue)
            throws JNCException {
        setCallpServiceIdValue(new YangUInt16(callpServiceIdValue));
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using a String value.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(String callpServiceIdValue)
            throws JNCException {
        setCallpServiceIdValue(new YangUInt16(callpServiceIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "callp-service-id" leaf will not have a value.
     */
    public void addCallpServiceId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "callp-service-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "host-id-prefix". */

    /**
     * Gets the value for child leaf "host-id-prefix".
     * @return The value of the leaf.
     */
    public YangString getHostIdPrefixValue() throws JNCException {
        return (YangString)getValue("host-id-prefix");
    }

    /**
     * Sets the value for child leaf "host-id-prefix",
     * using instance of generated typedef class.
     * @param hostIdPrefixValue The value to set.
     * @param hostIdPrefixValue used during instantiation.
     */
    public void setHostIdPrefixValue(YangString hostIdPrefixValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "host-id-prefix",
            hostIdPrefixValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "host-id-prefix",
     * using a String value.
     * @param hostIdPrefixValue used during instantiation.
     */
    public void setHostIdPrefixValue(String hostIdPrefixValue)
            throws JNCException {
        setHostIdPrefixValue(new YangString(hostIdPrefixValue));
    }

    /**
     * Unsets the value for child leaf "host-id-prefix".
     */
    public void unsetHostIdPrefixValue() throws JNCException {
        delete("host-id-prefix");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "host-id-prefix" leaf will not have a value.
     */
    public void addHostIdPrefix() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "host-id-prefix",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "host-id-prefix" with operation "replace".
     */
    public void markHostIdPrefixReplace() throws JNCException {
        markLeafReplace("hostIdPrefix");
    }

    /**
     * Marks the leaf "host-id-prefix" with operation "merge".
     */
    public void markHostIdPrefixMerge() throws JNCException {
        markLeafMerge("hostIdPrefix");
    }

    /**
     * Marks the leaf "host-id-prefix" with operation "create".
     */
    public void markHostIdPrefixCreate() throws JNCException {
        markLeafCreate("hostIdPrefix");
    }

    /**
     * Marks the leaf "host-id-prefix" with operation "delete".
     */
    public void markHostIdPrefixDelete() throws JNCException {
        markLeafDelete("hostIdPrefix");
    }

    /* Access methods for optional leaf child: "routing-instance1". */

    /**
     * Gets the value for child leaf "routing-instance1".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstance1Value() throws JNCException {
        return (YangString)getValue("routing-instance1");
    }

    /**
     * Sets the value for child leaf "routing-instance1",
     * using instance of generated typedef class.
     * @param routingInstance1Value The value to set.
     * @param routingInstance1Value used during instantiation.
     */
    public void setRoutingInstance1Value(YangString routingInstance1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance1",
            routingInstance1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance1",
     * using a String value.
     * @param routingInstance1Value used during instantiation.
     */
    public void setRoutingInstance1Value(String routingInstance1Value)
            throws JNCException {
        setRoutingInstance1Value(new YangString(routingInstance1Value));
    }

    /**
     * Unsets the value for child leaf "routing-instance1".
     */
    public void unsetRoutingInstance1Value() throws JNCException {
        delete("routing-instance1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance1" leaf will not have a value.
     */
    public void addRoutingInstance1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance1" with operation "replace".
     */
    public void markRoutingInstance1Replace() throws JNCException {
        markLeafReplace("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "merge".
     */
    public void markRoutingInstance1Merge() throws JNCException {
        markLeafMerge("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "create".
     */
    public void markRoutingInstance1Create() throws JNCException {
        markLeafCreate("routingInstance1");
    }

    /**
     * Marks the leaf "routing-instance1" with operation "delete".
     */
    public void markRoutingInstance1Delete() throws JNCException {
        markLeafDelete("routingInstance1");
    }

    /* Access methods for optional leaf child: "routing-instance2". */

    /**
     * Gets the value for child leaf "routing-instance2".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstance2Value() throws JNCException {
        return (YangString)getValue("routing-instance2");
    }

    /**
     * Sets the value for child leaf "routing-instance2",
     * using instance of generated typedef class.
     * @param routingInstance2Value The value to set.
     * @param routingInstance2Value used during instantiation.
     */
    public void setRoutingInstance2Value(YangString routingInstance2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance2",
            routingInstance2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance2",
     * using a String value.
     * @param routingInstance2Value used during instantiation.
     */
    public void setRoutingInstance2Value(String routingInstance2Value)
            throws JNCException {
        setRoutingInstance2Value(new YangString(routingInstance2Value));
    }

    /**
     * Unsets the value for child leaf "routing-instance2".
     */
    public void unsetRoutingInstance2Value() throws JNCException {
        delete("routing-instance2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance2" leaf will not have a value.
     */
    public void addRoutingInstance2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance2" with operation "replace".
     */
    public void markRoutingInstance2Replace() throws JNCException {
        markLeafReplace("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "merge".
     */
    public void markRoutingInstance2Merge() throws JNCException {
        markLeafMerge("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "create".
     */
    public void markRoutingInstance2Create() throws JNCException {
        markLeafCreate("routingInstance2");
    }

    /**
     * Marks the leaf "routing-instance2" with operation "delete".
     */
    public void markRoutingInstance2Delete() throws JNCException {
        markLeafDelete("routingInstance2");
    }

    /* Access methods for optional leaf child: "ip-address1". */

    /**
     * Gets the value for child leaf "ip-address1".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddress1Value() throws JNCException {
        return (IpAddress)getValue("ip-address1");
    }

    /**
     * Sets the value for child leaf "ip-address1",
     * using a JNC type value.
     * @param ipAddress1Value The value to set.
     * @param ipAddress1Value used during instantiation.
     */
    public void setIpAddress1Value(IpAddress ipAddress1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address1",
            ipAddress1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address1",
     * using a String value.
     * @param ipAddress1Value used during instantiation.
     */
    public void setIpAddress1Value(String ipAddress1Value) throws JNCException {
        setIpAddress1Value(new IpAddress(ipAddress1Value));
    }

    /**
     * Unsets the value for child leaf "ip-address1".
     */
    public void unsetIpAddress1Value() throws JNCException {
        delete("ip-address1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address1" leaf will not have a value.
     */
    public void addIpAddress1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address1" with operation "replace".
     */
    public void markIpAddress1Replace() throws JNCException {
        markLeafReplace("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "merge".
     */
    public void markIpAddress1Merge() throws JNCException {
        markLeafMerge("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "create".
     */
    public void markIpAddress1Create() throws JNCException {
        markLeafCreate("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "delete".
     */
    public void markIpAddress1Delete() throws JNCException {
        markLeafDelete("ipAddress1");
    }

    /* Access methods for optional leaf child: "ip-address2". */

    /**
     * Gets the value for child leaf "ip-address2".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddress2Value() throws JNCException {
        IpAddress ipAddress2 = (IpAddress)getValue("ip-address2");
        if (ipAddress2 == null) {
            ipAddress2 = new IpAddress("0.0.0.0");  // default
        }
        return ipAddress2;
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a JNC type value.
     * @param ipAddress2Value The value to set.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(IpAddress ipAddress2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            ipAddress2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a String value.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(String ipAddress2Value) throws JNCException {
        setIpAddress2Value(new IpAddress(ipAddress2Value));
    }

    /**
     * Unsets the value for child leaf "ip-address2".
     */
    public void unsetIpAddress2Value() throws JNCException {
        delete("ip-address2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address2" leaf will not have a value.
     */
    public void addIpAddress2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address2" with operation "replace".
     */
    public void markIpAddress2Replace() throws JNCException {
        markLeafReplace("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "merge".
     */
    public void markIpAddress2Merge() throws JNCException {
        markLeafMerge("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "create".
     */
    public void markIpAddress2Create() throws JNCException {
        markLeafCreate("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "delete".
     */
    public void markIpAddress2Delete() throws JNCException {
        markLeafDelete("ipAddress2");
    }

    /* Access methods for optional leaf child: "port". */

    /**
     * Gets the value for child leaf "port".
     * @return The value of the leaf.
     */
    public YangUInt16 getPortValue() throws JNCException {
        YangUInt16 port = (YangUInt16)getValue("port");
        if (port == null) {
            port = new YangUInt16("11111");  // default
        }
        return port;
    }

    /**
     * Sets the value for child leaf "port",
     * using instance of generated typedef class.
     * @param portValue The value to set.
     * @param portValue used during instantiation.
     */
    public void setPortValue(YangUInt16 portValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port",
            portValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "port",
     * using Java primitive values.
     * @param portValue used during instantiation.
     */
    public void setPortValue(int portValue) throws JNCException {
        setPortValue(new YangUInt16(portValue));
    }

    /**
     * Sets the value for child leaf "port",
     * using a String value.
     * @param portValue used during instantiation.
     */
    public void setPortValue(String portValue) throws JNCException {
        setPortValue(new YangUInt16(portValue));
    }

    /**
     * Unsets the value for child leaf "port".
     */
    public void unsetPortValue() throws JNCException {
        delete("port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "port" leaf will not have a value.
     */
    public void addPort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "port" with operation "replace".
     */
    public void markPortReplace() throws JNCException {
        markLeafReplace("port");
    }

    /**
     * Marks the leaf "port" with operation "merge".
     */
    public void markPortMerge() throws JNCException {
        markLeafMerge("port");
    }

    /**
     * Marks the leaf "port" with operation "create".
     */
    public void markPortCreate() throws JNCException {
        markLeafCreate("port");
    }

    /**
     * Marks the leaf "port" with operation "delete".
     */
    public void markPortDelete() throws JNCException {
        markLeafDelete("port");
    }

    /* Access methods for optional leaf child: "max-transactions-per-peer". */

    /**
     * Gets the value for child leaf "max-transactions-per-peer".
     * @return The value of the leaf.
     */
    public YangUInt16 getMaxTransactionsPerPeerValue() throws JNCException {
        YangUInt16 maxTransactionsPerPeer = (YangUInt16)getValue("max-transactions-per-peer");
        if (maxTransactionsPerPeer == null) {
            maxTransactionsPerPeer = new YangUInt16("5000");  // default
        }
        return maxTransactionsPerPeer;
    }

    /**
     * Sets the value for child leaf "max-transactions-per-peer",
     * using instance of generated typedef class.
     * @param maxTransactionsPerPeerValue The value to set.
     * @param maxTransactionsPerPeerValue used during instantiation.
     */
    public void setMaxTransactionsPerPeerValue(YangUInt16 maxTransactionsPerPeerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-transactions-per-peer",
            maxTransactionsPerPeerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-transactions-per-peer",
     * using Java primitive values.
     * @param maxTransactionsPerPeerValue used during instantiation.
     */
    public void setMaxTransactionsPerPeerValue(int maxTransactionsPerPeerValue)
            throws JNCException {
        setMaxTransactionsPerPeerValue(new YangUInt16(maxTransactionsPerPeerValue));
    }

    /**
     * Sets the value for child leaf "max-transactions-per-peer",
     * using a String value.
     * @param maxTransactionsPerPeerValue used during instantiation.
     */
    public void setMaxTransactionsPerPeerValue(String maxTransactionsPerPeerValue)
            throws JNCException {
        setMaxTransactionsPerPeerValue(new YangUInt16(maxTransactionsPerPeerValue));
    }

    /**
     * Unsets the value for child leaf "max-transactions-per-peer".
     */
    public void unsetMaxTransactionsPerPeerValue() throws JNCException {
        delete("max-transactions-per-peer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-transactions-per-peer" leaf will not have a value.
     */
    public void addMaxTransactionsPerPeer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-transactions-per-peer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-transactions-per-peer" with operation "replace".
     */
    public void markMaxTransactionsPerPeerReplace() throws JNCException {
        markLeafReplace("maxTransactionsPerPeer");
    }

    /**
     * Marks the leaf "max-transactions-per-peer" with operation "merge".
     */
    public void markMaxTransactionsPerPeerMerge() throws JNCException {
        markLeafMerge("maxTransactionsPerPeer");
    }

    /**
     * Marks the leaf "max-transactions-per-peer" with operation "create".
     */
    public void markMaxTransactionsPerPeerCreate() throws JNCException {
        markLeafCreate("maxTransactionsPerPeer");
    }

    /**
     * Marks the leaf "max-transactions-per-peer" with operation "delete".
     */
    public void markMaxTransactionsPerPeerDelete() throws JNCException {
        markLeafDelete("maxTransactionsPerPeer");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
