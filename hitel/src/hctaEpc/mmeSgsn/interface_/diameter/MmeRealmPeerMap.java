/* 
 * @(#)MmeRealmPeerMap.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.diameter;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/diameter/mme-realm-peer-map"
 * <p>
 * See line 191 in
 * dcConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeRealmPeerMap extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeRealmPeerMap object.
     */
    public MmeRealmPeerMap() {
        super(Epc.NAMESPACE, "mme-realm-peer-map");
    }

    /**
     * Constructor for an initialized MmeRealmPeerMap object,
     * 
     * @param realmNameValue Key argument of child.
     * @param hostIdentityValue Key argument of child.
     */
    public MmeRealmPeerMap(YangString realmNameValue, YangString hostIdentityValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-realm-peer-map");
        Leaf realmName = new Leaf(Epc.NAMESPACE, "realm-name");
        realmName.setValue(realmNameValue);
        insertChild(realmName, childrenNames());
        Leaf hostIdentity = new Leaf(Epc.NAMESPACE, "host-identity");
        hostIdentity.setValue(hostIdentityValue);
        insertChild(hostIdentity, childrenNames());
    }

    /**
     * Constructor for an initialized MmeRealmPeerMap object,
     * with String keys.
     * @param realmNameValue Key argument of child.
     * @param hostIdentityValue Key argument of child.
     */
    public MmeRealmPeerMap(String realmNameValue, String hostIdentityValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-realm-peer-map");
        Leaf realmName = new Leaf(Epc.NAMESPACE, "realm-name");
        realmName.setValue(new YangString(realmNameValue));
        insertChild(realmName, childrenNames());
        Leaf hostIdentity = new Leaf(Epc.NAMESPACE, "host-identity");
        hostIdentity.setValue(new YangString(hostIdentityValue));
        insertChild(hostIdentity, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeRealmPeerMap clone() {
        MmeRealmPeerMap copy;
        try {
            copy = new MmeRealmPeerMap(getRealmNameValue().toString(), getHostIdentityValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeRealmPeerMap)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeRealmPeerMap cloneShallow() {
        MmeRealmPeerMap copy;
        try {
            copy = new MmeRealmPeerMap(getRealmNameValue().toString(), getHostIdentityValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeRealmPeerMap)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "realm-name",
            "host-identity",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "realm-name",
            "host-identity",
            "activity-role",
        };
    }

    /* Access methods for leaf child: "realm-name". */

    /**
     * Gets the value for child leaf "realm-name".
     * @return The value of the leaf.
     */
    public YangString getRealmNameValue() throws JNCException {
        return (YangString)getValue("realm-name");
    }

    /**
     * Sets the value for child leaf "realm-name",
     * using instance of generated typedef class.
     * @param realmNameValue The value to set.
     * @param realmNameValue used during instantiation.
     */
    public void setRealmNameValue(YangString realmNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "realm-name",
            realmNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "realm-name",
     * using a String value.
     * @param realmNameValue used during instantiation.
     */
    public void setRealmNameValue(String realmNameValue) throws JNCException {
        setRealmNameValue(new YangString(realmNameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "realm-name" leaf will not have a value.
     */
    public void addRealmName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "realm-name",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "host-identity". */

    /**
     * Gets the value for child leaf "host-identity".
     * @return The value of the leaf.
     */
    public YangString getHostIdentityValue() throws JNCException {
        return (YangString)getValue("host-identity");
    }

    /**
     * Sets the value for child leaf "host-identity",
     * using instance of generated typedef class.
     * @param hostIdentityValue The value to set.
     * @param hostIdentityValue used during instantiation.
     */
    public void setHostIdentityValue(YangString hostIdentityValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "host-identity",
            hostIdentityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "host-identity",
     * using a String value.
     * @param hostIdentityValue used during instantiation.
     */
    public void setHostIdentityValue(String hostIdentityValue)
            throws JNCException {
        setHostIdentityValue(new YangString(hostIdentityValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "host-identity" leaf will not have a value.
     */
    public void addHostIdentity() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "host-identity",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "activity-role". */

    /**
     * Gets the value for child leaf "activity-role".
     * @return The value of the leaf.
     */
    public YangEnumeration getActivityRoleValue() throws JNCException {
        YangEnumeration activityRole = (YangEnumeration)getValue("activity-role");
        if (activityRole == null) {
            activityRole = new YangEnumeration("primary", new String[] {  // default
                "primary",
                "secondary",
            });
        }
        return activityRole;
    }

    /**
     * Sets the value for child leaf "activity-role",
     * using instance of generated typedef class.
     * @param activityRoleValue The value to set.
     * @param activityRoleValue used during instantiation.
     */
    public void setActivityRoleValue(YangEnumeration activityRoleValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "activity-role",
            activityRoleValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "activity-role",
     * using a String value.
     * @param activityRoleValue used during instantiation.
     */
    public void setActivityRoleValue(String activityRoleValue)
            throws JNCException {
        setActivityRoleValue(new YangEnumeration(activityRoleValue, new String[] {
             "primary",
             "secondary",
        }));
    }

    /**
     * Unsets the value for child leaf "activity-role".
     */
    public void unsetActivityRoleValue() throws JNCException {
        delete("activity-role");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "activity-role" leaf will not have a value.
     */
    public void addActivityRole() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "activity-role",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "activity-role" with operation "replace".
     */
    public void markActivityRoleReplace() throws JNCException {
        markLeafReplace("activityRole");
    }

    /**
     * Marks the leaf "activity-role" with operation "merge".
     */
    public void markActivityRoleMerge() throws JNCException {
        markLeafMerge("activityRole");
    }

    /**
     * Marks the leaf "activity-role" with operation "create".
     */
    public void markActivityRoleCreate() throws JNCException {
        markLeafCreate("activityRole");
    }

    /**
     * Marks the leaf "activity-role" with operation "delete".
     */
    public void markActivityRoleDelete() throws JNCException {
        markLeafDelete("activityRole");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
