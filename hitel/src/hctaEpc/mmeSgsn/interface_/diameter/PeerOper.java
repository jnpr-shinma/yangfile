/* 
 * @(#)PeerOper.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.diameter;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/diameter/peer-oper"
 * <p>
 * See line 42 in
 * dcCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class PeerOper extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty PeerOper object.
     */
    public PeerOper() {
        super(Epc.NAMESPACE, "peer-oper");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public PeerOper clone() {
        return (PeerOper)cloneContent(new PeerOper());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public PeerOper cloneShallow() {
        return (PeerOper)cloneShallowContent(new PeerOper());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "host-identity",
            "ip-address",
            "ip-address2",
            "port-number",
            "status-str",
            "process-name",
            "negotiated-app-id",
        };
    }

    /* Access methods for optional leaf child: "host-identity". */

    /**
     * Gets the value for child leaf "host-identity".
     * @return The value of the leaf.
     */
    public YangString getHostIdentityValue() throws JNCException {
        return (YangString)getValue("host-identity");
    }

    /**
     * Sets the value for child leaf "host-identity",
     * using instance of generated typedef class.
     * @param hostIdentityValue The value to set.
     * @param hostIdentityValue used during instantiation.
     */
    public void setHostIdentityValue(YangString hostIdentityValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "host-identity",
            hostIdentityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "host-identity",
     * using a String value.
     * @param hostIdentityValue used during instantiation.
     */
    public void setHostIdentityValue(String hostIdentityValue)
            throws JNCException {
        setHostIdentityValue(new YangString(hostIdentityValue));
    }

    /**
     * Unsets the value for child leaf "host-identity".
     */
    public void unsetHostIdentityValue() throws JNCException {
        delete("host-identity");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "host-identity" leaf will not have a value.
     */
    public void addHostIdentity() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "host-identity",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "host-identity" with operation "replace".
     */
    public void markHostIdentityReplace() throws JNCException {
        markLeafReplace("hostIdentity");
    }

    /**
     * Marks the leaf "host-identity" with operation "merge".
     */
    public void markHostIdentityMerge() throws JNCException {
        markLeafMerge("hostIdentity");
    }

    /**
     * Marks the leaf "host-identity" with operation "create".
     */
    public void markHostIdentityCreate() throws JNCException {
        markLeafCreate("hostIdentity");
    }

    /**
     * Marks the leaf "host-identity" with operation "delete".
     */
    public void markHostIdentityDelete() throws JNCException {
        markLeafDelete("hostIdentity");
    }

    /* Access methods for optional leaf child: "ip-address". */

    /**
     * Gets the value for child leaf "ip-address".
     * @return The value of the leaf.
     */
    public YangString getIpAddressValue() throws JNCException {
        return (YangString)getValue("ip-address");
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using instance of generated typedef class.
     * @param ipAddressValue The value to set.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(YangString ipAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            ipAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a String value.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(String ipAddressValue) throws JNCException {
        setIpAddressValue(new YangString(ipAddressValue));
    }

    /**
     * Unsets the value for child leaf "ip-address".
     */
    public void unsetIpAddressValue() throws JNCException {
        delete("ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address" leaf will not have a value.
     */
    public void addIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address" with operation "replace".
     */
    public void markIpAddressReplace() throws JNCException {
        markLeafReplace("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "merge".
     */
    public void markIpAddressMerge() throws JNCException {
        markLeafMerge("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "create".
     */
    public void markIpAddressCreate() throws JNCException {
        markLeafCreate("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "delete".
     */
    public void markIpAddressDelete() throws JNCException {
        markLeafDelete("ipAddress");
    }

    /* Access methods for optional leaf child: "ip-address2". */

    /**
     * Gets the value for child leaf "ip-address2".
     * @return The value of the leaf.
     */
    public YangString getIpAddress2Value() throws JNCException {
        return (YangString)getValue("ip-address2");
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using instance of generated typedef class.
     * @param ipAddress2Value The value to set.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(YangString ipAddress2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            ipAddress2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a String value.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(String ipAddress2Value) throws JNCException {
        setIpAddress2Value(new YangString(ipAddress2Value));
    }

    /**
     * Unsets the value for child leaf "ip-address2".
     */
    public void unsetIpAddress2Value() throws JNCException {
        delete("ip-address2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address2" leaf will not have a value.
     */
    public void addIpAddress2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address2" with operation "replace".
     */
    public void markIpAddress2Replace() throws JNCException {
        markLeafReplace("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "merge".
     */
    public void markIpAddress2Merge() throws JNCException {
        markLeafMerge("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "create".
     */
    public void markIpAddress2Create() throws JNCException {
        markLeafCreate("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "delete".
     */
    public void markIpAddress2Delete() throws JNCException {
        markLeafDelete("ipAddress2");
    }

    /* Access methods for optional leaf child: "port-number". */

    /**
     * Gets the value for child leaf "port-number".
     * @return The value of the leaf.
     */
    public YangUInt32 getPortNumberValue() throws JNCException {
        return (YangUInt32)getValue("port-number");
    }

    /**
     * Sets the value for child leaf "port-number",
     * using instance of generated typedef class.
     * @param portNumberValue The value to set.
     * @param portNumberValue used during instantiation.
     */
    public void setPortNumberValue(YangUInt32 portNumberValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port-number",
            portNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "port-number",
     * using Java primitive values.
     * @param portNumberValue used during instantiation.
     */
    public void setPortNumberValue(long portNumberValue) throws JNCException {
        setPortNumberValue(new YangUInt32(portNumberValue));
    }

    /**
     * Sets the value for child leaf "port-number",
     * using a String value.
     * @param portNumberValue used during instantiation.
     */
    public void setPortNumberValue(String portNumberValue) throws JNCException {
        setPortNumberValue(new YangUInt32(portNumberValue));
    }

    /**
     * Unsets the value for child leaf "port-number".
     */
    public void unsetPortNumberValue() throws JNCException {
        delete("port-number");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "port-number" leaf will not have a value.
     */
    public void addPortNumber() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port-number",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "port-number" with operation "replace".
     */
    public void markPortNumberReplace() throws JNCException {
        markLeafReplace("portNumber");
    }

    /**
     * Marks the leaf "port-number" with operation "merge".
     */
    public void markPortNumberMerge() throws JNCException {
        markLeafMerge("portNumber");
    }

    /**
     * Marks the leaf "port-number" with operation "create".
     */
    public void markPortNumberCreate() throws JNCException {
        markLeafCreate("portNumber");
    }

    /**
     * Marks the leaf "port-number" with operation "delete".
     */
    public void markPortNumberDelete() throws JNCException {
        markLeafDelete("portNumber");
    }

    /* Access methods for optional leaf child: "status-str". */

    /**
     * Gets the value for child leaf "status-str".
     * @return The value of the leaf.
     */
    public YangString getStatusStrValue() throws JNCException {
        return (YangString)getValue("status-str");
    }

    /**
     * Sets the value for child leaf "status-str",
     * using instance of generated typedef class.
     * @param statusStrValue The value to set.
     * @param statusStrValue used during instantiation.
     */
    public void setStatusStrValue(YangString statusStrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-str",
            statusStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-str",
     * using a String value.
     * @param statusStrValue used during instantiation.
     */
    public void setStatusStrValue(String statusStrValue) throws JNCException {
        setStatusStrValue(new YangString(statusStrValue));
    }

    /**
     * Unsets the value for child leaf "status-str".
     */
    public void unsetStatusStrValue() throws JNCException {
        delete("status-str");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-str" leaf will not have a value.
     */
    public void addStatusStr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-str",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-str" with operation "replace".
     */
    public void markStatusStrReplace() throws JNCException {
        markLeafReplace("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "merge".
     */
    public void markStatusStrMerge() throws JNCException {
        markLeafMerge("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "create".
     */
    public void markStatusStrCreate() throws JNCException {
        markLeafCreate("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "delete".
     */
    public void markStatusStrDelete() throws JNCException {
        markLeafDelete("statusStr");
    }

    /* Access methods for optional leaf child: "process-name". */

    /**
     * Gets the value for child leaf "process-name".
     * @return The value of the leaf.
     */
    public YangString getProcessNameValue() throws JNCException {
        return (YangString)getValue("process-name");
    }

    /**
     * Sets the value for child leaf "process-name",
     * using instance of generated typedef class.
     * @param processNameValue The value to set.
     * @param processNameValue used during instantiation.
     */
    public void setProcessNameValue(YangString processNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "process-name",
            processNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "process-name",
     * using a String value.
     * @param processNameValue used during instantiation.
     */
    public void setProcessNameValue(String processNameValue)
            throws JNCException {
        setProcessNameValue(new YangString(processNameValue));
    }

    /**
     * Unsets the value for child leaf "process-name".
     */
    public void unsetProcessNameValue() throws JNCException {
        delete("process-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "process-name" leaf will not have a value.
     */
    public void addProcessName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "process-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "process-name" with operation "replace".
     */
    public void markProcessNameReplace() throws JNCException {
        markLeafReplace("processName");
    }

    /**
     * Marks the leaf "process-name" with operation "merge".
     */
    public void markProcessNameMerge() throws JNCException {
        markLeafMerge("processName");
    }

    /**
     * Marks the leaf "process-name" with operation "create".
     */
    public void markProcessNameCreate() throws JNCException {
        markLeafCreate("processName");
    }

    /**
     * Marks the leaf "process-name" with operation "delete".
     */
    public void markProcessNameDelete() throws JNCException {
        markLeafDelete("processName");
    }

    /* Access methods for optional leaf child: "negotiated-app-id". */

    /**
     * Gets the value for child leaf "negotiated-app-id".
     * @return The value of the leaf.
     */
    public YangString getNegotiatedAppIdValue() throws JNCException {
        return (YangString)getValue("negotiated-app-id");
    }

    /**
     * Sets the value for child leaf "negotiated-app-id",
     * using instance of generated typedef class.
     * @param negotiatedAppIdValue The value to set.
     * @param negotiatedAppIdValue used during instantiation.
     */
    public void setNegotiatedAppIdValue(YangString negotiatedAppIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "negotiated-app-id",
            negotiatedAppIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "negotiated-app-id",
     * using a String value.
     * @param negotiatedAppIdValue used during instantiation.
     */
    public void setNegotiatedAppIdValue(String negotiatedAppIdValue)
            throws JNCException {
        setNegotiatedAppIdValue(new YangString(negotiatedAppIdValue));
    }

    /**
     * Unsets the value for child leaf "negotiated-app-id".
     */
    public void unsetNegotiatedAppIdValue() throws JNCException {
        delete("negotiated-app-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "negotiated-app-id" leaf will not have a value.
     */
    public void addNegotiatedAppId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "negotiated-app-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "negotiated-app-id" with operation "replace".
     */
    public void markNegotiatedAppIdReplace() throws JNCException {
        markLeafReplace("negotiatedAppId");
    }

    /**
     * Marks the leaf "negotiated-app-id" with operation "merge".
     */
    public void markNegotiatedAppIdMerge() throws JNCException {
        markLeafMerge("negotiatedAppId");
    }

    /**
     * Marks the leaf "negotiated-app-id" with operation "create".
     */
    public void markNegotiatedAppIdCreate() throws JNCException {
        markLeafCreate("negotiatedAppId");
    }

    /**
     * Marks the leaf "negotiated-app-id" with operation "delete".
     */
    public void markNegotiatedAppIdDelete() throws JNCException {
        markLeafDelete("negotiatedAppId");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
