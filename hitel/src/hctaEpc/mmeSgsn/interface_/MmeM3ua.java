/* 
 * @(#)MmeM3ua.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/mme-m3ua"
 * <p>
 * See line 331 in
 * sigtranConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeM3ua extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeM3ua object.
     */
    public MmeM3ua() {
        super(Epc.NAMESPACE, "mme-m3ua");
    }

    /**
     * Constructor for an initialized MmeM3ua object,
     * 
     * @param nameValue Key argument of child.
     */
    public MmeM3ua(YangString nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-m3ua");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized MmeM3ua object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public MmeM3ua(String nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-m3ua");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeM3ua clone() {
        MmeM3ua copy;
        try {
            copy = new MmeM3ua(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeM3ua)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeM3ua cloneShallow() {
        MmeM3ua copy;
        try {
            copy = new MmeM3ua(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeM3ua)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "sctp-profile",
            "audit-interval",
            "multiple-network-appearances",
            "max-deactivate-attempts",
            "fsm-timeout",
            "network-indicator",
            "cong-onset-level1",
            "cong-abatement-level1",
            "cong-onset-level2",
            "cong-abatement-level2",
            "cong-onset-level3",
            "cong-abatement-level3",
            "cong-report-frequency",
            "reconnect-timer",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "sctp-profile". */

    /**
     * Gets the value for child leaf "sctp-profile".
     * @return The value of the leaf.
     */
    public YangString getSctpProfileValue() throws JNCException {
        return (YangString)getValue("sctp-profile");
    }

    /**
     * Sets the value for child leaf "sctp-profile",
     * using instance of generated typedef class.
     * @param sctpProfileValue The value to set.
     * @param sctpProfileValue used during instantiation.
     */
    public void setSctpProfileValue(YangString sctpProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-profile",
            sctpProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sctp-profile",
     * using a String value.
     * @param sctpProfileValue used during instantiation.
     */
    public void setSctpProfileValue(String sctpProfileValue)
            throws JNCException {
        setSctpProfileValue(new YangString(sctpProfileValue));
    }

    /**
     * Unsets the value for child leaf "sctp-profile".
     */
    public void unsetSctpProfileValue() throws JNCException {
        delete("sctp-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sctp-profile" leaf will not have a value.
     */
    public void addSctpProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sctp-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sctp-profile" with operation "replace".
     */
    public void markSctpProfileReplace() throws JNCException {
        markLeafReplace("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "merge".
     */
    public void markSctpProfileMerge() throws JNCException {
        markLeafMerge("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "create".
     */
    public void markSctpProfileCreate() throws JNCException {
        markLeafCreate("sctpProfile");
    }

    /**
     * Marks the leaf "sctp-profile" with operation "delete".
     */
    public void markSctpProfileDelete() throws JNCException {
        markLeafDelete("sctpProfile");
    }

    /* Access methods for optional leaf child: "audit-interval". */

    /**
     * Gets the value for child leaf "audit-interval".
     * @return The value of the leaf.
     */
    public YangUInt32 getAuditIntervalValue() throws JNCException {
        YangUInt32 auditInterval = (YangUInt32)getValue("audit-interval");
        if (auditInterval == null) {
            auditInterval = new YangUInt32("30000");  // default
        }
        return auditInterval;
    }

    /**
     * Sets the value for child leaf "audit-interval",
     * using instance of generated typedef class.
     * @param auditIntervalValue The value to set.
     * @param auditIntervalValue used during instantiation.
     */
    public void setAuditIntervalValue(YangUInt32 auditIntervalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "audit-interval",
            auditIntervalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "audit-interval",
     * using Java primitive values.
     * @param auditIntervalValue used during instantiation.
     */
    public void setAuditIntervalValue(long auditIntervalValue)
            throws JNCException {
        setAuditIntervalValue(new YangUInt32(auditIntervalValue));
    }

    /**
     * Sets the value for child leaf "audit-interval",
     * using a String value.
     * @param auditIntervalValue used during instantiation.
     */
    public void setAuditIntervalValue(String auditIntervalValue)
            throws JNCException {
        setAuditIntervalValue(new YangUInt32(auditIntervalValue));
    }

    /**
     * Unsets the value for child leaf "audit-interval".
     */
    public void unsetAuditIntervalValue() throws JNCException {
        delete("audit-interval");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "audit-interval" leaf will not have a value.
     */
    public void addAuditInterval() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "audit-interval",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "audit-interval" with operation "replace".
     */
    public void markAuditIntervalReplace() throws JNCException {
        markLeafReplace("auditInterval");
    }

    /**
     * Marks the leaf "audit-interval" with operation "merge".
     */
    public void markAuditIntervalMerge() throws JNCException {
        markLeafMerge("auditInterval");
    }

    /**
     * Marks the leaf "audit-interval" with operation "create".
     */
    public void markAuditIntervalCreate() throws JNCException {
        markLeafCreate("auditInterval");
    }

    /**
     * Marks the leaf "audit-interval" with operation "delete".
     */
    public void markAuditIntervalDelete() throws JNCException {
        markLeafDelete("auditInterval");
    }

    /* Access methods for optional leaf child: "multiple-network-appearances". */

    /**
     * Gets the value for child leaf "multiple-network-appearances".
     * @return The value of the leaf.
     */
    public YangEnumeration getMultipleNetworkAppearancesValue()
            throws JNCException {
        YangEnumeration multipleNetworkAppearances = (YangEnumeration)getValue("multiple-network-appearances");
        if (multipleNetworkAppearances == null) {
            multipleNetworkAppearances = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return multipleNetworkAppearances;
    }

    /**
     * Sets the value for child leaf "multiple-network-appearances",
     * using instance of generated typedef class.
     * @param multipleNetworkAppearancesValue The value to set.
     * @param multipleNetworkAppearancesValue used during instantiation.
     */
    public void setMultipleNetworkAppearancesValue(YangEnumeration multipleNetworkAppearancesValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "multiple-network-appearances",
            multipleNetworkAppearancesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "multiple-network-appearances",
     * using a String value.
     * @param multipleNetworkAppearancesValue used during instantiation.
     */
    public void setMultipleNetworkAppearancesValue(String multipleNetworkAppearancesValue)
            throws JNCException {
        setMultipleNetworkAppearancesValue(new YangEnumeration(multipleNetworkAppearancesValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "multiple-network-appearances".
     */
    public void unsetMultipleNetworkAppearancesValue() throws JNCException {
        delete("multiple-network-appearances");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "multiple-network-appearances" leaf will not have a value.
     */
    public void addMultipleNetworkAppearances() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "multiple-network-appearances",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "multiple-network-appearances" with operation "replace".
     */
    public void markMultipleNetworkAppearancesReplace() throws JNCException {
        markLeafReplace("multipleNetworkAppearances");
    }

    /**
     * Marks the leaf "multiple-network-appearances" with operation "merge".
     */
    public void markMultipleNetworkAppearancesMerge() throws JNCException {
        markLeafMerge("multipleNetworkAppearances");
    }

    /**
     * Marks the leaf "multiple-network-appearances" with operation "create".
     */
    public void markMultipleNetworkAppearancesCreate() throws JNCException {
        markLeafCreate("multipleNetworkAppearances");
    }

    /**
     * Marks the leaf "multiple-network-appearances" with operation "delete".
     */
    public void markMultipleNetworkAppearancesDelete() throws JNCException {
        markLeafDelete("multipleNetworkAppearances");
    }

    /* Access methods for optional leaf child: "max-deactivate-attempts". */

    /**
     * Gets the value for child leaf "max-deactivate-attempts".
     * @return The value of the leaf.
     */
    public YangUInt8 getMaxDeactivateAttemptsValue() throws JNCException {
        YangUInt8 maxDeactivateAttempts = (YangUInt8)getValue("max-deactivate-attempts");
        if (maxDeactivateAttempts == null) {
            maxDeactivateAttempts = new YangUInt8("3");  // default
        }
        return maxDeactivateAttempts;
    }

    /**
     * Sets the value for child leaf "max-deactivate-attempts",
     * using instance of generated typedef class.
     * @param maxDeactivateAttemptsValue The value to set.
     * @param maxDeactivateAttemptsValue used during instantiation.
     */
    public void setMaxDeactivateAttemptsValue(YangUInt8 maxDeactivateAttemptsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-deactivate-attempts",
            maxDeactivateAttemptsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-deactivate-attempts",
     * using Java primitive values.
     * @param maxDeactivateAttemptsValue used during instantiation.
     */
    public void setMaxDeactivateAttemptsValue(short maxDeactivateAttemptsValue)
            throws JNCException {
        setMaxDeactivateAttemptsValue(new YangUInt8(maxDeactivateAttemptsValue));
    }

    /**
     * Sets the value for child leaf "max-deactivate-attempts",
     * using a String value.
     * @param maxDeactivateAttemptsValue used during instantiation.
     */
    public void setMaxDeactivateAttemptsValue(String maxDeactivateAttemptsValue)
            throws JNCException {
        setMaxDeactivateAttemptsValue(new YangUInt8(maxDeactivateAttemptsValue));
    }

    /**
     * Unsets the value for child leaf "max-deactivate-attempts".
     */
    public void unsetMaxDeactivateAttemptsValue() throws JNCException {
        delete("max-deactivate-attempts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-deactivate-attempts" leaf will not have a value.
     */
    public void addMaxDeactivateAttempts() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-deactivate-attempts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-deactivate-attempts" with operation "replace".
     */
    public void markMaxDeactivateAttemptsReplace() throws JNCException {
        markLeafReplace("maxDeactivateAttempts");
    }

    /**
     * Marks the leaf "max-deactivate-attempts" with operation "merge".
     */
    public void markMaxDeactivateAttemptsMerge() throws JNCException {
        markLeafMerge("maxDeactivateAttempts");
    }

    /**
     * Marks the leaf "max-deactivate-attempts" with operation "create".
     */
    public void markMaxDeactivateAttemptsCreate() throws JNCException {
        markLeafCreate("maxDeactivateAttempts");
    }

    /**
     * Marks the leaf "max-deactivate-attempts" with operation "delete".
     */
    public void markMaxDeactivateAttemptsDelete() throws JNCException {
        markLeafDelete("maxDeactivateAttempts");
    }

    /* Access methods for optional leaf child: "fsm-timeout". */

    /**
     * Gets the value for child leaf "fsm-timeout".
     * @return The value of the leaf.
     */
    public YangUInt16 getFsmTimeoutValue() throws JNCException {
        YangUInt16 fsmTimeout = (YangUInt16)getValue("fsm-timeout");
        if (fsmTimeout == null) {
            fsmTimeout = new YangUInt16("2000");  // default
        }
        return fsmTimeout;
    }

    /**
     * Sets the value for child leaf "fsm-timeout",
     * using instance of generated typedef class.
     * @param fsmTimeoutValue The value to set.
     * @param fsmTimeoutValue used during instantiation.
     */
    public void setFsmTimeoutValue(YangUInt16 fsmTimeoutValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "fsm-timeout",
            fsmTimeoutValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "fsm-timeout",
     * using Java primitive values.
     * @param fsmTimeoutValue used during instantiation.
     */
    public void setFsmTimeoutValue(int fsmTimeoutValue) throws JNCException {
        setFsmTimeoutValue(new YangUInt16(fsmTimeoutValue));
    }

    /**
     * Sets the value for child leaf "fsm-timeout",
     * using a String value.
     * @param fsmTimeoutValue used during instantiation.
     */
    public void setFsmTimeoutValue(String fsmTimeoutValue) throws JNCException {
        setFsmTimeoutValue(new YangUInt16(fsmTimeoutValue));
    }

    /**
     * Unsets the value for child leaf "fsm-timeout".
     */
    public void unsetFsmTimeoutValue() throws JNCException {
        delete("fsm-timeout");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fsm-timeout" leaf will not have a value.
     */
    public void addFsmTimeout() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "fsm-timeout",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "fsm-timeout" with operation "replace".
     */
    public void markFsmTimeoutReplace() throws JNCException {
        markLeafReplace("fsmTimeout");
    }

    /**
     * Marks the leaf "fsm-timeout" with operation "merge".
     */
    public void markFsmTimeoutMerge() throws JNCException {
        markLeafMerge("fsmTimeout");
    }

    /**
     * Marks the leaf "fsm-timeout" with operation "create".
     */
    public void markFsmTimeoutCreate() throws JNCException {
        markLeafCreate("fsmTimeout");
    }

    /**
     * Marks the leaf "fsm-timeout" with operation "delete".
     */
    public void markFsmTimeoutDelete() throws JNCException {
        markLeafDelete("fsmTimeout");
    }

    /* Access methods for optional leaf child: "network-indicator". */

    /**
     * Gets the value for child leaf "network-indicator".
     * @return The value of the leaf.
     */
    public YangEnumeration getNetworkIndicatorValue() throws JNCException {
        YangEnumeration networkIndicator = (YangEnumeration)getValue("network-indicator");
        if (networkIndicator == null) {
            networkIndicator = new YangEnumeration("intl", new String[] {  // default
                "intl",
                "intl-spare",
                "natl",
                "natl-spare",
            });
        }
        return networkIndicator;
    }

    /**
     * Sets the value for child leaf "network-indicator",
     * using instance of generated typedef class.
     * @param networkIndicatorValue The value to set.
     * @param networkIndicatorValue used during instantiation.
     */
    public void setNetworkIndicatorValue(YangEnumeration networkIndicatorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "network-indicator",
            networkIndicatorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "network-indicator",
     * using a String value.
     * @param networkIndicatorValue used during instantiation.
     */
    public void setNetworkIndicatorValue(String networkIndicatorValue)
            throws JNCException {
        setNetworkIndicatorValue(new YangEnumeration(networkIndicatorValue, new String[] {
             "intl",
             "intl-spare",
             "natl",
             "natl-spare",
        }));
    }

    /**
     * Unsets the value for child leaf "network-indicator".
     */
    public void unsetNetworkIndicatorValue() throws JNCException {
        delete("network-indicator");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "network-indicator" leaf will not have a value.
     */
    public void addNetworkIndicator() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "network-indicator",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "network-indicator" with operation "replace".
     */
    public void markNetworkIndicatorReplace() throws JNCException {
        markLeafReplace("networkIndicator");
    }

    /**
     * Marks the leaf "network-indicator" with operation "merge".
     */
    public void markNetworkIndicatorMerge() throws JNCException {
        markLeafMerge("networkIndicator");
    }

    /**
     * Marks the leaf "network-indicator" with operation "create".
     */
    public void markNetworkIndicatorCreate() throws JNCException {
        markLeafCreate("networkIndicator");
    }

    /**
     * Marks the leaf "network-indicator" with operation "delete".
     */
    public void markNetworkIndicatorDelete() throws JNCException {
        markLeafDelete("networkIndicator");
    }

    /* Access methods for optional leaf child: "cong-onset-level1". */

    /**
     * Gets the value for child leaf "cong-onset-level1".
     * @return The value of the leaf.
     */
    public YangString getCongOnsetLevel1Value() throws JNCException {
        YangString congOnsetLevel1 = (YangString)getValue("cong-onset-level1");
        if (congOnsetLevel1 == null) {
            congOnsetLevel1 = new YangString("auto-configure");  // default
        }
        return congOnsetLevel1;
    }

    /**
     * Sets the value for child leaf "cong-onset-level1",
     * using instance of generated typedef class.
     * @param congOnsetLevel1Value The value to set.
     * @param congOnsetLevel1Value used during instantiation.
     */
    public void setCongOnsetLevel1Value(YangString congOnsetLevel1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cong-onset-level1",
            congOnsetLevel1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cong-onset-level1",
     * using a String value.
     * @param congOnsetLevel1Value used during instantiation.
     */
    public void setCongOnsetLevel1Value(String congOnsetLevel1Value)
            throws JNCException {
        setCongOnsetLevel1Value(new YangString(congOnsetLevel1Value));
    }

    /**
     * Unsets the value for child leaf "cong-onset-level1".
     */
    public void unsetCongOnsetLevel1Value() throws JNCException {
        delete("cong-onset-level1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cong-onset-level1" leaf will not have a value.
     */
    public void addCongOnsetLevel1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cong-onset-level1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cong-onset-level1" with operation "replace".
     */
    public void markCongOnsetLevel1Replace() throws JNCException {
        markLeafReplace("congOnsetLevel1");
    }

    /**
     * Marks the leaf "cong-onset-level1" with operation "merge".
     */
    public void markCongOnsetLevel1Merge() throws JNCException {
        markLeafMerge("congOnsetLevel1");
    }

    /**
     * Marks the leaf "cong-onset-level1" with operation "create".
     */
    public void markCongOnsetLevel1Create() throws JNCException {
        markLeafCreate("congOnsetLevel1");
    }

    /**
     * Marks the leaf "cong-onset-level1" with operation "delete".
     */
    public void markCongOnsetLevel1Delete() throws JNCException {
        markLeafDelete("congOnsetLevel1");
    }

    /* Access methods for optional leaf child: "cong-abatement-level1". */

    /**
     * Gets the value for child leaf "cong-abatement-level1".
     * @return The value of the leaf.
     */
    public YangString getCongAbatementLevel1Value() throws JNCException {
        YangString congAbatementLevel1 = (YangString)getValue("cong-abatement-level1");
        if (congAbatementLevel1 == null) {
            congAbatementLevel1 = new YangString("auto-configure");  // default
        }
        return congAbatementLevel1;
    }

    /**
     * Sets the value for child leaf "cong-abatement-level1",
     * using instance of generated typedef class.
     * @param congAbatementLevel1Value The value to set.
     * @param congAbatementLevel1Value used during instantiation.
     */
    public void setCongAbatementLevel1Value(YangString congAbatementLevel1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cong-abatement-level1",
            congAbatementLevel1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cong-abatement-level1",
     * using a String value.
     * @param congAbatementLevel1Value used during instantiation.
     */
    public void setCongAbatementLevel1Value(String congAbatementLevel1Value)
            throws JNCException {
        setCongAbatementLevel1Value(new YangString(congAbatementLevel1Value));
    }

    /**
     * Unsets the value for child leaf "cong-abatement-level1".
     */
    public void unsetCongAbatementLevel1Value() throws JNCException {
        delete("cong-abatement-level1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cong-abatement-level1" leaf will not have a value.
     */
    public void addCongAbatementLevel1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cong-abatement-level1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cong-abatement-level1" with operation "replace".
     */
    public void markCongAbatementLevel1Replace() throws JNCException {
        markLeafReplace("congAbatementLevel1");
    }

    /**
     * Marks the leaf "cong-abatement-level1" with operation "merge".
     */
    public void markCongAbatementLevel1Merge() throws JNCException {
        markLeafMerge("congAbatementLevel1");
    }

    /**
     * Marks the leaf "cong-abatement-level1" with operation "create".
     */
    public void markCongAbatementLevel1Create() throws JNCException {
        markLeafCreate("congAbatementLevel1");
    }

    /**
     * Marks the leaf "cong-abatement-level1" with operation "delete".
     */
    public void markCongAbatementLevel1Delete() throws JNCException {
        markLeafDelete("congAbatementLevel1");
    }

    /* Access methods for optional leaf child: "cong-onset-level2". */

    /**
     * Gets the value for child leaf "cong-onset-level2".
     * @return The value of the leaf.
     */
    public YangString getCongOnsetLevel2Value() throws JNCException {
        YangString congOnsetLevel2 = (YangString)getValue("cong-onset-level2");
        if (congOnsetLevel2 == null) {
            congOnsetLevel2 = new YangString("auto-configure");  // default
        }
        return congOnsetLevel2;
    }

    /**
     * Sets the value for child leaf "cong-onset-level2",
     * using instance of generated typedef class.
     * @param congOnsetLevel2Value The value to set.
     * @param congOnsetLevel2Value used during instantiation.
     */
    public void setCongOnsetLevel2Value(YangString congOnsetLevel2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cong-onset-level2",
            congOnsetLevel2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cong-onset-level2",
     * using a String value.
     * @param congOnsetLevel2Value used during instantiation.
     */
    public void setCongOnsetLevel2Value(String congOnsetLevel2Value)
            throws JNCException {
        setCongOnsetLevel2Value(new YangString(congOnsetLevel2Value));
    }

    /**
     * Unsets the value for child leaf "cong-onset-level2".
     */
    public void unsetCongOnsetLevel2Value() throws JNCException {
        delete("cong-onset-level2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cong-onset-level2" leaf will not have a value.
     */
    public void addCongOnsetLevel2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cong-onset-level2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cong-onset-level2" with operation "replace".
     */
    public void markCongOnsetLevel2Replace() throws JNCException {
        markLeafReplace("congOnsetLevel2");
    }

    /**
     * Marks the leaf "cong-onset-level2" with operation "merge".
     */
    public void markCongOnsetLevel2Merge() throws JNCException {
        markLeafMerge("congOnsetLevel2");
    }

    /**
     * Marks the leaf "cong-onset-level2" with operation "create".
     */
    public void markCongOnsetLevel2Create() throws JNCException {
        markLeafCreate("congOnsetLevel2");
    }

    /**
     * Marks the leaf "cong-onset-level2" with operation "delete".
     */
    public void markCongOnsetLevel2Delete() throws JNCException {
        markLeafDelete("congOnsetLevel2");
    }

    /* Access methods for optional leaf child: "cong-abatement-level2". */

    /**
     * Gets the value for child leaf "cong-abatement-level2".
     * @return The value of the leaf.
     */
    public YangString getCongAbatementLevel2Value() throws JNCException {
        YangString congAbatementLevel2 = (YangString)getValue("cong-abatement-level2");
        if (congAbatementLevel2 == null) {
            congAbatementLevel2 = new YangString("auto-configure");  // default
        }
        return congAbatementLevel2;
    }

    /**
     * Sets the value for child leaf "cong-abatement-level2",
     * using instance of generated typedef class.
     * @param congAbatementLevel2Value The value to set.
     * @param congAbatementLevel2Value used during instantiation.
     */
    public void setCongAbatementLevel2Value(YangString congAbatementLevel2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cong-abatement-level2",
            congAbatementLevel2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cong-abatement-level2",
     * using a String value.
     * @param congAbatementLevel2Value used during instantiation.
     */
    public void setCongAbatementLevel2Value(String congAbatementLevel2Value)
            throws JNCException {
        setCongAbatementLevel2Value(new YangString(congAbatementLevel2Value));
    }

    /**
     * Unsets the value for child leaf "cong-abatement-level2".
     */
    public void unsetCongAbatementLevel2Value() throws JNCException {
        delete("cong-abatement-level2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cong-abatement-level2" leaf will not have a value.
     */
    public void addCongAbatementLevel2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cong-abatement-level2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cong-abatement-level2" with operation "replace".
     */
    public void markCongAbatementLevel2Replace() throws JNCException {
        markLeafReplace("congAbatementLevel2");
    }

    /**
     * Marks the leaf "cong-abatement-level2" with operation "merge".
     */
    public void markCongAbatementLevel2Merge() throws JNCException {
        markLeafMerge("congAbatementLevel2");
    }

    /**
     * Marks the leaf "cong-abatement-level2" with operation "create".
     */
    public void markCongAbatementLevel2Create() throws JNCException {
        markLeafCreate("congAbatementLevel2");
    }

    /**
     * Marks the leaf "cong-abatement-level2" with operation "delete".
     */
    public void markCongAbatementLevel2Delete() throws JNCException {
        markLeafDelete("congAbatementLevel2");
    }

    /* Access methods for optional leaf child: "cong-onset-level3". */

    /**
     * Gets the value for child leaf "cong-onset-level3".
     * @return The value of the leaf.
     */
    public YangString getCongOnsetLevel3Value() throws JNCException {
        YangString congOnsetLevel3 = (YangString)getValue("cong-onset-level3");
        if (congOnsetLevel3 == null) {
            congOnsetLevel3 = new YangString("auto-configure");  // default
        }
        return congOnsetLevel3;
    }

    /**
     * Sets the value for child leaf "cong-onset-level3",
     * using instance of generated typedef class.
     * @param congOnsetLevel3Value The value to set.
     * @param congOnsetLevel3Value used during instantiation.
     */
    public void setCongOnsetLevel3Value(YangString congOnsetLevel3Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cong-onset-level3",
            congOnsetLevel3Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cong-onset-level3",
     * using a String value.
     * @param congOnsetLevel3Value used during instantiation.
     */
    public void setCongOnsetLevel3Value(String congOnsetLevel3Value)
            throws JNCException {
        setCongOnsetLevel3Value(new YangString(congOnsetLevel3Value));
    }

    /**
     * Unsets the value for child leaf "cong-onset-level3".
     */
    public void unsetCongOnsetLevel3Value() throws JNCException {
        delete("cong-onset-level3");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cong-onset-level3" leaf will not have a value.
     */
    public void addCongOnsetLevel3() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cong-onset-level3",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cong-onset-level3" with operation "replace".
     */
    public void markCongOnsetLevel3Replace() throws JNCException {
        markLeafReplace("congOnsetLevel3");
    }

    /**
     * Marks the leaf "cong-onset-level3" with operation "merge".
     */
    public void markCongOnsetLevel3Merge() throws JNCException {
        markLeafMerge("congOnsetLevel3");
    }

    /**
     * Marks the leaf "cong-onset-level3" with operation "create".
     */
    public void markCongOnsetLevel3Create() throws JNCException {
        markLeafCreate("congOnsetLevel3");
    }

    /**
     * Marks the leaf "cong-onset-level3" with operation "delete".
     */
    public void markCongOnsetLevel3Delete() throws JNCException {
        markLeafDelete("congOnsetLevel3");
    }

    /* Access methods for optional leaf child: "cong-abatement-level3". */

    /**
     * Gets the value for child leaf "cong-abatement-level3".
     * @return The value of the leaf.
     */
    public YangString getCongAbatementLevel3Value() throws JNCException {
        YangString congAbatementLevel3 = (YangString)getValue("cong-abatement-level3");
        if (congAbatementLevel3 == null) {
            congAbatementLevel3 = new YangString("auto-configure");  // default
        }
        return congAbatementLevel3;
    }

    /**
     * Sets the value for child leaf "cong-abatement-level3",
     * using instance of generated typedef class.
     * @param congAbatementLevel3Value The value to set.
     * @param congAbatementLevel3Value used during instantiation.
     */
    public void setCongAbatementLevel3Value(YangString congAbatementLevel3Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cong-abatement-level3",
            congAbatementLevel3Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cong-abatement-level3",
     * using a String value.
     * @param congAbatementLevel3Value used during instantiation.
     */
    public void setCongAbatementLevel3Value(String congAbatementLevel3Value)
            throws JNCException {
        setCongAbatementLevel3Value(new YangString(congAbatementLevel3Value));
    }

    /**
     * Unsets the value for child leaf "cong-abatement-level3".
     */
    public void unsetCongAbatementLevel3Value() throws JNCException {
        delete("cong-abatement-level3");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cong-abatement-level3" leaf will not have a value.
     */
    public void addCongAbatementLevel3() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cong-abatement-level3",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cong-abatement-level3" with operation "replace".
     */
    public void markCongAbatementLevel3Replace() throws JNCException {
        markLeafReplace("congAbatementLevel3");
    }

    /**
     * Marks the leaf "cong-abatement-level3" with operation "merge".
     */
    public void markCongAbatementLevel3Merge() throws JNCException {
        markLeafMerge("congAbatementLevel3");
    }

    /**
     * Marks the leaf "cong-abatement-level3" with operation "create".
     */
    public void markCongAbatementLevel3Create() throws JNCException {
        markLeafCreate("congAbatementLevel3");
    }

    /**
     * Marks the leaf "cong-abatement-level3" with operation "delete".
     */
    public void markCongAbatementLevel3Delete() throws JNCException {
        markLeafDelete("congAbatementLevel3");
    }

    /* Access methods for optional leaf child: "cong-report-frequency". */

    /**
     * Gets the value for child leaf "cong-report-frequency".
     * @return The value of the leaf.
     */
    public YangUInt8 getCongReportFrequencyValue() throws JNCException {
        YangUInt8 congReportFrequency = (YangUInt8)getValue("cong-report-frequency");
        if (congReportFrequency == null) {
            congReportFrequency = new YangUInt8("8");  // default
        }
        return congReportFrequency;
    }

    /**
     * Sets the value for child leaf "cong-report-frequency",
     * using instance of generated typedef class.
     * @param congReportFrequencyValue The value to set.
     * @param congReportFrequencyValue used during instantiation.
     */
    public void setCongReportFrequencyValue(YangUInt8 congReportFrequencyValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cong-report-frequency",
            congReportFrequencyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cong-report-frequency",
     * using Java primitive values.
     * @param congReportFrequencyValue used during instantiation.
     */
    public void setCongReportFrequencyValue(short congReportFrequencyValue)
            throws JNCException {
        setCongReportFrequencyValue(new YangUInt8(congReportFrequencyValue));
    }

    /**
     * Sets the value for child leaf "cong-report-frequency",
     * using a String value.
     * @param congReportFrequencyValue used during instantiation.
     */
    public void setCongReportFrequencyValue(String congReportFrequencyValue)
            throws JNCException {
        setCongReportFrequencyValue(new YangUInt8(congReportFrequencyValue));
    }

    /**
     * Unsets the value for child leaf "cong-report-frequency".
     */
    public void unsetCongReportFrequencyValue() throws JNCException {
        delete("cong-report-frequency");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cong-report-frequency" leaf will not have a value.
     */
    public void addCongReportFrequency() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cong-report-frequency",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cong-report-frequency" with operation "replace".
     */
    public void markCongReportFrequencyReplace() throws JNCException {
        markLeafReplace("congReportFrequency");
    }

    /**
     * Marks the leaf "cong-report-frequency" with operation "merge".
     */
    public void markCongReportFrequencyMerge() throws JNCException {
        markLeafMerge("congReportFrequency");
    }

    /**
     * Marks the leaf "cong-report-frequency" with operation "create".
     */
    public void markCongReportFrequencyCreate() throws JNCException {
        markLeafCreate("congReportFrequency");
    }

    /**
     * Marks the leaf "cong-report-frequency" with operation "delete".
     */
    public void markCongReportFrequencyDelete() throws JNCException {
        markLeafDelete("congReportFrequency");
    }

    /* Access methods for optional leaf child: "reconnect-timer". */

    /**
     * Gets the value for child leaf "reconnect-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getReconnectTimerValue() throws JNCException {
        YangUInt8 reconnectTimer = (YangUInt8)getValue("reconnect-timer");
        if (reconnectTimer == null) {
            reconnectTimer = new YangUInt8("10");  // default
        }
        return reconnectTimer;
    }

    /**
     * Sets the value for child leaf "reconnect-timer",
     * using instance of generated typedef class.
     * @param reconnectTimerValue The value to set.
     * @param reconnectTimerValue used during instantiation.
     */
    public void setReconnectTimerValue(YangUInt8 reconnectTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reconnect-timer",
            reconnectTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "reconnect-timer",
     * using Java primitive values.
     * @param reconnectTimerValue used during instantiation.
     */
    public void setReconnectTimerValue(short reconnectTimerValue)
            throws JNCException {
        setReconnectTimerValue(new YangUInt8(reconnectTimerValue));
    }

    /**
     * Sets the value for child leaf "reconnect-timer",
     * using a String value.
     * @param reconnectTimerValue used during instantiation.
     */
    public void setReconnectTimerValue(String reconnectTimerValue)
            throws JNCException {
        setReconnectTimerValue(new YangUInt8(reconnectTimerValue));
    }

    /**
     * Unsets the value for child leaf "reconnect-timer".
     */
    public void unsetReconnectTimerValue() throws JNCException {
        delete("reconnect-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "reconnect-timer" leaf will not have a value.
     */
    public void addReconnectTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reconnect-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "reconnect-timer" with operation "replace".
     */
    public void markReconnectTimerReplace() throws JNCException {
        markLeafReplace("reconnectTimer");
    }

    /**
     * Marks the leaf "reconnect-timer" with operation "merge".
     */
    public void markReconnectTimerMerge() throws JNCException {
        markLeafMerge("reconnectTimer");
    }

    /**
     * Marks the leaf "reconnect-timer" with operation "create".
     */
    public void markReconnectTimerCreate() throws JNCException {
        markLeafCreate("reconnectTimer");
    }

    /**
     * Marks the leaf "reconnect-timer" with operation "delete".
     */
    public void markReconnectTimerDelete() throws JNCException {
        markLeafDelete("reconnectTimer");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
