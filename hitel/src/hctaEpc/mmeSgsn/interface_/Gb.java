/* 
 * @(#)Gb.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;
import .ietfInetTypes.Ipv4Address;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeBssgp;

import MmeFrTunnel;

import MmeGbIf;

import MmeLlc;

import MmeLlcSapi;

import MmeNs;

import MmeNsFr;

import MmeNse;

import MmeNsvcFr;

import MmeNsvlGroup;

import MmePacketFlowManagement;

import MmeSndcp;

import MmeStaticNseRemoteEndpoint;

import NodeSet;

import NseOper;

import NsvcFrOper;

import NsvcIp;

import PtpBvc;

import SigBvc;

import SigBvcOper;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gb"
 * <p>
 * See line 21 in
 * gtlConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Gb extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-bssgp".
     */
    public MmeBssgp mmeBssgp = null;

    /**
     * Field for child container "mme-gb-if".
     */
    public MmeGbIf mmeGbIf = null;

    /**
     * Field for child container "mme-ns".
     */
    public MmeNs mmeNs = null;

    /**
     * Field for child container "mme-ns-fr".
     */
    public MmeNsFr mmeNsFr = null;

    /**
     * Field for child container "sig-bvc".
     */
    public SigBvc sigBvc = null;

    /**
     * Field for child container "mme-llc".
     */
    public MmeLlc mmeLlc = null;

    /**
     * Field for child container "mme-sndcp".
     */
    public MmeSndcp mmeSndcp = null;

    /**
     * Field for child container "mme-packet-flow-management".
     */
    public MmePacketFlowManagement mmePacketFlowManagement = null;

    /**
     * Constructor for an empty Gb object.
     */
    public Gb() {
        super(Epc.NAMESPACE, "gb");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Gb clone() {
        return (Gb)cloneContent(new Gb());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Gb cloneShallow() {
        return (Gb)cloneShallowContent(new Gb());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-bssgp",
            "mme-gb-if",
            "mme-ns",
            "mme-ns-fr",
            "mme-nse",
            "mme-static-nse-remote-endpoint",
            "mme-nsvc-fr",
            "mme-fr-tunnel",
            "mme-nsvl-group",
            "sig-bvc",
            "nsvc-ip",
            "nsvc-fr-oper",
            "ptp-bvc",
            "sig-bvc-oper",
            "nse-oper",
            "mme-llc",
            "mme-llc-sapi",
            "mme-sndcp",
            "mme-packet-flow-management",
        };
    }

    /* Access methods for container child: "mme-bssgp". */

    /**
     * Adds container entry "mmeBssgp", using an existing object.
     * @param mmeBssgp The object to add.
     * @return The added child.
     */
    public MmeBssgp addMmeBssgp(MmeBssgp mmeBssgp) throws JNCException {
        this.mmeBssgp = mmeBssgp;
        insertChild(mmeBssgp, childrenNames());
        return mmeBssgp;
    }

    /**
     * Adds container entry "mmeBssgp".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeBssgp addMmeBssgp() throws JNCException {
        MmeBssgp mmeBssgp = new MmeBssgp();
        this.mmeBssgp = mmeBssgp;
        insertChild(mmeBssgp, childrenNames());
        return mmeBssgp;
    }

    /**
     * Deletes container entry "mmeBssgp".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeBssgp() throws JNCException {
        this.mmeBssgp = null;
        String path = "mme-bssgp";
        return delete(path);
    }

    /* Access methods for container child: "mme-gb-if". */

    /**
     * Adds container entry "mmeGbIf", using an existing object.
     * @param mmeGbIf The object to add.
     * @return The added child.
     */
    public MmeGbIf addMmeGbIf(MmeGbIf mmeGbIf) throws JNCException {
        this.mmeGbIf = mmeGbIf;
        insertChild(mmeGbIf, childrenNames());
        return mmeGbIf;
    }

    /**
     * Adds container entry "mmeGbIf".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeGbIf addMmeGbIf() throws JNCException {
        MmeGbIf mmeGbIf = new MmeGbIf();
        this.mmeGbIf = mmeGbIf;
        insertChild(mmeGbIf, childrenNames());
        return mmeGbIf;
    }

    /**
     * Deletes container entry "mmeGbIf".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeGbIf() throws JNCException {
        this.mmeGbIf = null;
        String path = "mme-gb-if";
        return delete(path);
    }

    /* Access methods for container child: "mme-ns". */

    /**
     * Adds container entry "mmeNs", using an existing object.
     * @param mmeNs The object to add.
     * @return The added child.
     */
    public MmeNs addMmeNs(MmeNs mmeNs) throws JNCException {
        this.mmeNs = mmeNs;
        insertChild(mmeNs, childrenNames());
        return mmeNs;
    }

    /**
     * Adds container entry "mmeNs".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeNs addMmeNs() throws JNCException {
        MmeNs mmeNs = new MmeNs();
        this.mmeNs = mmeNs;
        insertChild(mmeNs, childrenNames());
        return mmeNs;
    }

    /**
     * Deletes container entry "mmeNs".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeNs() throws JNCException {
        this.mmeNs = null;
        String path = "mme-ns";
        return delete(path);
    }

    /* Access methods for container child: "mme-ns-fr". */

    /**
     * Adds container entry "mmeNsFr", using an existing object.
     * @param mmeNsFr The object to add.
     * @return The added child.
     */
    public MmeNsFr addMmeNsFr(MmeNsFr mmeNsFr) throws JNCException {
        this.mmeNsFr = mmeNsFr;
        insertChild(mmeNsFr, childrenNames());
        return mmeNsFr;
    }

    /**
     * Adds container entry "mmeNsFr".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeNsFr addMmeNsFr() throws JNCException {
        MmeNsFr mmeNsFr = new MmeNsFr();
        this.mmeNsFr = mmeNsFr;
        insertChild(mmeNsFr, childrenNames());
        return mmeNsFr;
    }

    /**
     * Deletes container entry "mmeNsFr".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeNsFr() throws JNCException {
        this.mmeNsFr = null;
        String path = "mme-ns-fr";
        return delete(path);
    }

    /* Access methods for list child: "mme-nse". */

    /**
     * Gets list entry "mmeNse", with specified keys.
     * @param nseIdValue Key argument of child.
     */
    public MmeNse getMmeNse(YangUInt16 nseIdValue) throws JNCException {
        String path = "mme-nse[nseId='" + nseIdValue + "']";
        return (MmeNse)searchOne(path);
    }

    /**
     * Gets list entry "mmeNse", with specified keys.
     * The keys are specified as strings.
     * @param nseIdValue Key argument of child.
     */
    public MmeNse getMmeNse(String nseIdValue) throws JNCException {
        String path = "mme-nse[nseId='" + nseIdValue + "']";
        return (MmeNse)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-nse".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeNseIterator() {
        return new ElementChildrenIterator(children, "mme-nse");
    }

    /**
     * Adds list entry "mmeNse", using an existing object.
     * @param mmeNse The object to add.
     * @return The added child.
     */
    public MmeNse addMmeNse(MmeNse mmeNse) throws JNCException {
        insertChild(mmeNse, childrenNames());
        return mmeNse;
    }

    /**
     * Adds list entry "mmeNse", with specified keys.
     * @param nseIdValue Key argument of child.
     * @return The added child.
     */
    public MmeNse addMmeNse(YangUInt16 nseIdValue) throws JNCException {
        MmeNse mmeNse = new MmeNse(nseIdValue);
        return addMmeNse(mmeNse);
    }

    /**
     * Adds list entry "mmeNse", with specified keys.
     * The keys are specified as strings.
     * @param nseIdValue Key argument of child.
     * @return The added child.
     */
    public MmeNse addMmeNse(String nseIdValue) throws JNCException {
        MmeNse mmeNse = new MmeNse(nseIdValue);
        return addMmeNse(mmeNse);
    }

    /**
     * Adds list entry "mmeNse".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeNse addMmeNse() throws JNCException {
        MmeNse mmeNse = new MmeNse();
        insertChild(mmeNse, childrenNames());
        return mmeNse;
    }

    /**
     * Deletes list entry "mmeNse", with specified keys.
     * @param nseIdValue Key argument of child.
     */
    public void deleteMmeNse(YangUInt16 nseIdValue) throws JNCException {
        String path = "mme-nse[nseId='" + nseIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeNse", with specified keys.
     * The keys are specified as strings.
     * @param nseIdValue Key argument of child.
     */
    public void deleteMmeNse(String nseIdValue) throws JNCException {
        String path = "mme-nse[nseId='" + nseIdValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-static-nse-remote-endpoint". */

    /**
     * Gets list entry "mmeStaticNseRemoteEndpoint", with specified keys.
     * @param remoteIpAddressValue Key argument of child.
     */
    public MmeStaticNseRemoteEndpoint getMmeStaticNseRemoteEndpoint(Ipv4Address remoteIpAddressValue)
            throws JNCException {
        String path = "mme-static-nse-remote-endpoint[remoteIpAddress='" + remoteIpAddressValue + "']";
        return (MmeStaticNseRemoteEndpoint)searchOne(path);
    }

    /**
     * Gets list entry "mmeStaticNseRemoteEndpoint", with specified keys.
     * The keys are specified as strings.
     * @param remoteIpAddressValue Key argument of child.
     */
    public MmeStaticNseRemoteEndpoint getMmeStaticNseRemoteEndpoint(String remoteIpAddressValue)
            throws JNCException {
        String path = "mme-static-nse-remote-endpoint[remoteIpAddress='" + remoteIpAddressValue + "']";
        return (MmeStaticNseRemoteEndpoint)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-static-nse-remote-endpoint".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeStaticNseRemoteEndpointIterator() {
        return new ElementChildrenIterator(children, "mme-static-nse-remote-endpoint");
    }

    /**
     * Adds list entry "mmeStaticNseRemoteEndpoint", using an existing object.
     * @param mmeStaticNseRemoteEndpoint The object to add.
     * @return The added child.
     */
    public MmeStaticNseRemoteEndpoint addMmeStaticNseRemoteEndpoint(MmeStaticNseRemoteEndpoint mmeStaticNseRemoteEndpoint)
            throws JNCException {
        insertChild(mmeStaticNseRemoteEndpoint, childrenNames());
        return mmeStaticNseRemoteEndpoint;
    }

    /**
     * Adds list entry "mmeStaticNseRemoteEndpoint", with specified keys.
     * @param remoteIpAddressValue Key argument of child.
     * @return The added child.
     */
    public MmeStaticNseRemoteEndpoint addMmeStaticNseRemoteEndpoint(Ipv4Address remoteIpAddressValue)
            throws JNCException {
        MmeStaticNseRemoteEndpoint mmeStaticNseRemoteEndpoint = new MmeStaticNseRemoteEndpoint(remoteIpAddressValue);
        return addMmeStaticNseRemoteEndpoint(mmeStaticNseRemoteEndpoint);
    }

    /**
     * Adds list entry "mmeStaticNseRemoteEndpoint", with specified keys.
     * The keys are specified as strings.
     * @param remoteIpAddressValue Key argument of child.
     * @return The added child.
     */
    public MmeStaticNseRemoteEndpoint addMmeStaticNseRemoteEndpoint(String remoteIpAddressValue)
            throws JNCException {
        MmeStaticNseRemoteEndpoint mmeStaticNseRemoteEndpoint = new MmeStaticNseRemoteEndpoint(remoteIpAddressValue);
        return addMmeStaticNseRemoteEndpoint(mmeStaticNseRemoteEndpoint);
    }

    /**
     * Adds list entry "mmeStaticNseRemoteEndpoint".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeStaticNseRemoteEndpoint addMmeStaticNseRemoteEndpoint()
            throws JNCException {
        MmeStaticNseRemoteEndpoint mmeStaticNseRemoteEndpoint = new MmeStaticNseRemoteEndpoint();
        insertChild(mmeStaticNseRemoteEndpoint, childrenNames());
        return mmeStaticNseRemoteEndpoint;
    }

    /**
     * Deletes list entry "mmeStaticNseRemoteEndpoint", with specified keys.
     * @param remoteIpAddressValue Key argument of child.
     */
    public void deleteMmeStaticNseRemoteEndpoint(Ipv4Address remoteIpAddressValue)
            throws JNCException {
        String path = "mme-static-nse-remote-endpoint[remoteIpAddress='" + remoteIpAddressValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeStaticNseRemoteEndpoint", with specified keys.
     * The keys are specified as strings.
     * @param remoteIpAddressValue Key argument of child.
     */
    public void deleteMmeStaticNseRemoteEndpoint(String remoteIpAddressValue)
            throws JNCException {
        String path = "mme-static-nse-remote-endpoint[remoteIpAddress='" + remoteIpAddressValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-nsvc-fr". */

    /**
     * Gets list entry "mmeNsvcFr", with specified keys.
     * @param nseIdValue Key argument of child.
     * @param nsvcIdValue Key argument of child.
     */
    public MmeNsvcFr getMmeNsvcFr(YangUInt16 nseIdValue, YangUInt16 nsvcIdValue)
            throws JNCException {
        String path = "mme-nsvc-fr[nseId='" + nseIdValue + "'][nsvcId='" + nsvcIdValue + "']";
        return (MmeNsvcFr)searchOne(path);
    }

    /**
     * Gets list entry "mmeNsvcFr", with specified keys.
     * The keys are specified as strings.
     * @param nseIdValue Key argument of child.
     * @param nsvcIdValue Key argument of child.
     */
    public MmeNsvcFr getMmeNsvcFr(String nseIdValue, String nsvcIdValue)
            throws JNCException {
        String path = "mme-nsvc-fr[nseId='" + nseIdValue + "'][nsvcId='" + nsvcIdValue + "']";
        return (MmeNsvcFr)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-nsvc-fr".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeNsvcFrIterator() {
        return new ElementChildrenIterator(children, "mme-nsvc-fr");
    }

    /**
     * Adds list entry "mmeNsvcFr", using an existing object.
     * @param mmeNsvcFr The object to add.
     * @return The added child.
     */
    public MmeNsvcFr addMmeNsvcFr(MmeNsvcFr mmeNsvcFr) throws JNCException {
        insertChild(mmeNsvcFr, childrenNames());
        return mmeNsvcFr;
    }

    /**
     * Adds list entry "mmeNsvcFr", with specified keys.
     * @param nseIdValue Key argument of child.
     * @param nsvcIdValue Key argument of child.
     * @return The added child.
     */
    public MmeNsvcFr addMmeNsvcFr(YangUInt16 nseIdValue, YangUInt16 nsvcIdValue)
            throws JNCException {
        MmeNsvcFr mmeNsvcFr = new MmeNsvcFr(nseIdValue, nsvcIdValue);
        return addMmeNsvcFr(mmeNsvcFr);
    }

    /**
     * Adds list entry "mmeNsvcFr", with specified keys.
     * The keys are specified as strings.
     * @param nseIdValue Key argument of child.
     * @param nsvcIdValue Key argument of child.
     * @return The added child.
     */
    public MmeNsvcFr addMmeNsvcFr(String nseIdValue, String nsvcIdValue)
            throws JNCException {
        MmeNsvcFr mmeNsvcFr = new MmeNsvcFr(nseIdValue, nsvcIdValue);
        return addMmeNsvcFr(mmeNsvcFr);
    }

    /**
     * Adds list entry "mmeNsvcFr".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeNsvcFr addMmeNsvcFr() throws JNCException {
        MmeNsvcFr mmeNsvcFr = new MmeNsvcFr();
        insertChild(mmeNsvcFr, childrenNames());
        return mmeNsvcFr;
    }

    /**
     * Deletes list entry "mmeNsvcFr", with specified keys.
     * @param nseIdValue Key argument of child.
     * @param nsvcIdValue Key argument of child.
     */
    public void deleteMmeNsvcFr(YangUInt16 nseIdValue, YangUInt16 nsvcIdValue)
            throws JNCException {
        String path = "mme-nsvc-fr[nseId='" + nseIdValue + "'][nsvcId='" + nsvcIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeNsvcFr", with specified keys.
     * The keys are specified as strings.
     * @param nseIdValue Key argument of child.
     * @param nsvcIdValue Key argument of child.
     */
    public void deleteMmeNsvcFr(String nseIdValue, String nsvcIdValue)
            throws JNCException {
        String path = "mme-nsvc-fr[nseId='" + nseIdValue + "'][nsvcId='" + nsvcIdValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-fr-tunnel". */

    /**
     * Gets list entry "mmeFrTunnel", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeFrTunnel getMmeFrTunnel(YangString nameValue) throws JNCException {
        String path = "mme-fr-tunnel[name='" + nameValue + "']";
        return (MmeFrTunnel)searchOne(path);
    }

    /**
     * Gets list entry "mmeFrTunnel", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeFrTunnel getMmeFrTunnel(String nameValue) throws JNCException {
        String path = "mme-fr-tunnel[name='" + nameValue + "']";
        return (MmeFrTunnel)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-fr-tunnel".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeFrTunnelIterator() {
        return new ElementChildrenIterator(children, "mme-fr-tunnel");
    }

    /**
     * Adds list entry "mmeFrTunnel", using an existing object.
     * @param mmeFrTunnel The object to add.
     * @return The added child.
     */
    public MmeFrTunnel addMmeFrTunnel(MmeFrTunnel mmeFrTunnel)
            throws JNCException {
        insertChild(mmeFrTunnel, childrenNames());
        return mmeFrTunnel;
    }

    /**
     * Adds list entry "mmeFrTunnel", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeFrTunnel addMmeFrTunnel(YangString nameValue) throws JNCException {
        MmeFrTunnel mmeFrTunnel = new MmeFrTunnel(nameValue);
        return addMmeFrTunnel(mmeFrTunnel);
    }

    /**
     * Adds list entry "mmeFrTunnel", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeFrTunnel addMmeFrTunnel(String nameValue) throws JNCException {
        MmeFrTunnel mmeFrTunnel = new MmeFrTunnel(nameValue);
        return addMmeFrTunnel(mmeFrTunnel);
    }

    /**
     * Adds list entry "mmeFrTunnel".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeFrTunnel addMmeFrTunnel() throws JNCException {
        MmeFrTunnel mmeFrTunnel = new MmeFrTunnel();
        insertChild(mmeFrTunnel, childrenNames());
        return mmeFrTunnel;
    }

    /**
     * Deletes list entry "mmeFrTunnel", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeFrTunnel(YangString nameValue) throws JNCException {
        String path = "mme-fr-tunnel[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeFrTunnel", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeFrTunnel(String nameValue) throws JNCException {
        String path = "mme-fr-tunnel[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "mme-nsvl-group". */

    /**
     * Gets list entry "mmeNsvlGroup", with specified keys.
     * @param nsvlGroupInstanceValue Key argument of child.
     */
    public MmeNsvlGroup getMmeNsvlGroup(YangUInt16 nsvlGroupInstanceValue)
            throws JNCException {
        String path = "mme-nsvl-group[nsvlGroupInstance='" + nsvlGroupInstanceValue + "']";
        return (MmeNsvlGroup)searchOne(path);
    }

    /**
     * Gets list entry "mmeNsvlGroup", with specified keys.
     * The keys are specified as strings.
     * @param nsvlGroupInstanceValue Key argument of child.
     */
    public MmeNsvlGroup getMmeNsvlGroup(String nsvlGroupInstanceValue)
            throws JNCException {
        String path = "mme-nsvl-group[nsvlGroupInstance='" + nsvlGroupInstanceValue + "']";
        return (MmeNsvlGroup)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-nsvl-group".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeNsvlGroupIterator() {
        return new ElementChildrenIterator(children, "mme-nsvl-group");
    }

    /**
     * Adds list entry "mmeNsvlGroup", using an existing object.
     * @param mmeNsvlGroup The object to add.
     * @return The added child.
     */
    public MmeNsvlGroup addMmeNsvlGroup(MmeNsvlGroup mmeNsvlGroup)
            throws JNCException {
        insertChild(mmeNsvlGroup, childrenNames());
        return mmeNsvlGroup;
    }

    /**
     * Adds list entry "mmeNsvlGroup", with specified keys.
     * @param nsvlGroupInstanceValue Key argument of child.
     * @return The added child.
     */
    public MmeNsvlGroup addMmeNsvlGroup(YangUInt16 nsvlGroupInstanceValue)
            throws JNCException {
        MmeNsvlGroup mmeNsvlGroup = new MmeNsvlGroup(nsvlGroupInstanceValue);
        return addMmeNsvlGroup(mmeNsvlGroup);
    }

    /**
     * Adds list entry "mmeNsvlGroup", with specified keys.
     * The keys are specified as strings.
     * @param nsvlGroupInstanceValue Key argument of child.
     * @return The added child.
     */
    public MmeNsvlGroup addMmeNsvlGroup(String nsvlGroupInstanceValue)
            throws JNCException {
        MmeNsvlGroup mmeNsvlGroup = new MmeNsvlGroup(nsvlGroupInstanceValue);
        return addMmeNsvlGroup(mmeNsvlGroup);
    }

    /**
     * Adds list entry "mmeNsvlGroup".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeNsvlGroup addMmeNsvlGroup() throws JNCException {
        MmeNsvlGroup mmeNsvlGroup = new MmeNsvlGroup();
        insertChild(mmeNsvlGroup, childrenNames());
        return mmeNsvlGroup;
    }

    /**
     * Deletes list entry "mmeNsvlGroup", with specified keys.
     * @param nsvlGroupInstanceValue Key argument of child.
     */
    public void deleteMmeNsvlGroup(YangUInt16 nsvlGroupInstanceValue)
            throws JNCException {
        String path = "mme-nsvl-group[nsvlGroupInstance='" + nsvlGroupInstanceValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeNsvlGroup", with specified keys.
     * The keys are specified as strings.
     * @param nsvlGroupInstanceValue Key argument of child.
     */
    public void deleteMmeNsvlGroup(String nsvlGroupInstanceValue)
            throws JNCException {
        String path = "mme-nsvl-group[nsvlGroupInstance='" + nsvlGroupInstanceValue + "']";
        delete(path);
    }

    /* Access methods for container child: "sig-bvc". */

    /**
     * Adds container entry "sigBvc", using an existing object.
     * @param sigBvc The object to add.
     * @return The added child.
     */
    public SigBvc addSigBvc(SigBvc sigBvc) throws JNCException {
        this.sigBvc = sigBvc;
        insertChild(sigBvc, childrenNames());
        return sigBvc;
    }

    /**
     * Adds container entry "sigBvc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SigBvc addSigBvc() throws JNCException {
        SigBvc sigBvc = new SigBvc();
        this.sigBvc = sigBvc;
        insertChild(sigBvc, childrenNames());
        return sigBvc;
    }

    /**
     * Deletes container entry "sigBvc".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSigBvc() throws JNCException {
        this.sigBvc = null;
        String path = "sig-bvc";
        return delete(path);
    }

    /* Access methods for list child: "nsvc-ip". */

    /**
     * Gets list entry "nsvcIp", with specified keys.
     */
    public NsvcIp getNsvcIp() throws JNCException {
        String path = "nsvc-ip";
        return (NsvcIp)searchOne(path);
    }

    /**
     * Iterator method for the list "nsvc-ip".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator nsvcIpIterator() {
        return new ElementChildrenIterator(children, "nsvc-ip");
    }

    /**
     * Adds list entry "nsvcIp", using an existing object.
     * @param nsvcIp The object to add.
     * @return The added child.
     */
    public NsvcIp addNsvcIp(NsvcIp nsvcIp) throws JNCException {
        insertChild(nsvcIp, childrenNames());
        return nsvcIp;
    }

    /**
     * Adds list entry "nsvcIp".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public NsvcIp addNsvcIp() throws JNCException {
        NsvcIp nsvcIp = new NsvcIp();
        insertChild(nsvcIp, childrenNames());
        return nsvcIp;
    }

    /**
     * Deletes list entry "nsvcIp", with specified keys.
     */
    public void deleteNsvcIp() throws JNCException {
        String path = "nsvc-ip";
        delete(path);
    }

    /* Access methods for list child: "nsvc-fr-oper". */

    /**
     * Gets list entry "nsvcFrOper", with specified keys.
     */
    public NsvcFrOper getNsvcFrOper() throws JNCException {
        String path = "nsvc-fr-oper";
        return (NsvcFrOper)searchOne(path);
    }

    /**
     * Iterator method for the list "nsvc-fr-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator nsvcFrOperIterator() {
        return new ElementChildrenIterator(children, "nsvc-fr-oper");
    }

    /**
     * Adds list entry "nsvcFrOper", using an existing object.
     * @param nsvcFrOper The object to add.
     * @return The added child.
     */
    public NsvcFrOper addNsvcFrOper(NsvcFrOper nsvcFrOper) throws JNCException {
        insertChild(nsvcFrOper, childrenNames());
        return nsvcFrOper;
    }

    /**
     * Adds list entry "nsvcFrOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public NsvcFrOper addNsvcFrOper() throws JNCException {
        NsvcFrOper nsvcFrOper = new NsvcFrOper();
        insertChild(nsvcFrOper, childrenNames());
        return nsvcFrOper;
    }

    /**
     * Deletes list entry "nsvcFrOper", with specified keys.
     */
    public void deleteNsvcFrOper() throws JNCException {
        String path = "nsvc-fr-oper";
        delete(path);
    }

    /* Access methods for list child: "ptp-bvc". */

    /**
     * Gets list entry "ptpBvc", with specified keys.
     */
    public PtpBvc getPtpBvc() throws JNCException {
        String path = "ptp-bvc";
        return (PtpBvc)searchOne(path);
    }

    /**
     * Iterator method for the list "ptp-bvc".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator ptpBvcIterator() {
        return new ElementChildrenIterator(children, "ptp-bvc");
    }

    /**
     * Adds list entry "ptpBvc", using an existing object.
     * @param ptpBvc The object to add.
     * @return The added child.
     */
    public PtpBvc addPtpBvc(PtpBvc ptpBvc) throws JNCException {
        insertChild(ptpBvc, childrenNames());
        return ptpBvc;
    }

    /**
     * Adds list entry "ptpBvc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public PtpBvc addPtpBvc() throws JNCException {
        PtpBvc ptpBvc = new PtpBvc();
        insertChild(ptpBvc, childrenNames());
        return ptpBvc;
    }

    /**
     * Deletes list entry "ptpBvc", with specified keys.
     */
    public void deletePtpBvc() throws JNCException {
        String path = "ptp-bvc";
        delete(path);
    }

    /* Access methods for list child: "sig-bvc-oper". */

    /**
     * Gets list entry "sigBvcOper", with specified keys.
     */
    public SigBvcOper getSigBvcOper() throws JNCException {
        String path = "sig-bvc-oper";
        return (SigBvcOper)searchOne(path);
    }

    /**
     * Iterator method for the list "sig-bvc-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator sigBvcOperIterator() {
        return new ElementChildrenIterator(children, "sig-bvc-oper");
    }

    /**
     * Adds list entry "sigBvcOper", using an existing object.
     * @param sigBvcOper The object to add.
     * @return The added child.
     */
    public SigBvcOper addSigBvcOper(SigBvcOper sigBvcOper) throws JNCException {
        insertChild(sigBvcOper, childrenNames());
        return sigBvcOper;
    }

    /**
     * Adds list entry "sigBvcOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SigBvcOper addSigBvcOper() throws JNCException {
        SigBvcOper sigBvcOper = new SigBvcOper();
        insertChild(sigBvcOper, childrenNames());
        return sigBvcOper;
    }

    /**
     * Deletes list entry "sigBvcOper", with specified keys.
     */
    public void deleteSigBvcOper() throws JNCException {
        String path = "sig-bvc-oper";
        delete(path);
    }

    /* Access methods for list child: "nse-oper". */

    /**
     * Gets list entry "nseOper", with specified keys.
     */
    public NseOper getNseOper() throws JNCException {
        String path = "nse-oper";
        return (NseOper)searchOne(path);
    }

    /**
     * Iterator method for the list "nse-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator nseOperIterator() {
        return new ElementChildrenIterator(children, "nse-oper");
    }

    /**
     * Adds list entry "nseOper", using an existing object.
     * @param nseOper The object to add.
     * @return The added child.
     */
    public NseOper addNseOper(NseOper nseOper) throws JNCException {
        insertChild(nseOper, childrenNames());
        return nseOper;
    }

    /**
     * Adds list entry "nseOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public NseOper addNseOper() throws JNCException {
        NseOper nseOper = new NseOper();
        insertChild(nseOper, childrenNames());
        return nseOper;
    }

    /**
     * Deletes list entry "nseOper", with specified keys.
     */
    public void deleteNseOper() throws JNCException {
        String path = "nse-oper";
        delete(path);
    }

    /* Access methods for container child: "mme-llc". */

    /**
     * Adds container entry "mmeLlc", using an existing object.
     * @param mmeLlc The object to add.
     * @return The added child.
     */
    public MmeLlc addMmeLlc(MmeLlc mmeLlc) throws JNCException {
        this.mmeLlc = mmeLlc;
        insertChild(mmeLlc, childrenNames());
        return mmeLlc;
    }

    /**
     * Adds container entry "mmeLlc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeLlc addMmeLlc() throws JNCException {
        MmeLlc mmeLlc = new MmeLlc();
        this.mmeLlc = mmeLlc;
        insertChild(mmeLlc, childrenNames());
        return mmeLlc;
    }

    /**
     * Deletes container entry "mmeLlc".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeLlc() throws JNCException {
        this.mmeLlc = null;
        String path = "mme-llc";
        return delete(path);
    }

    /* Access methods for list child: "mme-llc-sapi". */

    /**
     * Gets list entry "mmeLlcSapi", with specified keys.
     * @param serviceAccessPointIdentifierValue Key argument of child.
     */
    public MmeLlcSapi getMmeLlcSapi(YangEnumeration serviceAccessPointIdentifierValue)
            throws JNCException {
        String path = "mme-llc-sapi[serviceAccessPointIdentifier='" + serviceAccessPointIdentifierValue + "']";
        return (MmeLlcSapi)searchOne(path);
    }

    /**
     * Gets list entry "mmeLlcSapi", with specified keys.
     * The keys are specified as strings.
     * @param serviceAccessPointIdentifierValue Key argument of child.
     */
    public MmeLlcSapi getMmeLlcSapi(String serviceAccessPointIdentifierValue)
            throws JNCException {
        String path = "mme-llc-sapi[serviceAccessPointIdentifier='" + serviceAccessPointIdentifierValue + "']";
        return (MmeLlcSapi)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-llc-sapi".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeLlcSapiIterator() {
        return new ElementChildrenIterator(children, "mme-llc-sapi");
    }

    /**
     * Adds list entry "mmeLlcSapi", using an existing object.
     * @param mmeLlcSapi The object to add.
     * @return The added child.
     */
    public MmeLlcSapi addMmeLlcSapi(MmeLlcSapi mmeLlcSapi) throws JNCException {
        insertChild(mmeLlcSapi, childrenNames());
        return mmeLlcSapi;
    }

    /**
     * Adds list entry "mmeLlcSapi", with specified keys.
     * @param serviceAccessPointIdentifierValue Key argument of child.
     * @return The added child.
     */
    public MmeLlcSapi addMmeLlcSapi(YangEnumeration serviceAccessPointIdentifierValue)
            throws JNCException {
        MmeLlcSapi mmeLlcSapi = new MmeLlcSapi(serviceAccessPointIdentifierValue);
        return addMmeLlcSapi(mmeLlcSapi);
    }

    /**
     * Adds list entry "mmeLlcSapi", with specified keys.
     * The keys are specified as strings.
     * @param serviceAccessPointIdentifierValue Key argument of child.
     * @return The added child.
     */
    public MmeLlcSapi addMmeLlcSapi(String serviceAccessPointIdentifierValue)
            throws JNCException {
        MmeLlcSapi mmeLlcSapi = new MmeLlcSapi(serviceAccessPointIdentifierValue);
        return addMmeLlcSapi(mmeLlcSapi);
    }

    /**
     * Adds list entry "mmeLlcSapi".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeLlcSapi addMmeLlcSapi() throws JNCException {
        MmeLlcSapi mmeLlcSapi = new MmeLlcSapi();
        insertChild(mmeLlcSapi, childrenNames());
        return mmeLlcSapi;
    }

    /**
     * Deletes list entry "mmeLlcSapi", with specified keys.
     * @param serviceAccessPointIdentifierValue Key argument of child.
     */
    public void deleteMmeLlcSapi(YangEnumeration serviceAccessPointIdentifierValue)
            throws JNCException {
        String path = "mme-llc-sapi[serviceAccessPointIdentifier='" + serviceAccessPointIdentifierValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeLlcSapi", with specified keys.
     * The keys are specified as strings.
     * @param serviceAccessPointIdentifierValue Key argument of child.
     */
    public void deleteMmeLlcSapi(String serviceAccessPointIdentifierValue)
            throws JNCException {
        String path = "mme-llc-sapi[serviceAccessPointIdentifier='" + serviceAccessPointIdentifierValue + "']";
        delete(path);
    }

    /* Access methods for container child: "mme-sndcp". */

    /**
     * Adds container entry "mmeSndcp", using an existing object.
     * @param mmeSndcp The object to add.
     * @return The added child.
     */
    public MmeSndcp addMmeSndcp(MmeSndcp mmeSndcp) throws JNCException {
        this.mmeSndcp = mmeSndcp;
        insertChild(mmeSndcp, childrenNames());
        return mmeSndcp;
    }

    /**
     * Adds container entry "mmeSndcp".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSndcp addMmeSndcp() throws JNCException {
        MmeSndcp mmeSndcp = new MmeSndcp();
        this.mmeSndcp = mmeSndcp;
        insertChild(mmeSndcp, childrenNames());
        return mmeSndcp;
    }

    /**
     * Deletes container entry "mmeSndcp".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeSndcp() throws JNCException {
        this.mmeSndcp = null;
        String path = "mme-sndcp";
        return delete(path);
    }

    /* Access methods for container child: "mme-packet-flow-management". */

    /**
     * Adds container entry "mmePacketFlowManagement", using an existing object.
     * @param mmePacketFlowManagement The object to add.
     * @return The added child.
     */
    public MmePacketFlowManagement addMmePacketFlowManagement(MmePacketFlowManagement mmePacketFlowManagement)
            throws JNCException {
        this.mmePacketFlowManagement = mmePacketFlowManagement;
        insertChild(mmePacketFlowManagement, childrenNames());
        return mmePacketFlowManagement;
    }

    /**
     * Adds container entry "mmePacketFlowManagement".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmePacketFlowManagement addMmePacketFlowManagement()
            throws JNCException {
        MmePacketFlowManagement mmePacketFlowManagement = new MmePacketFlowManagement();
        this.mmePacketFlowManagement = mmePacketFlowManagement;
        insertChild(mmePacketFlowManagement, childrenNames());
        return mmePacketFlowManagement;
    }

    /**
     * Deletes container entry "mmePacketFlowManagement".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmePacketFlowManagement() throws JNCException {
        this.mmePacketFlowManagement = null;
        String path = "mme-packet-flow-management";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeBssgp) mmeBssgp = (MmeBssgp)child;
        else if (child instanceof MmeGbIf) mmeGbIf = (MmeGbIf)child;
        else if (child instanceof MmeNs) mmeNs = (MmeNs)child;
        else if (child instanceof MmeNsFr) mmeNsFr = (MmeNsFr)child;
        else if (child instanceof SigBvc) sigBvc = (SigBvc)child;
        else if (child instanceof MmeLlc) mmeLlc = (MmeLlc)child;
        else if (child instanceof MmeSndcp) mmeSndcp = (MmeSndcp)child;
        else if (child instanceof MmePacketFlowManagement) mmePacketFlowManagement = (MmePacketFlowManagement)child;
    }

}
