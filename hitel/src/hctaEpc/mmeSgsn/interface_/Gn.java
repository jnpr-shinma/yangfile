/* 
 * @(#)Gn.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;
import .ietfInetTypes.IpAddress;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeGgsn;

import MmeGnIf;

import NodeSet;

import Path;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gn"
 * <p>
 * See line 246 in
 * upmConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Gn extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-gn-if".
     */
    public MmeGnIf mmeGnIf = null;

    /**
     * Constructor for an empty Gn object.
     */
    public Gn() {
        super(Epc.NAMESPACE, "gn");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Gn clone() {
        return (Gn)cloneContent(new Gn());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Gn cloneShallow() {
        return (Gn)cloneShallowContent(new Gn());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-gn-if",
            "mme-ggsn",
            "path",
        };
    }

    /* Access methods for container child: "mme-gn-if". */

    /**
     * Adds container entry "mmeGnIf", using an existing object.
     * @param mmeGnIf The object to add.
     * @return The added child.
     */
    public MmeGnIf addMmeGnIf(MmeGnIf mmeGnIf) throws JNCException {
        this.mmeGnIf = mmeGnIf;
        insertChild(mmeGnIf, childrenNames());
        return mmeGnIf;
    }

    /**
     * Adds container entry "mmeGnIf".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeGnIf addMmeGnIf() throws JNCException {
        MmeGnIf mmeGnIf = new MmeGnIf();
        this.mmeGnIf = mmeGnIf;
        insertChild(mmeGnIf, childrenNames());
        return mmeGnIf;
    }

    /**
     * Deletes container entry "mmeGnIf".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeGnIf() throws JNCException {
        this.mmeGnIf = null;
        String path = "mme-gn-if";
        return delete(path);
    }

    /* Access methods for list child: "mme-ggsn". */

    /**
     * Gets list entry "mmeGgsn", with specified keys.
     * @param ipAddressValue Key argument of child.
     */
    public MmeGgsn getMmeGgsn(IpAddress ipAddressValue) throws JNCException {
        String path = "mme-ggsn[ipAddress='" + ipAddressValue + "']";
        return (MmeGgsn)searchOne(path);
    }

    /**
     * Gets list entry "mmeGgsn", with specified keys.
     * The keys are specified as strings.
     * @param ipAddressValue Key argument of child.
     */
    public MmeGgsn getMmeGgsn(String ipAddressValue) throws JNCException {
        String path = "mme-ggsn[ipAddress='" + ipAddressValue + "']";
        return (MmeGgsn)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-ggsn".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeGgsnIterator() {
        return new ElementChildrenIterator(children, "mme-ggsn");
    }

    /**
     * Adds list entry "mmeGgsn", using an existing object.
     * @param mmeGgsn The object to add.
     * @return The added child.
     */
    public MmeGgsn addMmeGgsn(MmeGgsn mmeGgsn) throws JNCException {
        insertChild(mmeGgsn, childrenNames());
        return mmeGgsn;
    }

    /**
     * Adds list entry "mmeGgsn", with specified keys.
     * @param ipAddressValue Key argument of child.
     * @return The added child.
     */
    public MmeGgsn addMmeGgsn(IpAddress ipAddressValue) throws JNCException {
        MmeGgsn mmeGgsn = new MmeGgsn(ipAddressValue);
        return addMmeGgsn(mmeGgsn);
    }

    /**
     * Adds list entry "mmeGgsn", with specified keys.
     * The keys are specified as strings.
     * @param ipAddressValue Key argument of child.
     * @return The added child.
     */
    public MmeGgsn addMmeGgsn(String ipAddressValue) throws JNCException {
        MmeGgsn mmeGgsn = new MmeGgsn(ipAddressValue);
        return addMmeGgsn(mmeGgsn);
    }

    /**
     * Adds list entry "mmeGgsn".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeGgsn addMmeGgsn() throws JNCException {
        MmeGgsn mmeGgsn = new MmeGgsn();
        insertChild(mmeGgsn, childrenNames());
        return mmeGgsn;
    }

    /**
     * Deletes list entry "mmeGgsn", with specified keys.
     * @param ipAddressValue Key argument of child.
     */
    public void deleteMmeGgsn(IpAddress ipAddressValue) throws JNCException {
        String path = "mme-ggsn[ipAddress='" + ipAddressValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeGgsn", with specified keys.
     * The keys are specified as strings.
     * @param ipAddressValue Key argument of child.
     */
    public void deleteMmeGgsn(String ipAddressValue) throws JNCException {
        String path = "mme-ggsn[ipAddress='" + ipAddressValue + "']";
        delete(path);
    }

    /* Access methods for list child: "path". */

    /**
     * Gets list entry "path", with specified keys.
     */
    public Path getPath() throws JNCException {
        String path = "path";
        return (Path)searchOne(path);
    }

    /**
     * Iterator method for the list "path".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator pathIterator() {
        return new ElementChildrenIterator(children, "path");
    }

    /**
     * Adds list entry "path", using an existing object.
     * @param path The object to add.
     * @return The added child.
     */
    public Path addPath(Path path) throws JNCException {
        insertChild(path, childrenNames());
        return path;
    }

    /**
     * Adds list entry "path".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Path addPath() throws JNCException {
        Path path = new Path();
        insertChild(path, childrenNames());
        return path;
    }

    /**
     * Deletes list entry "path", with specified keys.
     */
    public void deletePath() throws JNCException {
        String path = "path";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeGnIf) mmeGnIf = (MmeGnIf)child;
    }

}
