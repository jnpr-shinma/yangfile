/* 
 * @(#)S101.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeEan;

import MmeS101If;

import NodeSet;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/s101"
 * <p>
 * See line 2267 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class S101 extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-s101-if".
     */
    public MmeS101If mmeS101If = null;

    /**
     * Constructor for an empty S101 object.
     */
    public S101() {
        super(Epc.NAMESPACE, "s101");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public S101 clone() {
        return (S101)cloneContent(new S101());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public S101 cloneShallow() {
        return (S101)cloneShallowContent(new S101());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-ean",
            "mme-s101-if",
        };
    }

    /* Access methods for list child: "mme-ean". */

    /**
     * Gets list entry "mmeEan", with specified keys.
     * @param ehrpdAccessIdValue Key argument of child.
     */
    public MmeEan getMmeEan(YangString ehrpdAccessIdValue) throws JNCException {
        String path = "mme-ean[ehrpdAccessId='" + ehrpdAccessIdValue + "']";
        return (MmeEan)searchOne(path);
    }

    /**
     * Gets list entry "mmeEan", with specified keys.
     * The keys are specified as strings.
     * @param ehrpdAccessIdValue Key argument of child.
     */
    public MmeEan getMmeEan(String ehrpdAccessIdValue) throws JNCException {
        String path = "mme-ean[ehrpdAccessId='" + ehrpdAccessIdValue + "']";
        return (MmeEan)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-ean".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeEanIterator() {
        return new ElementChildrenIterator(children, "mme-ean");
    }

    /**
     * Adds list entry "mmeEan", using an existing object.
     * @param mmeEan The object to add.
     * @return The added child.
     */
    public MmeEan addMmeEan(MmeEan mmeEan) throws JNCException {
        insertChild(mmeEan, childrenNames());
        return mmeEan;
    }

    /**
     * Adds list entry "mmeEan", with specified keys.
     * @param ehrpdAccessIdValue Key argument of child.
     * @return The added child.
     */
    public MmeEan addMmeEan(YangString ehrpdAccessIdValue) throws JNCException {
        MmeEan mmeEan = new MmeEan(ehrpdAccessIdValue);
        return addMmeEan(mmeEan);
    }

    /**
     * Adds list entry "mmeEan", with specified keys.
     * The keys are specified as strings.
     * @param ehrpdAccessIdValue Key argument of child.
     * @return The added child.
     */
    public MmeEan addMmeEan(String ehrpdAccessIdValue) throws JNCException {
        MmeEan mmeEan = new MmeEan(ehrpdAccessIdValue);
        return addMmeEan(mmeEan);
    }

    /**
     * Adds list entry "mmeEan".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeEan addMmeEan() throws JNCException {
        MmeEan mmeEan = new MmeEan();
        insertChild(mmeEan, childrenNames());
        return mmeEan;
    }

    /**
     * Deletes list entry "mmeEan", with specified keys.
     * @param ehrpdAccessIdValue Key argument of child.
     */
    public void deleteMmeEan(YangString ehrpdAccessIdValue) throws JNCException {
        String path = "mme-ean[ehrpdAccessId='" + ehrpdAccessIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeEan", with specified keys.
     * The keys are specified as strings.
     * @param ehrpdAccessIdValue Key argument of child.
     */
    public void deleteMmeEan(String ehrpdAccessIdValue) throws JNCException {
        String path = "mme-ean[ehrpdAccessId='" + ehrpdAccessIdValue + "']";
        delete(path);
    }

    /* Access methods for container child: "mme-s101-if". */

    /**
     * Adds container entry "mmeS101If", using an existing object.
     * @param mmeS101If The object to add.
     * @return The added child.
     */
    public MmeS101If addMmeS101If(MmeS101If mmeS101If) throws JNCException {
        this.mmeS101If = mmeS101If;
        insertChild(mmeS101If, childrenNames());
        return mmeS101If;
    }

    /**
     * Adds container entry "mmeS101If".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeS101If addMmeS101If() throws JNCException {
        MmeS101If mmeS101If = new MmeS101If();
        this.mmeS101If = mmeS101If;
        insertChild(mmeS101If, childrenNames());
        return mmeS101If;
    }

    /**
     * Deletes container entry "mmeS101If".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeS101If() throws JNCException {
        this.mmeS101If = null;
        String path = "mme-s101-if";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeS101If) mmeS101If = (MmeS101If)child;
    }

}
