/* 
 * @(#)EnbIwsMap.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.s102;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/s102/enb-iws-map"
 * <p>
 * See line 424 in
 * s1MasterCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class EnbIwsMap extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty EnbIwsMap object.
     */
    public EnbIwsMap() {
        super(Epc.NAMESPACE, "enb-iws-map");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public EnbIwsMap clone() {
        return (EnbIwsMap)cloneContent(new EnbIwsMap());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public EnbIwsMap cloneShallow() {
        return (EnbIwsMap)cloneShallowContent(new EnbIwsMap());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "plmn-id",
            "enodeb-id",
            "enodeb-type",
            "iws-id",
            "iws-ip-address",
        };
    }

    /* Access methods for leaf child: "plmn-id". */

    /**
     * Gets the value for child leaf "plmn-id".
     * @return The value of the leaf.
     */
    public YangString getPlmnIdValue() throws JNCException {
        return (YangString)getValue("plmn-id");
    }

    /**
     * Sets the value for child leaf "plmn-id",
     * using instance of generated typedef class.
     * @param plmnIdValue The value to set.
     * @param plmnIdValue used during instantiation.
     */
    public void setPlmnIdValue(YangString plmnIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-id",
            plmnIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "plmn-id",
     * using a String value.
     * @param plmnIdValue used during instantiation.
     */
    public void setPlmnIdValue(String plmnIdValue) throws JNCException {
        setPlmnIdValue(new YangString(plmnIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "plmn-id" leaf will not have a value.
     */
    public void addPlmnId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-id",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "enodeb-id". */

    /**
     * Gets the value for child leaf "enodeb-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getEnodebIdValue() throws JNCException {
        return (YangUInt32)getValue("enodeb-id");
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using instance of generated typedef class.
     * @param enodebIdValue The value to set.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(YangUInt32 enodebIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-id",
            enodebIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using Java primitive values.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(long enodebIdValue) throws JNCException {
        setEnodebIdValue(new YangUInt32(enodebIdValue));
    }

    /**
     * Sets the value for child leaf "enodeb-id",
     * using a String value.
     * @param enodebIdValue used during instantiation.
     */
    public void setEnodebIdValue(String enodebIdValue) throws JNCException {
        setEnodebIdValue(new YangUInt32(enodebIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-id" leaf will not have a value.
     */
    public void addEnodebId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-id",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "enodeb-type". */

    /**
     * Gets the value for child leaf "enodeb-type".
     * @return The value of the leaf.
     */
    public YangString getEnodebTypeValue() throws JNCException {
        return (YangString)getValue("enodeb-type");
    }

    /**
     * Sets the value for child leaf "enodeb-type",
     * using instance of generated typedef class.
     * @param enodebTypeValue The value to set.
     * @param enodebTypeValue used during instantiation.
     */
    public void setEnodebTypeValue(YangString enodebTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-type",
            enodebTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enodeb-type",
     * using a String value.
     * @param enodebTypeValue used during instantiation.
     */
    public void setEnodebTypeValue(String enodebTypeValue) throws JNCException {
        setEnodebTypeValue(new YangString(enodebTypeValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enodeb-type" leaf will not have a value.
     */
    public void addEnodebType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "enodeb-type",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "iws-id". */

    /**
     * Gets the value for child leaf "iws-id".
     * @return The value of the leaf.
     */
    public YangString getIwsIdValue() throws JNCException {
        return (YangString)getValue("iws-id");
    }

    /**
     * Sets the value for child leaf "iws-id",
     * using instance of generated typedef class.
     * @param iwsIdValue The value to set.
     * @param iwsIdValue used during instantiation.
     */
    public void setIwsIdValue(YangString iwsIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iws-id",
            iwsIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "iws-id",
     * using a String value.
     * @param iwsIdValue used during instantiation.
     */
    public void setIwsIdValue(String iwsIdValue) throws JNCException {
        setIwsIdValue(new YangString(iwsIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "iws-id" leaf will not have a value.
     */
    public void addIwsId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iws-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "iws-ip-address". */

    /**
     * Gets the value for child leaf "iws-ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getIwsIpAddressValue() throws JNCException {
        return (IpAddress)getValue("iws-ip-address");
    }

    /**
     * Sets the value for child leaf "iws-ip-address",
     * using a JNC type value.
     * @param iwsIpAddressValue The value to set.
     * @param iwsIpAddressValue used during instantiation.
     */
    public void setIwsIpAddressValue(IpAddress iwsIpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iws-ip-address",
            iwsIpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "iws-ip-address",
     * using a String value.
     * @param iwsIpAddressValue used during instantiation.
     */
    public void setIwsIpAddressValue(String iwsIpAddressValue)
            throws JNCException {
        setIwsIpAddressValue(new IpAddress(iwsIpAddressValue));
    }

    /**
     * Unsets the value for child leaf "iws-ip-address".
     */
    public void unsetIwsIpAddressValue() throws JNCException {
        delete("iws-ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "iws-ip-address" leaf will not have a value.
     */
    public void addIwsIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iws-ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "iws-ip-address" with operation "replace".
     */
    public void markIwsIpAddressReplace() throws JNCException {
        markLeafReplace("iwsIpAddress");
    }

    /**
     * Marks the leaf "iws-ip-address" with operation "merge".
     */
    public void markIwsIpAddressMerge() throws JNCException {
        markLeafMerge("iwsIpAddress");
    }

    /**
     * Marks the leaf "iws-ip-address" with operation "create".
     */
    public void markIwsIpAddressCreate() throws JNCException {
        markLeafCreate("iwsIpAddress");
    }

    /**
     * Marks the leaf "iws-ip-address" with operation "delete".
     */
    public void markIwsIpAddressDelete() throws JNCException {
        markLeafDelete("iwsIpAddress");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
