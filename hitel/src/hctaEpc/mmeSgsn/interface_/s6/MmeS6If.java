/* 
 * @(#)MmeS6If.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.s6;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/s6/mme-s6-if"
 * <p>
 * See line 225 in
 * dcConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeS6If extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeS6If object.
     */
    public MmeS6If() {
        super(Epc.NAMESPACE, "mme-s6-if");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeS6If clone() {
        return (MmeS6If)cloneContent(new MmeS6If());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeS6If cloneShallow() {
        return (MmeS6If)cloneShallowContent(new MmeS6If());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "request-timer",
            "request-retry",
            "air-vector-limit",
            "include-dest-host",
            "dual-vector-type",
            "g-u-vector-limit",
            "version",
            "ue-timezone",
            "t-ads-retrieval",
            "odb-ps",
        };
    }

    /* Access methods for optional leaf child: "request-timer". */

    /**
     * Gets the value for child leaf "request-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getRequestTimerValue() throws JNCException {
        YangUInt8 requestTimer = (YangUInt8)getValue("request-timer");
        if (requestTimer == null) {
            requestTimer = new YangUInt8("5");  // default
        }
        return requestTimer;
    }

    /**
     * Sets the value for child leaf "request-timer",
     * using instance of generated typedef class.
     * @param requestTimerValue The value to set.
     * @param requestTimerValue used during instantiation.
     */
    public void setRequestTimerValue(YangUInt8 requestTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "request-timer",
            requestTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "request-timer",
     * using Java primitive values.
     * @param requestTimerValue used during instantiation.
     */
    public void setRequestTimerValue(short requestTimerValue)
            throws JNCException {
        setRequestTimerValue(new YangUInt8(requestTimerValue));
    }

    /**
     * Sets the value for child leaf "request-timer",
     * using a String value.
     * @param requestTimerValue used during instantiation.
     */
    public void setRequestTimerValue(String requestTimerValue)
            throws JNCException {
        setRequestTimerValue(new YangUInt8(requestTimerValue));
    }

    /**
     * Unsets the value for child leaf "request-timer".
     */
    public void unsetRequestTimerValue() throws JNCException {
        delete("request-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "request-timer" leaf will not have a value.
     */
    public void addRequestTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "request-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "request-timer" with operation "replace".
     */
    public void markRequestTimerReplace() throws JNCException {
        markLeafReplace("requestTimer");
    }

    /**
     * Marks the leaf "request-timer" with operation "merge".
     */
    public void markRequestTimerMerge() throws JNCException {
        markLeafMerge("requestTimer");
    }

    /**
     * Marks the leaf "request-timer" with operation "create".
     */
    public void markRequestTimerCreate() throws JNCException {
        markLeafCreate("requestTimer");
    }

    /**
     * Marks the leaf "request-timer" with operation "delete".
     */
    public void markRequestTimerDelete() throws JNCException {
        markLeafDelete("requestTimer");
    }

    /* Access methods for optional leaf child: "request-retry". */

    /**
     * Gets the value for child leaf "request-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getRequestRetryValue() throws JNCException {
        YangUInt8 requestRetry = (YangUInt8)getValue("request-retry");
        if (requestRetry == null) {
            requestRetry = new YangUInt8("0");  // default
        }
        return requestRetry;
    }

    /**
     * Sets the value for child leaf "request-retry",
     * using instance of generated typedef class.
     * @param requestRetryValue The value to set.
     * @param requestRetryValue used during instantiation.
     */
    public void setRequestRetryValue(YangUInt8 requestRetryValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "request-retry",
            requestRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "request-retry",
     * using Java primitive values.
     * @param requestRetryValue used during instantiation.
     */
    public void setRequestRetryValue(short requestRetryValue)
            throws JNCException {
        setRequestRetryValue(new YangUInt8(requestRetryValue));
    }

    /**
     * Sets the value for child leaf "request-retry",
     * using a String value.
     * @param requestRetryValue used during instantiation.
     */
    public void setRequestRetryValue(String requestRetryValue)
            throws JNCException {
        setRequestRetryValue(new YangUInt8(requestRetryValue));
    }

    /**
     * Unsets the value for child leaf "request-retry".
     */
    public void unsetRequestRetryValue() throws JNCException {
        delete("request-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "request-retry" leaf will not have a value.
     */
    public void addRequestRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "request-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "request-retry" with operation "replace".
     */
    public void markRequestRetryReplace() throws JNCException {
        markLeafReplace("requestRetry");
    }

    /**
     * Marks the leaf "request-retry" with operation "merge".
     */
    public void markRequestRetryMerge() throws JNCException {
        markLeafMerge("requestRetry");
    }

    /**
     * Marks the leaf "request-retry" with operation "create".
     */
    public void markRequestRetryCreate() throws JNCException {
        markLeafCreate("requestRetry");
    }

    /**
     * Marks the leaf "request-retry" with operation "delete".
     */
    public void markRequestRetryDelete() throws JNCException {
        markLeafDelete("requestRetry");
    }

    /* Access methods for optional leaf child: "air-vector-limit". */

    /**
     * Gets the value for child leaf "air-vector-limit".
     * @return The value of the leaf.
     */
    public YangUInt8 getAirVectorLimitValue() throws JNCException {
        YangUInt8 airVectorLimit = (YangUInt8)getValue("air-vector-limit");
        if (airVectorLimit == null) {
            airVectorLimit = new YangUInt8("1");  // default
        }
        return airVectorLimit;
    }

    /**
     * Sets the value for child leaf "air-vector-limit",
     * using instance of generated typedef class.
     * @param airVectorLimitValue The value to set.
     * @param airVectorLimitValue used during instantiation.
     */
    public void setAirVectorLimitValue(YangUInt8 airVectorLimitValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "air-vector-limit",
            airVectorLimitValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "air-vector-limit",
     * using Java primitive values.
     * @param airVectorLimitValue used during instantiation.
     */
    public void setAirVectorLimitValue(short airVectorLimitValue)
            throws JNCException {
        setAirVectorLimitValue(new YangUInt8(airVectorLimitValue));
    }

    /**
     * Sets the value for child leaf "air-vector-limit",
     * using a String value.
     * @param airVectorLimitValue used during instantiation.
     */
    public void setAirVectorLimitValue(String airVectorLimitValue)
            throws JNCException {
        setAirVectorLimitValue(new YangUInt8(airVectorLimitValue));
    }

    /**
     * Unsets the value for child leaf "air-vector-limit".
     */
    public void unsetAirVectorLimitValue() throws JNCException {
        delete("air-vector-limit");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "air-vector-limit" leaf will not have a value.
     */
    public void addAirVectorLimit() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "air-vector-limit",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "air-vector-limit" with operation "replace".
     */
    public void markAirVectorLimitReplace() throws JNCException {
        markLeafReplace("airVectorLimit");
    }

    /**
     * Marks the leaf "air-vector-limit" with operation "merge".
     */
    public void markAirVectorLimitMerge() throws JNCException {
        markLeafMerge("airVectorLimit");
    }

    /**
     * Marks the leaf "air-vector-limit" with operation "create".
     */
    public void markAirVectorLimitCreate() throws JNCException {
        markLeafCreate("airVectorLimit");
    }

    /**
     * Marks the leaf "air-vector-limit" with operation "delete".
     */
    public void markAirVectorLimitDelete() throws JNCException {
        markLeafDelete("airVectorLimit");
    }

    /* Access methods for optional leaf child: "include-dest-host". */

    /**
     * Gets the value for child leaf "include-dest-host".
     * @return The value of the leaf.
     */
    public YangEnumeration getIncludeDestHostValue() throws JNCException {
        YangEnumeration includeDestHost = (YangEnumeration)getValue("include-dest-host");
        if (includeDestHost == null) {
            includeDestHost = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return includeDestHost;
    }

    /**
     * Sets the value for child leaf "include-dest-host",
     * using instance of generated typedef class.
     * @param includeDestHostValue The value to set.
     * @param includeDestHostValue used during instantiation.
     */
    public void setIncludeDestHostValue(YangEnumeration includeDestHostValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "include-dest-host",
            includeDestHostValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "include-dest-host",
     * using a String value.
     * @param includeDestHostValue used during instantiation.
     */
    public void setIncludeDestHostValue(String includeDestHostValue)
            throws JNCException {
        setIncludeDestHostValue(new YangEnumeration(includeDestHostValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "include-dest-host".
     */
    public void unsetIncludeDestHostValue() throws JNCException {
        delete("include-dest-host");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "include-dest-host" leaf will not have a value.
     */
    public void addIncludeDestHost() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "include-dest-host",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "include-dest-host" with operation "replace".
     */
    public void markIncludeDestHostReplace() throws JNCException {
        markLeafReplace("includeDestHost");
    }

    /**
     * Marks the leaf "include-dest-host" with operation "merge".
     */
    public void markIncludeDestHostMerge() throws JNCException {
        markLeafMerge("includeDestHost");
    }

    /**
     * Marks the leaf "include-dest-host" with operation "create".
     */
    public void markIncludeDestHostCreate() throws JNCException {
        markLeafCreate("includeDestHost");
    }

    /**
     * Marks the leaf "include-dest-host" with operation "delete".
     */
    public void markIncludeDestHostDelete() throws JNCException {
        markLeafDelete("includeDestHost");
    }

    /* Access methods for optional leaf child: "dual-vector-type". */

    /**
     * Gets the value for child leaf "dual-vector-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getDualVectorTypeValue() throws JNCException {
        YangEnumeration dualVectorType = (YangEnumeration)getValue("dual-vector-type");
        if (dualVectorType == null) {
            dualVectorType = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return dualVectorType;
    }

    /**
     * Sets the value for child leaf "dual-vector-type",
     * using instance of generated typedef class.
     * @param dualVectorTypeValue The value to set.
     * @param dualVectorTypeValue used during instantiation.
     */
    public void setDualVectorTypeValue(YangEnumeration dualVectorTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dual-vector-type",
            dualVectorTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dual-vector-type",
     * using a String value.
     * @param dualVectorTypeValue used during instantiation.
     */
    public void setDualVectorTypeValue(String dualVectorTypeValue)
            throws JNCException {
        setDualVectorTypeValue(new YangEnumeration(dualVectorTypeValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "dual-vector-type".
     */
    public void unsetDualVectorTypeValue() throws JNCException {
        delete("dual-vector-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dual-vector-type" leaf will not have a value.
     */
    public void addDualVectorType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dual-vector-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dual-vector-type" with operation "replace".
     */
    public void markDualVectorTypeReplace() throws JNCException {
        markLeafReplace("dualVectorType");
    }

    /**
     * Marks the leaf "dual-vector-type" with operation "merge".
     */
    public void markDualVectorTypeMerge() throws JNCException {
        markLeafMerge("dualVectorType");
    }

    /**
     * Marks the leaf "dual-vector-type" with operation "create".
     */
    public void markDualVectorTypeCreate() throws JNCException {
        markLeafCreate("dualVectorType");
    }

    /**
     * Marks the leaf "dual-vector-type" with operation "delete".
     */
    public void markDualVectorTypeDelete() throws JNCException {
        markLeafDelete("dualVectorType");
    }

    /* Access methods for optional leaf child: "g-u-vector-limit". */

    /**
     * Gets the value for child leaf "g-u-vector-limit".
     * @return The value of the leaf.
     */
    public YangUInt8 getGUVectorLimitValue() throws JNCException {
        YangUInt8 gUVectorLimit = (YangUInt8)getValue("g-u-vector-limit");
        if (gUVectorLimit == null) {
            gUVectorLimit = new YangUInt8("1");  // default
        }
        return gUVectorLimit;
    }

    /**
     * Sets the value for child leaf "g-u-vector-limit",
     * using instance of generated typedef class.
     * @param gUVectorLimitValue The value to set.
     * @param gUVectorLimitValue used during instantiation.
     */
    public void setGUVectorLimitValue(YangUInt8 gUVectorLimitValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "g-u-vector-limit",
            gUVectorLimitValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "g-u-vector-limit",
     * using Java primitive values.
     * @param gUVectorLimitValue used during instantiation.
     */
    public void setGUVectorLimitValue(short gUVectorLimitValue)
            throws JNCException {
        setGUVectorLimitValue(new YangUInt8(gUVectorLimitValue));
    }

    /**
     * Sets the value for child leaf "g-u-vector-limit",
     * using a String value.
     * @param gUVectorLimitValue used during instantiation.
     */
    public void setGUVectorLimitValue(String gUVectorLimitValue)
            throws JNCException {
        setGUVectorLimitValue(new YangUInt8(gUVectorLimitValue));
    }

    /**
     * Unsets the value for child leaf "g-u-vector-limit".
     */
    public void unsetGUVectorLimitValue() throws JNCException {
        delete("g-u-vector-limit");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "g-u-vector-limit" leaf will not have a value.
     */
    public void addGUVectorLimit() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "g-u-vector-limit",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "g-u-vector-limit" with operation "replace".
     */
    public void markGUVectorLimitReplace() throws JNCException {
        markLeafReplace("gUVectorLimit");
    }

    /**
     * Marks the leaf "g-u-vector-limit" with operation "merge".
     */
    public void markGUVectorLimitMerge() throws JNCException {
        markLeafMerge("gUVectorLimit");
    }

    /**
     * Marks the leaf "g-u-vector-limit" with operation "create".
     */
    public void markGUVectorLimitCreate() throws JNCException {
        markLeafCreate("gUVectorLimit");
    }

    /**
     * Marks the leaf "g-u-vector-limit" with operation "delete".
     */
    public void markGUVectorLimitDelete() throws JNCException {
        markLeafDelete("gUVectorLimit");
    }

    /* Access methods for optional leaf child: "version". */

    /**
     * Gets the value for child leaf "version".
     * @return The value of the leaf.
     */
    public YangEnumeration getVersionValue() throws JNCException {
        YangEnumeration version = (YangEnumeration)getValue("version");
        if (version == null) {
            version = new YangEnumeration("10.7.0", new String[] {  // default
                "9.5.0",
                "10.7.0",
            });
        }
        return version;
    }

    /**
     * Sets the value for child leaf "version",
     * using instance of generated typedef class.
     * @param versionValue The value to set.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(YangEnumeration versionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            versionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "version",
     * using a String value.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(String versionValue) throws JNCException {
        setVersionValue(new YangEnumeration(versionValue, new String[] {
             "9.5.0",
             "10.7.0",
        }));
    }

    /**
     * Unsets the value for child leaf "version".
     */
    public void unsetVersionValue() throws JNCException {
        delete("version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "version" leaf will not have a value.
     */
    public void addVersion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "version" with operation "replace".
     */
    public void markVersionReplace() throws JNCException {
        markLeafReplace("version");
    }

    /**
     * Marks the leaf "version" with operation "merge".
     */
    public void markVersionMerge() throws JNCException {
        markLeafMerge("version");
    }

    /**
     * Marks the leaf "version" with operation "create".
     */
    public void markVersionCreate() throws JNCException {
        markLeafCreate("version");
    }

    /**
     * Marks the leaf "version" with operation "delete".
     */
    public void markVersionDelete() throws JNCException {
        markLeafDelete("version");
    }

    /* Access methods for optional leaf child: "ue-timezone". */

    /**
     * Gets the value for child leaf "ue-timezone".
     * @return The value of the leaf.
     */
    public YangEnumeration getUeTimezoneValue() throws JNCException {
        YangEnumeration ueTimezone = (YangEnumeration)getValue("ue-timezone");
        if (ueTimezone == null) {
            ueTimezone = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return ueTimezone;
    }

    /**
     * Sets the value for child leaf "ue-timezone",
     * using instance of generated typedef class.
     * @param ueTimezoneValue The value to set.
     * @param ueTimezoneValue used during instantiation.
     */
    public void setUeTimezoneValue(YangEnumeration ueTimezoneValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-timezone",
            ueTimezoneValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ue-timezone",
     * using a String value.
     * @param ueTimezoneValue used during instantiation.
     */
    public void setUeTimezoneValue(String ueTimezoneValue) throws JNCException {
        setUeTimezoneValue(new YangEnumeration(ueTimezoneValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "ue-timezone".
     */
    public void unsetUeTimezoneValue() throws JNCException {
        delete("ue-timezone");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ue-timezone" leaf will not have a value.
     */
    public void addUeTimezone() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-timezone",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ue-timezone" with operation "replace".
     */
    public void markUeTimezoneReplace() throws JNCException {
        markLeafReplace("ueTimezone");
    }

    /**
     * Marks the leaf "ue-timezone" with operation "merge".
     */
    public void markUeTimezoneMerge() throws JNCException {
        markLeafMerge("ueTimezone");
    }

    /**
     * Marks the leaf "ue-timezone" with operation "create".
     */
    public void markUeTimezoneCreate() throws JNCException {
        markLeafCreate("ueTimezone");
    }

    /**
     * Marks the leaf "ue-timezone" with operation "delete".
     */
    public void markUeTimezoneDelete() throws JNCException {
        markLeafDelete("ueTimezone");
    }

    /* Access methods for optional leaf child: "t-ads-retrieval". */

    /**
     * Gets the value for child leaf "t-ads-retrieval".
     * @return The value of the leaf.
     */
    public YangEnumeration getTAdsRetrievalValue() throws JNCException {
        YangEnumeration tAdsRetrieval = (YangEnumeration)getValue("t-ads-retrieval");
        if (tAdsRetrieval == null) {
            tAdsRetrieval = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return tAdsRetrieval;
    }

    /**
     * Sets the value for child leaf "t-ads-retrieval",
     * using instance of generated typedef class.
     * @param tAdsRetrievalValue The value to set.
     * @param tAdsRetrievalValue used during instantiation.
     */
    public void setTAdsRetrievalValue(YangEnumeration tAdsRetrievalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t-ads-retrieval",
            tAdsRetrievalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "t-ads-retrieval",
     * using a String value.
     * @param tAdsRetrievalValue used during instantiation.
     */
    public void setTAdsRetrievalValue(String tAdsRetrievalValue)
            throws JNCException {
        setTAdsRetrievalValue(new YangEnumeration(tAdsRetrievalValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "t-ads-retrieval".
     */
    public void unsetTAdsRetrievalValue() throws JNCException {
        delete("t-ads-retrieval");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "t-ads-retrieval" leaf will not have a value.
     */
    public void addTAdsRetrieval() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t-ads-retrieval",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "t-ads-retrieval" with operation "replace".
     */
    public void markTAdsRetrievalReplace() throws JNCException {
        markLeafReplace("tAdsRetrieval");
    }

    /**
     * Marks the leaf "t-ads-retrieval" with operation "merge".
     */
    public void markTAdsRetrievalMerge() throws JNCException {
        markLeafMerge("tAdsRetrieval");
    }

    /**
     * Marks the leaf "t-ads-retrieval" with operation "create".
     */
    public void markTAdsRetrievalCreate() throws JNCException {
        markLeafCreate("tAdsRetrieval");
    }

    /**
     * Marks the leaf "t-ads-retrieval" with operation "delete".
     */
    public void markTAdsRetrievalDelete() throws JNCException {
        markLeafDelete("tAdsRetrieval");
    }

    /* Access methods for optional leaf child: "odb-ps". */

    /**
     * Gets the value for child leaf "odb-ps".
     * @return The value of the leaf.
     */
    public YangEnumeration getOdbPsValue() throws JNCException {
        YangEnumeration odbPs = (YangEnumeration)getValue("odb-ps");
        if (odbPs == null) {
            odbPs = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return odbPs;
    }

    /**
     * Sets the value for child leaf "odb-ps",
     * using instance of generated typedef class.
     * @param odbPsValue The value to set.
     * @param odbPsValue used during instantiation.
     */
    public void setOdbPsValue(YangEnumeration odbPsValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "odb-ps",
            odbPsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "odb-ps",
     * using a String value.
     * @param odbPsValue used during instantiation.
     */
    public void setOdbPsValue(String odbPsValue) throws JNCException {
        setOdbPsValue(new YangEnumeration(odbPsValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "odb-ps".
     */
    public void unsetOdbPsValue() throws JNCException {
        delete("odb-ps");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "odb-ps" leaf will not have a value.
     */
    public void addOdbPs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "odb-ps",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "odb-ps" with operation "replace".
     */
    public void markOdbPsReplace() throws JNCException {
        markLeafReplace("odbPs");
    }

    /**
     * Marks the leaf "odb-ps" with operation "merge".
     */
    public void markOdbPsMerge() throws JNCException {
        markLeafMerge("odbPs");
    }

    /**
     * Marks the leaf "odb-ps" with operation "create".
     */
    public void markOdbPsCreate() throws JNCException {
        markLeafCreate("odbPs");
    }

    /**
     * Marks the leaf "odb-ps" with operation "delete".
     */
    public void markOdbPsDelete() throws JNCException {
        markLeafDelete("odbPs");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
