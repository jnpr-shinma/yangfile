/* 
 * @(#)MmeS4If.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.mmeS4;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/mmeS4/mme-s4-if"
 * <p>
 * See line 374 in
 * upmConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeS4If extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeS4If object.
     */
    public MmeS4If() {
        super(Epc.NAMESPACE, "mme-s4-if");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeS4If clone() {
        return (MmeS4If)cloneContent(new MmeS4If());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeS4If cloneShallow() {
        return (MmeS4If)cloneShallowContent(new MmeS4If());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "gtp-profile",
            "uli-inclusion",
            "ue-timezone-inclusion",
        };
    }

    /* Access methods for optional leaf child: "gtp-profile". */

    /**
     * Gets the value for child leaf "gtp-profile".
     * @return The value of the leaf.
     */
    public YangString getGtpProfileValue() throws JNCException {
        return (YangString)getValue("gtp-profile");
    }

    /**
     * Sets the value for child leaf "gtp-profile",
     * using instance of generated typedef class.
     * @param gtpProfileValue The value to set.
     * @param gtpProfileValue used during instantiation.
     */
    public void setGtpProfileValue(YangString gtpProfileValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gtp-profile",
            gtpProfileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "gtp-profile",
     * using a String value.
     * @param gtpProfileValue used during instantiation.
     */
    public void setGtpProfileValue(String gtpProfileValue) throws JNCException {
        setGtpProfileValue(new YangString(gtpProfileValue));
    }

    /**
     * Unsets the value for child leaf "gtp-profile".
     */
    public void unsetGtpProfileValue() throws JNCException {
        delete("gtp-profile");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "gtp-profile" leaf will not have a value.
     */
    public void addGtpProfile() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "gtp-profile",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "gtp-profile" with operation "replace".
     */
    public void markGtpProfileReplace() throws JNCException {
        markLeafReplace("gtpProfile");
    }

    /**
     * Marks the leaf "gtp-profile" with operation "merge".
     */
    public void markGtpProfileMerge() throws JNCException {
        markLeafMerge("gtpProfile");
    }

    /**
     * Marks the leaf "gtp-profile" with operation "create".
     */
    public void markGtpProfileCreate() throws JNCException {
        markLeafCreate("gtpProfile");
    }

    /**
     * Marks the leaf "gtp-profile" with operation "delete".
     */
    public void markGtpProfileDelete() throws JNCException {
        markLeafDelete("gtpProfile");
    }

    /* Access methods for optional leaf child: "uli-inclusion". */

    /**
     * Gets the value for child leaf "uli-inclusion".
     * @return The value of the leaf.
     */
    public YangEnumeration getUliInclusionValue() throws JNCException {
        YangEnumeration uliInclusion = (YangEnumeration)getValue("uli-inclusion");
        if (uliInclusion == null) {
            uliInclusion = new YangEnumeration("standard", new String[] {  // default
                "standard",
                "force-in-all",
            });
        }
        return uliInclusion;
    }

    /**
     * Sets the value for child leaf "uli-inclusion",
     * using instance of generated typedef class.
     * @param uliInclusionValue The value to set.
     * @param uliInclusionValue used during instantiation.
     */
    public void setUliInclusionValue(YangEnumeration uliInclusionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "uli-inclusion",
            uliInclusionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uli-inclusion",
     * using a String value.
     * @param uliInclusionValue used during instantiation.
     */
    public void setUliInclusionValue(String uliInclusionValue)
            throws JNCException {
        setUliInclusionValue(new YangEnumeration(uliInclusionValue, new String[] {
             "standard",
             "force-in-all",
        }));
    }

    /**
     * Unsets the value for child leaf "uli-inclusion".
     */
    public void unsetUliInclusionValue() throws JNCException {
        delete("uli-inclusion");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uli-inclusion" leaf will not have a value.
     */
    public void addUliInclusion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "uli-inclusion",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "uli-inclusion" with operation "replace".
     */
    public void markUliInclusionReplace() throws JNCException {
        markLeafReplace("uliInclusion");
    }

    /**
     * Marks the leaf "uli-inclusion" with operation "merge".
     */
    public void markUliInclusionMerge() throws JNCException {
        markLeafMerge("uliInclusion");
    }

    /**
     * Marks the leaf "uli-inclusion" with operation "create".
     */
    public void markUliInclusionCreate() throws JNCException {
        markLeafCreate("uliInclusion");
    }

    /**
     * Marks the leaf "uli-inclusion" with operation "delete".
     */
    public void markUliInclusionDelete() throws JNCException {
        markLeafDelete("uliInclusion");
    }

    /* Access methods for optional leaf child: "ue-timezone-inclusion". */

    /**
     * Gets the value for child leaf "ue-timezone-inclusion".
     * @return The value of the leaf.
     */
    public YangEnumeration getUeTimezoneInclusionValue() throws JNCException {
        YangEnumeration ueTimezoneInclusion = (YangEnumeration)getValue("ue-timezone-inclusion");
        if (ueTimezoneInclusion == null) {
            ueTimezoneInclusion = new YangEnumeration("standard", new String[] {  // default
                "standard",
                "force-in-all",
            });
        }
        return ueTimezoneInclusion;
    }

    /**
     * Sets the value for child leaf "ue-timezone-inclusion",
     * using instance of generated typedef class.
     * @param ueTimezoneInclusionValue The value to set.
     * @param ueTimezoneInclusionValue used during instantiation.
     */
    public void setUeTimezoneInclusionValue(YangEnumeration ueTimezoneInclusionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-timezone-inclusion",
            ueTimezoneInclusionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ue-timezone-inclusion",
     * using a String value.
     * @param ueTimezoneInclusionValue used during instantiation.
     */
    public void setUeTimezoneInclusionValue(String ueTimezoneInclusionValue)
            throws JNCException {
        setUeTimezoneInclusionValue(new YangEnumeration(ueTimezoneInclusionValue, new String[] {
             "standard",
             "force-in-all",
        }));
    }

    /**
     * Unsets the value for child leaf "ue-timezone-inclusion".
     */
    public void unsetUeTimezoneInclusionValue() throws JNCException {
        delete("ue-timezone-inclusion");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ue-timezone-inclusion" leaf will not have a value.
     */
    public void addUeTimezoneInclusion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ue-timezone-inclusion",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ue-timezone-inclusion" with operation "replace".
     */
    public void markUeTimezoneInclusionReplace() throws JNCException {
        markLeafReplace("ueTimezoneInclusion");
    }

    /**
     * Marks the leaf "ue-timezone-inclusion" with operation "merge".
     */
    public void markUeTimezoneInclusionMerge() throws JNCException {
        markLeafMerge("ueTimezoneInclusion");
    }

    /**
     * Marks the leaf "ue-timezone-inclusion" with operation "create".
     */
    public void markUeTimezoneInclusionCreate() throws JNCException {
        markLeafCreate("ueTimezoneInclusion");
    }

    /**
     * Marks the leaf "ue-timezone-inclusion" with operation "delete".
     */
    public void markUeTimezoneInclusionDelete() throws JNCException {
        markLeafDelete("ueTimezoneInclusion");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
