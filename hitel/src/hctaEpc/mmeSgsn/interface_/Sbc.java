/* 
 * @(#)Sbc.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;

import Cbc;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeSbcIf;

import NodeSet;

import SbcIfOper;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/sbc"
 * <p>
 * See line 23 in
 * sbcConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Sbc extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-sbc-if".
     */
    public MmeSbcIf mmeSbcIf = null;

    /**
     * Constructor for an empty Sbc object.
     */
    public Sbc() {
        super(Epc.NAMESPACE, "sbc");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Sbc clone() {
        return (Sbc)cloneContent(new Sbc());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Sbc cloneShallow() {
        return (Sbc)cloneShallowContent(new Sbc());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-sbc-if",
            "cbc",
            "sbc-if-oper",
        };
    }

    /* Access methods for container child: "mme-sbc-if". */

    /**
     * Adds container entry "mmeSbcIf", using an existing object.
     * @param mmeSbcIf The object to add.
     * @return The added child.
     */
    public MmeSbcIf addMmeSbcIf(MmeSbcIf mmeSbcIf) throws JNCException {
        this.mmeSbcIf = mmeSbcIf;
        insertChild(mmeSbcIf, childrenNames());
        return mmeSbcIf;
    }

    /**
     * Adds container entry "mmeSbcIf".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSbcIf addMmeSbcIf() throws JNCException {
        MmeSbcIf mmeSbcIf = new MmeSbcIf();
        this.mmeSbcIf = mmeSbcIf;
        insertChild(mmeSbcIf, childrenNames());
        return mmeSbcIf;
    }

    /**
     * Deletes container entry "mmeSbcIf".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeSbcIf() throws JNCException {
        this.mmeSbcIf = null;
        String path = "mme-sbc-if";
        return delete(path);
    }

    /* Access methods for list child: "cbc". */

    /**
     * Gets list entry "cbc", with specified keys.
     */
    public Cbc getCbc() throws JNCException {
        String path = "cbc";
        return (Cbc)searchOne(path);
    }

    /**
     * Iterator method for the list "cbc".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator cbcIterator() {
        return new ElementChildrenIterator(children, "cbc");
    }

    /**
     * Adds list entry "cbc", using an existing object.
     * @param cbc The object to add.
     * @return The added child.
     */
    public Cbc addCbc(Cbc cbc) throws JNCException {
        insertChild(cbc, childrenNames());
        return cbc;
    }

    /**
     * Adds list entry "cbc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Cbc addCbc() throws JNCException {
        Cbc cbc = new Cbc();
        insertChild(cbc, childrenNames());
        return cbc;
    }

    /**
     * Deletes list entry "cbc", with specified keys.
     */
    public void deleteCbc() throws JNCException {
        String path = "cbc";
        delete(path);
    }

    /* Access methods for list child: "sbc-if-oper". */

    /**
     * Gets list entry "sbcIfOper", with specified keys.
     */
    public SbcIfOper getSbcIfOper() throws JNCException {
        String path = "sbc-if-oper";
        return (SbcIfOper)searchOne(path);
    }

    /**
     * Iterator method for the list "sbc-if-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator sbcIfOperIterator() {
        return new ElementChildrenIterator(children, "sbc-if-oper");
    }

    /**
     * Adds list entry "sbcIfOper", using an existing object.
     * @param sbcIfOper The object to add.
     * @return The added child.
     */
    public SbcIfOper addSbcIfOper(SbcIfOper sbcIfOper) throws JNCException {
        insertChild(sbcIfOper, childrenNames());
        return sbcIfOper;
    }

    /**
     * Adds list entry "sbcIfOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SbcIfOper addSbcIfOper() throws JNCException {
        SbcIfOper sbcIfOper = new SbcIfOper();
        insertChild(sbcIfOper, childrenNames());
        return sbcIfOper;
    }

    /**
     * Deletes list entry "sbcIfOper", with specified keys.
     */
    public void deleteSbcIfOper() throws JNCException {
        String path = "sbc-if-oper";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeSbcIf) mmeSbcIf = (MmeSbcIf)child;
    }

}
