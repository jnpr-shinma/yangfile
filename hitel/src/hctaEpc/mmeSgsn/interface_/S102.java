/* 
 * @(#)S102.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;

import Element;

import ElementChildrenIterator;

import EnbIwsMap;

import Epc;

import IwsAction;

import IwsOper;

import JNCException;

import MmeIws;

import MmeS102If;

import NodeSet;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/s102"
 * <p>
 * See line 414 in
 * upmConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class S102 extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-s102-if".
     */
    public MmeS102If mmeS102If = null;

    /**
     * Field for child container "iws-action".
     */
    public IwsAction iwsAction = null;

    /**
     * Constructor for an empty S102 object.
     */
    public S102() {
        super(Epc.NAMESPACE, "s102");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public S102 clone() {
        return (S102)cloneContent(new S102());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public S102 cloneShallow() {
        return (S102)cloneShallowContent(new S102());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-s102-if",
            "mme-iws",
            "enb-iws-map",
            "iws-oper",
            "iws-action",
        };
    }

    /* Access methods for container child: "mme-s102-if". */

    /**
     * Adds container entry "mmeS102If", using an existing object.
     * @param mmeS102If The object to add.
     * @return The added child.
     */
    public MmeS102If addMmeS102If(MmeS102If mmeS102If) throws JNCException {
        this.mmeS102If = mmeS102If;
        insertChild(mmeS102If, childrenNames());
        return mmeS102If;
    }

    /**
     * Adds container entry "mmeS102If".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeS102If addMmeS102If() throws JNCException {
        MmeS102If mmeS102If = new MmeS102If();
        this.mmeS102If = mmeS102If;
        insertChild(mmeS102If, childrenNames());
        return mmeS102If;
    }

    /**
     * Deletes container entry "mmeS102If".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeS102If() throws JNCException {
        this.mmeS102If = null;
        String path = "mme-s102-if";
        return delete(path);
    }

    /* Access methods for list child: "mme-iws". */

    /**
     * Gets list entry "mmeIws", with specified keys.
     * @param iwsIdValue Key argument of child.
     */
    public MmeIws getMmeIws(YangString iwsIdValue) throws JNCException {
        String path = "mme-iws[iwsId='" + iwsIdValue + "']";
        return (MmeIws)searchOne(path);
    }

    /**
     * Gets list entry "mmeIws", with specified keys.
     * The keys are specified as strings.
     * @param iwsIdValue Key argument of child.
     */
    public MmeIws getMmeIws(String iwsIdValue) throws JNCException {
        String path = "mme-iws[iwsId='" + iwsIdValue + "']";
        return (MmeIws)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-iws".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeIwsIterator() {
        return new ElementChildrenIterator(children, "mme-iws");
    }

    /**
     * Adds list entry "mmeIws", using an existing object.
     * @param mmeIws The object to add.
     * @return The added child.
     */
    public MmeIws addMmeIws(MmeIws mmeIws) throws JNCException {
        insertChild(mmeIws, childrenNames());
        return mmeIws;
    }

    /**
     * Adds list entry "mmeIws", with specified keys.
     * @param iwsIdValue Key argument of child.
     * @return The added child.
     */
    public MmeIws addMmeIws(YangString iwsIdValue) throws JNCException {
        MmeIws mmeIws = new MmeIws(iwsIdValue);
        return addMmeIws(mmeIws);
    }

    /**
     * Adds list entry "mmeIws", with specified keys.
     * The keys are specified as strings.
     * @param iwsIdValue Key argument of child.
     * @return The added child.
     */
    public MmeIws addMmeIws(String iwsIdValue) throws JNCException {
        MmeIws mmeIws = new MmeIws(iwsIdValue);
        return addMmeIws(mmeIws);
    }

    /**
     * Adds list entry "mmeIws".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeIws addMmeIws() throws JNCException {
        MmeIws mmeIws = new MmeIws();
        insertChild(mmeIws, childrenNames());
        return mmeIws;
    }

    /**
     * Deletes list entry "mmeIws", with specified keys.
     * @param iwsIdValue Key argument of child.
     */
    public void deleteMmeIws(YangString iwsIdValue) throws JNCException {
        String path = "mme-iws[iwsId='" + iwsIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeIws", with specified keys.
     * The keys are specified as strings.
     * @param iwsIdValue Key argument of child.
     */
    public void deleteMmeIws(String iwsIdValue) throws JNCException {
        String path = "mme-iws[iwsId='" + iwsIdValue + "']";
        delete(path);
    }

    /* Access methods for list child: "enb-iws-map". */

    /**
     * Gets list entry "enbIwsMap", with specified keys.
     */
    public EnbIwsMap getEnbIwsMap() throws JNCException {
        String path = "enb-iws-map";
        return (EnbIwsMap)searchOne(path);
    }

    /**
     * Iterator method for the list "enb-iws-map".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator enbIwsMapIterator() {
        return new ElementChildrenIterator(children, "enb-iws-map");
    }

    /**
     * Adds list entry "enbIwsMap", using an existing object.
     * @param enbIwsMap The object to add.
     * @return The added child.
     */
    public EnbIwsMap addEnbIwsMap(EnbIwsMap enbIwsMap) throws JNCException {
        insertChild(enbIwsMap, childrenNames());
        return enbIwsMap;
    }

    /**
     * Adds list entry "enbIwsMap".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public EnbIwsMap addEnbIwsMap() throws JNCException {
        EnbIwsMap enbIwsMap = new EnbIwsMap();
        insertChild(enbIwsMap, childrenNames());
        return enbIwsMap;
    }

    /**
     * Deletes list entry "enbIwsMap", with specified keys.
     */
    public void deleteEnbIwsMap() throws JNCException {
        String path = "enb-iws-map";
        delete(path);
    }

    /* Access methods for list child: "iws-oper". */

    /**
     * Gets list entry "iwsOper", with specified keys.
     */
    public IwsOper getIwsOper() throws JNCException {
        String path = "iws-oper";
        return (IwsOper)searchOne(path);
    }

    /**
     * Iterator method for the list "iws-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator iwsOperIterator() {
        return new ElementChildrenIterator(children, "iws-oper");
    }

    /**
     * Adds list entry "iwsOper", using an existing object.
     * @param iwsOper The object to add.
     * @return The added child.
     */
    public IwsOper addIwsOper(IwsOper iwsOper) throws JNCException {
        insertChild(iwsOper, childrenNames());
        return iwsOper;
    }

    /**
     * Adds list entry "iwsOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public IwsOper addIwsOper() throws JNCException {
        IwsOper iwsOper = new IwsOper();
        insertChild(iwsOper, childrenNames());
        return iwsOper;
    }

    /**
     * Deletes list entry "iwsOper", with specified keys.
     */
    public void deleteIwsOper() throws JNCException {
        String path = "iws-oper";
        delete(path);
    }

    /* Access methods for container child: "iws-action". */

    /**
     * Adds container entry "iwsAction", using an existing object.
     * @param iwsAction The object to add.
     * @return The added child.
     */
    public IwsAction addIwsAction(IwsAction iwsAction) throws JNCException {
        this.iwsAction = iwsAction;
        insertChild(iwsAction, childrenNames());
        return iwsAction;
    }

    /**
     * Adds container entry "iwsAction".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public IwsAction addIwsAction() throws JNCException {
        IwsAction iwsAction = new IwsAction();
        this.iwsAction = iwsAction;
        insertChild(iwsAction, childrenNames());
        return iwsAction;
    }

    /**
     * Deletes container entry "iwsAction".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteIwsAction() throws JNCException {
        this.iwsAction = null;
        String path = "iws-action";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeS102If) mmeS102If = (MmeS102If)child;
        else if (child instanceof IwsAction) iwsAction = (IwsAction)child;
    }

}
