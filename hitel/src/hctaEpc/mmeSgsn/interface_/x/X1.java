/* 
 * @(#)X1.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.x;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/x/x1"
 * <p>
 * See line 43 in
 * agwLiCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class X1 extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty X1 object.
     */
    public X1() {
        super(Epc.NAMESPACE, "x1");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public X1 clone() {
        return (X1)cloneContent(new X1());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public X1 cloneShallow() {
        return (X1)cloneShallowContent(new X1());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "status-str",
            "current-target",
            "current-monitored-targets",
            "peak-targets",
            "peak-monitored-targets",
            "monitor-limit-exceeded",
            "act-reqs-dropped",
            "act-reqs-rejected",
            "deact-reqs-dropped",
            "deact-reqs-rejected",
            "interro-reqs-dropped",
            "interro-reqs-rejected",
            "reset-reqs-dropped",
            "unknown-admf-reqs-dropped",
            "admf-msgs-dropped-scoketfull",
            "admf-msgs-sent-success",
        };
    }

    /* Access methods for optional leaf child: "status-str". */

    /**
     * Gets the value for child leaf "status-str".
     * @return The value of the leaf.
     */
    public YangString getStatusStrValue() throws JNCException {
        return (YangString)getValue("status-str");
    }

    /**
     * Sets the value for child leaf "status-str",
     * using instance of generated typedef class.
     * @param statusStrValue The value to set.
     * @param statusStrValue used during instantiation.
     */
    public void setStatusStrValue(YangString statusStrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-str",
            statusStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-str",
     * using a String value.
     * @param statusStrValue used during instantiation.
     */
    public void setStatusStrValue(String statusStrValue) throws JNCException {
        setStatusStrValue(new YangString(statusStrValue));
    }

    /**
     * Unsets the value for child leaf "status-str".
     */
    public void unsetStatusStrValue() throws JNCException {
        delete("status-str");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-str" leaf will not have a value.
     */
    public void addStatusStr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-str",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-str" with operation "replace".
     */
    public void markStatusStrReplace() throws JNCException {
        markLeafReplace("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "merge".
     */
    public void markStatusStrMerge() throws JNCException {
        markLeafMerge("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "create".
     */
    public void markStatusStrCreate() throws JNCException {
        markLeafCreate("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "delete".
     */
    public void markStatusStrDelete() throws JNCException {
        markLeafDelete("statusStr");
    }

    /* Access methods for optional leaf child: "current-target". */

    /**
     * Gets the value for child leaf "current-target".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentTargetValue() throws JNCException {
        return (YangUInt32)getValue("current-target");
    }

    /**
     * Sets the value for child leaf "current-target",
     * using instance of generated typedef class.
     * @param currentTargetValue The value to set.
     * @param currentTargetValue used during instantiation.
     */
    public void setCurrentTargetValue(YangUInt32 currentTargetValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-target",
            currentTargetValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-target",
     * using Java primitive values.
     * @param currentTargetValue used during instantiation.
     */
    public void setCurrentTargetValue(long currentTargetValue)
            throws JNCException {
        setCurrentTargetValue(new YangUInt32(currentTargetValue));
    }

    /**
     * Sets the value for child leaf "current-target",
     * using a String value.
     * @param currentTargetValue used during instantiation.
     */
    public void setCurrentTargetValue(String currentTargetValue)
            throws JNCException {
        setCurrentTargetValue(new YangUInt32(currentTargetValue));
    }

    /**
     * Unsets the value for child leaf "current-target".
     */
    public void unsetCurrentTargetValue() throws JNCException {
        delete("current-target");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-target" leaf will not have a value.
     */
    public void addCurrentTarget() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-target",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-target" with operation "replace".
     */
    public void markCurrentTargetReplace() throws JNCException {
        markLeafReplace("currentTarget");
    }

    /**
     * Marks the leaf "current-target" with operation "merge".
     */
    public void markCurrentTargetMerge() throws JNCException {
        markLeafMerge("currentTarget");
    }

    /**
     * Marks the leaf "current-target" with operation "create".
     */
    public void markCurrentTargetCreate() throws JNCException {
        markLeafCreate("currentTarget");
    }

    /**
     * Marks the leaf "current-target" with operation "delete".
     */
    public void markCurrentTargetDelete() throws JNCException {
        markLeafDelete("currentTarget");
    }

    /* Access methods for optional leaf child: "current-monitored-targets". */

    /**
     * Gets the value for child leaf "current-monitored-targets".
     * @return The value of the leaf.
     */
    public YangUInt32 getCurrentMonitoredTargetsValue() throws JNCException {
        return (YangUInt32)getValue("current-monitored-targets");
    }

    /**
     * Sets the value for child leaf "current-monitored-targets",
     * using instance of generated typedef class.
     * @param currentMonitoredTargetsValue The value to set.
     * @param currentMonitoredTargetsValue used during instantiation.
     */
    public void setCurrentMonitoredTargetsValue(YangUInt32 currentMonitoredTargetsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-monitored-targets",
            currentMonitoredTargetsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "current-monitored-targets",
     * using Java primitive values.
     * @param currentMonitoredTargetsValue used during instantiation.
     */
    public void setCurrentMonitoredTargetsValue(long currentMonitoredTargetsValue)
            throws JNCException {
        setCurrentMonitoredTargetsValue(new YangUInt32(currentMonitoredTargetsValue));
    }

    /**
     * Sets the value for child leaf "current-monitored-targets",
     * using a String value.
     * @param currentMonitoredTargetsValue used during instantiation.
     */
    public void setCurrentMonitoredTargetsValue(String currentMonitoredTargetsValue)
            throws JNCException {
        setCurrentMonitoredTargetsValue(new YangUInt32(currentMonitoredTargetsValue));
    }

    /**
     * Unsets the value for child leaf "current-monitored-targets".
     */
    public void unsetCurrentMonitoredTargetsValue() throws JNCException {
        delete("current-monitored-targets");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "current-monitored-targets" leaf will not have a value.
     */
    public void addCurrentMonitoredTargets() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "current-monitored-targets",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "current-monitored-targets" with operation "replace".
     */
    public void markCurrentMonitoredTargetsReplace() throws JNCException {
        markLeafReplace("currentMonitoredTargets");
    }

    /**
     * Marks the leaf "current-monitored-targets" with operation "merge".
     */
    public void markCurrentMonitoredTargetsMerge() throws JNCException {
        markLeafMerge("currentMonitoredTargets");
    }

    /**
     * Marks the leaf "current-monitored-targets" with operation "create".
     */
    public void markCurrentMonitoredTargetsCreate() throws JNCException {
        markLeafCreate("currentMonitoredTargets");
    }

    /**
     * Marks the leaf "current-monitored-targets" with operation "delete".
     */
    public void markCurrentMonitoredTargetsDelete() throws JNCException {
        markLeafDelete("currentMonitoredTargets");
    }

    /* Access methods for optional leaf child: "peak-targets". */

    /**
     * Gets the value for child leaf "peak-targets".
     * @return The value of the leaf.
     */
    public YangUInt32 getPeakTargetsValue() throws JNCException {
        return (YangUInt32)getValue("peak-targets");
    }

    /**
     * Sets the value for child leaf "peak-targets",
     * using instance of generated typedef class.
     * @param peakTargetsValue The value to set.
     * @param peakTargetsValue used during instantiation.
     */
    public void setPeakTargetsValue(YangUInt32 peakTargetsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "peak-targets",
            peakTargetsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "peak-targets",
     * using Java primitive values.
     * @param peakTargetsValue used during instantiation.
     */
    public void setPeakTargetsValue(long peakTargetsValue) throws JNCException {
        setPeakTargetsValue(new YangUInt32(peakTargetsValue));
    }

    /**
     * Sets the value for child leaf "peak-targets",
     * using a String value.
     * @param peakTargetsValue used during instantiation.
     */
    public void setPeakTargetsValue(String peakTargetsValue)
            throws JNCException {
        setPeakTargetsValue(new YangUInt32(peakTargetsValue));
    }

    /**
     * Unsets the value for child leaf "peak-targets".
     */
    public void unsetPeakTargetsValue() throws JNCException {
        delete("peak-targets");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "peak-targets" leaf will not have a value.
     */
    public void addPeakTargets() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "peak-targets",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "peak-targets" with operation "replace".
     */
    public void markPeakTargetsReplace() throws JNCException {
        markLeafReplace("peakTargets");
    }

    /**
     * Marks the leaf "peak-targets" with operation "merge".
     */
    public void markPeakTargetsMerge() throws JNCException {
        markLeafMerge("peakTargets");
    }

    /**
     * Marks the leaf "peak-targets" with operation "create".
     */
    public void markPeakTargetsCreate() throws JNCException {
        markLeafCreate("peakTargets");
    }

    /**
     * Marks the leaf "peak-targets" with operation "delete".
     */
    public void markPeakTargetsDelete() throws JNCException {
        markLeafDelete("peakTargets");
    }

    /* Access methods for optional leaf child: "peak-monitored-targets". */

    /**
     * Gets the value for child leaf "peak-monitored-targets".
     * @return The value of the leaf.
     */
    public YangUInt32 getPeakMonitoredTargetsValue() throws JNCException {
        return (YangUInt32)getValue("peak-monitored-targets");
    }

    /**
     * Sets the value for child leaf "peak-monitored-targets",
     * using instance of generated typedef class.
     * @param peakMonitoredTargetsValue The value to set.
     * @param peakMonitoredTargetsValue used during instantiation.
     */
    public void setPeakMonitoredTargetsValue(YangUInt32 peakMonitoredTargetsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "peak-monitored-targets",
            peakMonitoredTargetsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "peak-monitored-targets",
     * using Java primitive values.
     * @param peakMonitoredTargetsValue used during instantiation.
     */
    public void setPeakMonitoredTargetsValue(long peakMonitoredTargetsValue)
            throws JNCException {
        setPeakMonitoredTargetsValue(new YangUInt32(peakMonitoredTargetsValue));
    }

    /**
     * Sets the value for child leaf "peak-monitored-targets",
     * using a String value.
     * @param peakMonitoredTargetsValue used during instantiation.
     */
    public void setPeakMonitoredTargetsValue(String peakMonitoredTargetsValue)
            throws JNCException {
        setPeakMonitoredTargetsValue(new YangUInt32(peakMonitoredTargetsValue));
    }

    /**
     * Unsets the value for child leaf "peak-monitored-targets".
     */
    public void unsetPeakMonitoredTargetsValue() throws JNCException {
        delete("peak-monitored-targets");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "peak-monitored-targets" leaf will not have a value.
     */
    public void addPeakMonitoredTargets() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "peak-monitored-targets",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "peak-monitored-targets" with operation "replace".
     */
    public void markPeakMonitoredTargetsReplace() throws JNCException {
        markLeafReplace("peakMonitoredTargets");
    }

    /**
     * Marks the leaf "peak-monitored-targets" with operation "merge".
     */
    public void markPeakMonitoredTargetsMerge() throws JNCException {
        markLeafMerge("peakMonitoredTargets");
    }

    /**
     * Marks the leaf "peak-monitored-targets" with operation "create".
     */
    public void markPeakMonitoredTargetsCreate() throws JNCException {
        markLeafCreate("peakMonitoredTargets");
    }

    /**
     * Marks the leaf "peak-monitored-targets" with operation "delete".
     */
    public void markPeakMonitoredTargetsDelete() throws JNCException {
        markLeafDelete("peakMonitoredTargets");
    }

    /* Access methods for optional leaf child: "monitor-limit-exceeded". */

    /**
     * Gets the value for child leaf "monitor-limit-exceeded".
     * @return The value of the leaf.
     */
    public YangUInt32 getMonitorLimitExceededValue() throws JNCException {
        return (YangUInt32)getValue("monitor-limit-exceeded");
    }

    /**
     * Sets the value for child leaf "monitor-limit-exceeded",
     * using instance of generated typedef class.
     * @param monitorLimitExceededValue The value to set.
     * @param monitorLimitExceededValue used during instantiation.
     */
    public void setMonitorLimitExceededValue(YangUInt32 monitorLimitExceededValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "monitor-limit-exceeded",
            monitorLimitExceededValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "monitor-limit-exceeded",
     * using Java primitive values.
     * @param monitorLimitExceededValue used during instantiation.
     */
    public void setMonitorLimitExceededValue(long monitorLimitExceededValue)
            throws JNCException {
        setMonitorLimitExceededValue(new YangUInt32(monitorLimitExceededValue));
    }

    /**
     * Sets the value for child leaf "monitor-limit-exceeded",
     * using a String value.
     * @param monitorLimitExceededValue used during instantiation.
     */
    public void setMonitorLimitExceededValue(String monitorLimitExceededValue)
            throws JNCException {
        setMonitorLimitExceededValue(new YangUInt32(monitorLimitExceededValue));
    }

    /**
     * Unsets the value for child leaf "monitor-limit-exceeded".
     */
    public void unsetMonitorLimitExceededValue() throws JNCException {
        delete("monitor-limit-exceeded");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "monitor-limit-exceeded" leaf will not have a value.
     */
    public void addMonitorLimitExceeded() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "monitor-limit-exceeded",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "monitor-limit-exceeded" with operation "replace".
     */
    public void markMonitorLimitExceededReplace() throws JNCException {
        markLeafReplace("monitorLimitExceeded");
    }

    /**
     * Marks the leaf "monitor-limit-exceeded" with operation "merge".
     */
    public void markMonitorLimitExceededMerge() throws JNCException {
        markLeafMerge("monitorLimitExceeded");
    }

    /**
     * Marks the leaf "monitor-limit-exceeded" with operation "create".
     */
    public void markMonitorLimitExceededCreate() throws JNCException {
        markLeafCreate("monitorLimitExceeded");
    }

    /**
     * Marks the leaf "monitor-limit-exceeded" with operation "delete".
     */
    public void markMonitorLimitExceededDelete() throws JNCException {
        markLeafDelete("monitorLimitExceeded");
    }

    /* Access methods for optional leaf child: "act-reqs-dropped". */

    /**
     * Gets the value for child leaf "act-reqs-dropped".
     * @return The value of the leaf.
     */
    public YangUInt32 getActReqsDroppedValue() throws JNCException {
        return (YangUInt32)getValue("act-reqs-dropped");
    }

    /**
     * Sets the value for child leaf "act-reqs-dropped",
     * using instance of generated typedef class.
     * @param actReqsDroppedValue The value to set.
     * @param actReqsDroppedValue used during instantiation.
     */
    public void setActReqsDroppedValue(YangUInt32 actReqsDroppedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "act-reqs-dropped",
            actReqsDroppedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "act-reqs-dropped",
     * using Java primitive values.
     * @param actReqsDroppedValue used during instantiation.
     */
    public void setActReqsDroppedValue(long actReqsDroppedValue)
            throws JNCException {
        setActReqsDroppedValue(new YangUInt32(actReqsDroppedValue));
    }

    /**
     * Sets the value for child leaf "act-reqs-dropped",
     * using a String value.
     * @param actReqsDroppedValue used during instantiation.
     */
    public void setActReqsDroppedValue(String actReqsDroppedValue)
            throws JNCException {
        setActReqsDroppedValue(new YangUInt32(actReqsDroppedValue));
    }

    /**
     * Unsets the value for child leaf "act-reqs-dropped".
     */
    public void unsetActReqsDroppedValue() throws JNCException {
        delete("act-reqs-dropped");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "act-reqs-dropped" leaf will not have a value.
     */
    public void addActReqsDropped() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "act-reqs-dropped",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "act-reqs-dropped" with operation "replace".
     */
    public void markActReqsDroppedReplace() throws JNCException {
        markLeafReplace("actReqsDropped");
    }

    /**
     * Marks the leaf "act-reqs-dropped" with operation "merge".
     */
    public void markActReqsDroppedMerge() throws JNCException {
        markLeafMerge("actReqsDropped");
    }

    /**
     * Marks the leaf "act-reqs-dropped" with operation "create".
     */
    public void markActReqsDroppedCreate() throws JNCException {
        markLeafCreate("actReqsDropped");
    }

    /**
     * Marks the leaf "act-reqs-dropped" with operation "delete".
     */
    public void markActReqsDroppedDelete() throws JNCException {
        markLeafDelete("actReqsDropped");
    }

    /* Access methods for optional leaf child: "act-reqs-rejected". */

    /**
     * Gets the value for child leaf "act-reqs-rejected".
     * @return The value of the leaf.
     */
    public YangUInt32 getActReqsRejectedValue() throws JNCException {
        return (YangUInt32)getValue("act-reqs-rejected");
    }

    /**
     * Sets the value for child leaf "act-reqs-rejected",
     * using instance of generated typedef class.
     * @param actReqsRejectedValue The value to set.
     * @param actReqsRejectedValue used during instantiation.
     */
    public void setActReqsRejectedValue(YangUInt32 actReqsRejectedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "act-reqs-rejected",
            actReqsRejectedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "act-reqs-rejected",
     * using Java primitive values.
     * @param actReqsRejectedValue used during instantiation.
     */
    public void setActReqsRejectedValue(long actReqsRejectedValue)
            throws JNCException {
        setActReqsRejectedValue(new YangUInt32(actReqsRejectedValue));
    }

    /**
     * Sets the value for child leaf "act-reqs-rejected",
     * using a String value.
     * @param actReqsRejectedValue used during instantiation.
     */
    public void setActReqsRejectedValue(String actReqsRejectedValue)
            throws JNCException {
        setActReqsRejectedValue(new YangUInt32(actReqsRejectedValue));
    }

    /**
     * Unsets the value for child leaf "act-reqs-rejected".
     */
    public void unsetActReqsRejectedValue() throws JNCException {
        delete("act-reqs-rejected");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "act-reqs-rejected" leaf will not have a value.
     */
    public void addActReqsRejected() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "act-reqs-rejected",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "act-reqs-rejected" with operation "replace".
     */
    public void markActReqsRejectedReplace() throws JNCException {
        markLeafReplace("actReqsRejected");
    }

    /**
     * Marks the leaf "act-reqs-rejected" with operation "merge".
     */
    public void markActReqsRejectedMerge() throws JNCException {
        markLeafMerge("actReqsRejected");
    }

    /**
     * Marks the leaf "act-reqs-rejected" with operation "create".
     */
    public void markActReqsRejectedCreate() throws JNCException {
        markLeafCreate("actReqsRejected");
    }

    /**
     * Marks the leaf "act-reqs-rejected" with operation "delete".
     */
    public void markActReqsRejectedDelete() throws JNCException {
        markLeafDelete("actReqsRejected");
    }

    /* Access methods for optional leaf child: "deact-reqs-dropped". */

    /**
     * Gets the value for child leaf "deact-reqs-dropped".
     * @return The value of the leaf.
     */
    public YangUInt32 getDeactReqsDroppedValue() throws JNCException {
        return (YangUInt32)getValue("deact-reqs-dropped");
    }

    /**
     * Sets the value for child leaf "deact-reqs-dropped",
     * using instance of generated typedef class.
     * @param deactReqsDroppedValue The value to set.
     * @param deactReqsDroppedValue used during instantiation.
     */
    public void setDeactReqsDroppedValue(YangUInt32 deactReqsDroppedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "deact-reqs-dropped",
            deactReqsDroppedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "deact-reqs-dropped",
     * using Java primitive values.
     * @param deactReqsDroppedValue used during instantiation.
     */
    public void setDeactReqsDroppedValue(long deactReqsDroppedValue)
            throws JNCException {
        setDeactReqsDroppedValue(new YangUInt32(deactReqsDroppedValue));
    }

    /**
     * Sets the value for child leaf "deact-reqs-dropped",
     * using a String value.
     * @param deactReqsDroppedValue used during instantiation.
     */
    public void setDeactReqsDroppedValue(String deactReqsDroppedValue)
            throws JNCException {
        setDeactReqsDroppedValue(new YangUInt32(deactReqsDroppedValue));
    }

    /**
     * Unsets the value for child leaf "deact-reqs-dropped".
     */
    public void unsetDeactReqsDroppedValue() throws JNCException {
        delete("deact-reqs-dropped");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "deact-reqs-dropped" leaf will not have a value.
     */
    public void addDeactReqsDropped() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "deact-reqs-dropped",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "deact-reqs-dropped" with operation "replace".
     */
    public void markDeactReqsDroppedReplace() throws JNCException {
        markLeafReplace("deactReqsDropped");
    }

    /**
     * Marks the leaf "deact-reqs-dropped" with operation "merge".
     */
    public void markDeactReqsDroppedMerge() throws JNCException {
        markLeafMerge("deactReqsDropped");
    }

    /**
     * Marks the leaf "deact-reqs-dropped" with operation "create".
     */
    public void markDeactReqsDroppedCreate() throws JNCException {
        markLeafCreate("deactReqsDropped");
    }

    /**
     * Marks the leaf "deact-reqs-dropped" with operation "delete".
     */
    public void markDeactReqsDroppedDelete() throws JNCException {
        markLeafDelete("deactReqsDropped");
    }

    /* Access methods for optional leaf child: "deact-reqs-rejected". */

    /**
     * Gets the value for child leaf "deact-reqs-rejected".
     * @return The value of the leaf.
     */
    public YangUInt32 getDeactReqsRejectedValue() throws JNCException {
        return (YangUInt32)getValue("deact-reqs-rejected");
    }

    /**
     * Sets the value for child leaf "deact-reqs-rejected",
     * using instance of generated typedef class.
     * @param deactReqsRejectedValue The value to set.
     * @param deactReqsRejectedValue used during instantiation.
     */
    public void setDeactReqsRejectedValue(YangUInt32 deactReqsRejectedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "deact-reqs-rejected",
            deactReqsRejectedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "deact-reqs-rejected",
     * using Java primitive values.
     * @param deactReqsRejectedValue used during instantiation.
     */
    public void setDeactReqsRejectedValue(long deactReqsRejectedValue)
            throws JNCException {
        setDeactReqsRejectedValue(new YangUInt32(deactReqsRejectedValue));
    }

    /**
     * Sets the value for child leaf "deact-reqs-rejected",
     * using a String value.
     * @param deactReqsRejectedValue used during instantiation.
     */
    public void setDeactReqsRejectedValue(String deactReqsRejectedValue)
            throws JNCException {
        setDeactReqsRejectedValue(new YangUInt32(deactReqsRejectedValue));
    }

    /**
     * Unsets the value for child leaf "deact-reqs-rejected".
     */
    public void unsetDeactReqsRejectedValue() throws JNCException {
        delete("deact-reqs-rejected");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "deact-reqs-rejected" leaf will not have a value.
     */
    public void addDeactReqsRejected() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "deact-reqs-rejected",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "deact-reqs-rejected" with operation "replace".
     */
    public void markDeactReqsRejectedReplace() throws JNCException {
        markLeafReplace("deactReqsRejected");
    }

    /**
     * Marks the leaf "deact-reqs-rejected" with operation "merge".
     */
    public void markDeactReqsRejectedMerge() throws JNCException {
        markLeafMerge("deactReqsRejected");
    }

    /**
     * Marks the leaf "deact-reqs-rejected" with operation "create".
     */
    public void markDeactReqsRejectedCreate() throws JNCException {
        markLeafCreate("deactReqsRejected");
    }

    /**
     * Marks the leaf "deact-reqs-rejected" with operation "delete".
     */
    public void markDeactReqsRejectedDelete() throws JNCException {
        markLeafDelete("deactReqsRejected");
    }

    /* Access methods for optional leaf child: "interro-reqs-dropped". */

    /**
     * Gets the value for child leaf "interro-reqs-dropped".
     * @return The value of the leaf.
     */
    public YangUInt32 getInterroReqsDroppedValue() throws JNCException {
        return (YangUInt32)getValue("interro-reqs-dropped");
    }

    /**
     * Sets the value for child leaf "interro-reqs-dropped",
     * using instance of generated typedef class.
     * @param interroReqsDroppedValue The value to set.
     * @param interroReqsDroppedValue used during instantiation.
     */
    public void setInterroReqsDroppedValue(YangUInt32 interroReqsDroppedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "interro-reqs-dropped",
            interroReqsDroppedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "interro-reqs-dropped",
     * using Java primitive values.
     * @param interroReqsDroppedValue used during instantiation.
     */
    public void setInterroReqsDroppedValue(long interroReqsDroppedValue)
            throws JNCException {
        setInterroReqsDroppedValue(new YangUInt32(interroReqsDroppedValue));
    }

    /**
     * Sets the value for child leaf "interro-reqs-dropped",
     * using a String value.
     * @param interroReqsDroppedValue used during instantiation.
     */
    public void setInterroReqsDroppedValue(String interroReqsDroppedValue)
            throws JNCException {
        setInterroReqsDroppedValue(new YangUInt32(interroReqsDroppedValue));
    }

    /**
     * Unsets the value for child leaf "interro-reqs-dropped".
     */
    public void unsetInterroReqsDroppedValue() throws JNCException {
        delete("interro-reqs-dropped");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "interro-reqs-dropped" leaf will not have a value.
     */
    public void addInterroReqsDropped() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "interro-reqs-dropped",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "interro-reqs-dropped" with operation "replace".
     */
    public void markInterroReqsDroppedReplace() throws JNCException {
        markLeafReplace("interroReqsDropped");
    }

    /**
     * Marks the leaf "interro-reqs-dropped" with operation "merge".
     */
    public void markInterroReqsDroppedMerge() throws JNCException {
        markLeafMerge("interroReqsDropped");
    }

    /**
     * Marks the leaf "interro-reqs-dropped" with operation "create".
     */
    public void markInterroReqsDroppedCreate() throws JNCException {
        markLeafCreate("interroReqsDropped");
    }

    /**
     * Marks the leaf "interro-reqs-dropped" with operation "delete".
     */
    public void markInterroReqsDroppedDelete() throws JNCException {
        markLeafDelete("interroReqsDropped");
    }

    /* Access methods for optional leaf child: "interro-reqs-rejected". */

    /**
     * Gets the value for child leaf "interro-reqs-rejected".
     * @return The value of the leaf.
     */
    public YangUInt32 getInterroReqsRejectedValue() throws JNCException {
        return (YangUInt32)getValue("interro-reqs-rejected");
    }

    /**
     * Sets the value for child leaf "interro-reqs-rejected",
     * using instance of generated typedef class.
     * @param interroReqsRejectedValue The value to set.
     * @param interroReqsRejectedValue used during instantiation.
     */
    public void setInterroReqsRejectedValue(YangUInt32 interroReqsRejectedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "interro-reqs-rejected",
            interroReqsRejectedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "interro-reqs-rejected",
     * using Java primitive values.
     * @param interroReqsRejectedValue used during instantiation.
     */
    public void setInterroReqsRejectedValue(long interroReqsRejectedValue)
            throws JNCException {
        setInterroReqsRejectedValue(new YangUInt32(interroReqsRejectedValue));
    }

    /**
     * Sets the value for child leaf "interro-reqs-rejected",
     * using a String value.
     * @param interroReqsRejectedValue used during instantiation.
     */
    public void setInterroReqsRejectedValue(String interroReqsRejectedValue)
            throws JNCException {
        setInterroReqsRejectedValue(new YangUInt32(interroReqsRejectedValue));
    }

    /**
     * Unsets the value for child leaf "interro-reqs-rejected".
     */
    public void unsetInterroReqsRejectedValue() throws JNCException {
        delete("interro-reqs-rejected");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "interro-reqs-rejected" leaf will not have a value.
     */
    public void addInterroReqsRejected() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "interro-reqs-rejected",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "interro-reqs-rejected" with operation "replace".
     */
    public void markInterroReqsRejectedReplace() throws JNCException {
        markLeafReplace("interroReqsRejected");
    }

    /**
     * Marks the leaf "interro-reqs-rejected" with operation "merge".
     */
    public void markInterroReqsRejectedMerge() throws JNCException {
        markLeafMerge("interroReqsRejected");
    }

    /**
     * Marks the leaf "interro-reqs-rejected" with operation "create".
     */
    public void markInterroReqsRejectedCreate() throws JNCException {
        markLeafCreate("interroReqsRejected");
    }

    /**
     * Marks the leaf "interro-reqs-rejected" with operation "delete".
     */
    public void markInterroReqsRejectedDelete() throws JNCException {
        markLeafDelete("interroReqsRejected");
    }

    /* Access methods for optional leaf child: "reset-reqs-dropped". */

    /**
     * Gets the value for child leaf "reset-reqs-dropped".
     * @return The value of the leaf.
     */
    public YangUInt32 getResetReqsDroppedValue() throws JNCException {
        return (YangUInt32)getValue("reset-reqs-dropped");
    }

    /**
     * Sets the value for child leaf "reset-reqs-dropped",
     * using instance of generated typedef class.
     * @param resetReqsDroppedValue The value to set.
     * @param resetReqsDroppedValue used during instantiation.
     */
    public void setResetReqsDroppedValue(YangUInt32 resetReqsDroppedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-reqs-dropped",
            resetReqsDroppedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "reset-reqs-dropped",
     * using Java primitive values.
     * @param resetReqsDroppedValue used during instantiation.
     */
    public void setResetReqsDroppedValue(long resetReqsDroppedValue)
            throws JNCException {
        setResetReqsDroppedValue(new YangUInt32(resetReqsDroppedValue));
    }

    /**
     * Sets the value for child leaf "reset-reqs-dropped",
     * using a String value.
     * @param resetReqsDroppedValue used during instantiation.
     */
    public void setResetReqsDroppedValue(String resetReqsDroppedValue)
            throws JNCException {
        setResetReqsDroppedValue(new YangUInt32(resetReqsDroppedValue));
    }

    /**
     * Unsets the value for child leaf "reset-reqs-dropped".
     */
    public void unsetResetReqsDroppedValue() throws JNCException {
        delete("reset-reqs-dropped");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "reset-reqs-dropped" leaf will not have a value.
     */
    public void addResetReqsDropped() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "reset-reqs-dropped",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "reset-reqs-dropped" with operation "replace".
     */
    public void markResetReqsDroppedReplace() throws JNCException {
        markLeafReplace("resetReqsDropped");
    }

    /**
     * Marks the leaf "reset-reqs-dropped" with operation "merge".
     */
    public void markResetReqsDroppedMerge() throws JNCException {
        markLeafMerge("resetReqsDropped");
    }

    /**
     * Marks the leaf "reset-reqs-dropped" with operation "create".
     */
    public void markResetReqsDroppedCreate() throws JNCException {
        markLeafCreate("resetReqsDropped");
    }

    /**
     * Marks the leaf "reset-reqs-dropped" with operation "delete".
     */
    public void markResetReqsDroppedDelete() throws JNCException {
        markLeafDelete("resetReqsDropped");
    }

    /* Access methods for optional leaf child: "unknown-admf-reqs-dropped". */

    /**
     * Gets the value for child leaf "unknown-admf-reqs-dropped".
     * @return The value of the leaf.
     */
    public YangUInt32 getUnknownAdmfReqsDroppedValue() throws JNCException {
        return (YangUInt32)getValue("unknown-admf-reqs-dropped");
    }

    /**
     * Sets the value for child leaf "unknown-admf-reqs-dropped",
     * using instance of generated typedef class.
     * @param unknownAdmfReqsDroppedValue The value to set.
     * @param unknownAdmfReqsDroppedValue used during instantiation.
     */
    public void setUnknownAdmfReqsDroppedValue(YangUInt32 unknownAdmfReqsDroppedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unknown-admf-reqs-dropped",
            unknownAdmfReqsDroppedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unknown-admf-reqs-dropped",
     * using Java primitive values.
     * @param unknownAdmfReqsDroppedValue used during instantiation.
     */
    public void setUnknownAdmfReqsDroppedValue(long unknownAdmfReqsDroppedValue)
            throws JNCException {
        setUnknownAdmfReqsDroppedValue(new YangUInt32(unknownAdmfReqsDroppedValue));
    }

    /**
     * Sets the value for child leaf "unknown-admf-reqs-dropped",
     * using a String value.
     * @param unknownAdmfReqsDroppedValue used during instantiation.
     */
    public void setUnknownAdmfReqsDroppedValue(String unknownAdmfReqsDroppedValue)
            throws JNCException {
        setUnknownAdmfReqsDroppedValue(new YangUInt32(unknownAdmfReqsDroppedValue));
    }

    /**
     * Unsets the value for child leaf "unknown-admf-reqs-dropped".
     */
    public void unsetUnknownAdmfReqsDroppedValue() throws JNCException {
        delete("unknown-admf-reqs-dropped");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unknown-admf-reqs-dropped" leaf will not have a value.
     */
    public void addUnknownAdmfReqsDropped() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "unknown-admf-reqs-dropped",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unknown-admf-reqs-dropped" with operation "replace".
     */
    public void markUnknownAdmfReqsDroppedReplace() throws JNCException {
        markLeafReplace("unknownAdmfReqsDropped");
    }

    /**
     * Marks the leaf "unknown-admf-reqs-dropped" with operation "merge".
     */
    public void markUnknownAdmfReqsDroppedMerge() throws JNCException {
        markLeafMerge("unknownAdmfReqsDropped");
    }

    /**
     * Marks the leaf "unknown-admf-reqs-dropped" with operation "create".
     */
    public void markUnknownAdmfReqsDroppedCreate() throws JNCException {
        markLeafCreate("unknownAdmfReqsDropped");
    }

    /**
     * Marks the leaf "unknown-admf-reqs-dropped" with operation "delete".
     */
    public void markUnknownAdmfReqsDroppedDelete() throws JNCException {
        markLeafDelete("unknownAdmfReqsDropped");
    }

    /* Access methods for optional leaf child: "admf-msgs-dropped-scoketfull". */

    /**
     * Gets the value for child leaf "admf-msgs-dropped-scoketfull".
     * @return The value of the leaf.
     */
    public YangUInt32 getAdmfMsgsDroppedScoketfullValue() throws JNCException {
        return (YangUInt32)getValue("admf-msgs-dropped-scoketfull");
    }

    /**
     * Sets the value for child leaf "admf-msgs-dropped-scoketfull",
     * using instance of generated typedef class.
     * @param admfMsgsDroppedScoketfullValue The value to set.
     * @param admfMsgsDroppedScoketfullValue used during instantiation.
     */
    public void setAdmfMsgsDroppedScoketfullValue(YangUInt32 admfMsgsDroppedScoketfullValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "admf-msgs-dropped-scoketfull",
            admfMsgsDroppedScoketfullValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "admf-msgs-dropped-scoketfull",
     * using Java primitive values.
     * @param admfMsgsDroppedScoketfullValue used during instantiation.
     */
    public void setAdmfMsgsDroppedScoketfullValue(long admfMsgsDroppedScoketfullValue)
            throws JNCException {
        setAdmfMsgsDroppedScoketfullValue(new YangUInt32(admfMsgsDroppedScoketfullValue));
    }

    /**
     * Sets the value for child leaf "admf-msgs-dropped-scoketfull",
     * using a String value.
     * @param admfMsgsDroppedScoketfullValue used during instantiation.
     */
    public void setAdmfMsgsDroppedScoketfullValue(String admfMsgsDroppedScoketfullValue)
            throws JNCException {
        setAdmfMsgsDroppedScoketfullValue(new YangUInt32(admfMsgsDroppedScoketfullValue));
    }

    /**
     * Unsets the value for child leaf "admf-msgs-dropped-scoketfull".
     */
    public void unsetAdmfMsgsDroppedScoketfullValue() throws JNCException {
        delete("admf-msgs-dropped-scoketfull");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "admf-msgs-dropped-scoketfull" leaf will not have a value.
     */
    public void addAdmfMsgsDroppedScoketfull() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "admf-msgs-dropped-scoketfull",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "admf-msgs-dropped-scoketfull" with operation "replace".
     */
    public void markAdmfMsgsDroppedScoketfullReplace() throws JNCException {
        markLeafReplace("admfMsgsDroppedScoketfull");
    }

    /**
     * Marks the leaf "admf-msgs-dropped-scoketfull" with operation "merge".
     */
    public void markAdmfMsgsDroppedScoketfullMerge() throws JNCException {
        markLeafMerge("admfMsgsDroppedScoketfull");
    }

    /**
     * Marks the leaf "admf-msgs-dropped-scoketfull" with operation "create".
     */
    public void markAdmfMsgsDroppedScoketfullCreate() throws JNCException {
        markLeafCreate("admfMsgsDroppedScoketfull");
    }

    /**
     * Marks the leaf "admf-msgs-dropped-scoketfull" with operation "delete".
     */
    public void markAdmfMsgsDroppedScoketfullDelete() throws JNCException {
        markLeafDelete("admfMsgsDroppedScoketfull");
    }

    /* Access methods for optional leaf child: "admf-msgs-sent-success". */

    /**
     * Gets the value for child leaf "admf-msgs-sent-success".
     * @return The value of the leaf.
     */
    public YangUInt32 getAdmfMsgsSentSuccessValue() throws JNCException {
        return (YangUInt32)getValue("admf-msgs-sent-success");
    }

    /**
     * Sets the value for child leaf "admf-msgs-sent-success",
     * using instance of generated typedef class.
     * @param admfMsgsSentSuccessValue The value to set.
     * @param admfMsgsSentSuccessValue used during instantiation.
     */
    public void setAdmfMsgsSentSuccessValue(YangUInt32 admfMsgsSentSuccessValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "admf-msgs-sent-success",
            admfMsgsSentSuccessValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "admf-msgs-sent-success",
     * using Java primitive values.
     * @param admfMsgsSentSuccessValue used during instantiation.
     */
    public void setAdmfMsgsSentSuccessValue(long admfMsgsSentSuccessValue)
            throws JNCException {
        setAdmfMsgsSentSuccessValue(new YangUInt32(admfMsgsSentSuccessValue));
    }

    /**
     * Sets the value for child leaf "admf-msgs-sent-success",
     * using a String value.
     * @param admfMsgsSentSuccessValue used during instantiation.
     */
    public void setAdmfMsgsSentSuccessValue(String admfMsgsSentSuccessValue)
            throws JNCException {
        setAdmfMsgsSentSuccessValue(new YangUInt32(admfMsgsSentSuccessValue));
    }

    /**
     * Unsets the value for child leaf "admf-msgs-sent-success".
     */
    public void unsetAdmfMsgsSentSuccessValue() throws JNCException {
        delete("admf-msgs-sent-success");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "admf-msgs-sent-success" leaf will not have a value.
     */
    public void addAdmfMsgsSentSuccess() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "admf-msgs-sent-success",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "admf-msgs-sent-success" with operation "replace".
     */
    public void markAdmfMsgsSentSuccessReplace() throws JNCException {
        markLeafReplace("admfMsgsSentSuccess");
    }

    /**
     * Marks the leaf "admf-msgs-sent-success" with operation "merge".
     */
    public void markAdmfMsgsSentSuccessMerge() throws JNCException {
        markLeafMerge("admfMsgsSentSuccess");
    }

    /**
     * Marks the leaf "admf-msgs-sent-success" with operation "create".
     */
    public void markAdmfMsgsSentSuccessCreate() throws JNCException {
        markLeafCreate("admfMsgsSentSuccess");
    }

    /**
     * Marks the leaf "admf-msgs-sent-success" with operation "delete".
     */
    public void markAdmfMsgsSentSuccessDelete() throws JNCException {
        markLeafDelete("admfMsgsSentSuccess");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
