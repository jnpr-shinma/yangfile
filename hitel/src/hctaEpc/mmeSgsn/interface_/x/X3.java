/* 
 * @(#)X3.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.x;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/x/x3"
 * <p>
 * See line 167 in
 * agwLiCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class X3 extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty X3 object.
     */
    public X3() {
        super(Epc.NAMESPACE, "x3");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public X3 clone() {
        return (X3)cloneContent(new X3());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public X3 cloneShallow() {
        return (X3)cloneShallowContent(new X3());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "status-str",
            "cc-msgs-dropped",
        };
    }

    /* Access methods for optional leaf child: "status-str". */

    /**
     * Gets the value for child leaf "status-str".
     * @return The value of the leaf.
     */
    public YangString getStatusStrValue() throws JNCException {
        return (YangString)getValue("status-str");
    }

    /**
     * Sets the value for child leaf "status-str",
     * using instance of generated typedef class.
     * @param statusStrValue The value to set.
     * @param statusStrValue used during instantiation.
     */
    public void setStatusStrValue(YangString statusStrValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-str",
            statusStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status-str",
     * using a String value.
     * @param statusStrValue used during instantiation.
     */
    public void setStatusStrValue(String statusStrValue) throws JNCException {
        setStatusStrValue(new YangString(statusStrValue));
    }

    /**
     * Unsets the value for child leaf "status-str".
     */
    public void unsetStatusStrValue() throws JNCException {
        delete("status-str");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status-str" leaf will not have a value.
     */
    public void addStatusStr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "status-str",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status-str" with operation "replace".
     */
    public void markStatusStrReplace() throws JNCException {
        markLeafReplace("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "merge".
     */
    public void markStatusStrMerge() throws JNCException {
        markLeafMerge("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "create".
     */
    public void markStatusStrCreate() throws JNCException {
        markLeafCreate("statusStr");
    }

    /**
     * Marks the leaf "status-str" with operation "delete".
     */
    public void markStatusStrDelete() throws JNCException {
        markLeafDelete("statusStr");
    }

    /* Access methods for optional leaf child: "cc-msgs-dropped". */

    /**
     * Gets the value for child leaf "cc-msgs-dropped".
     * @return The value of the leaf.
     */
    public YangUInt32 getCcMsgsDroppedValue() throws JNCException {
        return (YangUInt32)getValue("cc-msgs-dropped");
    }

    /**
     * Sets the value for child leaf "cc-msgs-dropped",
     * using instance of generated typedef class.
     * @param ccMsgsDroppedValue The value to set.
     * @param ccMsgsDroppedValue used during instantiation.
     */
    public void setCcMsgsDroppedValue(YangUInt32 ccMsgsDroppedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cc-msgs-dropped",
            ccMsgsDroppedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cc-msgs-dropped",
     * using Java primitive values.
     * @param ccMsgsDroppedValue used during instantiation.
     */
    public void setCcMsgsDroppedValue(long ccMsgsDroppedValue)
            throws JNCException {
        setCcMsgsDroppedValue(new YangUInt32(ccMsgsDroppedValue));
    }

    /**
     * Sets the value for child leaf "cc-msgs-dropped",
     * using a String value.
     * @param ccMsgsDroppedValue used during instantiation.
     */
    public void setCcMsgsDroppedValue(String ccMsgsDroppedValue)
            throws JNCException {
        setCcMsgsDroppedValue(new YangUInt32(ccMsgsDroppedValue));
    }

    /**
     * Unsets the value for child leaf "cc-msgs-dropped".
     */
    public void unsetCcMsgsDroppedValue() throws JNCException {
        delete("cc-msgs-dropped");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cc-msgs-dropped" leaf will not have a value.
     */
    public void addCcMsgsDropped() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cc-msgs-dropped",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cc-msgs-dropped" with operation "replace".
     */
    public void markCcMsgsDroppedReplace() throws JNCException {
        markLeafReplace("ccMsgsDropped");
    }

    /**
     * Marks the leaf "cc-msgs-dropped" with operation "merge".
     */
    public void markCcMsgsDroppedMerge() throws JNCException {
        markLeafMerge("ccMsgsDropped");
    }

    /**
     * Marks the leaf "cc-msgs-dropped" with operation "create".
     */
    public void markCcMsgsDroppedCreate() throws JNCException {
        markLeafCreate("ccMsgsDropped");
    }

    /**
     * Marks the leaf "cc-msgs-dropped" with operation "delete".
     */
    public void markCcMsgsDroppedDelete() throws JNCException {
        markLeafDelete("ccMsgsDropped");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
