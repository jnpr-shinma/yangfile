/* 
 * @(#)AgwLig.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.x;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/x/agw-lig"
 * <p>
 * See line 65 in
 * agwLiConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class AgwLig extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty AgwLig object.
     */
    public AgwLig() {
        super(Epc.NAMESPACE, "agw-lig");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public AgwLig clone() {
        return (AgwLig)cloneContent(new AgwLig());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public AgwLig cloneShallow() {
        return (AgwLig)cloneShallowContent(new AgwLig());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "admf-ip-address",
            "admf-port",
        };
    }

    /* Access methods for optional leaf child: "admf-ip-address". */

    /**
     * Gets the value for child leaf "admf-ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getAdmfIpAddressValue() throws JNCException {
        return (IpAddress)getValue("admf-ip-address");
    }

    /**
     * Sets the value for child leaf "admf-ip-address",
     * using a JNC type value.
     * @param admfIpAddressValue The value to set.
     * @param admfIpAddressValue used during instantiation.
     */
    public void setAdmfIpAddressValue(IpAddress admfIpAddressValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "admf-ip-address",
            admfIpAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "admf-ip-address",
     * using a String value.
     * @param admfIpAddressValue used during instantiation.
     */
    public void setAdmfIpAddressValue(String admfIpAddressValue)
            throws JNCException {
        setAdmfIpAddressValue(new IpAddress(admfIpAddressValue));
    }

    /**
     * Unsets the value for child leaf "admf-ip-address".
     */
    public void unsetAdmfIpAddressValue() throws JNCException {
        delete("admf-ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "admf-ip-address" leaf will not have a value.
     */
    public void addAdmfIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "admf-ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "admf-ip-address" with operation "replace".
     */
    public void markAdmfIpAddressReplace() throws JNCException {
        markLeafReplace("admfIpAddress");
    }

    /**
     * Marks the leaf "admf-ip-address" with operation "merge".
     */
    public void markAdmfIpAddressMerge() throws JNCException {
        markLeafMerge("admfIpAddress");
    }

    /**
     * Marks the leaf "admf-ip-address" with operation "create".
     */
    public void markAdmfIpAddressCreate() throws JNCException {
        markLeafCreate("admfIpAddress");
    }

    /**
     * Marks the leaf "admf-ip-address" with operation "delete".
     */
    public void markAdmfIpAddressDelete() throws JNCException {
        markLeafDelete("admfIpAddress");
    }

    /* Access methods for optional leaf child: "admf-port". */

    /**
     * Gets the value for child leaf "admf-port".
     * @return The value of the leaf.
     */
    public YangUInt16 getAdmfPortValue() throws JNCException {
        YangUInt16 admfPort = (YangUInt16)getValue("admf-port");
        if (admfPort == null) {
            admfPort = new YangUInt16("2000");  // default
        }
        return admfPort;
    }

    /**
     * Sets the value for child leaf "admf-port",
     * using instance of generated typedef class.
     * @param admfPortValue The value to set.
     * @param admfPortValue used during instantiation.
     */
    public void setAdmfPortValue(YangUInt16 admfPortValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "admf-port",
            admfPortValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "admf-port",
     * using Java primitive values.
     * @param admfPortValue used during instantiation.
     */
    public void setAdmfPortValue(int admfPortValue) throws JNCException {
        setAdmfPortValue(new YangUInt16(admfPortValue));
    }

    /**
     * Sets the value for child leaf "admf-port",
     * using a String value.
     * @param admfPortValue used during instantiation.
     */
    public void setAdmfPortValue(String admfPortValue) throws JNCException {
        setAdmfPortValue(new YangUInt16(admfPortValue));
    }

    /**
     * Unsets the value for child leaf "admf-port".
     */
    public void unsetAdmfPortValue() throws JNCException {
        delete("admf-port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "admf-port" leaf will not have a value.
     */
    public void addAdmfPort() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "admf-port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "admf-port" with operation "replace".
     */
    public void markAdmfPortReplace() throws JNCException {
        markLeafReplace("admfPort");
    }

    /**
     * Marks the leaf "admf-port" with operation "merge".
     */
    public void markAdmfPortMerge() throws JNCException {
        markLeafMerge("admfPort");
    }

    /**
     * Marks the leaf "admf-port" with operation "create".
     */
    public void markAdmfPortCreate() throws JNCException {
        markLeafCreate("admfPort");
    }

    /**
     * Marks the leaf "admf-port" with operation "delete".
     */
    public void markAdmfPortDelete() throws JNCException {
        markLeafDelete("admfPort");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
