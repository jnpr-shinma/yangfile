/* 
 * @(#)Ga.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;
import .ietfInetTypes.IpAddress;

import AgwCgf;

import AgwChargingCharacteristics;

import AgwGaIf;

import AgwSgsnGaProfile;

import CgfAction;

import CgfOper;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import NodeSet;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/ga"
 * <p>
 * See line 22 in
 * agwGaBillingConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Ga extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "agw-ga-if".
     */
    public AgwGaIf agwGaIf = null;

    /**
     * Field for child container "agw-sgsn-ga-profile".
     */
    public AgwSgsnGaProfile agwSgsnGaProfile = null;

    /**
     * Field for child container "agw-charging-characteristics".
     */
    public AgwChargingCharacteristics agwChargingCharacteristics = null;

    /**
     * Field for child container "cgf-action".
     */
    public CgfAction cgfAction = null;

    /**
     * Constructor for an empty Ga object.
     */
    public Ga() {
        super(Epc.NAMESPACE, "ga");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Ga clone() {
        return (Ga)cloneContent(new Ga());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Ga cloneShallow() {
        return (Ga)cloneShallowContent(new Ga());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "agw-ga-if",
            "agw-cgf",
            "agw-sgsn-ga-profile",
            "agw-charging-characteristics",
            "cgf-action",
            "cgf-oper",
        };
    }

    /* Access methods for container child: "agw-ga-if". */

    /**
     * Adds container entry "agwGaIf", using an existing object.
     * @param agwGaIf The object to add.
     * @return The added child.
     */
    public AgwGaIf addAgwGaIf(AgwGaIf agwGaIf) throws JNCException {
        this.agwGaIf = agwGaIf;
        insertChild(agwGaIf, childrenNames());
        return agwGaIf;
    }

    /**
     * Adds container entry "agwGaIf".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AgwGaIf addAgwGaIf() throws JNCException {
        AgwGaIf agwGaIf = new AgwGaIf();
        this.agwGaIf = agwGaIf;
        insertChild(agwGaIf, childrenNames());
        return agwGaIf;
    }

    /**
     * Deletes container entry "agwGaIf".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteAgwGaIf() throws JNCException {
        this.agwGaIf = null;
        String path = "agw-ga-if";
        return delete(path);
    }

    /* Access methods for list child: "agw-cgf". */

    /**
     * Gets list entry "agwCgf", with specified keys.
     * @param ipAddressValue Key argument of child.
     */
    public AgwCgf getAgwCgf(IpAddress ipAddressValue) throws JNCException {
        String path = "agw-cgf[ipAddress='" + ipAddressValue + "']";
        return (AgwCgf)searchOne(path);
    }

    /**
     * Gets list entry "agwCgf", with specified keys.
     * The keys are specified as strings.
     * @param ipAddressValue Key argument of child.
     */
    public AgwCgf getAgwCgf(String ipAddressValue) throws JNCException {
        String path = "agw-cgf[ipAddress='" + ipAddressValue + "']";
        return (AgwCgf)searchOne(path);
    }

    /**
     * Iterator method for the list "agw-cgf".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator agwCgfIterator() {
        return new ElementChildrenIterator(children, "agw-cgf");
    }

    /**
     * Adds list entry "agwCgf", using an existing object.
     * @param agwCgf The object to add.
     * @return The added child.
     */
    public AgwCgf addAgwCgf(AgwCgf agwCgf) throws JNCException {
        insertChild(agwCgf, childrenNames());
        return agwCgf;
    }

    /**
     * Adds list entry "agwCgf", with specified keys.
     * @param ipAddressValue Key argument of child.
     * @return The added child.
     */
    public AgwCgf addAgwCgf(IpAddress ipAddressValue) throws JNCException {
        AgwCgf agwCgf = new AgwCgf(ipAddressValue);
        return addAgwCgf(agwCgf);
    }

    /**
     * Adds list entry "agwCgf", with specified keys.
     * The keys are specified as strings.
     * @param ipAddressValue Key argument of child.
     * @return The added child.
     */
    public AgwCgf addAgwCgf(String ipAddressValue) throws JNCException {
        AgwCgf agwCgf = new AgwCgf(ipAddressValue);
        return addAgwCgf(agwCgf);
    }

    /**
     * Adds list entry "agwCgf".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AgwCgf addAgwCgf() throws JNCException {
        AgwCgf agwCgf = new AgwCgf();
        insertChild(agwCgf, childrenNames());
        return agwCgf;
    }

    /**
     * Deletes list entry "agwCgf", with specified keys.
     * @param ipAddressValue Key argument of child.
     */
    public void deleteAgwCgf(IpAddress ipAddressValue) throws JNCException {
        String path = "agw-cgf[ipAddress='" + ipAddressValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "agwCgf", with specified keys.
     * The keys are specified as strings.
     * @param ipAddressValue Key argument of child.
     */
    public void deleteAgwCgf(String ipAddressValue) throws JNCException {
        String path = "agw-cgf[ipAddress='" + ipAddressValue + "']";
        delete(path);
    }

    /* Access methods for container child: "agw-sgsn-ga-profile". */

    /**
     * Adds container entry "agwSgsnGaProfile", using an existing object.
     * @param agwSgsnGaProfile The object to add.
     * @return The added child.
     */
    public AgwSgsnGaProfile addAgwSgsnGaProfile(AgwSgsnGaProfile agwSgsnGaProfile)
            throws JNCException {
        this.agwSgsnGaProfile = agwSgsnGaProfile;
        insertChild(agwSgsnGaProfile, childrenNames());
        return agwSgsnGaProfile;
    }

    /**
     * Adds container entry "agwSgsnGaProfile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AgwSgsnGaProfile addAgwSgsnGaProfile() throws JNCException {
        AgwSgsnGaProfile agwSgsnGaProfile = new AgwSgsnGaProfile();
        this.agwSgsnGaProfile = agwSgsnGaProfile;
        insertChild(agwSgsnGaProfile, childrenNames());
        return agwSgsnGaProfile;
    }

    /**
     * Deletes container entry "agwSgsnGaProfile".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteAgwSgsnGaProfile() throws JNCException {
        this.agwSgsnGaProfile = null;
        String path = "agw-sgsn-ga-profile";
        return delete(path);
    }

    /* Access methods for container child: "agw-charging-characteristics". */

    /**
     * Adds container entry "agwChargingCharacteristics", using an existing object.
     * @param agwChargingCharacteristics The object to add.
     * @return The added child.
     */
    public AgwChargingCharacteristics addAgwChargingCharacteristics(AgwChargingCharacteristics agwChargingCharacteristics)
            throws JNCException {
        this.agwChargingCharacteristics = agwChargingCharacteristics;
        insertChild(agwChargingCharacteristics, childrenNames());
        return agwChargingCharacteristics;
    }

    /**
     * Adds container entry "agwChargingCharacteristics".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AgwChargingCharacteristics addAgwChargingCharacteristics()
            throws JNCException {
        AgwChargingCharacteristics agwChargingCharacteristics = new AgwChargingCharacteristics();
        this.agwChargingCharacteristics = agwChargingCharacteristics;
        insertChild(agwChargingCharacteristics, childrenNames());
        return agwChargingCharacteristics;
    }

    /**
     * Deletes container entry "agwChargingCharacteristics".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteAgwChargingCharacteristics() throws JNCException {
        this.agwChargingCharacteristics = null;
        String path = "agw-charging-characteristics";
        return delete(path);
    }

    /* Access methods for container child: "cgf-action". */

    /**
     * Adds container entry "cgfAction", using an existing object.
     * @param cgfAction The object to add.
     * @return The added child.
     */
    public CgfAction addCgfAction(CgfAction cgfAction) throws JNCException {
        this.cgfAction = cgfAction;
        insertChild(cgfAction, childrenNames());
        return cgfAction;
    }

    /**
     * Adds container entry "cgfAction".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public CgfAction addCgfAction() throws JNCException {
        CgfAction cgfAction = new CgfAction();
        this.cgfAction = cgfAction;
        insertChild(cgfAction, childrenNames());
        return cgfAction;
    }

    /**
     * Deletes container entry "cgfAction".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteCgfAction() throws JNCException {
        this.cgfAction = null;
        String path = "cgf-action";
        return delete(path);
    }

    /* Access methods for list child: "cgf-oper". */

    /**
     * Gets list entry "cgfOper", with specified keys.
     */
    public CgfOper getCgfOper() throws JNCException {
        String path = "cgf-oper";
        return (CgfOper)searchOne(path);
    }

    /**
     * Iterator method for the list "cgf-oper".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator cgfOperIterator() {
        return new ElementChildrenIterator(children, "cgf-oper");
    }

    /**
     * Adds list entry "cgfOper", using an existing object.
     * @param cgfOper The object to add.
     * @return The added child.
     */
    public CgfOper addCgfOper(CgfOper cgfOper) throws JNCException {
        insertChild(cgfOper, childrenNames());
        return cgfOper;
    }

    /**
     * Adds list entry "cgfOper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public CgfOper addCgfOper() throws JNCException {
        CgfOper cgfOper = new CgfOper();
        insertChild(cgfOper, childrenNames());
        return cgfOper;
    }

    /**
     * Deletes list entry "cgfOper", with specified keys.
     */
    public void deleteCgfOper() throws JNCException {
        String path = "cgf-oper";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof AgwGaIf) agwGaIf = (AgwGaIf)child;
        else if (child instanceof AgwSgsnGaProfile) agwSgsnGaProfile = (AgwSgsnGaProfile)child;
        else if (child instanceof AgwChargingCharacteristics) agwChargingCharacteristics = (AgwChargingCharacteristics)child;
        else if (child instanceof CgfAction) cgfAction = (CgfAction)child;
    }

}
