/* 
 * @(#)MmeGtpProfile.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gtp;
import .ietfInetTypes.Ipv4Address;
import .ietfInetTypes.Ipv6Address;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gtp/mme-gtp-profile"
 * <p>
 * See line 82 in
 * upmConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeGtpProfile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeGtpProfile object.
     */
    public MmeGtpProfile() {
        super(Epc.NAMESPACE, "mme-gtp-profile");
    }

    /**
     * Constructor for an initialized MmeGtpProfile object,
     * 
     * @param nameValue Key argument of child.
     */
    public MmeGtpProfile(YangString nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-gtp-profile");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized MmeGtpProfile object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public MmeGtpProfile(String nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-gtp-profile");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeGtpProfile clone() {
        MmeGtpProfile copy;
        try {
            copy = new MmeGtpProfile(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeGtpProfile)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeGtpProfile cloneShallow() {
        MmeGtpProfile copy;
        try {
            copy = new MmeGtpProfile(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeGtpProfile)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "routing-instance",
            "ip-address-v4",
            "ip-address-v6",
            "dscp-mark",
            "echo-interval",
            "t3-echo-response",
            "n3-echo-request",
            "t3-response",
            "n3-request",
            "t3-response-session-creation",
            "n3-request-session-creation",
            "t3-response-bearer-modification",
            "n3-request-bearer-modification",
            "t3-response-context-request",
            "n3-request-context-request",
            "t3-response-forward-relocation",
            "n3-request-forward-relocation",
            "inactivity-timer",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "routing-instance". */

    /**
     * Gets the value for child leaf "routing-instance".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstanceValue() throws JNCException {
        return (YangString)getValue("routing-instance");
    }

    /**
     * Sets the value for child leaf "routing-instance",
     * using instance of generated typedef class.
     * @param routingInstanceValue The value to set.
     * @param routingInstanceValue used during instantiation.
     */
    public void setRoutingInstanceValue(YangString routingInstanceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance",
            routingInstanceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance",
     * using a String value.
     * @param routingInstanceValue used during instantiation.
     */
    public void setRoutingInstanceValue(String routingInstanceValue)
            throws JNCException {
        setRoutingInstanceValue(new YangString(routingInstanceValue));
    }

    /**
     * Unsets the value for child leaf "routing-instance".
     */
    public void unsetRoutingInstanceValue() throws JNCException {
        delete("routing-instance");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance" leaf will not have a value.
     */
    public void addRoutingInstance() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance" with operation "replace".
     */
    public void markRoutingInstanceReplace() throws JNCException {
        markLeafReplace("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "merge".
     */
    public void markRoutingInstanceMerge() throws JNCException {
        markLeafMerge("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "create".
     */
    public void markRoutingInstanceCreate() throws JNCException {
        markLeafCreate("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "delete".
     */
    public void markRoutingInstanceDelete() throws JNCException {
        markLeafDelete("routingInstance");
    }

    /* Access methods for optional leaf child: "ip-address-v4". */

    /**
     * Gets the value for child leaf "ip-address-v4".
     * @return The value of the leaf.
     */
    public Ipv4Address getIpAddressV4Value() throws JNCException {
        return (Ipv4Address)getValue("ip-address-v4");
    }

    /**
     * Sets the value for child leaf "ip-address-v4",
     * using a JNC type value.
     * @param ipAddressV4Value The value to set.
     * @param ipAddressV4Value used during instantiation.
     */
    public void setIpAddressV4Value(Ipv4Address ipAddressV4Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address-v4",
            ipAddressV4Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address-v4",
     * using a String value.
     * @param ipAddressV4Value used during instantiation.
     */
    public void setIpAddressV4Value(String ipAddressV4Value)
            throws JNCException {
        setIpAddressV4Value(new Ipv4Address(ipAddressV4Value));
    }

    /**
     * Unsets the value for child leaf "ip-address-v4".
     */
    public void unsetIpAddressV4Value() throws JNCException {
        delete("ip-address-v4");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address-v4" leaf will not have a value.
     */
    public void addIpAddressV4() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address-v4",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address-v4" with operation "replace".
     */
    public void markIpAddressV4Replace() throws JNCException {
        markLeafReplace("ipAddressV4");
    }

    /**
     * Marks the leaf "ip-address-v4" with operation "merge".
     */
    public void markIpAddressV4Merge() throws JNCException {
        markLeafMerge("ipAddressV4");
    }

    /**
     * Marks the leaf "ip-address-v4" with operation "create".
     */
    public void markIpAddressV4Create() throws JNCException {
        markLeafCreate("ipAddressV4");
    }

    /**
     * Marks the leaf "ip-address-v4" with operation "delete".
     */
    public void markIpAddressV4Delete() throws JNCException {
        markLeafDelete("ipAddressV4");
    }

    /* Access methods for optional leaf child: "ip-address-v6". */

    /**
     * Gets the value for child leaf "ip-address-v6".
     * @return The value of the leaf.
     */
    public Ipv6Address getIpAddressV6Value() throws JNCException {
        return (Ipv6Address)getValue("ip-address-v6");
    }

    /**
     * Sets the value for child leaf "ip-address-v6",
     * using a JNC type value.
     * @param ipAddressV6Value The value to set.
     * @param ipAddressV6Value used during instantiation.
     */
    public void setIpAddressV6Value(Ipv6Address ipAddressV6Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address-v6",
            ipAddressV6Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address-v6",
     * using a String value.
     * @param ipAddressV6Value used during instantiation.
     */
    public void setIpAddressV6Value(String ipAddressV6Value)
            throws JNCException {
        setIpAddressV6Value(new Ipv6Address(ipAddressV6Value));
    }

    /**
     * Unsets the value for child leaf "ip-address-v6".
     */
    public void unsetIpAddressV6Value() throws JNCException {
        delete("ip-address-v6");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address-v6" leaf will not have a value.
     */
    public void addIpAddressV6() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address-v6",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address-v6" with operation "replace".
     */
    public void markIpAddressV6Replace() throws JNCException {
        markLeafReplace("ipAddressV6");
    }

    /**
     * Marks the leaf "ip-address-v6" with operation "merge".
     */
    public void markIpAddressV6Merge() throws JNCException {
        markLeafMerge("ipAddressV6");
    }

    /**
     * Marks the leaf "ip-address-v6" with operation "create".
     */
    public void markIpAddressV6Create() throws JNCException {
        markLeafCreate("ipAddressV6");
    }

    /**
     * Marks the leaf "ip-address-v6" with operation "delete".
     */
    public void markIpAddressV6Delete() throws JNCException {
        markLeafDelete("ipAddressV6");
    }

    /* Access methods for optional leaf child: "dscp-mark". */

    /**
     * Gets the value for child leaf "dscp-mark".
     * @return The value of the leaf.
     */
    public YangString getDscpMarkValue() throws JNCException {
        YangString dscpMark = (YangString)getValue("dscp-mark");
        if (dscpMark == null) {
            dscpMark = new YangString("de");  // default
        }
        return dscpMark;
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using instance of generated typedef class.
     * @param dscpMarkValue The value to set.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(YangString dscpMarkValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            dscpMarkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using a String value.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(String dscpMarkValue) throws JNCException {
        setDscpMarkValue(new YangString(dscpMarkValue));
    }

    /**
     * Unsets the value for child leaf "dscp-mark".
     */
    public void unsetDscpMarkValue() throws JNCException {
        delete("dscp-mark");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dscp-mark" leaf will not have a value.
     */
    public void addDscpMark() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dscp-mark" with operation "replace".
     */
    public void markDscpMarkReplace() throws JNCException {
        markLeafReplace("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "merge".
     */
    public void markDscpMarkMerge() throws JNCException {
        markLeafMerge("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "create".
     */
    public void markDscpMarkCreate() throws JNCException {
        markLeafCreate("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "delete".
     */
    public void markDscpMarkDelete() throws JNCException {
        markLeafDelete("dscpMark");
    }

    /* Access methods for optional leaf child: "echo-interval". */

    /**
     * Gets the value for child leaf "echo-interval".
     * @return The value of the leaf.
     */
    public YangString getEchoIntervalValue() throws JNCException {
        YangString echoInterval = (YangString)getValue("echo-interval");
        if (echoInterval == null) {
            echoInterval = new YangString("4");  // default
        }
        return echoInterval;
    }

    /**
     * Sets the value for child leaf "echo-interval",
     * using instance of generated typedef class.
     * @param echoIntervalValue The value to set.
     * @param echoIntervalValue used during instantiation.
     */
    public void setEchoIntervalValue(YangString echoIntervalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "echo-interval",
            echoIntervalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "echo-interval",
     * using a String value.
     * @param echoIntervalValue used during instantiation.
     */
    public void setEchoIntervalValue(String echoIntervalValue)
            throws JNCException {
        setEchoIntervalValue(new YangString(echoIntervalValue));
    }

    /**
     * Unsets the value for child leaf "echo-interval".
     */
    public void unsetEchoIntervalValue() throws JNCException {
        delete("echo-interval");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "echo-interval" leaf will not have a value.
     */
    public void addEchoInterval() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "echo-interval",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "echo-interval" with operation "replace".
     */
    public void markEchoIntervalReplace() throws JNCException {
        markLeafReplace("echoInterval");
    }

    /**
     * Marks the leaf "echo-interval" with operation "merge".
     */
    public void markEchoIntervalMerge() throws JNCException {
        markLeafMerge("echoInterval");
    }

    /**
     * Marks the leaf "echo-interval" with operation "create".
     */
    public void markEchoIntervalCreate() throws JNCException {
        markLeafCreate("echoInterval");
    }

    /**
     * Marks the leaf "echo-interval" with operation "delete".
     */
    public void markEchoIntervalDelete() throws JNCException {
        markLeafDelete("echoInterval");
    }

    /* Access methods for optional leaf child: "t3-echo-response". */

    /**
     * Gets the value for child leaf "t3-echo-response".
     * @return The value of the leaf.
     */
    public YangUInt8 getT3EchoResponseValue() throws JNCException {
        YangUInt8 t3EchoResponse = (YangUInt8)getValue("t3-echo-response");
        if (t3EchoResponse == null) {
            t3EchoResponse = new YangUInt8("15");  // default
        }
        return t3EchoResponse;
    }

    /**
     * Sets the value for child leaf "t3-echo-response",
     * using instance of generated typedef class.
     * @param t3EchoResponseValue The value to set.
     * @param t3EchoResponseValue used during instantiation.
     */
    public void setT3EchoResponseValue(YangUInt8 t3EchoResponseValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t3-echo-response",
            t3EchoResponseValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "t3-echo-response",
     * using Java primitive values.
     * @param t3EchoResponseValue used during instantiation.
     */
    public void setT3EchoResponseValue(short t3EchoResponseValue)
            throws JNCException {
        setT3EchoResponseValue(new YangUInt8(t3EchoResponseValue));
    }

    /**
     * Sets the value for child leaf "t3-echo-response",
     * using a String value.
     * @param t3EchoResponseValue used during instantiation.
     */
    public void setT3EchoResponseValue(String t3EchoResponseValue)
            throws JNCException {
        setT3EchoResponseValue(new YangUInt8(t3EchoResponseValue));
    }

    /**
     * Unsets the value for child leaf "t3-echo-response".
     */
    public void unsetT3EchoResponseValue() throws JNCException {
        delete("t3-echo-response");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "t3-echo-response" leaf will not have a value.
     */
    public void addT3EchoResponse() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t3-echo-response",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "t3-echo-response" with operation "replace".
     */
    public void markT3EchoResponseReplace() throws JNCException {
        markLeafReplace("t3EchoResponse");
    }

    /**
     * Marks the leaf "t3-echo-response" with operation "merge".
     */
    public void markT3EchoResponseMerge() throws JNCException {
        markLeafMerge("t3EchoResponse");
    }

    /**
     * Marks the leaf "t3-echo-response" with operation "create".
     */
    public void markT3EchoResponseCreate() throws JNCException {
        markLeafCreate("t3EchoResponse");
    }

    /**
     * Marks the leaf "t3-echo-response" with operation "delete".
     */
    public void markT3EchoResponseDelete() throws JNCException {
        markLeafDelete("t3EchoResponse");
    }

    /* Access methods for optional leaf child: "n3-echo-request". */

    /**
     * Gets the value for child leaf "n3-echo-request".
     * @return The value of the leaf.
     */
    public YangUInt8 getN3EchoRequestValue() throws JNCException {
        YangUInt8 n3EchoRequest = (YangUInt8)getValue("n3-echo-request");
        if (n3EchoRequest == null) {
            n3EchoRequest = new YangUInt8("8");  // default
        }
        return n3EchoRequest;
    }

    /**
     * Sets the value for child leaf "n3-echo-request",
     * using instance of generated typedef class.
     * @param n3EchoRequestValue The value to set.
     * @param n3EchoRequestValue used during instantiation.
     */
    public void setN3EchoRequestValue(YangUInt8 n3EchoRequestValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n3-echo-request",
            n3EchoRequestValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "n3-echo-request",
     * using Java primitive values.
     * @param n3EchoRequestValue used during instantiation.
     */
    public void setN3EchoRequestValue(short n3EchoRequestValue)
            throws JNCException {
        setN3EchoRequestValue(new YangUInt8(n3EchoRequestValue));
    }

    /**
     * Sets the value for child leaf "n3-echo-request",
     * using a String value.
     * @param n3EchoRequestValue used during instantiation.
     */
    public void setN3EchoRequestValue(String n3EchoRequestValue)
            throws JNCException {
        setN3EchoRequestValue(new YangUInt8(n3EchoRequestValue));
    }

    /**
     * Unsets the value for child leaf "n3-echo-request".
     */
    public void unsetN3EchoRequestValue() throws JNCException {
        delete("n3-echo-request");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "n3-echo-request" leaf will not have a value.
     */
    public void addN3EchoRequest() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n3-echo-request",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "n3-echo-request" with operation "replace".
     */
    public void markN3EchoRequestReplace() throws JNCException {
        markLeafReplace("n3EchoRequest");
    }

    /**
     * Marks the leaf "n3-echo-request" with operation "merge".
     */
    public void markN3EchoRequestMerge() throws JNCException {
        markLeafMerge("n3EchoRequest");
    }

    /**
     * Marks the leaf "n3-echo-request" with operation "create".
     */
    public void markN3EchoRequestCreate() throws JNCException {
        markLeafCreate("n3EchoRequest");
    }

    /**
     * Marks the leaf "n3-echo-request" with operation "delete".
     */
    public void markN3EchoRequestDelete() throws JNCException {
        markLeafDelete("n3EchoRequest");
    }

    /* Access methods for optional leaf child: "t3-response". */

    /**
     * Gets the value for child leaf "t3-response".
     * @return The value of the leaf.
     */
    public YangUInt8 getT3ResponseValue() throws JNCException {
        YangUInt8 t3Response = (YangUInt8)getValue("t3-response");
        if (t3Response == null) {
            t3Response = new YangUInt8("5");  // default
        }
        return t3Response;
    }

    /**
     * Sets the value for child leaf "t3-response",
     * using instance of generated typedef class.
     * @param t3ResponseValue The value to set.
     * @param t3ResponseValue used during instantiation.
     */
    public void setT3ResponseValue(YangUInt8 t3ResponseValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t3-response",
            t3ResponseValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "t3-response",
     * using Java primitive values.
     * @param t3ResponseValue used during instantiation.
     */
    public void setT3ResponseValue(short t3ResponseValue) throws JNCException {
        setT3ResponseValue(new YangUInt8(t3ResponseValue));
    }

    /**
     * Sets the value for child leaf "t3-response",
     * using a String value.
     * @param t3ResponseValue used during instantiation.
     */
    public void setT3ResponseValue(String t3ResponseValue) throws JNCException {
        setT3ResponseValue(new YangUInt8(t3ResponseValue));
    }

    /**
     * Unsets the value for child leaf "t3-response".
     */
    public void unsetT3ResponseValue() throws JNCException {
        delete("t3-response");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "t3-response" leaf will not have a value.
     */
    public void addT3Response() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t3-response",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "t3-response" with operation "replace".
     */
    public void markT3ResponseReplace() throws JNCException {
        markLeafReplace("t3Response");
    }

    /**
     * Marks the leaf "t3-response" with operation "merge".
     */
    public void markT3ResponseMerge() throws JNCException {
        markLeafMerge("t3Response");
    }

    /**
     * Marks the leaf "t3-response" with operation "create".
     */
    public void markT3ResponseCreate() throws JNCException {
        markLeafCreate("t3Response");
    }

    /**
     * Marks the leaf "t3-response" with operation "delete".
     */
    public void markT3ResponseDelete() throws JNCException {
        markLeafDelete("t3Response");
    }

    /* Access methods for optional leaf child: "n3-request". */

    /**
     * Gets the value for child leaf "n3-request".
     * @return The value of the leaf.
     */
    public YangUInt8 getN3RequestValue() throws JNCException {
        YangUInt8 n3Request = (YangUInt8)getValue("n3-request");
        if (n3Request == null) {
            n3Request = new YangUInt8("2");  // default
        }
        return n3Request;
    }

    /**
     * Sets the value for child leaf "n3-request",
     * using instance of generated typedef class.
     * @param n3RequestValue The value to set.
     * @param n3RequestValue used during instantiation.
     */
    public void setN3RequestValue(YangUInt8 n3RequestValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n3-request",
            n3RequestValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "n3-request",
     * using Java primitive values.
     * @param n3RequestValue used during instantiation.
     */
    public void setN3RequestValue(short n3RequestValue) throws JNCException {
        setN3RequestValue(new YangUInt8(n3RequestValue));
    }

    /**
     * Sets the value for child leaf "n3-request",
     * using a String value.
     * @param n3RequestValue used during instantiation.
     */
    public void setN3RequestValue(String n3RequestValue) throws JNCException {
        setN3RequestValue(new YangUInt8(n3RequestValue));
    }

    /**
     * Unsets the value for child leaf "n3-request".
     */
    public void unsetN3RequestValue() throws JNCException {
        delete("n3-request");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "n3-request" leaf will not have a value.
     */
    public void addN3Request() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n3-request",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "n3-request" with operation "replace".
     */
    public void markN3RequestReplace() throws JNCException {
        markLeafReplace("n3Request");
    }

    /**
     * Marks the leaf "n3-request" with operation "merge".
     */
    public void markN3RequestMerge() throws JNCException {
        markLeafMerge("n3Request");
    }

    /**
     * Marks the leaf "n3-request" with operation "create".
     */
    public void markN3RequestCreate() throws JNCException {
        markLeafCreate("n3Request");
    }

    /**
     * Marks the leaf "n3-request" with operation "delete".
     */
    public void markN3RequestDelete() throws JNCException {
        markLeafDelete("n3Request");
    }

    /* Access methods for optional leaf child: "t3-response-session-creation". */

    /**
     * Gets the value for child leaf "t3-response-session-creation".
     * @return The value of the leaf.
     */
    public YangUInt8 getT3ResponseSessionCreationValue() throws JNCException {
        YangUInt8 t3ResponseSessionCreation = (YangUInt8)getValue("t3-response-session-creation");
        if (t3ResponseSessionCreation == null) {
            t3ResponseSessionCreation = new YangUInt8("5");  // default
        }
        return t3ResponseSessionCreation;
    }

    /**
     * Sets the value for child leaf "t3-response-session-creation",
     * using instance of generated typedef class.
     * @param t3ResponseSessionCreationValue The value to set.
     * @param t3ResponseSessionCreationValue used during instantiation.
     */
    public void setT3ResponseSessionCreationValue(YangUInt8 t3ResponseSessionCreationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t3-response-session-creation",
            t3ResponseSessionCreationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "t3-response-session-creation",
     * using Java primitive values.
     * @param t3ResponseSessionCreationValue used during instantiation.
     */
    public void setT3ResponseSessionCreationValue(short t3ResponseSessionCreationValue)
            throws JNCException {
        setT3ResponseSessionCreationValue(new YangUInt8(t3ResponseSessionCreationValue));
    }

    /**
     * Sets the value for child leaf "t3-response-session-creation",
     * using a String value.
     * @param t3ResponseSessionCreationValue used during instantiation.
     */
    public void setT3ResponseSessionCreationValue(String t3ResponseSessionCreationValue)
            throws JNCException {
        setT3ResponseSessionCreationValue(new YangUInt8(t3ResponseSessionCreationValue));
    }

    /**
     * Unsets the value for child leaf "t3-response-session-creation".
     */
    public void unsetT3ResponseSessionCreationValue() throws JNCException {
        delete("t3-response-session-creation");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "t3-response-session-creation" leaf will not have a value.
     */
    public void addT3ResponseSessionCreation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t3-response-session-creation",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "t3-response-session-creation" with operation "replace".
     */
    public void markT3ResponseSessionCreationReplace() throws JNCException {
        markLeafReplace("t3ResponseSessionCreation");
    }

    /**
     * Marks the leaf "t3-response-session-creation" with operation "merge".
     */
    public void markT3ResponseSessionCreationMerge() throws JNCException {
        markLeafMerge("t3ResponseSessionCreation");
    }

    /**
     * Marks the leaf "t3-response-session-creation" with operation "create".
     */
    public void markT3ResponseSessionCreationCreate() throws JNCException {
        markLeafCreate("t3ResponseSessionCreation");
    }

    /**
     * Marks the leaf "t3-response-session-creation" with operation "delete".
     */
    public void markT3ResponseSessionCreationDelete() throws JNCException {
        markLeafDelete("t3ResponseSessionCreation");
    }

    /* Access methods for optional leaf child: "n3-request-session-creation". */

    /**
     * Gets the value for child leaf "n3-request-session-creation".
     * @return The value of the leaf.
     */
    public YangUInt8 getN3RequestSessionCreationValue() throws JNCException {
        YangUInt8 n3RequestSessionCreation = (YangUInt8)getValue("n3-request-session-creation");
        if (n3RequestSessionCreation == null) {
            n3RequestSessionCreation = new YangUInt8("2");  // default
        }
        return n3RequestSessionCreation;
    }

    /**
     * Sets the value for child leaf "n3-request-session-creation",
     * using instance of generated typedef class.
     * @param n3RequestSessionCreationValue The value to set.
     * @param n3RequestSessionCreationValue used during instantiation.
     */
    public void setN3RequestSessionCreationValue(YangUInt8 n3RequestSessionCreationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n3-request-session-creation",
            n3RequestSessionCreationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "n3-request-session-creation",
     * using Java primitive values.
     * @param n3RequestSessionCreationValue used during instantiation.
     */
    public void setN3RequestSessionCreationValue(short n3RequestSessionCreationValue)
            throws JNCException {
        setN3RequestSessionCreationValue(new YangUInt8(n3RequestSessionCreationValue));
    }

    /**
     * Sets the value for child leaf "n3-request-session-creation",
     * using a String value.
     * @param n3RequestSessionCreationValue used during instantiation.
     */
    public void setN3RequestSessionCreationValue(String n3RequestSessionCreationValue)
            throws JNCException {
        setN3RequestSessionCreationValue(new YangUInt8(n3RequestSessionCreationValue));
    }

    /**
     * Unsets the value for child leaf "n3-request-session-creation".
     */
    public void unsetN3RequestSessionCreationValue() throws JNCException {
        delete("n3-request-session-creation");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "n3-request-session-creation" leaf will not have a value.
     */
    public void addN3RequestSessionCreation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n3-request-session-creation",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "n3-request-session-creation" with operation "replace".
     */
    public void markN3RequestSessionCreationReplace() throws JNCException {
        markLeafReplace("n3RequestSessionCreation");
    }

    /**
     * Marks the leaf "n3-request-session-creation" with operation "merge".
     */
    public void markN3RequestSessionCreationMerge() throws JNCException {
        markLeafMerge("n3RequestSessionCreation");
    }

    /**
     * Marks the leaf "n3-request-session-creation" with operation "create".
     */
    public void markN3RequestSessionCreationCreate() throws JNCException {
        markLeafCreate("n3RequestSessionCreation");
    }

    /**
     * Marks the leaf "n3-request-session-creation" with operation "delete".
     */
    public void markN3RequestSessionCreationDelete() throws JNCException {
        markLeafDelete("n3RequestSessionCreation");
    }

    /* Access methods for optional leaf child: "t3-response-bearer-modification". */

    /**
     * Gets the value for child leaf "t3-response-bearer-modification".
     * @return The value of the leaf.
     */
    public YangUInt8 getT3ResponseBearerModificationValue() throws JNCException {
        YangUInt8 t3ResponseBearerModification = (YangUInt8)getValue("t3-response-bearer-modification");
        if (t3ResponseBearerModification == null) {
            t3ResponseBearerModification = new YangUInt8("5");  // default
        }
        return t3ResponseBearerModification;
    }

    /**
     * Sets the value for child leaf "t3-response-bearer-modification",
     * using instance of generated typedef class.
     * @param t3ResponseBearerModificationValue The value to set.
     * @param t3ResponseBearerModificationValue used during instantiation.
     */
    public void setT3ResponseBearerModificationValue(YangUInt8 t3ResponseBearerModificationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t3-response-bearer-modification",
            t3ResponseBearerModificationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "t3-response-bearer-modification",
     * using Java primitive values.
     * @param t3ResponseBearerModificationValue used during instantiation.
     */
    public void setT3ResponseBearerModificationValue(short t3ResponseBearerModificationValue)
            throws JNCException {
        setT3ResponseBearerModificationValue(new YangUInt8(t3ResponseBearerModificationValue));
    }

    /**
     * Sets the value for child leaf "t3-response-bearer-modification",
     * using a String value.
     * @param t3ResponseBearerModificationValue used during instantiation.
     */
    public void setT3ResponseBearerModificationValue(String t3ResponseBearerModificationValue)
            throws JNCException {
        setT3ResponseBearerModificationValue(new YangUInt8(t3ResponseBearerModificationValue));
    }

    /**
     * Unsets the value for child leaf "t3-response-bearer-modification".
     */
    public void unsetT3ResponseBearerModificationValue() throws JNCException {
        delete("t3-response-bearer-modification");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "t3-response-bearer-modification" leaf will not have a value.
     */
    public void addT3ResponseBearerModification() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t3-response-bearer-modification",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "t3-response-bearer-modification" with operation "replace".
     */
    public void markT3ResponseBearerModificationReplace() throws JNCException {
        markLeafReplace("t3ResponseBearerModification");
    }

    /**
     * Marks the leaf "t3-response-bearer-modification" with operation "merge".
     */
    public void markT3ResponseBearerModificationMerge() throws JNCException {
        markLeafMerge("t3ResponseBearerModification");
    }

    /**
     * Marks the leaf "t3-response-bearer-modification" with operation "create".
     */
    public void markT3ResponseBearerModificationCreate() throws JNCException {
        markLeafCreate("t3ResponseBearerModification");
    }

    /**
     * Marks the leaf "t3-response-bearer-modification" with operation "delete".
     */
    public void markT3ResponseBearerModificationDelete() throws JNCException {
        markLeafDelete("t3ResponseBearerModification");
    }

    /* Access methods for optional leaf child: "n3-request-bearer-modification". */

    /**
     * Gets the value for child leaf "n3-request-bearer-modification".
     * @return The value of the leaf.
     */
    public YangUInt8 getN3RequestBearerModificationValue() throws JNCException {
        YangUInt8 n3RequestBearerModification = (YangUInt8)getValue("n3-request-bearer-modification");
        if (n3RequestBearerModification == null) {
            n3RequestBearerModification = new YangUInt8("2");  // default
        }
        return n3RequestBearerModification;
    }

    /**
     * Sets the value for child leaf "n3-request-bearer-modification",
     * using instance of generated typedef class.
     * @param n3RequestBearerModificationValue The value to set.
     * @param n3RequestBearerModificationValue used during instantiation.
     */
    public void setN3RequestBearerModificationValue(YangUInt8 n3RequestBearerModificationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n3-request-bearer-modification",
            n3RequestBearerModificationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "n3-request-bearer-modification",
     * using Java primitive values.
     * @param n3RequestBearerModificationValue used during instantiation.
     */
    public void setN3RequestBearerModificationValue(short n3RequestBearerModificationValue)
            throws JNCException {
        setN3RequestBearerModificationValue(new YangUInt8(n3RequestBearerModificationValue));
    }

    /**
     * Sets the value for child leaf "n3-request-bearer-modification",
     * using a String value.
     * @param n3RequestBearerModificationValue used during instantiation.
     */
    public void setN3RequestBearerModificationValue(String n3RequestBearerModificationValue)
            throws JNCException {
        setN3RequestBearerModificationValue(new YangUInt8(n3RequestBearerModificationValue));
    }

    /**
     * Unsets the value for child leaf "n3-request-bearer-modification".
     */
    public void unsetN3RequestBearerModificationValue() throws JNCException {
        delete("n3-request-bearer-modification");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "n3-request-bearer-modification" leaf will not have a value.
     */
    public void addN3RequestBearerModification() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n3-request-bearer-modification",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "n3-request-bearer-modification" with operation "replace".
     */
    public void markN3RequestBearerModificationReplace() throws JNCException {
        markLeafReplace("n3RequestBearerModification");
    }

    /**
     * Marks the leaf "n3-request-bearer-modification" with operation "merge".
     */
    public void markN3RequestBearerModificationMerge() throws JNCException {
        markLeafMerge("n3RequestBearerModification");
    }

    /**
     * Marks the leaf "n3-request-bearer-modification" with operation "create".
     */
    public void markN3RequestBearerModificationCreate() throws JNCException {
        markLeafCreate("n3RequestBearerModification");
    }

    /**
     * Marks the leaf "n3-request-bearer-modification" with operation "delete".
     */
    public void markN3RequestBearerModificationDelete() throws JNCException {
        markLeafDelete("n3RequestBearerModification");
    }

    /* Access methods for optional leaf child: "t3-response-context-request". */

    /**
     * Gets the value for child leaf "t3-response-context-request".
     * @return The value of the leaf.
     */
    public YangUInt8 getT3ResponseContextRequestValue() throws JNCException {
        YangUInt8 t3ResponseContextRequest = (YangUInt8)getValue("t3-response-context-request");
        if (t3ResponseContextRequest == null) {
            t3ResponseContextRequest = new YangUInt8("5");  // default
        }
        return t3ResponseContextRequest;
    }

    /**
     * Sets the value for child leaf "t3-response-context-request",
     * using instance of generated typedef class.
     * @param t3ResponseContextRequestValue The value to set.
     * @param t3ResponseContextRequestValue used during instantiation.
     */
    public void setT3ResponseContextRequestValue(YangUInt8 t3ResponseContextRequestValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t3-response-context-request",
            t3ResponseContextRequestValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "t3-response-context-request",
     * using Java primitive values.
     * @param t3ResponseContextRequestValue used during instantiation.
     */
    public void setT3ResponseContextRequestValue(short t3ResponseContextRequestValue)
            throws JNCException {
        setT3ResponseContextRequestValue(new YangUInt8(t3ResponseContextRequestValue));
    }

    /**
     * Sets the value for child leaf "t3-response-context-request",
     * using a String value.
     * @param t3ResponseContextRequestValue used during instantiation.
     */
    public void setT3ResponseContextRequestValue(String t3ResponseContextRequestValue)
            throws JNCException {
        setT3ResponseContextRequestValue(new YangUInt8(t3ResponseContextRequestValue));
    }

    /**
     * Unsets the value for child leaf "t3-response-context-request".
     */
    public void unsetT3ResponseContextRequestValue() throws JNCException {
        delete("t3-response-context-request");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "t3-response-context-request" leaf will not have a value.
     */
    public void addT3ResponseContextRequest() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t3-response-context-request",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "t3-response-context-request" with operation "replace".
     */
    public void markT3ResponseContextRequestReplace() throws JNCException {
        markLeafReplace("t3ResponseContextRequest");
    }

    /**
     * Marks the leaf "t3-response-context-request" with operation "merge".
     */
    public void markT3ResponseContextRequestMerge() throws JNCException {
        markLeafMerge("t3ResponseContextRequest");
    }

    /**
     * Marks the leaf "t3-response-context-request" with operation "create".
     */
    public void markT3ResponseContextRequestCreate() throws JNCException {
        markLeafCreate("t3ResponseContextRequest");
    }

    /**
     * Marks the leaf "t3-response-context-request" with operation "delete".
     */
    public void markT3ResponseContextRequestDelete() throws JNCException {
        markLeafDelete("t3ResponseContextRequest");
    }

    /* Access methods for optional leaf child: "n3-request-context-request". */

    /**
     * Gets the value for child leaf "n3-request-context-request".
     * @return The value of the leaf.
     */
    public YangUInt8 getN3RequestContextRequestValue() throws JNCException {
        YangUInt8 n3RequestContextRequest = (YangUInt8)getValue("n3-request-context-request");
        if (n3RequestContextRequest == null) {
            n3RequestContextRequest = new YangUInt8("2");  // default
        }
        return n3RequestContextRequest;
    }

    /**
     * Sets the value for child leaf "n3-request-context-request",
     * using instance of generated typedef class.
     * @param n3RequestContextRequestValue The value to set.
     * @param n3RequestContextRequestValue used during instantiation.
     */
    public void setN3RequestContextRequestValue(YangUInt8 n3RequestContextRequestValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n3-request-context-request",
            n3RequestContextRequestValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "n3-request-context-request",
     * using Java primitive values.
     * @param n3RequestContextRequestValue used during instantiation.
     */
    public void setN3RequestContextRequestValue(short n3RequestContextRequestValue)
            throws JNCException {
        setN3RequestContextRequestValue(new YangUInt8(n3RequestContextRequestValue));
    }

    /**
     * Sets the value for child leaf "n3-request-context-request",
     * using a String value.
     * @param n3RequestContextRequestValue used during instantiation.
     */
    public void setN3RequestContextRequestValue(String n3RequestContextRequestValue)
            throws JNCException {
        setN3RequestContextRequestValue(new YangUInt8(n3RequestContextRequestValue));
    }

    /**
     * Unsets the value for child leaf "n3-request-context-request".
     */
    public void unsetN3RequestContextRequestValue() throws JNCException {
        delete("n3-request-context-request");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "n3-request-context-request" leaf will not have a value.
     */
    public void addN3RequestContextRequest() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n3-request-context-request",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "n3-request-context-request" with operation "replace".
     */
    public void markN3RequestContextRequestReplace() throws JNCException {
        markLeafReplace("n3RequestContextRequest");
    }

    /**
     * Marks the leaf "n3-request-context-request" with operation "merge".
     */
    public void markN3RequestContextRequestMerge() throws JNCException {
        markLeafMerge("n3RequestContextRequest");
    }

    /**
     * Marks the leaf "n3-request-context-request" with operation "create".
     */
    public void markN3RequestContextRequestCreate() throws JNCException {
        markLeafCreate("n3RequestContextRequest");
    }

    /**
     * Marks the leaf "n3-request-context-request" with operation "delete".
     */
    public void markN3RequestContextRequestDelete() throws JNCException {
        markLeafDelete("n3RequestContextRequest");
    }

    /* Access methods for optional leaf child: "t3-response-forward-relocation". */

    /**
     * Gets the value for child leaf "t3-response-forward-relocation".
     * @return The value of the leaf.
     */
    public YangUInt8 getT3ResponseForwardRelocationValue() throws JNCException {
        YangUInt8 t3ResponseForwardRelocation = (YangUInt8)getValue("t3-response-forward-relocation");
        if (t3ResponseForwardRelocation == null) {
            t3ResponseForwardRelocation = new YangUInt8("5");  // default
        }
        return t3ResponseForwardRelocation;
    }

    /**
     * Sets the value for child leaf "t3-response-forward-relocation",
     * using instance of generated typedef class.
     * @param t3ResponseForwardRelocationValue The value to set.
     * @param t3ResponseForwardRelocationValue used during instantiation.
     */
    public void setT3ResponseForwardRelocationValue(YangUInt8 t3ResponseForwardRelocationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t3-response-forward-relocation",
            t3ResponseForwardRelocationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "t3-response-forward-relocation",
     * using Java primitive values.
     * @param t3ResponseForwardRelocationValue used during instantiation.
     */
    public void setT3ResponseForwardRelocationValue(short t3ResponseForwardRelocationValue)
            throws JNCException {
        setT3ResponseForwardRelocationValue(new YangUInt8(t3ResponseForwardRelocationValue));
    }

    /**
     * Sets the value for child leaf "t3-response-forward-relocation",
     * using a String value.
     * @param t3ResponseForwardRelocationValue used during instantiation.
     */
    public void setT3ResponseForwardRelocationValue(String t3ResponseForwardRelocationValue)
            throws JNCException {
        setT3ResponseForwardRelocationValue(new YangUInt8(t3ResponseForwardRelocationValue));
    }

    /**
     * Unsets the value for child leaf "t3-response-forward-relocation".
     */
    public void unsetT3ResponseForwardRelocationValue() throws JNCException {
        delete("t3-response-forward-relocation");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "t3-response-forward-relocation" leaf will not have a value.
     */
    public void addT3ResponseForwardRelocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "t3-response-forward-relocation",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "t3-response-forward-relocation" with operation "replace".
     */
    public void markT3ResponseForwardRelocationReplace() throws JNCException {
        markLeafReplace("t3ResponseForwardRelocation");
    }

    /**
     * Marks the leaf "t3-response-forward-relocation" with operation "merge".
     */
    public void markT3ResponseForwardRelocationMerge() throws JNCException {
        markLeafMerge("t3ResponseForwardRelocation");
    }

    /**
     * Marks the leaf "t3-response-forward-relocation" with operation "create".
     */
    public void markT3ResponseForwardRelocationCreate() throws JNCException {
        markLeafCreate("t3ResponseForwardRelocation");
    }

    /**
     * Marks the leaf "t3-response-forward-relocation" with operation "delete".
     */
    public void markT3ResponseForwardRelocationDelete() throws JNCException {
        markLeafDelete("t3ResponseForwardRelocation");
    }

    /* Access methods for optional leaf child: "n3-request-forward-relocation". */

    /**
     * Gets the value for child leaf "n3-request-forward-relocation".
     * @return The value of the leaf.
     */
    public YangUInt8 getN3RequestForwardRelocationValue() throws JNCException {
        YangUInt8 n3RequestForwardRelocation = (YangUInt8)getValue("n3-request-forward-relocation");
        if (n3RequestForwardRelocation == null) {
            n3RequestForwardRelocation = new YangUInt8("2");  // default
        }
        return n3RequestForwardRelocation;
    }

    /**
     * Sets the value for child leaf "n3-request-forward-relocation",
     * using instance of generated typedef class.
     * @param n3RequestForwardRelocationValue The value to set.
     * @param n3RequestForwardRelocationValue used during instantiation.
     */
    public void setN3RequestForwardRelocationValue(YangUInt8 n3RequestForwardRelocationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n3-request-forward-relocation",
            n3RequestForwardRelocationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "n3-request-forward-relocation",
     * using Java primitive values.
     * @param n3RequestForwardRelocationValue used during instantiation.
     */
    public void setN3RequestForwardRelocationValue(short n3RequestForwardRelocationValue)
            throws JNCException {
        setN3RequestForwardRelocationValue(new YangUInt8(n3RequestForwardRelocationValue));
    }

    /**
     * Sets the value for child leaf "n3-request-forward-relocation",
     * using a String value.
     * @param n3RequestForwardRelocationValue used during instantiation.
     */
    public void setN3RequestForwardRelocationValue(String n3RequestForwardRelocationValue)
            throws JNCException {
        setN3RequestForwardRelocationValue(new YangUInt8(n3RequestForwardRelocationValue));
    }

    /**
     * Unsets the value for child leaf "n3-request-forward-relocation".
     */
    public void unsetN3RequestForwardRelocationValue() throws JNCException {
        delete("n3-request-forward-relocation");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "n3-request-forward-relocation" leaf will not have a value.
     */
    public void addN3RequestForwardRelocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "n3-request-forward-relocation",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "n3-request-forward-relocation" with operation "replace".
     */
    public void markN3RequestForwardRelocationReplace() throws JNCException {
        markLeafReplace("n3RequestForwardRelocation");
    }

    /**
     * Marks the leaf "n3-request-forward-relocation" with operation "merge".
     */
    public void markN3RequestForwardRelocationMerge() throws JNCException {
        markLeafMerge("n3RequestForwardRelocation");
    }

    /**
     * Marks the leaf "n3-request-forward-relocation" with operation "create".
     */
    public void markN3RequestForwardRelocationCreate() throws JNCException {
        markLeafCreate("n3RequestForwardRelocation");
    }

    /**
     * Marks the leaf "n3-request-forward-relocation" with operation "delete".
     */
    public void markN3RequestForwardRelocationDelete() throws JNCException {
        markLeafDelete("n3RequestForwardRelocation");
    }

    /* Access methods for optional leaf child: "inactivity-timer". */

    /**
     * Gets the value for child leaf "inactivity-timer".
     * @return The value of the leaf.
     */
    public YangString getInactivityTimerValue() throws JNCException {
        YangString inactivityTimer = (YangString)getValue("inactivity-timer");
        if (inactivityTimer == null) {
            inactivityTimer = new YangString("10");  // default
        }
        return inactivityTimer;
    }

    /**
     * Sets the value for child leaf "inactivity-timer",
     * using instance of generated typedef class.
     * @param inactivityTimerValue The value to set.
     * @param inactivityTimerValue used during instantiation.
     */
    public void setInactivityTimerValue(YangString inactivityTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "inactivity-timer",
            inactivityTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "inactivity-timer",
     * using a String value.
     * @param inactivityTimerValue used during instantiation.
     */
    public void setInactivityTimerValue(String inactivityTimerValue)
            throws JNCException {
        setInactivityTimerValue(new YangString(inactivityTimerValue));
    }

    /**
     * Unsets the value for child leaf "inactivity-timer".
     */
    public void unsetInactivityTimerValue() throws JNCException {
        delete("inactivity-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "inactivity-timer" leaf will not have a value.
     */
    public void addInactivityTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "inactivity-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "inactivity-timer" with operation "replace".
     */
    public void markInactivityTimerReplace() throws JNCException {
        markLeafReplace("inactivityTimer");
    }

    /**
     * Marks the leaf "inactivity-timer" with operation "merge".
     */
    public void markInactivityTimerMerge() throws JNCException {
        markLeafMerge("inactivityTimer");
    }

    /**
     * Marks the leaf "inactivity-timer" with operation "create".
     */
    public void markInactivityTimerCreate() throws JNCException {
        markLeafCreate("inactivityTimer");
    }

    /**
     * Marks the leaf "inactivity-timer" with operation "delete".
     */
    public void markInactivityTimerDelete() throws JNCException {
        markLeafDelete("inactivityTimer");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
