/* 
 * @(#)MmeEan.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.s101;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/s101/mme-ean"
 * <p>
 * See line 2269 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeEan extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeEan object.
     */
    public MmeEan() {
        super(Epc.NAMESPACE, "mme-ean");
    }

    /**
     * Constructor for an initialized MmeEan object,
     * 
     * @param ehrpdAccessIdValue Key argument of child.
     */
    public MmeEan(YangString ehrpdAccessIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-ean");
        Leaf ehrpdAccessId = new Leaf(Epc.NAMESPACE, "ehrpd-access-id");
        ehrpdAccessId.setValue(ehrpdAccessIdValue);
        insertChild(ehrpdAccessId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeEan object,
     * with String keys.
     * @param ehrpdAccessIdValue Key argument of child.
     */
    public MmeEan(String ehrpdAccessIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-ean");
        Leaf ehrpdAccessId = new Leaf(Epc.NAMESPACE, "ehrpd-access-id");
        ehrpdAccessId.setValue(new YangString(ehrpdAccessIdValue));
        insertChild(ehrpdAccessId, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeEan clone() {
        MmeEan copy;
        try {
            copy = new MmeEan(getEhrpdAccessIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeEan)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeEan cloneShallow() {
        MmeEan copy;
        try {
            copy = new MmeEan(getEhrpdAccessIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeEan)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "ehrpd-access-id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "ehrpd-access-id",
            "ip-address",
        };
    }

    /* Access methods for leaf child: "ehrpd-access-id". */

    /**
     * Gets the value for child leaf "ehrpd-access-id".
     * @return The value of the leaf.
     */
    public YangString getEhrpdAccessIdValue() throws JNCException {
        return (YangString)getValue("ehrpd-access-id");
    }

    /**
     * Sets the value for child leaf "ehrpd-access-id",
     * using instance of generated typedef class.
     * @param ehrpdAccessIdValue The value to set.
     * @param ehrpdAccessIdValue used during instantiation.
     */
    public void setEhrpdAccessIdValue(YangString ehrpdAccessIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ehrpd-access-id",
            ehrpdAccessIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ehrpd-access-id",
     * using a String value.
     * @param ehrpdAccessIdValue used during instantiation.
     */
    public void setEhrpdAccessIdValue(String ehrpdAccessIdValue)
            throws JNCException {
        setEhrpdAccessIdValue(new YangString(ehrpdAccessIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ehrpd-access-id" leaf will not have a value.
     */
    public void addEhrpdAccessId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ehrpd-access-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "ip-address". */

    /**
     * Gets the value for child leaf "ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddressValue() throws JNCException {
        return (IpAddress)getValue("ip-address");
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a JNC type value.
     * @param ipAddressValue The value to set.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(IpAddress ipAddressValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            ipAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a String value.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(String ipAddressValue) throws JNCException {
        setIpAddressValue(new IpAddress(ipAddressValue));
    }

    /**
     * Unsets the value for child leaf "ip-address".
     */
    public void unsetIpAddressValue() throws JNCException {
        delete("ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address" leaf will not have a value.
     */
    public void addIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address" with operation "replace".
     */
    public void markIpAddressReplace() throws JNCException {
        markLeafReplace("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "merge".
     */
    public void markIpAddressMerge() throws JNCException {
        markLeafMerge("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "create".
     */
    public void markIpAddressCreate() throws JNCException {
        markLeafCreate("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "delete".
     */
    public void markIpAddressDelete() throws JNCException {
        markLeafDelete("ipAddress");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
