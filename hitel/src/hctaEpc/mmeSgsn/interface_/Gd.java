/* 
 * @(#)Gd.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeGdIf;

import MmeSmsTrustedOperator;

import NodeSet;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gd"
 * <p>
 * See line 29 in
 * sgsnScConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Gd extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "mme-gd-if".
     */
    public MmeGdIf mmeGdIf = null;

    /**
     * Constructor for an empty Gd object.
     */
    public Gd() {
        super(Epc.NAMESPACE, "gd");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Gd clone() {
        return (Gd)cloneContent(new Gd());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Gd cloneShallow() {
        return (Gd)cloneShallowContent(new Gd());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-gd-if",
            "mme-sms-trusted-operator",
        };
    }

    /* Access methods for container child: "mme-gd-if". */

    /**
     * Adds container entry "mmeGdIf", using an existing object.
     * @param mmeGdIf The object to add.
     * @return The added child.
     */
    public MmeGdIf addMmeGdIf(MmeGdIf mmeGdIf) throws JNCException {
        this.mmeGdIf = mmeGdIf;
        insertChild(mmeGdIf, childrenNames());
        return mmeGdIf;
    }

    /**
     * Adds container entry "mmeGdIf".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeGdIf addMmeGdIf() throws JNCException {
        MmeGdIf mmeGdIf = new MmeGdIf();
        this.mmeGdIf = mmeGdIf;
        insertChild(mmeGdIf, childrenNames());
        return mmeGdIf;
    }

    /**
     * Deletes container entry "mmeGdIf".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeGdIf() throws JNCException {
        this.mmeGdIf = null;
        String path = "mme-gd-if";
        return delete(path);
    }

    /* Access methods for list child: "mme-sms-trusted-operator". */

    /**
     * Gets list entry "mmeSmsTrustedOperator", with specified keys.
     * @param nodeAddressValue Key argument of child.
     */
    public MmeSmsTrustedOperator getMmeSmsTrustedOperator(YangString nodeAddressValue)
            throws JNCException {
        String path = "mme-sms-trusted-operator[nodeAddress='" + nodeAddressValue + "']";
        return (MmeSmsTrustedOperator)searchOne(path);
    }

    /**
     * Gets list entry "mmeSmsTrustedOperator", with specified keys.
     * The keys are specified as strings.
     * @param nodeAddressValue Key argument of child.
     */
    public MmeSmsTrustedOperator getMmeSmsTrustedOperator(String nodeAddressValue)
            throws JNCException {
        String path = "mme-sms-trusted-operator[nodeAddress='" + nodeAddressValue + "']";
        return (MmeSmsTrustedOperator)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-sms-trusted-operator".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeSmsTrustedOperatorIterator() {
        return new ElementChildrenIterator(children, "mme-sms-trusted-operator");
    }

    /**
     * Adds list entry "mmeSmsTrustedOperator", using an existing object.
     * @param mmeSmsTrustedOperator The object to add.
     * @return The added child.
     */
    public MmeSmsTrustedOperator addMmeSmsTrustedOperator(MmeSmsTrustedOperator mmeSmsTrustedOperator)
            throws JNCException {
        insertChild(mmeSmsTrustedOperator, childrenNames());
        return mmeSmsTrustedOperator;
    }

    /**
     * Adds list entry "mmeSmsTrustedOperator", with specified keys.
     * @param nodeAddressValue Key argument of child.
     * @return The added child.
     */
    public MmeSmsTrustedOperator addMmeSmsTrustedOperator(YangString nodeAddressValue)
            throws JNCException {
        MmeSmsTrustedOperator mmeSmsTrustedOperator = new MmeSmsTrustedOperator(nodeAddressValue);
        return addMmeSmsTrustedOperator(mmeSmsTrustedOperator);
    }

    /**
     * Adds list entry "mmeSmsTrustedOperator", with specified keys.
     * The keys are specified as strings.
     * @param nodeAddressValue Key argument of child.
     * @return The added child.
     */
    public MmeSmsTrustedOperator addMmeSmsTrustedOperator(String nodeAddressValue)
            throws JNCException {
        MmeSmsTrustedOperator mmeSmsTrustedOperator = new MmeSmsTrustedOperator(nodeAddressValue);
        return addMmeSmsTrustedOperator(mmeSmsTrustedOperator);
    }

    /**
     * Adds list entry "mmeSmsTrustedOperator".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSmsTrustedOperator addMmeSmsTrustedOperator() throws JNCException {
        MmeSmsTrustedOperator mmeSmsTrustedOperator = new MmeSmsTrustedOperator();
        insertChild(mmeSmsTrustedOperator, childrenNames());
        return mmeSmsTrustedOperator;
    }

    /**
     * Deletes list entry "mmeSmsTrustedOperator", with specified keys.
     * @param nodeAddressValue Key argument of child.
     */
    public void deleteMmeSmsTrustedOperator(YangString nodeAddressValue)
            throws JNCException {
        String path = "mme-sms-trusted-operator[nodeAddress='" + nodeAddressValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeSmsTrustedOperator", with specified keys.
     * The keys are specified as strings.
     * @param nodeAddressValue Key argument of child.
     */
    public void deleteMmeSmsTrustedOperator(String nodeAddressValue)
            throws JNCException {
        String path = "mme-sms-trusted-operator[nodeAddress='" + nodeAddressValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof MmeGdIf) mmeGdIf = (MmeGdIf)child;
    }

}
