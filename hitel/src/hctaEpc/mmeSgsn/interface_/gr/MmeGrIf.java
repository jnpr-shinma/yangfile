/* 
 * @(#)MmeGrIf.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.gr;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/gr/mme-gr-if"
 * <p>
 * See line 1769 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeGrIf extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeGrIf object.
     */
    public MmeGrIf() {
        super(Epc.NAMESPACE, "mme-gr-if");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeGrIf clone() {
        return (MmeGrIf)cloneContent(new MmeGrIf());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeGrIf cloneShallow() {
        return (MmeGrIf)cloneShallowContent(new MmeGrIf());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "sai-message-version",
            "odb-sms",
            "send-rej-for-roaming-restrict",
            "vplmn-address-allowed-override",
            "automatic-device-detection",
            "num-of-imsi-digits",
            "request-timer",
            "ugl-retry",
            "sai-retry",
            "afr-retry",
            "mc-fallback-timer",
            "sai-vector-limit",
            "odb-ps",
        };
    }

    /* Access methods for optional leaf child: "sai-message-version". */

    /**
     * Gets the value for child leaf "sai-message-version".
     * @return The value of the leaf.
     */
    public YangEnumeration getSaiMessageVersionValue() throws JNCException {
        YangEnumeration saiMessageVersion = (YangEnumeration)getValue("sai-message-version");
        if (saiMessageVersion == null) {
            saiMessageVersion = new YangEnumeration("v3", new String[] {  // default
                "v2",
                "v3",
            });
        }
        return saiMessageVersion;
    }

    /**
     * Sets the value for child leaf "sai-message-version",
     * using instance of generated typedef class.
     * @param saiMessageVersionValue The value to set.
     * @param saiMessageVersionValue used during instantiation.
     */
    public void setSaiMessageVersionValue(YangEnumeration saiMessageVersionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sai-message-version",
            saiMessageVersionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sai-message-version",
     * using a String value.
     * @param saiMessageVersionValue used during instantiation.
     */
    public void setSaiMessageVersionValue(String saiMessageVersionValue)
            throws JNCException {
        setSaiMessageVersionValue(new YangEnumeration(saiMessageVersionValue, new String[] {
             "v2",
             "v3",
        }));
    }

    /**
     * Unsets the value for child leaf "sai-message-version".
     */
    public void unsetSaiMessageVersionValue() throws JNCException {
        delete("sai-message-version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sai-message-version" leaf will not have a value.
     */
    public void addSaiMessageVersion() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sai-message-version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sai-message-version" with operation "replace".
     */
    public void markSaiMessageVersionReplace() throws JNCException {
        markLeafReplace("saiMessageVersion");
    }

    /**
     * Marks the leaf "sai-message-version" with operation "merge".
     */
    public void markSaiMessageVersionMerge() throws JNCException {
        markLeafMerge("saiMessageVersion");
    }

    /**
     * Marks the leaf "sai-message-version" with operation "create".
     */
    public void markSaiMessageVersionCreate() throws JNCException {
        markLeafCreate("saiMessageVersion");
    }

    /**
     * Marks the leaf "sai-message-version" with operation "delete".
     */
    public void markSaiMessageVersionDelete() throws JNCException {
        markLeafDelete("saiMessageVersion");
    }

    /* Access methods for optional leaf child: "odb-sms". */

    /**
     * Gets the value for child leaf "odb-sms".
     * @return The value of the leaf.
     */
    public YangEnumeration getOdbSmsValue() throws JNCException {
        YangEnumeration odbSms = (YangEnumeration)getValue("odb-sms");
        if (odbSms == null) {
            odbSms = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return odbSms;
    }

    /**
     * Sets the value for child leaf "odb-sms",
     * using instance of generated typedef class.
     * @param odbSmsValue The value to set.
     * @param odbSmsValue used during instantiation.
     */
    public void setOdbSmsValue(YangEnumeration odbSmsValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "odb-sms",
            odbSmsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "odb-sms",
     * using a String value.
     * @param odbSmsValue used during instantiation.
     */
    public void setOdbSmsValue(String odbSmsValue) throws JNCException {
        setOdbSmsValue(new YangEnumeration(odbSmsValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "odb-sms".
     */
    public void unsetOdbSmsValue() throws JNCException {
        delete("odb-sms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "odb-sms" leaf will not have a value.
     */
    public void addOdbSms() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "odb-sms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "odb-sms" with operation "replace".
     */
    public void markOdbSmsReplace() throws JNCException {
        markLeafReplace("odbSms");
    }

    /**
     * Marks the leaf "odb-sms" with operation "merge".
     */
    public void markOdbSmsMerge() throws JNCException {
        markLeafMerge("odbSms");
    }

    /**
     * Marks the leaf "odb-sms" with operation "create".
     */
    public void markOdbSmsCreate() throws JNCException {
        markLeafCreate("odbSms");
    }

    /**
     * Marks the leaf "odb-sms" with operation "delete".
     */
    public void markOdbSmsDelete() throws JNCException {
        markLeafDelete("odbSms");
    }

    /* Access methods for optional leaf child: "send-rej-for-roaming-restrict". */

    /**
     * Gets the value for child leaf "send-rej-for-roaming-restrict".
     * @return The value of the leaf.
     */
    public YangEnumeration getSendRejForRoamingRestrictValue()
            throws JNCException {
        YangEnumeration sendRejForRoamingRestrict = (YangEnumeration)getValue("send-rej-for-roaming-restrict");
        if (sendRejForRoamingRestrict == null) {
            sendRejForRoamingRestrict = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return sendRejForRoamingRestrict;
    }

    /**
     * Sets the value for child leaf "send-rej-for-roaming-restrict",
     * using instance of generated typedef class.
     * @param sendRejForRoamingRestrictValue The value to set.
     * @param sendRejForRoamingRestrictValue used during instantiation.
     */
    public void setSendRejForRoamingRestrictValue(YangEnumeration sendRejForRoamingRestrictValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "send-rej-for-roaming-restrict",
            sendRejForRoamingRestrictValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "send-rej-for-roaming-restrict",
     * using a String value.
     * @param sendRejForRoamingRestrictValue used during instantiation.
     */
    public void setSendRejForRoamingRestrictValue(String sendRejForRoamingRestrictValue)
            throws JNCException {
        setSendRejForRoamingRestrictValue(new YangEnumeration(sendRejForRoamingRestrictValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "send-rej-for-roaming-restrict".
     */
    public void unsetSendRejForRoamingRestrictValue() throws JNCException {
        delete("send-rej-for-roaming-restrict");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "send-rej-for-roaming-restrict" leaf will not have a value.
     */
    public void addSendRejForRoamingRestrict() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "send-rej-for-roaming-restrict",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "send-rej-for-roaming-restrict" with operation "replace".
     */
    public void markSendRejForRoamingRestrictReplace() throws JNCException {
        markLeafReplace("sendRejForRoamingRestrict");
    }

    /**
     * Marks the leaf "send-rej-for-roaming-restrict" with operation "merge".
     */
    public void markSendRejForRoamingRestrictMerge() throws JNCException {
        markLeafMerge("sendRejForRoamingRestrict");
    }

    /**
     * Marks the leaf "send-rej-for-roaming-restrict" with operation "create".
     */
    public void markSendRejForRoamingRestrictCreate() throws JNCException {
        markLeafCreate("sendRejForRoamingRestrict");
    }

    /**
     * Marks the leaf "send-rej-for-roaming-restrict" with operation "delete".
     */
    public void markSendRejForRoamingRestrictDelete() throws JNCException {
        markLeafDelete("sendRejForRoamingRestrict");
    }

    /* Access methods for optional leaf child: "vplmn-address-allowed-override". */

    /**
     * Gets the value for child leaf "vplmn-address-allowed-override".
     * @return The value of the leaf.
     */
    public YangEnumeration getVplmnAddressAllowedOverrideValue()
            throws JNCException {
        YangEnumeration vplmnAddressAllowedOverride = (YangEnumeration)getValue("vplmn-address-allowed-override");
        if (vplmnAddressAllowedOverride == null) {
            vplmnAddressAllowedOverride = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return vplmnAddressAllowedOverride;
    }

    /**
     * Sets the value for child leaf "vplmn-address-allowed-override",
     * using instance of generated typedef class.
     * @param vplmnAddressAllowedOverrideValue The value to set.
     * @param vplmnAddressAllowedOverrideValue used during instantiation.
     */
    public void setVplmnAddressAllowedOverrideValue(YangEnumeration vplmnAddressAllowedOverrideValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vplmn-address-allowed-override",
            vplmnAddressAllowedOverrideValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vplmn-address-allowed-override",
     * using a String value.
     * @param vplmnAddressAllowedOverrideValue used during instantiation.
     */
    public void setVplmnAddressAllowedOverrideValue(String vplmnAddressAllowedOverrideValue)
            throws JNCException {
        setVplmnAddressAllowedOverrideValue(new YangEnumeration(vplmnAddressAllowedOverrideValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "vplmn-address-allowed-override".
     */
    public void unsetVplmnAddressAllowedOverrideValue() throws JNCException {
        delete("vplmn-address-allowed-override");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vplmn-address-allowed-override" leaf will not have a value.
     */
    public void addVplmnAddressAllowedOverride() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vplmn-address-allowed-override",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vplmn-address-allowed-override" with operation "replace".
     */
    public void markVplmnAddressAllowedOverrideReplace() throws JNCException {
        markLeafReplace("vplmnAddressAllowedOverride");
    }

    /**
     * Marks the leaf "vplmn-address-allowed-override" with operation "merge".
     */
    public void markVplmnAddressAllowedOverrideMerge() throws JNCException {
        markLeafMerge("vplmnAddressAllowedOverride");
    }

    /**
     * Marks the leaf "vplmn-address-allowed-override" with operation "create".
     */
    public void markVplmnAddressAllowedOverrideCreate() throws JNCException {
        markLeafCreate("vplmnAddressAllowedOverride");
    }

    /**
     * Marks the leaf "vplmn-address-allowed-override" with operation "delete".
     */
    public void markVplmnAddressAllowedOverrideDelete() throws JNCException {
        markLeafDelete("vplmnAddressAllowedOverride");
    }

    /* Access methods for optional leaf child: "automatic-device-detection". */

    /**
     * Gets the value for child leaf "automatic-device-detection".
     * @return The value of the leaf.
     */
    public YangEnumeration getAutomaticDeviceDetectionValue()
            throws JNCException {
        YangEnumeration automaticDeviceDetection = (YangEnumeration)getValue("automatic-device-detection");
        if (automaticDeviceDetection == null) {
            automaticDeviceDetection = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return automaticDeviceDetection;
    }

    /**
     * Sets the value for child leaf "automatic-device-detection",
     * using instance of generated typedef class.
     * @param automaticDeviceDetectionValue The value to set.
     * @param automaticDeviceDetectionValue used during instantiation.
     */
    public void setAutomaticDeviceDetectionValue(YangEnumeration automaticDeviceDetectionValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "automatic-device-detection",
            automaticDeviceDetectionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "automatic-device-detection",
     * using a String value.
     * @param automaticDeviceDetectionValue used during instantiation.
     */
    public void setAutomaticDeviceDetectionValue(String automaticDeviceDetectionValue)
            throws JNCException {
        setAutomaticDeviceDetectionValue(new YangEnumeration(automaticDeviceDetectionValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "automatic-device-detection".
     */
    public void unsetAutomaticDeviceDetectionValue() throws JNCException {
        delete("automatic-device-detection");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "automatic-device-detection" leaf will not have a value.
     */
    public void addAutomaticDeviceDetection() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "automatic-device-detection",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "automatic-device-detection" with operation "replace".
     */
    public void markAutomaticDeviceDetectionReplace() throws JNCException {
        markLeafReplace("automaticDeviceDetection");
    }

    /**
     * Marks the leaf "automatic-device-detection" with operation "merge".
     */
    public void markAutomaticDeviceDetectionMerge() throws JNCException {
        markLeafMerge("automaticDeviceDetection");
    }

    /**
     * Marks the leaf "automatic-device-detection" with operation "create".
     */
    public void markAutomaticDeviceDetectionCreate() throws JNCException {
        markLeafCreate("automaticDeviceDetection");
    }

    /**
     * Marks the leaf "automatic-device-detection" with operation "delete".
     */
    public void markAutomaticDeviceDetectionDelete() throws JNCException {
        markLeafDelete("automaticDeviceDetection");
    }

    /* Access methods for optional leaf child: "num-of-imsi-digits". */

    /**
     * Gets the value for child leaf "num-of-imsi-digits".
     * @return The value of the leaf.
     */
    public YangUInt8 getNumOfImsiDigitsValue() throws JNCException {
        YangUInt8 numOfImsiDigits = (YangUInt8)getValue("num-of-imsi-digits");
        if (numOfImsiDigits == null) {
            numOfImsiDigits = new YangUInt8("6");  // default
        }
        return numOfImsiDigits;
    }

    /**
     * Sets the value for child leaf "num-of-imsi-digits",
     * using instance of generated typedef class.
     * @param numOfImsiDigitsValue The value to set.
     * @param numOfImsiDigitsValue used during instantiation.
     */
    public void setNumOfImsiDigitsValue(YangUInt8 numOfImsiDigitsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "num-of-imsi-digits",
            numOfImsiDigitsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "num-of-imsi-digits",
     * using Java primitive values.
     * @param numOfImsiDigitsValue used during instantiation.
     */
    public void setNumOfImsiDigitsValue(short numOfImsiDigitsValue)
            throws JNCException {
        setNumOfImsiDigitsValue(new YangUInt8(numOfImsiDigitsValue));
    }

    /**
     * Sets the value for child leaf "num-of-imsi-digits",
     * using a String value.
     * @param numOfImsiDigitsValue used during instantiation.
     */
    public void setNumOfImsiDigitsValue(String numOfImsiDigitsValue)
            throws JNCException {
        setNumOfImsiDigitsValue(new YangUInt8(numOfImsiDigitsValue));
    }

    /**
     * Unsets the value for child leaf "num-of-imsi-digits".
     */
    public void unsetNumOfImsiDigitsValue() throws JNCException {
        delete("num-of-imsi-digits");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "num-of-imsi-digits" leaf will not have a value.
     */
    public void addNumOfImsiDigits() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "num-of-imsi-digits",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "num-of-imsi-digits" with operation "replace".
     */
    public void markNumOfImsiDigitsReplace() throws JNCException {
        markLeafReplace("numOfImsiDigits");
    }

    /**
     * Marks the leaf "num-of-imsi-digits" with operation "merge".
     */
    public void markNumOfImsiDigitsMerge() throws JNCException {
        markLeafMerge("numOfImsiDigits");
    }

    /**
     * Marks the leaf "num-of-imsi-digits" with operation "create".
     */
    public void markNumOfImsiDigitsCreate() throws JNCException {
        markLeafCreate("numOfImsiDigits");
    }

    /**
     * Marks the leaf "num-of-imsi-digits" with operation "delete".
     */
    public void markNumOfImsiDigitsDelete() throws JNCException {
        markLeafDelete("numOfImsiDigits");
    }

    /* Access methods for optional leaf child: "request-timer". */

    /**
     * Gets the value for child leaf "request-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getRequestTimerValue() throws JNCException {
        YangUInt8 requestTimer = (YangUInt8)getValue("request-timer");
        if (requestTimer == null) {
            requestTimer = new YangUInt8("13");  // default
        }
        return requestTimer;
    }

    /**
     * Sets the value for child leaf "request-timer",
     * using instance of generated typedef class.
     * @param requestTimerValue The value to set.
     * @param requestTimerValue used during instantiation.
     */
    public void setRequestTimerValue(YangUInt8 requestTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "request-timer",
            requestTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "request-timer",
     * using Java primitive values.
     * @param requestTimerValue used during instantiation.
     */
    public void setRequestTimerValue(short requestTimerValue)
            throws JNCException {
        setRequestTimerValue(new YangUInt8(requestTimerValue));
    }

    /**
     * Sets the value for child leaf "request-timer",
     * using a String value.
     * @param requestTimerValue used during instantiation.
     */
    public void setRequestTimerValue(String requestTimerValue)
            throws JNCException {
        setRequestTimerValue(new YangUInt8(requestTimerValue));
    }

    /**
     * Unsets the value for child leaf "request-timer".
     */
    public void unsetRequestTimerValue() throws JNCException {
        delete("request-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "request-timer" leaf will not have a value.
     */
    public void addRequestTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "request-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "request-timer" with operation "replace".
     */
    public void markRequestTimerReplace() throws JNCException {
        markLeafReplace("requestTimer");
    }

    /**
     * Marks the leaf "request-timer" with operation "merge".
     */
    public void markRequestTimerMerge() throws JNCException {
        markLeafMerge("requestTimer");
    }

    /**
     * Marks the leaf "request-timer" with operation "create".
     */
    public void markRequestTimerCreate() throws JNCException {
        markLeafCreate("requestTimer");
    }

    /**
     * Marks the leaf "request-timer" with operation "delete".
     */
    public void markRequestTimerDelete() throws JNCException {
        markLeafDelete("requestTimer");
    }

    /* Access methods for optional leaf child: "ugl-retry". */

    /**
     * Gets the value for child leaf "ugl-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getUglRetryValue() throws JNCException {
        YangUInt8 uglRetry = (YangUInt8)getValue("ugl-retry");
        if (uglRetry == null) {
            uglRetry = new YangUInt8("0");  // default
        }
        return uglRetry;
    }

    /**
     * Sets the value for child leaf "ugl-retry",
     * using instance of generated typedef class.
     * @param uglRetryValue The value to set.
     * @param uglRetryValue used during instantiation.
     */
    public void setUglRetryValue(YangUInt8 uglRetryValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ugl-retry",
            uglRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ugl-retry",
     * using Java primitive values.
     * @param uglRetryValue used during instantiation.
     */
    public void setUglRetryValue(short uglRetryValue) throws JNCException {
        setUglRetryValue(new YangUInt8(uglRetryValue));
    }

    /**
     * Sets the value for child leaf "ugl-retry",
     * using a String value.
     * @param uglRetryValue used during instantiation.
     */
    public void setUglRetryValue(String uglRetryValue) throws JNCException {
        setUglRetryValue(new YangUInt8(uglRetryValue));
    }

    /**
     * Unsets the value for child leaf "ugl-retry".
     */
    public void unsetUglRetryValue() throws JNCException {
        delete("ugl-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ugl-retry" leaf will not have a value.
     */
    public void addUglRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ugl-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ugl-retry" with operation "replace".
     */
    public void markUglRetryReplace() throws JNCException {
        markLeafReplace("uglRetry");
    }

    /**
     * Marks the leaf "ugl-retry" with operation "merge".
     */
    public void markUglRetryMerge() throws JNCException {
        markLeafMerge("uglRetry");
    }

    /**
     * Marks the leaf "ugl-retry" with operation "create".
     */
    public void markUglRetryCreate() throws JNCException {
        markLeafCreate("uglRetry");
    }

    /**
     * Marks the leaf "ugl-retry" with operation "delete".
     */
    public void markUglRetryDelete() throws JNCException {
        markLeafDelete("uglRetry");
    }

    /* Access methods for optional leaf child: "sai-retry". */

    /**
     * Gets the value for child leaf "sai-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getSaiRetryValue() throws JNCException {
        YangUInt8 saiRetry = (YangUInt8)getValue("sai-retry");
        if (saiRetry == null) {
            saiRetry = new YangUInt8("0");  // default
        }
        return saiRetry;
    }

    /**
     * Sets the value for child leaf "sai-retry",
     * using instance of generated typedef class.
     * @param saiRetryValue The value to set.
     * @param saiRetryValue used during instantiation.
     */
    public void setSaiRetryValue(YangUInt8 saiRetryValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sai-retry",
            saiRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sai-retry",
     * using Java primitive values.
     * @param saiRetryValue used during instantiation.
     */
    public void setSaiRetryValue(short saiRetryValue) throws JNCException {
        setSaiRetryValue(new YangUInt8(saiRetryValue));
    }

    /**
     * Sets the value for child leaf "sai-retry",
     * using a String value.
     * @param saiRetryValue used during instantiation.
     */
    public void setSaiRetryValue(String saiRetryValue) throws JNCException {
        setSaiRetryValue(new YangUInt8(saiRetryValue));
    }

    /**
     * Unsets the value for child leaf "sai-retry".
     */
    public void unsetSaiRetryValue() throws JNCException {
        delete("sai-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sai-retry" leaf will not have a value.
     */
    public void addSaiRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sai-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sai-retry" with operation "replace".
     */
    public void markSaiRetryReplace() throws JNCException {
        markLeafReplace("saiRetry");
    }

    /**
     * Marks the leaf "sai-retry" with operation "merge".
     */
    public void markSaiRetryMerge() throws JNCException {
        markLeafMerge("saiRetry");
    }

    /**
     * Marks the leaf "sai-retry" with operation "create".
     */
    public void markSaiRetryCreate() throws JNCException {
        markLeafCreate("saiRetry");
    }

    /**
     * Marks the leaf "sai-retry" with operation "delete".
     */
    public void markSaiRetryDelete() throws JNCException {
        markLeafDelete("saiRetry");
    }

    /* Access methods for optional leaf child: "afr-retry". */

    /**
     * Gets the value for child leaf "afr-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getAfrRetryValue() throws JNCException {
        YangUInt8 afrRetry = (YangUInt8)getValue("afr-retry");
        if (afrRetry == null) {
            afrRetry = new YangUInt8("1");  // default
        }
        return afrRetry;
    }

    /**
     * Sets the value for child leaf "afr-retry",
     * using instance of generated typedef class.
     * @param afrRetryValue The value to set.
     * @param afrRetryValue used during instantiation.
     */
    public void setAfrRetryValue(YangUInt8 afrRetryValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "afr-retry",
            afrRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "afr-retry",
     * using Java primitive values.
     * @param afrRetryValue used during instantiation.
     */
    public void setAfrRetryValue(short afrRetryValue) throws JNCException {
        setAfrRetryValue(new YangUInt8(afrRetryValue));
    }

    /**
     * Sets the value for child leaf "afr-retry",
     * using a String value.
     * @param afrRetryValue used during instantiation.
     */
    public void setAfrRetryValue(String afrRetryValue) throws JNCException {
        setAfrRetryValue(new YangUInt8(afrRetryValue));
    }

    /**
     * Unsets the value for child leaf "afr-retry".
     */
    public void unsetAfrRetryValue() throws JNCException {
        delete("afr-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "afr-retry" leaf will not have a value.
     */
    public void addAfrRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "afr-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "afr-retry" with operation "replace".
     */
    public void markAfrRetryReplace() throws JNCException {
        markLeafReplace("afrRetry");
    }

    /**
     * Marks the leaf "afr-retry" with operation "merge".
     */
    public void markAfrRetryMerge() throws JNCException {
        markLeafMerge("afrRetry");
    }

    /**
     * Marks the leaf "afr-retry" with operation "create".
     */
    public void markAfrRetryCreate() throws JNCException {
        markLeafCreate("afrRetry");
    }

    /**
     * Marks the leaf "afr-retry" with operation "delete".
     */
    public void markAfrRetryDelete() throws JNCException {
        markLeafDelete("afrRetry");
    }

    /* Access methods for optional leaf child: "mc-fallback-timer". */

    /**
     * Gets the value for child leaf "mc-fallback-timer".
     * @return The value of the leaf.
     */
    public YangString getMcFallbackTimerValue() throws JNCException {
        YangString mcFallbackTimer = (YangString)getValue("mc-fallback-timer");
        if (mcFallbackTimer == null) {
            mcFallbackTimer = new YangString("21");  // default
        }
        return mcFallbackTimer;
    }

    /**
     * Sets the value for child leaf "mc-fallback-timer",
     * using instance of generated typedef class.
     * @param mcFallbackTimerValue The value to set.
     * @param mcFallbackTimerValue used during instantiation.
     */
    public void setMcFallbackTimerValue(YangString mcFallbackTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mc-fallback-timer",
            mcFallbackTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mc-fallback-timer",
     * using a String value.
     * @param mcFallbackTimerValue used during instantiation.
     */
    public void setMcFallbackTimerValue(String mcFallbackTimerValue)
            throws JNCException {
        setMcFallbackTimerValue(new YangString(mcFallbackTimerValue));
    }

    /**
     * Unsets the value for child leaf "mc-fallback-timer".
     */
    public void unsetMcFallbackTimerValue() throws JNCException {
        delete("mc-fallback-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mc-fallback-timer" leaf will not have a value.
     */
    public void addMcFallbackTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "mc-fallback-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mc-fallback-timer" with operation "replace".
     */
    public void markMcFallbackTimerReplace() throws JNCException {
        markLeafReplace("mcFallbackTimer");
    }

    /**
     * Marks the leaf "mc-fallback-timer" with operation "merge".
     */
    public void markMcFallbackTimerMerge() throws JNCException {
        markLeafMerge("mcFallbackTimer");
    }

    /**
     * Marks the leaf "mc-fallback-timer" with operation "create".
     */
    public void markMcFallbackTimerCreate() throws JNCException {
        markLeafCreate("mcFallbackTimer");
    }

    /**
     * Marks the leaf "mc-fallback-timer" with operation "delete".
     */
    public void markMcFallbackTimerDelete() throws JNCException {
        markLeafDelete("mcFallbackTimer");
    }

    /* Access methods for optional leaf child: "sai-vector-limit". */

    /**
     * Gets the value for child leaf "sai-vector-limit".
     * @return The value of the leaf.
     */
    public YangUInt8 getSaiVectorLimitValue() throws JNCException {
        YangUInt8 saiVectorLimit = (YangUInt8)getValue("sai-vector-limit");
        if (saiVectorLimit == null) {
            saiVectorLimit = new YangUInt8("4");  // default
        }
        return saiVectorLimit;
    }

    /**
     * Sets the value for child leaf "sai-vector-limit",
     * using instance of generated typedef class.
     * @param saiVectorLimitValue The value to set.
     * @param saiVectorLimitValue used during instantiation.
     */
    public void setSaiVectorLimitValue(YangUInt8 saiVectorLimitValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sai-vector-limit",
            saiVectorLimitValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sai-vector-limit",
     * using Java primitive values.
     * @param saiVectorLimitValue used during instantiation.
     */
    public void setSaiVectorLimitValue(short saiVectorLimitValue)
            throws JNCException {
        setSaiVectorLimitValue(new YangUInt8(saiVectorLimitValue));
    }

    /**
     * Sets the value for child leaf "sai-vector-limit",
     * using a String value.
     * @param saiVectorLimitValue used during instantiation.
     */
    public void setSaiVectorLimitValue(String saiVectorLimitValue)
            throws JNCException {
        setSaiVectorLimitValue(new YangUInt8(saiVectorLimitValue));
    }

    /**
     * Unsets the value for child leaf "sai-vector-limit".
     */
    public void unsetSaiVectorLimitValue() throws JNCException {
        delete("sai-vector-limit");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sai-vector-limit" leaf will not have a value.
     */
    public void addSaiVectorLimit() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "sai-vector-limit",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sai-vector-limit" with operation "replace".
     */
    public void markSaiVectorLimitReplace() throws JNCException {
        markLeafReplace("saiVectorLimit");
    }

    /**
     * Marks the leaf "sai-vector-limit" with operation "merge".
     */
    public void markSaiVectorLimitMerge() throws JNCException {
        markLeafMerge("saiVectorLimit");
    }

    /**
     * Marks the leaf "sai-vector-limit" with operation "create".
     */
    public void markSaiVectorLimitCreate() throws JNCException {
        markLeafCreate("saiVectorLimit");
    }

    /**
     * Marks the leaf "sai-vector-limit" with operation "delete".
     */
    public void markSaiVectorLimitDelete() throws JNCException {
        markLeafDelete("saiVectorLimit");
    }

    /* Access methods for optional leaf child: "odb-ps". */

    /**
     * Gets the value for child leaf "odb-ps".
     * @return The value of the leaf.
     */
    public YangEnumeration getOdbPsValue() throws JNCException {
        YangEnumeration odbPs = (YangEnumeration)getValue("odb-ps");
        if (odbPs == null) {
            odbPs = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return odbPs;
    }

    /**
     * Sets the value for child leaf "odb-ps",
     * using instance of generated typedef class.
     * @param odbPsValue The value to set.
     * @param odbPsValue used during instantiation.
     */
    public void setOdbPsValue(YangEnumeration odbPsValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "odb-ps",
            odbPsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "odb-ps",
     * using a String value.
     * @param odbPsValue used during instantiation.
     */
    public void setOdbPsValue(String odbPsValue) throws JNCException {
        setOdbPsValue(new YangEnumeration(odbPsValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "odb-ps".
     */
    public void unsetOdbPsValue() throws JNCException {
        delete("odb-ps");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "odb-ps" leaf will not have a value.
     */
    public void addOdbPs() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "odb-ps",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "odb-ps" with operation "replace".
     */
    public void markOdbPsReplace() throws JNCException {
        markLeafReplace("odbPs");
    }

    /**
     * Marks the leaf "odb-ps" with operation "merge".
     */
    public void markOdbPsMerge() throws JNCException {
        markLeafMerge("odbPs");
    }

    /**
     * Marks the leaf "odb-ps" with operation "create".
     */
    public void markOdbPsCreate() throws JNCException {
        markLeafCreate("odbPs");
    }

    /**
     * Marks the leaf "odb-ps" with operation "delete".
     */
    public void markOdbPsDelete() throws JNCException {
        markLeafDelete("odbPs");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
