/* 
 * @(#)MmeIuPeer.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.iu;
import .ietfInetTypes.Ipv4Address;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/iu/mme-iu-peer"
 * <p>
 * See line 83 in
 * sgsnM3uaAspConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeIuPeer extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeIuPeer object.
     */
    public MmeIuPeer() {
        super(Epc.NAMESPACE, "mme-iu-peer");
    }

    /**
     * Constructor for an initialized MmeIuPeer object,
     * 
     * @param iuPeerNameValue Key argument of child.
     */
    public MmeIuPeer(YangString iuPeerNameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-iu-peer");
        Leaf iuPeerName = new Leaf(Epc.NAMESPACE, "iu-peer-name");
        iuPeerName.setValue(iuPeerNameValue);
        insertChild(iuPeerName, childrenNames());
    }

    /**
     * Constructor for an initialized MmeIuPeer object,
     * with String keys.
     * @param iuPeerNameValue Key argument of child.
     */
    public MmeIuPeer(String iuPeerNameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-iu-peer");
        Leaf iuPeerName = new Leaf(Epc.NAMESPACE, "iu-peer-name");
        iuPeerName.setValue(new YangString(iuPeerNameValue));
        insertChild(iuPeerName, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeIuPeer clone() {
        MmeIuPeer copy;
        try {
            copy = new MmeIuPeer(getIuPeerNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeIuPeer)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeIuPeer cloneShallow() {
        MmeIuPeer copy;
        try {
            copy = new MmeIuPeer(getIuPeerNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeIuPeer)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "iu-peer-name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "iu-peer-name",
            "port-str",
            "ip-address1",
            "ip-address2",
            "peer-type",
            "compat-mode",
            "association-creation",
            "network-appearance",
        };
    }

    /* Access methods for leaf child: "iu-peer-name". */

    /**
     * Gets the value for child leaf "iu-peer-name".
     * @return The value of the leaf.
     */
    public YangString getIuPeerNameValue() throws JNCException {
        return (YangString)getValue("iu-peer-name");
    }

    /**
     * Sets the value for child leaf "iu-peer-name",
     * using instance of generated typedef class.
     * @param iuPeerNameValue The value to set.
     * @param iuPeerNameValue used during instantiation.
     */
    public void setIuPeerNameValue(YangString iuPeerNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iu-peer-name",
            iuPeerNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "iu-peer-name",
     * using a String value.
     * @param iuPeerNameValue used during instantiation.
     */
    public void setIuPeerNameValue(String iuPeerNameValue) throws JNCException {
        setIuPeerNameValue(new YangString(iuPeerNameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "iu-peer-name" leaf will not have a value.
     */
    public void addIuPeerName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iu-peer-name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "port-str". */

    /**
     * Gets the value for child leaf "port-str".
     * @return The value of the leaf.
     */
    public YangString getPortStrValue() throws JNCException {
        YangString portStr = (YangString)getValue("port-str");
        if (portStr == null) {
            portStr = new YangString("2905");  // default
        }
        return portStr;
    }

    /**
     * Sets the value for child leaf "port-str",
     * using instance of generated typedef class.
     * @param portStrValue The value to set.
     * @param portStrValue used during instantiation.
     */
    public void setPortStrValue(YangString portStrValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port-str",
            portStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "port-str",
     * using a String value.
     * @param portStrValue used during instantiation.
     */
    public void setPortStrValue(String portStrValue) throws JNCException {
        setPortStrValue(new YangString(portStrValue));
    }

    /**
     * Unsets the value for child leaf "port-str".
     */
    public void unsetPortStrValue() throws JNCException {
        delete("port-str");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "port-str" leaf will not have a value.
     */
    public void addPortStr() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "port-str",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "port-str" with operation "replace".
     */
    public void markPortStrReplace() throws JNCException {
        markLeafReplace("portStr");
    }

    /**
     * Marks the leaf "port-str" with operation "merge".
     */
    public void markPortStrMerge() throws JNCException {
        markLeafMerge("portStr");
    }

    /**
     * Marks the leaf "port-str" with operation "create".
     */
    public void markPortStrCreate() throws JNCException {
        markLeafCreate("portStr");
    }

    /**
     * Marks the leaf "port-str" with operation "delete".
     */
    public void markPortStrDelete() throws JNCException {
        markLeafDelete("portStr");
    }

    /* Access methods for optional leaf child: "ip-address1". */

    /**
     * Gets the value for child leaf "ip-address1".
     * @return The value of the leaf.
     */
    public Ipv4Address getIpAddress1Value() throws JNCException {
        return (Ipv4Address)getValue("ip-address1");
    }

    /**
     * Sets the value for child leaf "ip-address1",
     * using a JNC type value.
     * @param ipAddress1Value The value to set.
     * @param ipAddress1Value used during instantiation.
     */
    public void setIpAddress1Value(Ipv4Address ipAddress1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address1",
            ipAddress1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address1",
     * using a String value.
     * @param ipAddress1Value used during instantiation.
     */
    public void setIpAddress1Value(String ipAddress1Value) throws JNCException {
        setIpAddress1Value(new Ipv4Address(ipAddress1Value));
    }

    /**
     * Unsets the value for child leaf "ip-address1".
     */
    public void unsetIpAddress1Value() throws JNCException {
        delete("ip-address1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address1" leaf will not have a value.
     */
    public void addIpAddress1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address1" with operation "replace".
     */
    public void markIpAddress1Replace() throws JNCException {
        markLeafReplace("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "merge".
     */
    public void markIpAddress1Merge() throws JNCException {
        markLeafMerge("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "create".
     */
    public void markIpAddress1Create() throws JNCException {
        markLeafCreate("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "delete".
     */
    public void markIpAddress1Delete() throws JNCException {
        markLeafDelete("ipAddress1");
    }

    /* Access methods for optional leaf child: "ip-address2". */

    /**
     * Gets the value for child leaf "ip-address2".
     * @return The value of the leaf.
     */
    public Ipv4Address getIpAddress2Value() throws JNCException {
        Ipv4Address ipAddress2 = (Ipv4Address)getValue("ip-address2");
        if (ipAddress2 == null) {
            ipAddress2 = new Ipv4Address("0.0.0.0");  // default
        }
        return ipAddress2;
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a JNC type value.
     * @param ipAddress2Value The value to set.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(Ipv4Address ipAddress2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            ipAddress2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a String value.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(String ipAddress2Value) throws JNCException {
        setIpAddress2Value(new Ipv4Address(ipAddress2Value));
    }

    /**
     * Unsets the value for child leaf "ip-address2".
     */
    public void unsetIpAddress2Value() throws JNCException {
        delete("ip-address2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address2" leaf will not have a value.
     */
    public void addIpAddress2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address2" with operation "replace".
     */
    public void markIpAddress2Replace() throws JNCException {
        markLeafReplace("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "merge".
     */
    public void markIpAddress2Merge() throws JNCException {
        markLeafMerge("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "create".
     */
    public void markIpAddress2Create() throws JNCException {
        markLeafCreate("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "delete".
     */
    public void markIpAddress2Delete() throws JNCException {
        markLeafDelete("ipAddress2");
    }

    /* Access methods for optional leaf child: "peer-type". */

    /**
     * Gets the value for child leaf "peer-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getPeerTypeValue() throws JNCException {
        return (YangEnumeration)getValue("peer-type");
    }

    /**
     * Sets the value for child leaf "peer-type",
     * using instance of generated typedef class.
     * @param peerTypeValue The value to set.
     * @param peerTypeValue used during instantiation.
     */
    public void setPeerTypeValue(YangEnumeration peerTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "peer-type",
            peerTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "peer-type",
     * using a String value.
     * @param peerTypeValue used during instantiation.
     */
    public void setPeerTypeValue(String peerTypeValue) throws JNCException {
        setPeerTypeValue(new YangEnumeration(peerTypeValue, new String[] {
             "sgp",
             "ipspSe",
        }));
    }

    /**
     * Unsets the value for child leaf "peer-type".
     */
    public void unsetPeerTypeValue() throws JNCException {
        delete("peer-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "peer-type" leaf will not have a value.
     */
    public void addPeerType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "peer-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "peer-type" with operation "replace".
     */
    public void markPeerTypeReplace() throws JNCException {
        markLeafReplace("peerType");
    }

    /**
     * Marks the leaf "peer-type" with operation "merge".
     */
    public void markPeerTypeMerge() throws JNCException {
        markLeafMerge("peerType");
    }

    /**
     * Marks the leaf "peer-type" with operation "create".
     */
    public void markPeerTypeCreate() throws JNCException {
        markLeafCreate("peerType");
    }

    /**
     * Marks the leaf "peer-type" with operation "delete".
     */
    public void markPeerTypeDelete() throws JNCException {
        markLeafDelete("peerType");
    }

    /* Access methods for optional leaf child: "compat-mode". */

    /**
     * Gets the value for child leaf "compat-mode".
     * @return The value of the leaf.
     */
    public YangEnumeration getCompatModeValue() throws JNCException {
        YangEnumeration compatMode = (YangEnumeration)getValue("compat-mode");
        if (compatMode == null) {
            compatMode = new YangEnumeration("standard", new String[] {  // default
                "standard",
                "usp",
                "mode1",
                "mode2",
                "mode3",
            });
        }
        return compatMode;
    }

    /**
     * Sets the value for child leaf "compat-mode",
     * using instance of generated typedef class.
     * @param compatModeValue The value to set.
     * @param compatModeValue used during instantiation.
     */
    public void setCompatModeValue(YangEnumeration compatModeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "compat-mode",
            compatModeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "compat-mode",
     * using a String value.
     * @param compatModeValue used during instantiation.
     */
    public void setCompatModeValue(String compatModeValue) throws JNCException {
        setCompatModeValue(new YangEnumeration(compatModeValue, new String[] {
             "standard",
             "usp",
             "mode1",
             "mode2",
             "mode3",
        }));
    }

    /**
     * Unsets the value for child leaf "compat-mode".
     */
    public void unsetCompatModeValue() throws JNCException {
        delete("compat-mode");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "compat-mode" leaf will not have a value.
     */
    public void addCompatMode() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "compat-mode",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "compat-mode" with operation "replace".
     */
    public void markCompatModeReplace() throws JNCException {
        markLeafReplace("compatMode");
    }

    /**
     * Marks the leaf "compat-mode" with operation "merge".
     */
    public void markCompatModeMerge() throws JNCException {
        markLeafMerge("compatMode");
    }

    /**
     * Marks the leaf "compat-mode" with operation "create".
     */
    public void markCompatModeCreate() throws JNCException {
        markLeafCreate("compatMode");
    }

    /**
     * Marks the leaf "compat-mode" with operation "delete".
     */
    public void markCompatModeDelete() throws JNCException {
        markLeafDelete("compatMode");
    }

    /* Access methods for optional leaf child: "association-creation". */

    /**
     * Gets the value for child leaf "association-creation".
     * @return The value of the leaf.
     */
    public YangEnumeration getAssociationCreationValue() throws JNCException {
        return (YangEnumeration)getValue("association-creation");
    }

    /**
     * Sets the value for child leaf "association-creation",
     * using instance of generated typedef class.
     * @param associationCreationValue The value to set.
     * @param associationCreationValue used during instantiation.
     */
    public void setAssociationCreationValue(YangEnumeration associationCreationValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "association-creation",
            associationCreationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "association-creation",
     * using a String value.
     * @param associationCreationValue used during instantiation.
     */
    public void setAssociationCreationValue(String associationCreationValue)
            throws JNCException {
        setAssociationCreationValue(new YangEnumeration(associationCreationValue, new String[] {
             "initiate",
             "accept",
        }));
    }

    /**
     * Unsets the value for child leaf "association-creation".
     */
    public void unsetAssociationCreationValue() throws JNCException {
        delete("association-creation");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "association-creation" leaf will not have a value.
     */
    public void addAssociationCreation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "association-creation",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "association-creation" with operation "replace".
     */
    public void markAssociationCreationReplace() throws JNCException {
        markLeafReplace("associationCreation");
    }

    /**
     * Marks the leaf "association-creation" with operation "merge".
     */
    public void markAssociationCreationMerge() throws JNCException {
        markLeafMerge("associationCreation");
    }

    /**
     * Marks the leaf "association-creation" with operation "create".
     */
    public void markAssociationCreationCreate() throws JNCException {
        markLeafCreate("associationCreation");
    }

    /**
     * Marks the leaf "association-creation" with operation "delete".
     */
    public void markAssociationCreationDelete() throws JNCException {
        markLeafDelete("associationCreation");
    }

    /* Access methods for optional leaf child: "network-appearance". */

    /**
     * Gets the value for child leaf "network-appearance".
     * @return The value of the leaf.
     */
    public YangString getNetworkAppearanceValue() throws JNCException {
        YangString networkAppearance = (YangString)getValue("network-appearance");
        if (networkAppearance == null) {
            networkAppearance = new YangString("unused");  // default
        }
        return networkAppearance;
    }

    /**
     * Sets the value for child leaf "network-appearance",
     * using instance of generated typedef class.
     * @param networkAppearanceValue The value to set.
     * @param networkAppearanceValue used during instantiation.
     */
    public void setNetworkAppearanceValue(YangString networkAppearanceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "network-appearance",
            networkAppearanceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "network-appearance",
     * using a String value.
     * @param networkAppearanceValue used during instantiation.
     */
    public void setNetworkAppearanceValue(String networkAppearanceValue)
            throws JNCException {
        setNetworkAppearanceValue(new YangString(networkAppearanceValue));
    }

    /**
     * Unsets the value for child leaf "network-appearance".
     */
    public void unsetNetworkAppearanceValue() throws JNCException {
        delete("network-appearance");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "network-appearance" leaf will not have a value.
     */
    public void addNetworkAppearance() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "network-appearance",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "network-appearance" with operation "replace".
     */
    public void markNetworkAppearanceReplace() throws JNCException {
        markLeafReplace("networkAppearance");
    }

    /**
     * Marks the leaf "network-appearance" with operation "merge".
     */
    public void markNetworkAppearanceMerge() throws JNCException {
        markLeafMerge("networkAppearance");
    }

    /**
     * Marks the leaf "network-appearance" with operation "create".
     */
    public void markNetworkAppearanceCreate() throws JNCException {
        markLeafCreate("networkAppearance");
    }

    /**
     * Marks the leaf "network-appearance" with operation "delete".
     */
    public void markNetworkAppearanceDelete() throws JNCException {
        markLeafDelete("networkAppearance");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
