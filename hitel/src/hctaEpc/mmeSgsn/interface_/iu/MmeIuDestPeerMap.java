/* 
 * @(#)MmeIuDestPeerMap.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.iu;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/iu/mme-iu-dest-peer-map"
 * <p>
 * See line 164 in
 * sgsnM3uaAspConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeIuDestPeerMap extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeIuDestPeerMap object.
     */
    public MmeIuDestPeerMap() {
        super(Epc.NAMESPACE, "mme-iu-dest-peer-map");
    }

    /**
     * Constructor for an initialized MmeIuDestPeerMap object,
     * 
     * @param destinationPointCodeValue Key argument of child.
     * @param iuPeerNameValue Key argument of child.
     */
    public MmeIuDestPeerMap(YangString destinationPointCodeValue, YangString iuPeerNameValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-iu-dest-peer-map");
        Leaf destinationPointCode = new Leaf(Epc.NAMESPACE, "destination-point-code");
        destinationPointCode.setValue(destinationPointCodeValue);
        insertChild(destinationPointCode, childrenNames());
        Leaf iuPeerName = new Leaf(Epc.NAMESPACE, "iu-peer-name");
        iuPeerName.setValue(iuPeerNameValue);
        insertChild(iuPeerName, childrenNames());
    }

    /**
     * Constructor for an initialized MmeIuDestPeerMap object,
     * with String keys.
     * @param destinationPointCodeValue Key argument of child.
     * @param iuPeerNameValue Key argument of child.
     */
    public MmeIuDestPeerMap(String destinationPointCodeValue, String iuPeerNameValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-iu-dest-peer-map");
        Leaf destinationPointCode = new Leaf(Epc.NAMESPACE, "destination-point-code");
        destinationPointCode.setValue(new YangString(destinationPointCodeValue));
        insertChild(destinationPointCode, childrenNames());
        Leaf iuPeerName = new Leaf(Epc.NAMESPACE, "iu-peer-name");
        iuPeerName.setValue(new YangString(iuPeerNameValue));
        insertChild(iuPeerName, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeIuDestPeerMap clone() {
        MmeIuDestPeerMap copy;
        try {
            copy = new MmeIuDestPeerMap(getDestinationPointCodeValue().toString(), getIuPeerNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeIuDestPeerMap)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeIuDestPeerMap cloneShallow() {
        MmeIuDestPeerMap copy;
        try {
            copy = new MmeIuDestPeerMap(getDestinationPointCodeValue().toString(), getIuPeerNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeIuDestPeerMap)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "destination-point-code",
            "iu-peer-name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "destination-point-code",
            "iu-peer-name",
        };
    }

    /* Access methods for leaf child: "destination-point-code". */

    /**
     * Gets the value for child leaf "destination-point-code".
     * @return The value of the leaf.
     */
    public YangString getDestinationPointCodeValue() throws JNCException {
        return (YangString)getValue("destination-point-code");
    }

    /**
     * Sets the value for child leaf "destination-point-code",
     * using instance of generated typedef class.
     * @param destinationPointCodeValue The value to set.
     * @param destinationPointCodeValue used during instantiation.
     */
    public void setDestinationPointCodeValue(YangString destinationPointCodeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "destination-point-code",
            destinationPointCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "destination-point-code",
     * using a String value.
     * @param destinationPointCodeValue used during instantiation.
     */
    public void setDestinationPointCodeValue(String destinationPointCodeValue)
            throws JNCException {
        setDestinationPointCodeValue(new YangString(destinationPointCodeValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "destination-point-code" leaf will not have a value.
     */
    public void addDestinationPointCode() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "destination-point-code",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "iu-peer-name". */

    /**
     * Gets the value for child leaf "iu-peer-name".
     * @return The value of the leaf.
     */
    public YangString getIuPeerNameValue() throws JNCException {
        return (YangString)getValue("iu-peer-name");
    }

    /**
     * Sets the value for child leaf "iu-peer-name",
     * using instance of generated typedef class.
     * @param iuPeerNameValue The value to set.
     * @param iuPeerNameValue used during instantiation.
     */
    public void setIuPeerNameValue(YangString iuPeerNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iu-peer-name",
            iuPeerNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "iu-peer-name",
     * using a String value.
     * @param iuPeerNameValue used during instantiation.
     */
    public void setIuPeerNameValue(String iuPeerNameValue) throws JNCException {
        setIuPeerNameValue(new YangString(iuPeerNameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "iu-peer-name" leaf will not have a value.
     */
    public void addIuPeerName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iu-peer-name",
            null,
            childrenNames());
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
