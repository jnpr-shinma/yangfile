/* 
 * @(#)MmeFgwRnc.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.iu;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangUInt16;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/iu/mme-fgw-rnc"
 * <p>
 * See line 392 in
 * rncConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeFgwRnc extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeFgwRnc object.
     */
    public MmeFgwRnc() {
        super(Epc.NAMESPACE, "mme-fgw-rnc");
    }

    /**
     * Constructor for an initialized MmeFgwRnc object,
     * 
     * @param rncIdValue Key argument of child.
     */
    public MmeFgwRnc(YangUInt16 rncIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-fgw-rnc");
        Leaf rncId = new Leaf(Epc.NAMESPACE, "rnc-id");
        rncId.setValue(rncIdValue);
        insertChild(rncId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeFgwRnc object,
     * with String keys.
     * @param rncIdValue Key argument of child.
     */
    public MmeFgwRnc(String rncIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-fgw-rnc");
        Leaf rncId = new Leaf(Epc.NAMESPACE, "rnc-id");
        rncId.setValue(new YangUInt16(rncIdValue));
        insertChild(rncId, childrenNames());
    }

    /**
     * Constructor for an initialized MmeFgwRnc object,
     * with keys of built in Java types.
     * @param rncIdValue Key argument of child.
     */
    public MmeFgwRnc(int rncIdValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-fgw-rnc");
        Leaf rncId = new Leaf(Epc.NAMESPACE, "rnc-id");
        rncId.setValue(new YangUInt16(rncIdValue));
        insertChild(rncId, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeFgwRnc clone() {
        MmeFgwRnc copy;
        try {
            copy = new MmeFgwRnc(getRncIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeFgwRnc)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeFgwRnc cloneShallow() {
        MmeFgwRnc copy;
        try {
            copy = new MmeFgwRnc(getRncIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeFgwRnc)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "rnc-id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "rnc-id",
            "destination-point-code",
            "callp-service-id",
            "direct-tunnel",
            "max-iu-connections",
        };
    }

    /* Access methods for leaf child: "rnc-id". */

    /**
     * Gets the value for child leaf "rnc-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getRncIdValue() throws JNCException {
        return (YangUInt16)getValue("rnc-id");
    }

    /**
     * Sets the value for child leaf "rnc-id",
     * using instance of generated typedef class.
     * @param rncIdValue The value to set.
     * @param rncIdValue used during instantiation.
     */
    public void setRncIdValue(YangUInt16 rncIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rnc-id",
            rncIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rnc-id",
     * using Java primitive values.
     * @param rncIdValue used during instantiation.
     */
    public void setRncIdValue(int rncIdValue) throws JNCException {
        setRncIdValue(new YangUInt16(rncIdValue));
    }

    /**
     * Sets the value for child leaf "rnc-id",
     * using a String value.
     * @param rncIdValue used during instantiation.
     */
    public void setRncIdValue(String rncIdValue) throws JNCException {
        setRncIdValue(new YangUInt16(rncIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rnc-id" leaf will not have a value.
     */
    public void addRncId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rnc-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "destination-point-code". */

    /**
     * Gets the value for child leaf "destination-point-code".
     * @return The value of the leaf.
     */
    public YangString getDestinationPointCodeValue() throws JNCException {
        return (YangString)getValue("destination-point-code");
    }

    /**
     * Sets the value for child leaf "destination-point-code",
     * using instance of generated typedef class.
     * @param destinationPointCodeValue The value to set.
     * @param destinationPointCodeValue used during instantiation.
     */
    public void setDestinationPointCodeValue(YangString destinationPointCodeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "destination-point-code",
            destinationPointCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "destination-point-code",
     * using a String value.
     * @param destinationPointCodeValue used during instantiation.
     */
    public void setDestinationPointCodeValue(String destinationPointCodeValue)
            throws JNCException {
        setDestinationPointCodeValue(new YangString(destinationPointCodeValue));
    }

    /**
     * Unsets the value for child leaf "destination-point-code".
     */
    public void unsetDestinationPointCodeValue() throws JNCException {
        delete("destination-point-code");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "destination-point-code" leaf will not have a value.
     */
    public void addDestinationPointCode() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "destination-point-code",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "destination-point-code" with operation "replace".
     */
    public void markDestinationPointCodeReplace() throws JNCException {
        markLeafReplace("destinationPointCode");
    }

    /**
     * Marks the leaf "destination-point-code" with operation "merge".
     */
    public void markDestinationPointCodeMerge() throws JNCException {
        markLeafMerge("destinationPointCode");
    }

    /**
     * Marks the leaf "destination-point-code" with operation "create".
     */
    public void markDestinationPointCodeCreate() throws JNCException {
        markLeafCreate("destinationPointCode");
    }

    /**
     * Marks the leaf "destination-point-code" with operation "delete".
     */
    public void markDestinationPointCodeDelete() throws JNCException {
        markLeafDelete("destinationPointCode");
    }

    /* Access methods for optional leaf child: "callp-service-id". */

    /**
     * Gets the value for child leaf "callp-service-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getCallpServiceIdValue() throws JNCException {
        return (YangUInt16)getValue("callp-service-id");
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using instance of generated typedef class.
     * @param callpServiceIdValue The value to set.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(YangUInt16 callpServiceIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "callp-service-id",
            callpServiceIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using Java primitive values.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(int callpServiceIdValue)
            throws JNCException {
        setCallpServiceIdValue(new YangUInt16(callpServiceIdValue));
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using a String value.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(String callpServiceIdValue)
            throws JNCException {
        setCallpServiceIdValue(new YangUInt16(callpServiceIdValue));
    }

    /**
     * Unsets the value for child leaf "callp-service-id".
     */
    public void unsetCallpServiceIdValue() throws JNCException {
        delete("callp-service-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "callp-service-id" leaf will not have a value.
     */
    public void addCallpServiceId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "callp-service-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "callp-service-id" with operation "replace".
     */
    public void markCallpServiceIdReplace() throws JNCException {
        markLeafReplace("callpServiceId");
    }

    /**
     * Marks the leaf "callp-service-id" with operation "merge".
     */
    public void markCallpServiceIdMerge() throws JNCException {
        markLeafMerge("callpServiceId");
    }

    /**
     * Marks the leaf "callp-service-id" with operation "create".
     */
    public void markCallpServiceIdCreate() throws JNCException {
        markLeafCreate("callpServiceId");
    }

    /**
     * Marks the leaf "callp-service-id" with operation "delete".
     */
    public void markCallpServiceIdDelete() throws JNCException {
        markLeafDelete("callpServiceId");
    }

    /* Access methods for optional leaf child: "direct-tunnel". */

    /**
     * Gets the value for child leaf "direct-tunnel".
     * @return The value of the leaf.
     */
    public YangEnumeration getDirectTunnelValue() throws JNCException {
        YangEnumeration directTunnel = (YangEnumeration)getValue("direct-tunnel");
        if (directTunnel == null) {
            directTunnel = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return directTunnel;
    }

    /**
     * Sets the value for child leaf "direct-tunnel",
     * using instance of generated typedef class.
     * @param directTunnelValue The value to set.
     * @param directTunnelValue used during instantiation.
     */
    public void setDirectTunnelValue(YangEnumeration directTunnelValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "direct-tunnel",
            directTunnelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "direct-tunnel",
     * using a String value.
     * @param directTunnelValue used during instantiation.
     */
    public void setDirectTunnelValue(String directTunnelValue)
            throws JNCException {
        setDirectTunnelValue(new YangEnumeration(directTunnelValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "direct-tunnel".
     */
    public void unsetDirectTunnelValue() throws JNCException {
        delete("direct-tunnel");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "direct-tunnel" leaf will not have a value.
     */
    public void addDirectTunnel() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "direct-tunnel",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "direct-tunnel" with operation "replace".
     */
    public void markDirectTunnelReplace() throws JNCException {
        markLeafReplace("directTunnel");
    }

    /**
     * Marks the leaf "direct-tunnel" with operation "merge".
     */
    public void markDirectTunnelMerge() throws JNCException {
        markLeafMerge("directTunnel");
    }

    /**
     * Marks the leaf "direct-tunnel" with operation "create".
     */
    public void markDirectTunnelCreate() throws JNCException {
        markLeafCreate("directTunnel");
    }

    /**
     * Marks the leaf "direct-tunnel" with operation "delete".
     */
    public void markDirectTunnelDelete() throws JNCException {
        markLeafDelete("directTunnel");
    }

    /* Access methods for optional leaf child: "max-iu-connections". */

    /**
     * Gets the value for child leaf "max-iu-connections".
     * @return The value of the leaf.
     */
    public YangUInt32 getMaxIuConnectionsValue() throws JNCException {
        YangUInt32 maxIuConnections = (YangUInt32)getValue("max-iu-connections");
        if (maxIuConnections == null) {
            maxIuConnections = new YangUInt32("3000");  // default
        }
        return maxIuConnections;
    }

    /**
     * Sets the value for child leaf "max-iu-connections",
     * using instance of generated typedef class.
     * @param maxIuConnectionsValue The value to set.
     * @param maxIuConnectionsValue used during instantiation.
     */
    public void setMaxIuConnectionsValue(YangUInt32 maxIuConnectionsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-iu-connections",
            maxIuConnectionsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-iu-connections",
     * using Java primitive values.
     * @param maxIuConnectionsValue used during instantiation.
     */
    public void setMaxIuConnectionsValue(long maxIuConnectionsValue)
            throws JNCException {
        setMaxIuConnectionsValue(new YangUInt32(maxIuConnectionsValue));
    }

    /**
     * Sets the value for child leaf "max-iu-connections",
     * using a String value.
     * @param maxIuConnectionsValue used during instantiation.
     */
    public void setMaxIuConnectionsValue(String maxIuConnectionsValue)
            throws JNCException {
        setMaxIuConnectionsValue(new YangUInt32(maxIuConnectionsValue));
    }

    /**
     * Unsets the value for child leaf "max-iu-connections".
     */
    public void unsetMaxIuConnectionsValue() throws JNCException {
        delete("max-iu-connections");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-iu-connections" leaf will not have a value.
     */
    public void addMaxIuConnections() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-iu-connections",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-iu-connections" with operation "replace".
     */
    public void markMaxIuConnectionsReplace() throws JNCException {
        markLeafReplace("maxIuConnections");
    }

    /**
     * Marks the leaf "max-iu-connections" with operation "merge".
     */
    public void markMaxIuConnectionsMerge() throws JNCException {
        markLeafMerge("maxIuConnections");
    }

    /**
     * Marks the leaf "max-iu-connections" with operation "create".
     */
    public void markMaxIuConnectionsCreate() throws JNCException {
        markLeafCreate("maxIuConnections");
    }

    /**
     * Marks the leaf "max-iu-connections" with operation "delete".
     */
    public void markMaxIuConnectionsDelete() throws JNCException {
        markLeafDelete("maxIuConnections");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
