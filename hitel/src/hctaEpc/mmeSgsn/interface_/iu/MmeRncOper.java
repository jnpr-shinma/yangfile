/* 
 * @(#)MmeRncOper.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.iu;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/iu/mme-rnc-oper"
 * <p>
 * See line 44 in
 * rncCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeRncOper extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeRncOper object.
     */
    public MmeRncOper() {
        super(Epc.NAMESPACE, "mme-rnc-oper");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeRncOper clone() {
        return (MmeRncOper)cloneContent(new MmeRncOper());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeRncOper cloneShallow() {
        return (MmeRncOper)cloneShallowContent(new MmeRncOper());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "rnc-id",
            "service",
            "destination-point-code",
            "direct-tunnel",
            "max-iu-connections",
            "state",
            "active-sig-connections",
            "rejected-connections",
            "rnc-connect-failures",
            "location",
        };
    }

    /* Access methods for optional leaf child: "rnc-id". */

    /**
     * Gets the value for child leaf "rnc-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getRncIdValue() throws JNCException {
        return (YangUInt32)getValue("rnc-id");
    }

    /**
     * Sets the value for child leaf "rnc-id",
     * using instance of generated typedef class.
     * @param rncIdValue The value to set.
     * @param rncIdValue used during instantiation.
     */
    public void setRncIdValue(YangUInt32 rncIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rnc-id",
            rncIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rnc-id",
     * using Java primitive values.
     * @param rncIdValue used during instantiation.
     */
    public void setRncIdValue(long rncIdValue) throws JNCException {
        setRncIdValue(new YangUInt32(rncIdValue));
    }

    /**
     * Sets the value for child leaf "rnc-id",
     * using a String value.
     * @param rncIdValue used during instantiation.
     */
    public void setRncIdValue(String rncIdValue) throws JNCException {
        setRncIdValue(new YangUInt32(rncIdValue));
    }

    /**
     * Unsets the value for child leaf "rnc-id".
     */
    public void unsetRncIdValue() throws JNCException {
        delete("rnc-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rnc-id" leaf will not have a value.
     */
    public void addRncId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rnc-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rnc-id" with operation "replace".
     */
    public void markRncIdReplace() throws JNCException {
        markLeafReplace("rncId");
    }

    /**
     * Marks the leaf "rnc-id" with operation "merge".
     */
    public void markRncIdMerge() throws JNCException {
        markLeafMerge("rncId");
    }

    /**
     * Marks the leaf "rnc-id" with operation "create".
     */
    public void markRncIdCreate() throws JNCException {
        markLeafCreate("rncId");
    }

    /**
     * Marks the leaf "rnc-id" with operation "delete".
     */
    public void markRncIdDelete() throws JNCException {
        markLeafDelete("rncId");
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "destination-point-code". */

    /**
     * Gets the value for child leaf "destination-point-code".
     * @return The value of the leaf.
     */
    public YangString getDestinationPointCodeValue() throws JNCException {
        return (YangString)getValue("destination-point-code");
    }

    /**
     * Sets the value for child leaf "destination-point-code",
     * using instance of generated typedef class.
     * @param destinationPointCodeValue The value to set.
     * @param destinationPointCodeValue used during instantiation.
     */
    public void setDestinationPointCodeValue(YangString destinationPointCodeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "destination-point-code",
            destinationPointCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "destination-point-code",
     * using a String value.
     * @param destinationPointCodeValue used during instantiation.
     */
    public void setDestinationPointCodeValue(String destinationPointCodeValue)
            throws JNCException {
        setDestinationPointCodeValue(new YangString(destinationPointCodeValue));
    }

    /**
     * Unsets the value for child leaf "destination-point-code".
     */
    public void unsetDestinationPointCodeValue() throws JNCException {
        delete("destination-point-code");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "destination-point-code" leaf will not have a value.
     */
    public void addDestinationPointCode() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "destination-point-code",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "destination-point-code" with operation "replace".
     */
    public void markDestinationPointCodeReplace() throws JNCException {
        markLeafReplace("destinationPointCode");
    }

    /**
     * Marks the leaf "destination-point-code" with operation "merge".
     */
    public void markDestinationPointCodeMerge() throws JNCException {
        markLeafMerge("destinationPointCode");
    }

    /**
     * Marks the leaf "destination-point-code" with operation "create".
     */
    public void markDestinationPointCodeCreate() throws JNCException {
        markLeafCreate("destinationPointCode");
    }

    /**
     * Marks the leaf "destination-point-code" with operation "delete".
     */
    public void markDestinationPointCodeDelete() throws JNCException {
        markLeafDelete("destinationPointCode");
    }

    /* Access methods for optional leaf child: "direct-tunnel". */

    /**
     * Gets the value for child leaf "direct-tunnel".
     * @return The value of the leaf.
     */
    public YangString getDirectTunnelValue() throws JNCException {
        return (YangString)getValue("direct-tunnel");
    }

    /**
     * Sets the value for child leaf "direct-tunnel",
     * using instance of generated typedef class.
     * @param directTunnelValue The value to set.
     * @param directTunnelValue used during instantiation.
     */
    public void setDirectTunnelValue(YangString directTunnelValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "direct-tunnel",
            directTunnelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "direct-tunnel",
     * using a String value.
     * @param directTunnelValue used during instantiation.
     */
    public void setDirectTunnelValue(String directTunnelValue)
            throws JNCException {
        setDirectTunnelValue(new YangString(directTunnelValue));
    }

    /**
     * Unsets the value for child leaf "direct-tunnel".
     */
    public void unsetDirectTunnelValue() throws JNCException {
        delete("direct-tunnel");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "direct-tunnel" leaf will not have a value.
     */
    public void addDirectTunnel() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "direct-tunnel",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "direct-tunnel" with operation "replace".
     */
    public void markDirectTunnelReplace() throws JNCException {
        markLeafReplace("directTunnel");
    }

    /**
     * Marks the leaf "direct-tunnel" with operation "merge".
     */
    public void markDirectTunnelMerge() throws JNCException {
        markLeafMerge("directTunnel");
    }

    /**
     * Marks the leaf "direct-tunnel" with operation "create".
     */
    public void markDirectTunnelCreate() throws JNCException {
        markLeafCreate("directTunnel");
    }

    /**
     * Marks the leaf "direct-tunnel" with operation "delete".
     */
    public void markDirectTunnelDelete() throws JNCException {
        markLeafDelete("directTunnel");
    }

    /* Access methods for optional leaf child: "max-iu-connections". */

    /**
     * Gets the value for child leaf "max-iu-connections".
     * @return The value of the leaf.
     */
    public YangUInt32 getMaxIuConnectionsValue() throws JNCException {
        return (YangUInt32)getValue("max-iu-connections");
    }

    /**
     * Sets the value for child leaf "max-iu-connections",
     * using instance of generated typedef class.
     * @param maxIuConnectionsValue The value to set.
     * @param maxIuConnectionsValue used during instantiation.
     */
    public void setMaxIuConnectionsValue(YangUInt32 maxIuConnectionsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-iu-connections",
            maxIuConnectionsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "max-iu-connections",
     * using Java primitive values.
     * @param maxIuConnectionsValue used during instantiation.
     */
    public void setMaxIuConnectionsValue(long maxIuConnectionsValue)
            throws JNCException {
        setMaxIuConnectionsValue(new YangUInt32(maxIuConnectionsValue));
    }

    /**
     * Sets the value for child leaf "max-iu-connections",
     * using a String value.
     * @param maxIuConnectionsValue used during instantiation.
     */
    public void setMaxIuConnectionsValue(String maxIuConnectionsValue)
            throws JNCException {
        setMaxIuConnectionsValue(new YangUInt32(maxIuConnectionsValue));
    }

    /**
     * Unsets the value for child leaf "max-iu-connections".
     */
    public void unsetMaxIuConnectionsValue() throws JNCException {
        delete("max-iu-connections");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "max-iu-connections" leaf will not have a value.
     */
    public void addMaxIuConnections() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "max-iu-connections",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "max-iu-connections" with operation "replace".
     */
    public void markMaxIuConnectionsReplace() throws JNCException {
        markLeafReplace("maxIuConnections");
    }

    /**
     * Marks the leaf "max-iu-connections" with operation "merge".
     */
    public void markMaxIuConnectionsMerge() throws JNCException {
        markLeafMerge("maxIuConnections");
    }

    /**
     * Marks the leaf "max-iu-connections" with operation "create".
     */
    public void markMaxIuConnectionsCreate() throws JNCException {
        markLeafCreate("maxIuConnections");
    }

    /**
     * Marks the leaf "max-iu-connections" with operation "delete".
     */
    public void markMaxIuConnectionsDelete() throws JNCException {
        markLeafDelete("maxIuConnections");
    }

    /* Access methods for optional leaf child: "state". */

    /**
     * Gets the value for child leaf "state".
     * @return The value of the leaf.
     */
    public YangString getStateValue() throws JNCException {
        return (YangString)getValue("state");
    }

    /**
     * Sets the value for child leaf "state",
     * using instance of generated typedef class.
     * @param stateValue The value to set.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(YangString stateValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "state",
            stateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "state",
     * using a String value.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(String stateValue) throws JNCException {
        setStateValue(new YangString(stateValue));
    }

    /**
     * Unsets the value for child leaf "state".
     */
    public void unsetStateValue() throws JNCException {
        delete("state");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "state" leaf will not have a value.
     */
    public void addState() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "state",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "state" with operation "replace".
     */
    public void markStateReplace() throws JNCException {
        markLeafReplace("state");
    }

    /**
     * Marks the leaf "state" with operation "merge".
     */
    public void markStateMerge() throws JNCException {
        markLeafMerge("state");
    }

    /**
     * Marks the leaf "state" with operation "create".
     */
    public void markStateCreate() throws JNCException {
        markLeafCreate("state");
    }

    /**
     * Marks the leaf "state" with operation "delete".
     */
    public void markStateDelete() throws JNCException {
        markLeafDelete("state");
    }

    /* Access methods for optional leaf child: "active-sig-connections". */

    /**
     * Gets the value for child leaf "active-sig-connections".
     * @return The value of the leaf.
     */
    public YangUInt32 getActiveSigConnectionsValue() throws JNCException {
        return (YangUInt32)getValue("active-sig-connections");
    }

    /**
     * Sets the value for child leaf "active-sig-connections",
     * using instance of generated typedef class.
     * @param activeSigConnectionsValue The value to set.
     * @param activeSigConnectionsValue used during instantiation.
     */
    public void setActiveSigConnectionsValue(YangUInt32 activeSigConnectionsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "active-sig-connections",
            activeSigConnectionsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "active-sig-connections",
     * using Java primitive values.
     * @param activeSigConnectionsValue used during instantiation.
     */
    public void setActiveSigConnectionsValue(long activeSigConnectionsValue)
            throws JNCException {
        setActiveSigConnectionsValue(new YangUInt32(activeSigConnectionsValue));
    }

    /**
     * Sets the value for child leaf "active-sig-connections",
     * using a String value.
     * @param activeSigConnectionsValue used during instantiation.
     */
    public void setActiveSigConnectionsValue(String activeSigConnectionsValue)
            throws JNCException {
        setActiveSigConnectionsValue(new YangUInt32(activeSigConnectionsValue));
    }

    /**
     * Unsets the value for child leaf "active-sig-connections".
     */
    public void unsetActiveSigConnectionsValue() throws JNCException {
        delete("active-sig-connections");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "active-sig-connections" leaf will not have a value.
     */
    public void addActiveSigConnections() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "active-sig-connections",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "active-sig-connections" with operation "replace".
     */
    public void markActiveSigConnectionsReplace() throws JNCException {
        markLeafReplace("activeSigConnections");
    }

    /**
     * Marks the leaf "active-sig-connections" with operation "merge".
     */
    public void markActiveSigConnectionsMerge() throws JNCException {
        markLeafMerge("activeSigConnections");
    }

    /**
     * Marks the leaf "active-sig-connections" with operation "create".
     */
    public void markActiveSigConnectionsCreate() throws JNCException {
        markLeafCreate("activeSigConnections");
    }

    /**
     * Marks the leaf "active-sig-connections" with operation "delete".
     */
    public void markActiveSigConnectionsDelete() throws JNCException {
        markLeafDelete("activeSigConnections");
    }

    /* Access methods for optional leaf child: "rejected-connections". */

    /**
     * Gets the value for child leaf "rejected-connections".
     * @return The value of the leaf.
     */
    public YangUInt32 getRejectedConnectionsValue() throws JNCException {
        return (YangUInt32)getValue("rejected-connections");
    }

    /**
     * Sets the value for child leaf "rejected-connections",
     * using instance of generated typedef class.
     * @param rejectedConnectionsValue The value to set.
     * @param rejectedConnectionsValue used during instantiation.
     */
    public void setRejectedConnectionsValue(YangUInt32 rejectedConnectionsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rejected-connections",
            rejectedConnectionsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rejected-connections",
     * using Java primitive values.
     * @param rejectedConnectionsValue used during instantiation.
     */
    public void setRejectedConnectionsValue(long rejectedConnectionsValue)
            throws JNCException {
        setRejectedConnectionsValue(new YangUInt32(rejectedConnectionsValue));
    }

    /**
     * Sets the value for child leaf "rejected-connections",
     * using a String value.
     * @param rejectedConnectionsValue used during instantiation.
     */
    public void setRejectedConnectionsValue(String rejectedConnectionsValue)
            throws JNCException {
        setRejectedConnectionsValue(new YangUInt32(rejectedConnectionsValue));
    }

    /**
     * Unsets the value for child leaf "rejected-connections".
     */
    public void unsetRejectedConnectionsValue() throws JNCException {
        delete("rejected-connections");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rejected-connections" leaf will not have a value.
     */
    public void addRejectedConnections() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rejected-connections",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rejected-connections" with operation "replace".
     */
    public void markRejectedConnectionsReplace() throws JNCException {
        markLeafReplace("rejectedConnections");
    }

    /**
     * Marks the leaf "rejected-connections" with operation "merge".
     */
    public void markRejectedConnectionsMerge() throws JNCException {
        markLeafMerge("rejectedConnections");
    }

    /**
     * Marks the leaf "rejected-connections" with operation "create".
     */
    public void markRejectedConnectionsCreate() throws JNCException {
        markLeafCreate("rejectedConnections");
    }

    /**
     * Marks the leaf "rejected-connections" with operation "delete".
     */
    public void markRejectedConnectionsDelete() throws JNCException {
        markLeafDelete("rejectedConnections");
    }

    /* Access methods for optional leaf child: "rnc-connect-failures". */

    /**
     * Gets the value for child leaf "rnc-connect-failures".
     * @return The value of the leaf.
     */
    public YangUInt32 getRncConnectFailuresValue() throws JNCException {
        return (YangUInt32)getValue("rnc-connect-failures");
    }

    /**
     * Sets the value for child leaf "rnc-connect-failures",
     * using instance of generated typedef class.
     * @param rncConnectFailuresValue The value to set.
     * @param rncConnectFailuresValue used during instantiation.
     */
    public void setRncConnectFailuresValue(YangUInt32 rncConnectFailuresValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rnc-connect-failures",
            rncConnectFailuresValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rnc-connect-failures",
     * using Java primitive values.
     * @param rncConnectFailuresValue used during instantiation.
     */
    public void setRncConnectFailuresValue(long rncConnectFailuresValue)
            throws JNCException {
        setRncConnectFailuresValue(new YangUInt32(rncConnectFailuresValue));
    }

    /**
     * Sets the value for child leaf "rnc-connect-failures",
     * using a String value.
     * @param rncConnectFailuresValue used during instantiation.
     */
    public void setRncConnectFailuresValue(String rncConnectFailuresValue)
            throws JNCException {
        setRncConnectFailuresValue(new YangUInt32(rncConnectFailuresValue));
    }

    /**
     * Unsets the value for child leaf "rnc-connect-failures".
     */
    public void unsetRncConnectFailuresValue() throws JNCException {
        delete("rnc-connect-failures");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rnc-connect-failures" leaf will not have a value.
     */
    public void addRncConnectFailures() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rnc-connect-failures",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rnc-connect-failures" with operation "replace".
     */
    public void markRncConnectFailuresReplace() throws JNCException {
        markLeafReplace("rncConnectFailures");
    }

    /**
     * Marks the leaf "rnc-connect-failures" with operation "merge".
     */
    public void markRncConnectFailuresMerge() throws JNCException {
        markLeafMerge("rncConnectFailures");
    }

    /**
     * Marks the leaf "rnc-connect-failures" with operation "create".
     */
    public void markRncConnectFailuresCreate() throws JNCException {
        markLeafCreate("rncConnectFailures");
    }

    /**
     * Marks the leaf "rnc-connect-failures" with operation "delete".
     */
    public void markRncConnectFailuresDelete() throws JNCException {
        markLeafDelete("rncConnectFailures");
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
