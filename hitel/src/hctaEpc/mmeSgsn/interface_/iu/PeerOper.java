/* 
 * @(#)PeerOper.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.iu;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/iu/peer-oper"
 * <p>
 * See line 42 in
 * sgsnM3uaAspCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class PeerOper extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty PeerOper object.
     */
    public PeerOper() {
        super(Epc.NAMESPACE, "peer-oper");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public PeerOper clone() {
        return (PeerOper)cloneContent(new PeerOper());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public PeerOper cloneShallow() {
        return (PeerOper)cloneShallowContent(new PeerOper());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "iu-peer-name",
            "service",
            "location",
            "pid",
            "state",
            "egress-congest-level",
            "ingress-congest-level",
            "block-state",
            "msu-tx",
            "msu-rx",
            "pdu-tx",
            "pdu-rx",
            "pdu-invalid-error-rx",
            "pdu-disc-too-big-rx",
            "err-pdu-protocol-error-rx",
            "err-pdu-invalid-network-app-rx",
            "err-pdu-invalid-version-rx",
            "err-pdu-no-configured-as-rx",
            "err-pdu-unsupported-traf-md-rx",
            "err-pdu-unexpected-parm-rx",
            "err-pdu-missing-parm-rx",
            "err-pdu-invalid-aspid-rx",
            "err-pdu-dest-status-unknown-rx",
            "err-pdu-parm-err-rx",
            "err-pdu-invalid-routing-rx",
            "err-pdu-invalid-streamid-rx",
            "err-pdu-unsupported-msg-type-rx",
            "err-pdu-unexpected-msg-rx",
            "err-pdu-invalid-parm-value-rx",
            "err-pdu-aspid-required-rx",
            "err-pdu-refused-mgmt-block-rx",
            "err-pdu-unsupported-class-rx",
            "err-pdu-unsupported-traf-rx",
            "err-pdu-invalid-version-tx",
            "err-pdu-unsupported-class-tx",
            "err-pdu-unsupported-msg-type-tx",
            "err-pdu-unsupported-traffic-tx",
            "err-pdu-unexpected-msg-tx",
            "err-pdu-protocol-error-tx",
            "err-pdu-invalid-streamid-tx",
            "err-pdu-invalid-parm-value-tx",
            "err-pdu-parm-field-error-tx",
            "err-pdu-unexpect-parm-tx",
            "err-pdu-missing-parm-tx",
        };
    }

    /* Access methods for optional leaf child: "iu-peer-name". */

    /**
     * Gets the value for child leaf "iu-peer-name".
     * @return The value of the leaf.
     */
    public YangString getIuPeerNameValue() throws JNCException {
        return (YangString)getValue("iu-peer-name");
    }

    /**
     * Sets the value for child leaf "iu-peer-name",
     * using instance of generated typedef class.
     * @param iuPeerNameValue The value to set.
     * @param iuPeerNameValue used during instantiation.
     */
    public void setIuPeerNameValue(YangString iuPeerNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iu-peer-name",
            iuPeerNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "iu-peer-name",
     * using a String value.
     * @param iuPeerNameValue used during instantiation.
     */
    public void setIuPeerNameValue(String iuPeerNameValue) throws JNCException {
        setIuPeerNameValue(new YangString(iuPeerNameValue));
    }

    /**
     * Unsets the value for child leaf "iu-peer-name".
     */
    public void unsetIuPeerNameValue() throws JNCException {
        delete("iu-peer-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "iu-peer-name" leaf will not have a value.
     */
    public void addIuPeerName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "iu-peer-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "iu-peer-name" with operation "replace".
     */
    public void markIuPeerNameReplace() throws JNCException {
        markLeafReplace("iuPeerName");
    }

    /**
     * Marks the leaf "iu-peer-name" with operation "merge".
     */
    public void markIuPeerNameMerge() throws JNCException {
        markLeafMerge("iuPeerName");
    }

    /**
     * Marks the leaf "iu-peer-name" with operation "create".
     */
    public void markIuPeerNameCreate() throws JNCException {
        markLeafCreate("iuPeerName");
    }

    /**
     * Marks the leaf "iu-peer-name" with operation "delete".
     */
    public void markIuPeerNameDelete() throws JNCException {
        markLeafDelete("iuPeerName");
    }

    /* Access methods for optional leaf child: "service". */

    /**
     * Gets the value for child leaf "service".
     * @return The value of the leaf.
     */
    public YangString getServiceValue() throws JNCException {
        return (YangString)getValue("service");
    }

    /**
     * Sets the value for child leaf "service",
     * using instance of generated typedef class.
     * @param serviceValue The value to set.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(YangString serviceValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            serviceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "service",
     * using a String value.
     * @param serviceValue used during instantiation.
     */
    public void setServiceValue(String serviceValue) throws JNCException {
        setServiceValue(new YangString(serviceValue));
    }

    /**
     * Unsets the value for child leaf "service".
     */
    public void unsetServiceValue() throws JNCException {
        delete("service");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "service" leaf will not have a value.
     */
    public void addService() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "service",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "service" with operation "replace".
     */
    public void markServiceReplace() throws JNCException {
        markLeafReplace("service");
    }

    /**
     * Marks the leaf "service" with operation "merge".
     */
    public void markServiceMerge() throws JNCException {
        markLeafMerge("service");
    }

    /**
     * Marks the leaf "service" with operation "create".
     */
    public void markServiceCreate() throws JNCException {
        markLeafCreate("service");
    }

    /**
     * Marks the leaf "service" with operation "delete".
     */
    public void markServiceDelete() throws JNCException {
        markLeafDelete("service");
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public YangString getLocationValue() throws JNCException {
        return (YangString)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(YangString locationValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new YangString(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /* Access methods for optional leaf child: "pid". */

    /**
     * Gets the value for child leaf "pid".
     * @return The value of the leaf.
     */
    public YangUInt32 getPidValue() throws JNCException {
        return (YangUInt32)getValue("pid");
    }

    /**
     * Sets the value for child leaf "pid",
     * using instance of generated typedef class.
     * @param pidValue The value to set.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(YangUInt32 pidValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pid",
            pidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pid",
     * using Java primitive values.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(long pidValue) throws JNCException {
        setPidValue(new YangUInt32(pidValue));
    }

    /**
     * Sets the value for child leaf "pid",
     * using a String value.
     * @param pidValue used during instantiation.
     */
    public void setPidValue(String pidValue) throws JNCException {
        setPidValue(new YangUInt32(pidValue));
    }

    /**
     * Unsets the value for child leaf "pid".
     */
    public void unsetPidValue() throws JNCException {
        delete("pid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pid" leaf will not have a value.
     */
    public void addPid() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pid" with operation "replace".
     */
    public void markPidReplace() throws JNCException {
        markLeafReplace("pid");
    }

    /**
     * Marks the leaf "pid" with operation "merge".
     */
    public void markPidMerge() throws JNCException {
        markLeafMerge("pid");
    }

    /**
     * Marks the leaf "pid" with operation "create".
     */
    public void markPidCreate() throws JNCException {
        markLeafCreate("pid");
    }

    /**
     * Marks the leaf "pid" with operation "delete".
     */
    public void markPidDelete() throws JNCException {
        markLeafDelete("pid");
    }

    /* Access methods for optional leaf child: "state". */

    /**
     * Gets the value for child leaf "state".
     * @return The value of the leaf.
     */
    public YangString getStateValue() throws JNCException {
        return (YangString)getValue("state");
    }

    /**
     * Sets the value for child leaf "state",
     * using instance of generated typedef class.
     * @param stateValue The value to set.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(YangString stateValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "state",
            stateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "state",
     * using a String value.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(String stateValue) throws JNCException {
        setStateValue(new YangString(stateValue));
    }

    /**
     * Unsets the value for child leaf "state".
     */
    public void unsetStateValue() throws JNCException {
        delete("state");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "state" leaf will not have a value.
     */
    public void addState() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "state",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "state" with operation "replace".
     */
    public void markStateReplace() throws JNCException {
        markLeafReplace("state");
    }

    /**
     * Marks the leaf "state" with operation "merge".
     */
    public void markStateMerge() throws JNCException {
        markLeafMerge("state");
    }

    /**
     * Marks the leaf "state" with operation "create".
     */
    public void markStateCreate() throws JNCException {
        markLeafCreate("state");
    }

    /**
     * Marks the leaf "state" with operation "delete".
     */
    public void markStateDelete() throws JNCException {
        markLeafDelete("state");
    }

    /* Access methods for optional leaf child: "egress-congest-level". */

    /**
     * Gets the value for child leaf "egress-congest-level".
     * @return The value of the leaf.
     */
    public YangUInt8 getEgressCongestLevelValue() throws JNCException {
        return (YangUInt8)getValue("egress-congest-level");
    }

    /**
     * Sets the value for child leaf "egress-congest-level",
     * using instance of generated typedef class.
     * @param egressCongestLevelValue The value to set.
     * @param egressCongestLevelValue used during instantiation.
     */
    public void setEgressCongestLevelValue(YangUInt8 egressCongestLevelValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "egress-congest-level",
            egressCongestLevelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "egress-congest-level",
     * using Java primitive values.
     * @param egressCongestLevelValue used during instantiation.
     */
    public void setEgressCongestLevelValue(short egressCongestLevelValue)
            throws JNCException {
        setEgressCongestLevelValue(new YangUInt8(egressCongestLevelValue));
    }

    /**
     * Sets the value for child leaf "egress-congest-level",
     * using a String value.
     * @param egressCongestLevelValue used during instantiation.
     */
    public void setEgressCongestLevelValue(String egressCongestLevelValue)
            throws JNCException {
        setEgressCongestLevelValue(new YangUInt8(egressCongestLevelValue));
    }

    /**
     * Unsets the value for child leaf "egress-congest-level".
     */
    public void unsetEgressCongestLevelValue() throws JNCException {
        delete("egress-congest-level");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "egress-congest-level" leaf will not have a value.
     */
    public void addEgressCongestLevel() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "egress-congest-level",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "egress-congest-level" with operation "replace".
     */
    public void markEgressCongestLevelReplace() throws JNCException {
        markLeafReplace("egressCongestLevel");
    }

    /**
     * Marks the leaf "egress-congest-level" with operation "merge".
     */
    public void markEgressCongestLevelMerge() throws JNCException {
        markLeafMerge("egressCongestLevel");
    }

    /**
     * Marks the leaf "egress-congest-level" with operation "create".
     */
    public void markEgressCongestLevelCreate() throws JNCException {
        markLeafCreate("egressCongestLevel");
    }

    /**
     * Marks the leaf "egress-congest-level" with operation "delete".
     */
    public void markEgressCongestLevelDelete() throws JNCException {
        markLeafDelete("egressCongestLevel");
    }

    /* Access methods for optional leaf child: "ingress-congest-level". */

    /**
     * Gets the value for child leaf "ingress-congest-level".
     * @return The value of the leaf.
     */
    public YangUInt8 getIngressCongestLevelValue() throws JNCException {
        return (YangUInt8)getValue("ingress-congest-level");
    }

    /**
     * Sets the value for child leaf "ingress-congest-level",
     * using instance of generated typedef class.
     * @param ingressCongestLevelValue The value to set.
     * @param ingressCongestLevelValue used during instantiation.
     */
    public void setIngressCongestLevelValue(YangUInt8 ingressCongestLevelValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ingress-congest-level",
            ingressCongestLevelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ingress-congest-level",
     * using Java primitive values.
     * @param ingressCongestLevelValue used during instantiation.
     */
    public void setIngressCongestLevelValue(short ingressCongestLevelValue)
            throws JNCException {
        setIngressCongestLevelValue(new YangUInt8(ingressCongestLevelValue));
    }

    /**
     * Sets the value for child leaf "ingress-congest-level",
     * using a String value.
     * @param ingressCongestLevelValue used during instantiation.
     */
    public void setIngressCongestLevelValue(String ingressCongestLevelValue)
            throws JNCException {
        setIngressCongestLevelValue(new YangUInt8(ingressCongestLevelValue));
    }

    /**
     * Unsets the value for child leaf "ingress-congest-level".
     */
    public void unsetIngressCongestLevelValue() throws JNCException {
        delete("ingress-congest-level");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ingress-congest-level" leaf will not have a value.
     */
    public void addIngressCongestLevel() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ingress-congest-level",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ingress-congest-level" with operation "replace".
     */
    public void markIngressCongestLevelReplace() throws JNCException {
        markLeafReplace("ingressCongestLevel");
    }

    /**
     * Marks the leaf "ingress-congest-level" with operation "merge".
     */
    public void markIngressCongestLevelMerge() throws JNCException {
        markLeafMerge("ingressCongestLevel");
    }

    /**
     * Marks the leaf "ingress-congest-level" with operation "create".
     */
    public void markIngressCongestLevelCreate() throws JNCException {
        markLeafCreate("ingressCongestLevel");
    }

    /**
     * Marks the leaf "ingress-congest-level" with operation "delete".
     */
    public void markIngressCongestLevelDelete() throws JNCException {
        markLeafDelete("ingressCongestLevel");
    }

    /* Access methods for optional leaf child: "block-state". */

    /**
     * Gets the value for child leaf "block-state".
     * @return The value of the leaf.
     */
    public YangString getBlockStateValue() throws JNCException {
        return (YangString)getValue("block-state");
    }

    /**
     * Sets the value for child leaf "block-state",
     * using instance of generated typedef class.
     * @param blockStateValue The value to set.
     * @param blockStateValue used during instantiation.
     */
    public void setBlockStateValue(YangString blockStateValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "block-state",
            blockStateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "block-state",
     * using a String value.
     * @param blockStateValue used during instantiation.
     */
    public void setBlockStateValue(String blockStateValue) throws JNCException {
        setBlockStateValue(new YangString(blockStateValue));
    }

    /**
     * Unsets the value for child leaf "block-state".
     */
    public void unsetBlockStateValue() throws JNCException {
        delete("block-state");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "block-state" leaf will not have a value.
     */
    public void addBlockState() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "block-state",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "block-state" with operation "replace".
     */
    public void markBlockStateReplace() throws JNCException {
        markLeafReplace("blockState");
    }

    /**
     * Marks the leaf "block-state" with operation "merge".
     */
    public void markBlockStateMerge() throws JNCException {
        markLeafMerge("blockState");
    }

    /**
     * Marks the leaf "block-state" with operation "create".
     */
    public void markBlockStateCreate() throws JNCException {
        markLeafCreate("blockState");
    }

    /**
     * Marks the leaf "block-state" with operation "delete".
     */
    public void markBlockStateDelete() throws JNCException {
        markLeafDelete("blockState");
    }

    /* Access methods for optional leaf child: "msu-tx". */

    /**
     * Gets the value for child leaf "msu-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getMsuTxValue() throws JNCException {
        return (YangUInt32)getValue("msu-tx");
    }

    /**
     * Sets the value for child leaf "msu-tx",
     * using instance of generated typedef class.
     * @param msuTxValue The value to set.
     * @param msuTxValue used during instantiation.
     */
    public void setMsuTxValue(YangUInt32 msuTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "msu-tx",
            msuTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "msu-tx",
     * using Java primitive values.
     * @param msuTxValue used during instantiation.
     */
    public void setMsuTxValue(long msuTxValue) throws JNCException {
        setMsuTxValue(new YangUInt32(msuTxValue));
    }

    /**
     * Sets the value for child leaf "msu-tx",
     * using a String value.
     * @param msuTxValue used during instantiation.
     */
    public void setMsuTxValue(String msuTxValue) throws JNCException {
        setMsuTxValue(new YangUInt32(msuTxValue));
    }

    /**
     * Unsets the value for child leaf "msu-tx".
     */
    public void unsetMsuTxValue() throws JNCException {
        delete("msu-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "msu-tx" leaf will not have a value.
     */
    public void addMsuTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "msu-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "msu-tx" with operation "replace".
     */
    public void markMsuTxReplace() throws JNCException {
        markLeafReplace("msuTx");
    }

    /**
     * Marks the leaf "msu-tx" with operation "merge".
     */
    public void markMsuTxMerge() throws JNCException {
        markLeafMerge("msuTx");
    }

    /**
     * Marks the leaf "msu-tx" with operation "create".
     */
    public void markMsuTxCreate() throws JNCException {
        markLeafCreate("msuTx");
    }

    /**
     * Marks the leaf "msu-tx" with operation "delete".
     */
    public void markMsuTxDelete() throws JNCException {
        markLeafDelete("msuTx");
    }

    /* Access methods for optional leaf child: "msu-rx". */

    /**
     * Gets the value for child leaf "msu-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getMsuRxValue() throws JNCException {
        return (YangUInt32)getValue("msu-rx");
    }

    /**
     * Sets the value for child leaf "msu-rx",
     * using instance of generated typedef class.
     * @param msuRxValue The value to set.
     * @param msuRxValue used during instantiation.
     */
    public void setMsuRxValue(YangUInt32 msuRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "msu-rx",
            msuRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "msu-rx",
     * using Java primitive values.
     * @param msuRxValue used during instantiation.
     */
    public void setMsuRxValue(long msuRxValue) throws JNCException {
        setMsuRxValue(new YangUInt32(msuRxValue));
    }

    /**
     * Sets the value for child leaf "msu-rx",
     * using a String value.
     * @param msuRxValue used during instantiation.
     */
    public void setMsuRxValue(String msuRxValue) throws JNCException {
        setMsuRxValue(new YangUInt32(msuRxValue));
    }

    /**
     * Unsets the value for child leaf "msu-rx".
     */
    public void unsetMsuRxValue() throws JNCException {
        delete("msu-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "msu-rx" leaf will not have a value.
     */
    public void addMsuRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "msu-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "msu-rx" with operation "replace".
     */
    public void markMsuRxReplace() throws JNCException {
        markLeafReplace("msuRx");
    }

    /**
     * Marks the leaf "msu-rx" with operation "merge".
     */
    public void markMsuRxMerge() throws JNCException {
        markLeafMerge("msuRx");
    }

    /**
     * Marks the leaf "msu-rx" with operation "create".
     */
    public void markMsuRxCreate() throws JNCException {
        markLeafCreate("msuRx");
    }

    /**
     * Marks the leaf "msu-rx" with operation "delete".
     */
    public void markMsuRxDelete() throws JNCException {
        markLeafDelete("msuRx");
    }

    /* Access methods for optional leaf child: "pdu-tx". */

    /**
     * Gets the value for child leaf "pdu-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getPduTxValue() throws JNCException {
        return (YangUInt32)getValue("pdu-tx");
    }

    /**
     * Sets the value for child leaf "pdu-tx",
     * using instance of generated typedef class.
     * @param pduTxValue The value to set.
     * @param pduTxValue used during instantiation.
     */
    public void setPduTxValue(YangUInt32 pduTxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdu-tx",
            pduTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pdu-tx",
     * using Java primitive values.
     * @param pduTxValue used during instantiation.
     */
    public void setPduTxValue(long pduTxValue) throws JNCException {
        setPduTxValue(new YangUInt32(pduTxValue));
    }

    /**
     * Sets the value for child leaf "pdu-tx",
     * using a String value.
     * @param pduTxValue used during instantiation.
     */
    public void setPduTxValue(String pduTxValue) throws JNCException {
        setPduTxValue(new YangUInt32(pduTxValue));
    }

    /**
     * Unsets the value for child leaf "pdu-tx".
     */
    public void unsetPduTxValue() throws JNCException {
        delete("pdu-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pdu-tx" leaf will not have a value.
     */
    public void addPduTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdu-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pdu-tx" with operation "replace".
     */
    public void markPduTxReplace() throws JNCException {
        markLeafReplace("pduTx");
    }

    /**
     * Marks the leaf "pdu-tx" with operation "merge".
     */
    public void markPduTxMerge() throws JNCException {
        markLeafMerge("pduTx");
    }

    /**
     * Marks the leaf "pdu-tx" with operation "create".
     */
    public void markPduTxCreate() throws JNCException {
        markLeafCreate("pduTx");
    }

    /**
     * Marks the leaf "pdu-tx" with operation "delete".
     */
    public void markPduTxDelete() throws JNCException {
        markLeafDelete("pduTx");
    }

    /* Access methods for optional leaf child: "pdu-rx". */

    /**
     * Gets the value for child leaf "pdu-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getPduRxValue() throws JNCException {
        return (YangUInt32)getValue("pdu-rx");
    }

    /**
     * Sets the value for child leaf "pdu-rx",
     * using instance of generated typedef class.
     * @param pduRxValue The value to set.
     * @param pduRxValue used during instantiation.
     */
    public void setPduRxValue(YangUInt32 pduRxValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdu-rx",
            pduRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pdu-rx",
     * using Java primitive values.
     * @param pduRxValue used during instantiation.
     */
    public void setPduRxValue(long pduRxValue) throws JNCException {
        setPduRxValue(new YangUInt32(pduRxValue));
    }

    /**
     * Sets the value for child leaf "pdu-rx",
     * using a String value.
     * @param pduRxValue used during instantiation.
     */
    public void setPduRxValue(String pduRxValue) throws JNCException {
        setPduRxValue(new YangUInt32(pduRxValue));
    }

    /**
     * Unsets the value for child leaf "pdu-rx".
     */
    public void unsetPduRxValue() throws JNCException {
        delete("pdu-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pdu-rx" leaf will not have a value.
     */
    public void addPduRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdu-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pdu-rx" with operation "replace".
     */
    public void markPduRxReplace() throws JNCException {
        markLeafReplace("pduRx");
    }

    /**
     * Marks the leaf "pdu-rx" with operation "merge".
     */
    public void markPduRxMerge() throws JNCException {
        markLeafMerge("pduRx");
    }

    /**
     * Marks the leaf "pdu-rx" with operation "create".
     */
    public void markPduRxCreate() throws JNCException {
        markLeafCreate("pduRx");
    }

    /**
     * Marks the leaf "pdu-rx" with operation "delete".
     */
    public void markPduRxDelete() throws JNCException {
        markLeafDelete("pduRx");
    }

    /* Access methods for optional leaf child: "pdu-invalid-error-rx". */

    /**
     * Gets the value for child leaf "pdu-invalid-error-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getPduInvalidErrorRxValue() throws JNCException {
        return (YangUInt32)getValue("pdu-invalid-error-rx");
    }

    /**
     * Sets the value for child leaf "pdu-invalid-error-rx",
     * using instance of generated typedef class.
     * @param pduInvalidErrorRxValue The value to set.
     * @param pduInvalidErrorRxValue used during instantiation.
     */
    public void setPduInvalidErrorRxValue(YangUInt32 pduInvalidErrorRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdu-invalid-error-rx",
            pduInvalidErrorRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pdu-invalid-error-rx",
     * using Java primitive values.
     * @param pduInvalidErrorRxValue used during instantiation.
     */
    public void setPduInvalidErrorRxValue(long pduInvalidErrorRxValue)
            throws JNCException {
        setPduInvalidErrorRxValue(new YangUInt32(pduInvalidErrorRxValue));
    }

    /**
     * Sets the value for child leaf "pdu-invalid-error-rx",
     * using a String value.
     * @param pduInvalidErrorRxValue used during instantiation.
     */
    public void setPduInvalidErrorRxValue(String pduInvalidErrorRxValue)
            throws JNCException {
        setPduInvalidErrorRxValue(new YangUInt32(pduInvalidErrorRxValue));
    }

    /**
     * Unsets the value for child leaf "pdu-invalid-error-rx".
     */
    public void unsetPduInvalidErrorRxValue() throws JNCException {
        delete("pdu-invalid-error-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pdu-invalid-error-rx" leaf will not have a value.
     */
    public void addPduInvalidErrorRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdu-invalid-error-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pdu-invalid-error-rx" with operation "replace".
     */
    public void markPduInvalidErrorRxReplace() throws JNCException {
        markLeafReplace("pduInvalidErrorRx");
    }

    /**
     * Marks the leaf "pdu-invalid-error-rx" with operation "merge".
     */
    public void markPduInvalidErrorRxMerge() throws JNCException {
        markLeafMerge("pduInvalidErrorRx");
    }

    /**
     * Marks the leaf "pdu-invalid-error-rx" with operation "create".
     */
    public void markPduInvalidErrorRxCreate() throws JNCException {
        markLeafCreate("pduInvalidErrorRx");
    }

    /**
     * Marks the leaf "pdu-invalid-error-rx" with operation "delete".
     */
    public void markPduInvalidErrorRxDelete() throws JNCException {
        markLeafDelete("pduInvalidErrorRx");
    }

    /* Access methods for optional leaf child: "pdu-disc-too-big-rx". */

    /**
     * Gets the value for child leaf "pdu-disc-too-big-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getPduDiscTooBigRxValue() throws JNCException {
        return (YangUInt32)getValue("pdu-disc-too-big-rx");
    }

    /**
     * Sets the value for child leaf "pdu-disc-too-big-rx",
     * using instance of generated typedef class.
     * @param pduDiscTooBigRxValue The value to set.
     * @param pduDiscTooBigRxValue used during instantiation.
     */
    public void setPduDiscTooBigRxValue(YangUInt32 pduDiscTooBigRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdu-disc-too-big-rx",
            pduDiscTooBigRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pdu-disc-too-big-rx",
     * using Java primitive values.
     * @param pduDiscTooBigRxValue used during instantiation.
     */
    public void setPduDiscTooBigRxValue(long pduDiscTooBigRxValue)
            throws JNCException {
        setPduDiscTooBigRxValue(new YangUInt32(pduDiscTooBigRxValue));
    }

    /**
     * Sets the value for child leaf "pdu-disc-too-big-rx",
     * using a String value.
     * @param pduDiscTooBigRxValue used during instantiation.
     */
    public void setPduDiscTooBigRxValue(String pduDiscTooBigRxValue)
            throws JNCException {
        setPduDiscTooBigRxValue(new YangUInt32(pduDiscTooBigRxValue));
    }

    /**
     * Unsets the value for child leaf "pdu-disc-too-big-rx".
     */
    public void unsetPduDiscTooBigRxValue() throws JNCException {
        delete("pdu-disc-too-big-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pdu-disc-too-big-rx" leaf will not have a value.
     */
    public void addPduDiscTooBigRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pdu-disc-too-big-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "pdu-disc-too-big-rx" with operation "replace".
     */
    public void markPduDiscTooBigRxReplace() throws JNCException {
        markLeafReplace("pduDiscTooBigRx");
    }

    /**
     * Marks the leaf "pdu-disc-too-big-rx" with operation "merge".
     */
    public void markPduDiscTooBigRxMerge() throws JNCException {
        markLeafMerge("pduDiscTooBigRx");
    }

    /**
     * Marks the leaf "pdu-disc-too-big-rx" with operation "create".
     */
    public void markPduDiscTooBigRxCreate() throws JNCException {
        markLeafCreate("pduDiscTooBigRx");
    }

    /**
     * Marks the leaf "pdu-disc-too-big-rx" with operation "delete".
     */
    public void markPduDiscTooBigRxDelete() throws JNCException {
        markLeafDelete("pduDiscTooBigRx");
    }

    /* Access methods for optional leaf child: "err-pdu-protocol-error-rx". */

    /**
     * Gets the value for child leaf "err-pdu-protocol-error-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduProtocolErrorRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-protocol-error-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-protocol-error-rx",
     * using instance of generated typedef class.
     * @param errPduProtocolErrorRxValue The value to set.
     * @param errPduProtocolErrorRxValue used during instantiation.
     */
    public void setErrPduProtocolErrorRxValue(YangUInt32 errPduProtocolErrorRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-protocol-error-rx",
            errPduProtocolErrorRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-protocol-error-rx",
     * using Java primitive values.
     * @param errPduProtocolErrorRxValue used during instantiation.
     */
    public void setErrPduProtocolErrorRxValue(long errPduProtocolErrorRxValue)
            throws JNCException {
        setErrPduProtocolErrorRxValue(new YangUInt32(errPduProtocolErrorRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-protocol-error-rx",
     * using a String value.
     * @param errPduProtocolErrorRxValue used during instantiation.
     */
    public void setErrPduProtocolErrorRxValue(String errPduProtocolErrorRxValue)
            throws JNCException {
        setErrPduProtocolErrorRxValue(new YangUInt32(errPduProtocolErrorRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-protocol-error-rx".
     */
    public void unsetErrPduProtocolErrorRxValue() throws JNCException {
        delete("err-pdu-protocol-error-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-protocol-error-rx" leaf will not have a value.
     */
    public void addErrPduProtocolErrorRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-protocol-error-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-protocol-error-rx" with operation "replace".
     */
    public void markErrPduProtocolErrorRxReplace() throws JNCException {
        markLeafReplace("errPduProtocolErrorRx");
    }

    /**
     * Marks the leaf "err-pdu-protocol-error-rx" with operation "merge".
     */
    public void markErrPduProtocolErrorRxMerge() throws JNCException {
        markLeafMerge("errPduProtocolErrorRx");
    }

    /**
     * Marks the leaf "err-pdu-protocol-error-rx" with operation "create".
     */
    public void markErrPduProtocolErrorRxCreate() throws JNCException {
        markLeafCreate("errPduProtocolErrorRx");
    }

    /**
     * Marks the leaf "err-pdu-protocol-error-rx" with operation "delete".
     */
    public void markErrPduProtocolErrorRxDelete() throws JNCException {
        markLeafDelete("errPduProtocolErrorRx");
    }

    /* Access methods for optional leaf child: "err-pdu-invalid-network-app-rx". */

    /**
     * Gets the value for child leaf "err-pdu-invalid-network-app-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduInvalidNetworkAppRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-invalid-network-app-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-network-app-rx",
     * using instance of generated typedef class.
     * @param errPduInvalidNetworkAppRxValue The value to set.
     * @param errPduInvalidNetworkAppRxValue used during instantiation.
     */
    public void setErrPduInvalidNetworkAppRxValue(YangUInt32 errPduInvalidNetworkAppRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-network-app-rx",
            errPduInvalidNetworkAppRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-network-app-rx",
     * using Java primitive values.
     * @param errPduInvalidNetworkAppRxValue used during instantiation.
     */
    public void setErrPduInvalidNetworkAppRxValue(long errPduInvalidNetworkAppRxValue)
            throws JNCException {
        setErrPduInvalidNetworkAppRxValue(new YangUInt32(errPduInvalidNetworkAppRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-network-app-rx",
     * using a String value.
     * @param errPduInvalidNetworkAppRxValue used during instantiation.
     */
    public void setErrPduInvalidNetworkAppRxValue(String errPduInvalidNetworkAppRxValue)
            throws JNCException {
        setErrPduInvalidNetworkAppRxValue(new YangUInt32(errPduInvalidNetworkAppRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-invalid-network-app-rx".
     */
    public void unsetErrPduInvalidNetworkAppRxValue() throws JNCException {
        delete("err-pdu-invalid-network-app-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-invalid-network-app-rx" leaf will not have a value.
     */
    public void addErrPduInvalidNetworkAppRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-network-app-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-invalid-network-app-rx" with operation "replace".
     */
    public void markErrPduInvalidNetworkAppRxReplace() throws JNCException {
        markLeafReplace("errPduInvalidNetworkAppRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-network-app-rx" with operation "merge".
     */
    public void markErrPduInvalidNetworkAppRxMerge() throws JNCException {
        markLeafMerge("errPduInvalidNetworkAppRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-network-app-rx" with operation "create".
     */
    public void markErrPduInvalidNetworkAppRxCreate() throws JNCException {
        markLeafCreate("errPduInvalidNetworkAppRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-network-app-rx" with operation "delete".
     */
    public void markErrPduInvalidNetworkAppRxDelete() throws JNCException {
        markLeafDelete("errPduInvalidNetworkAppRx");
    }

    /* Access methods for optional leaf child: "err-pdu-invalid-version-rx". */

    /**
     * Gets the value for child leaf "err-pdu-invalid-version-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduInvalidVersionRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-invalid-version-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-version-rx",
     * using instance of generated typedef class.
     * @param errPduInvalidVersionRxValue The value to set.
     * @param errPduInvalidVersionRxValue used during instantiation.
     */
    public void setErrPduInvalidVersionRxValue(YangUInt32 errPduInvalidVersionRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-version-rx",
            errPduInvalidVersionRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-version-rx",
     * using Java primitive values.
     * @param errPduInvalidVersionRxValue used during instantiation.
     */
    public void setErrPduInvalidVersionRxValue(long errPduInvalidVersionRxValue)
            throws JNCException {
        setErrPduInvalidVersionRxValue(new YangUInt32(errPduInvalidVersionRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-version-rx",
     * using a String value.
     * @param errPduInvalidVersionRxValue used during instantiation.
     */
    public void setErrPduInvalidVersionRxValue(String errPduInvalidVersionRxValue)
            throws JNCException {
        setErrPduInvalidVersionRxValue(new YangUInt32(errPduInvalidVersionRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-invalid-version-rx".
     */
    public void unsetErrPduInvalidVersionRxValue() throws JNCException {
        delete("err-pdu-invalid-version-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-invalid-version-rx" leaf will not have a value.
     */
    public void addErrPduInvalidVersionRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-version-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-invalid-version-rx" with operation "replace".
     */
    public void markErrPduInvalidVersionRxReplace() throws JNCException {
        markLeafReplace("errPduInvalidVersionRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-version-rx" with operation "merge".
     */
    public void markErrPduInvalidVersionRxMerge() throws JNCException {
        markLeafMerge("errPduInvalidVersionRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-version-rx" with operation "create".
     */
    public void markErrPduInvalidVersionRxCreate() throws JNCException {
        markLeafCreate("errPduInvalidVersionRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-version-rx" with operation "delete".
     */
    public void markErrPduInvalidVersionRxDelete() throws JNCException {
        markLeafDelete("errPduInvalidVersionRx");
    }

    /* Access methods for optional leaf child: "err-pdu-no-configured-as-rx". */

    /**
     * Gets the value for child leaf "err-pdu-no-configured-as-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduNoConfiguredAsRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-no-configured-as-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-no-configured-as-rx",
     * using instance of generated typedef class.
     * @param errPduNoConfiguredAsRxValue The value to set.
     * @param errPduNoConfiguredAsRxValue used during instantiation.
     */
    public void setErrPduNoConfiguredAsRxValue(YangUInt32 errPduNoConfiguredAsRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-no-configured-as-rx",
            errPduNoConfiguredAsRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-no-configured-as-rx",
     * using Java primitive values.
     * @param errPduNoConfiguredAsRxValue used during instantiation.
     */
    public void setErrPduNoConfiguredAsRxValue(long errPduNoConfiguredAsRxValue)
            throws JNCException {
        setErrPduNoConfiguredAsRxValue(new YangUInt32(errPduNoConfiguredAsRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-no-configured-as-rx",
     * using a String value.
     * @param errPduNoConfiguredAsRxValue used during instantiation.
     */
    public void setErrPduNoConfiguredAsRxValue(String errPduNoConfiguredAsRxValue)
            throws JNCException {
        setErrPduNoConfiguredAsRxValue(new YangUInt32(errPduNoConfiguredAsRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-no-configured-as-rx".
     */
    public void unsetErrPduNoConfiguredAsRxValue() throws JNCException {
        delete("err-pdu-no-configured-as-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-no-configured-as-rx" leaf will not have a value.
     */
    public void addErrPduNoConfiguredAsRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-no-configured-as-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-no-configured-as-rx" with operation "replace".
     */
    public void markErrPduNoConfiguredAsRxReplace() throws JNCException {
        markLeafReplace("errPduNoConfiguredAsRx");
    }

    /**
     * Marks the leaf "err-pdu-no-configured-as-rx" with operation "merge".
     */
    public void markErrPduNoConfiguredAsRxMerge() throws JNCException {
        markLeafMerge("errPduNoConfiguredAsRx");
    }

    /**
     * Marks the leaf "err-pdu-no-configured-as-rx" with operation "create".
     */
    public void markErrPduNoConfiguredAsRxCreate() throws JNCException {
        markLeafCreate("errPduNoConfiguredAsRx");
    }

    /**
     * Marks the leaf "err-pdu-no-configured-as-rx" with operation "delete".
     */
    public void markErrPduNoConfiguredAsRxDelete() throws JNCException {
        markLeafDelete("errPduNoConfiguredAsRx");
    }

    /* Access methods for optional leaf child: "err-pdu-unsupported-traf-md-rx". */

    /**
     * Gets the value for child leaf "err-pdu-unsupported-traf-md-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduUnsupportedTrafMdRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-unsupported-traf-md-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-traf-md-rx",
     * using instance of generated typedef class.
     * @param errPduUnsupportedTrafMdRxValue The value to set.
     * @param errPduUnsupportedTrafMdRxValue used during instantiation.
     */
    public void setErrPduUnsupportedTrafMdRxValue(YangUInt32 errPduUnsupportedTrafMdRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unsupported-traf-md-rx",
            errPduUnsupportedTrafMdRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-traf-md-rx",
     * using Java primitive values.
     * @param errPduUnsupportedTrafMdRxValue used during instantiation.
     */
    public void setErrPduUnsupportedTrafMdRxValue(long errPduUnsupportedTrafMdRxValue)
            throws JNCException {
        setErrPduUnsupportedTrafMdRxValue(new YangUInt32(errPduUnsupportedTrafMdRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-traf-md-rx",
     * using a String value.
     * @param errPduUnsupportedTrafMdRxValue used during instantiation.
     */
    public void setErrPduUnsupportedTrafMdRxValue(String errPduUnsupportedTrafMdRxValue)
            throws JNCException {
        setErrPduUnsupportedTrafMdRxValue(new YangUInt32(errPduUnsupportedTrafMdRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-unsupported-traf-md-rx".
     */
    public void unsetErrPduUnsupportedTrafMdRxValue() throws JNCException {
        delete("err-pdu-unsupported-traf-md-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-unsupported-traf-md-rx" leaf will not have a value.
     */
    public void addErrPduUnsupportedTrafMdRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unsupported-traf-md-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-unsupported-traf-md-rx" with operation "replace".
     */
    public void markErrPduUnsupportedTrafMdRxReplace() throws JNCException {
        markLeafReplace("errPduUnsupportedTrafMdRx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-traf-md-rx" with operation "merge".
     */
    public void markErrPduUnsupportedTrafMdRxMerge() throws JNCException {
        markLeafMerge("errPduUnsupportedTrafMdRx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-traf-md-rx" with operation "create".
     */
    public void markErrPduUnsupportedTrafMdRxCreate() throws JNCException {
        markLeafCreate("errPduUnsupportedTrafMdRx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-traf-md-rx" with operation "delete".
     */
    public void markErrPduUnsupportedTrafMdRxDelete() throws JNCException {
        markLeafDelete("errPduUnsupportedTrafMdRx");
    }

    /* Access methods for optional leaf child: "err-pdu-unexpected-parm-rx". */

    /**
     * Gets the value for child leaf "err-pdu-unexpected-parm-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduUnexpectedParmRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-unexpected-parm-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-unexpected-parm-rx",
     * using instance of generated typedef class.
     * @param errPduUnexpectedParmRxValue The value to set.
     * @param errPduUnexpectedParmRxValue used during instantiation.
     */
    public void setErrPduUnexpectedParmRxValue(YangUInt32 errPduUnexpectedParmRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unexpected-parm-rx",
            errPduUnexpectedParmRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-unexpected-parm-rx",
     * using Java primitive values.
     * @param errPduUnexpectedParmRxValue used during instantiation.
     */
    public void setErrPduUnexpectedParmRxValue(long errPduUnexpectedParmRxValue)
            throws JNCException {
        setErrPduUnexpectedParmRxValue(new YangUInt32(errPduUnexpectedParmRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-unexpected-parm-rx",
     * using a String value.
     * @param errPduUnexpectedParmRxValue used during instantiation.
     */
    public void setErrPduUnexpectedParmRxValue(String errPduUnexpectedParmRxValue)
            throws JNCException {
        setErrPduUnexpectedParmRxValue(new YangUInt32(errPduUnexpectedParmRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-unexpected-parm-rx".
     */
    public void unsetErrPduUnexpectedParmRxValue() throws JNCException {
        delete("err-pdu-unexpected-parm-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-unexpected-parm-rx" leaf will not have a value.
     */
    public void addErrPduUnexpectedParmRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unexpected-parm-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-unexpected-parm-rx" with operation "replace".
     */
    public void markErrPduUnexpectedParmRxReplace() throws JNCException {
        markLeafReplace("errPduUnexpectedParmRx");
    }

    /**
     * Marks the leaf "err-pdu-unexpected-parm-rx" with operation "merge".
     */
    public void markErrPduUnexpectedParmRxMerge() throws JNCException {
        markLeafMerge("errPduUnexpectedParmRx");
    }

    /**
     * Marks the leaf "err-pdu-unexpected-parm-rx" with operation "create".
     */
    public void markErrPduUnexpectedParmRxCreate() throws JNCException {
        markLeafCreate("errPduUnexpectedParmRx");
    }

    /**
     * Marks the leaf "err-pdu-unexpected-parm-rx" with operation "delete".
     */
    public void markErrPduUnexpectedParmRxDelete() throws JNCException {
        markLeafDelete("errPduUnexpectedParmRx");
    }

    /* Access methods for optional leaf child: "err-pdu-missing-parm-rx". */

    /**
     * Gets the value for child leaf "err-pdu-missing-parm-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduMissingParmRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-missing-parm-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-missing-parm-rx",
     * using instance of generated typedef class.
     * @param errPduMissingParmRxValue The value to set.
     * @param errPduMissingParmRxValue used during instantiation.
     */
    public void setErrPduMissingParmRxValue(YangUInt32 errPduMissingParmRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-missing-parm-rx",
            errPduMissingParmRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-missing-parm-rx",
     * using Java primitive values.
     * @param errPduMissingParmRxValue used during instantiation.
     */
    public void setErrPduMissingParmRxValue(long errPduMissingParmRxValue)
            throws JNCException {
        setErrPduMissingParmRxValue(new YangUInt32(errPduMissingParmRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-missing-parm-rx",
     * using a String value.
     * @param errPduMissingParmRxValue used during instantiation.
     */
    public void setErrPduMissingParmRxValue(String errPduMissingParmRxValue)
            throws JNCException {
        setErrPduMissingParmRxValue(new YangUInt32(errPduMissingParmRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-missing-parm-rx".
     */
    public void unsetErrPduMissingParmRxValue() throws JNCException {
        delete("err-pdu-missing-parm-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-missing-parm-rx" leaf will not have a value.
     */
    public void addErrPduMissingParmRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-missing-parm-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-missing-parm-rx" with operation "replace".
     */
    public void markErrPduMissingParmRxReplace() throws JNCException {
        markLeafReplace("errPduMissingParmRx");
    }

    /**
     * Marks the leaf "err-pdu-missing-parm-rx" with operation "merge".
     */
    public void markErrPduMissingParmRxMerge() throws JNCException {
        markLeafMerge("errPduMissingParmRx");
    }

    /**
     * Marks the leaf "err-pdu-missing-parm-rx" with operation "create".
     */
    public void markErrPduMissingParmRxCreate() throws JNCException {
        markLeafCreate("errPduMissingParmRx");
    }

    /**
     * Marks the leaf "err-pdu-missing-parm-rx" with operation "delete".
     */
    public void markErrPduMissingParmRxDelete() throws JNCException {
        markLeafDelete("errPduMissingParmRx");
    }

    /* Access methods for optional leaf child: "err-pdu-invalid-aspid-rx". */

    /**
     * Gets the value for child leaf "err-pdu-invalid-aspid-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduInvalidAspidRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-invalid-aspid-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-aspid-rx",
     * using instance of generated typedef class.
     * @param errPduInvalidAspidRxValue The value to set.
     * @param errPduInvalidAspidRxValue used during instantiation.
     */
    public void setErrPduInvalidAspidRxValue(YangUInt32 errPduInvalidAspidRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-aspid-rx",
            errPduInvalidAspidRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-aspid-rx",
     * using Java primitive values.
     * @param errPduInvalidAspidRxValue used during instantiation.
     */
    public void setErrPduInvalidAspidRxValue(long errPduInvalidAspidRxValue)
            throws JNCException {
        setErrPduInvalidAspidRxValue(new YangUInt32(errPduInvalidAspidRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-aspid-rx",
     * using a String value.
     * @param errPduInvalidAspidRxValue used during instantiation.
     */
    public void setErrPduInvalidAspidRxValue(String errPduInvalidAspidRxValue)
            throws JNCException {
        setErrPduInvalidAspidRxValue(new YangUInt32(errPduInvalidAspidRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-invalid-aspid-rx".
     */
    public void unsetErrPduInvalidAspidRxValue() throws JNCException {
        delete("err-pdu-invalid-aspid-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-invalid-aspid-rx" leaf will not have a value.
     */
    public void addErrPduInvalidAspidRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-aspid-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-invalid-aspid-rx" with operation "replace".
     */
    public void markErrPduInvalidAspidRxReplace() throws JNCException {
        markLeafReplace("errPduInvalidAspidRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-aspid-rx" with operation "merge".
     */
    public void markErrPduInvalidAspidRxMerge() throws JNCException {
        markLeafMerge("errPduInvalidAspidRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-aspid-rx" with operation "create".
     */
    public void markErrPduInvalidAspidRxCreate() throws JNCException {
        markLeafCreate("errPduInvalidAspidRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-aspid-rx" with operation "delete".
     */
    public void markErrPduInvalidAspidRxDelete() throws JNCException {
        markLeafDelete("errPduInvalidAspidRx");
    }

    /* Access methods for optional leaf child: "err-pdu-dest-status-unknown-rx". */

    /**
     * Gets the value for child leaf "err-pdu-dest-status-unknown-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduDestStatusUnknownRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-dest-status-unknown-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-dest-status-unknown-rx",
     * using instance of generated typedef class.
     * @param errPduDestStatusUnknownRxValue The value to set.
     * @param errPduDestStatusUnknownRxValue used during instantiation.
     */
    public void setErrPduDestStatusUnknownRxValue(YangUInt32 errPduDestStatusUnknownRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-dest-status-unknown-rx",
            errPduDestStatusUnknownRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-dest-status-unknown-rx",
     * using Java primitive values.
     * @param errPduDestStatusUnknownRxValue used during instantiation.
     */
    public void setErrPduDestStatusUnknownRxValue(long errPduDestStatusUnknownRxValue)
            throws JNCException {
        setErrPduDestStatusUnknownRxValue(new YangUInt32(errPduDestStatusUnknownRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-dest-status-unknown-rx",
     * using a String value.
     * @param errPduDestStatusUnknownRxValue used during instantiation.
     */
    public void setErrPduDestStatusUnknownRxValue(String errPduDestStatusUnknownRxValue)
            throws JNCException {
        setErrPduDestStatusUnknownRxValue(new YangUInt32(errPduDestStatusUnknownRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-dest-status-unknown-rx".
     */
    public void unsetErrPduDestStatusUnknownRxValue() throws JNCException {
        delete("err-pdu-dest-status-unknown-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-dest-status-unknown-rx" leaf will not have a value.
     */
    public void addErrPduDestStatusUnknownRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-dest-status-unknown-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-dest-status-unknown-rx" with operation "replace".
     */
    public void markErrPduDestStatusUnknownRxReplace() throws JNCException {
        markLeafReplace("errPduDestStatusUnknownRx");
    }

    /**
     * Marks the leaf "err-pdu-dest-status-unknown-rx" with operation "merge".
     */
    public void markErrPduDestStatusUnknownRxMerge() throws JNCException {
        markLeafMerge("errPduDestStatusUnknownRx");
    }

    /**
     * Marks the leaf "err-pdu-dest-status-unknown-rx" with operation "create".
     */
    public void markErrPduDestStatusUnknownRxCreate() throws JNCException {
        markLeafCreate("errPduDestStatusUnknownRx");
    }

    /**
     * Marks the leaf "err-pdu-dest-status-unknown-rx" with operation "delete".
     */
    public void markErrPduDestStatusUnknownRxDelete() throws JNCException {
        markLeafDelete("errPduDestStatusUnknownRx");
    }

    /* Access methods for optional leaf child: "err-pdu-parm-err-rx". */

    /**
     * Gets the value for child leaf "err-pdu-parm-err-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduParmErrRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-parm-err-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-parm-err-rx",
     * using instance of generated typedef class.
     * @param errPduParmErrRxValue The value to set.
     * @param errPduParmErrRxValue used during instantiation.
     */
    public void setErrPduParmErrRxValue(YangUInt32 errPduParmErrRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-parm-err-rx",
            errPduParmErrRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-parm-err-rx",
     * using Java primitive values.
     * @param errPduParmErrRxValue used during instantiation.
     */
    public void setErrPduParmErrRxValue(long errPduParmErrRxValue)
            throws JNCException {
        setErrPduParmErrRxValue(new YangUInt32(errPduParmErrRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-parm-err-rx",
     * using a String value.
     * @param errPduParmErrRxValue used during instantiation.
     */
    public void setErrPduParmErrRxValue(String errPduParmErrRxValue)
            throws JNCException {
        setErrPduParmErrRxValue(new YangUInt32(errPduParmErrRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-parm-err-rx".
     */
    public void unsetErrPduParmErrRxValue() throws JNCException {
        delete("err-pdu-parm-err-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-parm-err-rx" leaf will not have a value.
     */
    public void addErrPduParmErrRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-parm-err-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-parm-err-rx" with operation "replace".
     */
    public void markErrPduParmErrRxReplace() throws JNCException {
        markLeafReplace("errPduParmErrRx");
    }

    /**
     * Marks the leaf "err-pdu-parm-err-rx" with operation "merge".
     */
    public void markErrPduParmErrRxMerge() throws JNCException {
        markLeafMerge("errPduParmErrRx");
    }

    /**
     * Marks the leaf "err-pdu-parm-err-rx" with operation "create".
     */
    public void markErrPduParmErrRxCreate() throws JNCException {
        markLeafCreate("errPduParmErrRx");
    }

    /**
     * Marks the leaf "err-pdu-parm-err-rx" with operation "delete".
     */
    public void markErrPduParmErrRxDelete() throws JNCException {
        markLeafDelete("errPduParmErrRx");
    }

    /* Access methods for optional leaf child: "err-pdu-invalid-routing-rx". */

    /**
     * Gets the value for child leaf "err-pdu-invalid-routing-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduInvalidRoutingRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-invalid-routing-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-routing-rx",
     * using instance of generated typedef class.
     * @param errPduInvalidRoutingRxValue The value to set.
     * @param errPduInvalidRoutingRxValue used during instantiation.
     */
    public void setErrPduInvalidRoutingRxValue(YangUInt32 errPduInvalidRoutingRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-routing-rx",
            errPduInvalidRoutingRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-routing-rx",
     * using Java primitive values.
     * @param errPduInvalidRoutingRxValue used during instantiation.
     */
    public void setErrPduInvalidRoutingRxValue(long errPduInvalidRoutingRxValue)
            throws JNCException {
        setErrPduInvalidRoutingRxValue(new YangUInt32(errPduInvalidRoutingRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-routing-rx",
     * using a String value.
     * @param errPduInvalidRoutingRxValue used during instantiation.
     */
    public void setErrPduInvalidRoutingRxValue(String errPduInvalidRoutingRxValue)
            throws JNCException {
        setErrPduInvalidRoutingRxValue(new YangUInt32(errPduInvalidRoutingRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-invalid-routing-rx".
     */
    public void unsetErrPduInvalidRoutingRxValue() throws JNCException {
        delete("err-pdu-invalid-routing-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-invalid-routing-rx" leaf will not have a value.
     */
    public void addErrPduInvalidRoutingRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-routing-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-invalid-routing-rx" with operation "replace".
     */
    public void markErrPduInvalidRoutingRxReplace() throws JNCException {
        markLeafReplace("errPduInvalidRoutingRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-routing-rx" with operation "merge".
     */
    public void markErrPduInvalidRoutingRxMerge() throws JNCException {
        markLeafMerge("errPduInvalidRoutingRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-routing-rx" with operation "create".
     */
    public void markErrPduInvalidRoutingRxCreate() throws JNCException {
        markLeafCreate("errPduInvalidRoutingRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-routing-rx" with operation "delete".
     */
    public void markErrPduInvalidRoutingRxDelete() throws JNCException {
        markLeafDelete("errPduInvalidRoutingRx");
    }

    /* Access methods for optional leaf child: "err-pdu-invalid-streamid-rx". */

    /**
     * Gets the value for child leaf "err-pdu-invalid-streamid-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduInvalidStreamidRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-invalid-streamid-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-streamid-rx",
     * using instance of generated typedef class.
     * @param errPduInvalidStreamidRxValue The value to set.
     * @param errPduInvalidStreamidRxValue used during instantiation.
     */
    public void setErrPduInvalidStreamidRxValue(YangUInt32 errPduInvalidStreamidRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-streamid-rx",
            errPduInvalidStreamidRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-streamid-rx",
     * using Java primitive values.
     * @param errPduInvalidStreamidRxValue used during instantiation.
     */
    public void setErrPduInvalidStreamidRxValue(long errPduInvalidStreamidRxValue)
            throws JNCException {
        setErrPduInvalidStreamidRxValue(new YangUInt32(errPduInvalidStreamidRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-streamid-rx",
     * using a String value.
     * @param errPduInvalidStreamidRxValue used during instantiation.
     */
    public void setErrPduInvalidStreamidRxValue(String errPduInvalidStreamidRxValue)
            throws JNCException {
        setErrPduInvalidStreamidRxValue(new YangUInt32(errPduInvalidStreamidRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-invalid-streamid-rx".
     */
    public void unsetErrPduInvalidStreamidRxValue() throws JNCException {
        delete("err-pdu-invalid-streamid-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-invalid-streamid-rx" leaf will not have a value.
     */
    public void addErrPduInvalidStreamidRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-streamid-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-invalid-streamid-rx" with operation "replace".
     */
    public void markErrPduInvalidStreamidRxReplace() throws JNCException {
        markLeafReplace("errPduInvalidStreamidRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-streamid-rx" with operation "merge".
     */
    public void markErrPduInvalidStreamidRxMerge() throws JNCException {
        markLeafMerge("errPduInvalidStreamidRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-streamid-rx" with operation "create".
     */
    public void markErrPduInvalidStreamidRxCreate() throws JNCException {
        markLeafCreate("errPduInvalidStreamidRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-streamid-rx" with operation "delete".
     */
    public void markErrPduInvalidStreamidRxDelete() throws JNCException {
        markLeafDelete("errPduInvalidStreamidRx");
    }

    /* Access methods for optional leaf child: "err-pdu-unsupported-msg-type-rx". */

    /**
     * Gets the value for child leaf "err-pdu-unsupported-msg-type-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduUnsupportedMsgTypeRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-unsupported-msg-type-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-msg-type-rx",
     * using instance of generated typedef class.
     * @param errPduUnsupportedMsgTypeRxValue The value to set.
     * @param errPduUnsupportedMsgTypeRxValue used during instantiation.
     */
    public void setErrPduUnsupportedMsgTypeRxValue(YangUInt32 errPduUnsupportedMsgTypeRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unsupported-msg-type-rx",
            errPduUnsupportedMsgTypeRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-msg-type-rx",
     * using Java primitive values.
     * @param errPduUnsupportedMsgTypeRxValue used during instantiation.
     */
    public void setErrPduUnsupportedMsgTypeRxValue(long errPduUnsupportedMsgTypeRxValue)
            throws JNCException {
        setErrPduUnsupportedMsgTypeRxValue(new YangUInt32(errPduUnsupportedMsgTypeRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-msg-type-rx",
     * using a String value.
     * @param errPduUnsupportedMsgTypeRxValue used during instantiation.
     */
    public void setErrPduUnsupportedMsgTypeRxValue(String errPduUnsupportedMsgTypeRxValue)
            throws JNCException {
        setErrPduUnsupportedMsgTypeRxValue(new YangUInt32(errPduUnsupportedMsgTypeRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-unsupported-msg-type-rx".
     */
    public void unsetErrPduUnsupportedMsgTypeRxValue() throws JNCException {
        delete("err-pdu-unsupported-msg-type-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-unsupported-msg-type-rx" leaf will not have a value.
     */
    public void addErrPduUnsupportedMsgTypeRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unsupported-msg-type-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-unsupported-msg-type-rx" with operation "replace".
     */
    public void markErrPduUnsupportedMsgTypeRxReplace() throws JNCException {
        markLeafReplace("errPduUnsupportedMsgTypeRx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-msg-type-rx" with operation "merge".
     */
    public void markErrPduUnsupportedMsgTypeRxMerge() throws JNCException {
        markLeafMerge("errPduUnsupportedMsgTypeRx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-msg-type-rx" with operation "create".
     */
    public void markErrPduUnsupportedMsgTypeRxCreate() throws JNCException {
        markLeafCreate("errPduUnsupportedMsgTypeRx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-msg-type-rx" with operation "delete".
     */
    public void markErrPduUnsupportedMsgTypeRxDelete() throws JNCException {
        markLeafDelete("errPduUnsupportedMsgTypeRx");
    }

    /* Access methods for optional leaf child: "err-pdu-unexpected-msg-rx". */

    /**
     * Gets the value for child leaf "err-pdu-unexpected-msg-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduUnexpectedMsgRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-unexpected-msg-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-unexpected-msg-rx",
     * using instance of generated typedef class.
     * @param errPduUnexpectedMsgRxValue The value to set.
     * @param errPduUnexpectedMsgRxValue used during instantiation.
     */
    public void setErrPduUnexpectedMsgRxValue(YangUInt32 errPduUnexpectedMsgRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unexpected-msg-rx",
            errPduUnexpectedMsgRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-unexpected-msg-rx",
     * using Java primitive values.
     * @param errPduUnexpectedMsgRxValue used during instantiation.
     */
    public void setErrPduUnexpectedMsgRxValue(long errPduUnexpectedMsgRxValue)
            throws JNCException {
        setErrPduUnexpectedMsgRxValue(new YangUInt32(errPduUnexpectedMsgRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-unexpected-msg-rx",
     * using a String value.
     * @param errPduUnexpectedMsgRxValue used during instantiation.
     */
    public void setErrPduUnexpectedMsgRxValue(String errPduUnexpectedMsgRxValue)
            throws JNCException {
        setErrPduUnexpectedMsgRxValue(new YangUInt32(errPduUnexpectedMsgRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-unexpected-msg-rx".
     */
    public void unsetErrPduUnexpectedMsgRxValue() throws JNCException {
        delete("err-pdu-unexpected-msg-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-unexpected-msg-rx" leaf will not have a value.
     */
    public void addErrPduUnexpectedMsgRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unexpected-msg-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-unexpected-msg-rx" with operation "replace".
     */
    public void markErrPduUnexpectedMsgRxReplace() throws JNCException {
        markLeafReplace("errPduUnexpectedMsgRx");
    }

    /**
     * Marks the leaf "err-pdu-unexpected-msg-rx" with operation "merge".
     */
    public void markErrPduUnexpectedMsgRxMerge() throws JNCException {
        markLeafMerge("errPduUnexpectedMsgRx");
    }

    /**
     * Marks the leaf "err-pdu-unexpected-msg-rx" with operation "create".
     */
    public void markErrPduUnexpectedMsgRxCreate() throws JNCException {
        markLeafCreate("errPduUnexpectedMsgRx");
    }

    /**
     * Marks the leaf "err-pdu-unexpected-msg-rx" with operation "delete".
     */
    public void markErrPduUnexpectedMsgRxDelete() throws JNCException {
        markLeafDelete("errPduUnexpectedMsgRx");
    }

    /* Access methods for optional leaf child: "err-pdu-invalid-parm-value-rx". */

    /**
     * Gets the value for child leaf "err-pdu-invalid-parm-value-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduInvalidParmValueRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-invalid-parm-value-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-parm-value-rx",
     * using instance of generated typedef class.
     * @param errPduInvalidParmValueRxValue The value to set.
     * @param errPduInvalidParmValueRxValue used during instantiation.
     */
    public void setErrPduInvalidParmValueRxValue(YangUInt32 errPduInvalidParmValueRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-parm-value-rx",
            errPduInvalidParmValueRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-parm-value-rx",
     * using Java primitive values.
     * @param errPduInvalidParmValueRxValue used during instantiation.
     */
    public void setErrPduInvalidParmValueRxValue(long errPduInvalidParmValueRxValue)
            throws JNCException {
        setErrPduInvalidParmValueRxValue(new YangUInt32(errPduInvalidParmValueRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-parm-value-rx",
     * using a String value.
     * @param errPduInvalidParmValueRxValue used during instantiation.
     */
    public void setErrPduInvalidParmValueRxValue(String errPduInvalidParmValueRxValue)
            throws JNCException {
        setErrPduInvalidParmValueRxValue(new YangUInt32(errPduInvalidParmValueRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-invalid-parm-value-rx".
     */
    public void unsetErrPduInvalidParmValueRxValue() throws JNCException {
        delete("err-pdu-invalid-parm-value-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-invalid-parm-value-rx" leaf will not have a value.
     */
    public void addErrPduInvalidParmValueRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-parm-value-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-invalid-parm-value-rx" with operation "replace".
     */
    public void markErrPduInvalidParmValueRxReplace() throws JNCException {
        markLeafReplace("errPduInvalidParmValueRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-parm-value-rx" with operation "merge".
     */
    public void markErrPduInvalidParmValueRxMerge() throws JNCException {
        markLeafMerge("errPduInvalidParmValueRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-parm-value-rx" with operation "create".
     */
    public void markErrPduInvalidParmValueRxCreate() throws JNCException {
        markLeafCreate("errPduInvalidParmValueRx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-parm-value-rx" with operation "delete".
     */
    public void markErrPduInvalidParmValueRxDelete() throws JNCException {
        markLeafDelete("errPduInvalidParmValueRx");
    }

    /* Access methods for optional leaf child: "err-pdu-aspid-required-rx". */

    /**
     * Gets the value for child leaf "err-pdu-aspid-required-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduAspidRequiredRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-aspid-required-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-aspid-required-rx",
     * using instance of generated typedef class.
     * @param errPduAspidRequiredRxValue The value to set.
     * @param errPduAspidRequiredRxValue used during instantiation.
     */
    public void setErrPduAspidRequiredRxValue(YangUInt32 errPduAspidRequiredRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-aspid-required-rx",
            errPduAspidRequiredRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-aspid-required-rx",
     * using Java primitive values.
     * @param errPduAspidRequiredRxValue used during instantiation.
     */
    public void setErrPduAspidRequiredRxValue(long errPduAspidRequiredRxValue)
            throws JNCException {
        setErrPduAspidRequiredRxValue(new YangUInt32(errPduAspidRequiredRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-aspid-required-rx",
     * using a String value.
     * @param errPduAspidRequiredRxValue used during instantiation.
     */
    public void setErrPduAspidRequiredRxValue(String errPduAspidRequiredRxValue)
            throws JNCException {
        setErrPduAspidRequiredRxValue(new YangUInt32(errPduAspidRequiredRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-aspid-required-rx".
     */
    public void unsetErrPduAspidRequiredRxValue() throws JNCException {
        delete("err-pdu-aspid-required-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-aspid-required-rx" leaf will not have a value.
     */
    public void addErrPduAspidRequiredRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-aspid-required-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-aspid-required-rx" with operation "replace".
     */
    public void markErrPduAspidRequiredRxReplace() throws JNCException {
        markLeafReplace("errPduAspidRequiredRx");
    }

    /**
     * Marks the leaf "err-pdu-aspid-required-rx" with operation "merge".
     */
    public void markErrPduAspidRequiredRxMerge() throws JNCException {
        markLeafMerge("errPduAspidRequiredRx");
    }

    /**
     * Marks the leaf "err-pdu-aspid-required-rx" with operation "create".
     */
    public void markErrPduAspidRequiredRxCreate() throws JNCException {
        markLeafCreate("errPduAspidRequiredRx");
    }

    /**
     * Marks the leaf "err-pdu-aspid-required-rx" with operation "delete".
     */
    public void markErrPduAspidRequiredRxDelete() throws JNCException {
        markLeafDelete("errPduAspidRequiredRx");
    }

    /* Access methods for optional leaf child: "err-pdu-refused-mgmt-block-rx". */

    /**
     * Gets the value for child leaf "err-pdu-refused-mgmt-block-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduRefusedMgmtBlockRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-refused-mgmt-block-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-refused-mgmt-block-rx",
     * using instance of generated typedef class.
     * @param errPduRefusedMgmtBlockRxValue The value to set.
     * @param errPduRefusedMgmtBlockRxValue used during instantiation.
     */
    public void setErrPduRefusedMgmtBlockRxValue(YangUInt32 errPduRefusedMgmtBlockRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-refused-mgmt-block-rx",
            errPduRefusedMgmtBlockRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-refused-mgmt-block-rx",
     * using Java primitive values.
     * @param errPduRefusedMgmtBlockRxValue used during instantiation.
     */
    public void setErrPduRefusedMgmtBlockRxValue(long errPduRefusedMgmtBlockRxValue)
            throws JNCException {
        setErrPduRefusedMgmtBlockRxValue(new YangUInt32(errPduRefusedMgmtBlockRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-refused-mgmt-block-rx",
     * using a String value.
     * @param errPduRefusedMgmtBlockRxValue used during instantiation.
     */
    public void setErrPduRefusedMgmtBlockRxValue(String errPduRefusedMgmtBlockRxValue)
            throws JNCException {
        setErrPduRefusedMgmtBlockRxValue(new YangUInt32(errPduRefusedMgmtBlockRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-refused-mgmt-block-rx".
     */
    public void unsetErrPduRefusedMgmtBlockRxValue() throws JNCException {
        delete("err-pdu-refused-mgmt-block-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-refused-mgmt-block-rx" leaf will not have a value.
     */
    public void addErrPduRefusedMgmtBlockRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-refused-mgmt-block-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-refused-mgmt-block-rx" with operation "replace".
     */
    public void markErrPduRefusedMgmtBlockRxReplace() throws JNCException {
        markLeafReplace("errPduRefusedMgmtBlockRx");
    }

    /**
     * Marks the leaf "err-pdu-refused-mgmt-block-rx" with operation "merge".
     */
    public void markErrPduRefusedMgmtBlockRxMerge() throws JNCException {
        markLeafMerge("errPduRefusedMgmtBlockRx");
    }

    /**
     * Marks the leaf "err-pdu-refused-mgmt-block-rx" with operation "create".
     */
    public void markErrPduRefusedMgmtBlockRxCreate() throws JNCException {
        markLeafCreate("errPduRefusedMgmtBlockRx");
    }

    /**
     * Marks the leaf "err-pdu-refused-mgmt-block-rx" with operation "delete".
     */
    public void markErrPduRefusedMgmtBlockRxDelete() throws JNCException {
        markLeafDelete("errPduRefusedMgmtBlockRx");
    }

    /* Access methods for optional leaf child: "err-pdu-unsupported-class-rx". */

    /**
     * Gets the value for child leaf "err-pdu-unsupported-class-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduUnsupportedClassRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-unsupported-class-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-class-rx",
     * using instance of generated typedef class.
     * @param errPduUnsupportedClassRxValue The value to set.
     * @param errPduUnsupportedClassRxValue used during instantiation.
     */
    public void setErrPduUnsupportedClassRxValue(YangUInt32 errPduUnsupportedClassRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unsupported-class-rx",
            errPduUnsupportedClassRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-class-rx",
     * using Java primitive values.
     * @param errPduUnsupportedClassRxValue used during instantiation.
     */
    public void setErrPduUnsupportedClassRxValue(long errPduUnsupportedClassRxValue)
            throws JNCException {
        setErrPduUnsupportedClassRxValue(new YangUInt32(errPduUnsupportedClassRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-class-rx",
     * using a String value.
     * @param errPduUnsupportedClassRxValue used during instantiation.
     */
    public void setErrPduUnsupportedClassRxValue(String errPduUnsupportedClassRxValue)
            throws JNCException {
        setErrPduUnsupportedClassRxValue(new YangUInt32(errPduUnsupportedClassRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-unsupported-class-rx".
     */
    public void unsetErrPduUnsupportedClassRxValue() throws JNCException {
        delete("err-pdu-unsupported-class-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-unsupported-class-rx" leaf will not have a value.
     */
    public void addErrPduUnsupportedClassRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unsupported-class-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-unsupported-class-rx" with operation "replace".
     */
    public void markErrPduUnsupportedClassRxReplace() throws JNCException {
        markLeafReplace("errPduUnsupportedClassRx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-class-rx" with operation "merge".
     */
    public void markErrPduUnsupportedClassRxMerge() throws JNCException {
        markLeafMerge("errPduUnsupportedClassRx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-class-rx" with operation "create".
     */
    public void markErrPduUnsupportedClassRxCreate() throws JNCException {
        markLeafCreate("errPduUnsupportedClassRx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-class-rx" with operation "delete".
     */
    public void markErrPduUnsupportedClassRxDelete() throws JNCException {
        markLeafDelete("errPduUnsupportedClassRx");
    }

    /* Access methods for optional leaf child: "err-pdu-unsupported-traf-rx". */

    /**
     * Gets the value for child leaf "err-pdu-unsupported-traf-rx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduUnsupportedTrafRxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-unsupported-traf-rx");
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-traf-rx",
     * using instance of generated typedef class.
     * @param errPduUnsupportedTrafRxValue The value to set.
     * @param errPduUnsupportedTrafRxValue used during instantiation.
     */
    public void setErrPduUnsupportedTrafRxValue(YangUInt32 errPduUnsupportedTrafRxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unsupported-traf-rx",
            errPduUnsupportedTrafRxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-traf-rx",
     * using Java primitive values.
     * @param errPduUnsupportedTrafRxValue used during instantiation.
     */
    public void setErrPduUnsupportedTrafRxValue(long errPduUnsupportedTrafRxValue)
            throws JNCException {
        setErrPduUnsupportedTrafRxValue(new YangUInt32(errPduUnsupportedTrafRxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-traf-rx",
     * using a String value.
     * @param errPduUnsupportedTrafRxValue used during instantiation.
     */
    public void setErrPduUnsupportedTrafRxValue(String errPduUnsupportedTrafRxValue)
            throws JNCException {
        setErrPduUnsupportedTrafRxValue(new YangUInt32(errPduUnsupportedTrafRxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-unsupported-traf-rx".
     */
    public void unsetErrPduUnsupportedTrafRxValue() throws JNCException {
        delete("err-pdu-unsupported-traf-rx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-unsupported-traf-rx" leaf will not have a value.
     */
    public void addErrPduUnsupportedTrafRx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unsupported-traf-rx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-unsupported-traf-rx" with operation "replace".
     */
    public void markErrPduUnsupportedTrafRxReplace() throws JNCException {
        markLeafReplace("errPduUnsupportedTrafRx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-traf-rx" with operation "merge".
     */
    public void markErrPduUnsupportedTrafRxMerge() throws JNCException {
        markLeafMerge("errPduUnsupportedTrafRx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-traf-rx" with operation "create".
     */
    public void markErrPduUnsupportedTrafRxCreate() throws JNCException {
        markLeafCreate("errPduUnsupportedTrafRx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-traf-rx" with operation "delete".
     */
    public void markErrPduUnsupportedTrafRxDelete() throws JNCException {
        markLeafDelete("errPduUnsupportedTrafRx");
    }

    /* Access methods for optional leaf child: "err-pdu-invalid-version-tx". */

    /**
     * Gets the value for child leaf "err-pdu-invalid-version-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduInvalidVersionTxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-invalid-version-tx");
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-version-tx",
     * using instance of generated typedef class.
     * @param errPduInvalidVersionTxValue The value to set.
     * @param errPduInvalidVersionTxValue used during instantiation.
     */
    public void setErrPduInvalidVersionTxValue(YangUInt32 errPduInvalidVersionTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-version-tx",
            errPduInvalidVersionTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-version-tx",
     * using Java primitive values.
     * @param errPduInvalidVersionTxValue used during instantiation.
     */
    public void setErrPduInvalidVersionTxValue(long errPduInvalidVersionTxValue)
            throws JNCException {
        setErrPduInvalidVersionTxValue(new YangUInt32(errPduInvalidVersionTxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-version-tx",
     * using a String value.
     * @param errPduInvalidVersionTxValue used during instantiation.
     */
    public void setErrPduInvalidVersionTxValue(String errPduInvalidVersionTxValue)
            throws JNCException {
        setErrPduInvalidVersionTxValue(new YangUInt32(errPduInvalidVersionTxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-invalid-version-tx".
     */
    public void unsetErrPduInvalidVersionTxValue() throws JNCException {
        delete("err-pdu-invalid-version-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-invalid-version-tx" leaf will not have a value.
     */
    public void addErrPduInvalidVersionTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-version-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-invalid-version-tx" with operation "replace".
     */
    public void markErrPduInvalidVersionTxReplace() throws JNCException {
        markLeafReplace("errPduInvalidVersionTx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-version-tx" with operation "merge".
     */
    public void markErrPduInvalidVersionTxMerge() throws JNCException {
        markLeafMerge("errPduInvalidVersionTx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-version-tx" with operation "create".
     */
    public void markErrPduInvalidVersionTxCreate() throws JNCException {
        markLeafCreate("errPduInvalidVersionTx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-version-tx" with operation "delete".
     */
    public void markErrPduInvalidVersionTxDelete() throws JNCException {
        markLeafDelete("errPduInvalidVersionTx");
    }

    /* Access methods for optional leaf child: "err-pdu-unsupported-class-tx". */

    /**
     * Gets the value for child leaf "err-pdu-unsupported-class-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduUnsupportedClassTxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-unsupported-class-tx");
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-class-tx",
     * using instance of generated typedef class.
     * @param errPduUnsupportedClassTxValue The value to set.
     * @param errPduUnsupportedClassTxValue used during instantiation.
     */
    public void setErrPduUnsupportedClassTxValue(YangUInt32 errPduUnsupportedClassTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unsupported-class-tx",
            errPduUnsupportedClassTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-class-tx",
     * using Java primitive values.
     * @param errPduUnsupportedClassTxValue used during instantiation.
     */
    public void setErrPduUnsupportedClassTxValue(long errPduUnsupportedClassTxValue)
            throws JNCException {
        setErrPduUnsupportedClassTxValue(new YangUInt32(errPduUnsupportedClassTxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-class-tx",
     * using a String value.
     * @param errPduUnsupportedClassTxValue used during instantiation.
     */
    public void setErrPduUnsupportedClassTxValue(String errPduUnsupportedClassTxValue)
            throws JNCException {
        setErrPduUnsupportedClassTxValue(new YangUInt32(errPduUnsupportedClassTxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-unsupported-class-tx".
     */
    public void unsetErrPduUnsupportedClassTxValue() throws JNCException {
        delete("err-pdu-unsupported-class-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-unsupported-class-tx" leaf will not have a value.
     */
    public void addErrPduUnsupportedClassTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unsupported-class-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-unsupported-class-tx" with operation "replace".
     */
    public void markErrPduUnsupportedClassTxReplace() throws JNCException {
        markLeafReplace("errPduUnsupportedClassTx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-class-tx" with operation "merge".
     */
    public void markErrPduUnsupportedClassTxMerge() throws JNCException {
        markLeafMerge("errPduUnsupportedClassTx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-class-tx" with operation "create".
     */
    public void markErrPduUnsupportedClassTxCreate() throws JNCException {
        markLeafCreate("errPduUnsupportedClassTx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-class-tx" with operation "delete".
     */
    public void markErrPduUnsupportedClassTxDelete() throws JNCException {
        markLeafDelete("errPduUnsupportedClassTx");
    }

    /* Access methods for optional leaf child: "err-pdu-unsupported-msg-type-tx". */

    /**
     * Gets the value for child leaf "err-pdu-unsupported-msg-type-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduUnsupportedMsgTypeTxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-unsupported-msg-type-tx");
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-msg-type-tx",
     * using instance of generated typedef class.
     * @param errPduUnsupportedMsgTypeTxValue The value to set.
     * @param errPduUnsupportedMsgTypeTxValue used during instantiation.
     */
    public void setErrPduUnsupportedMsgTypeTxValue(YangUInt32 errPduUnsupportedMsgTypeTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unsupported-msg-type-tx",
            errPduUnsupportedMsgTypeTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-msg-type-tx",
     * using Java primitive values.
     * @param errPduUnsupportedMsgTypeTxValue used during instantiation.
     */
    public void setErrPduUnsupportedMsgTypeTxValue(long errPduUnsupportedMsgTypeTxValue)
            throws JNCException {
        setErrPduUnsupportedMsgTypeTxValue(new YangUInt32(errPduUnsupportedMsgTypeTxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-msg-type-tx",
     * using a String value.
     * @param errPduUnsupportedMsgTypeTxValue used during instantiation.
     */
    public void setErrPduUnsupportedMsgTypeTxValue(String errPduUnsupportedMsgTypeTxValue)
            throws JNCException {
        setErrPduUnsupportedMsgTypeTxValue(new YangUInt32(errPduUnsupportedMsgTypeTxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-unsupported-msg-type-tx".
     */
    public void unsetErrPduUnsupportedMsgTypeTxValue() throws JNCException {
        delete("err-pdu-unsupported-msg-type-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-unsupported-msg-type-tx" leaf will not have a value.
     */
    public void addErrPduUnsupportedMsgTypeTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unsupported-msg-type-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-unsupported-msg-type-tx" with operation "replace".
     */
    public void markErrPduUnsupportedMsgTypeTxReplace() throws JNCException {
        markLeafReplace("errPduUnsupportedMsgTypeTx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-msg-type-tx" with operation "merge".
     */
    public void markErrPduUnsupportedMsgTypeTxMerge() throws JNCException {
        markLeafMerge("errPduUnsupportedMsgTypeTx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-msg-type-tx" with operation "create".
     */
    public void markErrPduUnsupportedMsgTypeTxCreate() throws JNCException {
        markLeafCreate("errPduUnsupportedMsgTypeTx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-msg-type-tx" with operation "delete".
     */
    public void markErrPduUnsupportedMsgTypeTxDelete() throws JNCException {
        markLeafDelete("errPduUnsupportedMsgTypeTx");
    }

    /* Access methods for optional leaf child: "err-pdu-unsupported-traffic-tx". */

    /**
     * Gets the value for child leaf "err-pdu-unsupported-traffic-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduUnsupportedTrafficTxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-unsupported-traffic-tx");
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-traffic-tx",
     * using instance of generated typedef class.
     * @param errPduUnsupportedTrafficTxValue The value to set.
     * @param errPduUnsupportedTrafficTxValue used during instantiation.
     */
    public void setErrPduUnsupportedTrafficTxValue(YangUInt32 errPduUnsupportedTrafficTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unsupported-traffic-tx",
            errPduUnsupportedTrafficTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-traffic-tx",
     * using Java primitive values.
     * @param errPduUnsupportedTrafficTxValue used during instantiation.
     */
    public void setErrPduUnsupportedTrafficTxValue(long errPduUnsupportedTrafficTxValue)
            throws JNCException {
        setErrPduUnsupportedTrafficTxValue(new YangUInt32(errPduUnsupportedTrafficTxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-unsupported-traffic-tx",
     * using a String value.
     * @param errPduUnsupportedTrafficTxValue used during instantiation.
     */
    public void setErrPduUnsupportedTrafficTxValue(String errPduUnsupportedTrafficTxValue)
            throws JNCException {
        setErrPduUnsupportedTrafficTxValue(new YangUInt32(errPduUnsupportedTrafficTxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-unsupported-traffic-tx".
     */
    public void unsetErrPduUnsupportedTrafficTxValue() throws JNCException {
        delete("err-pdu-unsupported-traffic-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-unsupported-traffic-tx" leaf will not have a value.
     */
    public void addErrPduUnsupportedTrafficTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unsupported-traffic-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-unsupported-traffic-tx" with operation "replace".
     */
    public void markErrPduUnsupportedTrafficTxReplace() throws JNCException {
        markLeafReplace("errPduUnsupportedTrafficTx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-traffic-tx" with operation "merge".
     */
    public void markErrPduUnsupportedTrafficTxMerge() throws JNCException {
        markLeafMerge("errPduUnsupportedTrafficTx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-traffic-tx" with operation "create".
     */
    public void markErrPduUnsupportedTrafficTxCreate() throws JNCException {
        markLeafCreate("errPduUnsupportedTrafficTx");
    }

    /**
     * Marks the leaf "err-pdu-unsupported-traffic-tx" with operation "delete".
     */
    public void markErrPduUnsupportedTrafficTxDelete() throws JNCException {
        markLeafDelete("errPduUnsupportedTrafficTx");
    }

    /* Access methods for optional leaf child: "err-pdu-unexpected-msg-tx". */

    /**
     * Gets the value for child leaf "err-pdu-unexpected-msg-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduUnexpectedMsgTxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-unexpected-msg-tx");
    }

    /**
     * Sets the value for child leaf "err-pdu-unexpected-msg-tx",
     * using instance of generated typedef class.
     * @param errPduUnexpectedMsgTxValue The value to set.
     * @param errPduUnexpectedMsgTxValue used during instantiation.
     */
    public void setErrPduUnexpectedMsgTxValue(YangUInt32 errPduUnexpectedMsgTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unexpected-msg-tx",
            errPduUnexpectedMsgTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-unexpected-msg-tx",
     * using Java primitive values.
     * @param errPduUnexpectedMsgTxValue used during instantiation.
     */
    public void setErrPduUnexpectedMsgTxValue(long errPduUnexpectedMsgTxValue)
            throws JNCException {
        setErrPduUnexpectedMsgTxValue(new YangUInt32(errPduUnexpectedMsgTxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-unexpected-msg-tx",
     * using a String value.
     * @param errPduUnexpectedMsgTxValue used during instantiation.
     */
    public void setErrPduUnexpectedMsgTxValue(String errPduUnexpectedMsgTxValue)
            throws JNCException {
        setErrPduUnexpectedMsgTxValue(new YangUInt32(errPduUnexpectedMsgTxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-unexpected-msg-tx".
     */
    public void unsetErrPduUnexpectedMsgTxValue() throws JNCException {
        delete("err-pdu-unexpected-msg-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-unexpected-msg-tx" leaf will not have a value.
     */
    public void addErrPduUnexpectedMsgTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unexpected-msg-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-unexpected-msg-tx" with operation "replace".
     */
    public void markErrPduUnexpectedMsgTxReplace() throws JNCException {
        markLeafReplace("errPduUnexpectedMsgTx");
    }

    /**
     * Marks the leaf "err-pdu-unexpected-msg-tx" with operation "merge".
     */
    public void markErrPduUnexpectedMsgTxMerge() throws JNCException {
        markLeafMerge("errPduUnexpectedMsgTx");
    }

    /**
     * Marks the leaf "err-pdu-unexpected-msg-tx" with operation "create".
     */
    public void markErrPduUnexpectedMsgTxCreate() throws JNCException {
        markLeafCreate("errPduUnexpectedMsgTx");
    }

    /**
     * Marks the leaf "err-pdu-unexpected-msg-tx" with operation "delete".
     */
    public void markErrPduUnexpectedMsgTxDelete() throws JNCException {
        markLeafDelete("errPduUnexpectedMsgTx");
    }

    /* Access methods for optional leaf child: "err-pdu-protocol-error-tx". */

    /**
     * Gets the value for child leaf "err-pdu-protocol-error-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduProtocolErrorTxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-protocol-error-tx");
    }

    /**
     * Sets the value for child leaf "err-pdu-protocol-error-tx",
     * using instance of generated typedef class.
     * @param errPduProtocolErrorTxValue The value to set.
     * @param errPduProtocolErrorTxValue used during instantiation.
     */
    public void setErrPduProtocolErrorTxValue(YangUInt32 errPduProtocolErrorTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-protocol-error-tx",
            errPduProtocolErrorTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-protocol-error-tx",
     * using Java primitive values.
     * @param errPduProtocolErrorTxValue used during instantiation.
     */
    public void setErrPduProtocolErrorTxValue(long errPduProtocolErrorTxValue)
            throws JNCException {
        setErrPduProtocolErrorTxValue(new YangUInt32(errPduProtocolErrorTxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-protocol-error-tx",
     * using a String value.
     * @param errPduProtocolErrorTxValue used during instantiation.
     */
    public void setErrPduProtocolErrorTxValue(String errPduProtocolErrorTxValue)
            throws JNCException {
        setErrPduProtocolErrorTxValue(new YangUInt32(errPduProtocolErrorTxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-protocol-error-tx".
     */
    public void unsetErrPduProtocolErrorTxValue() throws JNCException {
        delete("err-pdu-protocol-error-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-protocol-error-tx" leaf will not have a value.
     */
    public void addErrPduProtocolErrorTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-protocol-error-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-protocol-error-tx" with operation "replace".
     */
    public void markErrPduProtocolErrorTxReplace() throws JNCException {
        markLeafReplace("errPduProtocolErrorTx");
    }

    /**
     * Marks the leaf "err-pdu-protocol-error-tx" with operation "merge".
     */
    public void markErrPduProtocolErrorTxMerge() throws JNCException {
        markLeafMerge("errPduProtocolErrorTx");
    }

    /**
     * Marks the leaf "err-pdu-protocol-error-tx" with operation "create".
     */
    public void markErrPduProtocolErrorTxCreate() throws JNCException {
        markLeafCreate("errPduProtocolErrorTx");
    }

    /**
     * Marks the leaf "err-pdu-protocol-error-tx" with operation "delete".
     */
    public void markErrPduProtocolErrorTxDelete() throws JNCException {
        markLeafDelete("errPduProtocolErrorTx");
    }

    /* Access methods for optional leaf child: "err-pdu-invalid-streamid-tx". */

    /**
     * Gets the value for child leaf "err-pdu-invalid-streamid-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduInvalidStreamidTxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-invalid-streamid-tx");
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-streamid-tx",
     * using instance of generated typedef class.
     * @param errPduInvalidStreamidTxValue The value to set.
     * @param errPduInvalidStreamidTxValue used during instantiation.
     */
    public void setErrPduInvalidStreamidTxValue(YangUInt32 errPduInvalidStreamidTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-streamid-tx",
            errPduInvalidStreamidTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-streamid-tx",
     * using Java primitive values.
     * @param errPduInvalidStreamidTxValue used during instantiation.
     */
    public void setErrPduInvalidStreamidTxValue(long errPduInvalidStreamidTxValue)
            throws JNCException {
        setErrPduInvalidStreamidTxValue(new YangUInt32(errPduInvalidStreamidTxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-streamid-tx",
     * using a String value.
     * @param errPduInvalidStreamidTxValue used during instantiation.
     */
    public void setErrPduInvalidStreamidTxValue(String errPduInvalidStreamidTxValue)
            throws JNCException {
        setErrPduInvalidStreamidTxValue(new YangUInt32(errPduInvalidStreamidTxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-invalid-streamid-tx".
     */
    public void unsetErrPduInvalidStreamidTxValue() throws JNCException {
        delete("err-pdu-invalid-streamid-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-invalid-streamid-tx" leaf will not have a value.
     */
    public void addErrPduInvalidStreamidTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-streamid-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-invalid-streamid-tx" with operation "replace".
     */
    public void markErrPduInvalidStreamidTxReplace() throws JNCException {
        markLeafReplace("errPduInvalidStreamidTx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-streamid-tx" with operation "merge".
     */
    public void markErrPduInvalidStreamidTxMerge() throws JNCException {
        markLeafMerge("errPduInvalidStreamidTx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-streamid-tx" with operation "create".
     */
    public void markErrPduInvalidStreamidTxCreate() throws JNCException {
        markLeafCreate("errPduInvalidStreamidTx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-streamid-tx" with operation "delete".
     */
    public void markErrPduInvalidStreamidTxDelete() throws JNCException {
        markLeafDelete("errPduInvalidStreamidTx");
    }

    /* Access methods for optional leaf child: "err-pdu-invalid-parm-value-tx". */

    /**
     * Gets the value for child leaf "err-pdu-invalid-parm-value-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduInvalidParmValueTxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-invalid-parm-value-tx");
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-parm-value-tx",
     * using instance of generated typedef class.
     * @param errPduInvalidParmValueTxValue The value to set.
     * @param errPduInvalidParmValueTxValue used during instantiation.
     */
    public void setErrPduInvalidParmValueTxValue(YangUInt32 errPduInvalidParmValueTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-parm-value-tx",
            errPduInvalidParmValueTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-parm-value-tx",
     * using Java primitive values.
     * @param errPduInvalidParmValueTxValue used during instantiation.
     */
    public void setErrPduInvalidParmValueTxValue(long errPduInvalidParmValueTxValue)
            throws JNCException {
        setErrPduInvalidParmValueTxValue(new YangUInt32(errPduInvalidParmValueTxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-invalid-parm-value-tx",
     * using a String value.
     * @param errPduInvalidParmValueTxValue used during instantiation.
     */
    public void setErrPduInvalidParmValueTxValue(String errPduInvalidParmValueTxValue)
            throws JNCException {
        setErrPduInvalidParmValueTxValue(new YangUInt32(errPduInvalidParmValueTxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-invalid-parm-value-tx".
     */
    public void unsetErrPduInvalidParmValueTxValue() throws JNCException {
        delete("err-pdu-invalid-parm-value-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-invalid-parm-value-tx" leaf will not have a value.
     */
    public void addErrPduInvalidParmValueTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-invalid-parm-value-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-invalid-parm-value-tx" with operation "replace".
     */
    public void markErrPduInvalidParmValueTxReplace() throws JNCException {
        markLeafReplace("errPduInvalidParmValueTx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-parm-value-tx" with operation "merge".
     */
    public void markErrPduInvalidParmValueTxMerge() throws JNCException {
        markLeafMerge("errPduInvalidParmValueTx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-parm-value-tx" with operation "create".
     */
    public void markErrPduInvalidParmValueTxCreate() throws JNCException {
        markLeafCreate("errPduInvalidParmValueTx");
    }

    /**
     * Marks the leaf "err-pdu-invalid-parm-value-tx" with operation "delete".
     */
    public void markErrPduInvalidParmValueTxDelete() throws JNCException {
        markLeafDelete("errPduInvalidParmValueTx");
    }

    /* Access methods for optional leaf child: "err-pdu-parm-field-error-tx". */

    /**
     * Gets the value for child leaf "err-pdu-parm-field-error-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduParmFieldErrorTxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-parm-field-error-tx");
    }

    /**
     * Sets the value for child leaf "err-pdu-parm-field-error-tx",
     * using instance of generated typedef class.
     * @param errPduParmFieldErrorTxValue The value to set.
     * @param errPduParmFieldErrorTxValue used during instantiation.
     */
    public void setErrPduParmFieldErrorTxValue(YangUInt32 errPduParmFieldErrorTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-parm-field-error-tx",
            errPduParmFieldErrorTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-parm-field-error-tx",
     * using Java primitive values.
     * @param errPduParmFieldErrorTxValue used during instantiation.
     */
    public void setErrPduParmFieldErrorTxValue(long errPduParmFieldErrorTxValue)
            throws JNCException {
        setErrPduParmFieldErrorTxValue(new YangUInt32(errPduParmFieldErrorTxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-parm-field-error-tx",
     * using a String value.
     * @param errPduParmFieldErrorTxValue used during instantiation.
     */
    public void setErrPduParmFieldErrorTxValue(String errPduParmFieldErrorTxValue)
            throws JNCException {
        setErrPduParmFieldErrorTxValue(new YangUInt32(errPduParmFieldErrorTxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-parm-field-error-tx".
     */
    public void unsetErrPduParmFieldErrorTxValue() throws JNCException {
        delete("err-pdu-parm-field-error-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-parm-field-error-tx" leaf will not have a value.
     */
    public void addErrPduParmFieldErrorTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-parm-field-error-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-parm-field-error-tx" with operation "replace".
     */
    public void markErrPduParmFieldErrorTxReplace() throws JNCException {
        markLeafReplace("errPduParmFieldErrorTx");
    }

    /**
     * Marks the leaf "err-pdu-parm-field-error-tx" with operation "merge".
     */
    public void markErrPduParmFieldErrorTxMerge() throws JNCException {
        markLeafMerge("errPduParmFieldErrorTx");
    }

    /**
     * Marks the leaf "err-pdu-parm-field-error-tx" with operation "create".
     */
    public void markErrPduParmFieldErrorTxCreate() throws JNCException {
        markLeafCreate("errPduParmFieldErrorTx");
    }

    /**
     * Marks the leaf "err-pdu-parm-field-error-tx" with operation "delete".
     */
    public void markErrPduParmFieldErrorTxDelete() throws JNCException {
        markLeafDelete("errPduParmFieldErrorTx");
    }

    /* Access methods for optional leaf child: "err-pdu-unexpect-parm-tx". */

    /**
     * Gets the value for child leaf "err-pdu-unexpect-parm-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduUnexpectParmTxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-unexpect-parm-tx");
    }

    /**
     * Sets the value for child leaf "err-pdu-unexpect-parm-tx",
     * using instance of generated typedef class.
     * @param errPduUnexpectParmTxValue The value to set.
     * @param errPduUnexpectParmTxValue used during instantiation.
     */
    public void setErrPduUnexpectParmTxValue(YangUInt32 errPduUnexpectParmTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unexpect-parm-tx",
            errPduUnexpectParmTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-unexpect-parm-tx",
     * using Java primitive values.
     * @param errPduUnexpectParmTxValue used during instantiation.
     */
    public void setErrPduUnexpectParmTxValue(long errPduUnexpectParmTxValue)
            throws JNCException {
        setErrPduUnexpectParmTxValue(new YangUInt32(errPduUnexpectParmTxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-unexpect-parm-tx",
     * using a String value.
     * @param errPduUnexpectParmTxValue used during instantiation.
     */
    public void setErrPduUnexpectParmTxValue(String errPduUnexpectParmTxValue)
            throws JNCException {
        setErrPduUnexpectParmTxValue(new YangUInt32(errPduUnexpectParmTxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-unexpect-parm-tx".
     */
    public void unsetErrPduUnexpectParmTxValue() throws JNCException {
        delete("err-pdu-unexpect-parm-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-unexpect-parm-tx" leaf will not have a value.
     */
    public void addErrPduUnexpectParmTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-unexpect-parm-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-unexpect-parm-tx" with operation "replace".
     */
    public void markErrPduUnexpectParmTxReplace() throws JNCException {
        markLeafReplace("errPduUnexpectParmTx");
    }

    /**
     * Marks the leaf "err-pdu-unexpect-parm-tx" with operation "merge".
     */
    public void markErrPduUnexpectParmTxMerge() throws JNCException {
        markLeafMerge("errPduUnexpectParmTx");
    }

    /**
     * Marks the leaf "err-pdu-unexpect-parm-tx" with operation "create".
     */
    public void markErrPduUnexpectParmTxCreate() throws JNCException {
        markLeafCreate("errPduUnexpectParmTx");
    }

    /**
     * Marks the leaf "err-pdu-unexpect-parm-tx" with operation "delete".
     */
    public void markErrPduUnexpectParmTxDelete() throws JNCException {
        markLeafDelete("errPduUnexpectParmTx");
    }

    /* Access methods for optional leaf child: "err-pdu-missing-parm-tx". */

    /**
     * Gets the value for child leaf "err-pdu-missing-parm-tx".
     * @return The value of the leaf.
     */
    public YangUInt32 getErrPduMissingParmTxValue() throws JNCException {
        return (YangUInt32)getValue("err-pdu-missing-parm-tx");
    }

    /**
     * Sets the value for child leaf "err-pdu-missing-parm-tx",
     * using instance of generated typedef class.
     * @param errPduMissingParmTxValue The value to set.
     * @param errPduMissingParmTxValue used during instantiation.
     */
    public void setErrPduMissingParmTxValue(YangUInt32 errPduMissingParmTxValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-missing-parm-tx",
            errPduMissingParmTxValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "err-pdu-missing-parm-tx",
     * using Java primitive values.
     * @param errPduMissingParmTxValue used during instantiation.
     */
    public void setErrPduMissingParmTxValue(long errPduMissingParmTxValue)
            throws JNCException {
        setErrPduMissingParmTxValue(new YangUInt32(errPduMissingParmTxValue));
    }

    /**
     * Sets the value for child leaf "err-pdu-missing-parm-tx",
     * using a String value.
     * @param errPduMissingParmTxValue used during instantiation.
     */
    public void setErrPduMissingParmTxValue(String errPduMissingParmTxValue)
            throws JNCException {
        setErrPduMissingParmTxValue(new YangUInt32(errPduMissingParmTxValue));
    }

    /**
     * Unsets the value for child leaf "err-pdu-missing-parm-tx".
     */
    public void unsetErrPduMissingParmTxValue() throws JNCException {
        delete("err-pdu-missing-parm-tx");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "err-pdu-missing-parm-tx" leaf will not have a value.
     */
    public void addErrPduMissingParmTx() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "err-pdu-missing-parm-tx",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "err-pdu-missing-parm-tx" with operation "replace".
     */
    public void markErrPduMissingParmTxReplace() throws JNCException {
        markLeafReplace("errPduMissingParmTx");
    }

    /**
     * Marks the leaf "err-pdu-missing-parm-tx" with operation "merge".
     */
    public void markErrPduMissingParmTxMerge() throws JNCException {
        markLeafMerge("errPduMissingParmTx");
    }

    /**
     * Marks the leaf "err-pdu-missing-parm-tx" with operation "create".
     */
    public void markErrPduMissingParmTxCreate() throws JNCException {
        markLeafCreate("errPduMissingParmTx");
    }

    /**
     * Marks the leaf "err-pdu-missing-parm-tx" with operation "delete".
     */
    public void markErrPduMissingParmTxDelete() throws JNCException {
        markLeafDelete("errPduMissingParmTx");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
