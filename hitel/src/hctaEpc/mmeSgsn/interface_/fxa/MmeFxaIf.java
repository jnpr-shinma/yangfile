/* 
 * @(#)MmeFxaIf.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.interface_.fxa;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface_/fxa/mme-fxa-if"
 * <p>
 * See line 100 in
 * upsmConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeFxaIf extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeFxaIf object.
     */
    public MmeFxaIf() {
        super(Epc.NAMESPACE, "mme-fxa-if");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeFxaIf clone() {
        return (MmeFxaIf)cloneContent(new MmeFxaIf());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeFxaIf cloneShallow() {
        return (MmeFxaIf)cloneShallowContent(new MmeFxaIf());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "routing-instance",
            "ip-address",
            "ports",
            "path-mgmt-user-name",
            "path-mgmt-user-password",
            "path-mgmt-imsi",
            "req-timer",
            "req-retry",
            "path-mgmt-interval",
            "path-mgmt-retry-timer",
            "path-mgmt-retry-value",
            "path-mgmt-success-indicator",
            "dscp-mark",
        };
    }

    /* Access methods for optional leaf child: "routing-instance". */

    /**
     * Gets the value for child leaf "routing-instance".
     * @return The value of the leaf.
     */
    public YangString getRoutingInstanceValue() throws JNCException {
        return (YangString)getValue("routing-instance");
    }

    /**
     * Sets the value for child leaf "routing-instance",
     * using instance of generated typedef class.
     * @param routingInstanceValue The value to set.
     * @param routingInstanceValue used during instantiation.
     */
    public void setRoutingInstanceValue(YangString routingInstanceValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance",
            routingInstanceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "routing-instance",
     * using a String value.
     * @param routingInstanceValue used during instantiation.
     */
    public void setRoutingInstanceValue(String routingInstanceValue)
            throws JNCException {
        setRoutingInstanceValue(new YangString(routingInstanceValue));
    }

    /**
     * Unsets the value for child leaf "routing-instance".
     */
    public void unsetRoutingInstanceValue() throws JNCException {
        delete("routing-instance");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "routing-instance" leaf will not have a value.
     */
    public void addRoutingInstance() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "routing-instance",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "routing-instance" with operation "replace".
     */
    public void markRoutingInstanceReplace() throws JNCException {
        markLeafReplace("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "merge".
     */
    public void markRoutingInstanceMerge() throws JNCException {
        markLeafMerge("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "create".
     */
    public void markRoutingInstanceCreate() throws JNCException {
        markLeafCreate("routingInstance");
    }

    /**
     * Marks the leaf "routing-instance" with operation "delete".
     */
    public void markRoutingInstanceDelete() throws JNCException {
        markLeafDelete("routingInstance");
    }

    /* Access methods for optional leaf child: "ip-address". */

    /**
     * Gets the value for child leaf "ip-address".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddressValue() throws JNCException {
        return (IpAddress)getValue("ip-address");
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a JNC type value.
     * @param ipAddressValue The value to set.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(IpAddress ipAddressValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            ipAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address",
     * using a String value.
     * @param ipAddressValue used during instantiation.
     */
    public void setIpAddressValue(String ipAddressValue) throws JNCException {
        setIpAddressValue(new IpAddress(ipAddressValue));
    }

    /**
     * Unsets the value for child leaf "ip-address".
     */
    public void unsetIpAddressValue() throws JNCException {
        delete("ip-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address" leaf will not have a value.
     */
    public void addIpAddress() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address" with operation "replace".
     */
    public void markIpAddressReplace() throws JNCException {
        markLeafReplace("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "merge".
     */
    public void markIpAddressMerge() throws JNCException {
        markLeafMerge("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "create".
     */
    public void markIpAddressCreate() throws JNCException {
        markLeafCreate("ipAddress");
    }

    /**
     * Marks the leaf "ip-address" with operation "delete".
     */
    public void markIpAddressDelete() throws JNCException {
        markLeafDelete("ipAddress");
    }

    /* Access methods for optional leaf child: "ports". */

    /**
     * Gets the value for child leaf "ports".
     * @return The value of the leaf.
     */
    public YangString getPortsValue() throws JNCException {
        return (YangString)getValue("ports");
    }

    /**
     * Sets the value for child leaf "ports",
     * using instance of generated typedef class.
     * @param portsValue The value to set.
     * @param portsValue used during instantiation.
     */
    public void setPortsValue(YangString portsValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ports",
            portsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ports",
     * using a String value.
     * @param portsValue used during instantiation.
     */
    public void setPortsValue(String portsValue) throws JNCException {
        setPortsValue(new YangString(portsValue));
    }

    /**
     * Unsets the value for child leaf "ports".
     */
    public void unsetPortsValue() throws JNCException {
        delete("ports");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ports" leaf will not have a value.
     */
    public void addPorts() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ports",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ports" with operation "replace".
     */
    public void markPortsReplace() throws JNCException {
        markLeafReplace("ports");
    }

    /**
     * Marks the leaf "ports" with operation "merge".
     */
    public void markPortsMerge() throws JNCException {
        markLeafMerge("ports");
    }

    /**
     * Marks the leaf "ports" with operation "create".
     */
    public void markPortsCreate() throws JNCException {
        markLeafCreate("ports");
    }

    /**
     * Marks the leaf "ports" with operation "delete".
     */
    public void markPortsDelete() throws JNCException {
        markLeafDelete("ports");
    }

    /* Access methods for optional leaf child: "path-mgmt-user-name". */

    /**
     * Gets the value for child leaf "path-mgmt-user-name".
     * @return The value of the leaf.
     */
    public YangString getPathMgmtUserNameValue() throws JNCException {
        return (YangString)getValue("path-mgmt-user-name");
    }

    /**
     * Sets the value for child leaf "path-mgmt-user-name",
     * using instance of generated typedef class.
     * @param pathMgmtUserNameValue The value to set.
     * @param pathMgmtUserNameValue used during instantiation.
     */
    public void setPathMgmtUserNameValue(YangString pathMgmtUserNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-mgmt-user-name",
            pathMgmtUserNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "path-mgmt-user-name",
     * using a String value.
     * @param pathMgmtUserNameValue used during instantiation.
     */
    public void setPathMgmtUserNameValue(String pathMgmtUserNameValue)
            throws JNCException {
        setPathMgmtUserNameValue(new YangString(pathMgmtUserNameValue));
    }

    /**
     * Unsets the value for child leaf "path-mgmt-user-name".
     */
    public void unsetPathMgmtUserNameValue() throws JNCException {
        delete("path-mgmt-user-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "path-mgmt-user-name" leaf will not have a value.
     */
    public void addPathMgmtUserName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-mgmt-user-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "path-mgmt-user-name" with operation "replace".
     */
    public void markPathMgmtUserNameReplace() throws JNCException {
        markLeafReplace("pathMgmtUserName");
    }

    /**
     * Marks the leaf "path-mgmt-user-name" with operation "merge".
     */
    public void markPathMgmtUserNameMerge() throws JNCException {
        markLeafMerge("pathMgmtUserName");
    }

    /**
     * Marks the leaf "path-mgmt-user-name" with operation "create".
     */
    public void markPathMgmtUserNameCreate() throws JNCException {
        markLeafCreate("pathMgmtUserName");
    }

    /**
     * Marks the leaf "path-mgmt-user-name" with operation "delete".
     */
    public void markPathMgmtUserNameDelete() throws JNCException {
        markLeafDelete("pathMgmtUserName");
    }

    /* Access methods for optional leaf child: "path-mgmt-user-password". */

    /**
     * Gets the value for child leaf "path-mgmt-user-password".
     * @return The value of the leaf.
     */
    public YangString getPathMgmtUserPasswordValue() throws JNCException {
        return (YangString)getValue("path-mgmt-user-password");
    }

    /**
     * Sets the value for child leaf "path-mgmt-user-password",
     * using instance of generated typedef class.
     * @param pathMgmtUserPasswordValue The value to set.
     * @param pathMgmtUserPasswordValue used during instantiation.
     */
    public void setPathMgmtUserPasswordValue(YangString pathMgmtUserPasswordValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-mgmt-user-password",
            pathMgmtUserPasswordValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "path-mgmt-user-password",
     * using a String value.
     * @param pathMgmtUserPasswordValue used during instantiation.
     */
    public void setPathMgmtUserPasswordValue(String pathMgmtUserPasswordValue)
            throws JNCException {
        setPathMgmtUserPasswordValue(new YangString(pathMgmtUserPasswordValue));
    }

    /**
     * Unsets the value for child leaf "path-mgmt-user-password".
     */
    public void unsetPathMgmtUserPasswordValue() throws JNCException {
        delete("path-mgmt-user-password");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "path-mgmt-user-password" leaf will not have a value.
     */
    public void addPathMgmtUserPassword() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-mgmt-user-password",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "path-mgmt-user-password" with operation "replace".
     */
    public void markPathMgmtUserPasswordReplace() throws JNCException {
        markLeafReplace("pathMgmtUserPassword");
    }

    /**
     * Marks the leaf "path-mgmt-user-password" with operation "merge".
     */
    public void markPathMgmtUserPasswordMerge() throws JNCException {
        markLeafMerge("pathMgmtUserPassword");
    }

    /**
     * Marks the leaf "path-mgmt-user-password" with operation "create".
     */
    public void markPathMgmtUserPasswordCreate() throws JNCException {
        markLeafCreate("pathMgmtUserPassword");
    }

    /**
     * Marks the leaf "path-mgmt-user-password" with operation "delete".
     */
    public void markPathMgmtUserPasswordDelete() throws JNCException {
        markLeafDelete("pathMgmtUserPassword");
    }

    /* Access methods for optional leaf child: "path-mgmt-imsi". */

    /**
     * Gets the value for child leaf "path-mgmt-imsi".
     * @return The value of the leaf.
     */
    public YangString getPathMgmtImsiValue() throws JNCException {
        return (YangString)getValue("path-mgmt-imsi");
    }

    /**
     * Sets the value for child leaf "path-mgmt-imsi",
     * using instance of generated typedef class.
     * @param pathMgmtImsiValue The value to set.
     * @param pathMgmtImsiValue used during instantiation.
     */
    public void setPathMgmtImsiValue(YangString pathMgmtImsiValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-mgmt-imsi",
            pathMgmtImsiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "path-mgmt-imsi",
     * using a String value.
     * @param pathMgmtImsiValue used during instantiation.
     */
    public void setPathMgmtImsiValue(String pathMgmtImsiValue)
            throws JNCException {
        setPathMgmtImsiValue(new YangString(pathMgmtImsiValue));
    }

    /**
     * Unsets the value for child leaf "path-mgmt-imsi".
     */
    public void unsetPathMgmtImsiValue() throws JNCException {
        delete("path-mgmt-imsi");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "path-mgmt-imsi" leaf will not have a value.
     */
    public void addPathMgmtImsi() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-mgmt-imsi",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "path-mgmt-imsi" with operation "replace".
     */
    public void markPathMgmtImsiReplace() throws JNCException {
        markLeafReplace("pathMgmtImsi");
    }

    /**
     * Marks the leaf "path-mgmt-imsi" with operation "merge".
     */
    public void markPathMgmtImsiMerge() throws JNCException {
        markLeafMerge("pathMgmtImsi");
    }

    /**
     * Marks the leaf "path-mgmt-imsi" with operation "create".
     */
    public void markPathMgmtImsiCreate() throws JNCException {
        markLeafCreate("pathMgmtImsi");
    }

    /**
     * Marks the leaf "path-mgmt-imsi" with operation "delete".
     */
    public void markPathMgmtImsiDelete() throws JNCException {
        markLeafDelete("pathMgmtImsi");
    }

    /* Access methods for optional leaf child: "req-timer". */

    /**
     * Gets the value for child leaf "req-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getReqTimerValue() throws JNCException {
        YangUInt8 reqTimer = (YangUInt8)getValue("req-timer");
        if (reqTimer == null) {
            reqTimer = new YangUInt8("10");  // default
        }
        return reqTimer;
    }

    /**
     * Sets the value for child leaf "req-timer",
     * using instance of generated typedef class.
     * @param reqTimerValue The value to set.
     * @param reqTimerValue used during instantiation.
     */
    public void setReqTimerValue(YangUInt8 reqTimerValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "req-timer",
            reqTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "req-timer",
     * using Java primitive values.
     * @param reqTimerValue used during instantiation.
     */
    public void setReqTimerValue(short reqTimerValue) throws JNCException {
        setReqTimerValue(new YangUInt8(reqTimerValue));
    }

    /**
     * Sets the value for child leaf "req-timer",
     * using a String value.
     * @param reqTimerValue used during instantiation.
     */
    public void setReqTimerValue(String reqTimerValue) throws JNCException {
        setReqTimerValue(new YangUInt8(reqTimerValue));
    }

    /**
     * Unsets the value for child leaf "req-timer".
     */
    public void unsetReqTimerValue() throws JNCException {
        delete("req-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "req-timer" leaf will not have a value.
     */
    public void addReqTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "req-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "req-timer" with operation "replace".
     */
    public void markReqTimerReplace() throws JNCException {
        markLeafReplace("reqTimer");
    }

    /**
     * Marks the leaf "req-timer" with operation "merge".
     */
    public void markReqTimerMerge() throws JNCException {
        markLeafMerge("reqTimer");
    }

    /**
     * Marks the leaf "req-timer" with operation "create".
     */
    public void markReqTimerCreate() throws JNCException {
        markLeafCreate("reqTimer");
    }

    /**
     * Marks the leaf "req-timer" with operation "delete".
     */
    public void markReqTimerDelete() throws JNCException {
        markLeafDelete("reqTimer");
    }

    /* Access methods for optional leaf child: "req-retry". */

    /**
     * Gets the value for child leaf "req-retry".
     * @return The value of the leaf.
     */
    public YangUInt8 getReqRetryValue() throws JNCException {
        YangUInt8 reqRetry = (YangUInt8)getValue("req-retry");
        if (reqRetry == null) {
            reqRetry = new YangUInt8("2");  // default
        }
        return reqRetry;
    }

    /**
     * Sets the value for child leaf "req-retry",
     * using instance of generated typedef class.
     * @param reqRetryValue The value to set.
     * @param reqRetryValue used during instantiation.
     */
    public void setReqRetryValue(YangUInt8 reqRetryValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "req-retry",
            reqRetryValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "req-retry",
     * using Java primitive values.
     * @param reqRetryValue used during instantiation.
     */
    public void setReqRetryValue(short reqRetryValue) throws JNCException {
        setReqRetryValue(new YangUInt8(reqRetryValue));
    }

    /**
     * Sets the value for child leaf "req-retry",
     * using a String value.
     * @param reqRetryValue used during instantiation.
     */
    public void setReqRetryValue(String reqRetryValue) throws JNCException {
        setReqRetryValue(new YangUInt8(reqRetryValue));
    }

    /**
     * Unsets the value for child leaf "req-retry".
     */
    public void unsetReqRetryValue() throws JNCException {
        delete("req-retry");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "req-retry" leaf will not have a value.
     */
    public void addReqRetry() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "req-retry",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "req-retry" with operation "replace".
     */
    public void markReqRetryReplace() throws JNCException {
        markLeafReplace("reqRetry");
    }

    /**
     * Marks the leaf "req-retry" with operation "merge".
     */
    public void markReqRetryMerge() throws JNCException {
        markLeafMerge("reqRetry");
    }

    /**
     * Marks the leaf "req-retry" with operation "create".
     */
    public void markReqRetryCreate() throws JNCException {
        markLeafCreate("reqRetry");
    }

    /**
     * Marks the leaf "req-retry" with operation "delete".
     */
    public void markReqRetryDelete() throws JNCException {
        markLeafDelete("reqRetry");
    }

    /* Access methods for optional leaf child: "path-mgmt-interval". */

    /**
     * Gets the value for child leaf "path-mgmt-interval".
     * @return The value of the leaf.
     */
    public YangString getPathMgmtIntervalValue() throws JNCException {
        YangString pathMgmtInterval = (YangString)getValue("path-mgmt-interval");
        if (pathMgmtInterval == null) {
            pathMgmtInterval = new YangString("60");  // default
        }
        return pathMgmtInterval;
    }

    /**
     * Sets the value for child leaf "path-mgmt-interval",
     * using instance of generated typedef class.
     * @param pathMgmtIntervalValue The value to set.
     * @param pathMgmtIntervalValue used during instantiation.
     */
    public void setPathMgmtIntervalValue(YangString pathMgmtIntervalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-mgmt-interval",
            pathMgmtIntervalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "path-mgmt-interval",
     * using a String value.
     * @param pathMgmtIntervalValue used during instantiation.
     */
    public void setPathMgmtIntervalValue(String pathMgmtIntervalValue)
            throws JNCException {
        setPathMgmtIntervalValue(new YangString(pathMgmtIntervalValue));
    }

    /**
     * Unsets the value for child leaf "path-mgmt-interval".
     */
    public void unsetPathMgmtIntervalValue() throws JNCException {
        delete("path-mgmt-interval");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "path-mgmt-interval" leaf will not have a value.
     */
    public void addPathMgmtInterval() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-mgmt-interval",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "path-mgmt-interval" with operation "replace".
     */
    public void markPathMgmtIntervalReplace() throws JNCException {
        markLeafReplace("pathMgmtInterval");
    }

    /**
     * Marks the leaf "path-mgmt-interval" with operation "merge".
     */
    public void markPathMgmtIntervalMerge() throws JNCException {
        markLeafMerge("pathMgmtInterval");
    }

    /**
     * Marks the leaf "path-mgmt-interval" with operation "create".
     */
    public void markPathMgmtIntervalCreate() throws JNCException {
        markLeafCreate("pathMgmtInterval");
    }

    /**
     * Marks the leaf "path-mgmt-interval" with operation "delete".
     */
    public void markPathMgmtIntervalDelete() throws JNCException {
        markLeafDelete("pathMgmtInterval");
    }

    /* Access methods for optional leaf child: "path-mgmt-retry-timer". */

    /**
     * Gets the value for child leaf "path-mgmt-retry-timer".
     * @return The value of the leaf.
     */
    public YangUInt8 getPathMgmtRetryTimerValue() throws JNCException {
        YangUInt8 pathMgmtRetryTimer = (YangUInt8)getValue("path-mgmt-retry-timer");
        if (pathMgmtRetryTimer == null) {
            pathMgmtRetryTimer = new YangUInt8("15");  // default
        }
        return pathMgmtRetryTimer;
    }

    /**
     * Sets the value for child leaf "path-mgmt-retry-timer",
     * using instance of generated typedef class.
     * @param pathMgmtRetryTimerValue The value to set.
     * @param pathMgmtRetryTimerValue used during instantiation.
     */
    public void setPathMgmtRetryTimerValue(YangUInt8 pathMgmtRetryTimerValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-mgmt-retry-timer",
            pathMgmtRetryTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "path-mgmt-retry-timer",
     * using Java primitive values.
     * @param pathMgmtRetryTimerValue used during instantiation.
     */
    public void setPathMgmtRetryTimerValue(short pathMgmtRetryTimerValue)
            throws JNCException {
        setPathMgmtRetryTimerValue(new YangUInt8(pathMgmtRetryTimerValue));
    }

    /**
     * Sets the value for child leaf "path-mgmt-retry-timer",
     * using a String value.
     * @param pathMgmtRetryTimerValue used during instantiation.
     */
    public void setPathMgmtRetryTimerValue(String pathMgmtRetryTimerValue)
            throws JNCException {
        setPathMgmtRetryTimerValue(new YangUInt8(pathMgmtRetryTimerValue));
    }

    /**
     * Unsets the value for child leaf "path-mgmt-retry-timer".
     */
    public void unsetPathMgmtRetryTimerValue() throws JNCException {
        delete("path-mgmt-retry-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "path-mgmt-retry-timer" leaf will not have a value.
     */
    public void addPathMgmtRetryTimer() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-mgmt-retry-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "path-mgmt-retry-timer" with operation "replace".
     */
    public void markPathMgmtRetryTimerReplace() throws JNCException {
        markLeafReplace("pathMgmtRetryTimer");
    }

    /**
     * Marks the leaf "path-mgmt-retry-timer" with operation "merge".
     */
    public void markPathMgmtRetryTimerMerge() throws JNCException {
        markLeafMerge("pathMgmtRetryTimer");
    }

    /**
     * Marks the leaf "path-mgmt-retry-timer" with operation "create".
     */
    public void markPathMgmtRetryTimerCreate() throws JNCException {
        markLeafCreate("pathMgmtRetryTimer");
    }

    /**
     * Marks the leaf "path-mgmt-retry-timer" with operation "delete".
     */
    public void markPathMgmtRetryTimerDelete() throws JNCException {
        markLeafDelete("pathMgmtRetryTimer");
    }

    /* Access methods for optional leaf child: "path-mgmt-retry-value". */

    /**
     * Gets the value for child leaf "path-mgmt-retry-value".
     * @return The value of the leaf.
     */
    public YangUInt8 getPathMgmtRetryValueValue() throws JNCException {
        YangUInt8 pathMgmtRetryValue = (YangUInt8)getValue("path-mgmt-retry-value");
        if (pathMgmtRetryValue == null) {
            pathMgmtRetryValue = new YangUInt8("8");  // default
        }
        return pathMgmtRetryValue;
    }

    /**
     * Sets the value for child leaf "path-mgmt-retry-value",
     * using instance of generated typedef class.
     * @param pathMgmtRetryValueValue The value to set.
     * @param pathMgmtRetryValueValue used during instantiation.
     */
    public void setPathMgmtRetryValueValue(YangUInt8 pathMgmtRetryValueValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-mgmt-retry-value",
            pathMgmtRetryValueValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "path-mgmt-retry-value",
     * using Java primitive values.
     * @param pathMgmtRetryValueValue used during instantiation.
     */
    public void setPathMgmtRetryValueValue(short pathMgmtRetryValueValue)
            throws JNCException {
        setPathMgmtRetryValueValue(new YangUInt8(pathMgmtRetryValueValue));
    }

    /**
     * Sets the value for child leaf "path-mgmt-retry-value",
     * using a String value.
     * @param pathMgmtRetryValueValue used during instantiation.
     */
    public void setPathMgmtRetryValueValue(String pathMgmtRetryValueValue)
            throws JNCException {
        setPathMgmtRetryValueValue(new YangUInt8(pathMgmtRetryValueValue));
    }

    /**
     * Unsets the value for child leaf "path-mgmt-retry-value".
     */
    public void unsetPathMgmtRetryValueValue() throws JNCException {
        delete("path-mgmt-retry-value");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "path-mgmt-retry-value" leaf will not have a value.
     */
    public void addPathMgmtRetryValue() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-mgmt-retry-value",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "path-mgmt-retry-value" with operation "replace".
     */
    public void markPathMgmtRetryValueReplace() throws JNCException {
        markLeafReplace("pathMgmtRetryValue");
    }

    /**
     * Marks the leaf "path-mgmt-retry-value" with operation "merge".
     */
    public void markPathMgmtRetryValueMerge() throws JNCException {
        markLeafMerge("pathMgmtRetryValue");
    }

    /**
     * Marks the leaf "path-mgmt-retry-value" with operation "create".
     */
    public void markPathMgmtRetryValueCreate() throws JNCException {
        markLeafCreate("pathMgmtRetryValue");
    }

    /**
     * Marks the leaf "path-mgmt-retry-value" with operation "delete".
     */
    public void markPathMgmtRetryValueDelete() throws JNCException {
        markLeafDelete("pathMgmtRetryValue");
    }

    /* Access methods for optional leaf child: "path-mgmt-success-indicator". */

    /**
     * Gets the value for child leaf "path-mgmt-success-indicator".
     * @return The value of the leaf.
     */
    public YangEnumeration getPathMgmtSuccessIndicatorValue()
            throws JNCException {
        YangEnumeration pathMgmtSuccessIndicator = (YangEnumeration)getValue("path-mgmt-success-indicator");
        if (pathMgmtSuccessIndicator == null) {
            pathMgmtSuccessIndicator = new YangEnumeration("accept-AA-only", new String[] {  // default
                "accept-AA-only",
                "accept-AA-AR",
            });
        }
        return pathMgmtSuccessIndicator;
    }

    /**
     * Sets the value for child leaf "path-mgmt-success-indicator",
     * using instance of generated typedef class.
     * @param pathMgmtSuccessIndicatorValue The value to set.
     * @param pathMgmtSuccessIndicatorValue used during instantiation.
     */
    public void setPathMgmtSuccessIndicatorValue(YangEnumeration pathMgmtSuccessIndicatorValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-mgmt-success-indicator",
            pathMgmtSuccessIndicatorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "path-mgmt-success-indicator",
     * using a String value.
     * @param pathMgmtSuccessIndicatorValue used during instantiation.
     */
    public void setPathMgmtSuccessIndicatorValue(String pathMgmtSuccessIndicatorValue)
            throws JNCException {
        setPathMgmtSuccessIndicatorValue(new YangEnumeration(pathMgmtSuccessIndicatorValue, new String[] {
             "accept-AA-only",
             "accept-AA-AR",
        }));
    }

    /**
     * Unsets the value for child leaf "path-mgmt-success-indicator".
     */
    public void unsetPathMgmtSuccessIndicatorValue() throws JNCException {
        delete("path-mgmt-success-indicator");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "path-mgmt-success-indicator" leaf will not have a value.
     */
    public void addPathMgmtSuccessIndicator() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "path-mgmt-success-indicator",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "path-mgmt-success-indicator" with operation "replace".
     */
    public void markPathMgmtSuccessIndicatorReplace() throws JNCException {
        markLeafReplace("pathMgmtSuccessIndicator");
    }

    /**
     * Marks the leaf "path-mgmt-success-indicator" with operation "merge".
     */
    public void markPathMgmtSuccessIndicatorMerge() throws JNCException {
        markLeafMerge("pathMgmtSuccessIndicator");
    }

    /**
     * Marks the leaf "path-mgmt-success-indicator" with operation "create".
     */
    public void markPathMgmtSuccessIndicatorCreate() throws JNCException {
        markLeafCreate("pathMgmtSuccessIndicator");
    }

    /**
     * Marks the leaf "path-mgmt-success-indicator" with operation "delete".
     */
    public void markPathMgmtSuccessIndicatorDelete() throws JNCException {
        markLeafDelete("pathMgmtSuccessIndicator");
    }

    /* Access methods for optional leaf child: "dscp-mark". */

    /**
     * Gets the value for child leaf "dscp-mark".
     * @return The value of the leaf.
     */
    public YangString getDscpMarkValue() throws JNCException {
        YangString dscpMark = (YangString)getValue("dscp-mark");
        if (dscpMark == null) {
            dscpMark = new YangString("de");  // default
        }
        return dscpMark;
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using instance of generated typedef class.
     * @param dscpMarkValue The value to set.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(YangString dscpMarkValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            dscpMarkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dscp-mark",
     * using a String value.
     * @param dscpMarkValue used during instantiation.
     */
    public void setDscpMarkValue(String dscpMarkValue) throws JNCException {
        setDscpMarkValue(new YangString(dscpMarkValue));
    }

    /**
     * Unsets the value for child leaf "dscp-mark".
     */
    public void unsetDscpMarkValue() throws JNCException {
        delete("dscp-mark");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dscp-mark" leaf will not have a value.
     */
    public void addDscpMark() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "dscp-mark",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dscp-mark" with operation "replace".
     */
    public void markDscpMarkReplace() throws JNCException {
        markLeafReplace("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "merge".
     */
    public void markDscpMarkMerge() throws JNCException {
        markLeafMerge("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "create".
     */
    public void markDscpMarkCreate() throws JNCException {
        markLeafCreate("dscpMark");
    }

    /**
     * Marks the leaf "dscp-mark" with operation "delete".
     */
    public void markDscpMarkDelete() throws JNCException {
        markLeafDelete("dscpMark");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
