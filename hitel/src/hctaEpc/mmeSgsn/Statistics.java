/* 
 * @(#)Statistics.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn;

import Cdma;

import Diameter;

import Dns;

import Element;

import ElementChildrenIterator;

import Epc;

import Fxa;

import FxaPeer;

import Ga;
import Gb;

import GprsMm;

import GprsSm;

import GroupSets;

import Gtpv1;

import Gtpv1Path;

import Gtpv2;

import Gtpv2Path;

import Iu;

import JNCException;

import LteHandover;

import LteLcs;

import LteMm;

import LteSm;

import Nodal;

import NodeSet;

import Platform;

import S1;

import S101;
import S102;

import S13;

import S1Enb;

import S6;

import SGs;

import Sbc;

import Sc;
import Sd;

import SgsnAcct;

import Slg;
import Sls;

import Ss7;

import UmtsHandover;

import UmtsMm;

import UmtsSm;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/statistics"
 * <p>
 * See line 43 in
 * mmeStatisticsConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Statistics extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "cdma".
     */
    public Cdma cdma = null;

    /**
     * Field for child container "diameter".
     */
    public Diameter diameter = null;

    /**
     * Field for child container "dns".
     */
    public Dns dns = null;

    /**
     * Field for child container "fxa".
     */
    public Fxa fxa = null;

    /**
     * Field for child container "fxaPeer".
     */
    public FxaPeer fxaPeer = null;

    /**
     * Field for child container "ga".
     */
    public Ga ga = null;

    /**
     * Field for child container "gb".
     */
    public Gb gb = null;

    /**
     * Field for child container "gprsMm".
     */
    public GprsMm gprsMm = null;

    /**
     * Field for child container "gprsSm".
     */
    public GprsSm gprsSm = null;

    /**
     * Field for child container "gtpV1".
     */
    public Gtpv1 gtpv1 = null;

    /**
     * Field for child container "gtpV1Path".
     */
    public Gtpv1Path gtpv1Path = null;

    /**
     * Field for child container "gtpV2".
     */
    public Gtpv2 gtpv2 = null;

    /**
     * Field for child container "gtpV2Path".
     */
    public Gtpv2Path gtpv2Path = null;

    /**
     * Field for child container "iu".
     */
    public Iu iu = null;

    /**
     * Field for child container "lteLcs".
     */
    public LteLcs lteLcs = null;

    /**
     * Field for child container "lteHandover".
     */
    public LteHandover lteHandover = null;

    /**
     * Field for child container "lteMm".
     */
    public LteMm lteMm = null;

    /**
     * Field for child container "lteSm".
     */
    public LteSm lteSm = null;

    /**
     * Field for child container "nodal".
     */
    public Nodal nodal = null;

    /**
     * Field for child container "platform".
     */
    public Platform platform = null;

    /**
     * Field for child container "s1".
     */
    public S1 s1 = null;

    /**
     * Field for child container "s101".
     */
    public S101 s101 = null;

    /**
     * Field for child container "s102".
     */
    public S102 s102 = null;

    /**
     * Field for child container "s13".
     */
    public S13 s13 = null;

    /**
     * Field for child container "s1Enb".
     */
    public S1Enb s1Enb = null;

    /**
     * Field for child container "s6".
     */
    public S6 s6 = null;

    /**
     * Field for child container "sbc".
     */
    public Sbc sbc = null;

    /**
     * Field for child container "sc".
     */
    public Sc sc = null;

    /**
     * Field for child container "sd".
     */
    public Sd sd = null;

    /**
     * Field for child container "sGs".
     */
    public SGs sGs = null;

    /**
     * Field for child container "sgsnAcct".
     */
    public SgsnAcct sgsnAcct = null;

    /**
     * Field for child container "slg".
     */
    public Slg slg = null;

    /**
     * Field for child container "sls".
     */
    public Sls sls = null;

    /**
     * Field for child container "ss7".
     */
    public Ss7 ss7 = null;

    /**
     * Field for child container "umtsHandover".
     */
    public UmtsHandover umtsHandover = null;

    /**
     * Field for child container "umtsMm".
     */
    public UmtsMm umtsMm = null;

    /**
     * Field for child container "umtsSm".
     */
    public UmtsSm umtsSm = null;

    /**
     * Constructor for an empty Statistics object.
     */
    public Statistics() {
        super(Epc.NAMESPACE, "statistics");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Statistics clone() {
        return (Statistics)cloneContent(new Statistics());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Statistics cloneShallow() {
        return (Statistics)cloneShallowContent(new Statistics());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "collection-interval",
            "retention-report",
            "retention-archive",
            "group-sets",
            "cdma",
            "diameter",
            "dns",
            "fxa",
            "fxaPeer",
            "ga",
            "gb",
            "gprsMm",
            "gprsSm",
            "gtpV1",
            "gtpV1Path",
            "gtpV2",
            "gtpV2Path",
            "iu",
            "lteLcs",
            "lteHandover",
            "lteMm",
            "lteSm",
            "nodal",
            "platform",
            "s1",
            "s101",
            "s102",
            "s13",
            "s1Enb",
            "s6",
            "sbc",
            "sc",
            "sd",
            "sGs",
            "sgsnAcct",
            "slg",
            "sls",
            "ss7",
            "umtsHandover",
            "umtsMm",
            "umtsSm",
        };
    }

    /* Access methods for optional leaf child: "collection-interval". */

    /**
     * Gets the value for child leaf "collection-interval".
     * @return The value of the leaf.
     */
    public YangEnumeration getCollectionIntervalValue() throws JNCException {
        YangEnumeration collectionInterval = (YangEnumeration)getValue("collection-interval");
        if (collectionInterval == null) {
            collectionInterval = new YangEnumeration("5", new String[] {  // default
                "5",
                "15",
                "30",
            });
        }
        return collectionInterval;
    }

    /**
     * Sets the value for child leaf "collection-interval",
     * using instance of generated typedef class.
     * @param collectionIntervalValue The value to set.
     * @param collectionIntervalValue used during instantiation.
     */
    public void setCollectionIntervalValue(YangEnumeration collectionIntervalValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "collection-interval",
            collectionIntervalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "collection-interval",
     * using a String value.
     * @param collectionIntervalValue used during instantiation.
     */
    public void setCollectionIntervalValue(String collectionIntervalValue)
            throws JNCException {
        setCollectionIntervalValue(new YangEnumeration(collectionIntervalValue, new String[] {
             "5",
             "15",
             "30",
        }));
    }

    /**
     * Unsets the value for child leaf "collection-interval".
     */
    public void unsetCollectionIntervalValue() throws JNCException {
        delete("collection-interval");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "collection-interval" leaf will not have a value.
     */
    public void addCollectionInterval() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "collection-interval",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "collection-interval" with operation "replace".
     */
    public void markCollectionIntervalReplace() throws JNCException {
        markLeafReplace("collectionInterval");
    }

    /**
     * Marks the leaf "collection-interval" with operation "merge".
     */
    public void markCollectionIntervalMerge() throws JNCException {
        markLeafMerge("collectionInterval");
    }

    /**
     * Marks the leaf "collection-interval" with operation "create".
     */
    public void markCollectionIntervalCreate() throws JNCException {
        markLeafCreate("collectionInterval");
    }

    /**
     * Marks the leaf "collection-interval" with operation "delete".
     */
    public void markCollectionIntervalDelete() throws JNCException {
        markLeafDelete("collectionInterval");
    }

    /* Access methods for optional leaf child: "retention-report". */

    /**
     * Gets the value for child leaf "retention-report".
     * @return The value of the leaf.
     */
    public YangUInt16 getRetentionReportValue() throws JNCException {
        YangUInt16 retentionReport = (YangUInt16)getValue("retention-report");
        if (retentionReport == null) {
            retentionReport = new YangUInt16("288");  // default
        }
        return retentionReport;
    }

    /**
     * Sets the value for child leaf "retention-report",
     * using instance of generated typedef class.
     * @param retentionReportValue The value to set.
     * @param retentionReportValue used during instantiation.
     */
    public void setRetentionReportValue(YangUInt16 retentionReportValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "retention-report",
            retentionReportValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "retention-report",
     * using Java primitive values.
     * @param retentionReportValue used during instantiation.
     */
    public void setRetentionReportValue(int retentionReportValue)
            throws JNCException {
        setRetentionReportValue(new YangUInt16(retentionReportValue));
    }

    /**
     * Sets the value for child leaf "retention-report",
     * using a String value.
     * @param retentionReportValue used during instantiation.
     */
    public void setRetentionReportValue(String retentionReportValue)
            throws JNCException {
        setRetentionReportValue(new YangUInt16(retentionReportValue));
    }

    /**
     * Unsets the value for child leaf "retention-report".
     */
    public void unsetRetentionReportValue() throws JNCException {
        delete("retention-report");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "retention-report" leaf will not have a value.
     */
    public void addRetentionReport() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "retention-report",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "retention-report" with operation "replace".
     */
    public void markRetentionReportReplace() throws JNCException {
        markLeafReplace("retentionReport");
    }

    /**
     * Marks the leaf "retention-report" with operation "merge".
     */
    public void markRetentionReportMerge() throws JNCException {
        markLeafMerge("retentionReport");
    }

    /**
     * Marks the leaf "retention-report" with operation "create".
     */
    public void markRetentionReportCreate() throws JNCException {
        markLeafCreate("retentionReport");
    }

    /**
     * Marks the leaf "retention-report" with operation "delete".
     */
    public void markRetentionReportDelete() throws JNCException {
        markLeafDelete("retentionReport");
    }

    /* Access methods for optional leaf child: "retention-archive". */

    /**
     * Gets the value for child leaf "retention-archive".
     * @return The value of the leaf.
     */
    public YangUInt16 getRetentionArchiveValue() throws JNCException {
        YangUInt16 retentionArchive = (YangUInt16)getValue("retention-archive");
        if (retentionArchive == null) {
            retentionArchive = new YangUInt16("10");  // default
        }
        return retentionArchive;
    }

    /**
     * Sets the value for child leaf "retention-archive",
     * using instance of generated typedef class.
     * @param retentionArchiveValue The value to set.
     * @param retentionArchiveValue used during instantiation.
     */
    public void setRetentionArchiveValue(YangUInt16 retentionArchiveValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "retention-archive",
            retentionArchiveValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "retention-archive",
     * using Java primitive values.
     * @param retentionArchiveValue used during instantiation.
     */
    public void setRetentionArchiveValue(int retentionArchiveValue)
            throws JNCException {
        setRetentionArchiveValue(new YangUInt16(retentionArchiveValue));
    }

    /**
     * Sets the value for child leaf "retention-archive",
     * using a String value.
     * @param retentionArchiveValue used during instantiation.
     */
    public void setRetentionArchiveValue(String retentionArchiveValue)
            throws JNCException {
        setRetentionArchiveValue(new YangUInt16(retentionArchiveValue));
    }

    /**
     * Unsets the value for child leaf "retention-archive".
     */
    public void unsetRetentionArchiveValue() throws JNCException {
        delete("retention-archive");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "retention-archive" leaf will not have a value.
     */
    public void addRetentionArchive() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "retention-archive",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "retention-archive" with operation "replace".
     */
    public void markRetentionArchiveReplace() throws JNCException {
        markLeafReplace("retentionArchive");
    }

    /**
     * Marks the leaf "retention-archive" with operation "merge".
     */
    public void markRetentionArchiveMerge() throws JNCException {
        markLeafMerge("retentionArchive");
    }

    /**
     * Marks the leaf "retention-archive" with operation "create".
     */
    public void markRetentionArchiveCreate() throws JNCException {
        markLeafCreate("retentionArchive");
    }

    /**
     * Marks the leaf "retention-archive" with operation "delete".
     */
    public void markRetentionArchiveDelete() throws JNCException {
        markLeafDelete("retentionArchive");
    }

    /* Access methods for list child: "group-sets". */

    /**
     * Gets list entry "groupSets", with specified keys.
     */
    public GroupSets getGroupSets() throws JNCException {
        String path = "group-sets";
        return (GroupSets)searchOne(path);
    }

    /**
     * Iterator method for the list "group-sets".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator groupSetsIterator() {
        return new ElementChildrenIterator(children, "group-sets");
    }

    /**
     * Adds list entry "groupSets", using an existing object.
     * @param groupSets The object to add.
     * @return The added child.
     */
    public GroupSets addGroupSets(GroupSets groupSets) throws JNCException {
        insertChild(groupSets, childrenNames());
        return groupSets;
    }

    /**
     * Adds list entry "groupSets".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public GroupSets addGroupSets() throws JNCException {
        GroupSets groupSets = new GroupSets();
        insertChild(groupSets, childrenNames());
        return groupSets;
    }

    /**
     * Deletes list entry "groupSets", with specified keys.
     */
    public void deleteGroupSets() throws JNCException {
        String path = "group-sets";
        delete(path);
    }

    /* Access methods for container child: "cdma". */

    /**
     * Adds container entry "cdma", using an existing object.
     * @param cdma The object to add.
     * @return The added child.
     */
    public Cdma addCdma(Cdma cdma) throws JNCException {
        this.cdma = cdma;
        insertChild(cdma, childrenNames());
        return cdma;
    }

    /**
     * Adds container entry "cdma".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Cdma addCdma() throws JNCException {
        Cdma cdma = new Cdma();
        this.cdma = cdma;
        insertChild(cdma, childrenNames());
        return cdma;
    }

    /**
     * Deletes container entry "cdma".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteCdma() throws JNCException {
        this.cdma = null;
        String path = "cdma";
        return delete(path);
    }

    /* Access methods for container child: "diameter". */

    /**
     * Adds container entry "diameter", using an existing object.
     * @param diameter The object to add.
     * @return The added child.
     */
    public Diameter addDiameter(Diameter diameter) throws JNCException {
        this.diameter = diameter;
        insertChild(diameter, childrenNames());
        return diameter;
    }

    /**
     * Adds container entry "diameter".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Diameter addDiameter() throws JNCException {
        Diameter diameter = new Diameter();
        this.diameter = diameter;
        insertChild(diameter, childrenNames());
        return diameter;
    }

    /**
     * Deletes container entry "diameter".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteDiameter() throws JNCException {
        this.diameter = null;
        String path = "diameter";
        return delete(path);
    }

    /* Access methods for container child: "dns". */

    /**
     * Adds container entry "dns", using an existing object.
     * @param dns The object to add.
     * @return The added child.
     */
    public Dns addDns(Dns dns) throws JNCException {
        this.dns = dns;
        insertChild(dns, childrenNames());
        return dns;
    }

    /**
     * Adds container entry "dns".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Dns addDns() throws JNCException {
        Dns dns = new Dns();
        this.dns = dns;
        insertChild(dns, childrenNames());
        return dns;
    }

    /**
     * Deletes container entry "dns".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteDns() throws JNCException {
        this.dns = null;
        String path = "dns";
        return delete(path);
    }

    /* Access methods for container child: "fxa". */

    /**
     * Adds container entry "fxa", using an existing object.
     * @param fxa The object to add.
     * @return The added child.
     */
    public Fxa addFxa(Fxa fxa) throws JNCException {
        this.fxa = fxa;
        insertChild(fxa, childrenNames());
        return fxa;
    }

    /**
     * Adds container entry "fxa".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Fxa addFxa() throws JNCException {
        Fxa fxa = new Fxa();
        this.fxa = fxa;
        insertChild(fxa, childrenNames());
        return fxa;
    }

    /**
     * Deletes container entry "fxa".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteFxa() throws JNCException {
        this.fxa = null;
        String path = "fxa";
        return delete(path);
    }

    /* Access methods for container child: "fxaPeer". */

    /**
     * Adds container entry "fxaPeer", using an existing object.
     * @param fxaPeer The object to add.
     * @return The added child.
     */
    public FxaPeer addFxaPeer(FxaPeer fxaPeer) throws JNCException {
        this.fxaPeer = fxaPeer;
        insertChild(fxaPeer, childrenNames());
        return fxaPeer;
    }

    /**
     * Adds container entry "fxaPeer".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public FxaPeer addFxaPeer() throws JNCException {
        FxaPeer fxaPeer = new FxaPeer();
        this.fxaPeer = fxaPeer;
        insertChild(fxaPeer, childrenNames());
        return fxaPeer;
    }

    /**
     * Deletes container entry "fxaPeer".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteFxaPeer() throws JNCException {
        this.fxaPeer = null;
        String path = "fxaPeer";
        return delete(path);
    }

    /* Access methods for container child: "ga". */

    /**
     * Adds container entry "ga", using an existing object.
     * @param ga The object to add.
     * @return The added child.
     */
    public Ga addGa(Ga ga) throws JNCException {
        this.ga = ga;
        insertChild(ga, childrenNames());
        return ga;
    }

    /**
     * Adds container entry "ga".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Ga addGa() throws JNCException {
        Ga ga = new Ga();
        this.ga = ga;
        insertChild(ga, childrenNames());
        return ga;
    }

    /**
     * Deletes container entry "ga".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGa() throws JNCException {
        this.ga = null;
        String path = "ga";
        return delete(path);
    }

    /* Access methods for container child: "gb". */

    /**
     * Adds container entry "gb", using an existing object.
     * @param gb The object to add.
     * @return The added child.
     */
    public Gb addGb(Gb gb) throws JNCException {
        this.gb = gb;
        insertChild(gb, childrenNames());
        return gb;
    }

    /**
     * Adds container entry "gb".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Gb addGb() throws JNCException {
        Gb gb = new Gb();
        this.gb = gb;
        insertChild(gb, childrenNames());
        return gb;
    }

    /**
     * Deletes container entry "gb".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGb() throws JNCException {
        this.gb = null;
        String path = "gb";
        return delete(path);
    }

    /* Access methods for container child: "gprsMm". */

    /**
     * Adds container entry "gprsMm", using an existing object.
     * @param gprsMm The object to add.
     * @return The added child.
     */
    public GprsMm addGprsMm(GprsMm gprsMm) throws JNCException {
        this.gprsMm = gprsMm;
        insertChild(gprsMm, childrenNames());
        return gprsMm;
    }

    /**
     * Adds container entry "gprsMm".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public GprsMm addGprsMm() throws JNCException {
        GprsMm gprsMm = new GprsMm();
        this.gprsMm = gprsMm;
        insertChild(gprsMm, childrenNames());
        return gprsMm;
    }

    /**
     * Deletes container entry "gprsMm".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGprsMm() throws JNCException {
        this.gprsMm = null;
        String path = "gprsMm";
        return delete(path);
    }

    /* Access methods for container child: "gprsSm". */

    /**
     * Adds container entry "gprsSm", using an existing object.
     * @param gprsSm The object to add.
     * @return The added child.
     */
    public GprsSm addGprsSm(GprsSm gprsSm) throws JNCException {
        this.gprsSm = gprsSm;
        insertChild(gprsSm, childrenNames());
        return gprsSm;
    }

    /**
     * Adds container entry "gprsSm".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public GprsSm addGprsSm() throws JNCException {
        GprsSm gprsSm = new GprsSm();
        this.gprsSm = gprsSm;
        insertChild(gprsSm, childrenNames());
        return gprsSm;
    }

    /**
     * Deletes container entry "gprsSm".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGprsSm() throws JNCException {
        this.gprsSm = null;
        String path = "gprsSm";
        return delete(path);
    }

    /* Access methods for container child: "gtpV1". */

    /**
     * Adds container entry "gtpv1", using an existing object.
     * @param gtpv1 The object to add.
     * @return The added child.
     */
    public Gtpv1 addGtpv1(Gtpv1 gtpv1) throws JNCException {
        this.gtpv1 = gtpv1;
        insertChild(gtpv1, childrenNames());
        return gtpv1;
    }

    /**
     * Adds container entry "gtpv1".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Gtpv1 addGtpv1() throws JNCException {
        Gtpv1 gtpv1 = new Gtpv1();
        this.gtpv1 = gtpv1;
        insertChild(gtpv1, childrenNames());
        return gtpv1;
    }

    /**
     * Deletes container entry "gtpv1".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGtpv1() throws JNCException {
        this.gtpv1 = null;
        String path = "gtpV1";
        return delete(path);
    }

    /* Access methods for container child: "gtpV1Path". */

    /**
     * Adds container entry "gtpv1Path", using an existing object.
     * @param gtpv1Path The object to add.
     * @return The added child.
     */
    public Gtpv1Path addGtpv1Path(Gtpv1Path gtpv1Path) throws JNCException {
        this.gtpv1Path = gtpv1Path;
        insertChild(gtpv1Path, childrenNames());
        return gtpv1Path;
    }

    /**
     * Adds container entry "gtpv1Path".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Gtpv1Path addGtpv1Path() throws JNCException {
        Gtpv1Path gtpv1Path = new Gtpv1Path();
        this.gtpv1Path = gtpv1Path;
        insertChild(gtpv1Path, childrenNames());
        return gtpv1Path;
    }

    /**
     * Deletes container entry "gtpv1Path".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGtpv1Path() throws JNCException {
        this.gtpv1Path = null;
        String path = "gtpV1Path";
        return delete(path);
    }

    /* Access methods for container child: "gtpV2". */

    /**
     * Adds container entry "gtpv2", using an existing object.
     * @param gtpv2 The object to add.
     * @return The added child.
     */
    public Gtpv2 addGtpv2(Gtpv2 gtpv2) throws JNCException {
        this.gtpv2 = gtpv2;
        insertChild(gtpv2, childrenNames());
        return gtpv2;
    }

    /**
     * Adds container entry "gtpv2".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Gtpv2 addGtpv2() throws JNCException {
        Gtpv2 gtpv2 = new Gtpv2();
        this.gtpv2 = gtpv2;
        insertChild(gtpv2, childrenNames());
        return gtpv2;
    }

    /**
     * Deletes container entry "gtpv2".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGtpv2() throws JNCException {
        this.gtpv2 = null;
        String path = "gtpV2";
        return delete(path);
    }

    /* Access methods for container child: "gtpV2Path". */

    /**
     * Adds container entry "gtpv2Path", using an existing object.
     * @param gtpv2Path The object to add.
     * @return The added child.
     */
    public Gtpv2Path addGtpv2Path(Gtpv2Path gtpv2Path) throws JNCException {
        this.gtpv2Path = gtpv2Path;
        insertChild(gtpv2Path, childrenNames());
        return gtpv2Path;
    }

    /**
     * Adds container entry "gtpv2Path".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Gtpv2Path addGtpv2Path() throws JNCException {
        Gtpv2Path gtpv2Path = new Gtpv2Path();
        this.gtpv2Path = gtpv2Path;
        insertChild(gtpv2Path, childrenNames());
        return gtpv2Path;
    }

    /**
     * Deletes container entry "gtpv2Path".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGtpv2Path() throws JNCException {
        this.gtpv2Path = null;
        String path = "gtpV2Path";
        return delete(path);
    }

    /* Access methods for container child: "iu". */

    /**
     * Adds container entry "iu", using an existing object.
     * @param iu The object to add.
     * @return The added child.
     */
    public Iu addIu(Iu iu) throws JNCException {
        this.iu = iu;
        insertChild(iu, childrenNames());
        return iu;
    }

    /**
     * Adds container entry "iu".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Iu addIu() throws JNCException {
        Iu iu = new Iu();
        this.iu = iu;
        insertChild(iu, childrenNames());
        return iu;
    }

    /**
     * Deletes container entry "iu".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteIu() throws JNCException {
        this.iu = null;
        String path = "iu";
        return delete(path);
    }

    /* Access methods for container child: "lteLcs". */

    /**
     * Adds container entry "lteLcs", using an existing object.
     * @param lteLcs The object to add.
     * @return The added child.
     */
    public LteLcs addLteLcs(LteLcs lteLcs) throws JNCException {
        this.lteLcs = lteLcs;
        insertChild(lteLcs, childrenNames());
        return lteLcs;
    }

    /**
     * Adds container entry "lteLcs".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LteLcs addLteLcs() throws JNCException {
        LteLcs lteLcs = new LteLcs();
        this.lteLcs = lteLcs;
        insertChild(lteLcs, childrenNames());
        return lteLcs;
    }

    /**
     * Deletes container entry "lteLcs".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLteLcs() throws JNCException {
        this.lteLcs = null;
        String path = "lteLcs";
        return delete(path);
    }

    /* Access methods for container child: "lteHandover". */

    /**
     * Adds container entry "lteHandover", using an existing object.
     * @param lteHandover The object to add.
     * @return The added child.
     */
    public LteHandover addLteHandover(LteHandover lteHandover)
            throws JNCException {
        this.lteHandover = lteHandover;
        insertChild(lteHandover, childrenNames());
        return lteHandover;
    }

    /**
     * Adds container entry "lteHandover".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LteHandover addLteHandover() throws JNCException {
        LteHandover lteHandover = new LteHandover();
        this.lteHandover = lteHandover;
        insertChild(lteHandover, childrenNames());
        return lteHandover;
    }

    /**
     * Deletes container entry "lteHandover".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLteHandover() throws JNCException {
        this.lteHandover = null;
        String path = "lteHandover";
        return delete(path);
    }

    /* Access methods for container child: "lteMm". */

    /**
     * Adds container entry "lteMm", using an existing object.
     * @param lteMm The object to add.
     * @return The added child.
     */
    public LteMm addLteMm(LteMm lteMm) throws JNCException {
        this.lteMm = lteMm;
        insertChild(lteMm, childrenNames());
        return lteMm;
    }

    /**
     * Adds container entry "lteMm".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LteMm addLteMm() throws JNCException {
        LteMm lteMm = new LteMm();
        this.lteMm = lteMm;
        insertChild(lteMm, childrenNames());
        return lteMm;
    }

    /**
     * Deletes container entry "lteMm".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLteMm() throws JNCException {
        this.lteMm = null;
        String path = "lteMm";
        return delete(path);
    }

    /* Access methods for container child: "lteSm". */

    /**
     * Adds container entry "lteSm", using an existing object.
     * @param lteSm The object to add.
     * @return The added child.
     */
    public LteSm addLteSm(LteSm lteSm) throws JNCException {
        this.lteSm = lteSm;
        insertChild(lteSm, childrenNames());
        return lteSm;
    }

    /**
     * Adds container entry "lteSm".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LteSm addLteSm() throws JNCException {
        LteSm lteSm = new LteSm();
        this.lteSm = lteSm;
        insertChild(lteSm, childrenNames());
        return lteSm;
    }

    /**
     * Deletes container entry "lteSm".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLteSm() throws JNCException {
        this.lteSm = null;
        String path = "lteSm";
        return delete(path);
    }

    /* Access methods for container child: "nodal". */

    /**
     * Adds container entry "nodal", using an existing object.
     * @param nodal The object to add.
     * @return The added child.
     */
    public Nodal addNodal(Nodal nodal) throws JNCException {
        this.nodal = nodal;
        insertChild(nodal, childrenNames());
        return nodal;
    }

    /**
     * Adds container entry "nodal".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Nodal addNodal() throws JNCException {
        Nodal nodal = new Nodal();
        this.nodal = nodal;
        insertChild(nodal, childrenNames());
        return nodal;
    }

    /**
     * Deletes container entry "nodal".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteNodal() throws JNCException {
        this.nodal = null;
        String path = "nodal";
        return delete(path);
    }

    /* Access methods for container child: "platform". */

    /**
     * Adds container entry "platform", using an existing object.
     * @param platform The object to add.
     * @return The added child.
     */
    public Platform addPlatform(Platform platform) throws JNCException {
        this.platform = platform;
        insertChild(platform, childrenNames());
        return platform;
    }

    /**
     * Adds container entry "platform".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Platform addPlatform() throws JNCException {
        Platform platform = new Platform();
        this.platform = platform;
        insertChild(platform, childrenNames());
        return platform;
    }

    /**
     * Deletes container entry "platform".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deletePlatform() throws JNCException {
        this.platform = null;
        String path = "platform";
        return delete(path);
    }

    /* Access methods for container child: "s1". */

    /**
     * Adds container entry "s1", using an existing object.
     * @param s1 The object to add.
     * @return The added child.
     */
    public S1 addS1(S1 s1) throws JNCException {
        this.s1 = s1;
        insertChild(s1, childrenNames());
        return s1;
    }

    /**
     * Adds container entry "s1".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S1 addS1() throws JNCException {
        S1 s1 = new S1();
        this.s1 = s1;
        insertChild(s1, childrenNames());
        return s1;
    }

    /**
     * Deletes container entry "s1".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS1() throws JNCException {
        this.s1 = null;
        String path = "s1";
        return delete(path);
    }

    /* Access methods for container child: "s101". */

    /**
     * Adds container entry "s101", using an existing object.
     * @param s101 The object to add.
     * @return The added child.
     */
    public S101 addS101(S101 s101) throws JNCException {
        this.s101 = s101;
        insertChild(s101, childrenNames());
        return s101;
    }

    /**
     * Adds container entry "s101".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S101 addS101() throws JNCException {
        S101 s101 = new S101();
        this.s101 = s101;
        insertChild(s101, childrenNames());
        return s101;
    }

    /**
     * Deletes container entry "s101".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS101() throws JNCException {
        this.s101 = null;
        String path = "s101";
        return delete(path);
    }

    /* Access methods for container child: "s102". */

    /**
     * Adds container entry "s102", using an existing object.
     * @param s102 The object to add.
     * @return The added child.
     */
    public S102 addS102(S102 s102) throws JNCException {
        this.s102 = s102;
        insertChild(s102, childrenNames());
        return s102;
    }

    /**
     * Adds container entry "s102".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S102 addS102() throws JNCException {
        S102 s102 = new S102();
        this.s102 = s102;
        insertChild(s102, childrenNames());
        return s102;
    }

    /**
     * Deletes container entry "s102".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS102() throws JNCException {
        this.s102 = null;
        String path = "s102";
        return delete(path);
    }

    /* Access methods for container child: "s13". */

    /**
     * Adds container entry "s13", using an existing object.
     * @param s13 The object to add.
     * @return The added child.
     */
    public S13 addS13(S13 s13) throws JNCException {
        this.s13 = s13;
        insertChild(s13, childrenNames());
        return s13;
    }

    /**
     * Adds container entry "s13".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S13 addS13() throws JNCException {
        S13 s13 = new S13();
        this.s13 = s13;
        insertChild(s13, childrenNames());
        return s13;
    }

    /**
     * Deletes container entry "s13".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS13() throws JNCException {
        this.s13 = null;
        String path = "s13";
        return delete(path);
    }

    /* Access methods for container child: "s1Enb". */

    /**
     * Adds container entry "s1Enb", using an existing object.
     * @param s1Enb The object to add.
     * @return The added child.
     */
    public S1Enb addS1Enb(S1Enb s1Enb) throws JNCException {
        this.s1Enb = s1Enb;
        insertChild(s1Enb, childrenNames());
        return s1Enb;
    }

    /**
     * Adds container entry "s1Enb".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S1Enb addS1Enb() throws JNCException {
        S1Enb s1Enb = new S1Enb();
        this.s1Enb = s1Enb;
        insertChild(s1Enb, childrenNames());
        return s1Enb;
    }

    /**
     * Deletes container entry "s1Enb".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS1Enb() throws JNCException {
        this.s1Enb = null;
        String path = "s1Enb";
        return delete(path);
    }

    /* Access methods for container child: "s6". */

    /**
     * Adds container entry "s6", using an existing object.
     * @param s6 The object to add.
     * @return The added child.
     */
    public S6 addS6(S6 s6) throws JNCException {
        this.s6 = s6;
        insertChild(s6, childrenNames());
        return s6;
    }

    /**
     * Adds container entry "s6".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S6 addS6() throws JNCException {
        S6 s6 = new S6();
        this.s6 = s6;
        insertChild(s6, childrenNames());
        return s6;
    }

    /**
     * Deletes container entry "s6".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS6() throws JNCException {
        this.s6 = null;
        String path = "s6";
        return delete(path);
    }

    /* Access methods for container child: "sbc". */

    /**
     * Adds container entry "sbc", using an existing object.
     * @param sbc The object to add.
     * @return The added child.
     */
    public Sbc addSbc(Sbc sbc) throws JNCException {
        this.sbc = sbc;
        insertChild(sbc, childrenNames());
        return sbc;
    }

    /**
     * Adds container entry "sbc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Sbc addSbc() throws JNCException {
        Sbc sbc = new Sbc();
        this.sbc = sbc;
        insertChild(sbc, childrenNames());
        return sbc;
    }

    /**
     * Deletes container entry "sbc".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSbc() throws JNCException {
        this.sbc = null;
        String path = "sbc";
        return delete(path);
    }

    /* Access methods for container child: "sc". */

    /**
     * Adds container entry "sc", using an existing object.
     * @param sc The object to add.
     * @return The added child.
     */
    public Sc addSc(Sc sc) throws JNCException {
        this.sc = sc;
        insertChild(sc, childrenNames());
        return sc;
    }

    /**
     * Adds container entry "sc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Sc addSc() throws JNCException {
        Sc sc = new Sc();
        this.sc = sc;
        insertChild(sc, childrenNames());
        return sc;
    }

    /**
     * Deletes container entry "sc".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSc() throws JNCException {
        this.sc = null;
        String path = "sc";
        return delete(path);
    }

    /* Access methods for container child: "sd". */

    /**
     * Adds container entry "sd", using an existing object.
     * @param sd The object to add.
     * @return The added child.
     */
    public Sd addSd(Sd sd) throws JNCException {
        this.sd = sd;
        insertChild(sd, childrenNames());
        return sd;
    }

    /**
     * Adds container entry "sd".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Sd addSd() throws JNCException {
        Sd sd = new Sd();
        this.sd = sd;
        insertChild(sd, childrenNames());
        return sd;
    }

    /**
     * Deletes container entry "sd".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSd() throws JNCException {
        this.sd = null;
        String path = "sd";
        return delete(path);
    }

    /* Access methods for container child: "sGs". */

    /**
     * Adds container entry "sGs", using an existing object.
     * @param sGs The object to add.
     * @return The added child.
     */
    public SGs addSGs(SGs sGs) throws JNCException {
        this.sGs = sGs;
        insertChild(sGs, childrenNames());
        return sGs;
    }

    /**
     * Adds container entry "sGs".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SGs addSGs() throws JNCException {
        SGs sGs = new SGs();
        this.sGs = sGs;
        insertChild(sGs, childrenNames());
        return sGs;
    }

    /**
     * Deletes container entry "sGs".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSGs() throws JNCException {
        this.sGs = null;
        String path = "sGs";
        return delete(path);
    }

    /* Access methods for container child: "sgsnAcct". */

    /**
     * Adds container entry "sgsnAcct", using an existing object.
     * @param sgsnAcct The object to add.
     * @return The added child.
     */
    public SgsnAcct addSgsnAcct(SgsnAcct sgsnAcct) throws JNCException {
        this.sgsnAcct = sgsnAcct;
        insertChild(sgsnAcct, childrenNames());
        return sgsnAcct;
    }

    /**
     * Adds container entry "sgsnAcct".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SgsnAcct addSgsnAcct() throws JNCException {
        SgsnAcct sgsnAcct = new SgsnAcct();
        this.sgsnAcct = sgsnAcct;
        insertChild(sgsnAcct, childrenNames());
        return sgsnAcct;
    }

    /**
     * Deletes container entry "sgsnAcct".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSgsnAcct() throws JNCException {
        this.sgsnAcct = null;
        String path = "sgsnAcct";
        return delete(path);
    }

    /* Access methods for container child: "slg". */

    /**
     * Adds container entry "slg", using an existing object.
     * @param slg The object to add.
     * @return The added child.
     */
    public Slg addSlg(Slg slg) throws JNCException {
        this.slg = slg;
        insertChild(slg, childrenNames());
        return slg;
    }

    /**
     * Adds container entry "slg".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Slg addSlg() throws JNCException {
        Slg slg = new Slg();
        this.slg = slg;
        insertChild(slg, childrenNames());
        return slg;
    }

    /**
     * Deletes container entry "slg".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSlg() throws JNCException {
        this.slg = null;
        String path = "slg";
        return delete(path);
    }

    /* Access methods for container child: "sls". */

    /**
     * Adds container entry "sls", using an existing object.
     * @param sls The object to add.
     * @return The added child.
     */
    public Sls addSls(Sls sls) throws JNCException {
        this.sls = sls;
        insertChild(sls, childrenNames());
        return sls;
    }

    /**
     * Adds container entry "sls".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Sls addSls() throws JNCException {
        Sls sls = new Sls();
        this.sls = sls;
        insertChild(sls, childrenNames());
        return sls;
    }

    /**
     * Deletes container entry "sls".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSls() throws JNCException {
        this.sls = null;
        String path = "sls";
        return delete(path);
    }

    /* Access methods for container child: "ss7". */

    /**
     * Adds container entry "ss7", using an existing object.
     * @param ss7 The object to add.
     * @return The added child.
     */
    public Ss7 addSs7(Ss7 ss7) throws JNCException {
        this.ss7 = ss7;
        insertChild(ss7, childrenNames());
        return ss7;
    }

    /**
     * Adds container entry "ss7".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Ss7 addSs7() throws JNCException {
        Ss7 ss7 = new Ss7();
        this.ss7 = ss7;
        insertChild(ss7, childrenNames());
        return ss7;
    }

    /**
     * Deletes container entry "ss7".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSs7() throws JNCException {
        this.ss7 = null;
        String path = "ss7";
        return delete(path);
    }

    /* Access methods for container child: "umtsHandover". */

    /**
     * Adds container entry "umtsHandover", using an existing object.
     * @param umtsHandover The object to add.
     * @return The added child.
     */
    public UmtsHandover addUmtsHandover(UmtsHandover umtsHandover)
            throws JNCException {
        this.umtsHandover = umtsHandover;
        insertChild(umtsHandover, childrenNames());
        return umtsHandover;
    }

    /**
     * Adds container entry "umtsHandover".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public UmtsHandover addUmtsHandover() throws JNCException {
        UmtsHandover umtsHandover = new UmtsHandover();
        this.umtsHandover = umtsHandover;
        insertChild(umtsHandover, childrenNames());
        return umtsHandover;
    }

    /**
     * Deletes container entry "umtsHandover".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteUmtsHandover() throws JNCException {
        this.umtsHandover = null;
        String path = "umtsHandover";
        return delete(path);
    }

    /* Access methods for container child: "umtsMm". */

    /**
     * Adds container entry "umtsMm", using an existing object.
     * @param umtsMm The object to add.
     * @return The added child.
     */
    public UmtsMm addUmtsMm(UmtsMm umtsMm) throws JNCException {
        this.umtsMm = umtsMm;
        insertChild(umtsMm, childrenNames());
        return umtsMm;
    }

    /**
     * Adds container entry "umtsMm".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public UmtsMm addUmtsMm() throws JNCException {
        UmtsMm umtsMm = new UmtsMm();
        this.umtsMm = umtsMm;
        insertChild(umtsMm, childrenNames());
        return umtsMm;
    }

    /**
     * Deletes container entry "umtsMm".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteUmtsMm() throws JNCException {
        this.umtsMm = null;
        String path = "umtsMm";
        return delete(path);
    }

    /* Access methods for container child: "umtsSm". */

    /**
     * Adds container entry "umtsSm", using an existing object.
     * @param umtsSm The object to add.
     * @return The added child.
     */
    public UmtsSm addUmtsSm(UmtsSm umtsSm) throws JNCException {
        this.umtsSm = umtsSm;
        insertChild(umtsSm, childrenNames());
        return umtsSm;
    }

    /**
     * Adds container entry "umtsSm".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public UmtsSm addUmtsSm() throws JNCException {
        UmtsSm umtsSm = new UmtsSm();
        this.umtsSm = umtsSm;
        insertChild(umtsSm, childrenNames());
        return umtsSm;
    }

    /**
     * Deletes container entry "umtsSm".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteUmtsSm() throws JNCException {
        this.umtsSm = null;
        String path = "umtsSm";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Cdma) cdma = (Cdma)child;
        else if (child instanceof Diameter) diameter = (Diameter)child;
        else if (child instanceof Dns) dns = (Dns)child;
        else if (child instanceof Fxa) fxa = (Fxa)child;
        else if (child instanceof FxaPeer) fxaPeer = (FxaPeer)child;
        else if (child instanceof Ga) ga = (Ga)child;
        else if (child instanceof Gb) gb = (Gb)child;
        else if (child instanceof GprsMm) gprsMm = (GprsMm)child;
        else if (child instanceof GprsSm) gprsSm = (GprsSm)child;
        else if (child instanceof Gtpv1) gtpv1 = (Gtpv1)child;
        else if (child instanceof Gtpv1Path) gtpv1Path = (Gtpv1Path)child;
        else if (child instanceof Gtpv2) gtpv2 = (Gtpv2)child;
        else if (child instanceof Gtpv2Path) gtpv2Path = (Gtpv2Path)child;
        else if (child instanceof Iu) iu = (Iu)child;
        else if (child instanceof LteLcs) lteLcs = (LteLcs)child;
        else if (child instanceof LteHandover) lteHandover = (LteHandover)child;
        else if (child instanceof LteMm) lteMm = (LteMm)child;
        else if (child instanceof LteSm) lteSm = (LteSm)child;
        else if (child instanceof Nodal) nodal = (Nodal)child;
        else if (child instanceof Platform) platform = (Platform)child;
        else if (child instanceof S1) s1 = (S1)child;
        else if (child instanceof S101) s101 = (S101)child;
        else if (child instanceof S102) s102 = (S102)child;
        else if (child instanceof S13) s13 = (S13)child;
        else if (child instanceof S1Enb) s1Enb = (S1Enb)child;
        else if (child instanceof S6) s6 = (S6)child;
        else if (child instanceof Sbc) sbc = (Sbc)child;
        else if (child instanceof Sc) sc = (Sc)child;
        else if (child instanceof Sd) sd = (Sd)child;
        else if (child instanceof SGs) sGs = (SGs)child;
        else if (child instanceof SgsnAcct) sgsnAcct = (SgsnAcct)child;
        else if (child instanceof Slg) slg = (Slg)child;
        else if (child instanceof Sls) sls = (Sls)child;
        else if (child instanceof Ss7) ss7 = (Ss7)child;
        else if (child instanceof UmtsHandover) umtsHandover = (UmtsHandover)child;
        else if (child instanceof UmtsMm) umtsMm = (UmtsMm)child;
        else if (child instanceof UmtsSm) umtsSm = (UmtsSm)child;
    }

}
