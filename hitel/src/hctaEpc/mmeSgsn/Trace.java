/* 
 * @(#)Trace.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn;

import Element;

import ElementChildrenIterator;

import Epc;

import JNCException;

import MmeTraceStandards;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/trace"
 * <p>
 * See line 2332 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Trace extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Trace object.
     */
    public Trace() {
        super(Epc.NAMESPACE, "trace");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Trace clone() {
        return (Trace)cloneContent(new Trace());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Trace cloneShallow() {
        return (Trace)cloneShallowContent(new Trace());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-trace-standards",
        };
    }

    /* Access methods for list child: "mme-trace-standards". */

    /**
     * Gets list entry "mmeTraceStandards", with specified keys.
     * @param targetTypeValue Key argument of child.
     * @param targetValueValue Key argument of child.
     */
    public MmeTraceStandards getMmeTraceStandards(YangEnumeration targetTypeValue, YangString targetValueValue)
            throws JNCException {
        String path = "mme-trace-standards[targetType='" + targetTypeValue + "'][targetValue='" + targetValueValue + "']";
        return (MmeTraceStandards)searchOne(path);
    }

    /**
     * Gets list entry "mmeTraceStandards", with specified keys.
     * The keys are specified as strings.
     * @param targetTypeValue Key argument of child.
     * @param targetValueValue Key argument of child.
     */
    public MmeTraceStandards getMmeTraceStandards(String targetTypeValue, String targetValueValue)
            throws JNCException {
        String path = "mme-trace-standards[targetType='" + targetTypeValue + "'][targetValue='" + targetValueValue + "']";
        return (MmeTraceStandards)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-trace-standards".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeTraceStandardsIterator() {
        return new ElementChildrenIterator(children, "mme-trace-standards");
    }

    /**
     * Adds list entry "mmeTraceStandards", using an existing object.
     * @param mmeTraceStandards The object to add.
     * @return The added child.
     */
    public MmeTraceStandards addMmeTraceStandards(MmeTraceStandards mmeTraceStandards)
            throws JNCException {
        insertChild(mmeTraceStandards, childrenNames());
        return mmeTraceStandards;
    }

    /**
     * Adds list entry "mmeTraceStandards", with specified keys.
     * @param targetTypeValue Key argument of child.
     * @param targetValueValue Key argument of child.
     * @return The added child.
     */
    public MmeTraceStandards addMmeTraceStandards(YangEnumeration targetTypeValue, YangString targetValueValue)
            throws JNCException {
        MmeTraceStandards mmeTraceStandards = new MmeTraceStandards(targetTypeValue, targetValueValue);
        return addMmeTraceStandards(mmeTraceStandards);
    }

    /**
     * Adds list entry "mmeTraceStandards", with specified keys.
     * The keys are specified as strings.
     * @param targetTypeValue Key argument of child.
     * @param targetValueValue Key argument of child.
     * @return The added child.
     */
    public MmeTraceStandards addMmeTraceStandards(String targetTypeValue, String targetValueValue)
            throws JNCException {
        MmeTraceStandards mmeTraceStandards = new MmeTraceStandards(targetTypeValue, targetValueValue);
        return addMmeTraceStandards(mmeTraceStandards);
    }

    /**
     * Adds list entry "mmeTraceStandards".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeTraceStandards addMmeTraceStandards() throws JNCException {
        MmeTraceStandards mmeTraceStandards = new MmeTraceStandards();
        insertChild(mmeTraceStandards, childrenNames());
        return mmeTraceStandards;
    }

    /**
     * Deletes list entry "mmeTraceStandards", with specified keys.
     * @param targetTypeValue Key argument of child.
     * @param targetValueValue Key argument of child.
     */
    public void deleteMmeTraceStandards(YangEnumeration targetTypeValue, YangString targetValueValue)
            throws JNCException {
        String path = "mme-trace-standards[targetType='" + targetTypeValue + "'][targetValue='" + targetValueValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeTraceStandards", with specified keys.
     * The keys are specified as strings.
     * @param targetTypeValue Key argument of child.
     * @param targetValueValue Key argument of child.
     */
    public void deleteMmeTraceStandards(String targetTypeValue, String targetValueValue)
            throws JNCException {
        String path = "mme-trace-standards[targetType='" + targetTypeValue + "'][targetValue='" + targetValueValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
