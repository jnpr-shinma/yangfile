/* 
 * @(#)MmeVlr.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.serviceArea;
import .ietfInetTypes.IpAddress;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/serviceArea/mme-vlr"
 * <p>
 * See line 2042 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeVlr extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeVlr object.
     */
    public MmeVlr() {
        super(Epc.NAMESPACE, "mme-vlr");
    }

    /**
     * Constructor for an initialized MmeVlr object,
     * 
     * @param nameValue Key argument of child.
     */
    public MmeVlr(YangString nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-vlr");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized MmeVlr object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public MmeVlr(String nameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-vlr");
        Leaf name = new Leaf(Epc.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeVlr clone() {
        MmeVlr copy;
        try {
            copy = new MmeVlr(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeVlr)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeVlr cloneShallow() {
        MmeVlr copy;
        try {
            copy = new MmeVlr(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeVlr)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "vlr-type",
            "vlr-number",
            "callp-service-id",
            "ip-address1",
            "ip-address2",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "vlr-type". */

    /**
     * Gets the value for child leaf "vlr-type".
     * @return The value of the leaf.
     */
    public YangEnumeration getVlrTypeValue() throws JNCException {
        return (YangEnumeration)getValue("vlr-type");
    }

    /**
     * Sets the value for child leaf "vlr-type",
     * using instance of generated typedef class.
     * @param vlrTypeValue The value to set.
     * @param vlrTypeValue used during instantiation.
     */
    public void setVlrTypeValue(YangEnumeration vlrTypeValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-type",
            vlrTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlr-type",
     * using a String value.
     * @param vlrTypeValue used during instantiation.
     */
    public void setVlrTypeValue(String vlrTypeValue) throws JNCException {
        setVlrTypeValue(new YangEnumeration(vlrTypeValue, new String[] {
             "gs",
             "sgs",
             "both",
        }));
    }

    /**
     * Unsets the value for child leaf "vlr-type".
     */
    public void unsetVlrTypeValue() throws JNCException {
        delete("vlr-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlr-type" leaf will not have a value.
     */
    public void addVlrType() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlr-type" with operation "replace".
     */
    public void markVlrTypeReplace() throws JNCException {
        markLeafReplace("vlrType");
    }

    /**
     * Marks the leaf "vlr-type" with operation "merge".
     */
    public void markVlrTypeMerge() throws JNCException {
        markLeafMerge("vlrType");
    }

    /**
     * Marks the leaf "vlr-type" with operation "create".
     */
    public void markVlrTypeCreate() throws JNCException {
        markLeafCreate("vlrType");
    }

    /**
     * Marks the leaf "vlr-type" with operation "delete".
     */
    public void markVlrTypeDelete() throws JNCException {
        markLeafDelete("vlrType");
    }

    /* Access methods for optional leaf child: "vlr-number". */

    /**
     * Gets the value for child leaf "vlr-number".
     * @return The value of the leaf.
     */
    public YangString getVlrNumberValue() throws JNCException {
        return (YangString)getValue("vlr-number");
    }

    /**
     * Sets the value for child leaf "vlr-number",
     * using instance of generated typedef class.
     * @param vlrNumberValue The value to set.
     * @param vlrNumberValue used during instantiation.
     */
    public void setVlrNumberValue(YangString vlrNumberValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-number",
            vlrNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlr-number",
     * using a String value.
     * @param vlrNumberValue used during instantiation.
     */
    public void setVlrNumberValue(String vlrNumberValue) throws JNCException {
        setVlrNumberValue(new YangString(vlrNumberValue));
    }

    /**
     * Unsets the value for child leaf "vlr-number".
     */
    public void unsetVlrNumberValue() throws JNCException {
        delete("vlr-number");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlr-number" leaf will not have a value.
     */
    public void addVlrNumber() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-number",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlr-number" with operation "replace".
     */
    public void markVlrNumberReplace() throws JNCException {
        markLeafReplace("vlrNumber");
    }

    /**
     * Marks the leaf "vlr-number" with operation "merge".
     */
    public void markVlrNumberMerge() throws JNCException {
        markLeafMerge("vlrNumber");
    }

    /**
     * Marks the leaf "vlr-number" with operation "create".
     */
    public void markVlrNumberCreate() throws JNCException {
        markLeafCreate("vlrNumber");
    }

    /**
     * Marks the leaf "vlr-number" with operation "delete".
     */
    public void markVlrNumberDelete() throws JNCException {
        markLeafDelete("vlrNumber");
    }

    /* Access methods for optional leaf child: "callp-service-id". */

    /**
     * Gets the value for child leaf "callp-service-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getCallpServiceIdValue() throws JNCException {
        return (YangUInt16)getValue("callp-service-id");
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using instance of generated typedef class.
     * @param callpServiceIdValue The value to set.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(YangUInt16 callpServiceIdValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "callp-service-id",
            callpServiceIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using Java primitive values.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(int callpServiceIdValue)
            throws JNCException {
        setCallpServiceIdValue(new YangUInt16(callpServiceIdValue));
    }

    /**
     * Sets the value for child leaf "callp-service-id",
     * using a String value.
     * @param callpServiceIdValue used during instantiation.
     */
    public void setCallpServiceIdValue(String callpServiceIdValue)
            throws JNCException {
        setCallpServiceIdValue(new YangUInt16(callpServiceIdValue));
    }

    /**
     * Unsets the value for child leaf "callp-service-id".
     */
    public void unsetCallpServiceIdValue() throws JNCException {
        delete("callp-service-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "callp-service-id" leaf will not have a value.
     */
    public void addCallpServiceId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "callp-service-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "callp-service-id" with operation "replace".
     */
    public void markCallpServiceIdReplace() throws JNCException {
        markLeafReplace("callpServiceId");
    }

    /**
     * Marks the leaf "callp-service-id" with operation "merge".
     */
    public void markCallpServiceIdMerge() throws JNCException {
        markLeafMerge("callpServiceId");
    }

    /**
     * Marks the leaf "callp-service-id" with operation "create".
     */
    public void markCallpServiceIdCreate() throws JNCException {
        markLeafCreate("callpServiceId");
    }

    /**
     * Marks the leaf "callp-service-id" with operation "delete".
     */
    public void markCallpServiceIdDelete() throws JNCException {
        markLeafDelete("callpServiceId");
    }

    /* Access methods for optional leaf child: "ip-address1". */

    /**
     * Gets the value for child leaf "ip-address1".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddress1Value() throws JNCException {
        return (IpAddress)getValue("ip-address1");
    }

    /**
     * Sets the value for child leaf "ip-address1",
     * using a JNC type value.
     * @param ipAddress1Value The value to set.
     * @param ipAddress1Value used during instantiation.
     */
    public void setIpAddress1Value(IpAddress ipAddress1Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address1",
            ipAddress1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address1",
     * using a String value.
     * @param ipAddress1Value used during instantiation.
     */
    public void setIpAddress1Value(String ipAddress1Value) throws JNCException {
        setIpAddress1Value(new IpAddress(ipAddress1Value));
    }

    /**
     * Unsets the value for child leaf "ip-address1".
     */
    public void unsetIpAddress1Value() throws JNCException {
        delete("ip-address1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address1" leaf will not have a value.
     */
    public void addIpAddress1() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address1" with operation "replace".
     */
    public void markIpAddress1Replace() throws JNCException {
        markLeafReplace("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "merge".
     */
    public void markIpAddress1Merge() throws JNCException {
        markLeafMerge("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "create".
     */
    public void markIpAddress1Create() throws JNCException {
        markLeafCreate("ipAddress1");
    }

    /**
     * Marks the leaf "ip-address1" with operation "delete".
     */
    public void markIpAddress1Delete() throws JNCException {
        markLeafDelete("ipAddress1");
    }

    /* Access methods for optional leaf child: "ip-address2". */

    /**
     * Gets the value for child leaf "ip-address2".
     * @return The value of the leaf.
     */
    public IpAddress getIpAddress2Value() throws JNCException {
        IpAddress ipAddress2 = (IpAddress)getValue("ip-address2");
        if (ipAddress2 == null) {
            ipAddress2 = new IpAddress("0.0.0.0");  // default
        }
        return ipAddress2;
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a JNC type value.
     * @param ipAddress2Value The value to set.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(IpAddress ipAddress2Value)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            ipAddress2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip-address2",
     * using a String value.
     * @param ipAddress2Value used during instantiation.
     */
    public void setIpAddress2Value(String ipAddress2Value) throws JNCException {
        setIpAddress2Value(new IpAddress(ipAddress2Value));
    }

    /**
     * Unsets the value for child leaf "ip-address2".
     */
    public void unsetIpAddress2Value() throws JNCException {
        delete("ip-address2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip-address2" leaf will not have a value.
     */
    public void addIpAddress2() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ip-address2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip-address2" with operation "replace".
     */
    public void markIpAddress2Replace() throws JNCException {
        markLeafReplace("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "merge".
     */
    public void markIpAddress2Merge() throws JNCException {
        markLeafMerge("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "create".
     */
    public void markIpAddress2Create() throws JNCException {
        markLeafCreate("ipAddress2");
    }

    /**
     * Marks the leaf "ip-address2" with operation "delete".
     */
    public void markIpAddress2Delete() throws JNCException {
        markLeafDelete("ipAddress2");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
