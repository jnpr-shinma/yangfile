/* 
 * @(#)MmeRoutingArea.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.serviceArea;
import .hctaTimezone.TimezoneString;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/serviceArea/mme-routing-area"
 * <p>
 * See line 780 in
 * sgsnScConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeRoutingArea extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeRoutingArea object.
     */
    public MmeRoutingArea() {
        super(Epc.NAMESPACE, "mme-routing-area");
    }

    /**
     * Constructor for an initialized MmeRoutingArea object,
     * 
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     * @param racValue Key argument of child.
     */
    public MmeRoutingArea(YangString plmnValue, YangString lacValue, YangString racValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-routing-area");
        Leaf plmn = new Leaf(Epc.NAMESPACE, "plmn");
        plmn.setValue(plmnValue);
        insertChild(plmn, childrenNames());
        Leaf lac = new Leaf(Epc.NAMESPACE, "lac");
        lac.setValue(lacValue);
        insertChild(lac, childrenNames());
        Leaf rac = new Leaf(Epc.NAMESPACE, "rac");
        rac.setValue(racValue);
        insertChild(rac, childrenNames());
    }

    /**
     * Constructor for an initialized MmeRoutingArea object,
     * with String keys.
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     * @param racValue Key argument of child.
     */
    public MmeRoutingArea(String plmnValue, String lacValue, String racValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-routing-area");
        Leaf plmn = new Leaf(Epc.NAMESPACE, "plmn");
        plmn.setValue(new YangString(plmnValue));
        insertChild(plmn, childrenNames());
        Leaf lac = new Leaf(Epc.NAMESPACE, "lac");
        lac.setValue(new YangString(lacValue));
        insertChild(lac, childrenNames());
        Leaf rac = new Leaf(Epc.NAMESPACE, "rac");
        rac.setValue(new YangString(racValue));
        insertChild(rac, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeRoutingArea clone() {
        MmeRoutingArea copy;
        try {
            copy = new MmeRoutingArea(getPlmnValue().toString(), getLacValue().toString(), getRacValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeRoutingArea)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeRoutingArea cloneShallow() {
        MmeRoutingArea copy;
        try {
            copy = new MmeRoutingArea(getPlmnValue().toString(), getLacValue().toString(), getRacValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeRoutingArea)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "plmn",
            "lac",
            "rac",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "plmn",
            "lac",
            "rac",
            "rncid-list",
            "nseid-list",
            "timezone",
        };
    }

    /* Access methods for leaf child: "plmn". */

    /**
     * Gets the value for child leaf "plmn".
     * @return The value of the leaf.
     */
    public YangString getPlmnValue() throws JNCException {
        return (YangString)getValue("plmn");
    }

    /**
     * Sets the value for child leaf "plmn",
     * using instance of generated typedef class.
     * @param plmnValue The value to set.
     * @param plmnValue used during instantiation.
     */
    public void setPlmnValue(YangString plmnValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn",
            plmnValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "plmn",
     * using a String value.
     * @param plmnValue used during instantiation.
     */
    public void setPlmnValue(String plmnValue) throws JNCException {
        setPlmnValue(new YangString(plmnValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "plmn" leaf will not have a value.
     */
    public void addPlmn() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "lac". */

    /**
     * Gets the value for child leaf "lac".
     * @return The value of the leaf.
     */
    public YangString getLacValue() throws JNCException {
        return (YangString)getValue("lac");
    }

    /**
     * Sets the value for child leaf "lac",
     * using instance of generated typedef class.
     * @param lacValue The value to set.
     * @param lacValue used during instantiation.
     */
    public void setLacValue(YangString lacValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lac",
            lacValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lac",
     * using a String value.
     * @param lacValue used during instantiation.
     */
    public void setLacValue(String lacValue) throws JNCException {
        setLacValue(new YangString(lacValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lac" leaf will not have a value.
     */
    public void addLac() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lac",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "rac". */

    /**
     * Gets the value for child leaf "rac".
     * @return The value of the leaf.
     */
    public YangString getRacValue() throws JNCException {
        return (YangString)getValue("rac");
    }

    /**
     * Sets the value for child leaf "rac",
     * using instance of generated typedef class.
     * @param racValue The value to set.
     * @param racValue used during instantiation.
     */
    public void setRacValue(YangString racValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rac",
            racValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rac",
     * using a String value.
     * @param racValue used during instantiation.
     */
    public void setRacValue(String racValue) throws JNCException {
        setRacValue(new YangString(racValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rac" leaf will not have a value.
     */
    public void addRac() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rac",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "rncid-list". */

    /**
     * Gets the value for child leaf "rncid-list".
     * @return The value of the leaf.
     */
    public YangString getRncidListValue() throws JNCException {
        return (YangString)getValue("rncid-list");
    }

    /**
     * Sets the value for child leaf "rncid-list",
     * using instance of generated typedef class.
     * @param rncidListValue The value to set.
     * @param rncidListValue used during instantiation.
     */
    public void setRncidListValue(YangString rncidListValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rncid-list",
            rncidListValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rncid-list",
     * using a String value.
     * @param rncidListValue used during instantiation.
     */
    public void setRncidListValue(String rncidListValue) throws JNCException {
        setRncidListValue(new YangString(rncidListValue));
    }

    /**
     * Unsets the value for child leaf "rncid-list".
     */
    public void unsetRncidListValue() throws JNCException {
        delete("rncid-list");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rncid-list" leaf will not have a value.
     */
    public void addRncidList() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rncid-list",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rncid-list" with operation "replace".
     */
    public void markRncidListReplace() throws JNCException {
        markLeafReplace("rncidList");
    }

    /**
     * Marks the leaf "rncid-list" with operation "merge".
     */
    public void markRncidListMerge() throws JNCException {
        markLeafMerge("rncidList");
    }

    /**
     * Marks the leaf "rncid-list" with operation "create".
     */
    public void markRncidListCreate() throws JNCException {
        markLeafCreate("rncidList");
    }

    /**
     * Marks the leaf "rncid-list" with operation "delete".
     */
    public void markRncidListDelete() throws JNCException {
        markLeafDelete("rncidList");
    }

    /* Access methods for optional leaf child: "nseid-list". */

    /**
     * Gets the value for child leaf "nseid-list".
     * @return The value of the leaf.
     */
    public YangString getNseidListValue() throws JNCException {
        return (YangString)getValue("nseid-list");
    }

    /**
     * Sets the value for child leaf "nseid-list",
     * using instance of generated typedef class.
     * @param nseidListValue The value to set.
     * @param nseidListValue used during instantiation.
     */
    public void setNseidListValue(YangString nseidListValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nseid-list",
            nseidListValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nseid-list",
     * using a String value.
     * @param nseidListValue used during instantiation.
     */
    public void setNseidListValue(String nseidListValue) throws JNCException {
        setNseidListValue(new YangString(nseidListValue));
    }

    /**
     * Unsets the value for child leaf "nseid-list".
     */
    public void unsetNseidListValue() throws JNCException {
        delete("nseid-list");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nseid-list" leaf will not have a value.
     */
    public void addNseidList() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nseid-list",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nseid-list" with operation "replace".
     */
    public void markNseidListReplace() throws JNCException {
        markLeafReplace("nseidList");
    }

    /**
     * Marks the leaf "nseid-list" with operation "merge".
     */
    public void markNseidListMerge() throws JNCException {
        markLeafMerge("nseidList");
    }

    /**
     * Marks the leaf "nseid-list" with operation "create".
     */
    public void markNseidListCreate() throws JNCException {
        markLeafCreate("nseidList");
    }

    /**
     * Marks the leaf "nseid-list" with operation "delete".
     */
    public void markNseidListDelete() throws JNCException {
        markLeafDelete("nseidList");
    }

    /* Access methods for optional leaf child: "timezone". */

    /**
     * Gets the value for child leaf "timezone".
     * @return The value of the leaf.
     */
    public TimezoneString getTimezoneValue() throws JNCException {
        return (TimezoneString)getValue("timezone");
    }

    /**
     * Sets the value for child leaf "timezone",
     * using a JNC type value.
     * @param timezoneValue The value to set.
     * @param timezoneValue used during instantiation.
     */
    public void setTimezoneValue(TimezoneString timezoneValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "timezone",
            timezoneValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "timezone",
     * using a String value.
     * @param timezoneValue used during instantiation.
     */
    public void setTimezoneValue(String timezoneValue) throws JNCException {
        setTimezoneValue(new TimezoneString(timezoneValue));
    }

    /**
     * Unsets the value for child leaf "timezone".
     */
    public void unsetTimezoneValue() throws JNCException {
        delete("timezone");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "timezone" leaf will not have a value.
     */
    public void addTimezone() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "timezone",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "timezone" with operation "replace".
     */
    public void markTimezoneReplace() throws JNCException {
        markLeafReplace("timezone");
    }

    /**
     * Marks the leaf "timezone" with operation "merge".
     */
    public void markTimezoneMerge() throws JNCException {
        markLeafMerge("timezone");
    }

    /**
     * Marks the leaf "timezone" with operation "create".
     */
    public void markTimezoneCreate() throws JNCException {
        markLeafCreate("timezone");
    }

    /**
     * Marks the leaf "timezone" with operation "delete".
     */
    public void markTimezoneDelete() throws JNCException {
        markLeafDelete("timezone");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
