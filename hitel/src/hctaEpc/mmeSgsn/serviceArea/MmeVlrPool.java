/* 
 * @(#)MmeVlrPool.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.serviceArea;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/serviceArea/mme-vlr-pool"
 * <p>
 * See line 2109 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeVlrPool extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeVlrPool object.
     */
    public MmeVlrPool() {
        super(Epc.NAMESPACE, "mme-vlr-pool");
    }

    /**
     * Constructor for an initialized MmeVlrPool object,
     * 
     * @param vlrPoolNameValue Key argument of child.
     * @param vlrSelectionDigitsValue Key argument of child.
     */
    public MmeVlrPool(YangString vlrPoolNameValue, YangString vlrSelectionDigitsValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-vlr-pool");
        Leaf vlrPoolName = new Leaf(Epc.NAMESPACE, "vlr-pool-name");
        vlrPoolName.setValue(vlrPoolNameValue);
        insertChild(vlrPoolName, childrenNames());
        Leaf vlrSelectionDigits = new Leaf(Epc.NAMESPACE, "vlr-selection-digits");
        vlrSelectionDigits.setValue(vlrSelectionDigitsValue);
        insertChild(vlrSelectionDigits, childrenNames());
    }

    /**
     * Constructor for an initialized MmeVlrPool object,
     * with String keys.
     * @param vlrPoolNameValue Key argument of child.
     * @param vlrSelectionDigitsValue Key argument of child.
     */
    public MmeVlrPool(String vlrPoolNameValue, String vlrSelectionDigitsValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-vlr-pool");
        Leaf vlrPoolName = new Leaf(Epc.NAMESPACE, "vlr-pool-name");
        vlrPoolName.setValue(new YangString(vlrPoolNameValue));
        insertChild(vlrPoolName, childrenNames());
        Leaf vlrSelectionDigits = new Leaf(Epc.NAMESPACE, "vlr-selection-digits");
        vlrSelectionDigits.setValue(new YangString(vlrSelectionDigitsValue));
        insertChild(vlrSelectionDigits, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeVlrPool clone() {
        MmeVlrPool copy;
        try {
            copy = new MmeVlrPool(getVlrPoolNameValue().toString(), getVlrSelectionDigitsValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeVlrPool)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeVlrPool cloneShallow() {
        MmeVlrPool copy;
        try {
            copy = new MmeVlrPool(getVlrPoolNameValue().toString(), getVlrSelectionDigitsValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeVlrPool)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "vlr-pool-name",
            "vlr-selection-digits",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "vlr-pool-name",
            "vlr-selection-digits",
            "vlr-name",
        };
    }

    /* Access methods for leaf child: "vlr-pool-name". */

    /**
     * Gets the value for child leaf "vlr-pool-name".
     * @return The value of the leaf.
     */
    public YangString getVlrPoolNameValue() throws JNCException {
        return (YangString)getValue("vlr-pool-name");
    }

    /**
     * Sets the value for child leaf "vlr-pool-name",
     * using instance of generated typedef class.
     * @param vlrPoolNameValue The value to set.
     * @param vlrPoolNameValue used during instantiation.
     */
    public void setVlrPoolNameValue(YangString vlrPoolNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-pool-name",
            vlrPoolNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlr-pool-name",
     * using a String value.
     * @param vlrPoolNameValue used during instantiation.
     */
    public void setVlrPoolNameValue(String vlrPoolNameValue)
            throws JNCException {
        setVlrPoolNameValue(new YangString(vlrPoolNameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlr-pool-name" leaf will not have a value.
     */
    public void addVlrPoolName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-pool-name",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "vlr-selection-digits". */

    /**
     * Gets the value for child leaf "vlr-selection-digits".
     * @return The value of the leaf.
     */
    public YangString getVlrSelectionDigitsValue() throws JNCException {
        return (YangString)getValue("vlr-selection-digits");
    }

    /**
     * Sets the value for child leaf "vlr-selection-digits",
     * using instance of generated typedef class.
     * @param vlrSelectionDigitsValue The value to set.
     * @param vlrSelectionDigitsValue used during instantiation.
     */
    public void setVlrSelectionDigitsValue(YangString vlrSelectionDigitsValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-selection-digits",
            vlrSelectionDigitsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlr-selection-digits",
     * using a String value.
     * @param vlrSelectionDigitsValue used during instantiation.
     */
    public void setVlrSelectionDigitsValue(String vlrSelectionDigitsValue)
            throws JNCException {
        setVlrSelectionDigitsValue(new YangString(vlrSelectionDigitsValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlr-selection-digits" leaf will not have a value.
     */
    public void addVlrSelectionDigits() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-selection-digits",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "vlr-name". */

    /**
     * Gets the value for child leaf "vlr-name".
     * @return The value of the leaf.
     */
    public YangString getVlrNameValue() throws JNCException {
        return (YangString)getValue("vlr-name");
    }

    /**
     * Sets the value for child leaf "vlr-name",
     * using instance of generated typedef class.
     * @param vlrNameValue The value to set.
     * @param vlrNameValue used during instantiation.
     */
    public void setVlrNameValue(YangString vlrNameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-name",
            vlrNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlr-name",
     * using a String value.
     * @param vlrNameValue used during instantiation.
     */
    public void setVlrNameValue(String vlrNameValue) throws JNCException {
        setVlrNameValue(new YangString(vlrNameValue));
    }

    /**
     * Unsets the value for child leaf "vlr-name".
     */
    public void unsetVlrNameValue() throws JNCException {
        delete("vlr-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlr-name" leaf will not have a value.
     */
    public void addVlrName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlr-name" with operation "replace".
     */
    public void markVlrNameReplace() throws JNCException {
        markLeafReplace("vlrName");
    }

    /**
     * Marks the leaf "vlr-name" with operation "merge".
     */
    public void markVlrNameMerge() throws JNCException {
        markLeafMerge("vlrName");
    }

    /**
     * Marks the leaf "vlr-name" with operation "create".
     */
    public void markVlrNameCreate() throws JNCException {
        markLeafCreate("vlrName");
    }

    /**
     * Marks the leaf "vlr-name" with operation "delete".
     */
    public void markVlrNameDelete() throws JNCException {
        markLeafDelete("vlrName");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
