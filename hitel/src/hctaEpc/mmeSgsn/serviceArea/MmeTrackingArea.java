/* 
 * @(#)MmeTrackingArea.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.serviceArea;
import .hctaEpc.EnableDisableEnum;
import .hctaTimezone.TimezoneString;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/serviceArea/mme-tracking-area"
 * <p>
 * See line 2934 in
 * scConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeTrackingArea extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeTrackingArea object.
     */
    public MmeTrackingArea() {
        super(Epc.NAMESPACE, "mme-tracking-area");
    }

    /**
     * Constructor for an initialized MmeTrackingArea object,
     * 
     * @param plmnIdValue Key argument of child.
     * @param tacValue Key argument of child.
     */
    public MmeTrackingArea(YangString plmnIdValue, YangString tacValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-tracking-area");
        Leaf plmnId = new Leaf(Epc.NAMESPACE, "plmn-id");
        plmnId.setValue(plmnIdValue);
        insertChild(plmnId, childrenNames());
        Leaf tac = new Leaf(Epc.NAMESPACE, "tac");
        tac.setValue(tacValue);
        insertChild(tac, childrenNames());
    }

    /**
     * Constructor for an initialized MmeTrackingArea object,
     * with String keys.
     * @param plmnIdValue Key argument of child.
     * @param tacValue Key argument of child.
     */
    public MmeTrackingArea(String plmnIdValue, String tacValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-tracking-area");
        Leaf plmnId = new Leaf(Epc.NAMESPACE, "plmn-id");
        plmnId.setValue(new YangString(plmnIdValue));
        insertChild(plmnId, childrenNames());
        Leaf tac = new Leaf(Epc.NAMESPACE, "tac");
        tac.setValue(new YangString(tacValue));
        insertChild(tac, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeTrackingArea clone() {
        MmeTrackingArea copy;
        try {
            copy = new MmeTrackingArea(getPlmnIdValue().toString(), getTacValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeTrackingArea)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeTrackingArea cloneShallow() {
        MmeTrackingArea copy;
        try {
            copy = new MmeTrackingArea(getPlmnIdValue().toString(), getTacValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeTrackingArea)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "plmn-id",
            "tac",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "plmn-id",
            "tac",
            "ims-support",
            "emergency-support",
            "lac",
            "e-smlc-pool-name",
            "timezone",
        };
    }

    /* Access methods for leaf child: "plmn-id". */

    /**
     * Gets the value for child leaf "plmn-id".
     * @return The value of the leaf.
     */
    public YangString getPlmnIdValue() throws JNCException {
        return (YangString)getValue("plmn-id");
    }

    /**
     * Sets the value for child leaf "plmn-id",
     * using instance of generated typedef class.
     * @param plmnIdValue The value to set.
     * @param plmnIdValue used during instantiation.
     */
    public void setPlmnIdValue(YangString plmnIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-id",
            plmnIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "plmn-id",
     * using a String value.
     * @param plmnIdValue used during instantiation.
     */
    public void setPlmnIdValue(String plmnIdValue) throws JNCException {
        setPlmnIdValue(new YangString(plmnIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "plmn-id" leaf will not have a value.
     */
    public void addPlmnId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn-id",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "tac". */

    /**
     * Gets the value for child leaf "tac".
     * @return The value of the leaf.
     */
    public YangString getTacValue() throws JNCException {
        return (YangString)getValue("tac");
    }

    /**
     * Sets the value for child leaf "tac",
     * using instance of generated typedef class.
     * @param tacValue The value to set.
     * @param tacValue used during instantiation.
     */
    public void setTacValue(YangString tacValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tac",
            tacValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tac",
     * using a String value.
     * @param tacValue used during instantiation.
     */
    public void setTacValue(String tacValue) throws JNCException {
        setTacValue(new YangString(tacValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tac" leaf will not have a value.
     */
    public void addTac() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "tac",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "ims-support". */

    /**
     * Gets the value for child leaf "ims-support".
     * @return The value of the leaf.
     */
    public EnableDisableEnum getImsSupportValue() throws JNCException {
        EnableDisableEnum imsSupport = (EnableDisableEnum)getValue("ims-support");
        if (imsSupport == null) {
            imsSupport = new EnableDisableEnum("disable");  // default
        }
        return imsSupport;
    }

    /**
     * Sets the value for child leaf "ims-support",
     * using a JNC type value.
     * @param imsSupportValue The value to set.
     * @param imsSupportValue used during instantiation.
     */
    public void setImsSupportValue(EnableDisableEnum imsSupportValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ims-support",
            imsSupportValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ims-support",
     * using a String value.
     * @param imsSupportValue used during instantiation.
     */
    public void setImsSupportValue(String imsSupportValue) throws JNCException {
        setImsSupportValue(new EnableDisableEnum(imsSupportValue));
    }

    /**
     * Unsets the value for child leaf "ims-support".
     */
    public void unsetImsSupportValue() throws JNCException {
        delete("ims-support");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ims-support" leaf will not have a value.
     */
    public void addImsSupport() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "ims-support",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ims-support" with operation "replace".
     */
    public void markImsSupportReplace() throws JNCException {
        markLeafReplace("imsSupport");
    }

    /**
     * Marks the leaf "ims-support" with operation "merge".
     */
    public void markImsSupportMerge() throws JNCException {
        markLeafMerge("imsSupport");
    }

    /**
     * Marks the leaf "ims-support" with operation "create".
     */
    public void markImsSupportCreate() throws JNCException {
        markLeafCreate("imsSupport");
    }

    /**
     * Marks the leaf "ims-support" with operation "delete".
     */
    public void markImsSupportDelete() throws JNCException {
        markLeafDelete("imsSupport");
    }

    /* Access methods for optional leaf child: "emergency-support". */

    /**
     * Gets the value for child leaf "emergency-support".
     * @return The value of the leaf.
     */
    public EnableDisableEnum getEmergencySupportValue() throws JNCException {
        EnableDisableEnum emergencySupport = (EnableDisableEnum)getValue("emergency-support");
        if (emergencySupport == null) {
            emergencySupport = new EnableDisableEnum("disable");  // default
        }
        return emergencySupport;
    }

    /**
     * Sets the value for child leaf "emergency-support",
     * using a JNC type value.
     * @param emergencySupportValue The value to set.
     * @param emergencySupportValue used during instantiation.
     */
    public void setEmergencySupportValue(EnableDisableEnum emergencySupportValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "emergency-support",
            emergencySupportValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "emergency-support",
     * using a String value.
     * @param emergencySupportValue used during instantiation.
     */
    public void setEmergencySupportValue(String emergencySupportValue)
            throws JNCException {
        setEmergencySupportValue(new EnableDisableEnum(emergencySupportValue));
    }

    /**
     * Unsets the value for child leaf "emergency-support".
     */
    public void unsetEmergencySupportValue() throws JNCException {
        delete("emergency-support");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "emergency-support" leaf will not have a value.
     */
    public void addEmergencySupport() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "emergency-support",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "emergency-support" with operation "replace".
     */
    public void markEmergencySupportReplace() throws JNCException {
        markLeafReplace("emergencySupport");
    }

    /**
     * Marks the leaf "emergency-support" with operation "merge".
     */
    public void markEmergencySupportMerge() throws JNCException {
        markLeafMerge("emergencySupport");
    }

    /**
     * Marks the leaf "emergency-support" with operation "create".
     */
    public void markEmergencySupportCreate() throws JNCException {
        markLeafCreate("emergencySupport");
    }

    /**
     * Marks the leaf "emergency-support" with operation "delete".
     */
    public void markEmergencySupportDelete() throws JNCException {
        markLeafDelete("emergencySupport");
    }

    /* Access methods for optional leaf child: "lac". */

    /**
     * Gets the value for child leaf "lac".
     * @return The value of the leaf.
     */
    public YangString getLacValue() throws JNCException {
        YangString lac = (YangString)getValue("lac");
        if (lac == null) {
            lac = new YangString("0x0000");  // default
        }
        return lac;
    }

    /**
     * Sets the value for child leaf "lac",
     * using instance of generated typedef class.
     * @param lacValue The value to set.
     * @param lacValue used during instantiation.
     */
    public void setLacValue(YangString lacValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lac",
            lacValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lac",
     * using a String value.
     * @param lacValue used during instantiation.
     */
    public void setLacValue(String lacValue) throws JNCException {
        setLacValue(new YangString(lacValue));
    }

    /**
     * Unsets the value for child leaf "lac".
     */
    public void unsetLacValue() throws JNCException {
        delete("lac");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lac" leaf will not have a value.
     */
    public void addLac() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lac",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lac" with operation "replace".
     */
    public void markLacReplace() throws JNCException {
        markLeafReplace("lac");
    }

    /**
     * Marks the leaf "lac" with operation "merge".
     */
    public void markLacMerge() throws JNCException {
        markLeafMerge("lac");
    }

    /**
     * Marks the leaf "lac" with operation "create".
     */
    public void markLacCreate() throws JNCException {
        markLeafCreate("lac");
    }

    /**
     * Marks the leaf "lac" with operation "delete".
     */
    public void markLacDelete() throws JNCException {
        markLeafDelete("lac");
    }

    /* Access methods for optional leaf child: "e-smlc-pool-name". */

    /**
     * Gets the value for child leaf "e-smlc-pool-name".
     * @return The value of the leaf.
     */
    public YangString getESmlcPoolNameValue() throws JNCException {
        YangString eSmlcPoolName = (YangString)getValue("e-smlc-pool-name");
        if (eSmlcPoolName == null) {
            eSmlcPoolName = new YangString("none");  // default
        }
        return eSmlcPoolName;
    }

    /**
     * Sets the value for child leaf "e-smlc-pool-name",
     * using instance of generated typedef class.
     * @param eSmlcPoolNameValue The value to set.
     * @param eSmlcPoolNameValue used during instantiation.
     */
    public void setESmlcPoolNameValue(YangString eSmlcPoolNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "e-smlc-pool-name",
            eSmlcPoolNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "e-smlc-pool-name",
     * using a String value.
     * @param eSmlcPoolNameValue used during instantiation.
     */
    public void setESmlcPoolNameValue(String eSmlcPoolNameValue)
            throws JNCException {
        setESmlcPoolNameValue(new YangString(eSmlcPoolNameValue));
    }

    /**
     * Unsets the value for child leaf "e-smlc-pool-name".
     */
    public void unsetESmlcPoolNameValue() throws JNCException {
        delete("e-smlc-pool-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "e-smlc-pool-name" leaf will not have a value.
     */
    public void addESmlcPoolName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "e-smlc-pool-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "e-smlc-pool-name" with operation "replace".
     */
    public void markESmlcPoolNameReplace() throws JNCException {
        markLeafReplace("eSmlcPoolName");
    }

    /**
     * Marks the leaf "e-smlc-pool-name" with operation "merge".
     */
    public void markESmlcPoolNameMerge() throws JNCException {
        markLeafMerge("eSmlcPoolName");
    }

    /**
     * Marks the leaf "e-smlc-pool-name" with operation "create".
     */
    public void markESmlcPoolNameCreate() throws JNCException {
        markLeafCreate("eSmlcPoolName");
    }

    /**
     * Marks the leaf "e-smlc-pool-name" with operation "delete".
     */
    public void markESmlcPoolNameDelete() throws JNCException {
        markLeafDelete("eSmlcPoolName");
    }

    /* Access methods for optional leaf child: "timezone". */

    /**
     * Gets the value for child leaf "timezone".
     * @return The value of the leaf.
     */
    public TimezoneString getTimezoneValue() throws JNCException {
        return (TimezoneString)getValue("timezone");
    }

    /**
     * Sets the value for child leaf "timezone",
     * using a JNC type value.
     * @param timezoneValue The value to set.
     * @param timezoneValue used during instantiation.
     */
    public void setTimezoneValue(TimezoneString timezoneValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "timezone",
            timezoneValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "timezone",
     * using a String value.
     * @param timezoneValue used during instantiation.
     */
    public void setTimezoneValue(String timezoneValue) throws JNCException {
        setTimezoneValue(new TimezoneString(timezoneValue));
    }

    /**
     * Unsets the value for child leaf "timezone".
     */
    public void unsetTimezoneValue() throws JNCException {
        delete("timezone");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "timezone" leaf will not have a value.
     */
    public void addTimezone() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "timezone",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "timezone" with operation "replace".
     */
    public void markTimezoneReplace() throws JNCException {
        markLeafReplace("timezone");
    }

    /**
     * Marks the leaf "timezone" with operation "merge".
     */
    public void markTimezoneMerge() throws JNCException {
        markLeafMerge("timezone");
    }

    /**
     * Marks the leaf "timezone" with operation "create".
     */
    public void markTimezoneCreate() throws JNCException {
        markLeafCreate("timezone");
    }

    /**
     * Marks the leaf "timezone" with operation "delete".
     */
    public void markTimezoneDelete() throws JNCException {
        markLeafDelete("timezone");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
