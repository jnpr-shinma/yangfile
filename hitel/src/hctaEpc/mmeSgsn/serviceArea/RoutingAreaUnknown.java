/* 
 * @(#)RoutingAreaUnknown.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.serviceArea;

import Element;

import Epc;

import JNCException;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/serviceArea/routing-area-unknown"
 * <p>
 * See line 37 in
 * rmCli.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class RoutingAreaUnknown extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty RoutingAreaUnknown object.
     */
    public RoutingAreaUnknown() {
        super(Epc.NAMESPACE, "routing-area-unknown");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public RoutingAreaUnknown clone() {
        return (RoutingAreaUnknown)cloneContent(new RoutingAreaUnknown());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public RoutingAreaUnknown cloneShallow() {
        return (RoutingAreaUnknown)cloneShallowContent(new RoutingAreaUnknown());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "plmn",
            "lac",
            "rac",
            "rnc-id",
            "nse-id",
            "last-received",
        };
    }

    /* Access methods for optional leaf child: "plmn". */

    /**
     * Gets the value for child leaf "plmn".
     * @return The value of the leaf.
     */
    public YangString getPlmnValue() throws JNCException {
        return (YangString)getValue("plmn");
    }

    /**
     * Sets the value for child leaf "plmn",
     * using instance of generated typedef class.
     * @param plmnValue The value to set.
     * @param plmnValue used during instantiation.
     */
    public void setPlmnValue(YangString plmnValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn",
            plmnValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "plmn",
     * using a String value.
     * @param plmnValue used during instantiation.
     */
    public void setPlmnValue(String plmnValue) throws JNCException {
        setPlmnValue(new YangString(plmnValue));
    }

    /**
     * Unsets the value for child leaf "plmn".
     */
    public void unsetPlmnValue() throws JNCException {
        delete("plmn");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "plmn" leaf will not have a value.
     */
    public void addPlmn() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "plmn" with operation "replace".
     */
    public void markPlmnReplace() throws JNCException {
        markLeafReplace("plmn");
    }

    /**
     * Marks the leaf "plmn" with operation "merge".
     */
    public void markPlmnMerge() throws JNCException {
        markLeafMerge("plmn");
    }

    /**
     * Marks the leaf "plmn" with operation "create".
     */
    public void markPlmnCreate() throws JNCException {
        markLeafCreate("plmn");
    }

    /**
     * Marks the leaf "plmn" with operation "delete".
     */
    public void markPlmnDelete() throws JNCException {
        markLeafDelete("plmn");
    }

    /* Access methods for optional leaf child: "lac". */

    /**
     * Gets the value for child leaf "lac".
     * @return The value of the leaf.
     */
    public YangString getLacValue() throws JNCException {
        return (YangString)getValue("lac");
    }

    /**
     * Sets the value for child leaf "lac",
     * using instance of generated typedef class.
     * @param lacValue The value to set.
     * @param lacValue used during instantiation.
     */
    public void setLacValue(YangString lacValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lac",
            lacValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lac",
     * using a String value.
     * @param lacValue used during instantiation.
     */
    public void setLacValue(String lacValue) throws JNCException {
        setLacValue(new YangString(lacValue));
    }

    /**
     * Unsets the value for child leaf "lac".
     */
    public void unsetLacValue() throws JNCException {
        delete("lac");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lac" leaf will not have a value.
     */
    public void addLac() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lac",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lac" with operation "replace".
     */
    public void markLacReplace() throws JNCException {
        markLeafReplace("lac");
    }

    /**
     * Marks the leaf "lac" with operation "merge".
     */
    public void markLacMerge() throws JNCException {
        markLeafMerge("lac");
    }

    /**
     * Marks the leaf "lac" with operation "create".
     */
    public void markLacCreate() throws JNCException {
        markLeafCreate("lac");
    }

    /**
     * Marks the leaf "lac" with operation "delete".
     */
    public void markLacDelete() throws JNCException {
        markLeafDelete("lac");
    }

    /* Access methods for optional leaf child: "rac". */

    /**
     * Gets the value for child leaf "rac".
     * @return The value of the leaf.
     */
    public YangString getRacValue() throws JNCException {
        return (YangString)getValue("rac");
    }

    /**
     * Sets the value for child leaf "rac",
     * using instance of generated typedef class.
     * @param racValue The value to set.
     * @param racValue used during instantiation.
     */
    public void setRacValue(YangString racValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rac",
            racValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rac",
     * using a String value.
     * @param racValue used during instantiation.
     */
    public void setRacValue(String racValue) throws JNCException {
        setRacValue(new YangString(racValue));
    }

    /**
     * Unsets the value for child leaf "rac".
     */
    public void unsetRacValue() throws JNCException {
        delete("rac");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rac" leaf will not have a value.
     */
    public void addRac() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rac",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rac" with operation "replace".
     */
    public void markRacReplace() throws JNCException {
        markLeafReplace("rac");
    }

    /**
     * Marks the leaf "rac" with operation "merge".
     */
    public void markRacMerge() throws JNCException {
        markLeafMerge("rac");
    }

    /**
     * Marks the leaf "rac" with operation "create".
     */
    public void markRacCreate() throws JNCException {
        markLeafCreate("rac");
    }

    /**
     * Marks the leaf "rac" with operation "delete".
     */
    public void markRacDelete() throws JNCException {
        markLeafDelete("rac");
    }

    /* Access methods for optional leaf child: "rnc-id". */

    /**
     * Gets the value for child leaf "rnc-id".
     * @return The value of the leaf.
     */
    public YangString getRncIdValue() throws JNCException {
        return (YangString)getValue("rnc-id");
    }

    /**
     * Sets the value for child leaf "rnc-id",
     * using instance of generated typedef class.
     * @param rncIdValue The value to set.
     * @param rncIdValue used during instantiation.
     */
    public void setRncIdValue(YangString rncIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rnc-id",
            rncIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rnc-id",
     * using a String value.
     * @param rncIdValue used during instantiation.
     */
    public void setRncIdValue(String rncIdValue) throws JNCException {
        setRncIdValue(new YangString(rncIdValue));
    }

    /**
     * Unsets the value for child leaf "rnc-id".
     */
    public void unsetRncIdValue() throws JNCException {
        delete("rnc-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rnc-id" leaf will not have a value.
     */
    public void addRncId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "rnc-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rnc-id" with operation "replace".
     */
    public void markRncIdReplace() throws JNCException {
        markLeafReplace("rncId");
    }

    /**
     * Marks the leaf "rnc-id" with operation "merge".
     */
    public void markRncIdMerge() throws JNCException {
        markLeafMerge("rncId");
    }

    /**
     * Marks the leaf "rnc-id" with operation "create".
     */
    public void markRncIdCreate() throws JNCException {
        markLeafCreate("rncId");
    }

    /**
     * Marks the leaf "rnc-id" with operation "delete".
     */
    public void markRncIdDelete() throws JNCException {
        markLeafDelete("rncId");
    }

    /* Access methods for optional leaf child: "nse-id". */

    /**
     * Gets the value for child leaf "nse-id".
     * @return The value of the leaf.
     */
    public YangString getNseIdValue() throws JNCException {
        return (YangString)getValue("nse-id");
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using instance of generated typedef class.
     * @param nseIdValue The value to set.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(YangString nseIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nse-id",
            nseIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nse-id",
     * using a String value.
     * @param nseIdValue used during instantiation.
     */
    public void setNseIdValue(String nseIdValue) throws JNCException {
        setNseIdValue(new YangString(nseIdValue));
    }

    /**
     * Unsets the value for child leaf "nse-id".
     */
    public void unsetNseIdValue() throws JNCException {
        delete("nse-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nse-id" leaf will not have a value.
     */
    public void addNseId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nse-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nse-id" with operation "replace".
     */
    public void markNseIdReplace() throws JNCException {
        markLeafReplace("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "merge".
     */
    public void markNseIdMerge() throws JNCException {
        markLeafMerge("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "create".
     */
    public void markNseIdCreate() throws JNCException {
        markLeafCreate("nseId");
    }

    /**
     * Marks the leaf "nse-id" with operation "delete".
     */
    public void markNseIdDelete() throws JNCException {
        markLeafDelete("nseId");
    }

    /* Access methods for optional leaf child: "last-received". */

    /**
     * Gets the value for child leaf "last-received".
     * @return The value of the leaf.
     */
    public YangString getLastReceivedValue() throws JNCException {
        return (YangString)getValue("last-received");
    }

    /**
     * Sets the value for child leaf "last-received",
     * using instance of generated typedef class.
     * @param lastReceivedValue The value to set.
     * @param lastReceivedValue used during instantiation.
     */
    public void setLastReceivedValue(YangString lastReceivedValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "last-received",
            lastReceivedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "last-received",
     * using a String value.
     * @param lastReceivedValue used during instantiation.
     */
    public void setLastReceivedValue(String lastReceivedValue)
            throws JNCException {
        setLastReceivedValue(new YangString(lastReceivedValue));
    }

    /**
     * Unsets the value for child leaf "last-received".
     */
    public void unsetLastReceivedValue() throws JNCException {
        delete("last-received");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "last-received" leaf will not have a value.
     */
    public void addLastReceived() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "last-received",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "last-received" with operation "replace".
     */
    public void markLastReceivedReplace() throws JNCException {
        markLeafReplace("lastReceived");
    }

    /**
     * Marks the leaf "last-received" with operation "merge".
     */
    public void markLastReceivedMerge() throws JNCException {
        markLeafMerge("lastReceived");
    }

    /**
     * Marks the leaf "last-received" with operation "create".
     */
    public void markLastReceivedCreate() throws JNCException {
        markLeafCreate("lastReceived");
    }

    /**
     * Marks the leaf "last-received" with operation "delete".
     */
    public void markLastReceivedDelete() throws JNCException {
        markLeafDelete("lastReceived");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
