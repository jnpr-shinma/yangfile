/* 
 * @(#)MmeLocationArea.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.serviceArea;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/serviceArea/mme-location-area"
 * <p>
 * See line 743 in
 * sgsnScConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeLocationArea extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeLocationArea object.
     */
    public MmeLocationArea() {
        super(Epc.NAMESPACE, "mme-location-area");
    }

    /**
     * Constructor for an initialized MmeLocationArea object,
     * 
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     */
    public MmeLocationArea(YangString plmnValue, YangString lacValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-location-area");
        Leaf plmn = new Leaf(Epc.NAMESPACE, "plmn");
        plmn.setValue(plmnValue);
        insertChild(plmn, childrenNames());
        Leaf lac = new Leaf(Epc.NAMESPACE, "lac");
        lac.setValue(lacValue);
        insertChild(lac, childrenNames());
    }

    /**
     * Constructor for an initialized MmeLocationArea object,
     * with String keys.
     * @param plmnValue Key argument of child.
     * @param lacValue Key argument of child.
     */
    public MmeLocationArea(String plmnValue, String lacValue)
            throws JNCException {
        super(Epc.NAMESPACE, "mme-location-area");
        Leaf plmn = new Leaf(Epc.NAMESPACE, "plmn");
        plmn.setValue(new YangString(plmnValue));
        insertChild(plmn, childrenNames());
        Leaf lac = new Leaf(Epc.NAMESPACE, "lac");
        lac.setValue(new YangString(lacValue));
        insertChild(lac, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeLocationArea clone() {
        MmeLocationArea copy;
        try {
            copy = new MmeLocationArea(getPlmnValue().toString(), getLacValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeLocationArea)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeLocationArea cloneShallow() {
        MmeLocationArea copy;
        try {
            copy = new MmeLocationArea(getPlmnValue().toString(), getLacValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeLocationArea)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "plmn",
            "lac",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "plmn",
            "lac",
            "vlr-pool-name",
        };
    }

    /* Access methods for leaf child: "plmn". */

    /**
     * Gets the value for child leaf "plmn".
     * @return The value of the leaf.
     */
    public YangString getPlmnValue() throws JNCException {
        return (YangString)getValue("plmn");
    }

    /**
     * Sets the value for child leaf "plmn",
     * using instance of generated typedef class.
     * @param plmnValue The value to set.
     * @param plmnValue used during instantiation.
     */
    public void setPlmnValue(YangString plmnValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn",
            plmnValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "plmn",
     * using a String value.
     * @param plmnValue used during instantiation.
     */
    public void setPlmnValue(String plmnValue) throws JNCException {
        setPlmnValue(new YangString(plmnValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "plmn" leaf will not have a value.
     */
    public void addPlmn() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "plmn",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "lac". */

    /**
     * Gets the value for child leaf "lac".
     * @return The value of the leaf.
     */
    public YangString getLacValue() throws JNCException {
        return (YangString)getValue("lac");
    }

    /**
     * Sets the value for child leaf "lac",
     * using instance of generated typedef class.
     * @param lacValue The value to set.
     * @param lacValue used during instantiation.
     */
    public void setLacValue(YangString lacValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lac",
            lacValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lac",
     * using a String value.
     * @param lacValue used during instantiation.
     */
    public void setLacValue(String lacValue) throws JNCException {
        setLacValue(new YangString(lacValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lac" leaf will not have a value.
     */
    public void addLac() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "lac",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "vlr-pool-name". */

    /**
     * Gets the value for child leaf "vlr-pool-name".
     * @return The value of the leaf.
     */
    public YangString getVlrPoolNameValue() throws JNCException {
        return (YangString)getValue("vlr-pool-name");
    }

    /**
     * Sets the value for child leaf "vlr-pool-name",
     * using instance of generated typedef class.
     * @param vlrPoolNameValue The value to set.
     * @param vlrPoolNameValue used during instantiation.
     */
    public void setVlrPoolNameValue(YangString vlrPoolNameValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-pool-name",
            vlrPoolNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlr-pool-name",
     * using a String value.
     * @param vlrPoolNameValue used during instantiation.
     */
    public void setVlrPoolNameValue(String vlrPoolNameValue)
            throws JNCException {
        setVlrPoolNameValue(new YangString(vlrPoolNameValue));
    }

    /**
     * Unsets the value for child leaf "vlr-pool-name".
     */
    public void unsetVlrPoolNameValue() throws JNCException {
        delete("vlr-pool-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlr-pool-name" leaf will not have a value.
     */
    public void addVlrPoolName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "vlr-pool-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlr-pool-name" with operation "replace".
     */
    public void markVlrPoolNameReplace() throws JNCException {
        markLeafReplace("vlrPoolName");
    }

    /**
     * Marks the leaf "vlr-pool-name" with operation "merge".
     */
    public void markVlrPoolNameMerge() throws JNCException {
        markLeafMerge("vlrPoolName");
    }

    /**
     * Marks the leaf "vlr-pool-name" with operation "create".
     */
    public void markVlrPoolNameCreate() throws JNCException {
        markLeafCreate("vlrPoolName");
    }

    /**
     * Marks the leaf "vlr-pool-name" with operation "delete".
     */
    public void markVlrPoolNameDelete() throws JNCException {
        markLeafDelete("vlrPoolName");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
