/* 
 * @(#)MmeSgsnPool.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn.serviceArea;

import Element;

import Epc;

import JNCException;

import Leaf;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/serviceArea/mme-sgsn-pool"
 * <p>
 * See line 876 in
 * sgsnScConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class MmeSgsnPool extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty MmeSgsnPool object.
     */
    public MmeSgsnPool() {
        super(Epc.NAMESPACE, "mme-sgsn-pool");
    }

    /**
     * Constructor for an initialized MmeSgsnPool object,
     * 
     * @param poolNameValue Key argument of child.
     */
    public MmeSgsnPool(YangString poolNameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-sgsn-pool");
        Leaf poolName = new Leaf(Epc.NAMESPACE, "pool-name");
        poolName.setValue(poolNameValue);
        insertChild(poolName, childrenNames());
    }

    /**
     * Constructor for an initialized MmeSgsnPool object,
     * with String keys.
     * @param poolNameValue Key argument of child.
     */
    public MmeSgsnPool(String poolNameValue) throws JNCException {
        super(Epc.NAMESPACE, "mme-sgsn-pool");
        Leaf poolName = new Leaf(Epc.NAMESPACE, "pool-name");
        poolName.setValue(new YangString(poolNameValue));
        insertChild(poolName, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MmeSgsnPool clone() {
        MmeSgsnPool copy;
        try {
            copy = new MmeSgsnPool(getPoolNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeSgsnPool)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MmeSgsnPool cloneShallow() {
        MmeSgsnPool copy;
        try {
            copy = new MmeSgsnPool(getPoolNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (MmeSgsnPool)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "pool-name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "pool-name",
            "nri-bit-length",
            "load-balancing",
            "non-broadcast-rai",
            "cn-id",
        };
    }

    /* Access methods for leaf child: "pool-name". */

    /**
     * Gets the value for child leaf "pool-name".
     * @return The value of the leaf.
     */
    public YangString getPoolNameValue() throws JNCException {
        return (YangString)getValue("pool-name");
    }

    /**
     * Sets the value for child leaf "pool-name",
     * using instance of generated typedef class.
     * @param poolNameValue The value to set.
     * @param poolNameValue used during instantiation.
     */
    public void setPoolNameValue(YangString poolNameValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pool-name",
            poolNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "pool-name",
     * using a String value.
     * @param poolNameValue used during instantiation.
     */
    public void setPoolNameValue(String poolNameValue) throws JNCException {
        setPoolNameValue(new YangString(poolNameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pool-name" leaf will not have a value.
     */
    public void addPoolName() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "pool-name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "nri-bit-length". */

    /**
     * Gets the value for child leaf "nri-bit-length".
     * @return The value of the leaf.
     */
    public YangUInt8 getNriBitLengthValue() throws JNCException {
        YangUInt8 nriBitLength = (YangUInt8)getValue("nri-bit-length");
        if (nriBitLength == null) {
            nriBitLength = new YangUInt8("0");  // default
        }
        return nriBitLength;
    }

    /**
     * Sets the value for child leaf "nri-bit-length",
     * using instance of generated typedef class.
     * @param nriBitLengthValue The value to set.
     * @param nriBitLengthValue used during instantiation.
     */
    public void setNriBitLengthValue(YangUInt8 nriBitLengthValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nri-bit-length",
            nriBitLengthValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nri-bit-length",
     * using Java primitive values.
     * @param nriBitLengthValue used during instantiation.
     */
    public void setNriBitLengthValue(short nriBitLengthValue)
            throws JNCException {
        setNriBitLengthValue(new YangUInt8(nriBitLengthValue));
    }

    /**
     * Sets the value for child leaf "nri-bit-length",
     * using a String value.
     * @param nriBitLengthValue used during instantiation.
     */
    public void setNriBitLengthValue(String nriBitLengthValue)
            throws JNCException {
        setNriBitLengthValue(new YangUInt8(nriBitLengthValue));
    }

    /**
     * Unsets the value for child leaf "nri-bit-length".
     */
    public void unsetNriBitLengthValue() throws JNCException {
        delete("nri-bit-length");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nri-bit-length" leaf will not have a value.
     */
    public void addNriBitLength() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "nri-bit-length",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nri-bit-length" with operation "replace".
     */
    public void markNriBitLengthReplace() throws JNCException {
        markLeafReplace("nriBitLength");
    }

    /**
     * Marks the leaf "nri-bit-length" with operation "merge".
     */
    public void markNriBitLengthMerge() throws JNCException {
        markLeafMerge("nriBitLength");
    }

    /**
     * Marks the leaf "nri-bit-length" with operation "create".
     */
    public void markNriBitLengthCreate() throws JNCException {
        markLeafCreate("nriBitLength");
    }

    /**
     * Marks the leaf "nri-bit-length" with operation "delete".
     */
    public void markNriBitLengthDelete() throws JNCException {
        markLeafDelete("nriBitLength");
    }

    /* Access methods for optional leaf child: "load-balancing". */

    /**
     * Gets the value for child leaf "load-balancing".
     * @return The value of the leaf.
     */
    public YangEnumeration getLoadBalancingValue() throws JNCException {
        YangEnumeration loadBalancing = (YangEnumeration)getValue("load-balancing");
        if (loadBalancing == null) {
            loadBalancing = new YangEnumeration("disable", new String[] {  // default
                "enable",
                "disable",
            });
        }
        return loadBalancing;
    }

    /**
     * Sets the value for child leaf "load-balancing",
     * using instance of generated typedef class.
     * @param loadBalancingValue The value to set.
     * @param loadBalancingValue used during instantiation.
     */
    public void setLoadBalancingValue(YangEnumeration loadBalancingValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "load-balancing",
            loadBalancingValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "load-balancing",
     * using a String value.
     * @param loadBalancingValue used during instantiation.
     */
    public void setLoadBalancingValue(String loadBalancingValue)
            throws JNCException {
        setLoadBalancingValue(new YangEnumeration(loadBalancingValue, new String[] {
             "enable",
             "disable",
        }));
    }

    /**
     * Unsets the value for child leaf "load-balancing".
     */
    public void unsetLoadBalancingValue() throws JNCException {
        delete("load-balancing");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "load-balancing" leaf will not have a value.
     */
    public void addLoadBalancing() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "load-balancing",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "load-balancing" with operation "replace".
     */
    public void markLoadBalancingReplace() throws JNCException {
        markLeafReplace("loadBalancing");
    }

    /**
     * Marks the leaf "load-balancing" with operation "merge".
     */
    public void markLoadBalancingMerge() throws JNCException {
        markLeafMerge("loadBalancing");
    }

    /**
     * Marks the leaf "load-balancing" with operation "create".
     */
    public void markLoadBalancingCreate() throws JNCException {
        markLeafCreate("loadBalancing");
    }

    /**
     * Marks the leaf "load-balancing" with operation "delete".
     */
    public void markLoadBalancingDelete() throws JNCException {
        markLeafDelete("loadBalancing");
    }

    /* Access methods for optional leaf child: "non-broadcast-rai". */

    /**
     * Gets the value for child leaf "non-broadcast-rai".
     * @return The value of the leaf.
     */
    public YangString getNonBroadcastRaiValue() throws JNCException {
        YangString nonBroadcastRai = (YangString)getValue("non-broadcast-rai");
        if (nonBroadcastRai == null) {
            nonBroadcastRai = new YangString("none");  // default
        }
        return nonBroadcastRai;
    }

    /**
     * Sets the value for child leaf "non-broadcast-rai",
     * using instance of generated typedef class.
     * @param nonBroadcastRaiValue The value to set.
     * @param nonBroadcastRaiValue used during instantiation.
     */
    public void setNonBroadcastRaiValue(YangString nonBroadcastRaiValue)
            throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "non-broadcast-rai",
            nonBroadcastRaiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "non-broadcast-rai",
     * using a String value.
     * @param nonBroadcastRaiValue used during instantiation.
     */
    public void setNonBroadcastRaiValue(String nonBroadcastRaiValue)
            throws JNCException {
        setNonBroadcastRaiValue(new YangString(nonBroadcastRaiValue));
    }

    /**
     * Unsets the value for child leaf "non-broadcast-rai".
     */
    public void unsetNonBroadcastRaiValue() throws JNCException {
        delete("non-broadcast-rai");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "non-broadcast-rai" leaf will not have a value.
     */
    public void addNonBroadcastRai() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "non-broadcast-rai",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "non-broadcast-rai" with operation "replace".
     */
    public void markNonBroadcastRaiReplace() throws JNCException {
        markLeafReplace("nonBroadcastRai");
    }

    /**
     * Marks the leaf "non-broadcast-rai" with operation "merge".
     */
    public void markNonBroadcastRaiMerge() throws JNCException {
        markLeafMerge("nonBroadcastRai");
    }

    /**
     * Marks the leaf "non-broadcast-rai" with operation "create".
     */
    public void markNonBroadcastRaiCreate() throws JNCException {
        markLeafCreate("nonBroadcastRai");
    }

    /**
     * Marks the leaf "non-broadcast-rai" with operation "delete".
     */
    public void markNonBroadcastRaiDelete() throws JNCException {
        markLeafDelete("nonBroadcastRai");
    }

    /* Access methods for optional leaf child: "cn-id". */

    /**
     * Gets the value for child leaf "cn-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getCnIdValue() throws JNCException {
        YangUInt16 cnId = (YangUInt16)getValue("cn-id");
        if (cnId == null) {
            cnId = new YangUInt16("0");  // default
        }
        return cnId;
    }

    /**
     * Sets the value for child leaf "cn-id",
     * using instance of generated typedef class.
     * @param cnIdValue The value to set.
     * @param cnIdValue used during instantiation.
     */
    public void setCnIdValue(YangUInt16 cnIdValue) throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cn-id",
            cnIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "cn-id",
     * using Java primitive values.
     * @param cnIdValue used during instantiation.
     */
    public void setCnIdValue(int cnIdValue) throws JNCException {
        setCnIdValue(new YangUInt16(cnIdValue));
    }

    /**
     * Sets the value for child leaf "cn-id",
     * using a String value.
     * @param cnIdValue used during instantiation.
     */
    public void setCnIdValue(String cnIdValue) throws JNCException {
        setCnIdValue(new YangUInt16(cnIdValue));
    }

    /**
     * Unsets the value for child leaf "cn-id".
     */
    public void unsetCnIdValue() throws JNCException {
        delete("cn-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "cn-id" leaf will not have a value.
     */
    public void addCnId() throws JNCException {
        setLeafValue(Epc.NAMESPACE,
            "cn-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "cn-id" with operation "replace".
     */
    public void markCnIdReplace() throws JNCException {
        markLeafReplace("cnId");
    }

    /**
     * Marks the leaf "cn-id" with operation "merge".
     */
    public void markCnIdMerge() throws JNCException {
        markLeafMerge("cnId");
    }

    /**
     * Marks the leaf "cn-id" with operation "create".
     */
    public void markCnIdCreate() throws JNCException {
        markLeafCreate("cnId");
    }

    /**
     * Marks the leaf "cn-id" with operation "delete".
     */
    public void markCnIdDelete() throws JNCException {
        markLeafDelete("cnId");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
