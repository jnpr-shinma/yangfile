/* 
 * @(#)JInterface.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-epc", revision: "2014-09-18".
 */

package hctaEpc.mmeSgsn;

import Diameter;

import Element;

import ElementChildrenIterator;

import Epc;

import Fxa;

import Ga;
import Gb;
import Gd;
import Ge;
import Gf;
import Gn;
import Gr;
import Gs;

import Gtp;

import Iu;

import JNCException;

import MmeGtpU;

import MmeM3ua;

import MmeS4;

import MmeSctpProfile;

import Nas;

import NodeSet;

import Radius;

import S1;

import S10;

import S101;
import S102;

import S11;
import S13;
import S16;

import S3;

import S4Oper;

import S6;

import Sbc;

import Sgs;

import Slg;
import Sls;

import Ss7;

import Sv;

import X;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/epc
 * generated to "src/hctaEpc/mmeSgsn/interface"
 * <p>
 * See line 478 in
 * mmeSgsnConfig.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class JInterface extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "s1".
     */
    public S1 s1 = null;

    /**
     * Field for child container "diameter".
     */
    public Diameter diameter = null;

    /**
     * Field for child container "s6".
     */
    public S6 s6 = null;

    /**
     * Field for child container "slg".
     */
    public Slg slg = null;

    /**
     * Field for child container "s13".
     */
    public S13 s13 = null;

    /**
     * Field for child container "sbc".
     */
    public Sbc sbc = null;

    /**
     * Field for child container "ss7".
     */
    public Ss7 ss7 = null;

    /**
     * Field for child container "sgs".
     */
    public Sgs sgs = null;

    /**
     * Field for child container "gtp".
     */
    public Gtp gtp = null;

    /**
     * Field for child container "gn".
     */
    public Gn gn = null;

    /**
     * Field for child container "s11".
     */
    public S11 s11 = null;

    /**
     * Field for child container "mme-s4".
     */
    public MmeS4 mmeS4 = null;

    /**
     * Field for child container "s102".
     */
    public S102 s102 = null;

    /**
     * Field for child container "nas".
     */
    public Nas nas = null;

    /**
     * Field for child container "gr".
     */
    public Gr gr = null;

    /**
     * Field for child container "s101".
     */
    public S101 s101 = null;

    /**
     * Field for child container "radius".
     */
    public Radius radius = null;

    /**
     * Field for child container "fxa".
     */
    public Fxa fxa = null;

    /**
     * Field for child container "ga".
     */
    public Ga ga = null;

    /**
     * Field for child container "gb".
     */
    public Gb gb = null;

    /**
     * Field for child container "x".
     */
    public X x = null;

    /**
     * Field for child container "gd".
     */
    public Gd gd = null;

    /**
     * Field for child container "gf".
     */
    public Gf gf = null;

    /**
     * Field for child container "gs".
     */
    public Gs gs = null;

    /**
     * Field for child container "ge".
     */
    public Ge ge = null;

    /**
     * Field for child container "iu".
     */
    public Iu iu = null;

    /**
     * Field for child container "mme-gtp-u".
     */
    public MmeGtpU mmeGtpU = null;

    /**
     * Field for child container "s10".
     */
    public S10 s10 = null;

    /**
     * Field for child container "s16".
     */
    public S16 s16 = null;

    /**
     * Field for child container "s3".
     */
    public S3 s3 = null;

    /**
     * Field for child container "s4-oper".
     */
    public S4Oper s4Oper = null;

    /**
     * Field for child container "sv".
     */
    public Sv sv = null;

    /**
     * Field for child container "sls".
     */
    public Sls sls = null;

    /**
     * Constructor for an empty JInterface object.
     */
    public JInterface() {
        super(Epc.NAMESPACE, "interface");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public JInterface clone() {
        return (JInterface)cloneContent(new JInterface());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public JInterface cloneShallow() {
        return (JInterface)cloneShallowContent(new JInterface());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mme-sctp-profile",
            "s1",
            "diameter",
            "s6",
            "slg",
            "s13",
            "sbc",
            "ss7",
            "sgs",
            "gtp",
            "gn",
            "s11",
            "mme-s4",
            "s102",
            "nas",
            "gr",
            "s101",
            "radius",
            "fxa",
            "ga",
            "gb",
            "x",
            "gd",
            "gf",
            "gs",
            "ge",
            "mme-m3ua",
            "iu",
            "mme-gtp-u",
            "s10",
            "s16",
            "s3",
            "s4-oper",
            "sv",
            "sls",
        };
    }

    /* Access methods for list child: "mme-sctp-profile". */

    /**
     * Gets list entry "mmeSctpProfile", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeSctpProfile getMmeSctpProfile(YangString nameValue)
            throws JNCException {
        String path = "mme-sctp-profile[name='" + nameValue + "']";
        return (MmeSctpProfile)searchOne(path);
    }

    /**
     * Gets list entry "mmeSctpProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeSctpProfile getMmeSctpProfile(String nameValue)
            throws JNCException {
        String path = "mme-sctp-profile[name='" + nameValue + "']";
        return (MmeSctpProfile)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-sctp-profile".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeSctpProfileIterator() {
        return new ElementChildrenIterator(children, "mme-sctp-profile");
    }

    /**
     * Adds list entry "mmeSctpProfile", using an existing object.
     * @param mmeSctpProfile The object to add.
     * @return The added child.
     */
    public MmeSctpProfile addMmeSctpProfile(MmeSctpProfile mmeSctpProfile)
            throws JNCException {
        insertChild(mmeSctpProfile, childrenNames());
        return mmeSctpProfile;
    }

    /**
     * Adds list entry "mmeSctpProfile", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeSctpProfile addMmeSctpProfile(YangString nameValue)
            throws JNCException {
        MmeSctpProfile mmeSctpProfile = new MmeSctpProfile(nameValue);
        return addMmeSctpProfile(mmeSctpProfile);
    }

    /**
     * Adds list entry "mmeSctpProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeSctpProfile addMmeSctpProfile(String nameValue)
            throws JNCException {
        MmeSctpProfile mmeSctpProfile = new MmeSctpProfile(nameValue);
        return addMmeSctpProfile(mmeSctpProfile);
    }

    /**
     * Adds list entry "mmeSctpProfile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeSctpProfile addMmeSctpProfile() throws JNCException {
        MmeSctpProfile mmeSctpProfile = new MmeSctpProfile();
        insertChild(mmeSctpProfile, childrenNames());
        return mmeSctpProfile;
    }

    /**
     * Deletes list entry "mmeSctpProfile", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeSctpProfile(YangString nameValue) throws JNCException {
        String path = "mme-sctp-profile[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeSctpProfile", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeSctpProfile(String nameValue) throws JNCException {
        String path = "mme-sctp-profile[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for container child: "s1". */

    /**
     * Adds container entry "s1", using an existing object.
     * @param s1 The object to add.
     * @return The added child.
     */
    public S1 addS1(S1 s1) throws JNCException {
        this.s1 = s1;
        insertChild(s1, childrenNames());
        return s1;
    }

    /**
     * Adds container entry "s1".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S1 addS1() throws JNCException {
        S1 s1 = new S1();
        this.s1 = s1;
        insertChild(s1, childrenNames());
        return s1;
    }

    /**
     * Deletes container entry "s1".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS1() throws JNCException {
        this.s1 = null;
        String path = "s1";
        return delete(path);
    }

    /* Access methods for container child: "diameter". */

    /**
     * Adds container entry "diameter", using an existing object.
     * @param diameter The object to add.
     * @return The added child.
     */
    public Diameter addDiameter(Diameter diameter) throws JNCException {
        this.diameter = diameter;
        insertChild(diameter, childrenNames());
        return diameter;
    }

    /**
     * Adds container entry "diameter".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Diameter addDiameter() throws JNCException {
        Diameter diameter = new Diameter();
        this.diameter = diameter;
        insertChild(diameter, childrenNames());
        return diameter;
    }

    /**
     * Deletes container entry "diameter".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteDiameter() throws JNCException {
        this.diameter = null;
        String path = "diameter";
        return delete(path);
    }

    /* Access methods for container child: "s6". */

    /**
     * Adds container entry "s6", using an existing object.
     * @param s6 The object to add.
     * @return The added child.
     */
    public S6 addS6(S6 s6) throws JNCException {
        this.s6 = s6;
        insertChild(s6, childrenNames());
        return s6;
    }

    /**
     * Adds container entry "s6".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S6 addS6() throws JNCException {
        S6 s6 = new S6();
        this.s6 = s6;
        insertChild(s6, childrenNames());
        return s6;
    }

    /**
     * Deletes container entry "s6".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS6() throws JNCException {
        this.s6 = null;
        String path = "s6";
        return delete(path);
    }

    /* Access methods for container child: "slg". */

    /**
     * Adds container entry "slg", using an existing object.
     * @param slg The object to add.
     * @return The added child.
     */
    public Slg addSlg(Slg slg) throws JNCException {
        this.slg = slg;
        insertChild(slg, childrenNames());
        return slg;
    }

    /**
     * Adds container entry "slg".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Slg addSlg() throws JNCException {
        Slg slg = new Slg();
        this.slg = slg;
        insertChild(slg, childrenNames());
        return slg;
    }

    /**
     * Deletes container entry "slg".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSlg() throws JNCException {
        this.slg = null;
        String path = "slg";
        return delete(path);
    }

    /* Access methods for container child: "s13". */

    /**
     * Adds container entry "s13", using an existing object.
     * @param s13 The object to add.
     * @return The added child.
     */
    public S13 addS13(S13 s13) throws JNCException {
        this.s13 = s13;
        insertChild(s13, childrenNames());
        return s13;
    }

    /**
     * Adds container entry "s13".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S13 addS13() throws JNCException {
        S13 s13 = new S13();
        this.s13 = s13;
        insertChild(s13, childrenNames());
        return s13;
    }

    /**
     * Deletes container entry "s13".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS13() throws JNCException {
        this.s13 = null;
        String path = "s13";
        return delete(path);
    }

    /* Access methods for container child: "sbc". */

    /**
     * Adds container entry "sbc", using an existing object.
     * @param sbc The object to add.
     * @return The added child.
     */
    public Sbc addSbc(Sbc sbc) throws JNCException {
        this.sbc = sbc;
        insertChild(sbc, childrenNames());
        return sbc;
    }

    /**
     * Adds container entry "sbc".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Sbc addSbc() throws JNCException {
        Sbc sbc = new Sbc();
        this.sbc = sbc;
        insertChild(sbc, childrenNames());
        return sbc;
    }

    /**
     * Deletes container entry "sbc".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSbc() throws JNCException {
        this.sbc = null;
        String path = "sbc";
        return delete(path);
    }

    /* Access methods for container child: "ss7". */

    /**
     * Adds container entry "ss7", using an existing object.
     * @param ss7 The object to add.
     * @return The added child.
     */
    public Ss7 addSs7(Ss7 ss7) throws JNCException {
        this.ss7 = ss7;
        insertChild(ss7, childrenNames());
        return ss7;
    }

    /**
     * Adds container entry "ss7".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Ss7 addSs7() throws JNCException {
        Ss7 ss7 = new Ss7();
        this.ss7 = ss7;
        insertChild(ss7, childrenNames());
        return ss7;
    }

    /**
     * Deletes container entry "ss7".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSs7() throws JNCException {
        this.ss7 = null;
        String path = "ss7";
        return delete(path);
    }

    /* Access methods for container child: "sgs". */

    /**
     * Adds container entry "sgs", using an existing object.
     * @param sgs The object to add.
     * @return The added child.
     */
    public Sgs addSgs(Sgs sgs) throws JNCException {
        this.sgs = sgs;
        insertChild(sgs, childrenNames());
        return sgs;
    }

    /**
     * Adds container entry "sgs".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Sgs addSgs() throws JNCException {
        Sgs sgs = new Sgs();
        this.sgs = sgs;
        insertChild(sgs, childrenNames());
        return sgs;
    }

    /**
     * Deletes container entry "sgs".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSgs() throws JNCException {
        this.sgs = null;
        String path = "sgs";
        return delete(path);
    }

    /* Access methods for container child: "gtp". */

    /**
     * Adds container entry "gtp", using an existing object.
     * @param gtp The object to add.
     * @return The added child.
     */
    public Gtp addGtp(Gtp gtp) throws JNCException {
        this.gtp = gtp;
        insertChild(gtp, childrenNames());
        return gtp;
    }

    /**
     * Adds container entry "gtp".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Gtp addGtp() throws JNCException {
        Gtp gtp = new Gtp();
        this.gtp = gtp;
        insertChild(gtp, childrenNames());
        return gtp;
    }

    /**
     * Deletes container entry "gtp".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGtp() throws JNCException {
        this.gtp = null;
        String path = "gtp";
        return delete(path);
    }

    /* Access methods for container child: "gn". */

    /**
     * Adds container entry "gn", using an existing object.
     * @param gn The object to add.
     * @return The added child.
     */
    public Gn addGn(Gn gn) throws JNCException {
        this.gn = gn;
        insertChild(gn, childrenNames());
        return gn;
    }

    /**
     * Adds container entry "gn".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Gn addGn() throws JNCException {
        Gn gn = new Gn();
        this.gn = gn;
        insertChild(gn, childrenNames());
        return gn;
    }

    /**
     * Deletes container entry "gn".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGn() throws JNCException {
        this.gn = null;
        String path = "gn";
        return delete(path);
    }

    /* Access methods for container child: "s11". */

    /**
     * Adds container entry "s11", using an existing object.
     * @param s11 The object to add.
     * @return The added child.
     */
    public S11 addS11(S11 s11) throws JNCException {
        this.s11 = s11;
        insertChild(s11, childrenNames());
        return s11;
    }

    /**
     * Adds container entry "s11".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S11 addS11() throws JNCException {
        S11 s11 = new S11();
        this.s11 = s11;
        insertChild(s11, childrenNames());
        return s11;
    }

    /**
     * Deletes container entry "s11".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS11() throws JNCException {
        this.s11 = null;
        String path = "s11";
        return delete(path);
    }

    /* Access methods for container child: "mme-s4". */

    /**
     * Adds container entry "mmeS4", using an existing object.
     * @param mmeS4 The object to add.
     * @return The added child.
     */
    public MmeS4 addMmeS4(MmeS4 mmeS4) throws JNCException {
        this.mmeS4 = mmeS4;
        insertChild(mmeS4, childrenNames());
        return mmeS4;
    }

    /**
     * Adds container entry "mmeS4".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeS4 addMmeS4() throws JNCException {
        MmeS4 mmeS4 = new MmeS4();
        this.mmeS4 = mmeS4;
        insertChild(mmeS4, childrenNames());
        return mmeS4;
    }

    /**
     * Deletes container entry "mmeS4".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeS4() throws JNCException {
        this.mmeS4 = null;
        String path = "mme-s4";
        return delete(path);
    }

    /* Access methods for container child: "s102". */

    /**
     * Adds container entry "s102", using an existing object.
     * @param s102 The object to add.
     * @return The added child.
     */
    public S102 addS102(S102 s102) throws JNCException {
        this.s102 = s102;
        insertChild(s102, childrenNames());
        return s102;
    }

    /**
     * Adds container entry "s102".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S102 addS102() throws JNCException {
        S102 s102 = new S102();
        this.s102 = s102;
        insertChild(s102, childrenNames());
        return s102;
    }

    /**
     * Deletes container entry "s102".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS102() throws JNCException {
        this.s102 = null;
        String path = "s102";
        return delete(path);
    }

    /* Access methods for container child: "nas". */

    /**
     * Adds container entry "nas", using an existing object.
     * @param nas The object to add.
     * @return The added child.
     */
    public Nas addNas(Nas nas) throws JNCException {
        this.nas = nas;
        insertChild(nas, childrenNames());
        return nas;
    }

    /**
     * Adds container entry "nas".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Nas addNas() throws JNCException {
        Nas nas = new Nas();
        this.nas = nas;
        insertChild(nas, childrenNames());
        return nas;
    }

    /**
     * Deletes container entry "nas".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteNas() throws JNCException {
        this.nas = null;
        String path = "nas";
        return delete(path);
    }

    /* Access methods for container child: "gr". */

    /**
     * Adds container entry "gr", using an existing object.
     * @param gr The object to add.
     * @return The added child.
     */
    public Gr addGr(Gr gr) throws JNCException {
        this.gr = gr;
        insertChild(gr, childrenNames());
        return gr;
    }

    /**
     * Adds container entry "gr".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Gr addGr() throws JNCException {
        Gr gr = new Gr();
        this.gr = gr;
        insertChild(gr, childrenNames());
        return gr;
    }

    /**
     * Deletes container entry "gr".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGr() throws JNCException {
        this.gr = null;
        String path = "gr";
        return delete(path);
    }

    /* Access methods for container child: "s101". */

    /**
     * Adds container entry "s101", using an existing object.
     * @param s101 The object to add.
     * @return The added child.
     */
    public S101 addS101(S101 s101) throws JNCException {
        this.s101 = s101;
        insertChild(s101, childrenNames());
        return s101;
    }

    /**
     * Adds container entry "s101".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S101 addS101() throws JNCException {
        S101 s101 = new S101();
        this.s101 = s101;
        insertChild(s101, childrenNames());
        return s101;
    }

    /**
     * Deletes container entry "s101".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS101() throws JNCException {
        this.s101 = null;
        String path = "s101";
        return delete(path);
    }

    /* Access methods for container child: "radius". */

    /**
     * Adds container entry "radius", using an existing object.
     * @param radius The object to add.
     * @return The added child.
     */
    public Radius addRadius(Radius radius) throws JNCException {
        this.radius = radius;
        insertChild(radius, childrenNames());
        return radius;
    }

    /**
     * Adds container entry "radius".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Radius addRadius() throws JNCException {
        Radius radius = new Radius();
        this.radius = radius;
        insertChild(radius, childrenNames());
        return radius;
    }

    /**
     * Deletes container entry "radius".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteRadius() throws JNCException {
        this.radius = null;
        String path = "radius";
        return delete(path);
    }

    /* Access methods for container child: "fxa". */

    /**
     * Adds container entry "fxa", using an existing object.
     * @param fxa The object to add.
     * @return The added child.
     */
    public Fxa addFxa(Fxa fxa) throws JNCException {
        this.fxa = fxa;
        insertChild(fxa, childrenNames());
        return fxa;
    }

    /**
     * Adds container entry "fxa".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Fxa addFxa() throws JNCException {
        Fxa fxa = new Fxa();
        this.fxa = fxa;
        insertChild(fxa, childrenNames());
        return fxa;
    }

    /**
     * Deletes container entry "fxa".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteFxa() throws JNCException {
        this.fxa = null;
        String path = "fxa";
        return delete(path);
    }

    /* Access methods for container child: "ga". */

    /**
     * Adds container entry "ga", using an existing object.
     * @param ga The object to add.
     * @return The added child.
     */
    public Ga addGa(Ga ga) throws JNCException {
        this.ga = ga;
        insertChild(ga, childrenNames());
        return ga;
    }

    /**
     * Adds container entry "ga".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Ga addGa() throws JNCException {
        Ga ga = new Ga();
        this.ga = ga;
        insertChild(ga, childrenNames());
        return ga;
    }

    /**
     * Deletes container entry "ga".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGa() throws JNCException {
        this.ga = null;
        String path = "ga";
        return delete(path);
    }

    /* Access methods for container child: "gb". */

    /**
     * Adds container entry "gb", using an existing object.
     * @param gb The object to add.
     * @return The added child.
     */
    public Gb addGb(Gb gb) throws JNCException {
        this.gb = gb;
        insertChild(gb, childrenNames());
        return gb;
    }

    /**
     * Adds container entry "gb".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Gb addGb() throws JNCException {
        Gb gb = new Gb();
        this.gb = gb;
        insertChild(gb, childrenNames());
        return gb;
    }

    /**
     * Deletes container entry "gb".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGb() throws JNCException {
        this.gb = null;
        String path = "gb";
        return delete(path);
    }

    /* Access methods for container child: "x". */

    /**
     * Adds container entry "x", using an existing object.
     * @param x The object to add.
     * @return The added child.
     */
    public X addX(X x) throws JNCException {
        this.x = x;
        insertChild(x, childrenNames());
        return x;
    }

    /**
     * Adds container entry "x".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public X addX() throws JNCException {
        X x = new X();
        this.x = x;
        insertChild(x, childrenNames());
        return x;
    }

    /**
     * Deletes container entry "x".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteX() throws JNCException {
        this.x = null;
        String path = "x";
        return delete(path);
    }

    /* Access methods for container child: "gd". */

    /**
     * Adds container entry "gd", using an existing object.
     * @param gd The object to add.
     * @return The added child.
     */
    public Gd addGd(Gd gd) throws JNCException {
        this.gd = gd;
        insertChild(gd, childrenNames());
        return gd;
    }

    /**
     * Adds container entry "gd".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Gd addGd() throws JNCException {
        Gd gd = new Gd();
        this.gd = gd;
        insertChild(gd, childrenNames());
        return gd;
    }

    /**
     * Deletes container entry "gd".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGd() throws JNCException {
        this.gd = null;
        String path = "gd";
        return delete(path);
    }

    /* Access methods for container child: "gf". */

    /**
     * Adds container entry "gf", using an existing object.
     * @param gf The object to add.
     * @return The added child.
     */
    public Gf addGf(Gf gf) throws JNCException {
        this.gf = gf;
        insertChild(gf, childrenNames());
        return gf;
    }

    /**
     * Adds container entry "gf".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Gf addGf() throws JNCException {
        Gf gf = new Gf();
        this.gf = gf;
        insertChild(gf, childrenNames());
        return gf;
    }

    /**
     * Deletes container entry "gf".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGf() throws JNCException {
        this.gf = null;
        String path = "gf";
        return delete(path);
    }

    /* Access methods for container child: "gs". */

    /**
     * Adds container entry "gs", using an existing object.
     * @param gs The object to add.
     * @return The added child.
     */
    public Gs addGs(Gs gs) throws JNCException {
        this.gs = gs;
        insertChild(gs, childrenNames());
        return gs;
    }

    /**
     * Adds container entry "gs".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Gs addGs() throws JNCException {
        Gs gs = new Gs();
        this.gs = gs;
        insertChild(gs, childrenNames());
        return gs;
    }

    /**
     * Deletes container entry "gs".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGs() throws JNCException {
        this.gs = null;
        String path = "gs";
        return delete(path);
    }

    /* Access methods for container child: "ge". */

    /**
     * Adds container entry "ge", using an existing object.
     * @param ge The object to add.
     * @return The added child.
     */
    public Ge addGe(Ge ge) throws JNCException {
        this.ge = ge;
        insertChild(ge, childrenNames());
        return ge;
    }

    /**
     * Adds container entry "ge".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Ge addGe() throws JNCException {
        Ge ge = new Ge();
        this.ge = ge;
        insertChild(ge, childrenNames());
        return ge;
    }

    /**
     * Deletes container entry "ge".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGe() throws JNCException {
        this.ge = null;
        String path = "ge";
        return delete(path);
    }

    /* Access methods for list child: "mme-m3ua". */

    /**
     * Gets list entry "mmeM3ua", with specified keys.
     * @param nameValue Key argument of child.
     */
    public MmeM3ua getMmeM3ua(YangString nameValue) throws JNCException {
        String path = "mme-m3ua[name='" + nameValue + "']";
        return (MmeM3ua)searchOne(path);
    }

    /**
     * Gets list entry "mmeM3ua", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public MmeM3ua getMmeM3ua(String nameValue) throws JNCException {
        String path = "mme-m3ua[name='" + nameValue + "']";
        return (MmeM3ua)searchOne(path);
    }

    /**
     * Iterator method for the list "mme-m3ua".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator mmeM3uaIterator() {
        return new ElementChildrenIterator(children, "mme-m3ua");
    }

    /**
     * Adds list entry "mmeM3ua", using an existing object.
     * @param mmeM3ua The object to add.
     * @return The added child.
     */
    public MmeM3ua addMmeM3ua(MmeM3ua mmeM3ua) throws JNCException {
        insertChild(mmeM3ua, childrenNames());
        return mmeM3ua;
    }

    /**
     * Adds list entry "mmeM3ua", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeM3ua addMmeM3ua(YangString nameValue) throws JNCException {
        MmeM3ua mmeM3ua = new MmeM3ua(nameValue);
        return addMmeM3ua(mmeM3ua);
    }

    /**
     * Adds list entry "mmeM3ua", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public MmeM3ua addMmeM3ua(String nameValue) throws JNCException {
        MmeM3ua mmeM3ua = new MmeM3ua(nameValue);
        return addMmeM3ua(mmeM3ua);
    }

    /**
     * Adds list entry "mmeM3ua".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeM3ua addMmeM3ua() throws JNCException {
        MmeM3ua mmeM3ua = new MmeM3ua();
        insertChild(mmeM3ua, childrenNames());
        return mmeM3ua;
    }

    /**
     * Deletes list entry "mmeM3ua", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeM3ua(YangString nameValue) throws JNCException {
        String path = "mme-m3ua[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "mmeM3ua", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteMmeM3ua(String nameValue) throws JNCException {
        String path = "mme-m3ua[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for container child: "iu". */

    /**
     * Adds container entry "iu", using an existing object.
     * @param iu The object to add.
     * @return The added child.
     */
    public Iu addIu(Iu iu) throws JNCException {
        this.iu = iu;
        insertChild(iu, childrenNames());
        return iu;
    }

    /**
     * Adds container entry "iu".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Iu addIu() throws JNCException {
        Iu iu = new Iu();
        this.iu = iu;
        insertChild(iu, childrenNames());
        return iu;
    }

    /**
     * Deletes container entry "iu".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteIu() throws JNCException {
        this.iu = null;
        String path = "iu";
        return delete(path);
    }

    /* Access methods for container child: "mme-gtp-u". */

    /**
     * Adds container entry "mmeGtpU", using an existing object.
     * @param mmeGtpU The object to add.
     * @return The added child.
     */
    public MmeGtpU addMmeGtpU(MmeGtpU mmeGtpU) throws JNCException {
        this.mmeGtpU = mmeGtpU;
        insertChild(mmeGtpU, childrenNames());
        return mmeGtpU;
    }

    /**
     * Adds container entry "mmeGtpU".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MmeGtpU addMmeGtpU() throws JNCException {
        MmeGtpU mmeGtpU = new MmeGtpU();
        this.mmeGtpU = mmeGtpU;
        insertChild(mmeGtpU, childrenNames());
        return mmeGtpU;
    }

    /**
     * Deletes container entry "mmeGtpU".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMmeGtpU() throws JNCException {
        this.mmeGtpU = null;
        String path = "mme-gtp-u";
        return delete(path);
    }

    /* Access methods for container child: "s10". */

    /**
     * Adds container entry "s10", using an existing object.
     * @param s10 The object to add.
     * @return The added child.
     */
    public S10 addS10(S10 s10) throws JNCException {
        this.s10 = s10;
        insertChild(s10, childrenNames());
        return s10;
    }

    /**
     * Adds container entry "s10".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S10 addS10() throws JNCException {
        S10 s10 = new S10();
        this.s10 = s10;
        insertChild(s10, childrenNames());
        return s10;
    }

    /**
     * Deletes container entry "s10".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS10() throws JNCException {
        this.s10 = null;
        String path = "s10";
        return delete(path);
    }

    /* Access methods for container child: "s16". */

    /**
     * Adds container entry "s16", using an existing object.
     * @param s16 The object to add.
     * @return The added child.
     */
    public S16 addS16(S16 s16) throws JNCException {
        this.s16 = s16;
        insertChild(s16, childrenNames());
        return s16;
    }

    /**
     * Adds container entry "s16".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S16 addS16() throws JNCException {
        S16 s16 = new S16();
        this.s16 = s16;
        insertChild(s16, childrenNames());
        return s16;
    }

    /**
     * Deletes container entry "s16".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS16() throws JNCException {
        this.s16 = null;
        String path = "s16";
        return delete(path);
    }

    /* Access methods for container child: "s3". */

    /**
     * Adds container entry "s3", using an existing object.
     * @param s3 The object to add.
     * @return The added child.
     */
    public S3 addS3(S3 s3) throws JNCException {
        this.s3 = s3;
        insertChild(s3, childrenNames());
        return s3;
    }

    /**
     * Adds container entry "s3".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S3 addS3() throws JNCException {
        S3 s3 = new S3();
        this.s3 = s3;
        insertChild(s3, childrenNames());
        return s3;
    }

    /**
     * Deletes container entry "s3".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS3() throws JNCException {
        this.s3 = null;
        String path = "s3";
        return delete(path);
    }

    /* Access methods for container child: "s4-oper". */

    /**
     * Adds container entry "s4Oper", using an existing object.
     * @param s4Oper The object to add.
     * @return The added child.
     */
    public S4Oper addS4Oper(S4Oper s4Oper) throws JNCException {
        this.s4Oper = s4Oper;
        insertChild(s4Oper, childrenNames());
        return s4Oper;
    }

    /**
     * Adds container entry "s4Oper".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public S4Oper addS4Oper() throws JNCException {
        S4Oper s4Oper = new S4Oper();
        this.s4Oper = s4Oper;
        insertChild(s4Oper, childrenNames());
        return s4Oper;
    }

    /**
     * Deletes container entry "s4Oper".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteS4Oper() throws JNCException {
        this.s4Oper = null;
        String path = "s4-oper";
        return delete(path);
    }

    /* Access methods for container child: "sv". */

    /**
     * Adds container entry "sv", using an existing object.
     * @param sv The object to add.
     * @return The added child.
     */
    public Sv addSv(Sv sv) throws JNCException {
        this.sv = sv;
        insertChild(sv, childrenNames());
        return sv;
    }

    /**
     * Adds container entry "sv".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Sv addSv() throws JNCException {
        Sv sv = new Sv();
        this.sv = sv;
        insertChild(sv, childrenNames());
        return sv;
    }

    /**
     * Deletes container entry "sv".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSv() throws JNCException {
        this.sv = null;
        String path = "sv";
        return delete(path);
    }

    /* Access methods for container child: "sls". */

    /**
     * Adds container entry "sls", using an existing object.
     * @param sls The object to add.
     * @return The added child.
     */
    public Sls addSls(Sls sls) throws JNCException {
        this.sls = sls;
        insertChild(sls, childrenNames());
        return sls;
    }

    /**
     * Adds container entry "sls".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Sls addSls() throws JNCException {
        Sls sls = new Sls();
        this.sls = sls;
        insertChild(sls, childrenNames());
        return sls;
    }

    /**
     * Deletes container entry "sls".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSls() throws JNCException {
        this.sls = null;
        String path = "sls";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof S1) s1 = (S1)child;
        else if (child instanceof Diameter) diameter = (Diameter)child;
        else if (child instanceof S6) s6 = (S6)child;
        else if (child instanceof Slg) slg = (Slg)child;
        else if (child instanceof S13) s13 = (S13)child;
        else if (child instanceof Sbc) sbc = (Sbc)child;
        else if (child instanceof Ss7) ss7 = (Ss7)child;
        else if (child instanceof Sgs) sgs = (Sgs)child;
        else if (child instanceof Gtp) gtp = (Gtp)child;
        else if (child instanceof Gn) gn = (Gn)child;
        else if (child instanceof S11) s11 = (S11)child;
        else if (child instanceof MmeS4) mmeS4 = (MmeS4)child;
        else if (child instanceof S102) s102 = (S102)child;
        else if (child instanceof Nas) nas = (Nas)child;
        else if (child instanceof Gr) gr = (Gr)child;
        else if (child instanceof S101) s101 = (S101)child;
        else if (child instanceof Radius) radius = (Radius)child;
        else if (child instanceof Fxa) fxa = (Fxa)child;
        else if (child instanceof Ga) ga = (Ga)child;
        else if (child instanceof Gb) gb = (Gb)child;
        else if (child instanceof X) x = (X)child;
        else if (child instanceof Gd) gd = (Gd)child;
        else if (child instanceof Gf) gf = (Gf)child;
        else if (child instanceof Gs) gs = (Gs)child;
        else if (child instanceof Ge) ge = (Ge)child;
        else if (child instanceof Iu) iu = (Iu)child;
        else if (child instanceof MmeGtpU) mmeGtpU = (MmeGtpU)child;
        else if (child instanceof S10) s10 = (S10)child;
        else if (child instanceof S16) s16 = (S16)child;
        else if (child instanceof S3) s3 = (S3)child;
        else if (child instanceof S4Oper) s4Oper = (S4Oper)child;
        else if (child instanceof Sv) sv = (Sv)child;
        else if (child instanceof Sls) sls = (Sls)child;
    }

}
