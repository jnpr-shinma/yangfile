/* 
 * @(#)RoutingInstances.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-routing", revision: "2014-09-18".
 */

package hctaRouting;

import Element;

import ElementChildrenIterator;

import Instance;

import JNCException;

import Routing;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/routing
 * generated to "src/hctaRouting/routing-instances"
 * <p>
 * See line 92 in
 * hcta-routing.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class RoutingInstances extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty RoutingInstances object.
     */
    public RoutingInstances() {
        super(Routing.NAMESPACE, "routing-instances");
        setDefaultPrefix();
        setPrefix(Routing.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public RoutingInstances clone() {
        return (RoutingInstances)cloneContent(new RoutingInstances());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public RoutingInstances cloneShallow() {
        return (RoutingInstances)cloneShallowContent(new RoutingInstances());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "instance",
        };
    }

    /* Access methods for list child: "instance". */

    /**
     * Gets list entry "instance", with specified keys.
     * @param nameValue Key argument of child.
     */
    public Instance getInstance(YangString nameValue) throws JNCException {
        String path = "instance[name='" + nameValue + "']";
        return (Instance)searchOne(path);
    }

    /**
     * Gets list entry "instance", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public Instance getInstance(String nameValue) throws JNCException {
        String path = "instance[name='" + nameValue + "']";
        return (Instance)searchOne(path);
    }

    /**
     * Iterator method for the list "instance".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator instanceIterator() {
        return new ElementChildrenIterator(children, "instance");
    }

    /**
     * Adds list entry "instance", using an existing object.
     * @param instance The object to add.
     * @return The added child.
     */
    public Instance addInstance(Instance instance) throws JNCException {
        insertChild(instance, childrenNames());
        return instance;
    }

    /**
     * Adds list entry "instance", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public Instance addInstance(YangString nameValue) throws JNCException {
        Instance instance = new Instance(nameValue);
        return addInstance(instance);
    }

    /**
     * Adds list entry "instance", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public Instance addInstance(String nameValue) throws JNCException {
        Instance instance = new Instance(nameValue);
        return addInstance(instance);
    }

    /**
     * Adds list entry "instance".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Instance addInstance() throws JNCException {
        Instance instance = new Instance();
        insertChild(instance, childrenNames());
        return instance;
    }

    /**
     * Deletes list entry "instance", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteInstance(YangString nameValue) throws JNCException {
        String path = "instance[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "instance", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteInstance(String nameValue) throws JNCException {
        String path = "instance[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
