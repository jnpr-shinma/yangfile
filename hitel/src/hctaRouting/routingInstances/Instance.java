/* 
 * @(#)Instance.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-routing", revision: "2014-09-18".
 */

package hctaRouting.routingInstances;
import .tailfCommon.Ipv4AddressAndPrefixLength;
import .tailfCommon.Ipv6AddressAndPrefixLength;

import DataInstances;

import Element;

import JNCException;

import LbInstances;

import Leaf;

import NodeSet;

import Routing;

import YangString;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/routing
 * generated to "src/hctaRouting/routingInstances/instance"
 * <p>
 * See line 94 in
 * hcta-routing.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class Instance extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "lb-instances".
     */
    public LbInstances lbInstances = null;

    /**
     * Field for child container "data-instances".
     */
    public DataInstances dataInstances = null;

    /**
     * Constructor for an empty Instance object.
     */
    public Instance() {
        super(Routing.NAMESPACE, "instance");
    }

    /**
     * Constructor for an initialized Instance object,
     * 
     * @param nameValue Key argument of child.
     */
    public Instance(YangString nameValue) throws JNCException {
        super(Routing.NAMESPACE, "instance");
        Leaf name = new Leaf(Routing.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized Instance object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public Instance(String nameValue) throws JNCException {
        super(Routing.NAMESPACE, "instance");
        Leaf name = new Leaf(Routing.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Instance clone() {
        Instance copy;
        try {
            copy = new Instance(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Instance)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Instance cloneShallow() {
        Instance copy;
        try {
            copy = new Instance(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Instance)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "vlan-tag1",
            "vlan-tag2",
            "next-hop-ipv4-gw-addr1",
            "next-hop-ipv6-gw-addr1",
            "next-hop-ipv4-gw-addr2",
            "next-hop-ipv6-gw-addr2",
            "vlan-host-interface1",
            "vlan-host-interface2",
            "lb-instances",
            "data-instances",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "vlan-tag1". */

    /**
     * Gets the value for child leaf "vlan-tag1".
     * @return The value of the leaf.
     */
    public YangUInt16 getVlanTag1Value() throws JNCException {
        return (YangUInt16)getValue("vlan-tag1");
    }

    /**
     * Sets the value for child leaf "vlan-tag1",
     * using instance of generated typedef class.
     * @param vlanTag1Value The value to set.
     * @param vlanTag1Value used during instantiation.
     */
    public void setVlanTag1Value(YangUInt16 vlanTag1Value) throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "vlan-tag1",
            vlanTag1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlan-tag1",
     * using Java primitive values.
     * @param vlanTag1Value used during instantiation.
     */
    public void setVlanTag1Value(int vlanTag1Value) throws JNCException {
        setVlanTag1Value(new YangUInt16(vlanTag1Value));
    }

    /**
     * Sets the value for child leaf "vlan-tag1",
     * using a String value.
     * @param vlanTag1Value used during instantiation.
     */
    public void setVlanTag1Value(String vlanTag1Value) throws JNCException {
        setVlanTag1Value(new YangUInt16(vlanTag1Value));
    }

    /**
     * Unsets the value for child leaf "vlan-tag1".
     */
    public void unsetVlanTag1Value() throws JNCException {
        delete("vlan-tag1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlan-tag1" leaf will not have a value.
     */
    public void addVlanTag1() throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "vlan-tag1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlan-tag1" with operation "replace".
     */
    public void markVlanTag1Replace() throws JNCException {
        markLeafReplace("vlanTag1");
    }

    /**
     * Marks the leaf "vlan-tag1" with operation "merge".
     */
    public void markVlanTag1Merge() throws JNCException {
        markLeafMerge("vlanTag1");
    }

    /**
     * Marks the leaf "vlan-tag1" with operation "create".
     */
    public void markVlanTag1Create() throws JNCException {
        markLeafCreate("vlanTag1");
    }

    /**
     * Marks the leaf "vlan-tag1" with operation "delete".
     */
    public void markVlanTag1Delete() throws JNCException {
        markLeafDelete("vlanTag1");
    }

    /* Access methods for optional leaf child: "vlan-tag2". */

    /**
     * Gets the value for child leaf "vlan-tag2".
     * @return The value of the leaf.
     */
    public YangUInt16 getVlanTag2Value() throws JNCException {
        return (YangUInt16)getValue("vlan-tag2");
    }

    /**
     * Sets the value for child leaf "vlan-tag2",
     * using instance of generated typedef class.
     * @param vlanTag2Value The value to set.
     * @param vlanTag2Value used during instantiation.
     */
    public void setVlanTag2Value(YangUInt16 vlanTag2Value) throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "vlan-tag2",
            vlanTag2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlan-tag2",
     * using Java primitive values.
     * @param vlanTag2Value used during instantiation.
     */
    public void setVlanTag2Value(int vlanTag2Value) throws JNCException {
        setVlanTag2Value(new YangUInt16(vlanTag2Value));
    }

    /**
     * Sets the value for child leaf "vlan-tag2",
     * using a String value.
     * @param vlanTag2Value used during instantiation.
     */
    public void setVlanTag2Value(String vlanTag2Value) throws JNCException {
        setVlanTag2Value(new YangUInt16(vlanTag2Value));
    }

    /**
     * Unsets the value for child leaf "vlan-tag2".
     */
    public void unsetVlanTag2Value() throws JNCException {
        delete("vlan-tag2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlan-tag2" leaf will not have a value.
     */
    public void addVlanTag2() throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "vlan-tag2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlan-tag2" with operation "replace".
     */
    public void markVlanTag2Replace() throws JNCException {
        markLeafReplace("vlanTag2");
    }

    /**
     * Marks the leaf "vlan-tag2" with operation "merge".
     */
    public void markVlanTag2Merge() throws JNCException {
        markLeafMerge("vlanTag2");
    }

    /**
     * Marks the leaf "vlan-tag2" with operation "create".
     */
    public void markVlanTag2Create() throws JNCException {
        markLeafCreate("vlanTag2");
    }

    /**
     * Marks the leaf "vlan-tag2" with operation "delete".
     */
    public void markVlanTag2Delete() throws JNCException {
        markLeafDelete("vlanTag2");
    }

    /* Access methods for optional leaf child: "next-hop-ipv4-gw-addr1". */

    /**
     * Gets the value for child leaf "next-hop-ipv4-gw-addr1".
     * @return The value of the leaf.
     */
    public Ipv4AddressAndPrefixLength getNextHopIpv4GwAddr1Value()
            throws JNCException {
        return (Ipv4AddressAndPrefixLength)getValue("next-hop-ipv4-gw-addr1");
    }

    /**
     * Sets the value for child leaf "next-hop-ipv4-gw-addr1",
     * using a JNC type value.
     * @param nextHopIpv4GwAddr1Value The value to set.
     * @param nextHopIpv4GwAddr1Value used during instantiation.
     */
    public void setNextHopIpv4GwAddr1Value(Ipv4AddressAndPrefixLength nextHopIpv4GwAddr1Value)
            throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "next-hop-ipv4-gw-addr1",
            nextHopIpv4GwAddr1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "next-hop-ipv4-gw-addr1",
     * using a String value.
     * @param nextHopIpv4GwAddr1Value used during instantiation.
     */
    public void setNextHopIpv4GwAddr1Value(String nextHopIpv4GwAddr1Value)
            throws JNCException {
        setNextHopIpv4GwAddr1Value(new Ipv4AddressAndPrefixLength(nextHopIpv4GwAddr1Value));
    }

    /**
     * Unsets the value for child leaf "next-hop-ipv4-gw-addr1".
     */
    public void unsetNextHopIpv4GwAddr1Value() throws JNCException {
        delete("next-hop-ipv4-gw-addr1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "next-hop-ipv4-gw-addr1" leaf will not have a value.
     */
    public void addNextHopIpv4GwAddr1() throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "next-hop-ipv4-gw-addr1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "next-hop-ipv4-gw-addr1" with operation "replace".
     */
    public void markNextHopIpv4GwAddr1Replace() throws JNCException {
        markLeafReplace("nextHopIpv4GwAddr1");
    }

    /**
     * Marks the leaf "next-hop-ipv4-gw-addr1" with operation "merge".
     */
    public void markNextHopIpv4GwAddr1Merge() throws JNCException {
        markLeafMerge("nextHopIpv4GwAddr1");
    }

    /**
     * Marks the leaf "next-hop-ipv4-gw-addr1" with operation "create".
     */
    public void markNextHopIpv4GwAddr1Create() throws JNCException {
        markLeafCreate("nextHopIpv4GwAddr1");
    }

    /**
     * Marks the leaf "next-hop-ipv4-gw-addr1" with operation "delete".
     */
    public void markNextHopIpv4GwAddr1Delete() throws JNCException {
        markLeafDelete("nextHopIpv4GwAddr1");
    }

    /* Access methods for optional leaf child: "next-hop-ipv6-gw-addr1". */

    /**
     * Gets the value for child leaf "next-hop-ipv6-gw-addr1".
     * @return The value of the leaf.
     */
    public Ipv6AddressAndPrefixLength getNextHopIpv6GwAddr1Value()
            throws JNCException {
        return (Ipv6AddressAndPrefixLength)getValue("next-hop-ipv6-gw-addr1");
    }

    /**
     * Sets the value for child leaf "next-hop-ipv6-gw-addr1",
     * using a JNC type value.
     * @param nextHopIpv6GwAddr1Value The value to set.
     * @param nextHopIpv6GwAddr1Value used during instantiation.
     */
    public void setNextHopIpv6GwAddr1Value(Ipv6AddressAndPrefixLength nextHopIpv6GwAddr1Value)
            throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "next-hop-ipv6-gw-addr1",
            nextHopIpv6GwAddr1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "next-hop-ipv6-gw-addr1",
     * using a String value.
     * @param nextHopIpv6GwAddr1Value used during instantiation.
     */
    public void setNextHopIpv6GwAddr1Value(String nextHopIpv6GwAddr1Value)
            throws JNCException {
        setNextHopIpv6GwAddr1Value(new Ipv6AddressAndPrefixLength(nextHopIpv6GwAddr1Value));
    }

    /**
     * Unsets the value for child leaf "next-hop-ipv6-gw-addr1".
     */
    public void unsetNextHopIpv6GwAddr1Value() throws JNCException {
        delete("next-hop-ipv6-gw-addr1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "next-hop-ipv6-gw-addr1" leaf will not have a value.
     */
    public void addNextHopIpv6GwAddr1() throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "next-hop-ipv6-gw-addr1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "next-hop-ipv6-gw-addr1" with operation "replace".
     */
    public void markNextHopIpv6GwAddr1Replace() throws JNCException {
        markLeafReplace("nextHopIpv6GwAddr1");
    }

    /**
     * Marks the leaf "next-hop-ipv6-gw-addr1" with operation "merge".
     */
    public void markNextHopIpv6GwAddr1Merge() throws JNCException {
        markLeafMerge("nextHopIpv6GwAddr1");
    }

    /**
     * Marks the leaf "next-hop-ipv6-gw-addr1" with operation "create".
     */
    public void markNextHopIpv6GwAddr1Create() throws JNCException {
        markLeafCreate("nextHopIpv6GwAddr1");
    }

    /**
     * Marks the leaf "next-hop-ipv6-gw-addr1" with operation "delete".
     */
    public void markNextHopIpv6GwAddr1Delete() throws JNCException {
        markLeafDelete("nextHopIpv6GwAddr1");
    }

    /* Access methods for optional leaf child: "next-hop-ipv4-gw-addr2". */

    /**
     * Gets the value for child leaf "next-hop-ipv4-gw-addr2".
     * @return The value of the leaf.
     */
    public Ipv4AddressAndPrefixLength getNextHopIpv4GwAddr2Value()
            throws JNCException {
        return (Ipv4AddressAndPrefixLength)getValue("next-hop-ipv4-gw-addr2");
    }

    /**
     * Sets the value for child leaf "next-hop-ipv4-gw-addr2",
     * using a JNC type value.
     * @param nextHopIpv4GwAddr2Value The value to set.
     * @param nextHopIpv4GwAddr2Value used during instantiation.
     */
    public void setNextHopIpv4GwAddr2Value(Ipv4AddressAndPrefixLength nextHopIpv4GwAddr2Value)
            throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "next-hop-ipv4-gw-addr2",
            nextHopIpv4GwAddr2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "next-hop-ipv4-gw-addr2",
     * using a String value.
     * @param nextHopIpv4GwAddr2Value used during instantiation.
     */
    public void setNextHopIpv4GwAddr2Value(String nextHopIpv4GwAddr2Value)
            throws JNCException {
        setNextHopIpv4GwAddr2Value(new Ipv4AddressAndPrefixLength(nextHopIpv4GwAddr2Value));
    }

    /**
     * Unsets the value for child leaf "next-hop-ipv4-gw-addr2".
     */
    public void unsetNextHopIpv4GwAddr2Value() throws JNCException {
        delete("next-hop-ipv4-gw-addr2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "next-hop-ipv4-gw-addr2" leaf will not have a value.
     */
    public void addNextHopIpv4GwAddr2() throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "next-hop-ipv4-gw-addr2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "next-hop-ipv4-gw-addr2" with operation "replace".
     */
    public void markNextHopIpv4GwAddr2Replace() throws JNCException {
        markLeafReplace("nextHopIpv4GwAddr2");
    }

    /**
     * Marks the leaf "next-hop-ipv4-gw-addr2" with operation "merge".
     */
    public void markNextHopIpv4GwAddr2Merge() throws JNCException {
        markLeafMerge("nextHopIpv4GwAddr2");
    }

    /**
     * Marks the leaf "next-hop-ipv4-gw-addr2" with operation "create".
     */
    public void markNextHopIpv4GwAddr2Create() throws JNCException {
        markLeafCreate("nextHopIpv4GwAddr2");
    }

    /**
     * Marks the leaf "next-hop-ipv4-gw-addr2" with operation "delete".
     */
    public void markNextHopIpv4GwAddr2Delete() throws JNCException {
        markLeafDelete("nextHopIpv4GwAddr2");
    }

    /* Access methods for optional leaf child: "next-hop-ipv6-gw-addr2". */

    /**
     * Gets the value for child leaf "next-hop-ipv6-gw-addr2".
     * @return The value of the leaf.
     */
    public Ipv6AddressAndPrefixLength getNextHopIpv6GwAddr2Value()
            throws JNCException {
        return (Ipv6AddressAndPrefixLength)getValue("next-hop-ipv6-gw-addr2");
    }

    /**
     * Sets the value for child leaf "next-hop-ipv6-gw-addr2",
     * using a JNC type value.
     * @param nextHopIpv6GwAddr2Value The value to set.
     * @param nextHopIpv6GwAddr2Value used during instantiation.
     */
    public void setNextHopIpv6GwAddr2Value(Ipv6AddressAndPrefixLength nextHopIpv6GwAddr2Value)
            throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "next-hop-ipv6-gw-addr2",
            nextHopIpv6GwAddr2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "next-hop-ipv6-gw-addr2",
     * using a String value.
     * @param nextHopIpv6GwAddr2Value used during instantiation.
     */
    public void setNextHopIpv6GwAddr2Value(String nextHopIpv6GwAddr2Value)
            throws JNCException {
        setNextHopIpv6GwAddr2Value(new Ipv6AddressAndPrefixLength(nextHopIpv6GwAddr2Value));
    }

    /**
     * Unsets the value for child leaf "next-hop-ipv6-gw-addr2".
     */
    public void unsetNextHopIpv6GwAddr2Value() throws JNCException {
        delete("next-hop-ipv6-gw-addr2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "next-hop-ipv6-gw-addr2" leaf will not have a value.
     */
    public void addNextHopIpv6GwAddr2() throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "next-hop-ipv6-gw-addr2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "next-hop-ipv6-gw-addr2" with operation "replace".
     */
    public void markNextHopIpv6GwAddr2Replace() throws JNCException {
        markLeafReplace("nextHopIpv6GwAddr2");
    }

    /**
     * Marks the leaf "next-hop-ipv6-gw-addr2" with operation "merge".
     */
    public void markNextHopIpv6GwAddr2Merge() throws JNCException {
        markLeafMerge("nextHopIpv6GwAddr2");
    }

    /**
     * Marks the leaf "next-hop-ipv6-gw-addr2" with operation "create".
     */
    public void markNextHopIpv6GwAddr2Create() throws JNCException {
        markLeafCreate("nextHopIpv6GwAddr2");
    }

    /**
     * Marks the leaf "next-hop-ipv6-gw-addr2" with operation "delete".
     */
    public void markNextHopIpv6GwAddr2Delete() throws JNCException {
        markLeafDelete("nextHopIpv6GwAddr2");
    }

    /* Access methods for optional leaf child: "vlan-host-interface1". */

    /**
     * Gets the value for child leaf "vlan-host-interface1".
     * @return The value of the leaf.
     */
    public YangString getVlanHostInterface1Value() throws JNCException {
        return (YangString)getValue("vlan-host-interface1");
    }

    /**
     * Sets the value for child leaf "vlan-host-interface1",
     * using instance of generated typedef class.
     * @param vlanHostInterface1Value The value to set.
     * @param vlanHostInterface1Value used during instantiation.
     */
    public void setVlanHostInterface1Value(YangString vlanHostInterface1Value)
            throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "vlan-host-interface1",
            vlanHostInterface1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlan-host-interface1",
     * using a String value.
     * @param vlanHostInterface1Value used during instantiation.
     */
    public void setVlanHostInterface1Value(String vlanHostInterface1Value)
            throws JNCException {
        setVlanHostInterface1Value(new YangString(vlanHostInterface1Value));
    }

    /**
     * Unsets the value for child leaf "vlan-host-interface1".
     */
    public void unsetVlanHostInterface1Value() throws JNCException {
        delete("vlan-host-interface1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlan-host-interface1" leaf will not have a value.
     */
    public void addVlanHostInterface1() throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "vlan-host-interface1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlan-host-interface1" with operation "replace".
     */
    public void markVlanHostInterface1Replace() throws JNCException {
        markLeafReplace("vlanHostInterface1");
    }

    /**
     * Marks the leaf "vlan-host-interface1" with operation "merge".
     */
    public void markVlanHostInterface1Merge() throws JNCException {
        markLeafMerge("vlanHostInterface1");
    }

    /**
     * Marks the leaf "vlan-host-interface1" with operation "create".
     */
    public void markVlanHostInterface1Create() throws JNCException {
        markLeafCreate("vlanHostInterface1");
    }

    /**
     * Marks the leaf "vlan-host-interface1" with operation "delete".
     */
    public void markVlanHostInterface1Delete() throws JNCException {
        markLeafDelete("vlanHostInterface1");
    }

    /* Access methods for optional leaf child: "vlan-host-interface2". */

    /**
     * Gets the value for child leaf "vlan-host-interface2".
     * @return The value of the leaf.
     */
    public YangString getVlanHostInterface2Value() throws JNCException {
        return (YangString)getValue("vlan-host-interface2");
    }

    /**
     * Sets the value for child leaf "vlan-host-interface2",
     * using instance of generated typedef class.
     * @param vlanHostInterface2Value The value to set.
     * @param vlanHostInterface2Value used during instantiation.
     */
    public void setVlanHostInterface2Value(YangString vlanHostInterface2Value)
            throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "vlan-host-interface2",
            vlanHostInterface2Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlan-host-interface2",
     * using a String value.
     * @param vlanHostInterface2Value used during instantiation.
     */
    public void setVlanHostInterface2Value(String vlanHostInterface2Value)
            throws JNCException {
        setVlanHostInterface2Value(new YangString(vlanHostInterface2Value));
    }

    /**
     * Unsets the value for child leaf "vlan-host-interface2".
     */
    public void unsetVlanHostInterface2Value() throws JNCException {
        delete("vlan-host-interface2");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlan-host-interface2" leaf will not have a value.
     */
    public void addVlanHostInterface2() throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "vlan-host-interface2",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlan-host-interface2" with operation "replace".
     */
    public void markVlanHostInterface2Replace() throws JNCException {
        markLeafReplace("vlanHostInterface2");
    }

    /**
     * Marks the leaf "vlan-host-interface2" with operation "merge".
     */
    public void markVlanHostInterface2Merge() throws JNCException {
        markLeafMerge("vlanHostInterface2");
    }

    /**
     * Marks the leaf "vlan-host-interface2" with operation "create".
     */
    public void markVlanHostInterface2Create() throws JNCException {
        markLeafCreate("vlanHostInterface2");
    }

    /**
     * Marks the leaf "vlan-host-interface2" with operation "delete".
     */
    public void markVlanHostInterface2Delete() throws JNCException {
        markLeafDelete("vlanHostInterface2");
    }

    /* Access methods for container child: "lb-instances". */

    /**
     * Adds container entry "lbInstances", using an existing object.
     * @param lbInstances The object to add.
     * @return The added child.
     */
    public LbInstances addLbInstances(LbInstances lbInstances)
            throws JNCException {
        this.lbInstances = lbInstances;
        insertChild(lbInstances, childrenNames());
        return lbInstances;
    }

    /**
     * Adds container entry "lbInstances".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LbInstances addLbInstances() throws JNCException {
        LbInstances lbInstances = new LbInstances();
        this.lbInstances = lbInstances;
        insertChild(lbInstances, childrenNames());
        return lbInstances;
    }

    /**
     * Deletes container entry "lbInstances".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLbInstances() throws JNCException {
        this.lbInstances = null;
        String path = "lb-instances";
        return delete(path);
    }

    /* Access methods for container child: "data-instances". */

    /**
     * Adds container entry "dataInstances", using an existing object.
     * @param dataInstances The object to add.
     * @return The added child.
     */
    public DataInstances addDataInstances(DataInstances dataInstances)
            throws JNCException {
        this.dataInstances = dataInstances;
        insertChild(dataInstances, childrenNames());
        return dataInstances;
    }

    /**
     * Adds container entry "dataInstances".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public DataInstances addDataInstances() throws JNCException {
        DataInstances dataInstances = new DataInstances();
        this.dataInstances = dataInstances;
        insertChild(dataInstances, childrenNames());
        return dataInstances;
    }

    /**
     * Deletes container entry "dataInstances".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteDataInstances() throws JNCException {
        this.dataInstances = null;
        String path = "data-instances";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof LbInstances) lbInstances = (LbInstances)child;
        else if (child instanceof DataInstances) dataInstances = (DataInstances)child;
    }

}
