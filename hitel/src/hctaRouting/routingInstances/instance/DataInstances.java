/* 
 * @(#)DataInstances.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-routing", revision: "2014-09-18".
 */

package hctaRouting.routingInstances.instance;

import DataInstance;

import Element;

import ElementChildrenIterator;

import JNCException;

import Routing;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/routing
 * generated to "src/hctaRouting/routingInstances/instance/data-instances"
 * <p>
 * See line 248 in
 * hcta-routing.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class DataInstances extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty DataInstances object.
     */
    public DataInstances() {
        super(Routing.NAMESPACE, "data-instances");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public DataInstances clone() {
        return (DataInstances)cloneContent(new DataInstances());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public DataInstances cloneShallow() {
        return (DataInstances)cloneShallowContent(new DataInstances());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "data-instance",
        };
    }

    /* Access methods for list child: "data-instance". */

    /**
     * Gets list entry "dataInstance", with specified keys.
     * @param unitIdValue Key argument of child.
     */
    public DataInstance getDataInstance(YangUInt16 unitIdValue)
            throws JNCException {
        String path = "data-instance[unitId='" + unitIdValue + "']";
        return (DataInstance)searchOne(path);
    }

    /**
     * Gets list entry "dataInstance", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     */
    public DataInstance getDataInstance(String unitIdValue) throws JNCException {
        String path = "data-instance[unitId='" + unitIdValue + "']";
        return (DataInstance)searchOne(path);
    }

    /**
     * Iterator method for the list "data-instance".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator dataInstanceIterator() {
        return new ElementChildrenIterator(children, "data-instance");
    }

    /**
     * Adds list entry "dataInstance", using an existing object.
     * @param dataInstance The object to add.
     * @return The added child.
     */
    public DataInstance addDataInstance(DataInstance dataInstance)
            throws JNCException {
        insertChild(dataInstance, childrenNames());
        return dataInstance;
    }

    /**
     * Adds list entry "dataInstance", with specified keys.
     * @param unitIdValue Key argument of child.
     * @return The added child.
     */
    public DataInstance addDataInstance(YangUInt16 unitIdValue)
            throws JNCException {
        DataInstance dataInstance = new DataInstance(unitIdValue);
        return addDataInstance(dataInstance);
    }

    /**
     * Adds list entry "dataInstance", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     * @return The added child.
     */
    public DataInstance addDataInstance(String unitIdValue) throws JNCException {
        DataInstance dataInstance = new DataInstance(unitIdValue);
        return addDataInstance(dataInstance);
    }

    /**
     * Adds list entry "dataInstance".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public DataInstance addDataInstance() throws JNCException {
        DataInstance dataInstance = new DataInstance();
        insertChild(dataInstance, childrenNames());
        return dataInstance;
    }

    /**
     * Deletes list entry "dataInstance", with specified keys.
     * @param unitIdValue Key argument of child.
     */
    public void deleteDataInstance(YangUInt16 unitIdValue) throws JNCException {
        String path = "data-instance[unitId='" + unitIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "dataInstance", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     */
    public void deleteDataInstance(String unitIdValue) throws JNCException {
        String path = "data-instance[unitId='" + unitIdValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
