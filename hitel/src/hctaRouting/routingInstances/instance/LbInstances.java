/* 
 * @(#)LbInstances.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-routing", revision: "2014-09-18".
 */

package hctaRouting.routingInstances.instance;

import Element;

import ElementChildrenIterator;

import JNCException;

import LbInstance;

import Routing;

import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/routing
 * generated to "src/hctaRouting/routingInstances/instance/lb-instances"
 * <p>
 * See line 195 in
 * hcta-routing.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class LbInstances extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty LbInstances object.
     */
    public LbInstances() {
        super(Routing.NAMESPACE, "lb-instances");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public LbInstances clone() {
        return (LbInstances)cloneContent(new LbInstances());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public LbInstances cloneShallow() {
        return (LbInstances)cloneShallowContent(new LbInstances());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "lb-instance",
        };
    }

    /* Access methods for list child: "lb-instance". */

    /**
     * Gets list entry "lbInstance", with specified keys.
     * @param unitIdValue Key argument of child.
     */
    public LbInstance getLbInstance(YangUInt16 unitIdValue) throws JNCException {
        String path = "lb-instance[unitId='" + unitIdValue + "']";
        return (LbInstance)searchOne(path);
    }

    /**
     * Gets list entry "lbInstance", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     */
    public LbInstance getLbInstance(String unitIdValue) throws JNCException {
        String path = "lb-instance[unitId='" + unitIdValue + "']";
        return (LbInstance)searchOne(path);
    }

    /**
     * Iterator method for the list "lb-instance".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator lbInstanceIterator() {
        return new ElementChildrenIterator(children, "lb-instance");
    }

    /**
     * Adds list entry "lbInstance", using an existing object.
     * @param lbInstance The object to add.
     * @return The added child.
     */
    public LbInstance addLbInstance(LbInstance lbInstance) throws JNCException {
        insertChild(lbInstance, childrenNames());
        return lbInstance;
    }

    /**
     * Adds list entry "lbInstance", with specified keys.
     * @param unitIdValue Key argument of child.
     * @return The added child.
     */
    public LbInstance addLbInstance(YangUInt16 unitIdValue) throws JNCException {
        LbInstance lbInstance = new LbInstance(unitIdValue);
        return addLbInstance(lbInstance);
    }

    /**
     * Adds list entry "lbInstance", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     * @return The added child.
     */
    public LbInstance addLbInstance(String unitIdValue) throws JNCException {
        LbInstance lbInstance = new LbInstance(unitIdValue);
        return addLbInstance(lbInstance);
    }

    /**
     * Adds list entry "lbInstance".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LbInstance addLbInstance() throws JNCException {
        LbInstance lbInstance = new LbInstance();
        insertChild(lbInstance, childrenNames());
        return lbInstance;
    }

    /**
     * Deletes list entry "lbInstance", with specified keys.
     * @param unitIdValue Key argument of child.
     */
    public void deleteLbInstance(YangUInt16 unitIdValue) throws JNCException {
        String path = "lb-instance[unitId='" + unitIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "lbInstance", with specified keys.
     * The keys are specified as strings.
     * @param unitIdValue Key argument of child.
     */
    public void deleteLbInstance(String unitIdValue) throws JNCException {
        String path = "lb-instance[unitId='" + unitIdValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
