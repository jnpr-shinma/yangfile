/* 
 * @(#)LbInstance.java        1.0 09/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "hcta-routing", revision: "2014-09-18".
 */

package hctaRouting.routingInstances.instance.lbInstances;
import .tailfCommon.Ipv4AddressAndPrefixLength;
import .tailfCommon.Ipv6AddressAndPrefixLength;

import Element;

import JNCException;

import Leaf;

import Routing;

import YangUInt16;

import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://hitachi-cta.com/ns/routing
 * generated to "src/hctaRouting/routingInstances/instance/lbInstances/lb-instance"
 * <p>
 * See line 200 in
 * hcta-routing.yang
 *
 * @version 1.0 2014-12-09
 * @author Auto Generated
 */
public class LbInstance extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty LbInstance object.
     */
    public LbInstance() {
        super(Routing.NAMESPACE, "lb-instance");
    }

    /**
     * Constructor for an initialized LbInstance object,
     * 
     * @param unitIdValue Key argument of child.
     */
    public LbInstance(YangUInt16 unitIdValue) throws JNCException {
        super(Routing.NAMESPACE, "lb-instance");
        Leaf unitId = new Leaf(Routing.NAMESPACE, "unit-id");
        unitId.setValue(unitIdValue);
        insertChild(unitId, childrenNames());
    }

    /**
     * Constructor for an initialized LbInstance object,
     * with String keys.
     * @param unitIdValue Key argument of child.
     */
    public LbInstance(String unitIdValue) throws JNCException {
        super(Routing.NAMESPACE, "lb-instance");
        Leaf unitId = new Leaf(Routing.NAMESPACE, "unit-id");
        unitId.setValue(new YangUInt16(unitIdValue));
        insertChild(unitId, childrenNames());
    }

    /**
     * Constructor for an initialized LbInstance object,
     * with keys of built in Java types.
     * @param unitIdValue Key argument of child.
     */
    public LbInstance(int unitIdValue) throws JNCException {
        super(Routing.NAMESPACE, "lb-instance");
        Leaf unitId = new Leaf(Routing.NAMESPACE, "unit-id");
        unitId.setValue(new YangUInt16(unitIdValue));
        insertChild(unitId, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public LbInstance clone() {
        LbInstance copy;
        try {
            copy = new LbInstance(getUnitIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (LbInstance)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public LbInstance cloneShallow() {
        LbInstance copy;
        try {
            copy = new LbInstance(getUnitIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (LbInstance)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "unit-id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "unit-id",
            "if1-ipv4-addr",
            "if1-ipv6-addr",
            "if2-ipv4-addr",
            "if2-ipv6-addr",
        };
    }

    /* Access methods for leaf child: "unit-id". */

    /**
     * Gets the value for child leaf "unit-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getUnitIdValue() throws JNCException {
        return (YangUInt16)getValue("unit-id");
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using instance of generated typedef class.
     * @param unitIdValue The value to set.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(YangUInt16 unitIdValue) throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "unit-id",
            unitIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using Java primitive values.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(int unitIdValue) throws JNCException {
        setUnitIdValue(new YangUInt16(unitIdValue));
    }

    /**
     * Sets the value for child leaf "unit-id",
     * using a String value.
     * @param unitIdValue used during instantiation.
     */
    public void setUnitIdValue(String unitIdValue) throws JNCException {
        setUnitIdValue(new YangUInt16(unitIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unit-id" leaf will not have a value.
     */
    public void addUnitId() throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "unit-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "if1-ipv4-addr". */

    /**
     * Gets the value for child leaf "if1-ipv4-addr".
     * @return The value of the leaf.
     */
    public Ipv4AddressAndPrefixLength getIf1Ipv4AddrValue() throws JNCException {
        return (Ipv4AddressAndPrefixLength)getValue("if1-ipv4-addr");
    }

    /**
     * Sets the value for child leaf "if1-ipv4-addr",
     * using a JNC type value.
     * @param if1Ipv4AddrValue The value to set.
     * @param if1Ipv4AddrValue used during instantiation.
     */
    public void setIf1Ipv4AddrValue(Ipv4AddressAndPrefixLength if1Ipv4AddrValue)
            throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "if1-ipv4-addr",
            if1Ipv4AddrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "if1-ipv4-addr",
     * using a String value.
     * @param if1Ipv4AddrValue used during instantiation.
     */
    public void setIf1Ipv4AddrValue(String if1Ipv4AddrValue)
            throws JNCException {
        setIf1Ipv4AddrValue(new Ipv4AddressAndPrefixLength(if1Ipv4AddrValue));
    }

    /**
     * Unsets the value for child leaf "if1-ipv4-addr".
     */
    public void unsetIf1Ipv4AddrValue() throws JNCException {
        delete("if1-ipv4-addr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "if1-ipv4-addr" leaf will not have a value.
     */
    public void addIf1Ipv4Addr() throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "if1-ipv4-addr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "if1-ipv4-addr" with operation "replace".
     */
    public void markIf1Ipv4AddrReplace() throws JNCException {
        markLeafReplace("if1Ipv4Addr");
    }

    /**
     * Marks the leaf "if1-ipv4-addr" with operation "merge".
     */
    public void markIf1Ipv4AddrMerge() throws JNCException {
        markLeafMerge("if1Ipv4Addr");
    }

    /**
     * Marks the leaf "if1-ipv4-addr" with operation "create".
     */
    public void markIf1Ipv4AddrCreate() throws JNCException {
        markLeafCreate("if1Ipv4Addr");
    }

    /**
     * Marks the leaf "if1-ipv4-addr" with operation "delete".
     */
    public void markIf1Ipv4AddrDelete() throws JNCException {
        markLeafDelete("if1Ipv4Addr");
    }

    /* Access methods for optional leaf child: "if1-ipv6-addr". */

    /**
     * Gets the value for child leaf "if1-ipv6-addr".
     * @return The value of the leaf.
     */
    public Ipv6AddressAndPrefixLength getIf1Ipv6AddrValue() throws JNCException {
        return (Ipv6AddressAndPrefixLength)getValue("if1-ipv6-addr");
    }

    /**
     * Sets the value for child leaf "if1-ipv6-addr",
     * using a JNC type value.
     * @param if1Ipv6AddrValue The value to set.
     * @param if1Ipv6AddrValue used during instantiation.
     */
    public void setIf1Ipv6AddrValue(Ipv6AddressAndPrefixLength if1Ipv6AddrValue)
            throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "if1-ipv6-addr",
            if1Ipv6AddrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "if1-ipv6-addr",
     * using a String value.
     * @param if1Ipv6AddrValue used during instantiation.
     */
    public void setIf1Ipv6AddrValue(String if1Ipv6AddrValue)
            throws JNCException {
        setIf1Ipv6AddrValue(new Ipv6AddressAndPrefixLength(if1Ipv6AddrValue));
    }

    /**
     * Unsets the value for child leaf "if1-ipv6-addr".
     */
    public void unsetIf1Ipv6AddrValue() throws JNCException {
        delete("if1-ipv6-addr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "if1-ipv6-addr" leaf will not have a value.
     */
    public void addIf1Ipv6Addr() throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "if1-ipv6-addr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "if1-ipv6-addr" with operation "replace".
     */
    public void markIf1Ipv6AddrReplace() throws JNCException {
        markLeafReplace("if1Ipv6Addr");
    }

    /**
     * Marks the leaf "if1-ipv6-addr" with operation "merge".
     */
    public void markIf1Ipv6AddrMerge() throws JNCException {
        markLeafMerge("if1Ipv6Addr");
    }

    /**
     * Marks the leaf "if1-ipv6-addr" with operation "create".
     */
    public void markIf1Ipv6AddrCreate() throws JNCException {
        markLeafCreate("if1Ipv6Addr");
    }

    /**
     * Marks the leaf "if1-ipv6-addr" with operation "delete".
     */
    public void markIf1Ipv6AddrDelete() throws JNCException {
        markLeafDelete("if1Ipv6Addr");
    }

    /* Access methods for optional leaf child: "if2-ipv4-addr". */

    /**
     * Gets the value for child leaf "if2-ipv4-addr".
     * @return The value of the leaf.
     */
    public Ipv4AddressAndPrefixLength getIf2Ipv4AddrValue() throws JNCException {
        return (Ipv4AddressAndPrefixLength)getValue("if2-ipv4-addr");
    }

    /**
     * Sets the value for child leaf "if2-ipv4-addr",
     * using a JNC type value.
     * @param if2Ipv4AddrValue The value to set.
     * @param if2Ipv4AddrValue used during instantiation.
     */
    public void setIf2Ipv4AddrValue(Ipv4AddressAndPrefixLength if2Ipv4AddrValue)
            throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "if2-ipv4-addr",
            if2Ipv4AddrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "if2-ipv4-addr",
     * using a String value.
     * @param if2Ipv4AddrValue used during instantiation.
     */
    public void setIf2Ipv4AddrValue(String if2Ipv4AddrValue)
            throws JNCException {
        setIf2Ipv4AddrValue(new Ipv4AddressAndPrefixLength(if2Ipv4AddrValue));
    }

    /**
     * Unsets the value for child leaf "if2-ipv4-addr".
     */
    public void unsetIf2Ipv4AddrValue() throws JNCException {
        delete("if2-ipv4-addr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "if2-ipv4-addr" leaf will not have a value.
     */
    public void addIf2Ipv4Addr() throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "if2-ipv4-addr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "if2-ipv4-addr" with operation "replace".
     */
    public void markIf2Ipv4AddrReplace() throws JNCException {
        markLeafReplace("if2Ipv4Addr");
    }

    /**
     * Marks the leaf "if2-ipv4-addr" with operation "merge".
     */
    public void markIf2Ipv4AddrMerge() throws JNCException {
        markLeafMerge("if2Ipv4Addr");
    }

    /**
     * Marks the leaf "if2-ipv4-addr" with operation "create".
     */
    public void markIf2Ipv4AddrCreate() throws JNCException {
        markLeafCreate("if2Ipv4Addr");
    }

    /**
     * Marks the leaf "if2-ipv4-addr" with operation "delete".
     */
    public void markIf2Ipv4AddrDelete() throws JNCException {
        markLeafDelete("if2Ipv4Addr");
    }

    /* Access methods for optional leaf child: "if2-ipv6-addr". */

    /**
     * Gets the value for child leaf "if2-ipv6-addr".
     * @return The value of the leaf.
     */
    public Ipv6AddressAndPrefixLength getIf2Ipv6AddrValue() throws JNCException {
        return (Ipv6AddressAndPrefixLength)getValue("if2-ipv6-addr");
    }

    /**
     * Sets the value for child leaf "if2-ipv6-addr",
     * using a JNC type value.
     * @param if2Ipv6AddrValue The value to set.
     * @param if2Ipv6AddrValue used during instantiation.
     */
    public void setIf2Ipv6AddrValue(Ipv6AddressAndPrefixLength if2Ipv6AddrValue)
            throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "if2-ipv6-addr",
            if2Ipv6AddrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "if2-ipv6-addr",
     * using a String value.
     * @param if2Ipv6AddrValue used during instantiation.
     */
    public void setIf2Ipv6AddrValue(String if2Ipv6AddrValue)
            throws JNCException {
        setIf2Ipv6AddrValue(new Ipv6AddressAndPrefixLength(if2Ipv6AddrValue));
    }

    /**
     * Unsets the value for child leaf "if2-ipv6-addr".
     */
    public void unsetIf2Ipv6AddrValue() throws JNCException {
        delete("if2-ipv6-addr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "if2-ipv6-addr" leaf will not have a value.
     */
    public void addIf2Ipv6Addr() throws JNCException {
        setLeafValue(Routing.NAMESPACE,
            "if2-ipv6-addr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "if2-ipv6-addr" with operation "replace".
     */
    public void markIf2Ipv6AddrReplace() throws JNCException {
        markLeafReplace("if2Ipv6Addr");
    }

    /**
     * Marks the leaf "if2-ipv6-addr" with operation "merge".
     */
    public void markIf2Ipv6AddrMerge() throws JNCException {
        markLeafMerge("if2Ipv6Addr");
    }

    /**
     * Marks the leaf "if2-ipv6-addr" with operation "create".
     */
    public void markIf2Ipv6AddrCreate() throws JNCException {
        markLeafCreate("if2Ipv6Addr");
    }

    /**
     * Marks the leaf "if2-ipv6-addr" with operation "delete".
     */
    public void markIf2Ipv6AddrDelete() throws JNCException {
        markLeafDelete("if2Ipv6Addr");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
